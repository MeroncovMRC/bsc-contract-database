
// File: contracts/CryptoStal.sol
/*
⛏ RedCat DAO
⛏ Official: https://redcatclub.com
⛏ WhitePaper: https://whitepaper.redcatclub.com/home/redcat-game/cryptostal
⛏ Discord: https://discord.gg/redcatdao

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&!!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5  5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&PP .PP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&5BG .BBP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#YB&P  G&B5&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#?P#B^  ~#&5J&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B?5G#!    ?#BYJ&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B?5PB?      YBPY?&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G?5PGJ       .PGPY?&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G?5PPY.    .   ^PPPY?&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P?5PP5:    .:    !PPGY?&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P?PPP5^  ........  7PGGY?&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&JPPGP!....      ....JGBB5P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PGY~.              :!5GP&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&?^~.                ^~~J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?^77:                ^7!:Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5.!~^::.            :::^~!.G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B:!!!~  .::.      .::.  !!!~:#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&^!7~!.    .^^.  .^:.    :7~7^!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@!^7~^        .^^^:.       .~~!:?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?.!~:      ..::.......       ^~~.5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&B#Y.!!.     .::.        ...      ^!!.P##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@#PY?Y5.?7.    ::                :.    :?!:PYJ5G@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@P!!JY:!J:  .^~^~^              ~!~~.   ~J~^5Y?J#@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@BYJY^~YJ:.~7~.  ~~            !~  :!!: ~JJ:!P5P&@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@G?Y!:Y5Y!!~.     ^~          ~^     :!~7YYJ.JP5#@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@YJ?.JPY77.        ^^       .~:        ^!7YP?.55G@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@??:?Y7!5G.         :^.    .^.         ^GJ~7P7^75@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@&7:~!~JB#G:          .^.  .:.          ~GBG7^!^~5@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@&!:^^?GGP5J:          .:..:           :JPPBP~::^J@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@&@@@@@@&J!!~^!5GBBPYJ!^. .:^~~^^^^~~^::::~!7JYGG57^^!~~Y@@@@@@&B@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@B&@@@@@@&B5J!^!5PPPPP5Y?JJ7~::::^^!7?JY5YYYYYJ!~!J5PB@@@@@@@BJB@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@&B#@@@@@@@@@@#PYJ7~~!?JYY5PPGGGPG&&#GP555YJ5PG#&@@@@@@@@@@@G!5@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@#&B&@@@@@@@@@@@@&BPGB#&#G5J7~~^~7J5B#&&&&@@@@@@@@@@@@@@@@G~5@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@&#@##@@@@@@@@@@@@@@@&#GY?.        ^JYP#&@@@@@@@@@@@@@@@@B!P@@@@@@@@@@@@@@@@@@@@@
&#&@@@@@@@@@@@@@@@@@@#&@&#&@@@@@@@@@@@@#BBBBPJ7~^^^~!?5GBBBB#@@@@@@@@@@@@@@B?5@@@@@@@@@@@@@@@@@@&BG#
@@&&@@@@@@@@@@@@@@@@@@#@@@#&@@@@@@@@@&B#####BPJ!^:^~!?5######B&@@@@@@@@@@@BJP@@@@@@@@@@@@@@@@@&PJP&@
@@@&&&&@@@@@@@@@@@@@@@&#@@@&#&@@@@@@@B#####B!.        .7B####BB@@@@@@@@@@B?P@@@@@@@@@@@@@@@@&PY5B@@@
@@@@@&&&&&@@@@@@@@@@@@@##@@@@#&@@@@@BG#####!            !#####PB@@@@@@@@B?P@@@@@@@@@@@@@@@#P5P#@@@@@
@@@@@@&&@@&#&@@@@@@@@@@@B&@@@&B#@@@@GPBBB#G.            .GBBBBPG@@@@&###?P@@@@@@@@@@@@@@#PYP#@@@@@@@
@@@@@@@@&@@##B#@@@@@@@@@@BBGBB&@@@@@B5PGGGG!            7GGGGP5B@@@@@&BBPB@@@@@@@@@@@@#PYG#&@@@@@@@@
@@@@@@@@@&&PYB##&&@@@@@@@@&&@@@@@@@@@55PPPPP7.        :7PPPP5Y5@@@@@@@@@@&&@@@@@@@@@#PY5G&@@@@@@@@@@
@@@@@@@@@@&&G5B#&&#&@@@@@@@@@@@@@@@@@&5Y55PPP5?!~^^~!J5PPP55Y5&@@@@@@@@@@@@@@@@@&&#BGGG#&@@@@@@@@@@@
@@@@@@@@@@@@#GGB#G5B@@@@@@@@@@@@@@@@@@@GYYPPPPPYYBG5GPPGBG5YG@@@@@@@@@@@@@@@@@@@GPG##B&@@@@@@@@@@@@@
@@@@@@@@@@@@@&BG##BGB&@@@@@@@@@@@@@@@@@@&GPYY555YGG5555Y5B#&@@@@@@@@@@@@@@@@@&#B#&BGP&@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@&&##&#G#@@@@@@@@@@@@@@@&&&@@&BGPPJPB5PPG###GPYYG#@@@@@@@@@@@&##&@@&B##@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@&#&@&GG&@@@@@@@&#GPY?JY55PGB#G?BBPPP5J???7!!!7Y5B&@@@@&GP#@@@@#B&@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@&##5?B&#BBPY?7J5555555J?777!~:5Y~!77!7JY5555YJ!~?5GBB#BJ5&@B#@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@BJ5&@BY?!^^7JY5J!!~^:...:!7!!7G7^:.   .^~!?YYJ?~:~75#@&YJG#@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@&#B#BBP7!~?JJJ!          ~J!::5Y.         .7JJJJ~!7PB####@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@GPYYJ77JY:          ^7:  7J.          ^YJ77JJ5YB@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@GJB5B5?7?:         ^7:.:::~!.         :J!?55YBJB@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@B5GB5BPY7:        ^7:      ~!.        :7Y5PJBYJ#@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@&PPBPPGY?7!.     ~7.        ^7.     .!77YPYGPJ5&@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@#GYPBPGP~ ~?!.  !7.          :7:  .!?~ ^55GGJJ5#@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@#Y?J5#5GJ  .!J!?J             :J^!Y!   75PBY7~?B@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@&BPYG#5P7.  .!5P?^          ^?G5!.   !Y5#5J5B#@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&B?J!.    .!JJ7:   .^7JJ!:    .!??##&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G7?!^      .^7J7??!^.      :!??B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@PJ??!       ~?77?^       ~??JG@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&YY7Y7   .!7~.  .~7~.   7Y?J5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&JJ7?::!!:        ^!!:.77JY&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#JYJ?!:            :!7JYJ#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B5G?                ~G5#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PBG5!:            :!YBBP#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P5GBB5JY?~.    .~?YJJGGG5P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BJGGGP~.~?YJ~!JY?~..JPPPYY@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G?PPP5:   ^&B:   .JPPPJY@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B?PPGY.  .#B    ?PPPJ5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B?5PGJ  .#B.  7GPP?5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B?5GB7 .&#. !BPP?P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B?5B#~.&# ^#BP?P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#JG&B^&#:B&G?G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#5#&G&#P&#YB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&G#&@@&&G&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&G#@@#G&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&B@@B&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/

//SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import '@openzeppelin/contracts/access/Ownable.sol';
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import './RedCat.sol';
import "./Arrays.sol";

contract CryptoStal is Ownable, ReentrancyGuard {

    using Arrays for uint[];
    // constants
    RedCat RedCatContract = RedCat(0x4eac4292cA228708fFA69a3f320A81a01580aCF3);
    uint constant NO_RARITY = 99;

    // attributes
    uint public minDigCount = 1;
    uint public maxDigCount = 10;
    uint public minDigPrice = 0.001 ether;
    uint public maxDigPrice = 0.01 ether;
    uint public baseDigPool = 10 ether;
    uint public baseRedCatPoolRate = 10;
    uint public armsCount = 2;
    uint public roleCount = 12;
    uint public thingsCount = 10;
    address public redCatPoolAddress;
    mapping(address => string) playerName;
    Probability gameProbability;
    Reward gameReward;

    // structs
    struct Probability {
        uint[] commonProbability;
        uint[] rareProbability;
        uint[] legendProbability;
    }

    struct Reward {
        uint[] commonReward;
        uint[] rareReward;
        uint[] legendReward;
    }

    // modifiers
    modifier canDigCryptoStal(uint _digCount) {
        require(_digCount >= minDigCount, "over minDigCount don't play");
        require(_digCount <= maxDigCount, "over maxDigCount don't play");
        require(msg.value / _digCount >= minDigPrice, "over minDigPrice don't play");
        require(msg.value / _digCount <= maxDigPrice, "over maxDigPrice don't play");
        require(msg.sender == tx.origin, "contract don't play");
        _;
    }

    // events
    event RedCatDigLog(address indexed digAddress, uint digCount, uint indexed rarity, uint armsNumber, uint roleNumber, uint thingsNumber, uint indexed cryptoStal);
    event AddPool(address sponsor, uint money);
    event OverPool(uint money);
    event CrystalShards();

    receive() external payable {
        emit AddPool(msg.sender, msg.value);
    }

    constructor(uint[] memory _commonProbability, uint[] memory _commonReward, uint[] memory _rareProbability, uint[] memory _rareReward, uint[] memory _legendProbability, uint[] memory _legendReward) {
        gameProbability = Probability(_commonProbability, _rareProbability, _legendProbability);
        gameReward = Reward(_commonReward, _rareReward, _legendReward);
    }

    // dig
    function redCatDig(uint _tokenId, uint _digCount) external payable nonReentrant canDigCryptoStal(_digCount) {
        require(isRedCatOwner(msg.sender, _tokenId), "cat isn't your");

        checkBasePool(msg.value);

        uint oncePrice = msg.value / _digCount;

        (, uint rarity) = getRarity(_tokenId);

        for(uint count = 1; count <= _digCount; count++) {
            uint reward;

            if (rarity == 0 || rarity == 1) {
                uint end = gameProbability.rareProbability[gameProbability.rareProbability.length - 1];
                uint myRandom = (random(rarity, count) % end) + 1;
                reward = oncePrice * gameReward.rareReward[gameProbability.rareProbability.findUpperBound(myRandom)] / 100;
            } else {
                uint end = gameProbability.legendProbability[gameProbability.legendProbability.length - 1];
                uint myRandom = (random(rarity, count) % end) + 1;
                reward = oncePrice * gameReward.legendReward[gameProbability.legendProbability.findUpperBound(myRandom)] / 100;
            }

            (bool success,) = msg.sender.call{value: reward}("");
            require(success, "msg.sender pay failed");

            (uint armsNumber, uint roleNumber, uint thingsNumber) = calculateNumber(reward, rarity, count);

            emit RedCatDigLog(msg.sender, count, rarity, armsNumber, roleNumber, thingsNumber, reward);
        }
    }

    // no redCat dig
    function dig(uint _digCount) external payable nonReentrant canDigCryptoStal(_digCount) {
        checkBasePool(msg.value);

        uint oncePrice = msg.value / _digCount;

        for(uint count = 1; count <= _digCount; count++) {
            uint end = gameProbability.commonProbability[gameProbability.commonProbability.length - 1];
            uint myRandom = (random(NO_RARITY, count) % end) + 1;
            uint reward = oncePrice * gameReward.commonReward[gameProbability.commonProbability.findUpperBound(myRandom)] / 100;

            (bool success,) = msg.sender.call{value: reward}("");
            require(success, "msg.sender pay failed");

            (uint armsNumber, uint roleNumber, uint thingsNumber) = calculateNumber(reward, NO_RARITY, count);

            emit RedCatDigLog(msg.sender, count, NO_RARITY, armsNumber, roleNumber, thingsNumber, reward);
        }
    }

    function setPlayerName(string memory _name) external {
        playerName[msg.sender] = _name;
    }

    // only owner
    function clearCrystalShards() external onlyOwner {
        (bool success,) = owner().call{value: getPool()}("");
        require(success, "owner pay failed");
        emit CrystalShards();
    }

    function setMinDigPrice(uint _minDigPrice) external onlyOwner {
        minDigPrice = _minDigPrice;
    }

    function setMaxDigPrice(uint _maxDigPrice) external onlyOwner {
        maxDigPrice = _maxDigPrice;
    }

    function setMinDigCount(uint _minDigCount) external onlyOwner {
        minDigCount = _minDigCount;
    }

    function setMaxDigCount(uint _maxDigCount) external onlyOwner {
        maxDigCount = _maxDigCount;
    }

    function setBaseDigPool(uint _baseDigPool) external onlyOwner {
        baseDigPool = _baseDigPool;
    }

    function setBaseRedCatPoolRate(uint _baseRedCatPoolRate) external onlyOwner {
        baseRedCatPoolRate = _baseRedCatPoolRate;
    }

    function setArmsCount(uint _armsCount) external onlyOwner {
        armsCount = _armsCount;
    }

    function setRoleCount(uint _roleCount) external onlyOwner {
        roleCount = _roleCount;
    }

    function setThingsCount(uint _thingsCount) external onlyOwner {
        thingsCount = _thingsCount;
    }

    function setRedCatPoolAddress(address _redCatPoolAddress) external onlyOwner {
        redCatPoolAddress = _redCatPoolAddress;
    }

    // set probability
    function setCommonProbability(uint[] calldata _commonProbability) external onlyOwner {
        gameProbability.commonProbability = _commonProbability;
    }

    function setRareProbability(uint[] calldata _rareProbability) external onlyOwner {
        gameProbability.rareProbability = _rareProbability;
    }

    function setLegendProbability(uint[] calldata _legendProbability) external onlyOwner {
        gameProbability.legendProbability = _legendProbability;
    }

    // set reward
    function setCommonReward(uint[] calldata _commonReward) external onlyOwner {
        gameReward.commonReward = _commonReward;
    }

    function setRareReward(uint[] calldata _rareReward) external onlyOwner {
        gameReward.rareReward = _rareReward;
    }

    function setLegendReward(uint[] calldata _legendReward) external onlyOwner {
        gameReward.legendReward = _legendReward;
    }

    // getter
    function getPlayerName(address _player) public view returns (string memory) {
        return playerName[_player];
    }

    function getPool() public view returns (uint) {
        return address(this).balance;
    }

    function getRarity(uint _tokenId) public view returns (uint, uint) {
        return RedCatContract.getRarity(_tokenId);
    }

    function isRedCatOwner(address sender, uint _tokenId) public view returns (bool) {
        if (sender == RedCatContract.ownerOf(_tokenId)) {
            return true;
        } else {
            return false;
        }
    }

    function getGameProbability(uint index) public view returns (uint[] memory probability) {
        require(index < 3, "error index");
        if(index == 0) {
            probability = gameProbability.commonProbability;
        } else if(index == 1) {
            probability = gameProbability.rareProbability;
        } else {
            probability = gameProbability.legendProbability;
        }
    }

    function getGameReward(uint index) public view returns (uint[] memory reward) {
        require(index < 3, "error index");
        if(index == 0) {
            reward = gameReward.commonReward;
        } else if(index == 1) {
            reward = gameReward.rareReward;
        } else {
            reward = gameReward.legendReward;
        }
    }

    function calculateNumber(uint reward, uint rarity, uint count) private view returns (uint armsNumber, uint roleNumber, uint thingsNumber) {
        armsNumber = (random(rarity, count)) % armsCount;
        roleNumber = (random(rarity, count) - reward) % roleCount;
        thingsNumber = (random(rarity, count) + reward) % thingsCount;
    }

    function random(uint rarity, uint count) private view returns (uint) {
        return uint(keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.number, block.timestamp, rarity, count)));
    }

    function checkBasePool(uint value) private {
        if (getPool() - value > baseDigPool) {
            uint forRedCat = msg.value * baseRedCatPoolRate / 100;
            (bool success,) = redCatPoolAddress.call{value: forRedCat}("");
            require(success, "redCatPoolAddress pay failed");
            emit OverPool(forRedCat);
        }
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: contracts/RedCat.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;


interface RedCat {
    function getRarity(uint _tokenId) external view returns (uint, uint);
    function ownerOf(uint _tokenId) external view returns (address);
}

// File: contracts/Arrays.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

library Arrays {

    function findUpperBound(uint[] storage array, uint element) internal view returns (uint) {
        uint low = 0;
        uint high = array.length;

        while (low < high) {
            uint256 mid = average(low, high);
            if (array[mid] > element) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        if (low > 0 && array[low - 1] == element) {
            return low - 1;
        } else {
            return low;
        }
    }

    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        return (a & b) + (a ^ b) / 2;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

