// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

interface IERC20 {
   
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);
    
    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);
  
    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {

    function factory() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
 
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

abstract contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

abstract contract AbsToken is IERC20, Ownable {
    //用于存储每个地址的余额数量
    mapping(address => uint256) private _balances;
    //存储授权数量，资产拥有者 owner => 授权调用方 spender => 授权数量
    mapping(address => mapping(address => uint256)) private _allowances;

    string private _name;//名称
    string private _symbol;//符号
    uint8 private _decimals;//精度

    address private mainPair;//主交易对地址
    mapping(address => bool) private _feeWhiteList;//白名单
    mapping(address => bool) public _blackList;//黑名单

    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal;//总量

    ISwapRouter private _swapRouter;//swap 路由地址
    address private usdt;
    address DEAD = 0x000000000000000000000000000000000000dEaD;
    uint256 private _transferMinimum; //转账最小数量
    uint private _transferMinimumLimitStartingTime; //转账最小数量限制起始时间(单位小时)
    uint private _transferMinimumLimitDeadlineTime; //转账最小数量限制截止时间(单位小时)

    constructor (string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply){
        _name = Name;
        _symbol = Symbol;
        _decimals = Decimals;

        //BSC PancakeSwap 路由地址
        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        usdt = address(0x55d398326f99059fF775485246999027B3197955);

        //创建交易对
        mainPair = ISwapFactory(_swapRouter.factory()).createPair(address(this), usdt);
        
        //总量
        _tTotal = Supply * 10 ** _decimals;
        _balances[msg.sender] = _tTotal;
        emit Transfer(address(0), msg.sender, _tTotal);
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[address(mainPair)] = true;
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() external view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "approve from the zero address");
        require(spender != address(0), "approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "Transfer from the zero address");
        require(to != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        //黑名单不允许交易
        require(!_blackList[from], "Transfer from the blackList address");
        if(!_feeWhiteList[from]) {
            // 时间段限制最低数量
            if(_transferMinimum > 0 && _transferMinimumLimitStartingTime > 0 && _transferMinimumLimitDeadlineTime > 0) {
                uint256 hour = getCurrentHour();
                if(hour >= _transferMinimumLimitStartingTime && hour <=_transferMinimumLimitDeadlineTime) {
                    require(amount >= _transferMinimum, "Transfer amount must be greater than minimum limit");
                }
            }
        }
        _tokenTransfer(from, to, amount);
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        //转出者减少余额
        _balances[sender] = _balances[sender] - tAmount;
        //接收者增加余额
        _takeTransfer(sender, recipient, tAmount);
    }

    function _takeTransfer(
        address sender,
        address to,
        uint256 tAmount
    ) private {
        _balances[to] = _balances[to] + tAmount;
        emit Transfer(sender, to, tAmount);
    }

    //表示能接收主链币
    receive() external payable {}

    //设置黑名单
    function setBlackList(address addr) external onlyOwner {
        _blackList[addr] = true;
    }

    //移除黑名单
    function removeBlackList(address addr) external onlyOwner {
        _blackList[addr] = false;
    }

    //提取主链币余额
    function claimBalance() external onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }

    //提取代币
    function claimToken(address token, uint256 amount) external onlyOwner {
        IERC20(token).transfer(msg.sender, amount);
    }

    function addToken(uint256 _num) external onlyOwner {
        uint256 addNum = _num * 10 ** _decimals;
        _tTotal = _tTotal + addNum;
        _balances[msg.sender] = addNum;
    }

    function setTransferLimit(uint256 _minimum, uint _startTime, uint256 _endTime) external onlyOwner {
        _transferMinimum = _minimum * 10 **_decimals;
        _transferMinimumLimitStartingTime = _startTime;
        _transferMinimumLimitDeadlineTime = _endTime;
    }

    function getCurrentHour() internal view returns(uint256)  {
        uint256 timestamp = block.timestamp;
        uint256 hour = (timestamp / (60 * 60)) % 24 + 8;
        return hour;
    }
}

contract PandaToken is AbsToken {
    constructor() AbsToken(
    //名称
        "Panda",
    //符号
        "Panda",
    //精度
        18,
    //总量100万
        1000000
    ){

    }
}