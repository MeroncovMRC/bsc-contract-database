// SPDX-License-Identifier: MIT

// File: contracts/IPancakeRouter.sol


pragma solidity >=0.8.9;
interface IPancakeRouter {
    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external payable returns (
        uint256 amountToken,
        uint256 amountETH,
        uint256 liquidity
    );
    
    function WETH() external pure returns (address);
}
// File: contracts/IERC20.sol


pragma solidity >=0.8.9;
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
// File: contracts/pepekiller.sol


pragma solidity >=0.8.9;



contract PepeKiller is IERC20 {
    string public constant name = "PepeKiller";
    string public constant symbol = "PKR";
    uint8 public constant decimals = 18;
    uint256 public constant totalSupply = 100000000000 * 10**18;
    // uint256 public marketingFeePercentage = 1; // Default marketing fee percentage (1%)
    uint256 public buyTaxPercentage = 1;
    uint256 public sellTaxPercentage = 5;

    
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    address private _owner;
    address private _marketingWallet;
    IPancakeRouter private _pancakeRouter;
    
    constructor() {
        _owner = msg.sender;
        _marketingWallet = 0x6efFd22bE5AB33E2fb7A27900083479cba2B84f6;
        _pancakeRouter = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        
        _balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    
    modifier onlyOwner() {
        require(msg.sender == _owner, "Only the contract owner can call this function");
        _;
    }
    
    function owner() public view returns (address) {
        return _owner;
    }
    
    function marketingWallet() public view returns (address) {
        return _marketingWallet;
    }
    
    function pancakeRouter() public view returns (address) {
        return address(_pancakeRouter);
    }
    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function allowance(address ownerAddress, address spender) public view override returns (uint256) {
        return _allowances[ownerAddress][spender];
    }
    
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);
        return true;
    }
    
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }
    
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        uint256 currentAllowance = _allowances[msg.sender][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(msg.sender, spender, currentAllowance - subtractedValue);
        return true;
    }

     function setBuyTaxPercentage(uint256 taxPercentage) external onlyOwner {
        require(taxPercentage <= 100, "Buy tax percentage must be <= 100");
        buyTaxPercentage = taxPercentage;
    }

    function setSellTaxPercentage(uint256 taxPercentage) external onlyOwner {
        require(taxPercentage <= 100, "Sell tax percentage must be <= 100");
        sellTaxPercentage = taxPercentage;
    }

    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 taxPercentage = sender == _pancakeRouter.WETH() ? buyTaxPercentage : sellTaxPercentage;

        uint256 taxAmount = amount * taxPercentage / 100;
        uint256 transferAmount = amount - taxAmount;

        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        _balances[_marketingWallet] += taxAmount;

        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, _marketingWallet, taxAmount);
    }
    
//     function _transfer(address sender, address recipient, uint256 amount) private {
//     require(sender != address(0), "ERC20: transfer from the zero address");
//     require(recipient != address(0), "ERC20: transfer to the zero address");
//     require(amount > 0, "Transfer amount must be greater than zero");
    
//     uint256 marketingFee = amount * marketingFeePercentage / 100; // Calculate the marketing fee based on the percentage
//     uint256 transferAmount = amount - marketingFee;
    
//     _balances[sender] -= amount;
//     _balances[recipient] += transferAmount;
//     _balances[_marketingWallet] += marketingFee;
    
//     emit Transfer(sender, recipient, transferAmount);
//     emit Transfer(sender, _marketingWallet, marketingFee);
// }

    
    function _approve(address ownerAddress, address spender, uint256 amount) private {
        require(ownerAddress != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        
        _allowances[ownerAddress][spender] = amount;
        emit Approval(ownerAddress, spender, amount);
    }
    
    function addLiquidityToPancakeSwap(uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, uint256 deadline) public onlyOwner {
        require(address(this).balance >= amountETHMin, "Insufficient ETH balance in contract");
        require(_balances[_owner] >= amountTokenDesired, "Insufficient token balance in contract");
        
        _approve(_owner, address(_pancakeRouter), amountTokenDesired);
        
        _pancakeRouter.addLiquidityETH{value: amountETHMin}(
            address(this),
            amountTokenDesired,
            amountTokenMin,
            amountETHMin,
            _owner,
            deadline
        );
    }
}