// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

contract KaspiToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    bool public paused;
    bool public mintingEnabled;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Paused(bool paused);
    event MintingEnabled(bool mintingEnabled);
    event Burn(address indexed from, uint256 value);

    constructor() {
        name = "Kaspi Token";
        symbol = "KSPI";
        decimals = 18;
        totalSupply = 1000000000000 * 10 ** decimals;
        balanceOf[msg.sender] = totalSupply;
        paused = false;
        mintingEnabled = true;
    }

    modifier notPaused() {
        require(!paused, "Token is paused");
        _;
    }

    modifier canMint() {
        require(mintingEnabled, "Minting is disabled");
        _;
    }

    function transfer(address to, uint256 value) external notPaused returns (bool) {
        require(to != address(0), "Invalid address");
        require(value <= balanceOf[msg.sender], "Insufficient balance");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;

        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) external notPaused returns (bool) {
        require(spender != address(0), "Invalid address");

        allowance[msg.sender][spender] = value;

        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) external notPaused returns (bool) {
        require(to != address(0), "Invalid address");
        require(value <= balanceOf[from], "Insufficient balance");
        require(value <= allowance[from][msg.sender], "Insufficient allowance");

        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;

        emit Transfer(from, to, value);
        return true;
    }

    function burn(uint256 value) external notPaused returns (bool) {
        require(value <= balanceOf[msg.sender], "Insufficient balance");

        balanceOf[msg.sender] -= value;
        totalSupply -= value;

        emit Burn(msg.sender, value);
        return true;
    }

    function pause(bool _paused) external {
        paused = _paused;
        emit Paused(paused);
    }

    function enableMinting(bool _mintingEnabled) external {
        mintingEnabled = _mintingEnabled;
        emit MintingEnabled(mintingEnabled);
    }

    function mint(address to, uint256 value) external notPaused canMint returns (bool) {
        require(to != address(0), "Invalid address");

        balanceOf[to] += value;
        totalSupply += value;

        emit Transfer(address(0), to, value);
        return true;
    }
}