// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract TokenAPYContract {
    address private _tokenAddress;
    uint256 private _apy;

    constructor() {
        _tokenAddress = 0xEdAE23988e8999d83747104970Bf98C1Ae38F77F;
        _apy = 1500;
    }

    function calculateAPY(uint256 principalAmount) public view returns (uint256) {
        uint256 apyAmount = (principalAmount * _apy) / 10000;
        return principalAmount + apyAmount;
    }

    function claimAPY() external {
        IERC20 token = IERC20(_tokenAddress);
        uint256 tokenBalance = token.balanceOf(msg.sender);
        uint256 apyAmount = calculateAPY(tokenBalance);
        require(apyAmount > 0, "No APY available to claim");

        token.transfer(msg.sender, apyAmount);
    }
}