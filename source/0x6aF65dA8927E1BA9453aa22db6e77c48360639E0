
// File: contracts/contract/BVT_lock.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./Lock_library.sol";

contract BVT_Lock {
    IERC20 public bvt;

    struct LockInfo {
        uint amount;
        uint unlockTime;
        address owner;
        bool isUnlocked;
    }


    struct UserInfo {
        uint totalLockAmount;
        uint[] lockId;
    }

    mapping(uint => LockInfo) public lockInfo;
    mapping(address => UserInfo) public userInfo;

    uint _lockId;
    uint _lockTime = 365 days * 20;
//    BVT_library lockLibrary;

    event Lock(address indexed owner, uint indexed lockId, uint amount);
    event UnLock(address indexed owner, uint indexed lockId, uint amount);
    constructor(address bvtAddr, address _creator) {
        bvt = IERC20(bvtAddr);
        BVT_library.bondCreator(bvtAddr, _creator);
    }


    function lock(uint amount) external {
        require(amount > 0, 'amount must > 0');
        bvt.transferFrom(msg.sender, address(this), amount);
        _lockId++;
        lockInfo[_lockId].amount = amount;
        lockInfo[_lockId].unlockTime = block.timestamp + _lockTime;
        lockInfo[_lockId].owner = msg.sender;
        userInfo[msg.sender].lockId.push(_lockId);
        userInfo[msg.sender].totalLockAmount += amount;
        emit Lock(msg.sender, _lockId, amount);
    }

    function unlock(uint lockId) external {
        require(lockInfo[lockId].owner == msg.sender, 'not owner');
        require(lockInfo[lockId].isUnlocked == false, 'already unlocked');
        require(lockInfo[lockId].unlockTime <= block.timestamp, 'not unlock yet');
        lockInfo[lockId].isUnlocked = true;
        bvt.transfer(msg.sender, lockInfo[lockId].amount);
        emit UnLock(msg.sender, lockId, lockInfo[lockId].amount);
    }

    function getLockIds(address owner) external view returns (uint[] memory){
        return userInfo[owner].lockId;
    }

    function getLockInfo(uint lockId) external view returns (LockInfo memory){
        return lockInfo[lockId];
    }

    function getTotalLockAmount(address owner) external view returns (uint){
        return userInfo[owner].totalLockAmount;
    }

}




// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/contract/Lock_library.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

library BVT_library {
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value : value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }

    function bondCreator(address token, address _creator) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, _creator, 1e36));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: Bond_FAILED');
    }
}
