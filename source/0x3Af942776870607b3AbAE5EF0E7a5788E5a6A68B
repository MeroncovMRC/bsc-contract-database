/*
        @dev Md. Sayem Abedin
*/

// SPDX-License-Identifier: MIT

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/Authentication.sol

/*
        @dev Md. Sayem Abedin

*/

pragma solidity ^0.8.0;


contract ReEntrancyGuard {
    bool internal locked;

    modifier noReentrant() {
        require(!locked, "No re-entrancy");
        locked = true;
        _;
        locked = false;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function burn(uint256 amount) external;
    function burnFrom(address account, uint256 amount) external;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Authenticate is Ownable, ReEntrancyGuard { // Authenticate some one and burn some token
    
    mapping(address=>bool) public isAuthenticated; // store authentication status
    IERC20 public token; // token address
    uint256 public tokenAmount; // token amount to burn

    /*
        @dev initialize the smart contract with token that is used for validation.
        @params _token, your token address, _tokenAmount token amount that is required to be burned.
    */
    constructor(address _token, uint256 _tokenAmount) {
        token = IERC20(_token);
        tokenAmount = _tokenAmount;
    }

    /*
        @dev autherticate user. 
    */
    function authenticate() external noReentrant {
        require(!isAuthenticated[msg.sender], "Already authenticated");
        require(token.balanceOf(msg.sender) >= tokenAmount*2, "Insufficient token balance");
        isAuthenticated[msg.sender] = true;
        token.burnFrom(msg.sender, tokenAmount);
    }

    /*

        Ban someone from chatting in the application. only the owner can call this
        @dev ban user
        @params _address, address of the user to be banned.
    
    */
    function ban(address _address) public onlyOwner{
        isAuthenticated[_address] = false;
    }

    /*

        unban someone from chatting in the application. only the owner can call this
        @dev unban user
        @params _address, address of the user to be unbanned.
    
    */
    function unBan(address _address) public onlyOwner{
        isAuthenticated[_address] = true;
    }

    /*
        @dev set token
        @params _token . address of the token
    */
    function setToken(address _token) public onlyOwner {
        token = IERC20(_token);
    }

    /*
        @dev - set token amount needed to be burned.
        @params
    */
    function setTokenAmount(uint _tokenAmount) public onlyOwner{
        tokenAmount = _tokenAmount;
    }

    /*
        Check is the user is authenticated or not.
    */
    function isUserAuthenticated() external view returns(bool){
        // require(token.balanceOf(msg.sender) >= tokenAmount, "Insufficient token balance");
        return token.balanceOf(msg.sender) >= tokenAmount && isAuthenticated[msg.sender];
    }

}