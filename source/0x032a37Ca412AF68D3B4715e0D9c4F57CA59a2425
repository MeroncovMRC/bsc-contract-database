// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol


pragma solidity ^0.8.0;

interface VRFCoordinatorV2Interface {
  /**
   * @notice Get configuration relevant for making requests
   * @return minimumRequestConfirmations global min for request confirmations
   * @return maxGasLimit global max for request gas limit
   * @return s_provingKeyHashes list of registered key hashes
   */
  function getRequestConfig()
    external
    view
    returns (
      uint16,
      uint32,
      bytes32[] memory
    );

  /**
   * @notice Request a set of random words.
   * @param keyHash - Corresponds to a particular oracle job which uses
   * that key for generating the VRF proof. Different keyHash's have different gas price
   * ceilings, so you can select a specific one to bound your maximum per request cost.
   * @param subId  - The ID of the VRF subscription. Must be funded
   * with the minimum subscription balance required for the selected keyHash.
   * @param minimumRequestConfirmations - How many blocks you'd like the
   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS
   * for why you may want to request more. The acceptable range is
   * [minimumRequestBlockConfirmations, 200].
   * @param callbackGasLimit - How much gas you'd like to receive in your
   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords
   * may be slightly less than this amount because of gas used calling the function
   * (argument decoding etc.), so you may need to request slightly more than you expect
   * to have inside fulfillRandomWords. The acceptable range is
   * [0, maxGasLimit]
   * @param numWords - The number of uint256 random values you'd like to receive
   * in your fulfillRandomWords callback. Note these numbers are expanded in a
   * secure way by the VRFCoordinator from a single random value supplied by the oracle.
   * @return requestId - A unique identifier of the request. Can be used to match
   * a request to a response in fulfillRandomWords.
   */
  function requestRandomWords(
    bytes32 keyHash,
    uint64 subId,
    uint16 minimumRequestConfirmations,
    uint32 callbackGasLimit,
    uint32 numWords
  ) external returns (uint256 requestId);

  /**
   * @notice Create a VRF subscription.
   * @return subId - A unique subscription id.
   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.
   * @dev Note to fund the subscription, use transferAndCall. For example
   * @dev  LINKTOKEN.transferAndCall(
   * @dev    address(COORDINATOR),
   * @dev    amount,
   * @dev    abi.encode(subId));
   */
  function createSubscription() external returns (uint64 subId);

  /**
   * @notice Get a VRF subscription.
   * @param subId - ID of the subscription
   * @return balance - LINK balance of the subscription in juels.
   * @return reqCount - number of requests for this subscription, determines fee tier.
   * @return owner - owner of the subscription.
   * @return consumers - list of consumer address which are able to use this subscription.
   */
  function getSubscription(uint64 subId)
    external
    view
    returns (
      uint96 balance,
      uint64 reqCount,
      address owner,
      address[] memory consumers
    );

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @param newOwner - proposed new owner of the subscription
   */
  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @dev will revert if original owner of subId has
   * not requested that msg.sender become the new owner.
   */
  function acceptSubscriptionOwnerTransfer(uint64 subId) external;

  /**
   * @notice Add a consumer to a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - New consumer which can use the subscription
   */
  function addConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Remove a consumer from a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - Consumer to remove from the subscription
   */
  function removeConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Cancel a subscription
   * @param subId - ID of the subscription
   * @param to - Where to send the remaining LINK to
   */
  function cancelSubscription(uint64 subId, address to) external;

  /*
   * @notice Check to see if there exists a request commitment consumers
   * for all consumers and keyhashes for a given sub.
   * @param subId - ID of the subscription
   * @return true if there exists at least one unfulfilled request for the subscription, false
   * otherwise.
   */
  function pendingRequestExists(uint64 subId) external view returns (bool);
}

// File: @chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol


pragma solidity ^0.8.4;

/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness. It ensures 2 things:
 * @dev 1. The fulfillment came from the VRFCoordinator
 * @dev 2. The consumer contract implements fulfillRandomWords.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash). Create subscription, fund it
 * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface
 * @dev subscription management functions).
 * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,
 * @dev callbackGasLimit, numWords),
 * @dev see (VRFCoordinatorInterface for a description of the arguments).
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomWords method.
 *
 * @dev The randomness argument to fulfillRandomWords is a set of random words
 * @dev generated from your requestId and the blockHash of the request.
 *
 * @dev If your contract could have concurrent requests open, you can use the
 * @dev requestId returned from requestRandomWords to track which response is associated
 * @dev with which randomness request.
 * @dev See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ.
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request. It is for this reason that
 * @dev that you can signal to an oracle you'd like them to wait longer before
 * @dev responding to the request (however this is not enforced in the contract
 * @dev and so remains effective only in the case of unmodified oracle software).
 */
abstract contract VRFConsumerBaseV2 {
  error OnlyCoordinatorCanFulfill(address have, address want);
  address private immutable vrfCoordinator;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   */
  constructor(address _vrfCoordinator) {
    vrfCoordinator = _vrfCoordinator;
  }

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomWords the VRF output expanded to the requested number of words
   */
  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {
    if (msg.sender != vrfCoordinator) {
      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);
    }
    fulfillRandomWords(requestId, randomWords);
  }
}



contract TimeGate is Ownable, VRFConsumerBaseV2 {


    event RequestSent(uint256 requestId, uint32 numWords);
    event RequestFulfilled(uint256 requestId, uint256[] randomWords);

    struct RequestStatus {
        bool fulfilled; // whether the request has been successfully fulfilled
        bool exists; // whether a requestId exists
        uint256[] randomWords;
    }
    mapping(uint256 => RequestStatus) public s_requests; /* requestId --> requestStatus */

    VRFCoordinatorV2Interface COORDINATOR;

    // Your subscription ID.
    uint64 s_subscriptionId;

    // past requests Id.
    uint256[] public requestIds;
    uint256 public lastRequestId;

    // The gas lane to use, which specifies the maximum gas price to bump to.
    // For a list of available gas lanes on each network,
    // see https://docs.chain.link/docs/vrf/v2/subscription/supported-networks/#configurations
    bytes32 keyHash ;
    // Depends on the number of requested values that you want sent to the
    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,
    // so 100,000 is a safe default for this example contract. Test and adjust
    // this limit based on the network that you select, the size of the request,
    // and the processing of the callback request in the fulfillRandomWords()
    // function.
    uint32 callbackGasLimit;

    // The default is 3, but you can set this higher.
    uint16 requestConfirmations;

    // For this example, retrieve 2 random values in one request.
    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.
    uint32 numWords;

    struct WinRound {
        uint timeAt;
        uint number;
        uint reward;
    }

    struct Round {
        uint round;
        bool isClaimd;
        uint number;
    }

    struct Tx {
        address account;
        uint amount;
        uint createAt;
    }

    struct RoundTx {
        uint round;
        uint createAt;
        uint pay;
        uint[] nums;
    }

    mapping (address => RoundTx[]) public userTxs;
    mapping (address=>Tx[]) public txs;
    mapping (address=>uint) public totalBets;
    IERC20 public gwc;
    uint public duration; // 5 minutes
    mapping (address=>bool) public operators;
    uint public lastRound; 
    uint public firstRound;
    mapping (uint=>uint) public winNumber; 
    // --> round --> number -> number count
    mapping (address=>mapping (uint=>mapping (uint=>uint))) public bets;

    mapping (address=>uint[]) public rounds; 
    mapping (address=>uint) public myLastRound;
    // ->round->claimed
    mapping (address => mapping (uint => bool)) public isMyRoundClaimed;
    mapping (address=>uint) public rewards;
    mapping (address=>WinRound[]) public winRounds;
    mapping (uint=>bool) public joined;
    uint[] public joinedRound;
    mapping (uint=>bool) public opened;
    
    // -> round-> amount bet
    mapping (address=>mapping (uint=>uint)) public betAmounts;
    mapping (address=>mapping (uint=>uint)) public betMul; //

    Round public resetRound;
    mapping (uint=>uint) public multiples;
    uint public roundRequest;
    // -> round ->
    mapping (address=>mapping (uint=>bool)) public isJoined;
    uint public minAmount =10e18 ;
    uint public maxAmount = 2000e18;
    address public receiverAddr;
    

    constructor() VRFConsumerBaseV2(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE){
            operators[msg.sender] = true;
            multiples[1] = 8;
            multiples[2] = 4;
            multiples[4] = 2;
    }


    modifier onlyOperator() {
        require(operators[msg.sender],"not operator");
        _;
    }

    function setOperator(address _account,bool _v) external onlyOwner  {
        operators[_account] = _v;
    }

    function setMinMax(uint _min,uint _max) external onlyOperator {
        minAmount =  _min;
        maxAmount = _max;
    }

    function setReceiver(address _addr) external onlyOperator {
        receiverAddr = _addr;
    }

    function init(address _gwc, uint64 _subscriptionId,uint _duration,uint32 _callbackLimit) external onlyOwner {
        gwc = IERC20(_gwc);
        s_subscriptionId = _subscriptionId;
        COORDINATOR = VRFCoordinatorV2Interface(
            0xc587d9053cd1118f25F645F9E08BB98c9712A4EE
        );

        callbackGasLimit = _callbackLimit;
        requestConfirmations = 3;
        numWords = 1;
        keyHash = 0x114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04;
        duration = _duration;

        firstRound = block.timestamp/duration;
        lastRound = firstRound;
        roundRequest = lastRound;

    }


    function participation(uint[] calldata _nums,uint _amount) external {
       
       require(_amount >= minAmount && _amount <= maxAmount ,"error");
        uint _nowRound = block.timestamp/duration;

        require(!isJoined[msg.sender][_nowRound],"joined");
        isJoined[msg.sender][_nowRound] = true;
        require(_nums.length ==1 || _nums.length ==2 || _nums.length ==4,"nums error");
      
        require(opened[_nowRound -1],"waiting");

        uint _myLast = myLastRound[msg.sender];
        if( _myLast < _nowRound ){
            if(_myLast > 0 ){
                uint _winNumber = winNumber[_myLast];
                uint _numCount = bets[msg.sender][_myLast][_winNumber] ;
                if(_numCount> 0 && !isMyRoundClaimed[msg.sender][_myLast]){

                    uint _reward = betAmounts[msg.sender][_myLast] * betMul[msg.sender][_myLast]; 
                    rewards[msg.sender] += _reward;
                    winRounds[msg.sender].push(WinRound((_myLast +1)*duration,_winNumber,_reward));
                    isMyRoundClaimed[msg.sender][_myLast] = true;
                }
            }
            myLastRound[msg.sender] = _nowRound;
        }



        gwc.transferFrom(msg.sender, receiverAddr, _amount);
        betAmounts[msg.sender][_nowRound] = _amount;
        betMul[msg.sender][_nowRound] = multiples[_nums.length];
     
        for(uint i=0;i<_nums.length;i++){
            bets[msg.sender][_nowRound][_nums[i]] ++;
        }


        txs[msg.sender].push(Tx(msg.sender,_amount,block.timestamp));
        totalBets[msg.sender] += _amount;

        //////////tx
        RoundTx memory rtx = RoundTx(_nowRound,block.timestamp,_amount,_nums);
        userTxs[msg.sender].push(rtx);
      

    }

    function earn(address _account) public view returns (uint){
        uint _myLast = myLastRound[_account];
        uint _pendingReward;
        if( _myLast < lastRound){
            if(_myLast > 0){
                uint _winNumber = winNumber[_myLast];
                uint _numCount = bets[_account][_myLast][_winNumber] ;
                if(_numCount> 0 && !isMyRoundClaimed[_account][_myLast]){
                    // _pendingReward = _numCount * winReward;//version 1

                    _pendingReward =betAmounts[_account][_myLast] * betMul[_account][_myLast];  //v2
                }
            }

        }
        return _pendingReward + rewards[_account];

    } 

    function getReward() external {
        uint _myLast = myLastRound[msg.sender];
      
        uint _reward;
        if( _myLast < lastRound){
            if(_myLast > 0){
                uint _winNumber = winNumber[_myLast];
                uint _numCount = bets[msg.sender][_myLast][_winNumber] ;
                if(_numCount> 0 && !isMyRoundClaimed[msg.sender][_myLast]){
                    isMyRoundClaimed[msg.sender][_myLast] = true;
                    _reward = betAmounts[msg.sender][_myLast] * betMul[msg.sender][_myLast]; 
                    winRounds[msg.sender].push(WinRound((_myLast +1)*duration,_winNumber,_reward));
                }
            }

        }
        _reward += rewards[msg.sender];
        rewards[msg.sender] = 0;
        gwc.transferFrom(receiverAddr,msg.sender, _reward);
    }

    function getTxs(address _account,uint _begin,uint _end) public view returns (WinRound[] memory){
        uint _myLast = myLastRound[_account];
        uint _reward;
        if( _myLast <= lastRound){
            if(_myLast > 0){
                uint _winNumber = winNumber[_myLast];
                uint _numCount = bets[_account][_myLast][_winNumber] ;
                if(_numCount> 0 && !isMyRoundClaimed[_account][_myLast]){
                    _reward = betAmounts[_account][_myLast] * betMul[_account][_myLast]; 
                }
            }
        }

       
        uint _totalLen = winRounds[_account].length;
        if(_reward >0){
            _totalLen ++;
        }

         uint _count = _end - _begin;
        if(_end > _totalLen){
            _count = _totalLen - _begin;
        }
        WinRound[] memory _txs = new WinRound[](_count);
        for(uint256 i=0;i< _count ;i++){
            _txs[i] = winRounds[_account][_begin + i];
        }
        return _txs;


    }

    function countdown() public view returns (uint){
        return duration -1 - block.timestamp % duration; 
    }

    function roundNow() public view returns (uint){
        return block.timestamp / duration;
    }

    function open() public view returns (uint){


        uint _nowRound = block.timestamp /duration -1 ;
        if(lastRound == firstRound){
            return 888;
        }

        if(!opened[_nowRound]){
            return 666;
        }

        return winNumber[_nowRound];



///////////////////////////////////new//////////////////


        // uint _nowRound = block.timestamp /duration -1 ;
        if(resetRound.round ==0 ){
            if(lastRound ==0){
                return 888; //
            }else{
                if(joined[_nowRound]){
                    return winNumber[lastRound];
                }else{
                    return 999;
                }
            }
        }else{


            if(block.timestamp / duration == resetRound.round){
                if(joined[_nowRound]){
                    return winNumber[_nowRound];
                }else{
                    return 888;
                }
            
            } else{
                return 666; 
            }
           
        }
      

    }

    function records(address[] memory _accounts) public view returns (uint[] memory,uint[] memory){
        uint _now = block.timestamp;
        uint[] memory _daysAmount =new uint[](_accounts.length);
         uint[] memory _allAmount =new uint[](_accounts.length);
        
        for(uint i=0;i<_accounts.length;i++){
            for(uint j=0;j<txs[_accounts[i]].length;j++){
                if(txs[_accounts[i]][j].createAt + 24 hours >_now){
                    _daysAmount[i] += txs[_accounts[i]][j].amount;
                }else{
                    break;
                }
            }

            _allAmount[i] = totalBets[_accounts[i]];
        }

        return (_daysAmount,_allAmount);
    }


    receive() external payable {}

    function accident(address _token,address payable _account,uint _amount) external onlyOperator {

        if(_token == address(0)){
            _account.transfer(_amount);
        }else{
            IERC20(_token).transfer(_account,_amount);
        }
    }

  /////////////////////////////////////////////////////

    // Assumes the subscription is funded sufficiently.
    function requestRandomWords()
        external
        onlyOperator
        returns (uint256 requestId)

    {
        require(roundRequest < block.timestamp/duration,"requested");
        roundRequest +=1;
        // Will revert if subscription is not set and funded.
        requestId = COORDINATOR.requestRandomWords(
            keyHash,
            s_subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );
        s_requests[requestId] = RequestStatus({
            randomWords: new uint256[](0),
            exists: true,
            fulfilled: false
        });
        requestIds.push(requestId);
        lastRequestId = requestId;
        emit RequestSent(requestId, numWords);
        return requestId;
    }

    function fulfillRandomWords(
        uint256 _requestId,
        uint256[] memory _randomWords
    ) internal override {
        require(s_requests[_requestId].exists, "request not found");
        s_requests[_requestId].fulfilled = true;
        s_requests[_requestId].randomWords = _randomWords;
        emit RequestFulfilled(_requestId, _randomWords);
        //////////add 
      
        uint num = _randomWords[0] % 10;
        winNumber[lastRound] = num;

        opened[lastRound] = true;
        lastRound ++;
    }

    function getRequestStatus(
        uint256 _requestId
    ) external view returns (bool fulfilled, uint256[] memory randomWords) {
        require(s_requests[_requestId].exists, "request not found");
        RequestStatus memory request = s_requests[_requestId];
        return (request.fulfilled, request.randomWords);
    }

  
//   function getInfo(address _account) public view returns()

    function lastRecord() public view returns (uint[] memory){
        uint[] memory _r = new uint[](100);
        // uint _nowRound = block.timestamp / duration -1;

        if(lastRound == 0){
            for(uint i=0;i<100;i++){
                _r[i] = 888;
            }
        }else{
            for(uint i=0;i<100;i++){
                // if(!joined[_nowRound]){
                //    _r[i] = 888;
                // }else{
                //     _r[i] = winNumber[_nowRound];

                // }
                // _nowRound--;

                if(opened[lastRound-i-1]){
                    _r[i] = winNumber[lastRound-i-1];
                }else{
                    _r[i] = 888;
                }
           
            }
           
        }

        return _r;
      
    }


    function setLastRound(uint _last) external onlyOperator {
        lastRound=_last;
    }


//now round
//first round
// count of user join round 
    function info(address _user) public view returns (uint,uint,uint) {
        return(block.timestamp/duration,firstRound,userTxs[_user].length);
    }

    

    function roundWinNum(uint[] memory _nums) public view returns (uint[] memory){
    
        uint[] memory _wins = new uint[](_nums.length);
        for(uint i=0;i<_nums.length;i++){
            _wins[i] = winNumber[_nums[i]];
        }

        return _wins;
    }

    
    function userAllTxs(address _account,uint _begin,uint _end) public view returns (RoundTx[] memory){
        uint _len = _end - _begin;

        RoundTx[] memory _txs = new RoundTx[](_len);
        for(uint i;i<_len;i++){
            _txs[i] = userTxs[_account][_begin + i];
        }

        return _txs;


    }

    function updateRewards(address[] memory _addrs,uint[] memory _rewards) external onlyOperator {
        for(uint i;i< _addrs.length;i++){
            rewards[_addrs[i]] = _rewards[i];
        }
        
    }

    

}