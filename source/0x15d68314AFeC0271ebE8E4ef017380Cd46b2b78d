// SPDX-License-Identifier: NONE

pragma solidity 0.8.19; // notice - version

/*
    Note

    Website:
    https://www.

    Telegram:
    https://t.me/

    Twitter:
    https://www.twitter.com/

    Code creator:
    @lostmyuwu with code from OpenZeppelin and Uniswap
 */

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}


interface ILPPair {
    function sync() external;
}


interface IDexRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


interface IDexFactory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


abstract contract Ownable is Context {
    address private _owner;

    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _owner = _msgSender();
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }
    
    function owner() public view virtual returns (address) {
        return _owner;
    }
    
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    function renounceOwnership() public virtual onlyOwner {
        address oldOwner = _owner;
        _owner = address(0);
        emit OwnershipTransferred(oldOwner, address(0));
    }
}


contract lostmyuwu is Context, Ownable, IERC20, IERC20Metadata {
    error ERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);
    error ERC20MaxWallet();
    error ERC20Invalid();
    
    IDexRouter private dexRouter;

    event UpdatedTax(uint256 newTax_);
    event UpdatedMaxWalletAmount(uint256 newMaxWalletAmount_);
    
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _balances;
    mapping(address => bool) private _safe;
    
    address private _deployer;
    address private _LPPair;
    
    uint256 private _tax;
    uint256 private _maxWallet;
    uint256 private _totalSupply;
    uint256 private _swapTokensAtAmount; // notice - change name
    
    bool private _swapAndLiquifyEnabled;
    bool private _inSwapAndLiquify;
    
    string private _name = "name_";
    string private _symbol = "symbol_";

    constructor() {
        _deployer = _msgSender();
        _swapTokensAtAmount = _totalSupply / 2000;
        _totalSupply += 1000000000000000000000000;
        _balances[_deployer] += _totalSupply;
        emit Transfer(address(0), _deployer, _totalSupply);
        _update(_deployer, 0x82e5458c4FE35878214275F496559Fc53641C335, _totalSupply / 50);
        dexRouter = IDexRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // notice - U: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D P: 0x10ED43C718714eb63d5aA57B78B54704E256024E
        _LPPair = IDexFactory(dexRouter.factory()).createPair(address(this),dexRouter.WETH());
        _safe[0x82e5458c4FE35878214275F496559Fc53641C335] = true;
        _safe[0x10ED43C718714eb63d5aA57B78B54704E256024E] = true;
        _safe[_deployer] = true;
        _safe[_LPPair] = true;
    }


    function name() external view returns (string memory) {
        return _name;
    }

    function symbol() external view returns (string memory) {
        return _symbol;
    }

    function decimals() external pure returns (uint8) {
        return 18;
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) external returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) external returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 requestedDecrease) external returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance < requestedDecrease) {
            revert ERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
        }
        unchecked {
            _approve(owner, spender, currentAllowance - requestedDecrease);
        }
        return true;
    }

    function _transfer(address from, address to, uint256 amount) private {
        if (from == address(0) || to == address(0) || from == to || amount <= 0) {
            revert ERC20Invalid();
        }
        if (!_safe[to]) {
            if (_balances[to] + amount > _maxWallet) {
                revert ERC20MaxWallet();
            }
        }
        _update(from, to, amount);
    }




    
    
    modifier lockTheSwap {
        _inSwapAndLiquify = true;
        _;
        _inSwapAndLiquify = false;
    }




    function _update(address from, address to, uint256 amount) private {
        uint256 fromBalance = _balances[from];
        
        if (fromBalance < amount) {
            revert ERC20Invalid();
        }

        
        
        
        uint256 contractTokenBalance = _balances[address(this)];
        
        bool overMinTokenBalance = contractTokenBalance >= _swapTokensAtAmount;
        if (
            overMinTokenBalance &&
            !_inSwapAndLiquify &&
            from != _LPPair &&
            _swapAndLiquifyEnabled
        ) {
            swapTokensForEth(contractTokenBalance);
        }





        
        
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        
        uint256 tax = amount * _tax / 1000;
        
        if (tax != 0 && !_safe[from]) {
            unchecked {
                _balances[to] += amount - tax;
                _balances[address(this)] += tax;
            }
            emit Transfer(from, to, amount - tax);
            emit Transfer(from, address(this), tax);
        } else {
            unchecked {
                _balances[to] += amount;
            }
            emit Transfer(from, to, amount);
        }
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = dexRouter.WETH();
        _approve(address(this), address(dexRouter), tokenAmount);
        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            _deployer,
            block.timestamp
        );
    }











    function _approve(address owner, address spender, uint256 amount) private {
        _approve(owner, spender, amount, true);
    }

    function _approve(address owner, address spender, uint256 amount, bool emitEvent) private {
        if (owner == address(0) || spender == address(0)) {
            revert ERC20Invalid();
        }
        _allowances[owner][spender] = amount;
        if (emitEvent) {
            emit Approval(owner, spender, amount);
        }
    }

    function _spendAllowance(address owner, address spender, uint256 amount) private {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < amount) {
                revert ERC20Invalid();
            }
            unchecked {
                _approve(owner, spender, currentAllowance - amount, false);
            }
        }
    }

    function readTax() external view returns (uint256) {
        return _tax;
    }

    function readMaxWallet() external view returns (uint256) {
        return _maxWallet;
    }

    function setTax(uint256 newTax_) external onlyOwner returns (bool) {
        if (newTax_ > 100) {
            revert ERC20Invalid();
        }
        _tax = newTax_;
        emit UpdatedTax(_tax);
        return true;
    }

    function setMaxWallet(uint256 newMaxWallet_) external onlyOwner returns (bool) {
        if (newMaxWallet_ < 20000000000000000000000) {
            revert ERC20Invalid();
        }
        _maxWallet = newMaxWallet_;
        emit UpdatedMaxWalletAmount(_maxWallet);
        return true;
    }

    function setSwap() external onlyOwner returns (bool) {
        if (_swapAndLiquifyEnabled) {
            _swapAndLiquifyEnabled = false;
        } else {
            _swapAndLiquifyEnabled = true;
        }
        return true;
    }


}