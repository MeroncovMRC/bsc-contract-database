{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"draft-IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account\u0027s ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\u0027t\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\u0027s tokens,\r\n     * given ``owner``\u0027s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``\u0027s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``\u0027s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}"},"IDaiLikePermit.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v1;\r\n\r\ninterface IDaiLikePermit {\r\n    function permit(\r\n        address holder,\r\n        address spender,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        bool allowed,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"IERC20MetadataUppercase.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v1;\r\n\r\ninterface IERC20MetadataUppercase {\r\n    function NAME() external view returns (string memory); // solhint-disable-line func-name-mixedcase\r\n\r\n    function SYMBOL() external view returns (string memory); // solhint-disable-line func-name-mixedcase\r\n}"},"IPancakeswapV2Exchange.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakeswapV2Exchange {\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 _reserve0,\r\n        uint112 _reserve1,\r\n        uint32 _blockTimestampLast\r\n    );\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n}"},"IPancakeswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IPancakeswapV2Exchange.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IPancakeswapV2Factory {\r\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IPancakeswapV2Exchange pair);\r\n}"},"IStableSwap.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStableSwap {\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external payable;\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function balances(uint256 i) external view returns (uint256);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function A() external view returns (uint256);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function fee() external view returns (uint256);\r\n}"},"IStableSwapFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStableSwapFactory {\r\n    struct StableSwapPairInfo {\r\n        address swapContract;\r\n        address token0;\r\n        address token1;\r\n        address LPContract;\r\n    }\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function pairLength() external view returns (uint256);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function getPairInfo(address _tokenA, address _tokenB) external view returns (StableSwapPairInfo memory info);\r\n}"},"IWETH02.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IWETH02 is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003e= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute.\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"PancakeSwapSmartRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\nimport \"./ReentrancyGuard.sol\";\r\n\r\nimport \"./IStableSwap.sol\";\r\nimport \"./IStableSwapFactory.sol\";\r\nimport \"./IPancakeswapV2Factory.sol\";\r\nimport \"./IWETH02.sol\";\r\nimport \"./UniERC20.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./PancakeswapV2ExchangeLib.sol\";\r\n\r\n\r\n\r\ncontract PancakeSwapSmartRouter is Ownable, ReentrancyGuard {\r\n    using UniERC20 for IERC20;\r\n    using SafeERC20 for IERC20;\r\n    using PancakeswapV2ExchangeLib for IPancakeswapV2Exchange;\r\n\r\n    enum FLAG {\r\n        STABLE_SWAP,\r\n        V2_EXACT_IN\r\n    }\r\n\r\n    IWETH02 public immutable weth;\r\n    address public immutable pancakeswapV2;\r\n    address public stableswapFactory;\r\n\r\n    event NewStableSwapFactory(address indexed sender, address indexed factory);\r\n    event SwapMulti(address indexed sender, address indexed srcTokenAddr, address indexed dstTokenAddr, uint256 srcAmount);\r\n    event Swap(address indexed sender, address indexed srcTokenAddr, address indexed dstTokenAddr, uint256 srcAmount);\r\n\r\n    fallback() external {}\r\n\r\n    receive() external payable {}\r\n\r\n    /*\r\n     * @notice Constructor\r\n     * @param _WETHAddress: address of the WETH contract\r\n     * @param _pancakeFactory: address of the PancakeFactory\r\n     * @param _stableswapFactory: address of the PancakeStableSwapFactory\r\n     */\r\n    constructor(\r\n        address _WETHAddress,\r\n        address _pancakeswapV2,\r\n        address _stableswapFactory\r\n    ) {\r\n        weth = IWETH02(_WETHAddress);\r\n        pancakeswapV2 = _pancakeswapV2;\r\n        stableswapFactory = _stableswapFactory;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets treasury address\r\n     * @dev Only callable by the contract owner.\r\n     */\r\n    function setStableSwapFactory(address _factory) external onlyOwner {\r\n        require(_factory != address(0), \"StableSwap factory cannot be zero address\");\r\n        stableswapFactory = _factory;\r\n        emit NewStableSwapFactory(msg.sender, stableswapFactory);\r\n    }\r\n\r\n    function swapMulti(\r\n        IERC20[] calldata tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        FLAG[] calldata flags\r\n    ) public payable nonReentrant returns (uint256 returnAmount) {\r\n        require(tokens.length == flags.length + 1, \"swapMulti: wrong length\");\r\n\r\n        IERC20 srcToken = tokens[0];\r\n        IERC20 dstToken = tokens[tokens.length - 1];\r\n\r\n        if (srcToken == dstToken) {\r\n            return amount;\r\n        }\r\n\r\n        srcToken.uniTransferFrom(payable(msg.sender), address(this), amount);\r\n        uint256 receivedAmount = srcToken.uniBalanceOf(address(this));\r\n\r\n        for (uint256 i = 1; i \u003c tokens.length; i++) {\r\n            if (tokens[i - 1] == tokens[i]) {\r\n                continue;\r\n            }\r\n\r\n            if (flags[i - 1] == FLAG.STABLE_SWAP) {\r\n                _swapOnStableSwap(tokens[i - 1], tokens[i], tokens[i - 1].uniBalanceOf(address(this)));\r\n            } else if (flags[i - 1] == FLAG.V2_EXACT_IN) {\r\n                _swapOnV2ExactIn(tokens[i - 1], tokens[i], tokens[i - 1].uniBalanceOf(address(this)));\r\n            }\r\n        }\r\n\r\n        returnAmount = dstToken.uniBalanceOf(address(this));\r\n        require(returnAmount \u003e= minReturn, \"swapMulti: return amount is less than minReturn\");\r\n        uint256 inRefund = srcToken.uniBalanceOf(address(this));\r\n        emit SwapMulti(msg.sender, address(srcToken), address(dstToken), receivedAmount - inRefund);\r\n\r\n        uint256 userBalanceBefore = dstToken.uniBalanceOf(msg.sender);\r\n        dstToken.uniTransfer(payable(msg.sender), returnAmount);\r\n        require(dstToken.uniBalanceOf(msg.sender) - userBalanceBefore \u003e= minReturn, \"swapMulti: incorrect user balance\");\r\n\r\n        srcToken.uniTransfer(payable(msg.sender), inRefund);\r\n    }\r\n\r\n    function swap(\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        FLAG flag\r\n    ) public payable nonReentrant returns (uint256 returnAmount) {\r\n        if (srcToken == dstToken) {\r\n            return amount;\r\n        }\r\n\r\n        srcToken.uniTransferFrom(payable(msg.sender), address(this), amount);\r\n        uint256 receivedAmount = srcToken.uniBalanceOf(address(this));\r\n\r\n        if (flag == FLAG.STABLE_SWAP) {\r\n            require(msg.value == 0, \"swap: wrong input msg.value\");\r\n            _swapOnStableSwap(srcToken, dstToken, receivedAmount);\r\n        } else if (flag == FLAG.V2_EXACT_IN) {\r\n            _swapOnV2ExactIn(srcToken, dstToken, receivedAmount);\r\n        }\r\n\r\n        returnAmount = dstToken.uniBalanceOf(address(this));\r\n        require(returnAmount \u003e= minReturn, \"swap: return amount is less than minReturn\");\r\n        uint256 inRefund = srcToken.uniBalanceOf(address(this));\r\n        emit Swap(msg.sender, address(srcToken), address(dstToken), receivedAmount - inRefund);\r\n\r\n        uint256 userBalanceBefore = dstToken.uniBalanceOf(msg.sender);\r\n        dstToken.uniTransfer(payable(msg.sender), returnAmount);\r\n        require(dstToken.uniBalanceOf(msg.sender) - userBalanceBefore \u003e= minReturn, \"swap: incorrect user balance\");\r\n\r\n        srcToken.uniTransfer(payable(msg.sender), inRefund);\r\n    }\r\n\r\n    // Swap helpers\r\n\r\n    function _swapOnStableSwap(\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        uint256 amount\r\n    ) internal {\r\n        require(stableswapFactory != address(0), \"StableSwap factory cannot be zero address\");\r\n        IStableSwapFactory.StableSwapPairInfo memory info = IStableSwapFactory(stableswapFactory).getPairInfo(\r\n            address(srcToken),\r\n            address(dstToken)\r\n        );\r\n        if (info.swapContract == address(0)) {\r\n            return;\r\n        }\r\n\r\n        IStableSwap stableSwap = IStableSwap(info.swapContract);\r\n        IERC20[] memory tokens = new IERC20[](2);\r\n        tokens[0] = IERC20(stableSwap.coins(uint256(0)));\r\n        tokens[1] = IERC20(stableSwap.coins(uint256(1)));\r\n        uint256 i = (srcToken == tokens[0] ? 1 : 0) + (srcToken == tokens[1] ? 2 : 0);\r\n        uint256 j = (dstToken == tokens[0] ? 1 : 0) + (dstToken == tokens[1] ? 2 : 0);\r\n        srcToken.uniApprove(address(stableSwap), amount);\r\n        stableSwap.exchange(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnV2ExactIn(\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        uint256 amount\r\n    ) internal returns (uint256 returnAmount) {\r\n        if (srcToken.isETH()) {\r\n            weth.deposit{value: amount}();\r\n        }\r\n\r\n        IERC20 srcTokenReal = srcToken.isETH() ? weth : srcToken;\r\n        IERC20 dstTokenReal = dstToken.isETH() ? weth : dstToken;\r\n        IPancakeswapV2Exchange exchange = IPancakeswapV2Factory(pancakeswapV2).getPair(srcTokenReal, dstTokenReal);\r\n\r\n        srcTokenReal.safeTransfer(address(exchange), amount);\r\n        bool needSync;\r\n        (returnAmount, needSync) = exchange.getReturn(srcTokenReal, dstTokenReal, amount);\r\n        if (needSync) {\r\n            exchange.sync();\r\n        }\r\n        if (srcTokenReal \u003c dstTokenReal) {\r\n            exchange.swap(0, returnAmount, address(this), \"\");\r\n        } else {\r\n            exchange.swap(returnAmount, 0, address(this), \"\");\r\n        }\r\n\r\n        if (dstToken.isETH()) {\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n        }\r\n    }\r\n}"},"PancakeswapV2ExchangeLib.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\nimport \"./IERC20.sol\";\r\nimport \"./Math.sol\";\r\n\r\nimport \"./UniERC20.sol\";\r\nimport \"./IPancakeswapV2Factory.sol\";\r\nimport \"./IPancakeswapV2Exchange.sol\";\r\n\r\n\r\n\r\nlibrary PancakeswapV2ExchangeLib {\r\n    using Math for uint256;\r\n    using UniERC20 for IERC20;\r\n\r\n    function getReturn(\r\n        IPancakeswapV2Exchange exchange,\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        uint256 amountIn\r\n    )\r\n    internal\r\n    view\r\n    returns (\r\n        uint256 result,\r\n        bool needSync\r\n    )\r\n    {\r\n        uint256 reserveIn = srcToken.uniBalanceOf(address(exchange));\r\n        uint256 reserveOut = dstToken.uniBalanceOf(address(exchange));\r\n        (uint112 reserve0, uint112 reserve1, ) = exchange.getReserves();\r\n        if (srcToken \u003e dstToken) {\r\n            (reserve0, reserve1) = (reserve1, reserve0);\r\n        }\r\n        amountIn = reserveIn - reserve0;\r\n        needSync = (reserveIn \u003c reserve0 || reserveOut \u003c reserve1);\r\n\r\n        uint256 amountInWithFee = amountIn * 9975;\r\n        uint256 numerator = amountInWithFee * Math.min(reserveOut, reserve1);\r\n        uint256 denominator = Math.min(reserveIn, reserve0) * 10000 + amountInWithFee;\r\n        result = (denominator == 0) ? 0 : numerator / denominator;\r\n    }\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"RevertReasonForwarder.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v1;\r\n\r\n/// @title Revert reason forwarder.\r\nlibrary RevertReasonForwarder {\r\n    /// @dev Forwards latest externall call revert.\r\n    function reRevert() internal pure {\r\n        // bubble up revert reason from latest external call\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, returndatasize())\r\n            revert(ptr, returndatasize())\r\n        }\r\n    }\r\n}"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v1;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./draft-IERC20Permit.sol\";\r\nimport \"./IDaiLikePermit.sol\";\r\nimport \"./RevertReasonForwarder.sol\";\r\n\r\n/// @title Implements efficient safe methods for ERC20 interface.\r\nlibrary SafeERC20 {\r\n    error SafeTransferFailed();\r\n    error SafeTransferFromFailed();\r\n    error ForceApproveFailed();\r\n    error SafeIncreaseAllowanceFailed();\r\n    error SafeDecreaseAllowanceFailed();\r\n    error SafePermitBadLength();\r\n\r\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bytes4 selector = token.transferFrom.selector;\r\n        bool success;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            let data := mload(0x40)\r\n\r\n            mstore(data, selector)\r\n            mstore(add(data, 0x04), from)\r\n            mstore(add(data, 0x24), to)\r\n            mstore(add(data, 0x44), amount)\r\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\r\n            if success {\r\n                switch returndatasize()\r\n                case 0 {\r\n                    success := gt(extcodesize(token), 0)\r\n                }\r\n                default {\r\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\r\n                }\r\n            }\r\n        }\r\n        if (!success) revert SafeTransferFromFailed();\r\n    }\r\n\r\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\r\n            revert SafeTransferFailed();\r\n        }\r\n    }\r\n\r\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\r\n    function forceApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\r\n            if (\r\n                !_makeCall(token, token.approve.selector, spender, 0) ||\r\n            !_makeCall(token, token.approve.selector, spender, value)\r\n            ) {\r\n                revert ForceApproveFailed();\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Allowance increase with safe math check.\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (value \u003e type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\r\n        forceApprove(token, spender, allowance + value);\r\n    }\r\n\r\n    /// @dev Allowance decrease with safe math check.\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (value \u003e allowance) revert SafeDecreaseAllowanceFailed();\r\n        forceApprove(token, spender, allowance - value);\r\n    }\r\n\r\n    /// @dev Calls either ERC20 or Dai `permit` for `token`, if unsuccessful forwards revert from external call.\r\n    function safePermit(IERC20 token, bytes calldata permit) internal {\r\n        if (!tryPermit(token, permit)) RevertReasonForwarder.reRevert();\r\n    }\r\n\r\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns (bool) {\r\n        if (permit.length == 32 * 7) {\r\n            return _makeCalldataCall(token, IERC20Permit.permit.selector, permit);\r\n        }\r\n        if (permit.length == 32 * 8) {\r\n            return _makeCalldataCall(token, IDaiLikePermit.permit.selector, permit);\r\n        }\r\n        revert SafePermitBadLength();\r\n    }\r\n\r\n    function _makeCall(\r\n        IERC20 token,\r\n        bytes4 selector,\r\n        address to,\r\n        uint256 amount\r\n    ) private returns (bool success) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            let data := mload(0x40)\r\n\r\n            mstore(data, selector)\r\n            mstore(add(data, 0x04), to)\r\n            mstore(add(data, 0x24), amount)\r\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\r\n            if success {\r\n                switch returndatasize()\r\n                case 0 {\r\n                    success := gt(extcodesize(token), 0)\r\n                }\r\n                default {\r\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _makeCalldataCall(\r\n        IERC20 token,\r\n        bytes4 selector,\r\n        bytes calldata args\r\n    ) private returns (bool success) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            let len := add(4, args.length)\r\n            let data := mload(0x40)\r\n\r\n            mstore(data, selector)\r\n            calldatacopy(add(data, 0x04), args.offset, args.length)\r\n            success := call(gas(), token, 0, data, len, 0x0, 0x20)\r\n            if success {\r\n                switch returndatasize()\r\n                case 0 {\r\n                    success := gt(extcodesize(token), 0)\r\n                }\r\n                default {\r\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"},"StringUtil.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v1;\r\n\r\n/// @title Library with gas-efficient string operations\r\nlibrary StringUtil {\r\n    function toHex(uint256 value) internal pure returns (string memory) {\r\n        return toHex(abi.encodePacked(value));\r\n    }\r\n\r\n    function toHex(address value) internal pure returns (string memory) {\r\n        return toHex(abi.encodePacked(value));\r\n    }\r\n\r\n    /// @dev this is the assembly adaptation of highly optimized toHex16 code from Mikhail Vladimirov\r\n    /// https://stackoverflow.com/a/69266989\r\n    function toHex(bytes memory data) internal pure returns (string memory result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            function _toHex16(input) -\u003e output {\r\n                output := or(\r\n                and(input, 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000),\r\n                shr(64, and(input, 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000))\r\n                )\r\n                output := or(\r\n                and(output, 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000),\r\n                shr(32, and(output, 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000))\r\n                )\r\n                output := or(\r\n                and(output, 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000),\r\n                shr(16, and(output, 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000))\r\n                )\r\n                output := or(\r\n                and(output, 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000),\r\n                shr(8, and(output, 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000))\r\n                )\r\n                output := or(\r\n                shr(4, and(output, 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000)),\r\n                shr(8, and(output, 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00))\r\n                )\r\n                output := add(\r\n                add(0x3030303030303030303030303030303030303030303030303030303030303030, output),\r\n                mul(\r\n                and(\r\n                shr(4, add(output, 0x0606060606060606060606060606060606060606060606060606060606060606)),\r\n                0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F\r\n                ),\r\n                7 // Change 7 to 39 for lower case output\r\n                )\r\n                )\r\n            }\r\n\r\n            result := mload(0x40)\r\n            let length := mload(data)\r\n            let resultLength := shl(1, length)\r\n            let toPtr := add(result, 0x22) // 32 bytes for length + 2 bytes for \u00270x\u0027\r\n            mstore(0x40, add(toPtr, resultLength)) // move free memory pointer\r\n            mstore(add(result, 2), 0x3078) // 0x3078 is right aligned so we write to `result + 2`\r\n        // to store the last 2 bytes in the beginning of the string\r\n            mstore(result, add(resultLength, 2)) // extra 2 bytes for \u00270x\u0027\r\n\r\n            for {\r\n                let fromPtr := add(data, 0x20)\r\n                let endPtr := add(fromPtr, length)\r\n            } lt(fromPtr, endPtr) {\r\n                fromPtr := add(fromPtr, 0x20)\r\n            } {\r\n                let rawData := mload(fromPtr)\r\n                let hexData := _toHex16(rawData)\r\n                mstore(toPtr, hexData)\r\n                toPtr := add(toPtr, 0x20)\r\n                hexData := _toHex16(shl(128, rawData))\r\n                mstore(toPtr, hexData)\r\n                toPtr := add(toPtr, 0x20)\r\n            }\r\n        }\r\n    }\r\n}"},"UniERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v1;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./IERC20MetadataUppercase.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./StringUtil.sol\";\r\n\r\n/// @title Library, which allows usage of ETH as ERC20 and ERC20 itself. Uses SafeERC20 library for ERC20 interface.\r\nlibrary UniERC20 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    error InsufficientBalance();\r\n    error ApproveCalledOnETH();\r\n    error NotEnoughValue();\r\n    error FromIsNotSender();\r\n    error ToIsNotThis();\r\n    error ETHTransferFailed();\r\n\r\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\r\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    IERC20 private constant _ZERO_ADDRESS = IERC20(address(0));\r\n\r\n    /// @dev Returns true if `token` is ETH.\r\n    function isETH(IERC20 token) internal pure returns (bool) {\r\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\r\n    }\r\n\r\n    /// @dev Returns `account` ERC20 `token` balance.\r\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return account.balance;\r\n        } else {\r\n            return token.balanceOf(account);\r\n        }\r\n    }\r\n\r\n    /// @dev `token` transfer `to` `amount`.\r\n    /// Note that this function does nothing in case of zero amount.\r\n    function uniTransfer(\r\n        IERC20 token,\r\n        address payable to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount \u003e 0) {\r\n            if (isETH(token)) {\r\n                if (address(this).balance \u003c amount) revert InsufficientBalance();\r\n                // solhint-disable-next-line avoid-low-level-calls\r\n                (bool success, ) = to.call{value: amount, gas: _RAW_CALL_GAS_LIMIT}(\"\");\r\n                if (!success) revert ETHTransferFailed();\r\n            } else {\r\n                token.safeTransfer(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev `token` transfer `from` `to` `amount`.\r\n    /// Note that this function does nothing in case of zero amount.\r\n    function uniTransferFrom(\r\n        IERC20 token,\r\n        address payable from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount \u003e 0) {\r\n            if (isETH(token)) {\r\n                if (msg.value \u003c amount) revert NotEnoughValue();\r\n                if (from != msg.sender) revert FromIsNotSender();\r\n                if (to != address(this)) revert ToIsNotThis();\r\n                if (msg.value \u003e amount) {\r\n                    // Return remainder if exist\r\n                unchecked {\r\n                    // solhint-disable-next-line avoid-low-level-calls\r\n                    (bool success, ) = from.call{value: msg.value - amount, gas: _RAW_CALL_GAS_LIMIT}(\"\");\r\n                    if (!success) revert ETHTransferFailed();\r\n                }\r\n                }\r\n            } else {\r\n                token.safeTransferFrom(from, to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns `token` symbol from ERC20 metadata.\r\n    function uniSymbol(IERC20 token) internal view returns (string memory) {\r\n        return _uniDecode(token, IERC20Metadata.symbol.selector, IERC20MetadataUppercase.SYMBOL.selector);\r\n    }\r\n\r\n    /// @dev Returns `token` name from ERC20 metadata.\r\n    function uniName(IERC20 token) internal view returns (string memory) {\r\n        return _uniDecode(token, IERC20Metadata.name.selector, IERC20MetadataUppercase.NAME.selector);\r\n    }\r\n\r\n    /// @dev Reverts if `token` is ETH, otherwise performs ERC20 forceApprove.\r\n    function uniApprove(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (isETH(token)) revert ApproveCalledOnETH();\r\n\r\n        token.forceApprove(to, amount);\r\n    }\r\n\r\n    /// @dev 20K gas is provided to account for possible implementations of name/symbol\r\n    /// (token implementation might be behind proxy or store the value in storage)\r\n    function _uniDecode(\r\n        IERC20 token,\r\n        bytes4 lowerCaseSelector,\r\n        bytes4 upperCaseSelector\r\n    ) private view returns (string memory result) {\r\n        if (isETH(token)) {\r\n            return \"ETH\";\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall{gas: 20000}(\r\n            abi.encodeWithSelector(lowerCaseSelector)\r\n        );\r\n        if (!success) {\r\n            (success, data) = address(token).staticcall{gas: 20000}(abi.encodeWithSelector(upperCaseSelector));\r\n        }\r\n\r\n        if (success \u0026\u0026 data.length \u003e= 0x40) {\r\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\r\n            /*\r\n                return data is padded up to 32 bytes with ABI encoder also sometimes\r\n                there is extra 32 bytes of zeros padded in the end:\r\n                https://github.com/ethereum/solidity/issues/10170\r\n                because of that we can\u0027t check for equality and instead check\r\n                that overall data length is greater or equal than string length + extra 64 bytes\r\n            */\r\n            if (offset == 0x20 \u0026\u0026 data.length \u003e= 0x40 + len) {\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                // solhint-disable-line no-inline-assembly\r\n                    result := add(data, 0x40)\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n        if (success \u0026\u0026 data.length == 32) {\r\n            uint256 len = 0;\r\n            while (len \u003c data.length \u0026\u0026 data[len] \u003e= 0x20 \u0026\u0026 data[len] \u003c= 0x7E) {\r\n            unchecked {\r\n                len++;\r\n            }\r\n            }\r\n\r\n            if (len \u003e 0) {\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                // solhint-disable-line no-inline-assembly\r\n                    mstore(data, len)\r\n                }\r\n                return string(data);\r\n            }\r\n        }\r\n\r\n        return StringUtil.toHex(address(token));\r\n    }\r\n}"}}