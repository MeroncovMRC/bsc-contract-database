{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"},"SellReceiver.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./IERC20.sol\";\nimport \"./IUniswapV2Router02.sol\";\n\ninterface IMDB {\n    function getOwner() external view returns (address);\n}\n\ninterface IYieldFarm {\n    function depositRewards(uint256 amount) external;\n}\n\ninterface IAutoFarm {\n    function compound() external;\n}\n\ncontract SellReceiver {\n\n    // router\n    IUniswapV2Router02 router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n    // MDB token\n    address public constant token = 0x0557a288A93ed0DF218785F2787dac1cd077F8f3;\n\n    // Recipients Of Fees\n    address public constant trustFund = 0x45F8F3a7A91e302935eB644f371bdE63D0b1bAc6;\n    address public constant marketing = 0x511DEaD182a47c60034FEdf36eA0714972625E85;\n    address public constant yieldFarm = 0x08254Df4F9461f8Fc15235be5092862BfF4824d4;\n    address public constant staking = 0xe8f699B68ddE8e59DBe8fdF20955931B25fe7dFa;\n    address public constant MDBPFarm = 0x65545d6eBf5F4245Ca2f9c90468dE38fE88E3672;\n    address public constant BNBAutoFarm = 0x805Cc5aA1EBeE725250084D2ECcD9473c8bE46A9;\n\n    // Token -\u003e BNB\n    address[] path;\n\n    /**\n        Minimum Amount Of MDB In Contract To Trigger `trigger` Unless `approved`\n            If Set To A Very High Number, Only Approved May Call Trigger Function\n            If Set To A Very Low Number, Anybody May Call At Their Leasure\n     */\n    uint256 public minimumTokensRequiredToTrigger;\n\n    // Trust Fund Allocation\n    uint256 public marketingPercentage = 200;\n    uint256 public trustFundPercentage = 536;\n\n    // Address =\u003e Can Call Trigger\n    mapping ( address =\u003e bool ) public approved;\n\n    // Events\n    event Approved(address caller, bool isApproved);\n\n    modifier onlyOwner(){\n        require(\n            msg.sender == IMDB(token).getOwner(),\n            \u0027Only MDB Owner\u0027\n        );\n        _;\n    }\n\n    constructor() {\n\n        // Sell Path\n        path = new address[](2);\n        path[0] = token;\n        path[1] = router.WETH();\n\n        // set initial approved\n        approved[msg.sender] = true;\n\n        // only approved can trigger at the start\n        minimumTokensRequiredToTrigger = 10**30;\n    }\n\n    function trigger() external {\n\n        // MDB Balance In Contract\n        uint balance = IERC20(token).balanceOf(address(this));\n\n        if (balance \u003c minimumTokensRequiredToTrigger \u0026\u0026 !approved[msg.sender]) {\n            return;\n        }\n\n        uint toSell = balance * ( marketingPercentage + trustFundPercentage ) / 1000;\n        uint toSend = balance - toSell;\n        uint forFarms = toSend / 3;\n        uint forStaking = toSend - ( 2 * forFarms );\n\n        // Send to standard farm\n        IERC20(token).approve(yieldFarm, forFarms);\n        IYieldFarm(yieldFarm).depositRewards(forFarms);\n\n        // send to auto farm\n        IERC20(token).transfer(MDBPFarm, forFarms);\n\n        // Send to staking\n        IERC20(token).transfer(staking, forStaking);\n\n        // compound auto yield farms\n        IAutoFarm(MDBPFarm).compound();\n        IAutoFarm(BNBAutoFarm).compound();\n        \n        // sell MDB in contract for BNB\n        IERC20(token).approve(address(router), toSell);\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(toSell, 0, path, address(this), block.timestamp + 300);\n\n        if (address(this).balance \u003e 0) {\n            // fraction out bnb received\n            uint part1 = address(this).balance * trustFundPercentage / ( marketingPercentage + trustFundPercentage );\n            uint part2 = address(this).balance - part1;\n\n            // send to destinations\n            _send(trustFund, part1);\n            _send(marketing, part2);\n        }\n    }\n\n    function setApproved(address caller, bool isApproved) external onlyOwner {\n        approved[caller] = isApproved;\n        emit Approved(caller, isApproved);\n    }\n    function setMinTriggerAmount(uint256 minTriggerAmount) external onlyOwner {\n        minimumTokensRequiredToTrigger = minTriggerAmount;\n    }\n    function setTrustFundPercentage(uint256 newAllocatiton) external onlyOwner {\n        trustFundPercentage = newAllocatiton;\n    }\n    function setMarketingPercentage(uint256 newAllocatiton) external onlyOwner {\n        marketingPercentage = newAllocatiton;\n    }\n    function withdraw() external onlyOwner {\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(s);\n    }\n    \n    function withdraw(address _token) external onlyOwner {\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\n    }\n    receive() external payable {}\n\n    function _send(address recipient, uint amount) internal {\n        (bool s,) = payable(recipient).call{value: amount}(\"\");\n        require(s);\n    }\n}"}}