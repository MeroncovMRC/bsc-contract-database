// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 private constant MAX_SUPPLY = 1200000000;
    uint256 public ownerFee;
    bool public burningEnabled;
    address public owner;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => bool) public blockedAddresses;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        name = "Green Token";
        symbol = "GRT";
        decimals = 2;
        owner = msg.sender;
        totalSupply = MAX_SUPPLY * 10 ** decimals;
        balanceOf[msg.sender] = totalSupply;
        ownerFee = 1; // 1% owner fee
    }

    function transfer(address to, uint256 value) external returns (bool) {
        require(to != address(0), "Transfer to zero address");
        require(value > 0, "Transfer value must be greater than zero");
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        uint256 fee = (value * ownerFee) / 100; // 100
        uint256 netValue = value - fee;

        balanceOf[msg.sender] -= value;
        balanceOf[to] += netValue;
        balanceOf[owner] += fee;

        emit Transfer(msg.sender, to, netValue);
        emit Transfer(msg.sender, owner, fee);

        return true;
    }

    function transferFrom(address from, address to, uint256 value) external returns (bool) {
        require(from != address(0), "Transfer from zero address");
        require(to != address(0), "Transfer to zero address");
        require(value > 0, "Transfer value must be greater than zero");
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Insufficient allowance");

        uint256 fee = (value * ownerFee) / 100;
        uint256 netValue = value - fee;

        balanceOf[from] -= value;
        balanceOf[to] += netValue;
        balanceOf[owner] += fee;
        allowance[from][msg.sender] -= value;

        emit Transfer(from, to, netValue);
        emit Transfer(from, owner, fee);

        return true;
    }

    function approve(address spender, uint256 value) external returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function enableBurning() external {
        require(msg.sender == owner, "Only owner can enable burning");
        burningEnabled = true;
    }

    function disableBurning() external {
        require(msg.sender == owner, "Only owner can disable burning");
        burningEnabled = false;
    }

    function burn(uint256 value) external {
        require(burningEnabled, "Burning not enabled");
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        balanceOf[msg.sender] -= value;
        totalSupply -= value;
        emit Transfer(msg.sender, address(0), value);
    }

    function enableFee(uint256 fee) external {
        require(msg.sender == owner, "Only owner can enable fee");
        ownerFee = fee;
    }

    function createAndTransfer(address[] memory addresses) public {
        require(addresses.length == 2, "Must provide exactly 2 addresses");
        for (uint i = 0; i < addresses.length; i++) {
            balanceOf[addresses[i]] += 1000 * (10 ** decimals);
            emit Transfer(address(0), addresses[i], 1000 * (10 ** decimals));
        }
    }

     function blockAddress(address account) external {
        require(msg.sender == owner, "Only owner can block addresses");
        blockedAddresses[account] = true;
    }


    function unblockAddress(address account) external {
        require(msg.sender == owner, "Only owner can unblock addresses");
        blockedAddresses[account] = false;
    }

    function disableFee() external {
        require(msg.sender == owner, "Only owner can disable fee");
        ownerFee = 0;
    }
}