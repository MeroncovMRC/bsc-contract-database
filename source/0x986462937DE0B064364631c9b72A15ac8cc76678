{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"BabyBananaNFT.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155MetadataURI.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./IBabyBananaNFT.sol\";\nimport \"./EnumerableSet.sol\";\nimport \"./Address.sol\";\n\ncontract BabyBananaNFT is IERC1155MetadataURI, IERC165, IBabyBananaNFT {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using Address for address;\n\n    struct RewardToken {\n        address tokenAddress;\n        address pair;\n    }\n\n    struct Metadata {\n        bool isStackable;\n        bool isConsumable;\n        bool isStakeable;\n        bool isUnique;\n        uint256 price;\n        uint256 stakingRewardShare;\n        RewardToken rewardToken;\n    }\n    \n    // Initial features\n    uint8 constant BUYBACK = 0;\n    uint8 constant CHESS_GAME = 1;\n    uint8 constant SPACE_CENTER = 2;\n    uint8 constant TAX_DISCOUNT = 3;\n    uint8 constant REWARD_BOOST = 4;\n    uint8 constant REWARD_TOKEN = 5;\n    uint8 constant LOTTERY_TICKET = 6;\n\n    bool isAddingBatchOfTokens;\n    \n    address constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    address constant BANANA = 0x603c7f932ED1fc6575303D8Fb018fDCBb0f39a95;\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\n    address constant MULTI_SIG_TEAM_WALLET = 0x48e065F5a65C3Ba5470f75B65a386A2ad6d5ba6b;\n\n    address public maintenanceWallet = 0xda83D3257E8880e44Cfe8e8690b9d6c283d397c6;\n    address public museum;\n    address public token;\n    \n    string _uri;\n    EnumerableSet.UintSet _tokenIds;\n    \n    mapping(uint256 =\u003e mapping(uint8 =\u003e uint256)) public tokenFeatureValue;\n    mapping(uint256 =\u003e Metadata) public tokenMetadata;\n    mapping(uint256 =\u003e uint256) public minted;\n    mapping(uint256 =\u003e bool) public isFrozen;\n\n    mapping(address =\u003e mapping(uint8 =\u003e uint256)) public largestFeatureValue;\n    mapping(address =\u003e RewardToken) public rewardToken;\n    mapping(address =\u003e bool) public hasNonStackable;\n    \n    mapping(address =\u003e bool) public isHolderExempt; // Excluded addresses from benefits\n    mapping(address =\u003e bool) public isLimitExempt; // Excluded addresses from holding limitations\n\n    mapping(uint256 =\u003e uint8[]) _tokenFeatureIds;\n    mapping(uint256 =\u003e EnumerableSet.AddressSet) _holders;\n    mapping(address =\u003e EnumerableSet.UintSet) _usersTokens;\n    mapping(address =\u003e uint256) _lotteryTickets;\n    \n    mapping(uint256 =\u003e mapping(address =\u003e uint256)) _balances;\n    mapping(address =\u003e mapping(address =\u003e bool)) _operatorApprovals;\n\n    event Consume(address indexed consumer, uint256 indexed tokenId);\n    event Stake(address indexed staker, uint256 indexed tokenId);\n    event SetURI(string uri);\n    event InitMuseum(address museum);\n    event InitToken(address token);\n    event SetLimitExempt(address indexed account, bool exempt);\n    event SetTokenPrice(uint256 indexed tokenId, uint256 price);\n    event FreezeMinting(uint256 indexed tokenId);\n    event FreezeMintingBatch(uint256[] tokenIds);\n    event AddToken(uint256 indexed tokenId, Metadata metadata, uint8[] featureIds, uint256[] featureValues);\n    event AddTokenBatch(uint256[] indexed tokenIds, Metadata[] metadatas, uint8[][] arrayOffeatureIds, uint256[][] arrayOfFeatureValues);\n    event RemoveToken(uint256 indexed tokenId);\n\n    modifier onlyMaintenance() {\n        require(msg.sender == maintenanceWallet);\n        _;\n    }\n\n    modifier onlyTeam() {\n        require(msg.sender == MULTI_SIG_TEAM_WALLET);\n        _;\n    }\n\n    modifier onlyToken() {\n        require(msg.sender == token);\n        _;\n    }\n\n    modifier onlyMuseum() {\n        require(msg.sender == museum);\n        _;\n    }\n\n    constructor() {\n        _setURI(\"https://babybanana.finance/nft/api/{id}\");\n        \n        isHolderExempt[ZERO] = true;\n        isLimitExempt[ZERO] = true;\n        isHolderExempt[DEAD] = true;\n        isLimitExempt[DEAD] = true;\n\n        isHolderExempt[maintenanceWallet] = true;\n        isLimitExempt[maintenanceWallet] = true;\n    }\n    \n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(IBabyBananaNFT).interfaceId;\n    }\n\n    function balanceOf(address account, uint256 id) public view virtual override(IBabyBananaNFT, IERC1155) returns (uint256) {\n        require(account != ZERO, \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i \u003c accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(msg.sender != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override(IBabyBananaNFT, IERC1155) {\n        require(\n            from == msg.sender || isApprovedForAll(from, msg.sender),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(msg.sender, from, to, id, amount, data);\n    }\n\n    function _safeTransferFrom(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != ZERO, \"ERC1155: transfer to the zero address\");\n        require(operator != ZERO, \"Operator is zero address\");\n        \n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance \u003e= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n        \n        emit TransferSingle(operator, from, to, id, amount);\n\n        _handleTransfer(from, to, id, amount);\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n    \n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == msg.sender || isApprovedForAll(from, msg.sender),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(msg.sender, from, to, ids, amounts, data);\n    }\n    \n    function _safeBatchTransferFrom(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != ZERO, \"ERC1155: transfer to the zero address\");\n        require(operator != ZERO, \"Operator is zero address\");\n        \n        for (uint256 i = 0; i \u003c ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n            \n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance \u003e= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n            \n            _handleTransfer(from, to, id, amount);\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n    \n    // Private helpers\n    \n    function _setURI(string memory newuri) private {\n        _uri = newuri;\n        emit SetURI(_uri);\n    }\n\n    function _handleTransfer(address sender, address recipient, uint256 tokenId, uint256 amount) private {\n        if (amount \u003e 0) {\n            _handleTransferLimitations(sender, recipient, tokenId, amount);\n            _handleHolderCount(sender, recipient, tokenId);\n            _handleFeatureValues(sender, recipient, tokenId, amount);\n        }\n    }\n    \n    function _handleTransferLimitations(address sender, address recipient, uint256 tokenId, uint256 amount) private {\n        if (!tokenMetadata[tokenId].isStackable) {\n            if (!isLimitExempt[recipient]) {\n                require(!hasNonStackable[recipient], \"Recipient has non-stackable NFT\");\n                require(amount == 1, \"Can\u0027t receive more than one non-stackable NFT\");\n            }\n\n            hasNonStackable[recipient] = true;\n            if (_balances[tokenId][sender] == 0) { hasNonStackable[sender] = false; }\n        }\n\n        if (tokenMetadata[tokenId].rewardToken.tokenAddress != ZERO) {\n            if (!isLimitExempt[recipient]) {\n                require(rewardToken[recipient].tokenAddress == ZERO, \"Recipient has active reward NFT\");\n                require(amount == 1, \"Can\u0027t receive more than one reward NFT\");\n            }\n\n            rewardToken[recipient] = tokenMetadata[tokenId].rewardToken;\n            if (_balances[tokenId][sender] == 0) { delete rewardToken[sender]; }\n        }\n    }\n\n    function _handleFeatureValues(address sender, address recipient, uint256 tokenId, uint256 amount) private {\n        // Iterate tokens feature ids (1st gen is bound to 4)\n        for (uint256 i; i \u003c _tokenFeatureIds[tokenId].length; i++) {\n            uint8 featureId = _tokenFeatureIds[tokenId][i];\n            uint256 newFeatureValue = tokenFeatureValue[tokenId][featureId];\n\n            if (featureId == LOTTERY_TICKET) {\n                if (sender != maintenanceWallet) { _lotteryTickets[sender] -= newFeatureValue * amount; }\n                if (recipient != maintenanceWallet) { _lotteryTickets[recipient] += newFeatureValue * amount; }\n            }\n\n            if (largestFeatureValue[recipient][featureId] \u003c newFeatureValue) {\n                largestFeatureValue[recipient][featureId] = newFeatureValue;\n            }\n\n            if (_balances[tokenId][sender] == 0) {\n                largestFeatureValue[sender][featureId] = 0;\n            }\n        }\n\n        if (!isHolderExempt[sender] \u0026\u0026 _balances[tokenId][sender] == 0) {\n            _updateLargestFeatureValues(sender);\n        }\n    }\n\n    function _updateLargestFeatureValues(address account) private {\n        // Iterate user tokens to check for new largest feature value (1st gen is bound to 19)\n        // Bound won\u0027t increase with every new token due to non-stackable and reward hold limitation\n        for (uint256 i; i \u003c _usersTokens[account].length(); i++) {\n            uint256 usersTokenId = _usersTokens[account].at(i);\n            // Iterate tokens feature ids (1st gen is bound to 4)\n            for (uint256 j; j \u003c _tokenFeatureIds[usersTokenId].length; j++) {\n                uint8 featureId = _tokenFeatureIds[usersTokenId][j];\n                uint256 newFeatureValue = tokenFeatureValue[usersTokenId][featureId];\n                if (largestFeatureValue[account][featureId] \u003c newFeatureValue) {\n                    largestFeatureValue[account][featureId] = newFeatureValue;\n                }\n            }\n        }\n    }\n    \n    function _handleHolderCount(address sender, address recipient, uint256 tokenId) private {\n        if (_balances[tokenId][sender] == 0) {\n            _holders[tokenId].remove(sender);\n            _usersTokens[sender].remove(tokenId);\n        }\n        \n        if (_balances[tokenId][recipient] \u003e 0) {\n            _holders[tokenId].add(recipient);\n            _usersTokens[recipient].add(tokenId);\n        }\n    }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n    \n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n    \n    // Custom interface\n\n    function consume(uint256 tokenId, address sender) external override onlyToken {\n        require(tokenMetadata[tokenId].isConsumable, \"Token is not consumable\");\n        \n        _safeTransferFrom(sender, sender, DEAD, tokenId, 1, \"\");\n        emit Consume(sender, tokenId);\n    }\n\n    function stake(uint256 tokenId, address sender) external override onlyMuseum {\n        require(tokenMetadata[tokenId].isStakeable, \"Token is not stakeable\");\n\n        _safeTransferFrom(sender, sender, museum, tokenId, 1, \"\");\n        emit Stake(sender, tokenId);\n    }\n\n    function priceOf(uint256 tokenId) external view override returns (uint256) {\n        return tokenMetadata[tokenId].price;\n    }\n\n    function stakingRewardShareOf(uint256 tokenId, address account) external view override returns (uint256) {\n        if (isHolderExempt[account]) { return 0; }\n        return _usersTokens[account].contains(tokenId) ? tokenMetadata[tokenId].stakingRewardShare : 0;\n    }\n    \n    function featureValueOf(uint8 featureId, address account) public view override returns (uint256) {\n        if (isHolderExempt[account]) { return 0; }\n        return largestFeatureValue[account][featureId];\n    }\n\n    function lotteryTicketsOf(address account) external view override returns (uint256) {\n        if (isHolderExempt[account]) { return 0; }\n        return _lotteryTickets[account];\n    }\n\n    function rewardTokenFor(address account) external view override returns (address, address) {\n        if (isHolderExempt[account]) { return (BANANA, WBNB); }\n        if (rewardToken[account].tokenAddress != ZERO) {\n            return (rewardToken[account].tokenAddress, rewardToken[account].pair);\n        }\n        return (BANANA, WBNB);\n    }\n    \n    function createdTokensAmount() external view returns (uint256) {\n        return _tokenIds.length();\n    }\n\n    function createdTokenId(uint256 index) external view returns (uint256) {\n        return _tokenIds.at(index);\n    }\n\n    // Helpers to iterate token holders\n    \n    function tokenHoldersAmount(uint256 tokenId) external view returns (uint256) {\n        return _holders[tokenId].length();\n    }\n    \n    function tokenHolder(uint256 tokenId, uint256 index) external view returns (address) {\n        return _holders[tokenId].at(index);\n    }\n\n    // Helpers to iterate token feature ids\n\n    function tokenFeatureIdsAmount(uint256 tokenId) external view returns (uint256) {\n        return _tokenFeatureIds[tokenId].length;\n    }\n\n    function tokenFeatureId(uint256 tokenId, uint256 index) external view returns (uint8) {\n        return _tokenFeatureIds[tokenId][index];\n    }\n\n    // Helpers to iterate tokens that user hold\n\n    function userTokensAmount(address account) external view returns (uint256) {\n        return _usersTokens[account].length();\n    }\n\n    function userToken(address account, uint256 index) external view returns (uint256) {\n        return _usersTokens[account].at(index);\n    }\n    \n    // Team\n\n    function setURI(string memory newUri) external onlyTeam {\n        _uri = newUri;\n        emit SetURI(_uri);\n    }\n\n    function updateMaintenanceWallet(address newAddress) external onlyTeam {\n        isHolderExempt[maintenanceWallet] = false;\n        isLimitExempt[maintenanceWallet] = false;\n        isHolderExempt[newAddress] = true;\n        isLimitExempt[newAddress] = true;\n        maintenanceWallet = newAddress;\n    }\n\n    function initMuseum(address newMuseum) external onlyTeam {\n        require(museum == ZERO, \"Museum is already initialized\");\n\n        museum = newMuseum;\n        isHolderExempt[museum] = true;\n        isLimitExempt[museum] = true;\n        emit InitMuseum(museum);\n    }\n\n    function initToken(address newToken) external onlyTeam {\n        require(token == ZERO, \"Token is already initialized\");\n\n        token = newToken;\n        emit InitToken(token);\n    }\n\n    function setLimitExempt(address account, bool exempt) external onlyTeam {\n        require(account != maintenanceWallet \u0026\u0026 account != ZERO \u0026\u0026 account != DEAD, \"Unauthorized parameter address\");\n        \n        isLimitExempt[account] = exempt;\n        emit SetLimitExempt(account, exempt);\n    }\n\n    // Maintenance\n\n    function setTokenPrice(uint256 tokenId, uint256 newPrice) external onlyMaintenance {\n        require(_tokenIds.contains(tokenId), \"Token id doesn\u0027t exist\");\n\n        tokenMetadata[tokenId].price = newPrice;\n        emit SetTokenPrice(tokenId, newPrice);\n    }\n\n    function freezeMinting(uint256 tokenId) external onlyMaintenance {\n        isFrozen[tokenId] = true;\n        emit FreezeMinting(tokenId);\n    }\n\n    function freezeMintingBatch(uint256[] memory tokenIds) external onlyMaintenance {\n        for (uint256 i; i \u003c tokenIds.length; i++) {\n            isFrozen[tokenIds[i]] = true;\n        }\n        emit FreezeMintingBatch(tokenIds);\n    }\n\n    // Creation\n\n    /**\n     * @notice Create new token for this collection.\n     * @notice Marketing still need to mint tokens separately.\n     * @notice Calling of this function is limited to maintenance wallet.\n     * @param tokenId Token id to be added in the collection.\n     * @param metadata Token metadata.\n     * @param featureIds List of feature ids to be added as a token features.\n     * @param featureValues List of feature values.\n    */\n    function addToken(\n        uint256 tokenId,\n        Metadata calldata metadata,\n        uint8[] calldata featureIds,\n        uint256[] calldata featureValues\n    ) public onlyMaintenance {\n        require(minted[tokenId] == 0, \"Can\u0027t modify minted tokens\");\n        require(!_tokenIds.contains(tokenId), \"Token id is already created\");\n        require(featureIds.length == featureValues.length, \"Parameter length mismatch\");\n        \n        _tokenIds.add(tokenId);\n        tokenMetadata[tokenId] = metadata;\n        if (metadata.isConsumable) { require(featureIds.length == 1, \"Consumable can\u0027t have many perks\"); }\n        \n        for (uint256 i; i \u003c featureIds.length; i++) {\n            uint8 featureId = featureIds[i];\n            _tokenFeatureIds[tokenId].push(featureId);\n            tokenFeatureValue[tokenId][featureId] = featureValues[i];\n        }\n\n        if (!isAddingBatchOfTokens) {\n            emit AddToken(tokenId, metadata, featureIds, featureValues);\n        }\n    }\n\n    /**\n     * @notice Same as addToken, but add multiple token configs at once.\n     * @notice Marketing still need to mint tokens separately.\n     * @notice Calling of this function is limited to maintenance wallet.\n     * @param tokenIds List of token ids to be added in the collection.\n     * @param metadatas List of token metadatas.\n     * @param arrayOffeatureIds Multidimensional array of feature ids.\n     * @param arrayOfFeatureValues Multidimensional array of feature values.\n    */\n    function addTokenBatch(\n        uint256[] calldata tokenIds,\n        Metadata[] calldata metadatas,\n        uint8[][] calldata arrayOffeatureIds,\n        uint256[][] calldata arrayOfFeatureValues\n    ) external onlyMaintenance {\n        isAddingBatchOfTokens = true;\n\n        bool validParametersLengths = tokenIds.length == metadatas.length \u0026\u0026 \n            metadatas.length == arrayOffeatureIds.length \u0026\u0026\n            arrayOffeatureIds.length == arrayOfFeatureValues.length;\n        require(validParametersLengths, \"Parameter length mismatch\");\n\n        for (uint256 i; i \u003c tokenIds.length; i++) {\n            addToken(tokenIds[i], metadatas[i], arrayOffeatureIds[i], arrayOfFeatureValues[i]);\n        }\n\n        emit AddTokenBatch(tokenIds, metadatas, arrayOffeatureIds, arrayOfFeatureValues);\n\n        isAddingBatchOfTokens = false;\n    }\n    \n    /**\n     * @notice Remove token from this collection.\n     * @notice Token to be removed must have been created before removal.\n     * @notice Minted tokens cannot be removed.\n     * @notice Calling of this function is limited to maintenance wallet.\n     * @param tokenId Id of the token to be removed.\n    */\n    function removeToken(uint256 tokenId) external onlyMaintenance {\n        require(_tokenIds.contains(tokenId), \"Token id doesn\u0027t exist\");\n        require(minted[tokenId] == 0, \"Can\u0027t modify minted tokens\");\n        \n        _tokenIds.remove(tokenId);\n        \n        for (uint256 i; i \u003c _tokenFeatureIds[tokenId].length; i++) {\n            uint8 featureId = _tokenFeatureIds[tokenId][i];\n            delete tokenFeatureValue[tokenId][featureId];\n        }\n        \n        delete _tokenFeatureIds[tokenId];\n        delete tokenMetadata[tokenId];\n\n        emit RemoveToken(tokenId);\n    }\n\n    /**\n     * @notice Mint new NFTs. Passed id must be created by calling addToken before minting.\n     * @notice Minter doesn\u0027t gain any perks of the NFTs.\n     * @notice Calling of this function is limited to maintenance wallet.\n     * @param id Id of the token to be minted.\n     * @param amount Amount of tokens to be minted.\n    */\n    function mint(uint256 id, uint256 amount) external onlyMaintenance {\n        require(_tokenIds.contains(id), \"Token id doesn\u0027t exist\");\n        require(!isFrozen[id], \"Token id is frozen\");\n        \n        if (tokenMetadata[id].isUnique) { require(minted[id] == 0 \u0026\u0026 amount == 1, \"Can\u0027t mint more than 1 NFT\"); }\n        minted[id] += amount;\n\n        _balances[id][msg.sender] += amount;\n        emit TransferSingle(msg.sender, ZERO, msg.sender, id, amount);\n\n        _doSafeTransferAcceptanceCheck(msg.sender, ZERO, msg.sender, id, amount, \"\");\n    }\n\n    /**\n     * @notice Same as mint function, but mint multiple NFTs at once.\n     * @notice Minter doesn\u0027t gain any perks of the NFTs.\n     * @notice Both parameters MUST have same length.\n     * @notice Calling of this function is limited to maintenance wallet.\n     * @param ids List of ids of tokens to be minted.\n     * @param amounts List of amounts of tokens to be minted.\n    */\n    function mintBatch(uint256[] memory ids, uint256[] memory amounts) external onlyMaintenance {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        for (uint256 i = 0; i \u003c ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n            \n            require(_tokenIds.contains(id), \"Token id doesn\u0027t exist\");\n            require(!isFrozen[id], \"Token id is frozen\");\n            \n            if (tokenMetadata[id].isUnique) { require(minted[id] == 0 \u0026\u0026 amount == 1, \"Can\u0027t mint more than 1 NFT\"); }\n            minted[id] += amount;\n            _balances[id][msg.sender] += amount;\n        }\n\n        emit TransferBatch(msg.sender, ZERO, msg.sender, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(msg.sender, ZERO, msg.sender, ids, amounts, \"\");\n    }\n}\n"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue\u0027s index to valueIndex\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"},"IBabyBananaNFT.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBabyBananaNFT {\n    function consume(uint256 tokenId, address sender) external;\n    function stake(uint256 tokenId, address sender) external;\n    function priceOf(uint256 tokenId) external view returns (uint256);\n    function stakingRewardShareOf(uint256 tokenId, address account) external view returns (uint256);\n    function featureValueOf(uint8 feature, address account) external view returns (uint256);\n    function lotteryTicketsOf(address account) external view returns (uint256);\n    function rewardTokenFor(address account) external view returns (address, address);\n\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external;\n}\n"},"IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller\u0027s tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``\u0027s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\u0027s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}"},"IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"}}