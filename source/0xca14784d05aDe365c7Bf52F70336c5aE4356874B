
// File: contracts/ApeHeroCollabMarket.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.9;

import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";

import "./ApeHeroCollabTypes.sol";

interface IItemManager {
    function getItem(uint itemId) external view returns(Item memory);
    function getItemsByIds(uint[] calldata itemIds) external view returns(Item[] memory);
    function getItemsByStatus(ItemStatus status) external view returns(Item[] memory);
    function getItemsTotal() external view returns(ItemsTotal memory);
    function setItemStatus(uint itemId, ItemStatus status) external;
    function extendItemExpiration(uint itemId, uint extraSeconds) external;
    function increaseCurrentSupply(uint itemId, uint amount, uint payment, uint refunded) external;
    function addUniqueBuyer(uint itemId, address account) external;
    function removeUniqueBuyer(uint itemId, address account) external;
}

interface IPOW is IERC20 {
    function burn(uint amount) external;
}

interface IVRFProvider {
    function getRandomResults(uint itemId) external returns(uint[] memory);
}

contract ApeHeroCollabMarket is Ownable, AccessControlEnumerable, Pausable, ReentrancyGuard {
    using EnumerableSet for EnumerableSet.UintSet;
    using Address for address;
    using Strings for uint;

    struct ContractData {
        Item[] items;
        ItemsTotal total;
        uint burnableBalance;
        uint burnedBalance;
        bool paused;
        address POW;
        address ItemManager;
        address VRFProvider;
        uint VRFProviderGasLimit;
        uint raffleMaxCap;
    }

    uint BURNABLE_BALANCE;
    uint BURNED_BALANCE;

    IPOW POW;
    IItemManager ItemManager;
    IVRFProvider VRFProvider;
    address POWAddress;
    address ItemManagerAddress;
    address VRFProviderAddress;
    uint VRFProviderGasLimit;
    uint public RAFFLE_MAX_CAP = 5000;
    mapping(uint => uint) private ITEM_BALANCES;
    mapping(address => EnumerableSet.UintSet) private ACCOUNT_ITEMS; // {[account]: [item.id...]}
    mapping(uint => mapping(uint => Receipt)) private RECEIPTS;
    mapping(address => mapping(uint => EnumerableSet.UintSet)) private ACCOUNT_RECEIPTS; // {[account]: {[item.id]: [receipt.id...]}
    mapping(uint => EnumerableSet.UintSet) private RAFFLE_WINNERS; // {[item.id]: [receipt.id...]}
    mapping(uint => uint) private AUCTION_WINNERS; // {[item.id]: receipt.id}

    event ItemPurchased(address buyer, uint itemId, uint receiptId, uint timestamp);
    event ReceiptUpdated(address account, uint itemId, uint receiptId, uint timestamp);
    event ReceiptTransferred(address previousOwner, address newOwner, uint itemId, uint receiptId, uint timestamp);
    event Refunded(address account, uint amount, uint itemId, uint receiptId, uint timestamp);
    event FundsReceived(address account, uint amount, uint timestamp);
    event FundsDirectlyDeposited(address account, uint amount, uint timestamp);
    event VRFProviderChanged(address sender, address vrfProvider, uint timestamp);
    event TokenBurned(uint burned, uint timestamp);

    constructor(address powToken, address itemMgr) Ownable() {
        _grantRole(DEFAULT_ADMIN_ROLE, owner());
        _grantRole(ADMIN, owner());
        _grantRole(OPERATOR, owner());

        POWAddress = powToken;
        POW = IPOW(powToken);
        ItemManagerAddress = itemMgr;
        ItemManager = IItemManager(itemMgr);
    }

    // --- modifiers --- //
    modifier onlyAdminAndOperator() {
        require(
            hasRole(ADMIN, _msgSender()) || hasRole(OPERATOR, _msgSender()),
            "ADMIN or OPERATOR role required"
        );
        _;
    }

    // --- fallback/received --- //
    receive() external payable {
        emit FundsReceived(_msgSender(), msg.value, block.timestamp);
    }

    fallback() external payable {
        emit FundsDirectlyDeposited(_msgSender(), msg.value, block.timestamp);
    }

    // --- utils --- //
    function _purchaseGuard(address buyer, Item memory item, uint amount, uint nativePayment, uint totalCost, uint currentWinningReceiptId) internal {
        uint _now = block.timestamp;
        require((item.startedOn == 0 || item.startedOn <= _now), "Item not yet on sale");
        require((item.expiresOn == 0 || item.expiresOn >= _now) && (item.status == ItemStatus.ACTIVE), "Item expired or inactive");
        if (item.mode == ItemMode.AUCTION) {
            require(totalCost >= item.price, "Did not meet minimum bid requirement");
            require(
                totalCost >= (RECEIPTS[item.itemId][currentWinningReceiptId].payment + item.minIncrement),
                "Invalid bid"
            );
        } else {
            uint _buyerAlreadyPurchased = ACCOUNT_RECEIPTS[buyer][item.itemId].length();
            if (item.mode == ItemMode.RAFFLE) {
                require(
                    (item.maxSupply == 0) ||
                    (((_buyerAlreadyPurchased + amount) * 1e4) / item.maxSupply) <= RAFFLE_MAX_CAP,
                    string(abi.encodePacked("Cannot buy more than ", ((RAFFLE_MAX_CAP * 100) / 1e4).toString(), "% of max supply"))
                );
            }
            require(
                ((item.maxPerAccount == 0) || (_buyerAlreadyPurchased + amount <= item.maxPerAccount)) &&
                ((item.maxSupply == 0) || (item.currentSupply + amount <= item.maxSupply)),
                "Sold-out or buying more than allowed"
            );
        }

        if (item.nativePayment) {
            require(nativePayment >= totalCost, "Insufficient payment");
            ITEM_BALANCES[item.itemId] += nativePayment;
        } else {
            uint _balance = IERC20(address(item.paymentToken) != address(0) ? item.paymentToken : POWAddress).balanceOf(buyer);
            require(_balance >= totalCost, "Insufficient balance");
            IERC20(address(item.paymentToken) != address(0) ? item.paymentToken : POWAddress)
                .transferFrom(buyer, address(this), totalCost);
            ITEM_BALANCES[item.itemId] += totalCost;
        }
    }

    function _createReceipt(address buyer, Item memory item, uint payment, string calldata data, uint receiptId, bool won) internal returns(uint) {
        uint _now = block.timestamp;
        uint _receiptId = receiptId > 0 ? receiptId : item.currentSupply + 1;
        RECEIPTS[item.itemId][_receiptId] = Receipt({
            txBlock: block.number,
            receiptId: _receiptId,
            itemId: item.itemId,
            account: buyer,
            originalAccount: buyer,
            payment: payment,
            data: data,

            won: won,
            refunded: false,
            purchasedOn: _now,
            updatedOn: _now
        });

        return _receiptId;
    }

    function _refund(Item memory item, uint receiptId) internal {
        uint _itemId = item.itemId;
        Receipt memory _receipt = RECEIPTS[_itemId][receiptId];
        if (item.nativePayment) {
            payable(_receipt.account).transfer(_receipt.payment);
        } else {
            IERC20(address(item.paymentToken) != address(0) ? item.paymentToken : POWAddress)
                .transfer(_receipt.account, _receipt.payment);
        }
        RECEIPTS[_itemId][_receipt.receiptId].refunded = true;
        ITEM_BALANCES[_itemId] -= _receipt.payment;

        emit Refunded(_receipt.account, _receipt.payment, _itemId, receiptId, block.timestamp);
    }

    // --- ADMIN --- //
    function emergencyWithdraw(uint amount) external onlyRole(ADMIN) {
        payable(owner()).transfer(amount > 0 ? amount : address(this).balance);
    }

    function emergencyWithdrawToken(address token, uint amount) external onlyRole(ADMIN) {
        IERC20(token).transfer(owner(), amount > 0 ? amount : IERC20(token).balanceOf(address(this)));
    }

    function pause() external onlyRole(ADMIN) {
        _pause();
    }

    function unpause() external onlyRole(ADMIN) {
        _unpause();
    }

    function setVRFProvider(address vrfProvider, uint vrfProviderGasLimit) external onlyRole(ADMIN) {
        VRFProviderAddress = vrfProvider;
        VRFProvider = IVRFProvider(vrfProvider);
        if (vrfProviderGasLimit > 0) {
            VRFProviderGasLimit = vrfProviderGasLimit;
        }

        emit VRFProviderChanged(_msgSender(), vrfProvider, block.timestamp);
    }

    function setRaffleMaxCap(uint maxCap) external onlyRole(ADMIN) {
        RAFFLE_MAX_CAP = maxCap;
    }

    // --- ADMIN & OPERATOR --- //
    function finalizeItem(uint itemId) external onlyAdminAndOperator {
        Item memory _item = ItemManager.getItem(itemId);
        require(_item.status != ItemStatus.FINALIZED, "Item already finalized");
        require(_item.payoutWallet != address(0), "Payout wallet not set");
        require(_item.mode != ItemMode.RAFFLE || VRFProviderAddress != address(0), "Raffle mode requires VRF Provider");

        if (_item.mode == ItemMode.RAFFLE) {
            uint[] memory _winners = VRFProvider.getRandomResults(itemId);
            require(_winners.length == _item.winnersTotal, "Winners not yet determined or invalid total winners drawn");
            for (uint _idx = 0; _idx < _winners.length; _idx++) {
                RECEIPTS[itemId][_winners[_idx]].won = true;
                RAFFLE_WINNERS[itemId].add(_winners[_idx]);
            }
        }

        if (ITEM_BALANCES[itemId] > 0) {
            if (_item.nativePayment) {
                payable(_item.payoutWallet).transfer(ITEM_BALANCES[itemId]);
            } else if (address(_item.paymentToken) != address(0)) {
                IERC20(_item.paymentToken).transfer(_item.payoutWallet, ITEM_BALANCES[itemId]);
            } else {
                if (_item.paymentBurn < 1e4) {
                    uint _burnable = (ITEM_BALANCES[itemId] * _item.paymentBurn) / 1e4;
                    BURNABLE_BALANCE += _burnable;
                    IERC20(POW).transfer(_item.payoutWallet, ITEM_BALANCES[itemId] - _burnable);
                } else {
                    BURNABLE_BALANCE += ITEM_BALANCES[itemId];
                }
            }
            ITEM_BALANCES[itemId] = 0;
        }

        ItemManager.setItemStatus(itemId, ItemStatus.FINALIZED);
    }

    function refundItem(uint itemId, uint[] calldata refunds) external onlyAdminAndOperator {
        Item memory _item = ItemManager.getItem(itemId);
        for (uint _idx = 0; _idx < refunds.length; _idx++) {
            _refund(_item, refunds[_idx]);
        }
    }

    function burn() external onlyAdminAndOperator {
        if (BURNABLE_BALANCE > 0) {
            uint _burnable = BURNED_BALANCE;
            POW.burn(BURNABLE_BALANCE);
            BURNED_BALANCE += BURNABLE_BALANCE;
            BURNABLE_BALANCE = 0;
            emit TokenBurned(_burnable, block.timestamp);
        }
    }

    // --- public --- //
    function getItemBalance(uint itemId) public view returns(uint) {
        return ITEM_BALANCES[itemId];
    }

    function getItemReceiptsByIds(uint itemId, uint[] memory receipts) public view returns(Receipt[] memory) {
        Receipt[] memory _allReceipts;
        if (receipts.length == 0) {
            return _allReceipts;
        }

        _allReceipts = new Receipt[](receipts.length);
        for (uint _idx = 0; _idx < receipts.length; _idx++) {
            _allReceipts[_idx] = RECEIPTS[itemId][receipts[_idx]];
        }

        return _allReceipts;
    }

    function getReceiptsForItem(uint itemId, uint[] memory receipts) public view returns (Receipt[] memory) {
        if (receipts.length > 0) {
            return getItemReceiptsByIds(itemId, receipts);
        }

        Item memory _item = ItemManager.getItem(itemId);
        Receipt[] memory _receipts = new Receipt[](_item.currentSupply);
        for (uint _idx = 0; _idx < _item.currentSupply; _idx++) {
            _receipts[_idx] = RECEIPTS[itemId][_idx + 1];
        }

        return _receipts;
    }

    function getWinningReceiptsForItem(uint itemId) external view returns (Receipt[] memory) {
        Item memory _item = ItemManager.getItem(itemId);
        Receipt[] memory _allWinners;

        if (_item.mode == ItemMode.NORMAL) {
            _allWinners = getReceiptsForItem(itemId, new uint[](0));
        } else if (_item.mode == ItemMode.AUCTION) {
            require(AUCTION_WINNERS[itemId] > 0, "No winning bid");
            _allWinners = new Receipt[](1);
            _allWinners[0] = RECEIPTS[itemId][AUCTION_WINNERS[itemId]];
        } else {
            uint _raffleWinnersCount = RAFFLE_WINNERS[itemId].length();
            _allWinners = new Receipt[](_raffleWinnersCount);
            for (uint _idx = 0; _idx < _raffleWinnersCount; _idx++) {
                _allWinners[_idx] = RECEIPTS[itemId][RAFFLE_WINNERS[itemId].at(_idx)];
            }
        }

         return _allWinners;
    }

    function getAccountReceiptsForItem(address account, uint itemId) public view returns(Receipt[] memory) {
        uint _accountReceiptsCount = ACCOUNT_RECEIPTS[account][itemId].length();
        uint[] memory _allAccountReceipts = new uint[](_accountReceiptsCount);
        for (uint _idx = 0; _idx < _accountReceiptsCount; _idx++) {
            _allAccountReceipts[_idx] = ACCOUNT_RECEIPTS[account][itemId].at(_idx);
        }

        return getItemReceiptsByIds(itemId, _allAccountReceipts);
    }

    function getAccountItems(address account) public view returns(AccountItem[] memory) {
        uint _itemsCount = ACCOUNT_ITEMS[account].length();
        AccountItem[] memory _allAccountItems;
        if (_itemsCount == 0) {
            return _allAccountItems;
        }

        uint[] memory _allAccountItemsIds = new uint[](_itemsCount);
        _allAccountItems = new AccountItem[](_itemsCount);

        uint _idx;
        for (_idx = 0; _idx < _itemsCount; _idx++) {
            _allAccountItemsIds[_idx] = ACCOUNT_ITEMS[account].at(_idx);
        }

        Item[] memory _itemsData = ItemManager.getItemsByIds(_allAccountItemsIds);
        for (_idx = 0; _idx < _itemsCount; _idx++) {
            _allAccountItems[_idx] = AccountItem({
                item: _itemsData[_idx],
                receipts: getAccountReceiptsForItem(account, ACCOUNT_ITEMS[account].at(_idx))
            });
        }

        return _allAccountItems;
    }

    function updateReceiptData(uint itemId, uint receiptId, string calldata data) external whenNotPaused nonReentrant {
        address _currentOwner = _msgSender();
        Item memory _item = ItemManager.getItem(itemId);
        require(_item.status == ItemStatus.ACTIVE, "Item not active");
        require(RECEIPTS[itemId][receiptId].account == _currentOwner, "Not owner of receipt");

        uint _now = block.timestamp;
        RECEIPTS[itemId][receiptId].data = data;
        RECEIPTS[itemId][receiptId].updatedOn = _now;

        emit ReceiptUpdated(_currentOwner, itemId, receiptId, _now);
    }

    function transferReceiptOwner(uint itemId, uint receiptId, address newOwner, string calldata data) external whenNotPaused nonReentrant {
        address _currentOwner = _msgSender();
        Item memory _item = ItemManager.getItem(itemId);
        require(_item.status == ItemStatus.ACTIVE, "Item not active");
        require(RECEIPTS[itemId][receiptId].account == _currentOwner, "Not owner of receipt");

        // RAFFLE_MAX_CAP check
        if (_item.mode == ItemMode.RAFFLE) {
            uint _buyerAlreadyPurchased = ACCOUNT_RECEIPTS[newOwner][itemId].length();
            require(
                (_item.maxSupply == 0) ||
                (((_buyerAlreadyPurchased + 1) * 1e4) / _item.maxSupply) <= RAFFLE_MAX_CAP,
                string(abi.encodePacked("Account cannot own more than ", ((RAFFLE_MAX_CAP * 100) / 1e4).toString(), "% of max supply"))
            );
        }

        uint _now = block.timestamp;
        RECEIPTS[itemId][receiptId].account = newOwner;
        RECEIPTS[itemId][receiptId].data = data;
        RECEIPTS[itemId][receiptId].updatedOn = _now;
        ACCOUNT_RECEIPTS[newOwner][itemId].add(receiptId);
        ACCOUNT_RECEIPTS[_currentOwner][itemId].remove(receiptId);
        ItemManager.addUniqueBuyer(itemId, newOwner);

        if (ACCOUNT_RECEIPTS[_currentOwner][itemId].length() == 0) {
            ItemManager.removeUniqueBuyer(itemId, _currentOwner);
        }

        emit ReceiptTransferred(_currentOwner, newOwner, itemId, receiptId, _now);
    }

    function bid(uint itemId, uint payment, string calldata data) external payable whenNotPaused nonReentrant {
        Item memory _item = ItemManager.getItem(itemId);
        address _buyer = _msgSender();
        uint _now = block.timestamp;
        require(_item.mode == ItemMode.AUCTION, "Cannot bid on non-auction items. Use buy function instead");
        uint _currentWinningReceiptId = AUCTION_WINNERS[itemId];
        _purchaseGuard(_buyer, _item, 1, msg.value, payment, _currentWinningReceiptId);

        // winning bid
        uint _newReceiptId = _createReceipt(_buyer, _item, payment, data, 0, true);
        RECEIPTS[itemId][_newReceiptId].won = true;
        AUCTION_WINNERS[itemId] = _newReceiptId;
        ACCOUNT_RECEIPTS[_buyer][itemId].add(_newReceiptId);
        ACCOUNT_ITEMS[_buyer].add(itemId);
        ItemManager.increaseCurrentSupply(itemId, 1, payment, RECEIPTS[itemId][_currentWinningReceiptId].payment);
        ItemManager.addUniqueBuyer(itemId, _buyer);

        // refund previous winner
        if (_currentWinningReceiptId != 0) {
            _refund(_item, _currentWinningReceiptId);
            RECEIPTS[itemId][_currentWinningReceiptId].won = false;
            RECEIPTS[itemId][_currentWinningReceiptId].refunded = true;
        }

        // adds 5 minutes if bid within 2 minutes of expiration
        if ((_item.expiresOn - _now) <= 120) {
            ItemManager.extendItemExpiration(itemId, 300);
        }

        emit ItemPurchased(_buyer, itemId, _newReceiptId, _now);
    }

    function buy(uint itemId, uint amount, string calldata data) external payable whenNotPaused nonReentrant {
        Item memory _item = ItemManager.getItem(itemId);
        address _buyer = _msgSender();
        uint _now = block.timestamp;
        uint _totalCost = _item.price * amount;

        require(_item.mode != ItemMode.AUCTION, "Cannot buy auction item. Use bid function instead");
        _purchaseGuard(_buyer, _item, amount, msg.value, _totalCost, 0);

        uint _receiptId;
        for (uint _idx = 0; _idx < amount; _idx++) {
            _receiptId = _createReceipt(_buyer, _item, _item.price, data, _item.currentSupply + _idx + 1, false);
            ACCOUNT_RECEIPTS[_buyer][itemId].add(_receiptId);
            ACCOUNT_ITEMS[_buyer].add(itemId);
            ItemManager.increaseCurrentSupply(itemId, 1, _item.price, 0);

            emit ItemPurchased(_buyer, itemId, _receiptId, _now);
        }

        ItemManager.addUniqueBuyer(itemId, _buyer);
    }

    function wData(address account) public view returns (AccountData memory) {
        return AccountData({
            items: getAccountItems(account),
            allowance: IERC20(POW).allowance(account, address(this))
        });
    }

    function aData() external view returns (AccountData memory) {
        return wData(_msgSender());
    }

    function cData() external view returns (ContractData memory) {
        return ContractData({
            items: ItemManager.getItemsByStatus(ItemStatus.ACTIVE),
            total: ItemManager.getItemsTotal(),
            burnableBalance: BURNABLE_BALANCE,
            burnedBalance: BURNED_BALANCE,
            paused: paused(),
            POW: POWAddress,
            ItemManager: ItemManagerAddress,
            VRFProvider: VRFProviderAddress,
            VRFProviderGasLimit: VRFProviderGasLimit,
            raffleMaxCap: RAFFLE_MAX_CAP
        });
    }
}


// File: @openzeppelin/contracts/access/AccessControlEnumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)

pragma solidity ^0.8.0;

import "./IAccessControlEnumerable.sol";
import "./AccessControl.sol";
import "../utils/structs/EnumerableSet.sol";

/**
 * @dev Extension of {AccessControl} that allows enumerating the members of each role.
 */
abstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {
    using EnumerableSet for EnumerableSet.AddressSet;

    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns one of the accounts that have `role`. `index` must be a
     * value between 0 and {getRoleMemberCount}, non-inclusive.
     *
     * Role bearers are not sorted in any particular way, and their ordering may
     * change at any point.
     *
     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure
     * you perform all queries on the same block. See the following
     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]
     * for more information.
     */
    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {
        return _roleMembers[role].at(index);
    }

    /**
     * @dev Returns the number of accounts that have `role`. Can be used
     * together with {getRoleMember} to enumerate all bearers of a role.
     */
    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {
        return _roleMembers[role].length();
    }

    /**
     * @dev Overload {_grantRole} to track enumerable memberships
     */
    function _grantRole(bytes32 role, address account) internal virtual override {
        super._grantRole(role, account);
        _roleMembers[role].add(account);
    }

    /**
     * @dev Overload {_revokeRole} to track enumerable memberships
     */
    function _revokeRole(bytes32 role, address account) internal virtual override {
        super._revokeRole(role, account);
        _roleMembers[role].remove(account);
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastvalue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastvalue;
                // Update the index for the moved value
                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        assembly {
            result := store
        }

        return result;
    }
}


// File: contracts/ApeHeroCollabTypes.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.9;

bytes32 constant ADMIN = keccak256("ADMIN");
bytes32 constant CONTROLLER = keccak256("CONTROLLER");
bytes32 constant OPERATOR = keccak256("OPERATOR");

enum ItemMode {
    NORMAL, RAFFLE, AUCTION
}

enum ItemStatus {
    INACTIVE, ACTIVE, FINALIZED, REMOVED
}

struct Item {
    uint itemId;
    ItemMode mode;
    ItemStatus status;
    uint uniqueBuyers;
    uint balance;
    uint maxPerAccount;
    uint currentSupply;
    uint maxSupply;

    // payment
    uint price;
    address paymentToken;
    uint paymentTokenDecimals;
    bool nativePayment;
    uint paymentBurn;
    address payoutWallet;

    // raffle
    uint winnersTotal;

    // auction
    uint minIncrement;
    uint bidsTotal;
    uint lastBidPrice;
    uint lastBidOn;
    uint extensions;
    uint extendedTime;

    bool expired;
    uint startedOn;
    uint expiresOn;
    uint createdOn;
    uint updatedOn;
}

struct Receipt {
    uint txBlock;
    uint receiptId;
    uint itemId;
    address account;
    address originalAccount;
    uint payment;
    string data;

    bool won;
    bool refunded;
    uint purchasedOn;
    uint updatedOn;
}

struct AccountItem {
    Item item;
    Receipt[] receipts;
}

struct ItemsTotal {
    uint active;
    uint inactive;
    uint finalized;
    uint removed;
}

struct AccountData {
    AccountItem[] items;
    uint allowance;
}


// File: @openzeppelin/contracts/access/IAccessControlEnumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";

/**
 * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.
 */
interface IAccessControlEnumerable is IAccessControl {
    /**
     * @dev Returns one of the accounts that have `role`. `index` must be a
     * value between 0 and {getRoleMemberCount}, non-inclusive.
     *
     * Role bearers are not sorted in any particular way, and their ordering may
     * change at any point.
     *
     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure
     * you perform all queries on the same block. See the following
     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]
     * for more information.
     */
    function getRoleMember(bytes32 role, uint256 index) external view returns (address);

    /**
     * @dev Returns the number of accounts that have `role`. Can be used
     * together with {getRoleMember} to enumerate all bearers of a role.
     */
    function getRoleMemberCount(bytes32 role) external view returns (uint256);
}


// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";
import "../utils/Context.sol";
import "../utils/Strings.sol";
import "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role, _msgSender());
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

