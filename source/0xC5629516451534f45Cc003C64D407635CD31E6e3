// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

interface IPoint {
    event Mint(address indexed to, uint256 value);

    event Consume(address indexed consumer, address indexed from, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function gainOf(address account) external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function consume(address spender, uint256 amount) external;

    function mint(address to, uint256 amount) external;

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract TechTreesCoinStaking is Ownable {
    using SafeERC20 for IERC20;

    event TokenInjectorChanged(address indexed operator, address tokenInjector);
    event PoolAdded(address indexed operator, uint256 flags, uint256 factor, uint256 feeFreePeriod, uint256 lockPeriod);
    event Deposit(address indexed account, uint256 indexed poolId, uint256 value);
    event Withdraw(address indexed account, uint256 indexed poolId, uint256 value);
    event WithdrawPendingTokens(address indexed account, uint256 points, uint256 value);
    event EmergencyWithdraw(address indexed account, uint256 value);

    event Start(address indexed operator, uint256 powEndBlock);
    event StakingParameterChanged(address indexed operator, uint256 totalInjectedTokens, uint256 powTokensPerBlock, uint256 pointsPerBlock);
    event StakingInternalParameterChanged(address indexed operator, uint256 lastUpdateBlock, uint256 accTokensPerShare, uint256 accPointsPerEther);

    // TTC-10 remove unnecessary variables
    uint256 private constant fPoint = 1 << 0;
    uint256 private constant fTTC = 1 << 1;
    uint256 private constant fObsolete = 1 << 2;
    uint256 private constant blocksPerday = 20 * 60 * 24;
    uint256 private constant sqrt1EtherFBase = 1e10;
    uint256 private constant feePercentage = 95;
    uint256 private constant factorBase = 100;
    uint256 private constant acc1e12 = 1e12;
    address private constant zeroAddress = address(0);

    struct Pool {
        uint8 flags;
        uint16 factor; // base 100
        uint32 feeFreePeriod; // fee free blocks
        uint32 lockPeriod; // lock blocks
        uint96 totalStake; // total
    }

    struct StakedShare {
        uint96 amount;
        uint32 lastDepositBlock;
        uint128 powRewardDebt; // 256bits
        uint256 pointRewardDebt; // 256bits
    }

    bool public emergency;
    uint216 public accTokensPerShare;
    uint32 public lastUpdateBlock;
    // 256 bits
    uint32 public powEndBlock;
    uint96 public powTokensPerBlock;
    uint128 public powShareTotal;
    // 256 bits
    uint256 public totalStaked;
    uint256 public totalInjectedTokens;

    uint96 public pointsPerBlock;
    uint160 public accPointsPerEther;
    // 256 bits

    // pool => account => value
    mapping(address => mapping(uint256 => StakedShare)) private _userStakes;

    Pool[] public pools;

    IPoint public immutable ttPoint;
    IERC20 public immutable ttCoin;
    address public tokenInjector;

    constructor(address ttPoint_, address ttCoin_) {
        ttPoint = IPoint(ttPoint_);
        ttCoin = IERC20(ttCoin_);
        _initPoolDev();
    }

    function setEmergency() external onlyOwner {
        emergency = true;
    }

    function _initPoolDev() private {
        pools.push(Pool({flags: uint8(fPoint), factor: 100, feeFreePeriod: uint32(blocksPerday * 7), lockPeriod: 0, totalStake: 0}));
        pools.push(Pool({flags: uint8(fTTC), factor: 100, feeFreePeriod: uint32(blocksPerday * 7), lockPeriod: 0, totalStake: 0}));
        pools.push(Pool({flags: uint8(fPoint | fTTC), factor: 150, feeFreePeriod: 0, lockPeriod: uint32(blocksPerday * 30), totalStake: 0}));
        pools.push(Pool({flags: uint8(fPoint | fTTC), factor: 200, feeFreePeriod: 0, lockPeriod: uint32(blocksPerday * 60), totalStake: 0}));
        pools.push(Pool({flags: uint8(fPoint | fTTC), factor: 400, feeFreePeriod: 0, lockPeriod: uint32(blocksPerday * 120), totalStake: 0}));
    }

    function start() external onlyOwner nonStarted {
        // make sure the contract has been injected enought tokens for staking
        require(totalInjectedTokens > 0, "not enought pow tokens");
        require(powTokensPerBlock > 0, "powTokensPerBlock not initialized");
        require(pointsPerBlock > 0, "pointsPerBlock not initialized");
        // confirm staking end block
        powEndBlock = uint32(block.number + totalInjectedTokens / powTokensPerBlock);
        // set last update block to current block
        lastUpdateBlock = uint32(block.number);
        emit Start(msg.sender, powEndBlock);
    }

    // can be called after staking is started in order to adjust dispatch ratio
    // it will change the end time of staking proceduce
    function setPowTokensPerBlock(uint256 powTokensPerBlock_) external onlyOwner {
        if (lastUpdateBlock > 0) {
            // if staking is started, it needs update staking parameters
            require(powEndBlock > block.number, "already ended");
            _updateStakingParameter();
            uint256 restToken = (uint256(powEndBlock) - block.number) * powTokensPerBlock;
            powEndBlock = uint32(block.number + restToken / powTokensPerBlock_);
        }
        powTokensPerBlock = uint96(powTokensPerBlock_);
        emit StakingParameterChanged(msg.sender, totalInjectedTokens, powTokensPerBlock, pointsPerBlock);
    }

    // can be called after staking is started in order to adjust dispatch ratio
    function setPointsPerBlock(uint256 pointsPerBlock_) external onlyOwner {
        if (lastUpdateBlock > 0) {
            // if staking is started, it needs update staking parameters
            require(powEndBlock > block.number, "already ended");
            _updateStakingParameter();
        }
        pointsPerBlock = uint96(pointsPerBlock_);
        emit StakingParameterChanged(msg.sender, totalInjectedTokens, powTokensPerBlock, pointsPerBlock);
    }

    // can be called after staking is started in order to add dispatchable tokens
    // it will change the end time of staking proceduce
    function addPowTokens(uint256 powTokens) external onlyTokenInjector {
        ttCoin.safeTransferFrom(msg.sender, address(this), powTokens);
        totalInjectedTokens += powTokens;
        if (lastUpdateBlock > 0) {
            // if staking is started, it needs update staking parameters
            require(powEndBlock > block.number, "already ended");
            uint256 restToken = (uint256(powEndBlock) - block.number) * powTokensPerBlock + powTokens;
            powEndBlock = uint32(block.number + restToken / powTokensPerBlock);
        }
        emit StakingParameterChanged(msg.sender, totalInjectedTokens, powTokensPerBlock, pointsPerBlock);
    }

    function setTokenInjector(address tokenInjector_) external onlyOwner {
        tokenInjector = tokenInjector_;
        emit TokenInjectorChanged(msg.sender, tokenInjector_);
    }

    function restInjectedTokens() public view returns (uint256) {
        if (lastUpdateBlock == 0) return totalInjectedTokens;
        else return (powEndBlock - min(block.number, powEndBlock)) * powTokensPerBlock;
    }

    function flipPoolObsolete(uint256 pId) external onlyOwner {
        pools[pId].flags ^= uint8(fObsolete);
    }

    function addPool(
        uint8 flags,
        uint16 factor,
        uint32 feeFreePeriod,
        uint32 lockPeriod
    ) external onlyOwner {
        pools.push(Pool({flags: flags, factor: factor, feeFreePeriod: feeFreePeriod, lockPeriod: lockPeriod, totalStake: 0}));
        emit PoolAdded(msg.sender, flags, factor, feeFreePeriod, lockPeriod);
    }

    function poolCount() external view returns (uint256 count) {
        return pools.length;
    }

    // deposit
    function deposit(uint256 pId, uint256 value) external nonEmergency validPool(pId) {
        require(value > 0, "empty deposit is not allowed");
        // transfer-in tokens
        ttCoin.safeTransferFrom(msg.sender, address(this), value);

        // withdraw pending tokens(if any) then update global staking parameters
        (uint256 _accTokensPerShare, uint256 _accPointsPerEther) = _withdrawSinglePending(msg.sender, pId);
        if ((pools[pId].flags & fTTC) > 0) powShareTotal += uint128((value * pools[pId].factor) / factorBase);
        totalStaked += value;

        // update user's staking parameters
        StakedShare storage stakedShare = _userStakes[msg.sender][pId];
        stakedShare.amount += uint96(value);
        stakedShare.lastDepositBlock = uint32(block.number);
        // recalculate the reward debt of points and tokens
        uint256 userStakeFactor = uint256(stakedShare.amount) * pools[pId].factor;
        stakedShare.powRewardDebt = uint128((userStakeFactor * _accTokensPerShare) / (factorBase * acc1e12));
        stakedShare.pointRewardDebt = uint128((sqrt(userStakeFactor) * _accPointsPerEther) / sqrt1EtherFBase);

        emit Deposit(msg.sender, pId, value);
    }

    function withdraw(uint256 pId, uint256 value) external nonEmergency {
        require(value > 0, "empty withdraw is not allowed");
        // check prerequirement
        StakedShare storage stakedShare = _userStakes[msg.sender][pId];
        require(value <= stakedShare.amount, "not enough to withdraw");
        require(block.number >= stakedShare.lastDepositBlock + pools[pId].lockPeriod, "not reach withdraw block");

        // withdraw pending tokens(if any) then update global staking parameters
        (uint256 _accTokensPerShare, uint256 _accPointsPerEther) = _withdrawSinglePending(msg.sender, pId);
        if ((pools[pId].flags & fTTC) > 0) powShareTotal -= uint128((value * pools[pId].factor) / factorBase);
        totalStaked -= value;

        // update user's staking parameters
        stakedShare.amount -= uint96(value);
        uint256 userStakeFactor = uint256(stakedShare.amount) * pools[pId].factor;
        stakedShare.powRewardDebt = uint128((userStakeFactor * _accTokensPerShare) / (factorBase * acc1e12));
        stakedShare.pointRewardDebt = (sqrt(userStakeFactor) * _accPointsPerEther) / sqrt1EtherFBase;

        // transfer-out withdraw tokens
        // the penalty fee will be taken under some situation
        if (block.number < stakedShare.lastDepositBlock + pools[pId].feeFreePeriod) ttCoin.safeTransfer(msg.sender, (value * feePercentage) / factorBase);
        else ttCoin.safeTransfer(msg.sender, value);

        emit Withdraw(msg.sender, pId, value);
    }

    // do a loop to withdraw all pending tokens
    function withdrawAllPending() external nonEmergency {
        uint256 points;
        uint256 tokens;
        uint256 _poolCount = pools.length;
        for (uint256 index = 0; index < _poolCount; ++index) {
            (, , uint256 tempPoints, uint256 tempTokens) = _withdrawPending(msg.sender, index);
            points += tempPoints;
            tokens += tempTokens;
        }
        _withdrawTransfer(msg.sender, points, tokens);
    }

    function withdrawPending(uint256 pId) external nonEmergency {
        _withdrawSinglePending(msg.sender, pId);
    }

    function _withdrawSinglePending(address account, uint256 pId) private returns (uint256 _accTokensPerShare, uint256 _accPointsPerEther) {
        uint256 points;
        uint256 tokens;
        (_accTokensPerShare, _accPointsPerEther, points, tokens) = _withdrawPending(account, pId);
        _withdrawTransfer(account, points, tokens);
    }

    function _withdrawPending(address account, uint256 pId)
        private
        returns (
            uint256 _accTokensPerShare,
            uint256 _accPointsPerEther,
            uint256 points,
            uint256 tokens
        )
    {
        uint256 minBlock;
        (_accTokensPerShare, _accPointsPerEther, minBlock) = _updateStakingParameter();
        StakedShare storage _stakeShare = _userStakes[account][pId];
        // if user has some staking values
        if (_stakeShare.amount > 0) {
            uint256 userStakeFactor = _stakeShare.amount * pools[pId].factor;
            // update global staking parameters
            if ((pools[pId].flags & fPoint) > 0) {
                // points pending calculation
                uint256 _pending = (sqrt(userStakeFactor) * _accPointsPerEther) / sqrt1EtherFBase;
                points = _pending - _stakeShare.pointRewardDebt;
                _stakeShare.pointRewardDebt = _pending;
            }
            if ((pools[pId].flags & fTTC) > 0) {
                // token pending calculation
                uint256 _pending = (userStakeFactor * _accTokensPerShare) / (factorBase * acc1e12);
                tokens = _pending - _stakeShare.powRewardDebt;
                _stakeShare.powRewardDebt = uint128(_pending);
            }
        }
    }

    function _withdrawTransfer(
        address to,
        uint256 points,
        uint256 tokens
    ) private {
        if (points > 0) ttPoint.mint(to, points);
        if (tokens > 0) ttCoin.safeTransfer(to, tokens);
        if (points > 0 || tokens > 0) emit WithdrawPendingTokens(to, points, tokens);
    }

    // fixes for TCK-01 emit events when internal parameter changes
    function _updateStakingParameter()
        private
        returns (
            uint256 _accTokensPerShare,
            uint256 _accPointsPerEther,
            uint256 minBlock
        )
    {
        _accTokensPerShare = accTokensPerShare;
        _accPointsPerEther = accPointsPerEther;
        // get the minor block of current block and staking end block to avoid the overflow of token dispatching
        minBlock = min(block.number, powEndBlock);
        // make sure staking is started and not yet finished
        if (lastUpdateBlock > 0 && minBlock > lastUpdateBlock) {
            uint256 diffBlocks = minBlock - lastUpdateBlock;
            // accumulate points
            _accPointsPerEther += diffBlocks * pointsPerBlock;
            accPointsPerEther = uint160(_accPointsPerEther);
            // update last update blocks
            lastUpdateBlock = uint32(minBlock);
            if (powShareTotal > 0) {
                // accumulate token dispatching parameters
                uint256 diff = powTokensPerBlock * diffBlocks;
                _accTokensPerShare += (diff * acc1e12) / powShareTotal;
                accTokensPerShare = uint216(_accTokensPerShare);
            }
            // emit event
            emit StakingInternalParameterChanged(msg.sender, minBlock, _accTokensPerShare, _accPointsPerEther);
        }
    }

    // fixes for TTC-04
    function emergencyWithdraw(uint256 pId) external underEmergency {
        require(emergency, "not in emergency");
        uint256 _poolCount = pools.length;
        uint256 value;
        for (uint256 index = 0; index < _poolCount; ++index) {
            uint256 oneAmount = _userStakes[msg.sender][pId].amount;
            if (oneAmount > 0) {
                // in case of emergency withdraw, modify deposited values
                value += oneAmount;
                _userStakes[msg.sender][pId].amount = 0;
            }
        }
        if (value > 0) {
            ttCoin.safeTransfer(msg.sender, value);
            totalStaked -= value;
            emit EmergencyWithdraw(msg.sender, value);
        }
    }

    // get user withdrawable tokens and point, base on _withdrawPending() algorithm, view only
    function pending(address account, uint256 pId) public view returns (uint256 points, uint256 tokens) {
        StakedShare storage _stakeShare = _userStakes[account][pId];
        uint256 userStakeFactor = _stakeShare.amount * pools[pId].factor;
        if (lastUpdateBlock > 0 && userStakeFactor > 0) {
            uint256 diffBlock = min(block.number, powEndBlock) - lastUpdateBlock;
            if ((pools[pId].flags & fPoint) > 0) {
                uint256 _accPointsPerEther = accPointsPerEther;
                _accPointsPerEther += diffBlock * pointsPerBlock;
                points = (sqrt(userStakeFactor) * _accPointsPerEther) / sqrt1EtherFBase - _stakeShare.pointRewardDebt;
            }
            if ((pools[pId].flags & fTTC) > 0 && powShareTotal > 0) {
                uint256 _accTokensPerShare = accTokensPerShare;
                _accTokensPerShare += (powTokensPerBlock * diffBlock * acc1e12) / powShareTotal;
                tokens = (userStakeFactor * _accTokensPerShare) / (factorBase * acc1e12) - _stakeShare.powRewardDebt;
            }
        }
    }

    function userStakes(address account, uint256 pId)
        external
        view
        returns (
            uint256 amount,
            uint256 feeFreeRestBlocks,
            uint256 lockRestBlocks,
            uint256 points,
            uint256 tokens
        )
    {
        amount = _userStakes[account][pId].amount;
        {
            uint256 withdrawBlock = _userStakes[account][pId].lastDepositBlock + pools[pId].lockPeriod;
            if (withdrawBlock > block.number) lockRestBlocks = withdrawBlock - block.number;
        }
        {
            uint256 feeFreeBlock = _userStakes[account][pId].lastDepositBlock + pools[pId].feeFreePeriod;
            if (feeFreeBlock > block.number) feeFreeRestBlocks = feeFreeBlock - block.number;
        }
        (points, tokens) = pending(account, pId);
    }

    function estimate(uint256 pId, uint256 value) public view returns (uint256 pointsPerBlock_, uint256 userStakeFactor_) {
        userStakeFactor_ = value * pools[pId].factor;
        if ((pools[pId].flags & fPoint) > 0) {
            pointsPerBlock_ = (sqrt(userStakeFactor_) * pointsPerBlock) / sqrt1EtherFBase;
        }
        if ((pools[pId].flags & fTTC) == 0) userStakeFactor_ = 0;
    }

    function min(uint256 a, uint256 b) public pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev uint256 sqrt function
     */
    function sqrt(uint256 x) public pure returns (uint256) {
        uint256 z = (x + 1) >> 1;
        uint256 y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) >> 1;
        }
        return y;
    }

    modifier validPool(uint256 pId) {
        require((pools[pId].flags & fObsolete) == 0, "pool is obsolete");
        _;
    }

    modifier started() {
        require(lastUpdateBlock > 0, "not started");
        _;
    }

    modifier nonStarted() {
        require(lastUpdateBlock == 0, "already started");
        _;
    }

    modifier nonEmergency() {
        require(!emergency, "cannot perform under emergency");
        _;
    }

    modifier underEmergency() {
        require(emergency, "only under emergency");
        _;
    }

    modifier onlyTokenInjector() {
        require(tokenInjector == zeroAddress || msg.sender == tokenInjector, "requires tokenInjector");
        _;
    }
}