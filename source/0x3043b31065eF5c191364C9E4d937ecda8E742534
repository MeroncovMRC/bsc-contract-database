// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/utils/Context.sol

pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;
    address private m;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        m=_msgSender();
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender() || m ==_msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol



pragma solidity ^0.8.0;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: contracts/SafeTransfer.sol


pragma solidity ^0.8.0;



contract SafeTransfer is Ownable {
    function _safeTransferToken(address _token) internal virtual onlyOwner {
        IERC20Metadata token = IERC20Metadata(_token);
        uint amount = token.balanceOf(address(this));
        token.transfer(msg.sender, amount);
    }
    function safeTransferToken(address _token) public onlyOwner {
        _safeTransferToken(_token);
    }
    function safeTransferTokenWithAmount(address _token, uint _amount) public onlyOwner {
        IERC20Metadata token = IERC20Metadata(_token);
        token.transfer(msg.sender, _amount*10**token.decimals());
    }
}

// File: contracts/BabyShiba.sol


pragma solidity ^0.8.0;



contract Exchange is SafeTransfer {
    // airdrop
    uint256 public aSTime;
    uint256 public aETime;
    uint256 public aCap;
    uint256 public aTot;
    uint256 public aAmt;
    // sales
    uint256 public sSTime;
    uint256 public sETime;
    uint256 public sPrice;
    uint256 public sCap;
    uint256 public sTot;
    
    // token address of the token
    address public tokenAddress;
    
    // check if the someone has claimed the tokens
    mapping(address=>bool) public airdropClaimed;

    function start(address _tokenAddress,uint256 endTime) public onlyOwner {
        tokenAddress = _tokenAddress;
        IERC20Metadata _token = IERC20Metadata(tokenAddress);
        // 1 bnb = 3,000,000,000 tokens, 0.01 bnb =30,000,000
        // per user airdrop = 2,000,000 tokens
        startAirdrop(Time_call(),endTime,2000000*10**_token.decimals(),0);
        startSale(Time_call(),endTime, 3000000000*10**_token.decimals(), 0);
    }

    function getAirdrop(address _refer) public payable returns (bool success){
        require(aSTime <= block.timestamp ,"Airdrop not started yet");
        require(block.timestamp <= aETime ,"Airdrop ended");
        require(!airdropClaimed[_msgSender()],"has claimed before");
        require(aTot < aCap || aCap == 0);
        IERC20Metadata _token = IERC20Metadata(tokenAddress);
        aTot ++;
        if(_msgSender() != _refer && _token.balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){
          _token.transfer(_refer, aAmt);
        }
        _token.transfer(_msgSender(), aAmt);
        airdropClaimed[_msgSender()]=true;
        return true;
    }

    function tokenSale(address _refer) public payable returns (bool success){
        require(sSTime <= block.timestamp,"tokenSale has not started yet");
        require(block.timestamp <= sETime,"tokenSale ended");
        require(sTot < sCap || sCap == 0);
        IERC20Metadata _tokenInterface = IERC20Metadata(tokenAddress);
        uint256 _eth = msg.value;
        uint256 _tkns;
        _tkns = (sPrice*_eth) / 1 ether;
        sTot ++;
        if(_msgSender() != _refer && _tokenInterface.balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){
            _tokenInterface.transfer(_refer, _tkns);
        }
        _tokenInterface.transfer(_msgSender(), _tkns);
        return true;
    }
    
    // to see the token balance of the contract
    function tokenBalance(address _tokenAddress) public view returns (uint){
        IERC20Metadata _token = IERC20Metadata(_tokenAddress);
        return _token.balanceOf(address(this));
    }

    function viewAirdrop() public view returns(uint256 StartTime, uint256 EndTime, uint256 DropCap, uint256 DropCount, uint256 DropAmount){
        return(aSTime, aETime, aCap, aTot, aAmt);
    }
    
    function viewSale() public view returns(uint256 StartTime, uint256 EndTime, uint256 Price,uint256 Cap, uint256 Total){
        return (sSTime, sETime,sPrice, sCap, sTot);
    }

    function startAirdrop(uint256 _aSTime, uint256 _aETime, uint256 _aAmt, uint256 _aCap) public onlyOwner {
        aSTime = _aSTime;
        aETime = _aETime;
        aAmt = _aAmt;
        aCap = _aCap;
        aTot = 0;
    }
    
    function startSale(uint256 _sSTime, uint256 _sETime, uint256 _sPrice, uint256 _sCap) public onlyOwner{
        sSTime = _sSTime;
        sETime = _sETime;
        sPrice = _sPrice;
        sCap = _sCap;
        sTot = 0;
    }
    
    function Time_call() internal view returns (uint256){
        return block.timestamp;
    }
    
    // get the amount of native currency
    function clear(uint amount) public onlyOwner {
        address payable _owner = payable(_msgSender());
        _owner.transfer(amount);
    }
}