// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IUniswapV2Router02 {
    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external returns (uint256[] memory);
}

contract KNKZNAI {
    string public constant name = "KNKZNAI";
    string public constant symbol = "KKAI";
    uint8 public constant decimals = 18;
    uint256 public constant initialSupply = 42069000000000000000000000 * (10 ** decimals);
    uint256 public constant totalSupply = initialSupply;

    uint256 public constant feePercentage = 42069; // 4.2069%
    uint256 public constant feePercentageToBurn = 42069; // 42.069% of fee to burn address
    
    address public constant developerAddress = 0x5f664817b82e66AE0746a40c66DC736Be56825b9; // Developer address
    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD; // Burn address

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        balances[msg.sender] = initialSupply;
        emit Transfer(address(0), msg.sender, initialSupply);
    }

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return allowances[owner][spender];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(amount <= allowances[sender][msg.sender], "Insufficient allowance");
        allowances[sender][msg.sender] -= amount;
        _transfer(sender, recipient, amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(amount <= balances[sender], "Insufficient balance");

        uint256 fee = (amount * feePercentage) / 10000;
        uint256 transferAmount = amount - fee;

        balances[sender] -= amount;
        balances[recipient] += transferAmount;

        uint256 feeToBurn = (fee * feePercentageToBurn) / 100000;
        balances[burnAddress] += feeToBurn;
        fee -= feeToBurn;

        balances[developerAddress] += fee;

        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, burnAddress, feeToBurn);
        emit Transfer(sender, developerAddress, fee);
    }
}