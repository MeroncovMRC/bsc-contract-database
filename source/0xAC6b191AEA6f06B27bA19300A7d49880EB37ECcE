{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"ILandPresale.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface ILandPresale {\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\r\n    function retire(uint256 tokenId) external; \r\n\r\n}"},"Land_ChainSwap.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./ILandPresale.sol\";\r\n\r\ncontract MineRioLand_ChainSwap is Ownable {\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////                                                                                    ////////////////\r\n    ////////////////     .88b  d88.   d888888b   d8b   db   d88888b   d8888b.   d888888b    .d88b.      ////////////////\r\n    ////////////////     88\u0027YbdP`88     `88\u0027     888o  88   88\u0027       88  `8D     `88\u0027     .8P  Y8.     ////////////////\r\n    ////////////////     88  88  88      88      88V8o 88   88ooooo   88oobY\u0027      88      88    88     ////////////////\r\n    ////////////////     88  88  88      88      88 V8o88   88~~~~~   88`8b        88      88    88     ////////////////\r\n    ////////////////     88  88  88     .88.     88  V888   88.       88 `88.     .88.     `8b  d8\u0027     ////////////////\r\n    ////////////////     YP  YP  YP   Y888888P   VP   V8P   Y88888P   88   YD   Y888888P    `Y88P\u0027      ////////////////\r\n    ////////////////                                                                                    ////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////\\     EVENTS      ///////////////////////\r\n    ////////////////////////////////////////////////////////////////////\r\n    event LandRetired(uint256 landId, address owner);\r\n\r\n    ////////////////////////////////////////////////////////////////////\r\n    //////////////////////////\\     VARIABLES      /////////////////////\r\n    ////////////////////////////////////////////////////////////////////\r\n    address private landNFTAddress;\r\n    uint256 private bridgeFeePrice;\r\n\r\n    ////////////////////////////////////////////////////////////////////\r\n    ///////////////////////\\     PUBLIC FUNCTIONS      /////////////////\r\n    ////////////////////////////////////////////////////////////////////\r\n    function BridgeNFT(uint256 _nftId) public payable{\r\n        require(msg.value \u003e= bridgeFeePrice, \"Not enought ether to pay bridge fee\");\r\n\r\n        //return the additional amount\r\n        payable(msg.sender).transfer(msg.value-bridgeFeePrice);\r\n\r\n        //check if sender is owner of the NFT\r\n        require(msg.sender == ILandPresale(landNFTAddress).ownerOf(_nftId), \"Only the owner of the NFT can use this function\");\r\n\r\n        //retire the NFT\r\n        ILandPresale(landNFTAddress).retire(_nftId);\r\n\r\n        //emit event\r\n        emit LandRetired(_nftId, msg.sender);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////\\     SETTERS      //////////////////////\r\n    ////////////////////////////////////////////////////////////////////\r\n\r\n    //receiver\r\n    receive() external payable {}\r\n\r\n    function setLandNFTAddress(address _landNFTAddress) public onlyOwner{\r\n        landNFTAddress = _landNFTAddress;\r\n    }\r\n    \r\n    function setBridgeFeePrice(uint256 _bridgeFeePrice) public onlyOwner{\r\n        bridgeFeePrice = _bridgeFeePrice;\r\n    }\r\n\r\n    \r\n    function transferAllMatic() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n    function transferMatic(uint256 _amount, address _to) public onlyOwner {\r\n        require(_amount\u003c=address(this).balance, \"Not enough balance\");\r\n        payable(_to).transfer(_amount);\r\n    }\r\n\r\n    function transferCustomToken(address _tokenAddress, uint256 _amount, address _to) public onlyOwner{\r\n        require(IERC20(_tokenAddress).balanceOf(address(this)) \u003e= _amount);\r\n\r\n        IERC20(_tokenAddress).transfer(_to, _amount);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////\\     GETTERS      //////////////////////\r\n    ////////////////////////////////////////////////////////////////////\r\n\r\n    function getLandNFTAddress() public view returns (address){\r\n        return landNFTAddress;\r\n    }\r\n\r\n    function getBridgeFeePrice() public view returns (uint256){\r\n        return bridgeFeePrice;\r\n    }\r\n\r\n    \r\n\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}}