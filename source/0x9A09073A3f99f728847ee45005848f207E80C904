
// File: /contracts/GENIVesting.sol
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/IGENI.sol";

contract GENIVesting is Ownable {
    
    address public geni;
    
    event SetGENI(address geniAddress);
    event SetDistributeTime(uint time);

    uint public distributeTime;
    
    uint private constant SECONDS_PER_MONTH = 2629743;
    
    uint public lastestDistributeMonth;
    
    address public immutable seedSales;
    address public immutable privateSales;
    address public immutable publicSales;
    address public immutable advisorsAndPartners;
    address public immutable teamAndOperations;
    address public immutable mktAndCommunity;
    address public immutable gameTreasury;
    address public immutable farmingAndStaking;
    address public immutable liquidity;

    constructor (
        address geniAddr,
        uint _distributeTime,
        address _seedSales,
        address _privateSales,
        address _publicSales,
        address _advisorsAndPartners,
        address _teamAndOperations,
        address _mktAndCommunity,
        address _gameTreasury,
        address _farmingAndStaking,
        address _liquidity)
    {
        geni = geniAddr;
        distributeTime = _distributeTime;
        require(_privateSales != address(0), "_privateSales cannot be address 0");
        privateSales = _privateSales;
        require(_publicSales != address(0), "_publicSales cannot be address 0");
        publicSales = _publicSales;
        require(_advisorsAndPartners != address(0), "_advisorsAndPartners cannot be address 0");
        advisorsAndPartners = _advisorsAndPartners;
        require(_teamAndOperations != address(0), "_teamAndOperations cannot be address 0");
        teamAndOperations = _teamAndOperations;
        require(_mktAndCommunity != address(0), "_mktAndCommunity cannot be address 0");
        mktAndCommunity = _mktAndCommunity;
        require(_gameTreasury != address(0), "_gameTreasury cannot be address 0");
        gameTreasury = _gameTreasury;
        require(_farmingAndStaking != address(0), "_farmingAndStaking cannot be address 0");
        farmingAndStaking = _farmingAndStaking;
        require(_seedSales != address(0), "_seedSales cannot be address 0");
        seedSales = _seedSales;
        require(_liquidity != address(0), "_liquidity cannot be address 0");
        liquidity = _liquidity;
    }
    
    function setGeni(address newGeni) external onlyOwner {
        require(address(newGeni) != address(0));
        geni = newGeni;
        emit SetGENI(address(newGeni));
    }
    
    function setDistributeTime(uint time) external onlyOwner {
        distributeTime = time;
        emit SetDistributeTime(time);
    }
    
    function distribute() external {
        require(block.timestamp >= distributeTime, "GENIVesting: not claim time");
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        require(lastestDistributeMonth <= month, "GENIVesting: already claimed in this month");
        
        uint amountForSeedSale;
        uint amountForPrivateSale;
        uint amountForPublicSale;
        uint amountForAdvisorsAndPartners;
        uint amountForTeamAndOperations;
        uint amountForMktAndCommunity;
        uint amountForGameTreasury;
        uint amountForFarmingAndStaking;
        uint amountForLiquidity;
        
        for (uint i = lastestDistributeMonth; i <= month; i++) {
            amountForPrivateSale += getAmountForPrivateSales(i);
            amountForPublicSale += getAmountForPublicSales(i);
            amountForAdvisorsAndPartners += getAmountForAdvisorsAndPartners(i);
            amountForTeamAndOperations += getAmountForTeamAndOperations(i);
            amountForMktAndCommunity += getAmountForMktAndCommunity(i);
            amountForGameTreasury += getAmountForGameTreasury(i);
            amountForFarmingAndStaking += getAmountForFarmingAndStaking(i);
            amountForSeedSale += getAmountForSeedSale(i);
            amountForLiquidity += getAmountForLiquidity(i);
        }
        bool remainVesting = amountForSeedSale == 0 && amountForPrivateSale == 0 && amountForPublicSale == 0 && amountForAdvisorsAndPartners == 0 && amountForTeamAndOperations == 0 && amountForMktAndCommunity == 0 && amountForGameTreasury == 0 && amountForFarmingAndStaking == 0 && amountForLiquidity == 0;
        require(month < 36 || month >= 36 && !remainVesting, "GENIVesting: expiry time");
        if(amountForSeedSale > 0)
            IGENI(geni).mint(seedSales, amountForSeedSale);
        if(amountForPrivateSale > 0)
            IGENI(geni).mint(privateSales, amountForPrivateSale);
        if(amountForPublicSale > 0)
            IGENI(geni).mint(publicSales, amountForPublicSale);
        if(amountForAdvisorsAndPartners > 0)
            IGENI(geni).mint(advisorsAndPartners, amountForAdvisorsAndPartners);
        if(amountForTeamAndOperations > 0)
            IGENI(geni).mint(teamAndOperations, amountForTeamAndOperations);
        if(amountForMktAndCommunity > 0)
            IGENI(geni).mint(mktAndCommunity, amountForMktAndCommunity);
        if(amountForGameTreasury > 0)
            IGENI(geni).mint(gameTreasury, amountForGameTreasury);
        if(amountForFarmingAndStaking > 0)
            IGENI(geni).mint(farmingAndStaking, amountForFarmingAndStaking);
        if(amountForLiquidity > 0)
            IGENI(geni).mint(liquidity, amountForLiquidity);
        
        lastestDistributeMonth = month + 1;
    }
    
    function getAmountForSeedSale(uint month) internal view returns (uint amount) {
        uint maxAmount = 5000000 * 10 ** ERC20(geni).decimals();
        uint publicSaleAmount = 250000 * 10 ** ERC20(geni).decimals();
        uint linearAmount = (maxAmount - publicSaleAmount) / 12;
        if (month == 0 )
            amount = publicSaleAmount;
        else if (month >= 1 && month <= 6 || month > 18)
            amount = 0;
        else if (month >= 7 && month <= 17 )
            amount = linearAmount;
        else if (month == 18)
            amount = maxAmount - publicSaleAmount - linearAmount * 11;
    }
    
    function getAmountForPrivateSales(uint month) internal view returns (uint amount) {
        uint maxAmount = 10000000  * 10 ** ERC20(geni).decimals();
        uint publicSaleAmount = 500000 * 10 ** ERC20(geni).decimals();
        uint linearAmount = (maxAmount - publicSaleAmount) / 12;
        if (month == 0)
            amount = publicSaleAmount;
        else if (month >= 1 && month <= 6 || month > 18)
            amount = 0;
        else if (month >= 7 && month <= 17 )
            amount = linearAmount;
        else if (month == 18)
            amount = maxAmount - publicSaleAmount - linearAmount * 11;
    }
    
    function getAmountForPublicSales(uint month) internal view returns (uint amount) {
        uint maxAmount = 2000000  * 10 ** ERC20(geni).decimals();
        if (month == 0)
            amount = maxAmount;
        else if (month > 0)
            amount = 0;
    }
    
    function getAmountForAdvisorsAndPartners(uint month) internal view returns (uint amount) {
        uint maxAmount = 5000000 * 10 ** ERC20(geni).decimals();
        uint linearAmount = maxAmount / 12;
        if (month >= 0 && month < 12 || month > 23)
            amount = 0;
        else if (month >= 12 && month < 23)
            amount = linearAmount;
        else if (month == 23)
            amount = maxAmount - linearAmount * 11;
    }
    
    function getAmountForTeamAndOperations(uint month) internal view returns (uint amount) {
        uint maxAmount = 15000000 * 10 ** ERC20(geni).decimals();
        uint linearAmount = maxAmount / 12;
        if  (month >= 0 && month < 12 || month > 23)
            amount = 0;
        else if (month >= 12 && month < 23)
            amount = linearAmount;
        else if(month == 23)
            amount = maxAmount - linearAmount * 11;
    }
    
    function getAmountForMktAndCommunity(uint month) internal view returns (uint amount) {
        uint maxAmount = 20000000 * 10 ** ERC20(geni).decimals();
        uint linearAmount = maxAmount / 36;
        if (month > 35)
            amount = 0;
        else if (month >= 0 && month < 35)
            amount = linearAmount;
        else if (month == 35)
            amount = maxAmount - linearAmount * 35;
    }
    
    function getAmountForGameTreasury(uint month) internal view returns (uint amount) {
        uint maxAmount = 23000000 * 10 ** ERC20(geni).decimals();
        uint linearAmount = maxAmount / 36;
        if (month > 35)
            amount = 0;
        else if (month >= 0 && month < 35)
            amount = linearAmount;
        else if (month == 35)
            amount = maxAmount - linearAmount * 35;
    }
    
    function getAmountForFarmingAndStaking(uint month) internal view returns (uint amount) {
        uint maxAmount = 15000000 * 10 ** ERC20(geni).decimals();
        uint linearAmount = maxAmount / 36;
        if (month > 35)
            amount = 0;
        else if (month >= 0 && month < 35)
            amount = linearAmount;
        else if (month == 35)
            amount = maxAmount - linearAmount * 35;
    }
    
    function getAmountForLiquidity(uint month) internal view returns (uint amount) {
        uint maxAmount = 5000000 * 10 ** ERC20(geni).decimals();
        uint publicSaleAmount = 500000 * 10 ** ERC20(geni).decimals();
        uint linearAmount = (maxAmount - publicSaleAmount) / 9;
        if (month == 0)
            amount = publicSaleAmount;
        else if (month > 0 && month < 9)
            amount = linearAmount;
        else if (month == 9)
            amount = maxAmount - publicSaleAmount - linearAmount * 8;
        else if (month > 9)
            amount = 0;
    }

    function getDistributeAmountForSeedSale() external view returns (uint) {
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        uint amountForSeedSale;
        for (uint i = lastestDistributeMonth; i <= month; i++) {
            amountForSeedSale += getAmountForSeedSale(i);
        }
        return amountForSeedSale;
    }
    
    function getDistributeAmountForPrivateSales() external view returns (uint) {
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        uint amountForPrivateSale;
        for (uint i = lastestDistributeMonth; i <= month; i++) {
            amountForPrivateSale += getAmountForPrivateSales(i);
        }
        return amountForPrivateSale;
    }

    function getDistributeAmountForPublicSales() external view returns (uint) {
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        uint amountForPublicSale;
        for (uint i = lastestDistributeMonth; i <= month; i++) {
            amountForPublicSale += getAmountForPublicSales(i);
        }
        return amountForPublicSale;
    }

    function getDistributeAmountForAdvisorsAndPartners() external view returns (uint) {
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        uint amountForAdvisorsAndPartner;
        for (uint i = lastestDistributeMonth; i <= month; i++) {
            amountForAdvisorsAndPartner += getAmountForAdvisorsAndPartners(i);
        }
        return amountForAdvisorsAndPartner;
    }

    function getDistributeAmountForTeamAndOperation() external view returns (uint) {
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        uint amountForTeamAndOperations;
        for (uint i = lastestDistributeMonth; i <= month; i++) {
            amountForTeamAndOperations += getAmountForTeamAndOperations(i);
        }
        return amountForTeamAndOperations;
    }

    function getDistributeAmountForMktAndCommunity() external view returns (uint) {
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        uint amountForMktAndCommunity;
        for (uint i = lastestDistributeMonth; i <= month; i++) {
            amountForMktAndCommunity += getAmountForMktAndCommunity(i);
        }
        return amountForMktAndCommunity;
    }

    function getDistributeAmountForGameTreasury() external view returns (uint) {
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        uint amountForGameTreasury;
        for (uint i = lastestDistributeMonth; i <= month; i++) {
            amountForGameTreasury += getAmountForGameTreasury(i);
        }
        return amountForGameTreasury ;
    }

    function getDistributeAmountForFarmingAndStaking() external view returns (uint) {
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        uint amountForFarmingAndStaking;
        for (uint i = lastestDistributeMonth; i <= month; i++) {
           amountForFarmingAndStaking += getAmountForFarmingAndStaking(i);
        }
        return amountForFarmingAndStaking;
    }
    
    function getDistributeAmountForLiquidity() external view returns (uint) {
        uint month = (block.timestamp - distributeTime) / SECONDS_PER_MONTH;
        uint amountForLiquidity;
        for (uint i = lastestDistributeMonth; i <= month; i++) {
           amountForLiquidity += getAmountForLiquidity(i);
        }
        return amountForLiquidity;
    }

}


// File: /contracts/interfaces/IGENI.sol
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IGENI is IERC20 {
    function mint(address to, uint256 amount) external;
    
    function burn(uint amount) external;

    event SetLpToken(address lpToken);
    event SetExchange(address lpToken);
    event SetAntiWhaleAmountBuy(uint256 amount);
    event SetAntiWhaleAmountSell(uint256 amount);
    event SetAntiWhaleTimeSell(uint256 timeSell);
    event SetAntiWhaleTimeBuy(uint256 timeBuy);
    event AddListWhales(address _whales);
    event RemoveFromWhales(address _whales);
}

// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

