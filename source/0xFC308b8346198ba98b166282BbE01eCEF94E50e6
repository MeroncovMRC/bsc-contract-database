
// File: contracts/ProxyUtils.sol
//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface DEXRouter {
    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint[] memory amounts);
    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
}

contract ProxyUtils {

    DEXRouter private dexRouter;
    uint256 public batchLimit;
    uint256 private constant MAX = ~uint256(0);

    constructor(address dexRouterAddress) {
        dexRouter = DEXRouter(dexRouterAddress);
        batchLimit = 1024;
    }

    function transferToken(address tokenAddress, address to, uint256 amount) external {
        IERC20(tokenAddress).transferFrom(msg.sender, to, amount);
    }

    function batchTransferToken(address tokenAddress, address[] memory recipients, uint256[] memory amounts) external {
        require(recipients.length == amounts.length, "ProxyUtils::batchTransferToken: recipients length must be equal to amounts.length");
        require(recipients.length <= batchLimit, "ProxyUtils::batchTransferToken: exceeds batch limit");
        
        for (uint i = 0; i < recipients.length; i++) {
            IERC20(tokenAddress).transferFrom(msg.sender, recipients[i], amounts[i]);
        }
    }

    function batchTransferTokens(address[] memory tokens, address[] memory recipients, uint256[] memory amounts) external {
        require(recipients.length == amounts.length, "ProxyUtils::batchTransferTokens: recipients length must be equal to amounts.length");
        require(recipients.length <= batchLimit, "ProxyUtils::batchTransferTokens: exceeds batch limit");
        
        for (uint i = 0; i < recipients.length; i++) {
            IERC20(tokens[i]).transferFrom(msg.sender, recipients[i], amounts[i]);
        }
    }

    function swapETHForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata paths, address to, uint256 deadline) payable external {
        dexRouter.swapExactETHForTokens{value: amountIn}(amountOutMin, paths, to, deadline);
    }

    function swapTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata paths, address to, uint256 deadline) external {
        IERC20(paths[0]).transferFrom(msg.sender, address(this), amountIn);

        uint256 allowance = IERC20(paths[0]).allowance(address(this), address(dexRouter));
        if(allowance < amountIn) {
            IERC20(paths[0]).approve(address(dexRouter), MAX);
        }
        
        dexRouter.swapExactTokensForETH(amountIn, amountOutMin, paths, to, deadline);
    }

    function batchSwapTokensForETH(uint256[] calldata amountsIn, uint256[] calldata amountOutMins, address[][] calldata paths, address[] calldata tos, uint256[] calldata deadlines) external {
        require(amountsIn.length == amountOutMins.length, "ProxyUtils::batchSwapTokensForETH: amountIn length must be equal to amountOutMins.length");
        require(amountsIn.length == paths.length, "ProxyUtils::batchSwapTokensForETH: amountIn length must be equal to paths.length");
        require(amountsIn.length == tos.length, "ProxyUtils::batchSwapTokensForETH: amountIn length must be equal to tos.length");
        require(amountsIn.length == deadlines.length, "ProxyUtils::batchSwapTokensForETH: amountIn length must be equal to deadlines.length");
        require(tos.length <= batchLimit, "ProxyUtils::batchSwapTokensForETH: exceeds batch limit");
        
        for (uint256 i = 0; i < amountOutMins.length; i++) {
            IERC20(paths[i][0]).transferFrom(msg.sender, address(this), amountsIn[i]);
     
            uint256 allowance = IERC20(paths[i][0]).allowance(address(this), address(dexRouter));
            if(allowance < amountsIn[i]) {
                IERC20(paths[i][0]).approve(address(dexRouter), MAX);
            }
            dexRouter.swapExactTokensForETH(amountsIn[i], amountOutMins[i], paths[i], tos[i], deadlines[i]);
        }
    }

    function batchSwapTokensForTokens(uint[] calldata amountsIn, uint[] calldata amountsOutMin, address[][] calldata paths, address[] calldata tos, uint[] calldata deadlines) external {
        require(amountsOutMin.length == paths.length, "ProxyUtils::batchSwapTokensForTokens: amountOutMins length must be equal to paths.length");
        require(amountsOutMin.length == tos.length, "ProxyUtils::batchSwapTokensForTokens: amountOutMins length must be equal to tos.length");
        require(amountsOutMin.length == deadlines.length, "ProxyUtils::batchSwapTokensForTokens: amountOutMins length must be equal to deadlines.length");
        require(amountsOutMin.length == amountsIn.length, "ProxyUtils::batchSwapTokensForTokens: amountOutMins length must be equal to amountsIn.length");
        require(tos.length <= batchLimit, "ProxyUtils::batchSwapTokensForTokens: exceeds batch limit");
        
        for (uint256 i = 0; i < amountsOutMin.length; i++) {
            if(paths[i][0] == address(0)) {
                dexRouter.swapExactETHForTokens{value: amountsIn[i]}(amountsOutMin[i], paths[i], tos[i], deadlines[i]);
            } else {
                IERC20(paths[i][0]).transferFrom(msg.sender, address(this), amountsIn[i]);
                
                uint256 allowance = IERC20(paths[i][0]).allowance(address(this), address(dexRouter));
                if(allowance < amountsIn[i]) {
                    IERC20(paths[i][0]).approve(address(dexRouter), MAX);
                }
                dexRouter.swapExactTokensForTokens(amountsIn[i], amountsOutMin[i], paths[i], tos[i], deadlines[i]);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

