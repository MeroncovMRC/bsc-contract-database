
// File: contracts/MatesYToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

contract MatesYtoken {
    string public name = "MatesYtoken";
    string public symbol = "MYT";
    uint8 public decimals = 18; // 18 decimals is the standard
    uint256 public totalSupply = 1000000 * 10 ** uint256(decimals); // Initial supply of 1,000,000 tokens
    uint256 public weeklySupply = 10000 * 10 ** uint256(decimals);
    uint256 public totalSupplyLimit = 10000000 * 10 ** uint256(decimals); // Total supply limit of 10,000,000 tokens
    uint256 public lastMintTimestamp;
    
    mapping(address => uint256) public balanceOf;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    
    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }
    
    function transfer(address to, uint256 value) external returns (bool) {
        require(to != address(0), "Invalid recipient");
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        
        emit Transfer(msg.sender, to, value);
        
        return true;
    }
    
    // Function to mint new coins, callable only once every week
    function mint() external {
        require(block.timestamp >= lastMintTimestamp + 1 weeks, "Minting allowed once per week");
        require(totalSupply + weeklySupply <= totalSupplyLimit, "Exceeds total supply limit");
        
        balanceOf[msg.sender] += weeklySupply;
        totalSupply += weeklySupply;
        lastMintTimestamp = block.timestamp;
        
        emit Transfer(address(0), msg.sender, weeklySupply);
    }
    
    // Function to burn coins (destroy them irreversibly)
    function burn(uint256 value) external {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        
        balanceOf[msg.sender] -= value;
        totalSupply -= value;
        
        emit Burn(msg.sender, value);
    }
}

