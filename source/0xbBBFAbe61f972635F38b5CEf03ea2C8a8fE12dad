//SPDX-License-Identifier:MIT
pragma solidity ^0.6.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract WTDAO is IERC20 {
    string  public constant name = "WTDAO";
    string  public constant symbol = "WTDAO";
    uint8   public constant decimals = 18; 
    uint256 public override totalSupply = 1E26; // 1亿代币
    
    mapping(address => uint256) public override balanceOf;
    mapping(address => mapping(address => uint256)) public override allowance;
    
    address public burnAddress = 0x000000000000000000000000000000000000dEaD;
    
    constructor() public {
        balanceOf[msg.sender] = totalSupply;
    }
    
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function approve(address spender, uint256 amount) external override returns (bool) {
        require(spender != address(0), "ERC20: approve to the zero address");
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        _transfer(sender, recipient, amount);
        allowance[sender][msg.sender] -= amount;
        return true;
    }
    
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        
        uint256 burnAmount = amount * 3 / 100;  // 转账销毁3%
        uint256 receiveAmount = amount - burnAmount;
        
        balanceOf[sender] -= amount;
        balanceOf[recipient] += receiveAmount;
        balanceOf[burnAddress] += burnAmount;
        
        emit Transfer(sender, recipient, receiveAmount);
        emit Transfer(sender, burnAddress, burnAmount);
    }
}