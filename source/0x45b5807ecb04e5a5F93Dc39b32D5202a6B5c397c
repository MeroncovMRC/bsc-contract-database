// SPDX-License-Identifier: MIT

pragma solidity ^0.8.15;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

abstract contract Ownable {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "new is 0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract TokenDistributor {
    constructor (address token) {
        IERC20(token).approve(msg.sender, uint(~uint256(0)));
    }
}

abstract contract AbsToken is IERC20, Ownable {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address public fundAddress;
    address public fundAddress2;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    mapping(address => bool) public _feeWhiteList;

    uint256 private _tTotal;

    ISwapRouter public _swapRouter;
    address public _usdt;
    address public _dividendToken;
    mapping(address => bool) public _swapPairList;

    bool private inSwap;

    uint256 private constant MAX = ~uint256(0);

    uint256 public _holdDividendFee = 400;
    uint256 public _destroyFee = 0;
    uint256 public _fundFee = 600;
    uint256 public _buyFee = 600;
    uint256 public _sellFee = 200;

    uint256 public startTradeBlock;
    uint256 public _limitAmount;

    TokenDistributor public _tokenDistributor;

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor (
        address RouterAddress, address USDTAddress, address DividendToken,
        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,
        address ReceiveAddress, address FundAddress, address FundAddress2, uint256 LimitAmount
    ){
        _name = Name;
        _symbol = Symbol;
        _decimals = Decimals;

        ISwapRouter swapRouter = ISwapRouter(RouterAddress);

        _usdt = USDTAddress;
        _swapRouter = swapRouter;
        _allowances[address(this)][address(swapRouter)] = MAX;
        IERC20(USDTAddress).approve(address(swapRouter), MAX);

        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        address mainPair = swapFactory.createPair(address(this), USDTAddress);
        _swapPairList[mainPair] = true;

        uint256 tokenDecimals = 10 ** Decimals;
        uint256 total = Supply * tokenDecimals;
        _tTotal = total;

        _balances[ReceiveAddress] = total;
        emit Transfer(address(0), ReceiveAddress, total);
        fundAddress = FundAddress;
        fundAddress2 = FundAddress2;

        _feeWhiteList[ReceiveAddress] = true;
        _feeWhiteList[FundAddress] = true;
        _feeWhiteList[FundAddress2] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[address(swapRouter)] = true;
        _feeWhiteList[msg.sender] = true;

        excludeHolder[address(0)] = true;
        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;
        excludeHolder[address(this)] = true;

        _dividendToken = DividendToken;
        holderRewardCondition = 10 * 10 ** IERC20(DividendToken).decimals();
        holderCondition = 5 * tokenDecimals / 10;
        _limitAmount = LimitAmount * tokenDecimals;

        _tokenDistributor = new TokenDistributor(USDTAddress);
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        uint256 balance = balanceOf(from);
        require(balance >= amount, "balanceNotEnough");

        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
            uint256 maxSellAmount = balance * 999999 / 1000000;
            if (amount > maxSellAmount) {
                amount = maxSellAmount;
            }
        }

        bool takeFee;

        if (_swapPairList[from] || _swapPairList[to]) {
            if (0 == startTradeBlock) {
                require(_feeWhiteList[from] || _feeWhiteList[to], "!Trading");
                //                if (_swapPairList[to] && IERC20(to).totalSupply() == 0) {
                //                    startTradeBlock = block.number;
                //                }
            }

            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
                if (block.number < startTradeBlock + 4) {
                    _funTransfer(from, to, amount);
                    return;
                }
                if (!inSwap && _swapPairList[to]) {
                    uint256 contractTokenBalance = balanceOf(address(this));
                    if (contractTokenBalance > 0) {
                        uint256 swapFee = _buyFee + _sellFee;
                        uint256 numTokensSellToFund = amount * swapFee / 8000;
                        if (numTokensSellToFund > contractTokenBalance) {
                            numTokensSellToFund = contractTokenBalance;
                        }
                        swapTokenForFund(numTokensSellToFund);
                    }
                }

                takeFee = true;
            }
        }

        _tokenTransfer(from, to, amount, takeFee);

        addLpProvider(from);
        addLpProvider(to);

        if (from != address(this)) {
            processReward(500000);
        }
    }

    function _funTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount = tAmount * 90 / 100;
        _takeTransfer(
            sender,
            fundAddress,
            feeAmount
        );
        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        bool takeFee
    ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount;

        if (takeFee) {
            if (_swapPairList[sender]) {
                feeAmount = tAmount * _buyFee / 10000;
            } else {
                feeAmount = tAmount * _sellFee / 10000;
            }
            if (feeAmount > 0) {
                _takeTransfer(sender, address(this), feeAmount);
            }
        }

        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {
        uint256 allFee = _holdDividendFee + _fundFee + _destroyFee;
        uint256 destroyAmount = tokenAmount * _destroyFee / allFee;
        if (destroyAmount > 0) {
            _tokenTransfer(address(this), address(0x000000000000000000000000000000000000dEaD), destroyAmount, false);
        }

        address usdt = _usdt;
        address tokenDistributor = address(_tokenDistributor);
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdt;
        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount - destroyAmount,
            0,
            path,
            tokenDistributor,
            block.timestamp
        );
        IERC20 USDT = IERC20(usdt);
        uint256 newUsdt = USDT.balanceOf(tokenDistributor);
        allFee -= _destroyFee;
        uint256 fundUsdt = newUsdt * _fundFee / allFee;
        if (fundUsdt > 0) {
            USDT.transferFrom(tokenDistributor, fundAddress, fundUsdt / 2);
            USDT.transferFrom(tokenDistributor, fundAddress2, fundUsdt / 2);
        }
        uint256 dividendUsdt = newUsdt - fundUsdt;

        if (dividendUsdt > 0) {
            if (usdt == _dividendToken) {
                return;
            }
            USDT.transferFrom(tokenDistributor, address(this), dividendUsdt);
            path[0] = usdt;
            path[1] = _dividendToken;
            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                dividendUsdt,
                0,
                path,
                address(this),
                block.timestamp
            );
        }
    }

    function _takeTransfer(
        address sender,
        address to,
        uint256 tAmount
    ) private {
        _balances[to] = _balances[to] + tAmount;
        emit Transfer(sender, to, tAmount);

        if (_limitAmount > 0 && !_swapPairList[to] && !_feeWhiteList[to]) {
            require(_limitAmount >= balanceOf(to), "exceed LimitAmount");
        }
    }

    function setFundAddress(address addr) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            fundAddress = addr;
            _feeWhiteList[addr] = true;
        }
    }

    function setFundAddress2(address addr) external {
        if (msg.sender == _owner || msg.sender == fundAddress2) {
            fundAddress2 = addr;
            _feeWhiteList[addr] = true;
        }
    }

    function setTxFee(
        uint256 buyFee,
        uint256 sellFee
    ) external onlyOwner {
        _buyFee = buyFee;
        _sellFee = sellFee;
    }

    function setDistributeFee(
        uint256 fundFee,
        uint256 dividendFee,
        uint256 destroyFee
    ) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            _fundFee = fundFee;
            _holdDividendFee = dividendFee;
            _destroyFee = destroyFee;
        }
    }

    function startTrade() external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            require(0 == startTradeBlock, "trading");
            startTradeBlock = block.number;
        }
    }

    function closeTrade() external onlyOwner {
        startTradeBlock = 0;
    }

    function setFeeWhiteList(address addr, bool enable) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            _feeWhiteList[addr] = enable;
        }
    }

    function setSwapPairList(address addr, bool enable) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            _swapPairList[addr] = enable;
        }
    }

    function claimBalance() external {
        payable(fundAddress).transfer(address(this).balance);
    }

    function claimToken(address token, uint256 amount) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            IERC20(token).transfer(fundAddress, amount);
        }
    }

    address[] public lpProviders;
    mapping(address => uint256) public lpProviderIndex;

    function getLPProviderLength() external view returns (uint256){
        return lpProviders.length;
    }

    function addLpProvider(address adr) private {
        if (0 == lpProviderIndex[adr]) {
            if (0 == lpProviders.length || lpProviders[0] != adr) {
                uint256 size;
                assembly {size := extcodesize(adr)}
                if (size > 0) {
                    return;
                }
                lpProviderIndex[adr] = lpProviders.length;
                lpProviders.push(adr);
            }
        }
    }

    receive() external payable {}

    mapping(address => bool)  public excludeHolder;
    uint256 public currentIndex;
    uint256 public holderRewardCondition;
    uint256 public holderCondition;
    uint256 public progressRewardBlock;
    uint256 public progressRewardBlockDebt = 200;

    function processReward(uint256 gas) private {
        if (progressRewardBlock + progressRewardBlockDebt > block.number) {
            return;
        }

        IERC20 dividendToken = IERC20(_dividendToken);
        uint256 balance = dividendToken.balanceOf(address(this));
        if (balance < holderRewardCondition) {
            return;
        }

        uint holdTokenTotal = totalSupply();

        address shareHolder;
        uint256 tokenBalance;
        uint256 amount;

        uint256 shareholderCount = lpProviders.length;

        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }
            shareHolder = lpProviders[currentIndex];
            tokenBalance = balanceOf(shareHolder);
            if (tokenBalance > holderCondition && !excludeHolder[shareHolder]) {
                amount = balance * tokenBalance / holdTokenTotal;
                if (amount > 0) {
                    dividendToken.transfer(shareHolder, amount);
                }
            }

            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
        progressRewardBlock = block.number;
    }

    function setHolderRewardCondition(uint256 amount) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            holderRewardCondition = amount;
        }
    }

    function setHolderCondition(uint256 amount) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            holderCondition = amount;
        }
    }

    function setExcludeHolder(address addr, bool enable) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            excludeHolder[addr] = enable;
        }
    }

    function setLimitAmount(uint256 amount) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            _limitAmount = amount * 10 ** _decimals;
        }
    }

    function setProgressRewardBlockDebt(uint256 blockDebt) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            progressRewardBlockDebt = blockDebt;
        }
    }

    function setDividendToken(address dividendToken) external {
        if (msg.sender == _owner || msg.sender == fundAddress) {
            _dividendToken = dividendToken;
        }
    }
}

contract LiuMangTu is AbsToken {
    constructor() AbsToken(
        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),
        address(0x55d398326f99059fF775485246999027B3197955),
        address(0x2859e4544C4bB03966803b044A93563Bd2D0DD4D),
        "LiuMangTu",
        "LiuMangTu",
        9,
        1000000000000,
        address(0x0D962f8aBBa1ca2dF5f3bD1d453e2Ec2b94b17DA),
        address(0x87d1A08e936A26bC8A50ed9B05D5c9FE6FD5470B),
        address(0x87d1A08e936A26bC8A50ed9B05D5c9FE6FD5470B),
        0
    ){

    }
}