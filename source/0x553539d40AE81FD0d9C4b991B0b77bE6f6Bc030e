
// File: contracts/SmoltingInu.sol
/******************************************************************************************************
smolting inu (SMOL)

Website: https://smoltinginu.com
Twitter: https://twitter.com/smoltinginu
Telegram: https://t.me/smoltinginu

smolting, wassies, & inus unite!

all da lil shids, y r u here... u no y, for smolting inu!

SMOL wil sen wit hayste, cum joyn us frens
_______________________________________________________________________________________________________
Brand new innovative features:
  1. Nuke SMOL tokens from the liquidity pool on sells. This means over time sells will have less of a
     price impact and keep the price floor lifted, where buys have the full impact.
  2. Initial elevated sell tax that you can reduce by "flipping coins" using Chainlink VRF
     for your chance to both double your bag IN ADDITION TO remove sell tax elevation.
     See FLIP A COIN below
  3. Perpetual ETH biggest buyer reward every single hour, paid out on any transfer after
     that hour is completed, forever


TOKENOMICS

4% taxes - SELL ONLY
  - 1% token burn
  - 1% hourly biggest buy rewards
  - 2% auto LP (lowers price impact, support whales long term)

buy: 0%
sell: 8/4% -- 8% default, reduced to 4% when you flip a coin for SMOL (see FLIP A COIN below on reducing sell tax)


HOURLY BIGGEST BUYER REWARD

We keep track of the biggest buyer (defined by the number of SMOL received) every hour, and this buyer
will receive a portion of the contract ETH balance on the subsequent trade following the completion of the hour.
Keep an eye our in your wallet for ETH to come flowing in if you are the biggest buyer within an hour.


FLIP A COIN (DOUBLE YOUR BAG & REDUCE SELL TAX)

We offer the ability to flip a coin (using Chainlink verifiable random functions for true randomization)
where you can wager a portion of your SMOL bag, and if you win you will win that amount back to your wallet
IN ADDITION TO remove the default elevated sell tax.

discuss

MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd:;,,oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXNNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKl',cdx:.dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOc;,''';cdKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx,'lkOOOx,;KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl..;cllc;'..:OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.,xOOOOOO:'kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc..oOOOOOOko,..cKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.;xOOOOOOOl'dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl .oOOOOOOOOOkl. 'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd.,xOOOOOOOOl'dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..cOOOOOOOOOOOOx;..:0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd.'dOOOOOOOOOl'xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK, ,xOOOOOOOOOOOOOkl. .dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKc.,dOOOOOOOOOOl'xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..lOOOOOOOOOOOOOOOOx:. ;kNMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOl'.:xOOOOOOOOOOOl'xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc .dOOOOkdolodxkOOOOOko,..;xKWMMMMWWWNNXXXKK00OOkxdolc;'.'cdOOOOOOOOOOOOOo'dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; 'xOOOo;',,,,,',lxOOOOko;. .;clc:;,,''''.......''',;:coxkOOOOOOOOOOOOOOOx,;0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK, ,kOOk:.:ccc:'':okOOOOOOOxl;,'.',;;:cclllooddxxkkOOOOOOOOOOOOOOOOOOOOOOOOd,;kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK, ,xOOk;':ccc,.ckOOOOOOOOOOOOOkkkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOx:':kXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; 'xOOk:.:cccc,.,okOOOOOOOOOOOOOOOOOOkxddollllloodxkOOOOOOOOOOOOOOOOOOOOOOOOOd:,;lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX: .oOOOl.;cc;,,,:okOOOOOOOOOOOOOkdl:;;;;;;:::::::;;;::ldkOOOOOOOOOOOOOOOOOOOOOOxo;,,cdOXWMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo .cOOOd'.',;cdkOOOOOOOOOOOOOxl:;;:coxkkOOOOOOOOOkkdoc;,;:lxOOOOOOkkxddolllllllllc:,....;okKWMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. ;kOOkc,cdkOOOOOOOOOOOOOko;,;cdkOOOOOOOOOOOOOOOOOOOOOkdc,,;cc:::::::::ccccccccccccc:;'...';lkXWMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .dOOOOkOOOOOOOOOOOOOOOOkocdkOOOOOOOOOOOOOOOOOOOOOOOOOOOkd:..,oxxkkOOOOOOOOOOOOOOOOOOOkkxol:::coxKWMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0, .dOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkxddollccc::ccc:'.'lxOOOOOOOOOOOOOOOOOOOOOOOOOOOOkdl::cd0WMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0; .ckOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOxo:;;;;;:::::ccccc:::,'',:loxOOOOOOOkxollcc:::::::::::ccllc;,lXMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .lkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkxo;,;:loollcc::::::::ccllodolc;,cxdoc:::;;,,,,,,,,,,,,,,,,;;;;;'.ckXWMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc .ckOOOOOOOOOO000KK00OOOOOOOOOOOOOOkxo:,,,:ooc:;;,''''..''''',,,,,;;;:c'.,,,'',,;;;;,,,,,'....''',,,;,,;;,,,xWMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo. ;kOOOOOOOOOO0KKKKKKK00OOOOOOkxdoc:;,;:clc:,''''...  .:ccc:;;,,'''',,,,,',,;;;:ccc:,'....  .,;,,''....'',,,.'OWMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO. 'xOOOOOOOOOO0KKKKKKKKKK0OOOOOxc;;;;::::;,'....       .cKMMWWNXK0kdl:,'''';lool:,..  ...    .lXNXK0kdl:,'.....,dXMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl .lOOOOOOOOOO0KKKKKKKKKKK0Okdc::;;;;;;,,'...    ,odl'    :KMMMMMMMMMMWNKko,.,:,.     'xOOl.   .dWMMMMMMWN0xl,....xMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK, .dOOOOOOOOO0KKKKKKKKKKKKK0o'';::ccll:'.   ...  :kOx,     oWMMMMMMMMMMMMMMO.    .;;. .cdo;     ,KMMMMMMMMMMMN0d'.lNMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0' 'xOOOOOOOOO0KKKKKKKKKKKKK0x:,;;;;,,.      ,o;   ...      :NMMMMMMMMMMMMMMk.    .:;.           '0MMMMMMMMMMMMMWx.,0MM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0' ,xOOOOOOOO0KKKKKKKKKKKKKK0OOkxxxxdl,.                    oWMMMMMMMMMMMMMX:                    :XMMMMMMMMMMWNKd,.dNMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO. ;kOOOOOOOO0KKKKKKKKKKKKKKK0OOOOOOOOkd:'.                ;KMMMMMMMMMWN0xl,.                   ;0WMWWNX0Oxol:,..;OWMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx. cOOOOOOOO00KKKKKKKKKKKKKKKK00OOOOOkocoxdc;,.           :0NNNNNX0Oxl:,'',:,..'.              .;lc::;,,''',,,,.'kMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX: .dOOOOOOOO0KKKKKKKKKKKKKKKKKKK000OOOd:,,;cloooc:,'.... .',,,;;,,,',;:ldxdc';xkxdlc::;,,,,,,,,,;;::clodxkd:;:coOWMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..lkOOOOOOOO0KKKKKKKKKKKKKKKKKKKKKK00OOOkdl:;;;;;::ccclllllcccllllooollc:;,;lkOOOOOOOOOOOOOOOOOOOOOOOOOOOo,;kXWMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMM0'.:kOOOOOOOOO0KKKKKKKKKKKKKKKKKKKKKKKK00OOOOOOkkdocc:;;;;;;::;;:;;;;;'.,cloxOOOOOOOOOOOOOOOOOOOOOOOOOOOko;,lKMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMXc.;xOOOOOOOOO00KKKKKKKKKKKKKKKKKKKKKKKKKK0OOOOOOOOOOOOOOkkkkkkxxkkxo:,,:xOOOOOOOOdccoxkkOOOOOOOOOOkkxoc:;:o0WMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMWx.'dOOOOOOOOOO0KKKKKKOxollx0KKKKKKKKKKKKKKKK0OOOOOOOOOOOOOOOOOkdlc;,,:lxOOOOOOOOOOxl:;;;,,;::::::;;,,,..;ONMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMK,.lOOOOOOOOOOO0KKKK0d:;:c,.:OKKKKKKKKKKKKKKKK00OOOOOOOOOkdlc:;;,;:ldkOOOOOOOOOOOOOOOOOkxl,..,:ccccloxxd:,cOWMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMNo.:kOOOOOOOOOOO0KKKKx,:xOOx;.l0KKKKKKKKKKKKKKKKK00OOOOOOOkl::loxkOOOOOOOOOOOOOOOOOOOOOOOOOkocldddooodxkOOd:,l0WMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMO''dOOOOOOOOOOOO0KKKKo'lkkkkd,'xKKKKKKKKKKKKKKKKKKK0OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkdlc;,'....    ...':okd;,oXMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMNc.cOOOOOOOOOOOOO0KKKKx,:kOkkkd:;d0KKKKKKKKKKKKKKKKK0OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOko;..        .......    ,oko,;OWMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMk.,xOOOOOOOOOOOOO0KKKK0c'okkkkkkl;lOKKKKKKKKKKKKKKK0kolldxOOOOOOOOOOOOOOOOOOOOOOOOOx;.     .........',;,,..  .oOx:,dNMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMX:.lOOOOOOOOOOOOOO0KKKKKO:,dkkkkkkdc:oOKKKKKKKKKKKOkl......,cokOOOOOOOOOOOOOOOOOOOOk:   ...............,,'.    :kOkl,lKMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMWx.'xOOOOOOOOOOOOOO0KKKKKKk;:xOkkkkOkdccok0KKKKKKK0l...;cc:;'..';lxOOOOOOOOOOOOOOOOOx'       ...........'..    .oOOOOo':KMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMX:.ckOOOOOOOOOOOOOOO0KKKKKKd,lkkkkkkkkkxlclok0KKK0x' .;ccccccc:,...;lxOOOOOOOOOOOOOOkc.         .........     .ckOOOOOc.oWMMMMM
MMMMMMMMMMMMMMMMMMMMMMMk..dOOOOOOOOOOOOOOOO0KKKKKK0c;dOkkkOkkkkkkdccccloxo' .:cc;,,:cccc:;...;lxOOOOOOOOOOOOkl'         ........    .ckOOOOkd,..lxKWMM
MMMMMMMMMMMMMMMMMMMMMMNc ;kOOOOOOOOOOOOOOOO0KKKKKKKx;ckkkkkkkkkkkkkkxl:;;,. .,cc:,...',:ccc:,...;okOOOOOOOOOOOko,.       .....     'lkOOkdc,..','.'lKM
MMMMMMMMMMMMMMMMMMMMMM0'.lOOOOOOOOOOOOOOOOO00KKKKKK0:;xOkkkkkkkkkkkkkkkkkxol,.,:cccc;,...,:ccc:,...:okOOOOOOOOOOkxl;..          .,lxkxo:,..';ccccc'.cX
MMMMMMMMMMMMMMMMMMMMMWo..dOOOOOOOOOOOOOOOOOO0KKKKKKKo,oOkkkkkkkkkkkkkkkkkkOOxc'.',:cccc:,'..,:ccc:,...;ldkOOOOOOOOOOkxolc::;::clool:,'..,:cccccccc;.:X
MMMMMMMMMMMMMMMMMMMMMX; ,xOOOOOOOOOOOOOOOOOOO0KKKKKKx':kkkkkkkkkkOkkkkkkkkkOOkxo:,'.';cccc:,..',:ccc:,...';:lodxxxxxxdddollc:;,''..',;ccccccccccc:..dW
MMMMMMMMMMMMMMMMMMMMMO. :kOOOOOOOOOOOOOOOOOOO0KKKKKKk',xOkkkkkkkkkkkkkkkkkkkkkkkkkxl;'.',:ccc:,...,:cccc:,'....''''''.......'',;:ccccccccccccc:;'.,xNM
MMMMMMMMMMMMMMMMMMMMWd..lOOOOOOOOOOOOOOOOOOOOO0KKKKKk,'dOkkkkkkkkkkkkkkkkkkkkkkkOkkOkxo:,.',:ccc:,...',:cccccc:::::::::cccccccccccccccc::;,'......:0WM
MMMMMMMMMMMMMMMMMMMMNl .oOOOOOOOOOOOOOOOOOOOOOO0KKKKO,.lOkkkkkkkkkkkkkkkkkkkkkkkkkkkOOkkkd:,..,:ccc:;'....'',;;;::::::;;;;,,,,'''''..........',::,.'oX
MMMMMMMMMMMMMMMMMMMMNc .oOOOOOOOOOOOOOOOOOOOOOOO00KKO;.cOOkkkkkkkkkkkkkkkkkkkkkkkkkkOOkkkkkkdc,.',:ccccc:;,''...................''',,;;:::cccccccc:'.:
MMMMMMMMMMMMMMMMMMMMX: .oOOOOOOOOOOOOOOOOOOOOOOOOO0KO;.ckOkkkkkkkkkkkxxxkkkkkkkkkkkkkkkkkkkkkkkdc,..,:cccccccccccccccccccccccccccccccccccccccccccccc'.
MMMMMMMMMMMMMMMMMMMM0' 'dOOOOOOOOOOOOOOOOOOOOOOOOOO0k;.:kOkkkkkkkkkkkkxddxxxkkkkkkkkkkkkkkkkkkOkkkdc,..';:ccccccccccccccccccccccccccccccccccccccccc:..
MMMMMMMMMMMMMMMMMMMWx. ;kOOOOOOOOOOOOOOOOOOOOOOOOOOOx' :kkkkkkkkkkkkkkkxdddddxxkkkkkkkkkkkkkkkkkOOkkkdc;'..',;;::ccccccccccccccccccccccccccccccc:;'.'d
MMMMMMMMMMMMMMMMMMMNc  :OOOOOOOOOOOOOOOOOOOOOOOOOOOOx' :kkkkkkkkkkkkkOkxxdddddddxxkkkkkkkkkkkkkkkOkkOkkkxdl:;,'''...................''''''''''',,;lxXW
MMMMMMMMMMMMMMMMMMMX; .lOOOOOOOOOOOOOOOOOOOOOOOOOOOOx'.ckkkkkkkkkkkkkkkkkxdddddddddxxxkkkkkkkkkkkkkkkkkkkkkkkkkxddoolllllcc:::::;..ckkOOOOOOO00KNWMMMM
MMMMMMMMMMMMMMMMMMMX; .lOOOOOOOOOOOOOOOOOOOOOOOOOOOOx,.lOkkkkkkkkkkkkkkkkkxddddddddddddxxxkkkkkkkkkkkkkOOOkkkkkxxxkkkOOkOkkxddddl.'OMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMK, .lOOOOOOOOOOOOOOOOOOOOOOOOOOOOx'.lOkkkkkkkkkkkkkkkkkkkxxdddddddddddddxxxkkkkkkkkkkxxxxxxddddxkkOkkOkkxdddd:.;XMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMO. .oOOOOOOOOOOOOOOOOOOOOOOOOOOOOd..dkkkkkkkkkkkkkkkkkkkkkkxxdddddddddddddddxxxxxxxdddddddddddxkkkkkkkkkxdddd;.lNMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMWx. 'xOOOOOOOOOOOOOOOOOOOOOOOOOOOOo.'xOkkkkkkkkkkkkkkkkkkkkkkkxxdddddddddddddddddddddddddddddxkkkOkkkkkkxddddo'.dWMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMWo  ;kOOOOOOOOOOOOOOOOOOOOOOOOOOOOl.,xOkkkkkkkkkkkkkkkkOkkkkOOkkxxdddddddddddddddddddddddddxxkkkkkkkkkkkxddddl..OMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMNc  :kOOOOOOOOOOOOOOOOOOOOOOOOOOOOc.:kOkkkOkkkkkkkkkkkkkkkkkkkkkkkkxxdddddddddddddddddddxxkkkkkkkkkkkkkkxdddd:.,KMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMX: .oOOOOOOOOOOOOOOOOOOOOOOOOOOOOk;.ckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxdddddddddddddxxxkkkkkkkkkkkkkkkxddddd; cNMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMM0' 'xOOOOOOOOOOOOOOOOOOOOOOOOOOOOx'.okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxxxxxxxxxxkkkkkkkkkkkkkkkkkkxxddddo'.oWMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMWx. :kOOOOOOOOOOOOOOOOOOOOOOOOOOOOo.'xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOkkkkkkkkkkkkkkkkkkkkkkkkOkkOkxdddddl..xMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMWl .lOOOOOOOOOOOOOOOOOOOOOOOOOOOOOc.,xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddc.'OMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMX: .dOOOOOOOOOOOOOOOOOOOOOOOOOOOOk;.:kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddd; ;KMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMK, ,xOOOOOOOOOOOOOOOOOOOOOOOOOOOOd..lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddd, cNMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMO. ;kOOOOOOOOOOOOOOOOOOOOOOOOOOOk:.,xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddo'.oWMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMk. cOOOOOOOOOOOOOOOOOOOOOOOOOOOOd..lOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddl..xMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMWd..lOOOOOOOOOOOOOOOOOOOOOOOOOOOk: ,xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddc.'OMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMWo .oOOOOOOOOOOOOOOOOOOOOOOOOOOOd'.ckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddd; ,KMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMWl .dOOOOOOOOOOOOOOOOOOOOOOOOOOOc..dOkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxkOkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddd; cNMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMNc ,xOOOOOOOOOOOOOOOOOOOOOOOOOOk, ,xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxl;.ckkkkkkkkkkkkkkkkkkkkkkkkkkkOkxdddddddo,.oWMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMN: ;kOOOOOOOOOOOOOOOOOOOOOOOOOOd..ckkkOkkkkkkkkkkkkkkkkkkkkOkkkkdccc,;xkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxdddddddo..xMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMX; :kOOOOOOOOOOOOOOOOOOOOOOOOOOc..oOkkkkkkkkkkkkkkkkkkkkkkkkkkxccxKo:xOkkkkkkkkkkkkkkkkkkkkkkkkkkOkxddddddddl..OMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMK, cOOOOOOOOOOOOOOOOOOOOOOOOOOk; 'dOkOkkkkkkkkkkkkkkkkkkkkOkko:oXM0clkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddl.'0MMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMM0'.lOOOOOOOOOOOOOOOOOOOOOOOOOOx' ;xOkkkkkkkkkkkkkkkkkkkOkkkko:xNMMO:okkOkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddl..OMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMk..oOOOOOOOOOOOOOOOOOOOOOOOOOOo. ckkkkkkkkkkkkkkkkkkkkkkkOxo:oNMMMKcckkkOkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddo..OMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMWd..dOOOOOOOOOOOOOOOOOOOOOOOOOOc..lkkkkkkkkkkkkkkkkkkkkkkkkl,:0MMMMWd:dOkkkkkkOkkkkkkkkkkkkkkkkkkkkkxddddddddo,.kMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMNc ,xOOOOOOOOOOOOOOOOOOOOOOOOOk: .dOkkkkkkkkkkkkkkkkkkkkkkkc'cKMMMMMXl:xOkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd;.dWMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMK, ;kOOOOOOOOOOOOOOOOOOOOOOOOOk; 'xOkkOkkkkkkkkkkkkkkkkkkkkc'cKMMMMMMKl:dkkkOkkkkkkkkkkkkkkkkkkkkkkxdddddddddd;.lNMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMk. :kOOOOOOOOOOOOOOOOOOOOOOOOOx' ,xOkkkkkkkkkkkkkkkkkkkkkkko;:OMMMMMMMNx:lxkkkkOkkkkkkkkkkkkkkkkkkkxdddddddddd: ,KMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMWd..cOOOOOOOOOOOOOOOOOOOOOOOOOOd. :kkkkkkkkkkkkkkkkkkkkkkkOOxd:lXMMMMMMMWKdccdkkOkkkkkkkkkkkkkkkkkkkxllddddddddc..xWMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMNl .oOOOOOOOOOOOOOOOOOOOOOOOOOOo..ckkkkkkkkkkkkkkkkkkkkkkOkkkkd:dNMMMMMMMMWXxocloxkkOkkkOkkkkkkkkdoc,.:ddddddddl. :XMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMX; .dOOOOOOOOOOOOOOOOOOOOOOOOOOo..okkkkkkkkkkkkkkkkkkkkkkkkkOkkd:oKWMMMMMMMMMWKkdolllloooooolllloodl,;oddddddddl. .dWMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMX; 'xOOOOOOOOOOOOOOOOOOOOOOOOOOd..dkOkkOkkkkkkkkkkkkkkkkkkkOkkkOxlcdKWMMMMMMMMMMMWXKOkxxxxxxxk0KNXx:codddddddddl.  'OMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMM0' ;kOOOOOOOOOOOOOOOOOOOOOOOOOOd..dOkkkkkkkkkkkkkkkkkkkkkkkkkkkOkkdlcokXWMMMMMMMMMMMMMMMMMMMMMNKxlcoxddddddddddo....:XMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMO. :kOOOOOOOOOOOOOOOOOOOOOOOOOOd..oOkkkkkkkkkkkkkkkkkkkkkkkOkkkkkOkkxocloxOKNWMMMMMMMMMMWWX0kdolldkkxddddddddddo'.,..xWMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMk. cOOOOOOOOOOOOOOOOOOOOOOOOOOOd'.lkkkkkkkkkkkkkkkkkkkkkkkkkkkkOOkkkkkkkdllloddxxkkkkxxddollldxkkkkkxddddddddddd, ;; ;KMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMWx..lOOOOOOOOOOOOOOOOOOOOOOOOOOOx'.ckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdoolllloodxkkkkkOkkkkkxxdddddddddd, ,l..xWMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMWo..dOOOOOOOOOOOOOOOOOOOOOOOOOOOx,.:kOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; ,d; cNMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMWl 'dOOOOOOOOOOOOOOOOOOOOOOOOOOOk; ;kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; ,xl.'OMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMNc ,xOOOOOOOOOOOOOOOOOOOOOOOOOOOk: ,xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; 'xx' oWMMMMMMMMMMMMMMM
MMMMMMMMMMMMMN: ;kOOOOOOOOOOOOOOOOOOOOOOOOOOOOc.'xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; 'xk: ,0MMMMMMMMMMMMMMM
MMMMMMMMMMMMMX; :kOOOOOOOOOOOOOOOOOOOOOOOOOOOOl.'xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; 'xOl..dWMMMMMMMMMMMMMM
MMMMMMMMMMMMMK,.cOOOOOOOOOOOOOOOOOOOOOOOOOOOOOo.'dOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; ,xOd. cNMMMMMMMMMMMMMM
MMMMMMMMMMMMM0'.lOOOOOOOOOOOOOOOOOOOOOOOOOOOOOd..dkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; ,xOk; ;KMMMMMMMMMMMMMM
MMMMMMMMMMMMMO..oOOOOOOOOOOOOOOOOOOOOOOOOOOOOOx'.okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; ,kOOc '0MMMMMMMMMMMMMM
MMMMMMMMMMMMMk..oOOOOOOOOOOOOOOOOOOOOOOOOOOOOOx'.lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; ;kOOo..kMMMMMMMMMMMMMM
MMMMMMMMMMMMMx..dOOOOOOOOOOOOOOOOOOOOOOOOOOOOOx,.lkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd; ;kOOd..dWMMMMMMMMMMMMM
MMMMMMMMMMMMWd.'xOOOOOOOOOOOOOOOOOOOOOOOOOOOOOx'.lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd;.:kOOx' lWMMMMMMMMMMMMM
MMMMMMMMMMMMWo.,xOOOOOOOOOOOOOOOOOOOOOOOOOOOOOd..oOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd;.cOOOk;.lNMMMMMMMMMMMMM
MMMMMMMMMMMMNl ,kOOOOOOOOOOOOOOOOOOOOOOOOOOOOOd..dOkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd,.cOOOO:.:NMMMMMMMMMMMMM
MMMMMMMMMMMMNc ;kOOOOOOOOOOOOOOOOOOOOOOOOOOOOOl.'xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd,.lOOOOl.,KMMMMMMMMMMMMM
MMMMMMMMMMMMX; :OOOOOOOOOOOOOOOOOOOOOOOOOOOOOk:.,xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOkkxdddddddddd,.lOOOOo..OMMMMMMMMMMMMM
MMMMMMMMMMMMK, cOOOOOOOOOOOOOOOOOOOOOOOOOOOOOx,.:kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOkkxdddddddddd,.lOOOOd..xMMMMMMMMMMMMM
MMMMMMMMMMMMK,.cOOOOOOOOOOOOOOOOOOOOOOOOOOOOOo..lOkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOOkxdddddddddo'.oOOOOd..dWMMMMMMMMMMMM
MMMMMMMMMMMM0'.lOOOOOOOOOOOOOOOOOOOOOOOOOOOOk: 'xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddo'.oOOOOx,.oWMMMMMMMMMMMM
MMMMMMMMMMMMO..lOOOOOOOOOOOOOOOOOOOOOOOOOOOOx' :kOOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddl..oOOOOk, lWMMMMMMMMMMMM
MMMMMMMMMMMMk..oOOOOOOOOOOOOOOOOOOOOOOOOOOOOc..oOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddl..dOOOOk;.lWMMMMMMMMMMMM
MMMMMMMMMMMMx..oOOOOOOOOOOOOOOOOOOOOOOOOOOOx, ;xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddl..dOOOOk:.lWMMMMMMMMMMMM
MMMMMMMMMMMWd..dOOOOOOOOOOOOOOOOOOOOOOOOOOOl..lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddl..oOOOOk:.lWMMMMMMMMMMMM
MMMMMMMMMMMWo .dOOOOOOOOOOOOOOOOOOOOOOOOOOx' ,xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddl..oOOOOk;.lWMMMMMMMMMMMM
MMMMMMMMMMMWl 'xOOOOOOOOOOOOOOOOOOOOOOOOOkc..lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddc..oOOOOk;.lWMMMMMMMMMMMM
MMMMMMMMMMMNc 'xOOOOOOOOOOOOOOOOOOOOOOOOOd' ;xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd:..oOOOOk,.oWMMMMMMMMMMMM
MMMMMMMMMMMX: ,xOOOOOOOOOOOOOOOOOOOOOOOOk: .okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd; .oOOOOx'.dWMMMMMMMMMMMM
MMMMMMMMMMMK, ;kOOOOOOOOOOOOOOOOOOOOOOOOo. :kkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd; .oOOOOd..xMMMMMMMMMMMMM
MMMMMMMMMMM0' ;kOOOOOOOOOOOOOOOOOOOOOOOx, 'dOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd; .oOOOOd..kMMMMMMMMMMMMM
MMMMMMMMMMMO. :kOOOOOOOOOOOOOOOOOOOOOOk: .ckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd; .dOOOOo..OMMMMMMMMMMMMM
MMMMMMMMMMMk. :OOOOOOOOOOOOOOOOOOOOOOOo. ,xOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd, .dOOOOc.'0MMMMMMMMMMMMM
MMMMMMMMMMMx. cOOOOOOOOOOOOOOOOOOOOOOd' .okkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddo' .dOOOk: ;XMMMMMMMMMMMMM
MMMMMMMMMMWd..cOOOOOOOOOOOOOOOOOOOOOx; .ckOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddo' .dOOOk; cNMMMMMMMMMMMMM
MMMMMMMMMMWo .lOOOOOOOOOOOOOOOOOOOOkc. ;xkkkkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddl. 'dOOOx'.dWMMMMMMMMMMMMM
MMMMMMMMMMWo .lOOOOOOOOOOOOOOOOOOOOl. 'dkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddl. 'xOOOo..OMMMMMMMMMMMMMM
MMMMMMMMMMWl .oOOOOOOOOOOOOOOOOOOOo. .okkOkkOkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddl. 'xOOOc.:XMMMMMMMMMMMMMM
MMMMMMMMMMNc .dOOOOOOOOOOOOOOOOOOd. .lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddl. 'xOOx,.dWMMMMMMMMMMMMMM
MMMMMMMMMMNc .dOOOOOOOOOOOOOOOOOd' .ckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddl. 'xOOl.'0MMMMMMMMMMMMMMM
MMMMMMMMMMNc 'dOOOOOOOOOOOOOOOOd' .:kOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddl. ,xOx, cNMMMMMMMMMMMMMMM
MMMMMMMMMMX: 'xOOOOOOOOOOOOOOko. .ckOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddl. ,xOc..kMMMMMMMMMMMMMMMM
MMMMMMMMMMX: ,xOOOOOOOOOOOOOkc. .ckOOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddc. ,xd. cNMMMMMMMMMMMMMMMM
MMMMMMMMMMN: ,xOOOOOOOOOOOOx;  .okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddd:. ,d; .OMMMMMMMMMMMMMMMMM
MMMMMMMMMMX: ;kOOOOOOOOOOkl.  ;dkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd;  ':. lNMMMMMMMMMMMMMMMMM
MMMMMMMMMMX: ;kOOOOOOOOko,  .lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd;  .. ,0MMMMMMMMMMMMMMMMMM
MMMMMMMMMMK; :OOOOOOOkd;. .:xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd;    .dWMMMMMMMMMMMMMMMMMM
MMMMMMMMMM0, cOOOOOko,. .;dkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd;    cXMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMO. cOOkdc'  .:dkkkOkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd,   ,0MMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMx..:oc'. .,lxkOkkkOkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddo'  .xWMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMWo  .    .lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddl.  cNMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMWo. .:xd. ckkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOkkkkkxdddddddddl. .xMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMNOOXXx'.'okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOOOkkkxdddddddddc. .OMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMWKo'..:xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddd;  ,0MMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMNOc...cdkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd,  :NMMMMMMMMMMMMMMMMMMMMMM
MMMMMMWXx;..,lxkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOkkkkxdddddddddl. .dWMMMMMMMMMMMMMMMMMMMMMM
MMMMW0l...:okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxdddddddddd;  ,KMMMMMMMMMMMMMMMMMMMMMMM
MMXk:..,lxkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxddddddddddc. .dWMMMMMMMMMMMMMMMMMMMMMMM
Xd'..:dkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxddddddddddl'  cXMMMMMMMMMMMMMMMMMMMMMMMM
; .:dkOOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxddddddddddddo'  :KMMMMMMMMMMMMMMMMMMMMMMMMM
:. .';cdkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkOkkkkkkkkkkkkkOOkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxxxxdddddddddddddddl'  :KMMMMMMMMMMMMMMMMMMMMMMMMMM
N0dl;....;cdkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxddddddddddddddddddddddo:. .lXMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMWXOo:....;ldkkOkkkkkkkkkkkkkkkkkkkkkkkkkkkkxxxxxxxxddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddl'  'kNMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMWXkl;. .':oxkkkkkkkkkkkkkkkkkkkkkxxxxddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddl,. .oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMWKxc'...;ldkkkkkkkkkkkkkkxxxddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddo:'. .lKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMN0d;. .,cdkkkkkkkxxxdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddol:;..   .lOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMWKxc'..':odxxddddddddddddddddddddddddddddddddddddooolcccccccccccccccclllllllcccc:;;,'... ......  ..,cdOKWMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMWNOl,...;coddddddddddddddddddddddddddolc:;,''..... ............   ......       ....,;:clooolcc:,..  .,lx0NWMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMN0d:. .';clodddddddddddddoolc;,'.....',:lodxx;.:llllllccc::::::;;;;;;;:::ccllooooooooooodkOOkxo:,.. .':oOXWMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx. ......',;;;;;;,,'.........;x0KNWMMMMMWo.:ooooooooooooooooooooooooooooooooooooooooxOOOOOOOOkdl;'.  .:oONMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. 'lc:,'.........',,;:cllol:;dXMMMMMMMMWo...,,:clooooooooooooooooooooooooooooooodxkOOOOOOOOOOOOOkxl;'. .'lONMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx. 'loooooollllloooooooooooooc;c0WMMMMMMM0l,...  ..';codxddddddoooooooooooooooddxkOOOOOOOOOOOOOOOOOOOkdc,.  'l0WMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd. 'odooooooooooooooddxxxxdddoo;,dNMMMMMMMMWXKOxo:'.  .'cdkOOkkkkxxdddooddddxkkOOOOOOOOOOOOOOOOOOOOOOOOOOxl,. .:kNMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd. ,xOkxddooooooddxkkOOOOOOOkkkkl,lXMMMMMMMMMMMMMWN0d:.  .,lkOOOOOOOOkkkkkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkd:. .:OWMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx. ,xOOOOkkkxxxkkOOOOOOOOOOOOOOOOl':KMMMMMMMMMMMMMMMMWXx:.  'okOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkxxdoollllllllloool'  .xWMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. 'xOOOOOOOOOOOOOOOOOOOOOOOOOOOOkl.:KMMMMMMMMMMMMMMMMMMW0l. .;xOOOOOOOOOOOOOOOOOOOOOOOOxl;,...      ...      .    .OMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO. .dOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkl.;KMMMMMMMMMMMMMMMMMMMWKl. .okOOOOOOOOOOOOOOOOOOOOOOc  .,clodxkkOOOOkkxddool:;':0MMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK, .lOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkc.:KMMMMMMMMMMMMMMMMMMMMW0:..:xOOOOOOOOOOOOOOOOOOOOOl. '0MMMMMMMMMMMMMMMMMMMMWNWMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc  :kOOOOOOOOOOOOOOOOOOOkdoxkOOOOOOk:.cXMMMMMMMMMMMMMMMMMMMMMNx'.,dOOOOOOOOOOOOOOOOOOOOx,  oNMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd. 'dOOOOOOOOOOOOOOOOOOOd'..,:okOOOOk;.dWMMMMMMMMMMMMMMMMMMMMMMKc..lkOOOxolllodxxkOOOOOOo. .xWMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0' .cOOOOOOOOOOOOOOOOOOOo.'xx:'':dkOOd''OMMMMMMMMMMMMMMMMMMMMMMMNx..;xOo'      ...',:cldxc. .kWMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl  'dOko:;:lxOOOOOOOOOOl.,KMW0d;.,cxkl.:XMMMMMMMMMMMMMMMMMMMMMMMW0;..l; .lxdolc:,...   ..   .xNMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK;  :xc. .  .,cdkOOOOOOc ,KMMMMNOl,';:..kMMMMMMMMMMMMMMMMMMMMMMMMMXo.   lNMMMMMWWNK0kdl;'.   .kWMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK: .'. c0Oo;. .,cxOOOO: ,KMMMMMMMXkc. .dWMMMMMMMMMMMMMMMMMMMMMMMMMWk;.,OMMMMMMMMMMMMMMWNKOdldKMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd'  :KMMMW0d;. .;okk: ,KMMMMMMMMMWKddKMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkkXMMMMMMMW0o,. .;' ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOl'   :XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKl''xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
******************************************************************************************************/

// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.9;

import '@openzeppelin/contracts/token/ERC20/ERC20.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';
import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';
import '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';
import './interfaces/ISmoltingInu.sol';

contract SmoltingInu is ISmoltingInu, ERC20, Ownable {
  int256 internal constant OFFSET19700101 = 2440588;
  uint256 internal constant ONE_DAY = 1 days;
  uint256 internal constant ONE_HOUR = 1 hours;
  uint256 internal constant PERCENT_DENOMENATOR = 1000;
  address internal constant DEAD = address(0xdead);

  uint256 public minRakeBackPlayThrough = 1000 * 10**18;
  uint256 public rakeBackPercentage = 50; // 5%
  uint256 public totalPlayThrough;
  mapping(address => uint256) public userPlayThrough;
  // user => month => amount
  mapping(address => mapping(uint256 => uint256)) public userMonthlyPlayThrough;
  // user => month => amount
  mapping(address => mapping(uint256 => uint256)) public userPlayThroughClaimed;

  uint256 public minTransferForSideEffectsToRecipient;

  uint256 public biggestBuyRewardPercentage = (PERCENT_DENOMENATOR * 20) / 100; // 20%
  uint256 public maxBuyerRewardBuyPercentage = (PERCENT_DENOMENATOR * 5) / 100; // 5%
  mapping(uint256 => address) public biggestBuyer;
  mapping(uint256 => uint256) public biggestBuyerAmount;
  mapping(uint256 => uint256) public biggestBuyerPaid;
  uint256 public lastBiggestBuyerHour;
  uint256 public currentBiggestBuyerHour;

  address internal _lpReceiver;
  address internal _nukeRecipient = DEAD;
  uint256 public lpNukeBuildup;
  uint256 public nukePercentPerSell = (PERCENT_DENOMENATOR * 5) / 100; // 5%
  bool public lpNukeEnabled = true;

  mapping(address => bool) internal _isTaxExcluded;

  uint256 public taxBurn = (PERCENT_DENOMENATOR * 1) / 100; // 1%
  uint256 public taxBuyer = (PERCENT_DENOMENATOR * 1) / 100; // 1%
  uint256 public taxLp = (PERCENT_DENOMENATOR * 3) / 100; // 3%
  uint256 public sellTaxUnwageredMultiplier = 20; // init 8% (4% * 2)
  uint256 internal _totalTax;
  bool internal _taxesOff;
  mapping(address => bool) public canSellWithoutElevation;

  mapping(address => uint256) public lastGameWin;
  uint256 public gameWinSellPenaltyTimeSeconds = 1 hours; // 1 hour
  uint256 public gameWinSellPenaltyMultiplier = 30; // init 12% (4% * 3)

  uint256 internal _liquifyRate = (PERCENT_DENOMENATOR * 1) / 100; // 1%
  uint256 public launchTime;
  uint256 public launchTimeTopHour;
  uint256 public launchTimeTopMonth;
  uint256 internal _launchBlock;

  IUniswapV2Router02 public uniswapV2Router;
  address public uniswapV2Pair;

  mapping(address => bool) internal _isBot;

  mapping(address => bool) public isGameContract;
  mapping(address => bool) public isPlayBlacklisted;

  bool internal _swapEnabled = true;
  bool internal _swapping = false;

  event GameMint(address indexed wagerer, uint256 amount);
  event GameBurn(address indexed wagerer, uint256 amount);
  event AddPlayThrough(address indexed wagerer, uint256 amount);
  event CanSellWithoutElevation(
    address indexed wagerer,
    bool canSellWithoutElev
  );

  modifier onlyGame() {
    require(isGameContract[_msgSender()], 'not a smol game');
    _;
  }

  modifier swapLock() {
    _swapping = true;
    _;
    _swapping = false;
  }

  constructor() ERC20('smolting inu', 'SMOL') {
    _mint(address(this), 1_000_000 * 10**18);

    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
      0x10ED43C718714eb63d5aA57B78B54704E256024E
    );
    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(
      address(this),
      _uniswapV2Router.WETH()
    );
    uniswapV2Router = _uniswapV2Router;
    _setTotalTax();
    _isTaxExcluded[address(this)] = true;
    _isTaxExcluded[msg.sender] = true;
  }

  // _percent: 1 == 0.1%, 1000 = 100%
  function launch(uint16 _percent) external payable onlyOwner {
    require(_percent <= PERCENT_DENOMENATOR, 'must be between 0-100%');
    require(launchTime == 0, 'already launched');
    require(_percent == 0 || msg.value > 0, 'need ETH for initial LP');

    uint256 _lpSupply = (totalSupply() * _percent) / PERCENT_DENOMENATOR;
    uint256 _leftover = totalSupply() - _lpSupply;
    if (_lpSupply > 0) {
      _addLp(_lpSupply, msg.value);
    }
    if (_leftover > 0) {
      _transfer(address(this), owner(), _leftover);
    }
    uint256 _topHourDiff = block.timestamp % ONE_HOUR;
    uint256 _year = _getYear(block.timestamp);
    uint256 _month = _getMonth(block.timestamp);
    launchTime = block.timestamp;
    launchTimeTopHour = block.timestamp - _topHourDiff;
    launchTimeTopMonth = _timestampFromDate(_year, _month, 1);
    _launchBlock = block.number;
  }

  function _transfer(
    address sender,
    address recipient,
    uint256 amount
  ) internal virtual override {
    bool _isOwner = sender == owner() || recipient == owner();
    uint256 contractTokenBalance = balanceOf(address(this));

    bool _isContract = sender == address(this) || recipient == address(this);
    bool _isBuy = sender == uniswapV2Pair &&
      recipient != address(uniswapV2Router);
    bool _isSell = recipient == uniswapV2Pair;
    uint256 _hourAfterLaunch = getHour();

    if (isPlayBlacklisted[sender]) {
      require(
        !isGameContract[recipient],
        'user blacklisted from playing games'
      );
    }

    if (_isBuy) {
      canSellWithoutElevation[recipient] = false;
      if (block.number <= _launchBlock + 2) {
        _isBot[recipient] = true;
      } else if (amount > biggestBuyerAmount[_hourAfterLaunch]) {
        if (currentBiggestBuyerHour != _hourAfterLaunch) {
          lastBiggestBuyerHour = currentBiggestBuyerHour;
          currentBiggestBuyerHour = _hourAfterLaunch;
        }
        biggestBuyer[_hourAfterLaunch] = recipient;
        biggestBuyerAmount[_hourAfterLaunch] = amount;
      }
    } else {
      require(!_isBot[recipient], 'Stop botting!');
      require(!_isBot[sender], 'Stop botting!');
      require(!_isBot[_msgSender()], 'Stop botting!');

      if (
        !_isSell &&
        !_isContract &&
        amount > minTransferForSideEffectsToRecipient
      ) {
        canSellWithoutElevation[recipient] = false;
        if (lastGameWin[recipient] < lastGameWin[sender]) {
          lastGameWin[recipient] = lastGameWin[sender];
        }
      }
    }

    _checkAndPayBiggestBuyer(lastBiggestBuyerHour);

    uint256 _minSwap = (balanceOf(uniswapV2Pair) * _liquifyRate) /
      PERCENT_DENOMENATOR;
    bool _overMin = contractTokenBalance >= _minSwap;
    if (
      _swapEnabled &&
      !_swapping &&
      !_isOwner &&
      _overMin &&
      launchTime != 0 &&
      sender != uniswapV2Pair
    ) {
      _swap(_minSwap);
    }

    uint256 tax = 0;
    if (
      launchTime != 0 &&
      _isSell &&
      !_taxesOff &&
      !(_isTaxExcluded[sender] || _isTaxExcluded[recipient])
    ) {
      tax = _calcTaxAndProcess(sender, amount);
    }

    super._transfer(sender, recipient, amount - tax);

    if (_isSell && lpNukeEnabled && sender != address(this)) {
      lpNukeBuildup +=
        ((amount - tax) * nukePercentPerSell) /
        PERCENT_DENOMENATOR;
    }
  }

  function _calcTaxAndProcess(address sender, uint256 amount)
    internal
    returns (uint256)
  {
    bool _taxIsElevated = !canSellWithoutElevation[sender];
    uint256 tax = (amount * _totalTax) / PERCENT_DENOMENATOR;
    if (tax > 0) {
      if (
        block.timestamp < lastGameWin[sender] + gameWinSellPenaltyTimeSeconds
      ) {
        tax = (tax * gameWinSellPenaltyMultiplier) / 10;
      } else if (_taxIsElevated) {
        tax = (tax * sellTaxUnwageredMultiplier) / 10;
      }
      super._transfer(sender, address(this), tax);
    }
    return tax;
  }

  function _swap(uint256 _amountToSwap) internal swapLock {
    uint256 balBefore = address(this).balance;
    uint256 burnTokens = (_amountToSwap * taxBurn) / _totalTax;
    uint256 liquidityTokens = (_amountToSwap * taxLp) / _totalTax / 2;
    uint256 tokensToSwap = _amountToSwap - burnTokens - liquidityTokens;

    if (burnTokens > 0) {
      _burn(address(this), burnTokens);
    }

    // generate the uniswap pair path of token -> weth
    address[] memory path = new address[](2);
    path[0] = address(this);
    path[1] = uniswapV2Router.WETH();

    _approve(address(this), address(uniswapV2Router), tokensToSwap);
    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
      tokensToSwap,
      0,
      path,
      address(this),
      block.timestamp
    );

    uint256 balToProcess = address(this).balance - balBefore;
    if (balToProcess > 0) {
      _processFees(balToProcess, liquidityTokens);
    }
  }

  function _processFees(uint256 amountETH, uint256 amountLpTokens) internal {
    uint256 lpETH = (amountETH * taxLp) / _totalTax;
    if (amountLpTokens > 0) {
      _addLp(amountLpTokens, lpETH);
    }
  }

  function _addLp(uint256 tokenAmount, uint256 ethAmount) internal {
    _approve(address(this), address(uniswapV2Router), tokenAmount);
    uniswapV2Router.addLiquidityETH{ value: ethAmount }(
      address(this),
      tokenAmount,
      0,
      0,
      _lpReceiver == address(0) ? owner() : _lpReceiver,
      block.timestamp
    );
  }

  function _lpTokenNuke(uint256 _amount) internal {
    // cannot nuke more than 20% of token supply in pool
    if (_amount > 0 && _amount <= (balanceOf(uniswapV2Pair) * 20) / 100) {
      if (_nukeRecipient == DEAD) {
        _burn(uniswapV2Pair, _amount);
      } else {
        super._transfer(uniswapV2Pair, _nukeRecipient, _amount);
      }
      IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);
      pair.sync();
    }
  }

  function _checkAndPayBiggestBuyer(uint256 _hourToPay) internal {
    if (
      _hourToPay > 0 &&
      biggestBuyerAmount[_hourToPay] > 0 &&
      biggestBuyerPaid[_hourToPay] == 0
    ) {
      uint256 _before = address(this).balance;
      if (_before > 0) {
        uint256 _buyerAmount = (_before * biggestBuyRewardPercentage) /
          PERCENT_DENOMENATOR;
        uint256 _maxRewardAmount = (biggestBuyerAmount[_hourToPay] *
          maxBuyerRewardBuyPercentage) / PERCENT_DENOMENATOR;
        _buyerAmount = _buyerAmount > _maxRewardAmount
          ? _maxRewardAmount
          : _buyerAmount;
        biggestBuyerPaid[_hourToPay] = _buyerAmount;
        payable(biggestBuyer[_hourToPay]).call{ value: _buyerAmount }('');
        require(
          address(this).balance >= _before - _buyerAmount,
          'too much ser'
        );
      }
    }
  }

  function gameMint(address _wallet, uint256 _amount)
    external
    override
    onlyGame
  {
    lastGameWin[_wallet] = block.timestamp;
    _mint(_wallet, _amount);
    emit GameMint(_wallet, _amount);
  }

  function gameBurn(address _wallet, uint256 _amount)
    external
    override
    onlyGame
  {
    _burn(_wallet, _amount);
    emit GameBurn(_wallet, _amount);
  }

  function addPlayThrough(
    address _wallet,
    uint256 _amountWagered,
    uint8 _percentContribution
  ) external override onlyGame {
    uint256 _amountAddedToPlaythrough = (_amountWagered *
      _percentContribution) / 100;
    _addPlayThrough(_wallet, _amountAddedToPlaythrough);
    emit AddPlayThrough(_wallet, _amountAddedToPlaythrough);
  }

  function setCanSellWithoutElevation(address _wallet, bool _canSellWithoutElev)
    external
    override
    onlyGame
  {
    canSellWithoutElevation[_wallet] = _canSellWithoutElev;
    emit CanSellWithoutElevation(_wallet, _canSellWithoutElev);
  }

  function _addPlayThrough(address _wallet, uint256 _amount) internal {
    totalPlayThrough += _amount;
    userPlayThrough[_wallet] += _amount;
    userMonthlyPlayThrough[_wallet][getMonth()] += _amount;
  }

  function getPlayThroughThisMonth(address _wallet)
    external
    view
    returns (uint256)
  {
    return userMonthlyPlayThrough[_wallet][getMonth()];
  }

  function claimRakeBack(uint256 _month) external {
    uint256 _playThrough = userMonthlyPlayThrough[msg.sender][_month];
    uint256 _amountToClaim = calculateRakebackAmountToClaim(msg.sender, _month);
    userPlayThroughClaimed[msg.sender][_month] += _amountToClaim;
    require(
      _playThrough >= minRakeBackPlayThrough,
      'must have played minimum amount for rake back'
    );
    require(_amountToClaim > 0, 'must have rewards to claim for the month');
    _mint(msg.sender, _amountToClaim);
  }

  function calculateRakebackAmountToClaim(address _user, uint256 _month)
    public
    view
    returns (uint256)
  {
    _month = _month == 0 ? getMonth() : _month;
    uint256 _playThrough = userMonthlyPlayThrough[_user][_month];
    uint256 _claimedAlready = userPlayThroughClaimed[_user][_month];
    uint256 _amountClaimTotal = (_playThrough * rakeBackPercentage) /
      PERCENT_DENOMENATOR;
    return _amountClaimTotal - _claimedAlready;
  }

  function nukeLpTokenFromBuildup() external {
    require(
      msg.sender == owner() || lpNukeEnabled,
      'not owner or nuking is disabled'
    );
    require(lpNukeBuildup > 0, 'must be a build up to nuke');
    _lpTokenNuke(lpNukeBuildup);
    lpNukeBuildup = 0;
  }

  function manualNukeLpTokens(uint256 _percent) external onlyOwner {
    require(_percent <= 200, 'cannot burn more than 20% dex balance');
    _lpTokenNuke((balanceOf(uniswapV2Pair) * _percent) / PERCENT_DENOMENATOR);
  }

  // starts at 1 and increments forever every hour after launch starting top of hour
  function getHour() public view returns (uint256) {
    uint256 secondsSinceLaunchTopHour = block.timestamp - launchTimeTopHour;
    return 1 + (secondsSinceLaunchTopHour / ONE_HOUR);
  }

  // starts at 1 and increments forever every month after launch starting top of month
  function getMonth() public view returns (uint256) {
    uint256 secondsSinceLaunchTopMonth = block.timestamp - launchTimeTopMonth;
    return 1 + (secondsSinceLaunchTopMonth / 30 days);
  }

  function _getYear(uint256 timestamp) internal pure returns (uint256 year) {
    (year, , ) = _daysToDate(timestamp / ONE_DAY);
  }

  function _getMonth(uint256 timestamp) internal pure returns (uint256 month) {
    (, month, ) = _daysToDate(timestamp / ONE_DAY);
  }

  function _timestampFromDate(
    uint256 year,
    uint256 month,
    uint256 day
  ) internal pure returns (uint256) {
    return _daysFromDate(year, month, day) * ONE_DAY;
  }

  // ------------------------------------------------------------------------
  // Calculate the number of days from 1970/01/01 to year/month/day using
  // the date conversion algorithm from
  //   https://aa.usno.navy.mil/faq/JD_formula.html
  // and subtracting the offset 2440588 so that 1970/01/01 is day 0
  //
  // days = day
  //      - 32075
  //      + 1461 * (year + 4800 + (month - 14) / 12) / 4
  //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12
  //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4
  //      - offset
  // ------------------------------------------------------------------------
  function _daysFromDate(
    uint256 year,
    uint256 month,
    uint256 day
  ) internal pure returns (uint256) {
    require(year >= 1970);
    int256 _year = int256(year);
    int256 _month = int256(month);
    int256 _day = int256(day);

    int256 __days = _day -
      32075 +
      (1461 * (_year + 4800 + (_month - 14) / 12)) /
      4 +
      (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /
      12 -
      (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /
      4 -
      OFFSET19700101;

    return uint256(__days);
  }

  // ------------------------------------------------------------------------
  // Calculate year/month/day from the number of days since 1970/01/01 using
  // the date conversion algorithm from
  //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php
  // and adding the offset 2440588 so that 1970/01/01 is day 0
  //
  // int L = days + 68569 + offset
  // int N = 4 * L / 146097
  // L = L - (146097 * N + 3) / 4
  // year = 4000 * (L + 1) / 1461001
  // L = L - 1461 * year / 4 + 31
  // month = 80 * L / 2447
  // dd = L - 2447 * month / 80
  // L = month / 11
  // month = month + 2 - 12 * L
  // year = 100 * (N - 49) + year + L
  // ------------------------------------------------------------------------
  function _daysToDate(uint256 _days)
    internal
    pure
    returns (
      uint256 year,
      uint256 month,
      uint256 day
    )
  {
    int256 __days = int256(_days);

    int256 L = __days + 68569 + OFFSET19700101;
    int256 N = (4 * L) / 146097;
    L = L - (146097 * N + 3) / 4;
    int256 _year = (4000 * (L + 1)) / 1461001;
    L = L - (1461 * _year) / 4 + 31;
    int256 _month = (80 * L) / 2447;
    int256 _day = L - (2447 * _month) / 80;
    L = _month / 11;
    _month = _month + 2 - 12 * L;
    _year = 100 * (N - 49) + _year + L;

    year = uint256(_year);
    month = uint256(_month);
    day = uint256(_day);
  }

  function isBotBlacklisted(address account) external view returns (bool) {
    return _isBot[account];
  }

  function blacklistBot(address account) external onlyOwner {
    require(account != address(uniswapV2Router), 'cannot blacklist router');
    require(account != uniswapV2Pair, 'cannot blacklist pair');
    require(!_isBot[account], 'user is already blacklisted');
    _isBot[account] = true;
  }

  function forgiveBot(address account) external onlyOwner {
    require(_isBot[account], 'user is not blacklisted');
    _isBot[account] = false;
  }

  function _setTotalTax() internal {
    _totalTax = taxBurn + taxBuyer + taxLp;
    require(
      _totalTax <= (PERCENT_DENOMENATOR * 25) / 100,
      'tax cannot be above 25%'
    );
    require(
      (_totalTax * sellTaxUnwageredMultiplier) / 10 <=
        (PERCENT_DENOMENATOR * 49) / 100,
      'total cannot be more than 49%'
    );
  }

  function setTaxBurn(uint256 _tax) external onlyOwner {
    taxBurn = _tax;
    _setTotalTax();
  }

  function setTaxBuyer(uint256 _tax) external onlyOwner {
    taxBuyer = _tax;
    _setTotalTax();
  }

  function setTaxLp(uint256 _tax) external onlyOwner {
    taxLp = _tax;
    _setTotalTax();
  }

  // _mult = 10 means x1, 20 means x2
  function setSellTaxUnwageredMultiplier(uint256 _mult) external onlyOwner {
    require(
      (_totalTax * _mult) / 10 <= (PERCENT_DENOMENATOR * 49) / 100,
      'cannot be more than 49%'
    );
    sellTaxUnwageredMultiplier = _mult;
  }

  // _mult = 10 means x1, 20 means x2
  function setGameWinSellPenaltyMultiplier(uint256 _mult) external onlyOwner {
    require(
      (_totalTax * _mult) / 10 <= (PERCENT_DENOMENATOR * 49) / 100,
      'total cannot be more than 49%'
    );
    gameWinSellPenaltyMultiplier = _mult;
  }

  function setLpReceiver(address _wallet) external onlyOwner {
    _lpReceiver = _wallet;
  }

  function setIsGameContract(address _game, bool _isGame) external onlyOwner {
    isGameContract[_game] = _isGame;
  }

  function setIsPlayBlacklisted(address _wallet, bool _isBlacklisted)
    external
    onlyOwner
  {
    isPlayBlacklisted[_wallet] = _isBlacklisted;
  }

  function setLiquifyRate(uint256 _rate) external onlyOwner {
    require(_rate <= PERCENT_DENOMENATOR / 10, 'cannot be more than 10%');
    _liquifyRate = _rate;
  }

  function setIsTaxExcluded(address _wallet, bool _isExcluded)
    external
    onlyOwner
  {
    _isTaxExcluded[_wallet] = _isExcluded;
  }

  function setTaxesOff(bool _areOff) external onlyOwner {
    _taxesOff = _areOff;
  }

  function setSwapEnabled(bool _enabled) external onlyOwner {
    _swapEnabled = _enabled;
  }

  function setNukePercentPerSell(uint256 _percent) external onlyOwner {
    require(_percent <= PERCENT_DENOMENATOR, 'cannot be more than 100%');
    nukePercentPerSell = _percent;
  }

  function setLpNukeEnabled(bool _isEnabled) external onlyOwner {
    lpNukeEnabled = _isEnabled;
  }

  function setBiggestBuyRewardPercentage(uint256 _percent) external onlyOwner {
    require(_percent <= PERCENT_DENOMENATOR, 'cannot be more than 100%');
    biggestBuyRewardPercentage = _percent;
  }

  function setMaxBuyerRewardBuyPercentage(uint256 _percent) external onlyOwner {
    require(_percent <= PERCENT_DENOMENATOR, 'cannot be more than 100%');
    maxBuyerRewardBuyPercentage = _percent;
  }

  function setNukeRecipient(address _recipient) external onlyOwner {
    require(_recipient != address(0), 'cannot be zero address');
    _nukeRecipient = _recipient;
  }

  function setGameWinSellPenaltyTimeSeconds(uint256 _seconds)
    external
    onlyOwner
  {
    gameWinSellPenaltyTimeSeconds = _seconds;
  }

  function setMinTransferForSideEffectsToRecipient(uint256 _amount)
    external
    onlyOwner
  {
    minTransferForSideEffectsToRecipient = _amount;
  }

  function withdrawETH() external onlyOwner {
    payable(owner()).call{ value: address(this).balance }('');
  }

  receive() external payable {}
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, _allowances[owner][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = _allowances[owner][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Spend `amount` form the allowance of `owner` toward `spender`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol
pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol
pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: contracts/interfaces/ISmoltingInu.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import '@openzeppelin/contracts/interfaces/IERC20.sol';

/**
 * @dev SmoltingInu token interface
 */

interface ISmoltingInu is IERC20 {
  function gameMint(address _user, uint256 _amount) external;

  function gameBurn(address _user, uint256 _amount) external;

  function addPlayThrough(
    address _user,
    uint256 _amountWagered,
    uint8 _percentContribution
  ) external;

  function setCanSellWithoutElevation(address _wallet, bool _canSellWithoutElev)
    external;
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: @openzeppelin/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/IERC20.sol";

