// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract TokenExchange {
    address public tokenAddress;
    uint256 public _exchangeRate1 = 5000 * 1e18;
    uint256 public _exchangeRate2 = 10000 * 1e18;
    uint256 public _exchangeRate3 = 25000 * 1e18;
    uint256 public _exchangeRate4 = 50000 * 1e18;
    uint256 public _pricePackage1 = 32 * 1e15;
    uint256 public _pricePackage2 = 64 * 1e15;
    uint256 public _pricePackage3 = 160 * 1e15;
    uint256 public _pricePackage4 = 320 * 1e15;
    address private _owner;

    event TokensPurchased(address indexed buyer, uint256 amount, string indexed numPackage);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(address _tokenAddress) {
        tokenAddress = _tokenAddress;
        _owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == _owner, "Only the contract owner can call this function");
        _;
    }

    function owner() public view returns (address) {
        return _owner;
    }

    function purchaseTokensPackage1() external payable {
        require(msg.value == _pricePackage1, "Exactly pricePackage1 BNB must be sent");

        IERC20 token = IERC20(tokenAddress);
        uint256 amount = _exchangeRate1; // Convert 1 BNB to token amount (considering token's decimals)

        require(token.transfer(msg.sender, amount), "Token transfer failed");

        emit TokensPurchased(msg.sender, amount,"P1");
    }

    function purchaseTokensPackage2() external payable {
        require(msg.value == _pricePackage2, "Exactly pricePackage2 BNB must be sent");

        IERC20 token = IERC20(tokenAddress);
        uint256 amount = _exchangeRate2; // Convert 1 BNB to token amount (considering token's decimals)

        require(token.transfer(msg.sender, amount), "Token transfer failed");

        emit TokensPurchased(msg.sender, amount,"P2");
    }

    function purchaseTokensPackage3() external payable {
        require(msg.value == _pricePackage3, "Exactly pricePackage3 BNB must be sent");

        IERC20 token = IERC20(tokenAddress);
        uint256 amount = _exchangeRate3; // Convert 1 BNB to token amount (considering token's decimals)

        require(token.transfer(msg.sender, amount), "Token transfer failed");

        emit TokensPurchased(msg.sender, amount,"P3");
    }

    function purchaseTokensPackage4() external payable {
        require(msg.value == _pricePackage4, "Exactly pricePackage4 BNB must be sent");

        IERC20 token = IERC20(tokenAddress);
        uint256 amount = _exchangeRate4; // Convert 1 BNB to token amount (considering token's decimals)

        require(token.transfer(msg.sender, amount), "Token transfer failed");

        emit TokensPurchased(msg.sender, amount,"P4");
    }

    function withdrawBNB() external onlyOwner {
        require(address(this).balance > 0, "Contract balance is zero");

        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(success, "BNB withdrawal failed");
    }

    function withdrawToken() external onlyOwner {
        IERC20 token = IERC20(tokenAddress);
        uint256 balancesTok = token.balanceOf(address(this));
        require(balancesTok > 0, "Contract balance is zero");

        require(token.transfer(msg.sender, balancesTok), "Token transfer failed");

    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid new owner");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function setPricePackage1(uint256 pricePackage1) external onlyOwner {
        _pricePackage1 = pricePackage1;
    }

    function setPricePackage2(uint256 pricePackage2) external onlyOwner {
        _pricePackage2 = pricePackage2;
    }

    function setPricePackage3(uint256 pricePackage3) external onlyOwner {
        _pricePackage3 = pricePackage3;
    }

    function setPricePackage4(uint256 pricePackage4) external onlyOwner {
        _pricePackage4 = pricePackage4;
    }

    function getPricePackage1() public view returns (uint256) {
        return _pricePackage1;
    }

    function getPricePackage2() public view returns (uint256) {
        return _pricePackage2;
    }

    function getPricePackage3() public view returns (uint256) {
        return _pricePackage3;
    }

    function getPricePackage4() public view returns (uint256) {
        return _pricePackage4;
    }

    function setExchangeRate1(uint256 exchangeRate1) external onlyOwner {
        _exchangeRate1 = exchangeRate1;
    }

    function setExchangeRate2(uint256 exchangeRate2) external onlyOwner {
        _exchangeRate2 = exchangeRate2;
    }

    function setExchangeRate3(uint256 exchangeRate3) external onlyOwner {
        _exchangeRate3 = exchangeRate3;
    }

    function setExchangeRate4(uint256 exchangeRate4) external onlyOwner {
        _exchangeRate4 = exchangeRate4;
    }

    function getExchangeRate1() public view returns (uint256) {
        return _exchangeRate1;
    }

    function getExchangeRate2() public view returns (uint256) {
        return _exchangeRate2;
    }

    function getExchangeRate3() public view returns (uint256) {
        return _exchangeRate3;
    }

    function getExchangeRate4() public view returns (uint256) {
        return _exchangeRate4;
    }
}