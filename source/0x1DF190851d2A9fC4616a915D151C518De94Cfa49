
// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/interfaces/IPancakePair.sol
pragma solidity >=0.5.0;

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// File: contracts/interfaces/IPancakeRouter01.sol
pragma solidity >=0.6.6;

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// File: contracts/interfaces/IWETH.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.17;

interface IWETH {
    function deposit() external payable;
    function withdraw(uint wad) external;
    function approve(address guy, uint wad) external returns (bool);
    function transfer(address dst, uint wad) external returns (bool);
    function transferFrom(address src, address dst, uint wad) external returns (bool);
    function balanceOf(address guy) external view returns (uint);
}

// File: contracts/SafoBillsFarm.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.17;
// @title Safo-Bills LP farm Smart Contract
// 
//   /$$$$$$   /$$$$$$  /$$$$$$$$ /$$$$$$ 
// /$$__  $$ /$$__  $$| $$_____//$$__  $$
// | $$  \__/| $$  \ $$| $$     | $$  \ $$
// |  $$$$$$ | $$$$$$$$| $$$$$  | $$  | $$
//  \____  $$| $$__  $$| $$__/  | $$  | $$
//  /$$  \ $$| $$  | $$| $$     | $$  | $$
// |  $$$$$$/| $$  | $$| $$     |  $$$$$$/
//  \______/ |__/  |__/|__/      \______/ 

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./interfaces/IPancakePair.sol";
import "./interfaces/IPancakeRouter01.sol";
import "./interfaces/IWETH.sol";

/* ========== CUSTOM ERRORS ========== */

error InvalidAmount();
error InvalidAddress();
error TokensLocked();

contract SafoBillsFarm is ReentrancyGuard {
    /* ========== STATE VARIABLES ========== */

    address APE_ROUTER ;
    address SAFO_WBNB_LP ;
    address SAFO ;
    address WETH ;
    uint public acceptableSlippage = 500;
    uint public safoPerBnb;
    bool public safoBillBonusActive = false;
    uint public safoBillBonus = 1000; // 10% bonus
    uint public safoForBillsSupply;
    uint public beansFromSoldSafo;
    struct UserInfo {
        uint safoBalance;
        uint bnbBalance;
        uint safoBills;
    }
    mapping(address => UserInfo) public addressToUserInfo;

    address payable public OWNER;
    address payable public teamWallet;
    IERC20 public immutable stakedToken;
    IERC20 public immutable rewardToken;
    uint public earlyUnstakeFee = 2000; // 20% fee
    uint public poolDuration=5184000;
    uint public poolStartTime;
    uint public poolEndTime;
    uint public updatedAt;
    uint public rewardRate;
    uint public rewardPerTokenStored;
    uint public totalBeansOwed; 
    uint public totalSafoOwed; 
    uint public totalLPTokensOwed;
    uint private _totalStaked;
    mapping(address => uint) public userStakedBalance;
    mapping(address => uint) public userPaidRewards;
    mapping(address => uint) userRewardPerTokenPaid;
    mapping(address => uint) userRewards;
    mapping(address => bool) userStakeAgain;
    mapping(address => bool) userStakeIsRefferred;
    mapping(address => address) userRefferred;
    mapping(address => uint) refferralRewardCount;
    uint public refferralLimit = 5;
    uint public refferralPercentage = 500;

    /* ========== MODIFIERS ========== */

    modifier updateReward(address _account) {
        rewardPerTokenStored = rewardPerToken();
        updatedAt = lastTimeRewardApplicable();
        if (_account != address(0)) {
            userRewards[_account] = earned(_account);
            userRewardPerTokenPaid[_account] = rewardPerTokenStored;
        }
        _;
    }

    modifier onlyOwner() {
        if (msg.sender != OWNER) revert InvalidAddress();
        _;
    }

    /* ========== EVENTS ========== */

    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount);
    event RewardPaid(address indexed user, uint256 amount);
    event SafoBillPurchased(
        address indexed user,
        uint safoAmount,
        uint wbnbAmount,
        uint lpAmount
    );
    event SafoBillSold(address indexed user, uint safoAmount, uint wbnbAmount);

    receive() external payable {}

    /* ========== CONSTRUCTOR ========== */

    constructor() {
        OWNER = payable(msg.sender);
        teamWallet = payable(0x84af88d6EDeF7b5aA630564cDeE9EfaF1937D55D);
        stakedToken = IERC20(0x0F69e23428098620a76763aCAd4A99c04094942a);
        rewardToken = IERC20(0xd57Cfb45347573f4F2471fA1572Eb79d0Ba29Fd0);
        APE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
        SAFO = 0xd57Cfb45347573f4F2471fA1572Eb79d0Ba29Fd0;
        WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
        SAFO_WBNB_LP = 0x0F69e23428098620a76763aCAd4A99c04094942a;
    }

    /* ========== SAFO BILL FUNCTIONS ========== */

    function purchaseSafoBill(
        address _refferralUserAddress
    ) external payable nonReentrant {
        if (userStakeAgain[msg.sender] == false) {
            userStakeAgain[msg.sender] = true;
            if (
                _refferralUserAddress != address(0) &&
                _refferralUserAddress != msg.sender
            ) {
                userRefferred[msg.sender] = _refferralUserAddress;
                userStakeIsRefferred[msg.sender] = true;
            }
        }

        uint totalBeans = msg.value;
        if (totalBeans <= 0) revert InvalidAmount();

        uint beanHalfOfBill = totalBeans / 2;
        uint beanHalfToSafo = totalBeans - beanHalfOfBill;
        uint safoHalfOfBill = _beanToSafo(beanHalfToSafo);
        beansFromSoldSafo += beanHalfToSafo;

        uint safoMin = _calSlippage(safoHalfOfBill);
        uint beanMin = _calSlippage(beanHalfOfBill);

        IERC20(WETH).approve(APE_ROUTER, beanHalfOfBill);
        IERC20(SAFO).approve(APE_ROUTER, safoHalfOfBill);

        (uint _amountA, uint _amountB, uint _liquidity) = IPancakeRouter01(
            APE_ROUTER
        ).addLiquidityETH{value: beanHalfOfBill}(
            SAFO,
            safoHalfOfBill,
            safoMin,
            beanMin,
            address(this),
            block.timestamp + 500
        );

        safoForBillsSupply -= _amountA;

        UserInfo memory userInfo = addressToUserInfo[msg.sender];
        userInfo.safoBalance += safoHalfOfBill;
        userInfo.bnbBalance += beanHalfOfBill;
        userInfo.safoBills += _liquidity;

        totalSafoOwed += safoHalfOfBill;
        totalBeansOwed += beanHalfOfBill;
        totalLPTokensOwed += _liquidity;


        addressToUserInfo[msg.sender] = userInfo;
        emit SafoBillPurchased(msg.sender, _amountA, _amountB, _liquidity);
        _stake(_liquidity);
    }

    function redeemSafoBill() external nonReentrant {
        UserInfo storage userInfo = addressToUserInfo[msg.sender];
        uint bnbOwed = userInfo.bnbBalance;
        uint safoOwed = userInfo.safoBalance;
        uint safoBills = userInfo.safoBills;
        if (safoBills <= 0) revert InvalidAmount();
        userInfo.bnbBalance = 0;
        userInfo.safoBalance = 0;
        userInfo.safoBills = 0;
        addressToUserInfo[msg.sender] = userInfo;

        _unstake(safoBills);

        uint safoMin = _calSlippage(safoOwed);
        uint beanMin = _calSlippage(bnbOwed);

        IERC20(SAFO_WBNB_LP).approve(APE_ROUTER, safoBills);

        (uint _amountA, uint _amountB) = IPancakeRouter01(APE_ROUTER)
            .removeLiquidity(
                SAFO,
                WETH,
                safoBills,
                safoMin,
                beanMin,
                address(this),
                block.timestamp + 500
            );

        totalBeansOwed -= bnbOwed;
        totalSafoOwed -= safoOwed;
        totalLPTokensOwed -= safoBills;

        uint balance = address(this).balance;
        IWETH(WETH).withdraw(_amountB);
        assert(address(this).balance == balance + _amountB);

        payable(msg.sender).transfer(bnbOwed);
        IERC20(SAFO).transfer(msg.sender, safoOwed);
        safoForBillsSupply += _amountA;

        emit SafoBillSold(msg.sender, _amountA, _amountB);
    }

    function _calSlippage(uint _amount) internal view returns (uint) {
        return (_amount * acceptableSlippage) / 10000;
    }

    function _beanToSafo(uint _amount) private returns (uint) {
        uint safoJuice;
        uint safoJuiceBonus;

        // Confirm token0 & token1 in LP contract
        (uint safoReserves, uint bnbReserves, ) = IPancakePair(SAFO_WBNB_LP)
            .getReserves();
        safoPerBnb = (safoReserves * 10 ** 18) / bnbReserves;

        if (safoBillBonusActive) {
            safoJuiceBonus = (safoPerBnb * safoBillBonus) / 10000;
            uint safoPerBnbDiscounted = safoPerBnb + safoJuiceBonus;
            safoJuice = (_amount * safoPerBnbDiscounted) / 10 ** 18;
        } else safoJuice = (_amount * safoPerBnb) / 10 ** 18;

        if (safoJuice > safoForBillsSupply) revert InvalidAmount();
        safoForBillsSupply -= safoJuice;

        return safoJuice;
    }

    function fundSafoBills(uint _amount) external {
        if (_amount <= 0) revert InvalidAmount();
        safoForBillsSupply += _amount;
        IERC20(SAFO).transferFrom(msg.sender, address(this), _amount);
    }

    function defundSafoBills(uint _amount) external onlyOwner {
        if (_amount <= 0) revert InvalidAmount();
        require(_amount <= safoForBillsSupply, "Not Enough Tokens Supply");
        safoForBillsSupply -= _amount;
        IERC20(SAFO).transfer(msg.sender, _amount);
    }

    /* ========== MUTATIVE FUNCTIONS ========== */

    function _stake(uint _amount) internal updateReward(msg.sender) {
        if (_amount <= 0) revert InvalidAmount();
        userStakedBalance[msg.sender] += _amount;
        _totalStaked += _amount;
        emit Staked(msg.sender, _amount);
    }

    function _unstake(uint _amount) internal updateReward(msg.sender) {
        if (block.timestamp < poolEndTime) revert TokensLocked();
        if (_amount <= 0) revert InvalidAmount();
        if (_amount > userStakedBalance[msg.sender]) revert InvalidAmount();
        userStakedBalance[msg.sender] -= _amount;
        _totalStaked -= _amount;
        emit Unstaked(msg.sender, _amount);
    }

    function emergencyUnstake() external nonReentrant updateReward(msg.sender) {
        UserInfo storage userInfo = addressToUserInfo[msg.sender];
        uint bnbOwed = userInfo.bnbBalance;
        uint safoOwed = userInfo.safoBalance;
        uint safoBills = userInfo.safoBills;
        if (safoBills <= 0) revert InvalidAmount();
        userInfo.bnbBalance = 0;
        userInfo.safoBalance = 0;
        userInfo.safoBills = 0;
        addressToUserInfo[msg.sender] = userInfo;

        uint amount = userStakedBalance[msg.sender];
        if (amount <= 0) revert InvalidAmount();
        userStakedBalance[msg.sender] = 0;
        _totalStaked -= amount;

        uint safoMin = _calSlippage(safoOwed);
        uint beanMin = _calSlippage(bnbOwed);

        IERC20(SAFO_WBNB_LP).approve(APE_ROUTER, amount);
        (uint _amountA, uint _amountB) = IPancakeRouter01(APE_ROUTER)
            .removeLiquidity(
                SAFO,
                WETH,
                amount,
                safoMin,
                beanMin,
                address(this),
                block.timestamp + 500
            );
        
        totalBeansOwed -= bnbOwed;
        totalSafoOwed -= safoOwed;
        totalLPTokensOwed -= safoBills;

        uint balance = address(this).balance;
        IWETH(WETH).withdraw(_amountB);
        assert(address(this).balance == balance + _amountB);

        uint bnbFee=(bnbOwed * earlyUnstakeFee / 10000);
        uint bnbOwedAfterFee = bnbOwed -bnbFee ;
        uint safoFee=(safoOwed * earlyUnstakeFee / 10000);
        uint safoOwedAfterFee = bnbOwed - safoFee;
        
        payable(msg.sender).transfer(bnbOwedAfterFee);
        payable(teamWallet).transfer(bnbFee);
        IERC20(SAFO).transfer(msg.sender, safoOwedAfterFee);
        IERC20(SAFO).transfer(teamWallet, safoFee);

        emit Unstaked(msg.sender, amount);
        emit SafoBillSold(msg.sender, _amountA, _amountB);
    }

    function claimRewards() public updateReward(msg.sender) {
        uint rewards = userRewards[msg.sender];
        require(rewards > 0, "No Claim Rewards Yet!");

        userRewards[msg.sender] = 0;
        userPaidRewards[msg.sender] += rewards;
        safoForBillsSupply -= rewards;
        if (userStakeIsRefferred[msg.sender] == true) {
            if (refferralRewardCount[msg.sender] < refferralLimit) {
                uint refferalReward = (rewards * refferralPercentage) / 10000;
                refferralRewardCount[msg.sender] =
                    refferralRewardCount[msg.sender] +
                    1;
                rewardToken.transfer(userRefferred[msg.sender], refferalReward);
                rewardToken.transfer(msg.sender, rewards - refferalReward);
                emit RewardPaid(userRefferred[msg.sender], refferalReward);
                emit RewardPaid(msg.sender, rewards - refferalReward);
            } else {
                rewardToken.transfer(msg.sender, rewards);
                emit RewardPaid(msg.sender, rewards);
            }
        } else {
            rewardToken.transfer(msg.sender, rewards);
            emit RewardPaid(msg.sender, rewards);
        }
    }

    /* ========== OWNER RESTRICTED FUNCTIONS ========== */

    function setAcceptableSlippage(uint _amount) external onlyOwner {
        if (_amount > 2000) revert InvalidAmount(); // Can't set above 20%
        acceptableSlippage = _amount;
    }

    function setSafoBillBonus(uint _amount) external onlyOwner {
        if (_amount > 2000) revert InvalidAmount(); // Can't set above 20%
        safoBillBonus = _amount;
    }

    function setSafoBillBonusActive(bool _status) external onlyOwner {
        safoBillBonusActive = _status;
    }

    function withdrawBeansFromSoldSafo() external onlyOwner {
        uint beans = beansFromSoldSafo;
        beansFromSoldSafo = 0;
        (bool success, ) = msg.sender.call{value: beans}("");
        require(success, "Transfer failed.");
    }

    function setPoolDuration(uint _duration) external onlyOwner {
        require(poolEndTime < block.timestamp, "Pool still live");
        poolDuration = _duration;
    }

    function setPoolRewards(
        uint _amount
    ) external onlyOwner updateReward(address(0)) {
        if (_amount <= 0) revert InvalidAmount();
        if (block.timestamp >= poolEndTime) {
            rewardRate = _amount / poolDuration;
        } else {
            uint remainingRewards = (poolEndTime - block.timestamp) *
                rewardRate;
            rewardRate = (_amount + remainingRewards) / poolDuration;
        }
        if (rewardRate <= 0) revert InvalidAmount();
        poolStartTime = block.timestamp;
        poolEndTime = block.timestamp + poolDuration;
        updatedAt = block.timestamp;
    }

    function topUpPoolRewards(
        uint _amount
    ) external onlyOwner updateReward(address(0)) {
        uint remainingRewards = (poolEndTime - block.timestamp) * rewardRate;
        rewardRate = (_amount + remainingRewards) / poolDuration;
        require(rewardRate > 0, "reward rate = 0");
        updatedAt = block.timestamp;
    }

    function updateTeamWallet(address payable _teamWallet) external onlyOwner {
        teamWallet = _teamWallet;
    }

    function transferOwnership(address _newOwner) external onlyOwner {
        OWNER = payable(_newOwner);
    }

    function setEarlyUnstakeFee(uint _earlyUnstakeFee) external onlyOwner {
        require(_earlyUnstakeFee <= 2500, "the amount of fee is too damn high");
        earlyUnstakeFee = _earlyUnstakeFee;
    }

    function setRefferralPercentage(
        uint _newRefferralPercentage
    ) external onlyOwner {
        require(_newRefferralPercentage >= 0, "Invalid Refferral Percentage");
        refferralPercentage = _newRefferralPercentage;
    }

    function setRefferralLimit(uint _newRefferralLimit) external onlyOwner {
        require(_newRefferralLimit >= 0, "Invalid Refferral Limit");
        refferralLimit = _newRefferralLimit;
    }

    function emergencyRecoverBeans() public onlyOwner {
        uint balance = address(this).balance;
        uint recoverAmount = balance - beansFromSoldSafo;
        (bool success, ) = msg.sender.call{value: recoverAmount}("");
        require(success, "Transfer failed.");
    }

    function emergencyRecoverBEP20(
        IERC20 _token,
        uint _amount
    ) public onlyOwner {
        if (_token == stakedToken) {
            uint recoverAmount = _token.balanceOf(address(this)) - _totalStaked;
            _token.transfer(msg.sender, recoverAmount);
        } else if (_token == rewardToken) {
            uint availRecoverAmount = safoForBillsSupply;
            require(_amount <= availRecoverAmount, "amount too high");
            _token.transfer(msg.sender, _amount);
        } else {
            _token.transfer(msg.sender, _amount);
        }
    }

    /* ========== VIEW & GETTER FUNCTIONS ========== */

    function viewUserInfo(address _user) public view returns (UserInfo memory) {
        return addressToUserInfo[_user];
    }

    function earned(address _account) public view returns (uint) {
        return
            (userStakedBalance[_account] *
                (rewardPerToken() - userRewardPerTokenPaid[_account])) /
            1e18 +
            userRewards[_account];
    }

    function lastTimeRewardApplicable() internal view returns (uint) {
        return _min(block.timestamp, poolEndTime);
    }

    function rewardPerToken() internal view returns (uint) {
        if (_totalStaked == 0) {
            return rewardPerTokenStored;
        }

        return
            rewardPerTokenStored +
            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /
            _totalStaked;
    }

    function _min(uint x, uint y) internal pure returns (uint) {
        return x <= y ? x : y;
    }

    function safoForStakingRewards() public view returns (uint) {
        return safoForBillsSupply;
    }

    function balanceOf(address _account) external view returns (uint) {
        return userStakedBalance[_account];
    }

    function totalStaked() external view returns (uint) {
        return _totalStaked;
    }
}
