
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC721Receiver.sol";

/**
 * @dev Implementation of the {IERC721Receiver} interface.
 *
 * Accepts all token transfers.
 * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.
 */
contract ERC721Holder is IERC721Receiver {
    /**
     * @dev See {IERC721Receiver-onERC721Received}.
     *
     * Always returns `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC721Received.selector;
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: /contracts/HKT/HKT_NFT_Deposit.sol
// SPDX-License-Identifier: MIT
pragma solidity ^ 0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";

interface HKT721 {
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    function tokenByIndex(uint256 index) external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256 balance);

    function cardIdMap(uint tokenId) external view returns (uint256 cardId);

    function safeTransferFrom(address from, address to, uint256 tokenId) external;
}

interface Box {
    function price() external view returns (uint);

    function getPrice() external view returns (uint);

    function U() external view returns (address);

    function NFT() external view returns (address);

    function HKT() external view returns (address);
}

interface Mining {
    function checkUserValue(address addr_) external view returns (uint);
}

contract HKT_NFT_Deposit is Ownable, ERC721Holder {
    address public NFT;
    address public HKT;
    address public U;
    Box public box;
    uint public n = 5;
    uint public catFood = 1000;
    uint[] private walletLimit = [5e16, 1e17, 3e17];

    struct StakeInfo {
        bool staking;
        uint claimTime;
        uint endTime;
        uint rate;
        uint cardId;
        uint tokenId;
        uint toClaim;
    }

    struct CardInfo {
        uint rate;
        uint cycle;
        uint cost;
    }

    struct UserInfo {
        uint claimed;
        uint toClaim;
        uint[] cardList;
    }

    mapping(address => UserInfo)public userInfo;
    mapping(address => mapping(uint => StakeInfo))public stakeInfo;
    // mapping(uint => StakeInfo)public stakeInfo;
    mapping(uint => CardInfo)public cardInfo;

    event Deposite(address indexed sender_, uint indexed tokenId_);
    event UnDeposite(address indexed sender_, uint indexed tokenId_);
    event CLaim(address indexed sender_, uint indexed amount_);
    event ReNew(address indexed sender_, uint indexed tokenId_);
    constructor(){
        cardInfo[20001] = CardInfo({
        rate : 1200,
        cycle : 7 days,
        cost : 1
        });
        cardInfo[20002] = CardInfo({
        rate : 2500,
        cycle : 15 days,
        cost : 2
        });
        cardInfo[20003] = CardInfo({
        rate : 12000,
        cycle : 30 days,
        cost : 5
        });
    }


    function setAddress(address box_) external onlyOwner {
        box = Box(box_);
        U = box.U();
        HKT = box.HKT();
        NFT = box.NFT();
    }

    function setN(uint n_) external onlyOwner {
        n = n_;
    }

    function setCard(uint ID_, uint rate_, uint cycle_, uint cost_) public onlyOwner {
        cardInfo[ID_] = CardInfo({
        rate : rate_,
        cycle : cycle_,
        cost : cost_
        });
    }

    function setWalletLimit(uint[] calldata com_) public onlyOwner {
        walletLimit = com_;
    }

    function coutingCard(uint cardId_, address addr_) public view returns (uint[] memory){
        uint k = HKT721(NFT).balanceOf(addr_);
        uint tokenId;
        uint cardId;
        uint out;

        if (k == 0) {

        }
        for (uint i = 0; i < k; i++) {
            tokenId = HKT721(NFT).tokenOfOwnerByIndex(addr_, i);
            cardId = HKT721(NFT).cardIdMap(tokenId);
            if (cardId == cardId_) {
                out ++;
            }
        }
        uint[] memory list = new uint[](out);
        uint cout;
        for (uint i = 0; i < k; i++) {
            tokenId = HKT721(NFT).tokenOfOwnerByIndex(addr_, i);
            cardId = HKT721(NFT).cardIdMap(tokenId);
            if (cardId == cardId_) {
                list[cout] = tokenId;
                cout ++;
            }
        }
        return list;

    }

    function deposite(uint tokenId_) external {

        if (block.timestamp > stakeInfo[msg.sender][tokenId_].endTime
        + cardInfo[stakeInfo[msg.sender][tokenId_].cardId].cycle
            && stakeInfo[msg.sender][tokenId_].staking == true)
        {
            stakeInfo[msg.sender][tokenId_].staking = false;
        }
        require(!stakeInfo[msg.sender][tokenId_].staking, 'already staked');
        uint id = HKT721(NFT).cardIdMap(tokenId_);
        uint balance = IERC20(HKT).balanceOf(msg.sender);
        require(id > 20000, 'wrong card');
//        require(balance >= walletLimit[id - 20001], 'not enough HKT');
        uint tempRate = box.price() * n * 1e18 / box.getPrice() * cardInfo[id].rate / 100 / 365 days;
        stakeInfo[msg.sender][tokenId_].rate = tempRate;
        stakeInfo[msg.sender][tokenId_].claimTime = block.timestamp;
        stakeInfo[msg.sender][tokenId_].endTime = block.timestamp + cardInfo[id].cycle;
        stakeInfo[msg.sender][tokenId_].staking = true;
        stakeInfo[msg.sender][tokenId_].cardId = id;
        stakeInfo[msg.sender][tokenId_].tokenId = tokenId_;
        userInfo[msg.sender].cardList.push(tokenId_);
        HKT721(NFT).safeTransferFrom(msg.sender, address(this), tokenId_);
        emit Deposite(msg.sender, tokenId_);
    }

    function coutingClaim(address addr_, uint tokenId_) public view returns (uint rew_){
        if (!stakeInfo[addr_][tokenId_].staking) {
            return 0;
        }
        if (stakeInfo[addr_][tokenId_].claimTime >= stakeInfo[addr_][tokenId_].endTime) {
            return 0;
        }
        rew_ = (block.timestamp - stakeInfo[addr_][tokenId_].claimTime) * stakeInfo[addr_][tokenId_].rate;
    }

    function claim(uint tokenId_) internal {
        require(stakeInfo[msg.sender][tokenId_].staking, 'no staked');
        uint rew = coutingClaim(msg.sender, tokenId_);
        require(rew > 0, 'none to claim');
        if (block.timestamp > stakeInfo[msg.sender][tokenId_].endTime + cardInfo[stakeInfo[msg.sender][tokenId_].cardId].cycle) {
            stakeInfo[msg.sender][tokenId_].staking = false;
        }
        IERC20(HKT).transfer(msg.sender, rew + userInfo[msg.sender].toClaim);
        userInfo[msg.sender].claimed += rew + userInfo[msg.sender].toClaim;
        stakeInfo[msg.sender][tokenId_].claimTime = block.timestamp;
        userInfo[msg.sender].toClaim = 0;

    }

    function coutingAll(address addr_) public view returns (uint){
        uint rew;
        for (uint i = 0; i < userInfo[addr_].cardList.length; i++) {
            rew += coutingClaim(addr_, userInfo[addr_].cardList[i]);
        }
        return rew + userInfo[addr_].toClaim;
    }

    function claimAll() public {
        require(userInfo[msg.sender].cardList.length > 0, 'no card');
        uint rew;
        uint big;
        for (uint i = 0; i < userInfo[msg.sender].cardList.length; i++) {
            rew += coutingClaim(msg.sender, userInfo[msg.sender].cardList[i]);
            stakeInfo[msg.sender][userInfo[msg.sender].cardList[i]].claimTime = block.timestamp;
            if (stakeInfo[msg.sender][userInfo[msg.sender].cardList[i]].cardId > big) {
                big = stakeInfo[msg.sender][userInfo[msg.sender].cardList[i]].cardId;
            }
        }
        uint balance = IERC20(HKT).balanceOf(msg.sender);
//        require(balance >= walletLimit[big - 20001], 'not enough HKT');
        IERC20(HKT).transfer(msg.sender, rew + userInfo[msg.sender].toClaim);
        userInfo[msg.sender].claimed += rew + userInfo[msg.sender].toClaim;
        uint rews = rew + userInfo[msg.sender].toClaim;
        userInfo[msg.sender].toClaim = 0;


        emit CLaim(msg.sender, rews);
    }

    function coutingCatFood(address addr_) public view returns (uint){
        uint k = HKT721(NFT).balanceOf(addr_);
        uint tokenId;
        uint cardId;
        uint out;
        if (k == 0) {
            return 0;
        }
        for (uint i = 0; i < k; i++) {
            tokenId = HKT721(NFT).tokenOfOwnerByIndex(addr_, i);
            cardId = HKT721(NFT).cardIdMap(tokenId);
            if (cardId == catFood) {
                out ++;
            }
        }
        return out;
    }


    function reNew(uint tokenId_) external {
        require(stakeInfo[msg.sender][tokenId_].staking, 'no staked');
        require(block.timestamp < stakeInfo[msg.sender][tokenId_].endTime + cardInfo[stakeInfo[msg.sender][tokenId_].cardId].cycle, 'overdue');
        uint temp = coutingCatFood(msg.sender);
        uint need = cardInfo[stakeInfo[msg.sender][tokenId_].cardId].cost;
        StakeInfo storage aa = stakeInfo[msg.sender][tokenId_];
        require(need <= temp, 'not enough');
        uint tokenId;
        uint cardId;
        uint k = HKT721(NFT).balanceOf(_msgSender());
        uint amount;
        for (uint i = 0; i < k; i++) {
            tokenId = HKT721(NFT).tokenOfOwnerByIndex(_msgSender(), i - amount);
            cardId = HKT721(NFT).cardIdMap(tokenId);

            if (cardId == catFood) {
                HKT721(NFT).safeTransferFrom(_msgSender(), address(this), tokenId);
                amount += 1;
                if (amount == need) {
                    break;
                }
            }
        }
        if (block.timestamp > aa.endTime && aa.claimTime < aa.endTime) {
            uint tempRew = (aa.endTime - aa.claimTime) * aa.rate;
            userInfo[msg.sender].toClaim += tempRew;
            stakeInfo[msg.sender][tokenId_].claimTime = block.timestamp;
        }
        if (aa.claimTime >= aa.endTime) {
            stakeInfo[msg.sender][tokenId_].claimTime = block.timestamp;
        }

        stakeInfo[msg.sender][tokenId_].endTime += cardInfo[stakeInfo[msg.sender][tokenId_].cardId].cycle;
        emit ReNew(msg.sender, tokenId_);

    }


    function unDeposite(uint tokenId_) external {
        StakeInfo storage aa = stakeInfo[msg.sender][tokenId_];
        require(aa.staking, 'no staked');
        if (block.timestamp < aa.endTime) {
            uint tokenId;
            uint cardId;
            uint temp = coutingCatFood(msg.sender);
            uint need = cardInfo[stakeInfo[msg.sender][tokenId_].cardId].cost;
            require(need <= temp, 'not enough');
            uint k = HKT721(NFT).balanceOf(_msgSender());
            uint amount;
            for (uint i = 0; i < k; i++) {
                tokenId = HKT721(NFT).tokenOfOwnerByIndex(_msgSender(), i - amount);
                cardId = HKT721(NFT).cardIdMap(tokenId);
                if (cardId == catFood) {
                    HKT721(NFT).safeTransferFrom(_msgSender(), address(this), tokenId);
                    amount += 1;
                    if (amount == need) {
                        break;
                    }
                }
            }
        }
        claim(tokenId_);
        stakeInfo[msg.sender][tokenId_].staking = false;
        if (aa.claimTime < aa.endTime + cardInfo[stakeInfo[msg.sender][tokenId_].cardId].cycle) {
            HKT721(NFT).safeTransferFrom(address(this), msg.sender, tokenId_);
        }

        for (uint i = 0; i < userInfo[msg.sender].cardList.length; i ++) {
            if (userInfo[msg.sender].cardList[i] == tokenId_) {
                userInfo[msg.sender].cardList[i] = userInfo[msg.sender].cardList[userInfo[msg.sender].cardList.length - 1];
                userInfo[msg.sender].cardList.pop();
            }
        }
        stakeInfo[msg.sender][tokenId_].cardId = 0;
        emit UnDeposite(msg.sender, tokenId_);
    }

    function safePull(address token_, address wallet, uint amount_) public onlyOwner {
        IERC20(token_).transfer(wallet, amount_);
    }

    function safePullCard(address wallet_, uint tokenId_) public onlyOwner {
        HKT721(NFT).safeTransferFrom(address(this), wallet_, tokenId_);
    }

    function checkUserList(address addr_) public view returns (uint[] memory){
        return userInfo[addr_].cardList;
    }


}
