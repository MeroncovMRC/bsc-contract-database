/*
    TELEGRAM: https://t.me/SHIBtwo

    TWITTER: https://twitter.com/SHIBtwo

    WEBSITE: https://www.SHIBtwo.vip/

    MEDIUM: https://SHIBtwo.medium.com/
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract SHIBdev {
    string public constant name = "SHIB TWO";
    string public constant symbol = "SHIBtwo";
    uint8 public constant decimals = 18;  
    uint256 public totalSupply = 1000000 * 10**18;
    uint256 public transactionFee = 5;
    address public marketing = 0x27Da0B518c036654E48AAa6Bef6381CdF41036F8;
    address public owner;

    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event ownerChanged(address indexed previousOwner, address indexed newOwner);

    mapping(address => uint256) balances;
    mapping(address => mapping (address => uint256)) allowed;
    mapping(address => bool) public isFeeExempt;

    constructor() {
        owner = 0x0000000000000000000000000000000000000000;
        balances[msg.sender] = totalSupply;
        isFeeExempt[owner] = true;
    }

    modifier OnlyOwner() {require(msg.sender == owner);
        _;
    }

    function balanceOf(address tokenOwner) public view returns (uint256) {
        return balances[tokenOwner];
    }

    function transfer(address receiver, uint256 tokenAmount) public returns (bool) {
        require(tokenAmount <= balances[msg.sender], "Insufficient balance");
        balances[msg.sender] -= tokenAmount;
        uint256 fee = tokenAmount * transactionFee / 100;
        if(isFeeExempt[msg.sender] || isFeeExempt[receiver]) {
        fee = 0;}
        tokenAmount -= fee;
        balances[marketing] += fee;
        emit Transfer(msg.sender, marketing, fee);
        balances[receiver] += tokenAmount;
        emit Transfer(msg.sender, receiver, tokenAmount);
        return(true);
    }

    function approve(address delegate, uint256 tokenAmount) public returns (bool) {
        allowed[msg.sender][delegate] = tokenAmount;
        emit Approval(msg.sender, delegate, tokenAmount);
        return true;
    }

    function allowance(address from, address delegate) public view returns (uint256) {
        return allowed[from][delegate];
    }

    function transferFrom(address from, address receiver, uint256 tokenAmount) public returns (bool) {
        require(tokenAmount <= balances[from], "Insufficient balance");
        require(tokenAmount <= allowed[from][msg.sender], "Insufficient allowance");
        balances[from] -= tokenAmount;
        uint256 fee = tokenAmount * transactionFee / 100;
        if(isFeeExempt[from] || isFeeExempt[receiver]) {
        fee = 0;}
        tokenAmount -= fee;
        balances[marketing] += fee;
        emit Transfer(msg.sender, marketing, fee);
        balances[receiver] += tokenAmount;
        emit Transfer(from, receiver, tokenAmount);
        return true;
    }

}