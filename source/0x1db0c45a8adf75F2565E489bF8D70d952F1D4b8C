// Dependency file: @openzeppelin/contracts/utils/Context.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

// pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// Dependency file: @openzeppelin/contracts/access/Ownable.sol

// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

// pragma solidity ^0.8.0;

// import "@openzeppelin/contracts/utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// Dependency file: contracts/libraries/Constants.sol

// pragma solidity 0.8.10;

uint256 constant CEN = 1e6; // 1e6 = 100%
uint256 constant WAD = 1e18;

// Seconds in a year
uint256 constant SECONDS_PER_YEAR = 365 days;
uint256 constant SECONDS_PER_ONE_AND_HALF_YEAR = (SECONDS_PER_YEAR * 3) / 2;

// Interest
uint256 constant INTEREST_BORROW_BASE_RATE = 15e15; // 1.5%

// Credit
uint256 constant CREDIT_LOAN_TO_VALUE = 9e5; // 90% collateral value

// Leverage
uint256 constant LEVERAGE_MINIMUM_MULTIPLIER = 1e6; // 1x
uint256 constant LEVERAGE_MAXIMUM_MULTIPLIER = 10e6; // 10x
uint256 constant LEVERAGE_INITIAL_FEE = 25e3; // 2.5%

uint256 constant LEVERAGE_WOMBAT_LIQUIDITY_SLIPPAGE = 5e3; // 0.5%

// Addresses: Protocol
string constant ADDRESS_ORACLE = "ORACLE";
string constant ADDRESS_TREASURY = "TREASURY";
string constant ADDRESS_LIQUIDITY_POOL = "LIQUIDITY_POOL";
string constant ADDRESS_MATH_CALCULATOR = "MATH_CALCULATOR";
string constant ADDRESS_INTEREST_RATE_MODEL = "INTEREST_RATE_MODEL";

// Addresses: Tokens
string constant ADDRESS_TOKEN_WBNB = "TOKEN_WBNB";
string constant ADDRESS_TOKEN_ETH = "TOKEN_ETH";
string constant ADDRESS_TOKEN_BUSD = "TOKEN_BUSD";
string constant ADDRESS_TOKEN_WOM = "TOKEN_WOM";
string constant ADDRESS_TOKEN_MGP = "TOKEN_MGP";
string constant ADDRESS_TOKEN_ANKR_WBNB = "TOKEN_ANKR_WBNB";
string constant ADDRESS_TOKEN_ANKR_ETH = "TOKEN_ANKR_ETH";
string constant ADDRESS_TOKEN_HAY = "TOKEN_HAY";

// Addresses: pancakeswap.finance
string constant ADDRESS_PANCAKE_ROUTER = "PANCAKE_ROUTER";

// Addresses: wombat.exchange
string constant ADDRESS_WOMBAT_ROUTER = "WOMBAT_ROUTER";
string constant ADDRESS_WOMBAT_ANKR_BNB_POOL = "WOMBAT_ANKR_BNB_POOL";
string constant ADDRESS_WOMBAT_ANKR_ETH_POOL = "WOMBAT_ANKR_ETH_POOL";
string constant ADDRESS_WOMBAT_HAY_BUSD_POOL = "WOMBAT_HAY_BUSD_POOL";

// Addresses: magpiexyz.io
// bsc mainnet: 0xa3b615667cbd33cfc69843bf11fbb2a1d926bd46
string constant ADDRESS_MAGPIE_MASTER = "MAGPIE_MASTER";
// bsc mainnet: 0x664cc2bcae1e057eb1ec379598c5b743ad9db6e7
string constant ADDRESS_MAGPIE_WOMBAT_STAKING = "MAGPIE_WOMBAT_STAKING";


// Dependency file: contracts/interfaces/IAddressProvider.sol

// pragma solidity 0.8.10;

interface IAddressProvider {
    function getOracle() external view returns (address);

    function getTreasury() external view returns (address);

    function getLiquidityPool() external view returns (address);

    function getMathCalculator() external view returns (address);

    function getInterestRateModel() external view returns (address);

    function getAddress(string memory _name) external view returns (address);

    function setAddress(string memory _name, address _newAddress) external;
}


// Root file: contracts/protocol/AddressProvider.sol

pragma solidity 0.8.10;

// import "@openzeppelin/contracts/access/Ownable.sol";

// import "contracts/libraries/Constants.sol";
// import "contracts/interfaces/IAddressProvider.sol";

// store all protocol addresses
contract AddressProvider is IAddressProvider, Ownable {
    mapping(string => address) public addresses;

    function getOracle() external view override returns (address) {
        return addresses[ADDRESS_ORACLE];
    }

    function getTreasury() external view override returns (address) {
        return addresses[ADDRESS_TREASURY] != address(0) ? addresses[ADDRESS_TREASURY] : owner();
    }

    function getLiquidityPool() external view override returns (address) {
        return addresses[ADDRESS_LIQUIDITY_POOL];
    }

    function getMathCalculator() external view override returns (address) {
        return addresses[ADDRESS_MATH_CALCULATOR];
    }

    function getInterestRateModel() external view override returns (address) {
        return addresses[ADDRESS_INTEREST_RATE_MODEL];
    }

    function getAddress(string memory _name) external view override returns (address) {
        return addresses[_name];
    }

    function setAddress(string memory _name, address _newAddress) external override onlyOwner {
        addresses[_name] = _newAddress;
    }
}