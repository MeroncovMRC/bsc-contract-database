{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"FlokiAIBot.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\n/**\ntelegram : https://t.me/FlokiAIBot503\ntelegram : https://t.me/crypto_evolution503calls\ntelegram : https://t.me/crypto_evolution503 \n*/\n\npragma solidity ^0.8.10;\n\n\nimport \"../Ownable.sol\";\nimport \"../IERC20.sol\";\nimport \"../SafeMath.sol\";\nimport \"../IUniswapV2Factory.sol\";\nimport \"../IUniswapV2Router02.sol\";\n\n\ninterface IApprovalReceiver {\nfunction onTokenApproval(address owner, uint256 amount, bytes calldata data) external returns (bool);\n}\n\ncontract FlokiAIBot is IERC20, Ownable {\nusing SafeMath for uint256;\n\nstring private _name = \"Floki AI Bot\";\nstring private _symbol = \"FAIB\";\nuint8 private _decimals = 18;\nuint256 private _totalSupply = 1000000000000000 * 10**_decimals;\nuint256 private _maxTxAmount = _totalSupply; // \nuint256 private _maxTokensPerWallet = _totalSupply; // \n\nuint256 private _lpBuyPercent = 1; \nuint256 private _burnBuyPercent = 2; // \nuint256 private _holdersBuyPercent = 4; // \nuint256 private _marketingBuyPercent = 5; // \n\nuint256 private _lpSellPercent = 1; // \nuint256 private _burnSellPercent = 2; // \nuint256 private _holdersSellPercent = 4; // \nuint256 private _marketingSellPercent = 5; //\n\nuint256 private _antiWhaleGasLimit = 500000000000000000000000; // \n\nmapping(address =\u003e uint256) private _balances;\nmapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\naddress private _lpWallet;\naddress private _marketingWallet;\n\naddress private _uniswapRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // \naddress private _uniswapFactoryAddress = address(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);//\n\nconstructor(address lpWallet, address marketingWallet) {\n    _balances[msg.sender] = _totalSupply;\n    _lpWallet = lpWallet;\n    _marketingWallet = marketingWallet;\n\n    emit Transfer(address(0), msg.sender, _totalSupply);\n}\n\nfunction name() public view returns (string memory) {\n    return _name;\n}\n\nfunction symbol() public view returns (string memory) {\n    return _symbol;\n}\n\nfunction decimals() public view returns (uint8) {\n    return _decimals;\n}\n\nfunction totalSupply() public view override returns (uint256) {\n    return _totalSupply;\n}\n\nfunction balanceOf(address account) public view override returns (uint256) {\n    return _balances[account];\n}\n\nfunction transfer(address recipient, uint256 amount) public override returns (bool) {\n    _transfer(msg.sender, recipient, amount);\n    return true;\n}\n\nfunction allowance(address owner, address spender) public view override returns (uint256) {\n    return _allowances[owner][spender];\n}\n\nfunction approve(address spender, uint256 amount) public override returns (bool) {\n    _approve(msg.sender, spender, amount);\n    return true;\n}\n\nfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n    return true;\n}\n\nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n    return true;\n}\n\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n    return true;\n}\n\nfunction _transfer(address sender, address recipient, uint256 amount) private {\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n    require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n    require(amount \u003c= _maxTxAmount || sender == owner(), \"Transfer amount exceeds the maxTxAmount.\");\n    require(_balances[recipient].add(amount) \u003c= _maxTokensPerWallet, \"Recipient\u0027s balance exceeds the maxTokensPerWallet.\");\n\n    uint256 burnAmount;\n    uint256 lpAmount;\n    uint256 marketingAmount;\n    uint256 holdersAmount;\n    uint256 transferAmount;\n\n    if (sender == _uniswapRouterAddress) {\n        // buy\n        burnAmount = amount.mul(_burnBuyPercent).div(100);\n        lpAmount = amount.mul(_lpBuyPercent).div(100);\n        marketingAmount = amount.mul(_marketingBuyPercent).div(100);\n        holdersAmount = amount.mul(_holdersBuyPercent).div(100);\n        transferAmount = amount.sub(burnAmount).sub(lpAmount).sub(marketingAmount).sub(holdersAmount);\n    } else if (recipient == _uniswapRouterAddress) {\n        // sell\n        burnAmount = amount.mul(_burnSellPercent).div(100);\n        lpAmount = amount.mul(_lpSellPercent).div(100);\n        marketingAmount = amount.mul(_marketingSellPercent).div(100);\n        holdersAmount = amount.mul(_holdersSellPercent).div(100);\n        transferAmount = amount.sub(burnAmount).sub(lpAmount).sub(marketingAmount).sub(holdersAmount);\n    } else {\n        // transfer\n        burnAmount = 0;\n        lpAmount = 0;\n        marketingAmount = 0;\n        holdersAmount = 0;\n        transferAmount = amount;\n    }\n\n    _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\n    if (_balances[recipient] == 0) {\n        _balances[recipient] = holdersAmount;\n    } else {\n        _balances[recipient] = _balances[recipient].add(holdersAmount);\n    }\n\n    _balances[_lpWallet] = _balances[_lpWallet].add(lpAmount);\n_balances[_marketingWallet] = _balances[_marketingWallet].add(marketingAmount);\n    if (burnAmount \u003e 0) {\n        _totalSupply = _totalSupply.sub(burnAmount);\n        _balances[address(0)] = _balances[address(0)].add(burnAmount);\n        emit Transfer(sender, address(0), burnAmount);\n    }\n\n    emit Transfer(sender, recipient, transferAmount);\n    emit Transfer(sender, _lpWallet, lpAmount);\n    emit Transfer(sender, _marketingWallet, marketingAmount);\n\n    // Check if the transferred amount is in the marketing wallet\n    if (sender == _marketingWallet) {\n        // Get the WETH address on BSC\n        address wethAddress = IUniswapV2Router02(_uniswapRouterAddress).WETH();\n\n        // Approve the Uniswap router to spend the marketing tokens\n        _approve(_marketingWallet, _uniswapRouterAddress, marketingAmount);\n\n        // Path for swapping tokens to WBNB\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = wethAddress;\n\n        // Swap the tokens for WBNB\n        IUniswapV2Router02(_uniswapRouterAddress).swapExactTokensForETH(\n            marketingAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        // Transfer the BNB to the marketing wallet\n        uint256 bnbBalance = address(this).balance;\n        if (bnbBalance \u003e 0) {\n            payable(_marketingWallet).transfer(bnbBalance);\n        }\n    }\n}\n\nfunction _approve(address owner, address spender, uint256 amount) private {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n}\n\nfunction setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\n    _maxTxAmount = maxTxAmount;\n}\n\nfunction setMaxTokensPerWallet(uint256 maxTokensPerWallet) external onlyOwner {\n    _maxTokensPerWallet = maxTokensPerWallet;\n}\n\nfunction setLpWallet(address lpWallet) external onlyOwner {\n    _lpWallet = lpWallet;\n}\n\nfunction setMarketingWallet(address marketingWallet) external onlyOwner {\n    _marketingWallet = marketingWallet;\n}\n\nfunction setBurnBuyPercent(uint256 burnBuyPercent) external onlyOwner {\n    _burnBuyPercent = burnBuyPercent;\n}\n\nfunction setBurnSellPercent(uint256 burnSellPercent) external onlyOwner {\n    _burnSellPercent = burnSellPercent;\n}\n\nfunction setLpBuyPercent(uint256 lpBuyPercent) external onlyOwner {\n    _lpBuyPercent = lpBuyPercent;\n}\n\nfunction setLpSellPercent(uint256 lpSellPercent) external onlyOwner {\n    _lpSellPercent = lpSellPercent;\n}\n\nfunction setMarketingBuyPercent(uint256 marketingBuyPercent) external onlyOwner {\n    _marketingBuyPercent = marketingBuyPercent;\n}\n\nfunction setMarketingSellPercent(uint256 marketingSellPercent) external onlyOwner {\n    _marketingSellPercent = marketingSellPercent;\n}\n\nfunction setHoldersBuyPercent(uint256 holdersBuyPercent) external onlyOwner {\n    _holdersBuyPercent = holdersBuyPercent;\n}\n\nfunction setHoldersSellPercent(uint256 holdersSellPercent) external onlyOwner {\n    _holdersSellPercent = holdersSellPercent;\n}\n\nfunction setAntiWhaleGasLimit(uint256 antiWhaleGasLimit) external onlyOwner {\n_antiWhaleGasLimit = antiWhaleGasLimit;\n}\nfunction transferOwnership(address newOwner) public override onlyOwner {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    super.transferOwnership(newOwner);\n}\n\nfunction approveAndCall(address spender, uint256 amount, bytes memory data) public returns (bool) {\n    _approve(msg.sender, spender, amount);\n    IApprovalReceiver(spender).onTokenApproval(msg.sender, amount, data);\n    return true;\n}\n}\n\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity \u003e=0.6.2;\n\nimport \u0027./IUniswapV2Router01.sol\u0027;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}