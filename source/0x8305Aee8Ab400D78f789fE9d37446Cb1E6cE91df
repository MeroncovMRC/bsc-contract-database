// File: @openzeppelin/contracts/token/ERC20/IERC20.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol

// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: @openzeppelin/contracts/utils/Context.sol

// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/token/ERC20/ERC20.sol

// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;



/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

// File: contracts/new_Token.sol

pragma solidity ^0.8.0;

contract CuponF is ERC20 {


uint public s_Deadline;
string s_TokenName;
string s_TokenSymbol;
address p2pContract;  // Should be constant
address generatorContract; // Should be constant

constructor (
    uint _supply,
    uint deadLine,
    string memory tokenName,
    string memory tokenSymbol,
    address _p2p,
    address generator
) ERC20("", "") {
s_Deadline = deadLine;
s_TokenName = tokenName;
s_TokenSymbol = tokenSymbol;
p2pContract = _p2p;
generatorContract = generator;
_mint(msg.sender, _supply);
}


 function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = msg.sender;
        if(owner != p2pContract && owner != generatorContract) {
            revert();
        }
        _transfer(owner, to, amount);
        return true;
    }
  
  function burn(address wallet, uint amount) public {
    if(msg.sender != generatorContract){
        revert();
    }
    _burn(wallet, amount);
  }

 function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = msg.sender;
        if(spender != p2pContract && spender != generatorContract) {
            revert();
        }
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

function symbol() public view override returns(string memory) {
    return s_TokenSymbol;
}


function name() public view override returns(string memory) {
    return s_TokenName;
}




}

// File: contracts/P2P.sol

pragma solidity ^0.8.0;


contract P2PContract {

    event OfferCreated(uint deadLine, uint Id, address cupon_Add);
    event OfferDeleted(uint Id, address cupon_Add, address owner);
    event OfferAccepted(uint Id, address cupon_Add);

    constructor() {
        owner = msg.sender;
    }

    struct OfferStruct {
        address offer_OWNER;
        address cupon_Address;
        address priceToken_Address;
        uint cupon_Amount;
        uint priceToken_Amount;
        uint deadLine;
    }

    modifier onlyAllowed() {
        if (msg.sender != owner && msg.sender != generatorContract) {
            revert();
        }
        _;
    }

    uint public s_ID;
    address owner;
    address generatorContract;
    mapping(uint => OfferStruct) public OfferData_PER_ID;
    mapping(address => bool) isTokenAllowed;

    function createOffer(
        address cupon_Add,
        address priceToken_Add,
        uint cuponAmount,
        uint price
    ) public {
        if (!isTokenAllowed[cupon_Add]) {
            revert();
        }
        CuponF cuponToken = CuponF(cupon_Add);
        cuponToken.transferFrom(msg.sender, address(this), cuponAmount);
        s_ID++;
        uint _deadLine = cuponToken.s_Deadline();
        OfferStruct memory _offerData = OfferStruct({
            offer_OWNER: msg.sender,
            cupon_Address: cupon_Add,
            priceToken_Address: priceToken_Add,
            cupon_Amount: cuponAmount,
            priceToken_Amount: price,
            deadLine: _deadLine // Placeholder Deadline
        });
        OfferData_PER_ID[s_ID] = _offerData;
        emit OfferCreated(_deadLine, s_ID, cupon_Add);
    }

    function cancelOffer(uint _id) external {
        OfferStruct memory _offerData = OfferData_PER_ID[_id];
        if (_offerData.offer_OWNER != msg.sender) {
            revert();
        }
        delete OfferData_PER_ID[_id];
        IERC20 cuponToken = IERC20(_offerData.cupon_Address);
        cuponToken.transfer(_offerData.offer_OWNER, _offerData.cupon_Amount);
        emit OfferDeleted(_id, _offerData.cupon_Address, _offerData.offer_OWNER);
    }

    function acceptOffer(uint _id) external {
        OfferStruct memory _offerData = OfferData_PER_ID[_id];
        if (_offerData.deadLine <= block.timestamp) {
            revert();
        }
        IERC20 payment_TOKEN = IERC20(_offerData.priceToken_Address);
        payment_TOKEN.transferFrom(
            msg.sender,
            _offerData.offer_OWNER,
            _offerData.priceToken_Amount
        );
        delete OfferData_PER_ID[_id];
        IERC20 cupon_TOKEN = IERC20(_offerData.cupon_Address);
        cupon_TOKEN.transfer( msg.sender, _offerData.cupon_Amount);
        emit OfferAccepted(_id, _offerData.cupon_Address);
    }

    function whiteListTokens(
        address tokenWhiteList,
        bool status
    ) external onlyAllowed {
        isTokenAllowed[tokenWhiteList] = status;
    }

    function setGeneratorContract(
      address newGenerator
    ) external onlyAllowed {
        generatorContract = newGenerator;
    }
}

// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol

// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)

pragma solidity ^0.8.0;

/**
 * @dev These functions deal with verification of Merkle Trees proofs.
 *
 * The proofs can be generated using the JavaScript library
 * https://github.com/miguelmota/merkletreejs[merkletreejs].
 * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.
 *
 * See `test/utils/cryptography/MerkleProof.test.js` for some examples.
 *
 * WARNING: You should avoid using leaf values that are 64 bytes long prior to
 * hashing, or use a hash function other than keccak256 for hashing leaves.
 * This is because the concatenation of a sorted pair of internal nodes in
 * the merkle tree could be reinterpreted as a leaf value.
 */
library MerkleProof {
    /**
     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree
     * defined by `root`. For this, a `proof` must be provided, containing
     * sibling hashes on the branch from the leaf to the root of the tree. Each
     * pair of leaves and each pair of pre-images are assumed to be sorted.
     */
    function verify(
        bytes32[] memory proof,
        bytes32 root,
        bytes32 leaf
    ) internal pure returns (bool) {
        return processProof(proof, leaf) == root;
    }

    /**
     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up
     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt
     * hash matches the root of the tree. When processing the proof, the pairs
     * of leafs & pre-images are assumed to be sorted.
     *
     * _Available since v4.4._
     */
    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            bytes32 proofElement = proof[i];
            if (computedHash <= proofElement) {
                // Hash(current computed hash + current element of the proof)
                computedHash = _efficientHash(computedHash, proofElement);
            } else {
                // Hash(current element of the proof + current computed hash)
                computedHash = _efficientHash(proofElement, computedHash);
            }
        }
        return computedHash;
    }

    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
        assembly {
            mstore(0x00, a)
            mstore(0x20, b)
            value := keccak256(0x00, 0x40)
        }
    }
}

// File: contracts/Dd.sol

pragma solidity ^0.8.0;



contract Generator {
    event DiscountClaimed(address tokenAddress, address owner);
    event Discount_USED(address tokenAddress, address owner);
    event TokenCreated(address tokenAddress, address _owner);
    event CodeClaimed(address tokenAddress, address newOwner);

    address owner;
    address s_p2pAddress;
    mapping(address => bool) isAddressApproved;
    mapping(address => bytes32) rootPerToken;
    // Root => Leaf => True|False
    mapping(bytes32 => mapping(bytes32 => bool)) codeAlreadyUsed;

    //  Token Address => Discount Owner => Units
    mapping(address => mapping(address => uint)) public unused_Discount_PerUser;

    mapping(address => address) public ownerPerToken;

    constructor(address p2p) {
        s_p2pAddress = p2p;
        owner = msg.sender;
    }

    modifier onlyOwner() {
        if (msg.sender != owner) {
            revert();
        }
        _;
    }

    function createTokens(
        uint[] memory _supply,
        uint[] memory deadLine,
        string[] memory tokenName,
        string[] memory tokenSymbol,
        bytes32[] memory newRoot
    ) public {
        if (!isAddressApproved[msg.sender]) {
            revert();
        }
        if (
            _supply.length != deadLine.length ||
            _supply.length != tokenName.length ||
            _supply.length != tokenSymbol.length ||
            _supply.length != newRoot.length

        ) {
            revert();
        }

        for (uint i; i < _supply.length; i++) {
            CuponF token = new CuponF(
                _supply[i],
                deadLine[i],
                tokenName[i],
                tokenSymbol[i],
                s_p2pAddress,
                address(this)
            );
            P2PContract _p2pContract = P2PContract(s_p2pAddress);
            _p2pContract.whiteListTokens(address(token), true);
            rootPerToken[address(token)] = newRoot[i];
            ownerPerToken[address(token)] = msg.sender;
            emit TokenCreated(address(token), owner);
        }
    }

    // Receive Bytes (Leaf) and Path
    function claimCode(
        bytes32 leaf,
        bytes32[] memory proof,
        address tokenAdd
    ) public {
        bytes32 root = rootPerToken[tokenAdd];
        if(codeAlreadyUsed[root][leaf]) {
            revert();
        }
        if(!MerkleProof.verify(proof, root, leaf)) {
            revert();
        }
       codeAlreadyUsed[root][leaf] = true;
       CuponF cuponContract = CuponF(tokenAdd);
       cuponContract.transfer(msg.sender, 1);
       emit CodeClaimed(tokenAdd, msg.sender);
    }

    function claimDiscount_User(address _tokenAdd, uint amount) public {
        CuponF token = CuponF(_tokenAdd);
        token.burn(msg.sender, amount);
        unused_Discount_PerUser[_tokenAdd][msg.sender] += amount;
        emit DiscountClaimed(_tokenAdd, msg.sender);

    }

    function confirmUseOfDiscount(uint amount, address _tokenAdd, address discountOwner) public {
      if(msg.sender != ownerPerToken[_tokenAdd]) {
        revert();
      } 

      if(unused_Discount_PerUser[_tokenAdd][discountOwner] < amount) {
        revert();
      } 
      unused_Discount_PerUser[_tokenAdd][discountOwner] -= amount;
      emit Discount_USED(_tokenAdd, discountOwner);
}

    function setAddress(address _wallet, bool status) public onlyOwner {
        isAddressApproved[_wallet] = status;
    }

    function setP2pAddress(address newAdress) public onlyOwner {
        s_p2pAddress = newAdress;
        }
}