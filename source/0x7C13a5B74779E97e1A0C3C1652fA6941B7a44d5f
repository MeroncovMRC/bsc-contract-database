
// File: /root/bscDarsContracts/contracts/DarsReserve.sol
// SPDX-License-Identifier: MIT
/*
https://dars.one/
*/
pragma solidity 0.7.6;
import "./lib/IBEP20.sol";
import "./lib/SafeMath.sol";
import "./lib/TransferHelper.sol";

pragma experimental ABIEncoderV2;

contract DarsReserve {
    using SafeMath for uint256;
    using TransferHelper for IBEP20;

    struct ADMIN{
        uint256 reserve;
        mapping(uint32=>uint256) spent;
    }

    address public constant dev1=0x6e339A99549e2fF536F972Ef227cF5F22a8A58E5;
    address public constant dev2=0xF4293330eF51997D0FA8dfc6DFE493Dd5048A96b;

    modifier onlyDev() {
        require(dev1 == msg.sender 
                || dev2 == msg.sender,
                 "caller is not a developer");
        _;
    }

    uint256 immutable public startTimestamp;
    mapping(uint32=>uint256) totalSpent;
    IBEP20 public bonusToken;
    uint256 public freeReserve;
    mapping(address=>ADMIN) reserveAdmins;

    constructor(address _bonusToken,uint256 _freeReserve){
        bonusToken=IBEP20(_bonusToken);
        freeReserve=_freeReserve;
        startTimestamp=block.timestamp;
        
    }
    
    event Withdraw(address indexed user, uint256 amount);

    function addAdmin(address admin,uint256 amount) external onlyDev {
        require(amount>0 && amount<=freeReserve,"bad amount");
        require(reserveAdmins[admin].reserve==0,"this admin already added");
        freeReserve=freeReserve.sub(amount);
        reserveAdmins[admin].reserve=amount;
    }
    function moveAdmin(address _admin,address _newadmin) external onlyDev {
        require(reserveAdmins[_admin].reserve>0,"this admin not added yet");
        uint32 period=getCurrentPeriod();
        reserveAdmins[_newadmin].reserve=reserveAdmins[_newadmin].reserve.add(reserveAdmins[_admin].reserve);
        reserveAdmins[_newadmin].spent[period]=reserveAdmins[_newadmin].spent[period].add(reserveAdmins[_admin].spent[period]);
        reserveAdmins[_admin].reserve=0;
        reserveAdmins[_admin].spent[period]=0;  
    }
    function withdraw(uint256 amount) external{
        require(amount>0,"amount must be greater than 0");
        require(reserveAdmins[msg.sender].reserve>0,"not available for this account");
        uint32 period=getCurrentPeriod();
        uint256 cBonusBalance=bonusToken.balanceOf(address(this));
        uint256 availableAmount=reserveAdmins[msg.sender].reserve.sub(reserveAdmins[msg.sender].spent[period]);
        require(amount<=availableAmount && amount<=cBonusBalance,"amount exceeded");
        reserveAdmins[msg.sender].spent[period]=reserveAdmins[msg.sender].spent[period].add(amount);
        totalSpent[period]=totalSpent[period].add(amount);
        bonusToken.safeTransfer(address(msg.sender), amount);
        emit Withdraw(msg.sender,amount);
    }

    function getAvailableAmount(address user) public view returns (uint256) {
        if(reserveAdmins[user].reserve>0){
            uint32 period = getCurrentPeriod();
            return reserveAdmins[user].reserve.sub(reserveAdmins[user].spent[period]);
        }else{
            return 0;
        } 
    }

    function getCurrentPeriod() public view returns (uint32) {
        return uint32(block.timestamp.sub(startTimestamp).div(2592000));//60*60*24*30
    }

    function getTotalSpent(uint32 _period) public view returns (uint256) {
        return totalSpent[_period];
    }

}

// File: /root/bscDarsContracts/contracts/lib/IBEP20.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.4 <0.8.0;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: /root/bscDarsContracts/contracts/lib/SafeMath.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.4 <0.8.0;

/**
 * Copyright (c) 2016-2019 zOS Global Limited
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


// File: /root/bscDarsContracts/contracts/lib/TransferHelper.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.4 <0.8.0;
import "./IBEP20.sol";
import "./SafeMath.sol";

library TransferHelper {
    using SafeMath for uint256;

    function safeTransfer(
        IBEP20 token,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) =
            address(token).call(
                abi.encodeWithSelector(token.transfer.selector, to, value)
            );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TRANSFER_FAILED"
        );
    }

    function safeTransferFrom(
        IBEP20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) =
            address(token).call(
                abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
            );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TRANSFER_FROM_FAILED"
        );
    }

    function safeIncreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance =
            token.allowance(address(this), spender).add(value);

        (bool success, bytes memory data) =
            address(token).call(
                abi.encodeWithSelector(token.approve.selector,spender,newAllowance)
            );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "INCREASE_ALLOWANCE_FAILED"
        );     
    }
}
