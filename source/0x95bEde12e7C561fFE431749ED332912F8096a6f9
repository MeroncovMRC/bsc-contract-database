{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"ILotteryNFT.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDynamixLotteryNFT {\n    function countMatch(uint32 playerNumber, uint32 winnerNumber, address player) external view returns(uint8);\n    function hasDiscount(address player) external view returns(bool);\n}\n"},"ILotteryPrice.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDynamixLotteryPrice {\n    function swapAndTransfer(address from, uint256 numberOfTickets, address betInToken, address lottery, uint256 ticketPriceInUSD) external returns(uint256);\n\tfunction DYNA() external view returns (address);\n}"},"ILotteryRandom.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDynamixLotteryRandom {\n    function getRandomNumber(uint256 random) external view returns(uint32);\n}"},"Lottery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\nimport \"./Address.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./ILotteryPrice.sol\";\nimport \"./ILotteryRandom.sol\";\nimport \"./ILotteryNFT.sol\";\n\ncontract DynamixLottery is Ownable {\n\tusing SafeERC20 for IERC20;\n\n    address public operatorAddress;\n\n\tuint256 public currentLotteryId = 0;\n    uint256 public currentTicketId = 0;\n\t\n\tuint256 public ticketPriceInUSD = 5 * 10**18;\n    uint256 public maxTicket = 100;\n\t\n\tIDynamixLotteryPrice public lotteryPrice;\n\tIDynamixLotteryRandom public lotteryRandom;\n\tIDynamixLotteryNFT public lotteryNFT;\n\t\n\tenum LotteryStatus {\n        Open,\n        InDraw,\n        Close\n    }\n\n    struct Lottery {\n        LotteryStatus status;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 firstTicketId;\n        uint256 lastTicketId;\n        uint256 amount;\n        uint32 winningNumber;\n        uint32[6] winnersPerBracket;\n        uint256[6] amountsPerBracket;\n    }\n\n    struct Ticket {\n        uint32 number;\n        address player;\n    }\n\t\n\tstruct TicketView {\n\t\tuint256 id;\n        uint32 number;\n        uint8 matchNumber;\n\t\taddress player;\n\t\tbool claimed;\n    }\n\t\t\n\tmapping(uint256 =\u003e Lottery) private _lotteries;\n    mapping(uint256 =\u003e Ticket) private _tickets;\n    mapping(address =\u003e mapping(uint256 =\u003e uint256[])) private _players;\n\n\tevent NewBet(\n\t\taddress indexed player, \n\t\taddress betInToken,\n\t\tuint256 indexed lotteryId, \n\t\tuint256 numberTickets\n\t);\n\t\n\tevent NewLottery(\n\t\tuint256 indexed lotteryId\n\t);\n\t\n\tevent DrawnLottery(\n\t\tuint256 indexed lotteryId, \n\t\tuint32 winningNumber\n\t);\n\t\n\tevent CloseLottery(\n\t\tuint256 indexed lotteryId\n\t);\n\t\n\tevent FundsInjected(\n\t\tuint256 indexed lotteryId, \n\t\tuint256 amount\n\t);\n\t\n\tevent FundsWithDrawn(\n\t\tuint256 amount\n\t);\n\n\tevent TicketsClaimed(\n\t\taddress indexed player, \n\t\tuint256 indexed lotteryId, \n\t\tuint256 amount\n\t);\n\t\n\tevent AddressConfigurationChanged(\n\t\tstring typeValue,\n\t\taddress addrValue\n\t);\n\t\n\tevent TicketPriceChanged(\n\t\tuint256 ticketPriceInUSD,\n\t\tuint256 maxTicket\n\t);\n\n\tmodifier onlyOperator() {\n        require(msg.sender == operatorAddress || msg.sender == owner(), \"Not operator\");\n        _;\n    }\n\t\n\tconstructor() {\n        \n    }\n\t\n\t// *****************************************\n\t// Main Lottery Functions\n\t// *****************************************\n\n\t// Bet in lottery\n\tfunction bet(uint256 lotteryId, uint32[] memory tickets, address betInToken) public {\n\t\trequire(tickets.length != 0, \"No ticket specified\");\n        require(tickets.length \u003c= maxTicket, \"Too many tickets\");\n        require(_lotteries[lotteryId].status == LotteryStatus.Open, \"Lottery is not open\");\n        require(block.timestamp \u003c _lotteries[lotteryId].endTime, \"Lottery is over\");\n\n\t\t// Swap and Transfer\n\t\tuint256 price = lotteryNFT.hasDiscount(msg.sender) ? ticketPriceInUSD / 2 : ticketPriceInUSD;\n\t\tuint256 totalDyna = lotteryPrice.swapAndTransfer(address(msg.sender), tickets.length, betInToken, address(this), price);\n\t\t_lotteries[lotteryId].amount += totalDyna;\n\t\t\n\t\t// Create Tickets\n\t\tfor (uint256 i = 0; i \u003c tickets.length; i++) {\n            uint32 number = tickets[i];\n\n            require((number \u003e= 0) \u0026\u0026 (number \u003c= 999999), \"Ticket Number Outside range\");\n\n            _tickets[currentTicketId] = Ticket({number: number, player: msg.sender});\n\t\t\t _players[msg.sender][lotteryId].push(currentTicketId);\n\t\t\t \n            currentTicketId++;\t\n        }\n\n\t\t_lotteries[lotteryId].lastTicketId = currentTicketId;\n        emit NewBet(msg.sender, betInToken, lotteryId, tickets.length);\t\t\n\t}\n\t\t\n\t// Start New Lottery\n\tfunction createLottery(uint256 endTime) public onlyOperator returns(Lottery memory)  {\n\t\tuint256 nextAmount = 0;\n\t\t\n\t\tif(currentLotteryId != 0) {\n\t\t\tfor (uint256 i = 0; i \u003c _lotteries[currentLotteryId].amountsPerBracket.length; i++) \n\t\t\t\tnextAmount += _lotteries[currentLotteryId].amountsPerBracket[i] * _lotteries[currentLotteryId].winnersPerBracket[i];\n\t\t\tnextAmount = _lotteries[currentLotteryId].amount - nextAmount;\n\t\t}\n\t\t\n\t\tLottery memory newLottery = Lottery({\n\t\t\tstatus: LotteryStatus.Open, \n\t\t\tstartTime: block.timestamp,\n\t\t\tendTime: endTime,\n\t\t\tfirstTicketId: currentTicketId,\n\t\t\tlastTicketId: currentTicketId,\n\t\t\tamount: nextAmount,\n\t\t\twinningNumber: 0,\n\t\t\twinnersPerBracket: [uint32(0), uint32(0), uint32(0), uint32(0), uint32(0), uint32(0)],\n\t\t\tamountsPerBracket: [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)]\n\t\t});\n\t\t       \n\t\tcurrentLotteryId++;\n\t\t_lotteries[currentLotteryId] = newLottery;\n\t\t\n\t\temit NewLottery(currentLotteryId);\t\n\t\t\n\t\treturn viewLottery(currentLotteryId);\n\t}\n\t\n\t// Draw Lottery\n\tfunction draw(uint256 lotteryId, uint256 random) public onlyOperator returns(Lottery memory)  {\n        require(_lotteries[lotteryId].status == LotteryStatus.Open, \"Lottery is not open\");\n\n\t\t_lotteries[lotteryId].status = LotteryStatus.InDraw;\n\t\t_lotteries[lotteryId].winningNumber = lotteryRandom.getRandomNumber(random);\n\t\t\n\t\temit DrawnLottery(currentLotteryId, _lotteries[lotteryId].winningNumber);\t\n\t\t\n\t\treturn viewLottery(currentLotteryId);\n\t}\n\t\n\t// Set Winners Per Bracket\n\tfunction calculWinnersPerBracket(uint256 lotteryId, uint32[6] memory winnersPerBracket,  uint32[6] memory percentsPerBracket) public onlyOperator  {\n        require(_lotteries[lotteryId].status == LotteryStatus.InDraw, \"Lottery is not Drawn\");\n\n\t\t_lotteries[lotteryId].status = LotteryStatus.Close;\n\t\t_lotteries[lotteryId].winnersPerBracket = winnersPerBracket;\n\t\t\n\t\tfor (uint256 i = 0; i \u003c winnersPerBracket.length; i++) {\n\t\t\tif(winnersPerBracket[i] != 0)\n\t\t\t\t_lotteries[lotteryId].amountsPerBracket[i] = _lotteries[lotteryId].amount * percentsPerBracket[i] / 100 / winnersPerBracket[i];\n\t\t}\n\t\t\n\t\temit CloseLottery(currentLotteryId);\t\n\t}\n\t\n\t// Inject amount in lottery\n\tfunction injectFunds(uint256 lotteryId, uint256 amount) public onlyOwner  {\n\t\t_lotteries[lotteryId].amount = amount;\n\t\t\n\t\temit FundsInjected(lotteryId, amount);\t\n\t}\n\t\n\t// Withdrawal (for security or smart contract migration reasons)\n\tfunction withDrawalFunds(uint256 totalDYNA) public onlyOwner  {\n\t\tif(totalDYNA != 0 \u0026\u0026 lotteryPrice.DYNA() != address(0)) {\n\t\t\tIERC20 token = IERC20(lotteryPrice.DYNA());\n\t\t\ttoken.safeTransfer(owner(), totalDYNA);\n\t\t\t\n\t\t\temit FundsWithDrawn(totalDYNA);\t\n\t\t}\n\t}\n\t\n\t// Claim tickets\n\tfunction claim(uint256 lotteryId, uint256[] memory ticketIds) public {\n        require(_lotteries[lotteryId].status == LotteryStatus.Close, \"Lottery is not Closed\");\n\t\tuint256 totalDYNA = 0;\n\t\t\n\t\tfor (uint256 i = 0; i \u003c ticketIds.length; i++) {\n            uint256 id = ticketIds[i];\n\n            require(id \u003e= _lotteries[lotteryId].firstTicketId \u0026\u0026 id \u003c _lotteries[lotteryId].lastTicketId, \"this ticket is not in this lottery\");\n            require(msg.sender == _tickets[id].player, \"You are not owner of this ticket, or this ticket is already claimed\");\n\t\t\t\n\t\t\tuint8 matchNumber = lotteryNFT.countMatch(_tickets[id].number, _lotteries[lotteryId].winningNumber, _tickets[id].player);\n\t\t\tif(matchNumber != 0) {\n\t\t\t\ttotalDYNA += _lotteries[lotteryId].amountsPerBracket[matchNumber - 1];\n\t\t\t\t_tickets[id].player = address(0);\n\t\t\t}\n        }\n\t\t\n\t\tif(totalDYNA != 0 \u0026\u0026 lotteryPrice.DYNA() != address(0)) {\n\t\t\tIERC20 token = IERC20(lotteryPrice.DYNA());\n\t\t\ttoken.safeTransfer(msg.sender, totalDYNA);\n\t\t}\n\t\t\n\t\temit TicketsClaimed(msg.sender, lotteryId, totalDYNA);\t\t\n\t}\n\t\n\t// *****************************************\n\t// View Lottery Functions\n\t// *****************************************\n\t\n\t// View Lottery information\n\tfunction viewLottery(uint256 lotteryId) public view returns(Lottery memory) {\n\t\treturn _lotteries[lotteryId];\n\t}\n\t\n\t// View Tickets \n\tfunction viewTickets(uint256 lotteryId, uint256 fromTicketId, uint256 toTicketId) public view returns(TicketView[] memory) {\n\t\tfromTicketId = fromTicketId \u003c _lotteries[lotteryId].firstTicketId ? _lotteries[lotteryId].firstTicketId : fromTicketId;\n\t\ttoTicketId = toTicketId \u003e _lotteries[lotteryId].lastTicketId ? _lotteries[lotteryId].lastTicketId : toTicketId;\n\t\t\n\t\tuint256 length = toTicketId - fromTicketId;\n\t\tTicketView[] memory Tickets = new TicketView[](length);\n\t\t\n\t\tfor (uint256 i = 0; i \u003c length; i++) {\n\t\t\tuint256 ticketId = i + fromTicketId;\n\t\t\t\n\t\t\tTickets[i].id = ticketId;\n\t\t\tTickets[i].number = _tickets[ticketId].number;\n\t\t\tTickets[i].player = _tickets[ticketId].player;\n\t\t\tTickets[i].claimed = _tickets[ticketId].player == address(0);\n\n\t\t\tif(_lotteries[lotteryId].winningNumber != 0)\n\t\t\t\tTickets[i].matchNumber = lotteryNFT.countMatch(Tickets[i].number, _lotteries[lotteryId].winningNumber, _tickets[ticketId].player);\n        }\n\t\t\n\t\treturn Tickets;\n\t}\n\n\t// View Player information\n\tfunction viewPlayer(address player, uint256 lotteryId, uint256 from, uint256 to) public view returns(TicketView[] memory) {\n\t\trequire(from \u003c to, \"from must be less than to\");\n\t\t\n\t\tuint256 length = _players[player][lotteryId].length;\n\t\tlength = to \u003e length ? length - from : to - from;\n\n\t\tTicketView[] memory Tickets = new TicketView[](length);\n\t\t\n\t\tfor (uint256 i = 0; i \u003c length; i++) {\n            uint256 ticketId = _players[player][lotteryId][i + from];\n            \n\t\t\tTickets[i].id = ticketId;\n\t\t\tTickets[i].number = _tickets[ticketId].number;\n\t\t\tTickets[i].player = _tickets[ticketId].player;\n\t\t\tTickets[i].claimed = _tickets[ticketId].player == address(0);\n\t\t\t\n\t\t\tif(_lotteries[lotteryId].winningNumber != 0)\n\t\t\t\tTickets[i].matchNumber = lotteryNFT.countMatch(Tickets[i].number, _lotteries[lotteryId].winningNumber, _tickets[ticketId].player);\n        }\n\t\t\n\t\treturn Tickets;\n\t}\n\t\n\t// *****************************************\n\t// Admin Lottery Functions\n\t// *****************************************\n\n\t// Change Lottery Price Manager\n\tfunction changeLotteryPrice(address lotteryPriceAddress) public onlyOwner {\n\t\t lotteryPrice = IDynamixLotteryPrice(lotteryPriceAddress);\n\t\t emit AddressConfigurationChanged(\"lotteryPriceAddress\", lotteryPriceAddress);\n\t}\n\t\n\t// Change Lottery Random Manager\n\tfunction changeLotteryRandom(address lotteryRandomAddress) public onlyOwner {\n\t\t lotteryRandom = IDynamixLotteryRandom(lotteryRandomAddress);\n\t\t emit AddressConfigurationChanged(\"lotteryRandom\", lotteryRandomAddress);\n\t}\n\t\n\t// Change Lottery NFT Manager\n\tfunction changeLotteryNFT(address lotteryNFTAddress) public onlyOwner {\n\t\t lotteryNFT = IDynamixLotteryNFT(lotteryNFTAddress);\n\t\t emit AddressConfigurationChanged(\"lotteryNFT\", lotteryNFTAddress);\n\t}\n\t\n\t// Change bot Operator address\n\tfunction changeOperator(address operator) public onlyOwner {\n\t\t operatorAddress = operator;\n\t\t emit AddressConfigurationChanged(\"operatorAddress\", operatorAddress);\n\t}\n\n\t// Change Ticket Price and Max ticket\n\tfunction changeTicketPrice(uint256 price, uint256 max) public onlyOwner {\n\t\t ticketPriceInUSD = price;\n\t\t maxTicket = max;\n\t\t \n\t\t emit TicketPriceChanged(ticketPriceInUSD, maxTicket);\n\t}\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\nimport \"./IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"}}