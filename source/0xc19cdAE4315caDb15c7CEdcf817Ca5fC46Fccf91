{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\u0027s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"IPancakeFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.5.16;\r\n\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IPancakeRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts\\interfaces\\IPancakeRouter02.sol\r\n\r\npragma solidity \u003e=0.6.2;\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"SocialFarming.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IPancakeFactory.sol\";\r\nimport \"./IPancakeRouter.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract SocialFarming is ERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    IPancakeRouter02 public PancakeRouter;\r\n    IPancakeFactory  public PancakeFactory;\r\n\r\n    mapping(address =\u003e bool) private whiteList;\r\n    mapping(address =\u003e bool) private tradePair;\r\n    uint256 private defaultInterval = 5 weeks;\r\n\r\n    address private deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address private pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PancakeSwap BNB Smart Chain Mainnet\r\n    address public  pancakePairAddress;\r\n\r\n    // Distribution of all Fee\r\n    address private managerAddress     = 0xabEAf4878C0fd5a092406B7b6088A39da013e32D; // This address do not receive any fee\r\n    address private developmentAddress = 0xDbf47de8572B030F6851a6adb628092db31aFe58;\r\n    address private marketingAddress   = 0x307Aa875402eB118a7a5b4Ed056c913113A5A5e4;\r\n    address public  liquidityAddress   = 0xa0Ec9Ecb9563306E4bcD1c01a3743CD2e65A93e5;\r\n    address public  stakeAddress       = 0xa0Ec9Ecb9563306E4bcD1c01a3743CD2e65A93e5;\r\n\r\n    // ERC20 Address of Fee recipient\r\n    address public developmentPairFee;\r\n    address public marketingPairFee;\r\n    \r\n    uint256 public  lastUpdateLiquidityAddress;\r\n    uint256 public  lastUpdateStakeAddress;\r\n    uint256 public  intervalUpdateAddress = defaultInterval;\r\n\r\n    // Only applies to buying or selling.\r\n    uint256 private developmentFee  = 3;\r\n    uint256 private marketingFee    = 2;\r\n    uint256 private liquidityFee    = 2;\r\n    uint256 private stakeFee        = 1;\r\n    uint256 private distributionFee = (developmentFee+marketingFee+liquidityFee+stakeFee);\r\n    uint256 public  lastUpdateDistributionFee;\r\n    uint256 public  intervalUpdateDistribution = defaultInterval;\r\n\r\n    uint256 public currentFee = 800;\r\n    uint256 public maxFee = 800; // 8%\r\n    uint256 public  lastUpdateFee;\r\n    uint256 public  intervalUpdateFee = defaultInterval;\r\n\r\n    // Only applies to total supply.\r\n    uint256 private tokenSupply;\r\n    uint256 private creatorAmount     = 60; // (2% Airdrop, 8% PrivateSale, 40% Launchpad, 10% Exchange)\r\n    uint256 private liquidityAmount   = 30; // ()\r\n    uint256 private developmentAmount = 5;  // ()\r\n    uint256 private marketingAmount   = 5;  // ()\r\n    uint256 private totalAmount       = (creatorAmount+liquidityAmount+developmentAmount+marketingAmount);\r\n\r\n    // Perform swap\r\n    uint256 private maxSwap = 10000; // 100%\r\n    uint256 private minSwap = 2000;  //  20%\r\n    bool    private inSwap;\r\n\r\n    uint256 private basePercentage = 10000;\r\n    bool    public  contractLocked = true;\r\n\r\n    event contractUnlocked();\r\n    event whiteListChange(address owner, bool status);\r\n    event tradePairChange(address pair, bool status);\r\n    event minSwapChange(uint256 minSwap);\r\n\r\n    event managerAddressChange(address newAddress);\r\n    event developmentAddressChange(address newAddress);\r\n    event developmentPairFeeChange(address newDevelopmentPair);\r\n\r\n    event marketingAddressChange(address newAddress);\r\n    event marketingPairFeeChange(address newMarketingPair);\r\n\r\n    event liquidityAddressChange(address newAddress);\r\n    event stakeAddressChange(address newAddress);\r\n\r\n    event liquidityChangeExtended();\r\n    event stakeChangeExtended();\r\n\r\n    event distributionChange(uint256 x, uint256 y, uint256 z, uint256 w);\r\n    event distributionChangeExtended();\r\n\r\n    event currentFeeChange(uint256 currentFee);\r\n    event currentFeeChangeExtended();\r\n    event withdrawn(uint256 amount);\r\n\r\n    constructor() ERC20(\"SocialFarming\",\"SFARM\"){\r\n\r\n        tokenSupply = 100000000 * 10**uint256(decimals());\r\n\r\n        _mint(_msgSender()       ,tokenSupply.mul(creatorAmount).div(totalAmount));\r\n        _mint(liquidityAddress   ,tokenSupply.mul(liquidityAmount).div(totalAmount));\r\n        _mint(developmentAddress ,tokenSupply.mul(developmentAmount).div(totalAmount));\r\n        _mint(marketingAddress   ,tokenSupply.mul(marketingAmount).div(totalAmount));\r\n\r\n        PancakeRouter      = IPancakeRouter02(pancakeRouterAddress);\r\n        PancakeFactory     = IPancakeFactory(PancakeRouter.factory());\r\n        pancakePairAddress = PancakeFactory.createPair(address(this),PancakeRouter.WETH());\r\n\r\n        developmentPairFee = PancakeRouter.WETH();\r\n        marketingPairFee   = PancakeRouter.WETH();\r\n\r\n        whiteList[address(this)]      = true;\r\n        whiteList[_msgSender()]       = true;\r\n        whiteList[developmentAddress] = true;\r\n        whiteList[marketingAddress]   = true;\r\n        whiteList[liquidityAddress]   = true;\r\n        whiteList[stakeAddress]       = true;\r\n\r\n        tradePair[pancakePairAddress] = true;\r\n    }\r\n\r\n    function swapWETHAndSend(address recipientPair, address recipient, uint256 amount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = PancakeRouter.WETH();\r\n        path[1] = recipientPair;\r\n\r\n        PancakeRouter.swapExactETHForTokens{ value: amount }(\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // Exchange the purchase and sale fees and send immediately to the respective addresses.\r\n    function swapFee(uint256 amount) internal lockSwap {\r\n\r\n        uint256[] memory TotalSwap;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = PancakeRouter.WETH();\r\n\r\n        _approve(address(this), pancakeRouterAddress, amount);\r\n        TotalSwap = PancakeRouter.swapExactTokensForETH(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        if (TotalSwap[1]\u003e0){\r\n            \r\n            uint256 developmentSwap = (TotalSwap[1].mul(developmentFee)).div(distributionFee);\r\n            uint256 marketingSwap   = (TotalSwap[1].mul(marketingFee)).div(distributionFee);\r\n            uint256 liquiditySwap   = (TotalSwap[1].mul(liquidityFee)).div(distributionFee);\r\n            uint256 stakeSwap       = (TotalSwap[1].mul(stakeFee)).div(distributionFee);\r\n\r\n            if (developmentPairFee == PancakeRouter.WETH()){\r\n                payable(developmentAddress).transfer(developmentSwap);\r\n            } else {\r\n                swapWETHAndSend(developmentPairFee,developmentAddress,developmentSwap);\r\n            }\r\n\r\n            if (marketingPairFee == PancakeRouter.WETH()){\r\n                payable(marketingAddress).transfer(marketingSwap);\r\n            } else {\r\n                swapWETHAndSend(marketingPairFee,marketingAddress,marketingSwap);\r\n            }\r\n\r\n            payable(liquidityAddress).transfer(liquiditySwap);\r\n            payable(stakeAddress).transfer(stakeSwap);\r\n        }\r\n    }\r\n\r\n    // Make sure you have been charged the purchase and sale fee only.\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        uint256 amountTax;\r\n        if (whiteList[sender] || whiteList[recipient]){\r\n            amountTax = 0;\r\n        } else {\r\n            require(!contractLocked, \"Contract Locked\");\r\n            if (tradePair[sender] || tradePair[recipient]) { // Buy or Sell\r\n\r\n                uint256 amountSwap = balanceOf(address(this));\r\n                if (!inSwap \u0026\u0026 amountSwap\u003e0 \u0026\u0026 tradePair[recipient] \u0026\u0026 minSwap\u003e0){\r\n                    uint256 maxCurrentSwap = (amount.mul(minSwap)).div(basePercentage);\r\n                    if (amountSwap\u003e=maxCurrentSwap) {\r\n                        amountSwap = maxCurrentSwap;\r\n                    }\r\n                    swapFee(amountSwap);\r\n                }\r\n\r\n                if (currentFee\u003e0){\r\n                    amountTax = (amount.mul(currentFee)).div(basePercentage);\r\n                    super._transfer(sender, address(this), amountTax);\r\n                }\r\n                \r\n            }\r\n        }\r\n        super._transfer(sender, recipient, amount.sub(amountTax));\r\n    }\r\n\r\n    function manualSwap(uint256 amount) external onlyManager {\r\n        uint256 currentBalance = balanceOf(address(this));\r\n        require(currentBalance\u003e0 \u0026\u0026 amount\u003c=currentBalance, \"Invalid input or insufficient balance\");\r\n        require(!inSwap, \"In Swap\");\r\n        if (amount==0){\r\n            amount = currentBalance;\r\n        }\r\n        swapFee(amount);\r\n    }\r\n\r\n    function changeManagerAddress(address managerAddr) external onlyOwner {\r\n        require(managerAddress!=managerAddr, \"Input equal to registered value\");\r\n        managerAddress = managerAddr;\r\n        emit managerAddressChange(managerAddr);\r\n    }\r\n\r\n    function unlockContract() external onlyOwner {\r\n        require(contractLocked, \"Contract already unlocked\");\r\n        contractLocked = false;\r\n        emit contractUnlocked();\r\n    }\r\n\r\n    function withdrawnToken(address tokenAddr) external onlyOwner {\r\n        require(tokenAddr!=address(this), \"Cannot withdrawn this token\");\r\n        IERC20 TempToken = IERC20(tokenAddr);\r\n        uint256 currentBalance = TempToken.balanceOf(address(this));\r\n        require(currentBalance\u003e0, \"Insufficient balance\");\r\n        TempToken.transfer(owner(),currentBalance);\r\n        emit withdrawn(currentBalance);\r\n    }\r\n    function withdrawnWETH() external onlyOwner {\r\n        uint256 currentBalance = address(this).balance;\r\n        require(currentBalance\u003e0, \"Insufficient balance\");\r\n        payable(owner()).transfer(currentBalance);\r\n        emit withdrawn(currentBalance);\r\n    }\r\n\r\n    function updateWhiteList(address addr, bool status) external onlyOwner {\r\n        require(whiteList[addr]!=status, \"Input equal to registered value\");\r\n        whiteList[addr] = status;\r\n        emit whiteListChange(addr, status);\r\n    }\r\n    function updateTradePair(address pair, bool status) external onlyOwner {\r\n        require(tradePair[pair]!=status, \"Input equal to registered value\");\r\n        tradePair[pair] = status;\r\n        emit tradePairChange(pair, status);\r\n    }\r\n\r\n    function updateDevelopmentPair(address newDevelopmentPair) external onlyOwner {\r\n        require(developmentPairFee!=newDevelopmentPair, \"Input equal to registered value\");\r\n        require(PancakeFactory.getPair(PancakeRouter.WETH(),newDevelopmentPair)!=0x0000000000000000000000000000000000000000, \"Invalid output address\");\r\n        developmentPairFee = newDevelopmentPair;\r\n        emit developmentPairFeeChange(newDevelopmentPair);\r\n    }\r\n    function updateMarketingPair(address newMarketingPair) external onlyOwner {\r\n        require(marketingPairFee!=newMarketingPair, \"Input equal to registered value\");\r\n        require(PancakeFactory.getPair(PancakeRouter.WETH(),newMarketingPair)!=0x0000000000000000000000000000000000000000, \"Invalid output address\");\r\n        marketingPairFee = newMarketingPair;\r\n        emit marketingPairFeeChange(newMarketingPair);\r\n    }\r\n\r\n    function updateDevelopmentAddress(address developmentAddr) external onlyOwner {\r\n        require(developmentAddress!=developmentAddr, \"Input equal to registered value\");\r\n        developmentAddress = developmentAddr;\r\n        emit developmentAddressChange(developmentAddr);\r\n    }\r\n    function updateMarketingAddress(address marketingAddr) external onlyOwner {\r\n        require(marketingAddress!=marketingAddr, \"Input equal to registered value\");\r\n        marketingAddress = marketingAddr;\r\n        emit marketingAddressChange(marketingAddr);\r\n    }\r\n\r\n    function updateLiquidityAddress(address liquidityAddr) external onlyOwner {\r\n        require(block.timestamp\u003e=lastUpdateLiquidityAddress+intervalUpdateAddress, \"This function is temporarily blocked\");\r\n        liquidityAddress = liquidityAddr;\r\n        lastUpdateLiquidityAddress = block.timestamp;\r\n        emit liquidityAddressChange(liquidityAddr);\r\n    }\r\n    function extendUpdateLiquidity() external onlyOwner {\r\n        lastUpdateLiquidityAddress = block.timestamp;\r\n        emit liquidityChangeExtended();\r\n    }\r\n    function updateStakeAddress(address stakeAddr) external onlyOwner {\r\n        require(block.timestamp\u003e=lastUpdateStakeAddress+intervalUpdateAddress, \"This function is temporarily blocked\");\r\n        stakeAddress = stakeAddr;\r\n        lastUpdateStakeAddress = block.timestamp;\r\n        emit stakeAddressChange(stakeAddr);\r\n    }\r\n    function extendStakeLiquidity() external onlyOwner {\r\n        lastUpdateStakeAddress = block.timestamp;\r\n        emit stakeChangeExtended();\r\n    }\r\n\r\n    function updateDistribution(uint256 x, uint256 y, uint256 z, uint256 w) external onlyOwner {\r\n        require(block.timestamp\u003e=lastUpdateDistributionFee+intervalUpdateDistribution, \"This function is temporarily blocked\");\r\n        developmentFee  = x;\r\n        marketingFee    = y;\r\n        liquidityFee    = z;\r\n        stakeFee        = w;\r\n        distributionFee = (developmentFee+marketingFee+liquidityFee+stakeFee);\r\n        lastUpdateDistributionFee = block.timestamp;\r\n        emit distributionChange(x, y, z, w);\r\n    }\r\n    function extendUpdateDistribution() external onlyOwner {\r\n        lastUpdateDistributionFee = block.timestamp;\r\n        emit distributionChangeExtended();\r\n    }\r\n\r\n    function updateCurrentFee(uint256 newFee) external onlyOwner {\r\n        require(block.timestamp\u003e=lastUpdateFee+intervalUpdateFee, \"This function is temporarily blocked\");\r\n        require(newFee\u003c=maxFee, \"Input exceeds the maximum allowed value\");\r\n        currentFee = newFee;\r\n        lastUpdateFee = block.timestamp;\r\n        emit currentFeeChange(newFee);\r\n    }\r\n    function extendUpdateFee() external onlyOwner {\r\n        lastUpdateFee = block.timestamp;\r\n        emit currentFeeChangeExtended();\r\n    }\r\n\r\n    function updateMinSwap(uint256 newMinSwap) external onlyOwner {\r\n        require(newMinSwap\u003c=maxSwap, \"Input exceeds the maximum allowed value\");\r\n        minSwap = newMinSwap;\r\n        emit minSwapChange(newMinSwap);\r\n    }\r\n\r\n    modifier lockSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    } fallback() payable external {} receive() payable external {}\r\n\r\n    modifier onlyManager {\r\n        require(_msgSender()==owner() || _msgSender()==managerAddress, \"Access not allowed\");\r\n        _;\r\n    }\r\n\r\n}"}}