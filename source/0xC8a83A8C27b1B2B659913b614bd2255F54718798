// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PEPE20Token {
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed from, uint256 value);

    constructor() {
        name = "PEPE 2.0";
        symbol = "PEPE2.0";
        totalSupply = 1000000000 * 10 ** uint256(decimals); // 1,000,000,000 tokens con 18 decimales
        balanceOf[msg.sender] = totalSupply;
    }

    modifier hasEnoughTokens(address _from, uint256 _value) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        _;
    }

    function transfer(address _to, uint256 _value) public hasEnoughTokens(msg.sender, _value) returns (bool) {
        require(_to != address(0), "Invalid address");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public hasEnoughTokens(_from, _value) returns (bool) {
        require(_to != address(0), "Invalid address");
        require(allowance[_from][msg.sender] >= _value, "Allowance exceeded");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function burn(uint256 _value) public hasEnoughTokens(msg.sender, _value) returns (bool) {
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg.sender, _value);
        return true;
    }
}