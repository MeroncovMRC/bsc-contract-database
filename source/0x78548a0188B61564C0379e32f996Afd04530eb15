
// File: @openzeppelin/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/IERC20.sol";


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/interfaces/IPermit.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IPermit {
    function permit(
        address holder,
        address spender,
        uint256 nonce,
        uint256 expiry,
        bool allowed,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;
}

// File: contracts/interfaces/ISupport.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

interface IFactory {
    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);
}

interface IPriceAggregator {
    function swap(address)
        external
        returns (uint256 swappedAmount, address swappedToken);
}

interface IPair {
    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function token0() external view returns (address);
}

// File: contracts/interfaces/IUniswapV1Router.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function swapTokensForExactETH(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactTokensForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapETHForExactTokens(
        uint amountOut,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    // ---

    function swapExactBNBForTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function swapTokensForExactBNB(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactTokensForBNB(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapBNBForExactTokens(
        uint amountOut,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function quote(
        uint amountA,
        uint reserveA,
        uint reserveB
    ) external pure returns (uint amountB);

    function getAmountOut(
        uint amountIn,
        uint reserveIn,
        uint reserveOut
    ) external pure returns (uint amountOut);

    function getAmountIn(
        uint amountOut,
        uint reserveIn,
        uint reserveOut
    ) external pure returns (uint amountIn);

    function getAmountsOut(
        uint amountIn,
        address[] calldata path
    ) external view returns (uint[] memory amounts);

    function getAmountsIn(
        uint amountOut,
        address[] calldata path
    ) external view returns (uint[] memory amounts);
}


// File: contracts/interfaces/IUniswapV2Router.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import {IUniswapV2Router01} from "./IUniswapV1Router.sol";

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactBNBForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForBNBSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: contracts/SupremeSwapNoProxy.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import {IERC20} from "@openzeppelin/contracts/interfaces/IERC20.sol";
import {IPermit} from "./interfaces/IPermit.sol";
import {IUniswapV2Router02} from "./interfaces/IUniswapV2Router.sol";
import "./interfaces/ISupport.sol";
import {SwapParams, DEXParams, Response} from "./Types/types.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
    @notice SupremeSwap: This contract allows users to find the best path between two tokens that would give the maximum possible
    return for a swap and does the swap as well.
    @dev The path finding algorithm can be found in the form of `view` functions and rest all are related to swapping
 */
contract SupremeSwapNoProxy is ReentrancyGuard {
    event Swap(address token1, address token2, uint256 amount);
    /** 
        @notice WETH address for BSC chain
    */
    address private WETH;
    /**
        @dev MAX_DEPTH represents the maximum depth we're willing to go to find the path of trade
        E.g. Input -> Token1 -> Token2 -> Output, here depth = 2 (which is the max depth we go right now) 
    */
    uint256 private MAX_DEPTH;

    /// @notice ___gap variable to avoid storage clashes
    uint256[49] private __gap;

    /**
        @notice sets the aforementioned variables
    */
    constructor(uint256 _MAX_DEPTH, address _WETH) {
        MAX_DEPTH = _MAX_DEPTH;
        WETH = _WETH;
    }

    receive() external payable {}

    /**
        @notice Swap function that will allow us to swap the entire path of the token to reach a particular output (token)
        @dev A list of `SwapParams` struct are passed, each of which contains enough information to do a swap between a pair of tokens.
        The next SwapParams then does the next swap in the queue until all are complete and desired out tokens are received.
        @param _sParams A list of `SwapParams` struct
    */
    function swap(SwapParams[] memory _sParams) external payable nonReentrant {
        uint256 pathLength = _sParams.length;

        // Perform swap only once if array length is 1
        if (pathLength == 1) {
            _sParams[0].to = msg.sender;
            singleSwap(_sParams[0], msg.sender);
        }
        require(
            pathLength <= MAX_DEPTH,
            "SupremeSwap: Max path length exceeded"
        );

        // Perform multiple swaps
        if (pathLength > 1) {
            uint256 beforeBalance;
            uint256 afterBalance;
            for (uint64 i = 0; i < pathLength; ) {
                beforeBalance = IERC20(_sParams[i].path[1]).balanceOf(
                    address(this)
                );
                if (i == pathLength - 1) {
                    _sParams[i].to = msg.sender;
                    singleSwap(_sParams[i], address(this));
                } else if (i == 0) {
                    _sParams[i].to = address(this);
                    singleSwap(_sParams[i], msg.sender);
                    afterBalance = IERC20(_sParams[i].path[1]).balanceOf(
                        address(this)
                    );
                    _sParams[i + 1].amountIn = afterBalance - beforeBalance;
                } else {
                    _sParams[i].to = address(this);
                    singleSwap(_sParams[i], address(this));
                    afterBalance = IERC20(_sParams[i].path[1]).balanceOf(
                        address(this)
                    );
                    _sParams[i + 1].amountIn = afterBalance - beforeBalance;
                }

                unchecked {
                    i++;
                }
            }
        }
        emit Swap(
            _sParams[0].path[0],
            _sParams[pathLength - 1].path[1],
            _sParams[0].amountIn
        );
    }

    /**
        @notice Function to do one swap at a time
        @param _params A struct containing all the necessary variables to do a swap on the given pair
        @param _to The address that will be sending the tokens to this address to swap (if required, not in case of native coin)
    */
    function singleSwap(SwapParams memory _params, address _to) private {
        if (_params.isETHSwap == true) {
            if (_params.path[0] != WETH) {
                // this contract approving the router contract to spend _amountIn
                IERC20(_params.path[0]).approve(
                    address(_params.router),
                    _params.amountIn
                );
                if (_to != address(this)) {
                    IERC20(_params.path[0]).transferFrom(
                        _to,
                        address(this),
                        _params.amountIn
                    );
                }
            }
            swapEthAndToken(_params);
        } else {
            if (_to != address(this)) {
                uint256 beforeBalance = IERC20(_params.path[0]).balanceOf(
                    address(this)
                );
                IERC20(_params.path[0]).transferFrom(
                    _to,
                    address(this),
                    _params.amountIn
                );
                // Use the amount that got in the contract
                uint256 afterBalance = IERC20(_params.path[0]).balanceOf(
                    address(this)
                );
                // Check if the token supports fee on transfer or not
                if (!_params.supportFee) {
                    require(
                        (afterBalance - beforeBalance) == _params.amountIn,
                        "SupremeSwap: Invalid fee flag"
                    );
                } else {
                    _params.amountIn = afterBalance - beforeBalance;
                }
            }

            // this contract approving the router contract to spend _amountIn
            IERC20(_params.path[0]).approve(
                address(_params.router),
                _params.amountIn
            );
            swapTokenAndToken(_params);
        }
    }

    /**
        @notice A helper function do a swap between token and ETH
    */
    function swapEthAndToken(SwapParams memory _params) private {
        // Eth and token pair combinations
        if (_params.path[0] == WETH && _params.supportFee) {
            if (_params.isBNBRouterInterface) {
                _params
                    .router
                    .swapExactBNBForTokensSupportingFeeOnTransferTokens{
                    value: _params.amountIn
                }(
                    _params.amountOutMin,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            } else {
                _params
                    .router
                    .swapExactETHForTokensSupportingFeeOnTransferTokens{
                    value: _params.amountIn
                }(
                    _params.amountOutMin,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            }
        } else if (
            _params.path[0] != WETH &&
            _params.supportFee == true &&
            _params.inputExact == true
        ) {
            if (_params.isBNBRouterInterface) {
                _params
                    .router
                    .swapExactTokensForBNBSupportingFeeOnTransferTokens(
                        _params.amountIn,
                        _params.amountOutMin,
                        _params.path,
                        _params.to,
                        _params.deadline
                    );
            } else {
                _params
                    .router
                    .swapExactTokensForETHSupportingFeeOnTransferTokens(
                        _params.amountIn,
                        _params.amountOutMin,
                        _params.path,
                        _params.to,
                        _params.deadline
                    );
            }
        } else if (
            _params.path[0] == WETH && !_params.supportFee && _params.inputExact
        ) {
            if (_params.isBNBRouterInterface) {
                _params.router.swapExactBNBForTokens{value: _params.amountIn}(
                    _params.amountOutMin,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            } else {
                _params.router.swapExactETHForTokens{value: _params.amountIn}(
                    _params.amountOutMin,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            }
        } else if (
            _params.path[0] != WETH &&
            !_params.supportFee &&
            !_params.inputExact
        ) {
            if (_params.isBNBRouterInterface) {
                _params.router.swapTokensForExactBNB(
                    _params.amountOutMin,
                    _params.amountIn,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            } else {
                _params.router.swapTokensForExactETH(
                    _params.amountOutMin,
                    _params.amountIn,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            }
        } else if (
            _params.path[0] == WETH &&
            !_params.supportFee &&
            !_params.inputExact
        ) {
            if (_params.isBNBRouterInterface) {
                _params.router.swapBNBForExactTokens{value: _params.amountIn}(
                    _params.amountOutMin,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            } else {
                _params.router.swapETHForExactTokens{value: _params.amountIn}(
                    _params.amountOutMin,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            }
        } else if (
            _params.path[0] != WETH && !_params.supportFee && _params.inputExact
        ) {
            if (_params.isBNBRouterInterface) {
                _params.router.swapExactTokensForBNB(
                    _params.amountIn,
                    _params.amountOutMin,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            } else {
                _params.router.swapExactTokensForETH(
                    _params.amountIn,
                    _params.amountOutMin,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
            }
        } else {
            revert("SupremeSwap: Invalid Params");
        }
    }

    /**
        @notice A helper function do a swap between token and ETH
    */
    function swapTokenAndToken(SwapParams memory _params) private {
        // Token to token combinations
        if (_params.supportFee) {
            _params
                .router
                .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                    _params.amountIn,
                    _params.amountOutMin,
                    _params.path,
                    _params.to,
                    _params.deadline
                );
        } else if (!_params.supportFee && !_params.inputExact) {
            _params.router.swapTokensForExactTokens(
                _params.amountOutMin,
                _params.amountIn,
                _params.path,
                _params.to,
                _params.deadline
            );
        } else if (!_params.supportFee && _params.inputExact) {
            _params.router.swapExactTokensForTokens(
                _params.amountIn,
                _params.amountOutMin,
                _params.path,
                _params.to,
                _params.deadline
            );
        }
    }
}


// File: contracts/Types/types.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import {IUniswapV2Router02} from "../interfaces/IUniswapV2Router.sol";
import "../interfaces/ISupport.sol";

struct SwapParams {
    IUniswapV2Router02 router;
    bool isETHSwap;
    bool supportFee;
    bool inputExact;
    uint256 amountIn;
    uint256 amountOutMin;
    uint256 deadline;
    address[] path;
    address to;
    bool isBNBRouterInterface;
}
struct DEXParams {
    IUniswapV2Router02 router;
    IFactory factory;
}

struct Response {
    uint256 maxAmt;
    uint256 maxAmt1;
    uint256 maxAmt2;
    address[3] router;
    address pathAddr1;
    address pathAddr2;
}

