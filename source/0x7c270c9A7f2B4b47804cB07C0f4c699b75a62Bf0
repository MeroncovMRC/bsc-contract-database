{"ERC20.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\nimport \u0027./Ownable.sol\u0027;\r\nimport \u0027./SafeMath.sol\u0027;\r\n\r\ncontract ERC20 is Ownable{\r\n\tusing SafeMath for uint;\r\n\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint public decimals;\r\n\tuint public totalSupply;\r\n\tbool public canBuy;\r\n\tbool public canMint;\r\n\r\n\tmapping(address =\u003e uint) public balanceOf;\r\n\tmapping(address =\u003e mapping(address =\u003e uint)) public allowance;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed recipient, address indexed sender, uint value);\r\n\r\n\tconstructor(\r\n\t\tstring memory _name,\r\n\t\tstring memory _symbol,\r\n\t\tuint _decimals,\r\n\t\tuint _totalSupply,\r\n\t\tbool _canBuy,\r\n\t\tbool _canMint,\r\n\t\tbool _canTransferOwner,\r\n\t\taddress _owner\r\n\t) public {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tdecimals = _decimals;\r\n\t\ttotalSupply = _totalSupply;\r\n\t\tcanBuy = _canBuy;\r\n\t\tcanMint = _canMint;\r\n\t\tcanTransferOwner = _canTransferOwner;\r\n\t\towner = _owner;\r\n\t\t\r\n\t\tbalanceOf[_owner] = _totalSupply;\r\n\t\temit Transfer(address(0), _owner, _totalSupply);\r\n\t}\r\n\r\n\r\n\tfunction transfer(address to, uint value) public {\r\n\t\trequire(balanceOf[msg.sender] \u003e= value, \u0027insufficient funds\u0027);\r\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\r\n\t\tbalanceOf[to] = balanceOf[to].add(value);\r\n\t\temit Transfer(msg.sender, to, value);\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint value) public {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n\t\tbalanceOf[to] = balanceOf[to].add(value);\r\n\t\temit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address sender, uint value) public {\r\n\t\tallowance[msg.sender][sender] = value;\r\n\t\temit Approval(msg.sender, sender, value);\r\n\t}\r\n\r\n\tfunction burn(uint value) public onlyOwner {\r\n    \trequire(balanceOf[msg.sender] \u003e= value, \u0027insufficient funds\u0027);\r\n    \tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\r\n    \ttotalSupply = totalSupply.sub(value);\r\n    \temit Transfer(msg.sender, address(0), value);\r\n    }\r\n\r\n    function mint(uint value) public onlyOwner{\r\n    \ttotalSupply = totalSupply.add(value);\r\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].add(value);\r\n\t\temit Transfer(address(0), msg.sender, value);\r\n    }\r\n}"},"Ownable.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\tbool public canTransferOwner;\r\n\r\n\tconstructor() public{\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner(){\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address payable newOwner) public onlyOwner {\r\n\t\trequire(canTransferOwner, \u0027this token does not allow this change!\u0027);\r\n\t\tif(newOwner != address(0)){\r\n\t\t\towner = newOwner;\r\n\t\t}\r\n\t}\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) \u003e= x, \u0027ds-math-add-overflow\u0027);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) \u003c= x, \u0027ds-math-sub-underflow\u0027);\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \u0027ds-math-mul-overflow\u0027);\r\n    }\r\n}"}}