/**
 *Submitted for verification at BscScan.com on 2022-07-04
*/

/**
 *Submitted for verification at BscScan.com on 2022-06-29
*/

// SPDX-License-Identifier: Unlicensed
pragma solidity =0.6.12;
library SafeMath {
  /**
   * @dev Returns the addition of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `+` operator.
   *
   * Requirements:
   * - Addition cannot overflow.
   */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  /**
   * @dev Returns the multiplication of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `*` operator.
   *
   * Requirements:
   * - Multiplication cannot overflow.
   */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts with custom message when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}


interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() public  {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}
interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}



contract testToken is IERC20,Context,Ownable{
    using SafeMath for uint256;
    using Address for address;
    
    mapping (address => uint256) private _Owned;
    mapping (address => mapping (address => uint256)) private _allowances;

    address public _TechnologyAddress = address(0x5101cc14693Ed777d08ad07AC4673E0ec2190eD9);         
    address public _SpreadAddress=address(0xa522f4D21aDad782A8899ac939fC60F23ab848e7) ;
    address public _FoundationAddress=address(0x371A54F9A361945ed85686C69b00A99F7B262E2F) ;
    address public _DaoAddress=address(0x2c216E30E11e8F599C22553817a9214bCF8B9f85) ;
    address public _ZeroAddress=address(0x0000000000000000000000000000000000000000) ;

    
    

    uint public _TechnologyRate_buy=1;    
    uint public _SpreadRate_buy=0;
    uint public _FoundationRate_buy=1;    
    uint public _ZeroRate_buy=2;
    uint public _DaoRate_buy=1;

    uint public _TechnologyRate_sell=1;    
    uint public _SpreadRate_sell=6;
    uint public _FoundationRate_sell=1;    
    uint public _ZeroRate_sell=5;
    uint public _DaoRate_sell=2;

    uint public _MinAmountLimit=500000;

    address public UniswapRouterAddress=address(0x10ED43C718714eb63d5aA57B78B54704E256024E) ; // 
    address public UniswapUsdtToken=address(0x55d398326f99059fF775485246999027B3197955) ;  // 
    
    
    uint256 private _sTotal =  (1100*1000)* 10**18;    
    string private _name = "PMB Coin";
    string private _symbol = "PMB";
    uint8 private _decimals = 18;
    address[] private userLists;    

   
    bool inSwapAndLiquify;
    IUniswapV2Router02 public  uniswapV2Router;
    address public  uniswapV2Pair;    

    event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived,  uint256 tokensIntoLiqudity);    
    event evTestSwap(address from,address to, uint256 fb1,uint256 tb1,uint256 fb2,uint256 tb2);
    event evTestmsg(string ms);

     constructor  () public  {
         _Owned[_msgSender()] = _sTotal;                
      
    }
      
     
     function ProInit() external  onlyOwner
     {
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(UniswapRouterAddress);
         
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), UniswapUsdtToken);        
        uniswapV2Router = _uniswapV2Router;                        
        emit Transfer(address(0), _msgSender(), _sTotal);
     }
/***/
function ProStMinLimit(uint n) public onlyOwner
     {
         _MinAmountLimit=n;
     }

  function ProStTc_BuyRate(uint n) public onlyOwner
     {
         _TechnologyRate_buy=n;
     }
     function ProStTc_SellRate(uint n) public onlyOwner
     {
         _TechnologyRate_sell=n;
     }

  function ProStSprea_BuyRate(uint n) public onlyOwner
     {
         _SpreadRate_buy=n;
     }
     function ProStSprea_SellRate(uint n) public onlyOwner
     {
         _SpreadRate_sell=n;
     }

 function ProStFound_BuyRate(uint n) public onlyOwner
     {
         _FoundationRate_buy=n;
     }
     function ProStFound_SellRate(uint n) public onlyOwner
     {
         _FoundationRate_sell=n;
     }

 function ProStDao_BuyRate(uint n) public onlyOwner
     {
         _DaoRate_buy=n;
     }
     function ProStDao_SellRate(uint n) public onlyOwner
     {
         _DaoRate_sell=n;
     }

      function ProStZero_BuyRate(uint n) public onlyOwner
     {
         _ZeroRate_buy=n;
     }
     function ProStZero_SellRate(uint n) public onlyOwner
     {
         _ZeroRate_sell=n;
     }



     /***********/
     function ProStAdTechnologyAddress(address n) public onlyOwner
     {
         _TechnologyAddress=n;
     }
      function ProStAdSpreadAddress(address n) public onlyOwner
     {
         _SpreadAddress=n;
     }
      function ProStAdFoundationAddress(address n) public onlyOwner
     {
         _FoundationAddress=n;
     }
      function ProStAdDaoAddress(address n) public onlyOwner
     {
         _DaoAddress=n;
     }


    function name() public view returns (string memory) {
        return _name;
    }
     function ProGetRefTokenAllvalue() public view returns(uint112 a,uint112 b )
    {
        uint112 a1;
        uint112 b1;
        uint t;
         (a1,b1,t)=IUniswapV2Pair(uniswapV2Pair).getReserves();
         return (a1,b1);
    }

    function ProGetRefTokenAvalue() private view returns(uint112 a)
    {
        uint112 a1;
        uint112 b1;
        uint t;
         (a1,b1,t)=IUniswapV2Pair(uniswapV2Pair).getReserves();
         return a1;
    }
    function ProGetRefTokenBvalue() private view returns(uint112 b)
    {
        uint112 a1;
        uint112 b1;
        uint t;
         (a1,b1,t)=IUniswapV2Pair(uniswapV2Pair).getReserves();
         return b1;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
      function totalSupply() public view override returns (uint256) {
       return _sTotal;
    }
      function balanceOf(address account) public view override returns (uint256) {
          return _Owned[account];
          
    }       
      function transfer(address recipient, uint256 amount) public override returns (bool) {
       
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
     function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
     function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
     function _approve(  address owner,  address spender, uint256 amount  ) private {        
            require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }   
  
     function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
       _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
 
    receive() external payable {}
  
    
    function _transfer(address from, address to, uint256 amount ) private {
        require(amount > 0, "Transfer amount must be greater than zero");             
       require(from != address(0), "ERC20: transfer from the zero address");
       require(from != to, "ERC20: transfer Source cannot be the same");
       require(_Owned[from]>=amount,"Transfer amount must be greater than zero");
        //require(to != address(0), "ERC20: transfer to the zero address");
		uint256 oldFromPairBan=IUniswapV2Pair(uniswapV2Pair).balanceOf(from);
        uint256 oldtoPairBan=IUniswapV2Pair(uniswapV2Pair).balanceOf(to);
        
        emit evTestSwap(from, to, _Owned[from],_Owned[to],oldFromPairBan,oldtoPairBan);  
        if(from==uniswapV2Pair && to!=UniswapRouterAddress && to!=address(0))
        {
                
             
                ProBuyTransfer(from,to,amount); // buy  remove 
        } 
       
        
        else  if(to==uniswapV2Pair && from !=uniswapV2Pair && from !=UniswapRouterAddress && from!=address(0))
        {
                       // sell add 
                  ProSellTransfer(from,to,amount);                  
        }
         
         else 
         {
             
                ProBaseTransfer(from,to,amount);                                       
         }
       //ProBaseTransfer(from,to,amount);                                       
       
        
    }   
    
    function ProBaseTransfer(address from, address to, uint256 amount ) private {
            _Owned[from] = _Owned[from].sub(amount, "ERC20: transfer amount exceeds balance");
            _Owned[to] = _Owned[to].add(amount);
            emit Transfer(from, to, amount);            
    }
	
	 function ProBuyTransfer(address from, address to, uint256 amount ) private {    
            uint TotalFeeMount ;
            uint temp;
            uint resamount;
            
            _Owned[from] = _Owned[from].sub(amount, "ERC20: transfer amount exceeds balance");                            			
            
            if(_TechnologyRate_buy>0) 
            {   
                temp=amount.div(100).mul(_TechnologyRate_buy); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_TechnologyAddress] = _Owned[_TechnologyAddress].add(temp);
			    emit Transfer(from, _TechnologyAddress, temp);                              
            }

            if(_SpreadRate_buy>0) 
            {   
                temp=amount.div(100).mul(_SpreadRate_buy); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_SpreadAddress] = _Owned[_SpreadAddress].add(temp);
			    emit Transfer(from, _SpreadAddress, temp);                              
            }
              if(_FoundationRate_buy>0) 
            {   
                temp=amount.div(100).mul(_FoundationRate_buy); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_FoundationAddress] = _Owned[_FoundationAddress].add(temp);
			    emit Transfer(from, _FoundationAddress, temp);                              
            }

            if(_ZeroRate_buy>0) 
            {   
                temp=amount.div(100).mul(_ZeroRate_buy); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_ZeroAddress] = _Owned[_ZeroAddress].add(temp);
			    emit Transfer(from, _ZeroAddress, temp);                              
            }

             if(_DaoRate_buy>0) 
            {   
                temp=amount.div(100).mul(_DaoRate_buy); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_DaoAddress] = _Owned[_DaoAddress].add(temp);
			    emit Transfer(from, _DaoAddress, temp);                              
            }


             resamount=amount-TotalFeeMount;
             _Owned[to] = _Owned[to].add(resamount);
            emit Transfer(from, to, resamount);          
         
    }
     
      function ProSellTransfer(address from, address to, uint256 amount ) private {      
           
           uint TotalFeeMount ;
            uint temp;
            uint resamount;
            temp=_Owned[from]-amount;
            if(_MinAmountLimit>0)
            {
                require(temp>=_MinAmountLimit,"ERC20:Amount Min Limit");            
            }


            _Owned[from] = _Owned[from].sub(amount, "ERC20: transfer amount exceeds balance");                            			

            if(_TechnologyRate_sell>0) 
            {   
                temp=amount.div(100).mul(_TechnologyRate_sell); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_TechnologyAddress] = _Owned[_TechnologyAddress].add(temp);
			    emit Transfer(from, _TechnologyAddress, temp);                              
            }

            if(_SpreadRate_sell>0) 
            {   
                temp=amount.div(100).mul(_SpreadRate_sell); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_SpreadAddress] = _Owned[_SpreadAddress].add(temp);
			    emit Transfer(from, _SpreadAddress, temp);                              
            }
              if(_FoundationRate_sell>0) 
            {   
                temp=amount.div(100).mul(_FoundationRate_sell); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_FoundationAddress] = _Owned[_FoundationAddress].add(temp);
			    emit Transfer(from, _FoundationAddress, temp);                              
            }

            if(_ZeroRate_sell>0) 
            {   
                temp=amount.div(100).mul(_ZeroRate_sell); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_ZeroAddress] = _Owned[_ZeroAddress].add(temp);
			    emit Transfer(from, _ZeroAddress, temp);                              
            }

             if(_DaoRate_sell>0) 
            {   
                temp=amount.div(100).mul(_DaoRate_sell); 
                TotalFeeMount=TotalFeeMount+temp;
                _Owned[_DaoAddress] = _Owned[_DaoAddress].add(temp);
			    emit Transfer(from, _DaoAddress, temp);                              
            }


             resamount=amount-TotalFeeMount;
             _Owned[to] = _Owned[to].add(resamount);
            emit Transfer(from, to, resamount);          

         
             
    }
     

      

      modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }    
      
}