// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;

        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping (bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs
            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.

            bytes32 lastvalue = set._values[lastIndex];

            // Move the last value to the index where the value to delete is
            set._values[toDeleteIndex] = lastvalue;
            // Update the index for the moved value
            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }


    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    /**
     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with
     * a default value of 18.
     *
     * To select a different value for {decimals}, use {_setupDecimals}.
     *
     * All three of these values are immutable: they can only be set once during
     * construction.
     */
    constructor (string memory name_, string memory symbol_)  {
        _name = name_;
        _symbol = symbol_;
        _decimals = 18;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is
     * called.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Sets {decimals} to a value other than the default one of 18.
     *
     * WARNING: This function should only be called from the constructor. Most
     * applications that interact with token contracts will not expect
     * {decimals} to ever change, and may work incorrectly if it does.
     */
    function _setupDecimals(uint8 decimals_) internal virtual {
        _decimals = decimals_;
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}

interface IStrategy{  
    function leaveStakingAll() external;
    function excuteAll() external;
    function excute(uint, uint) external;
    function withdrawToken(address, uint) external;
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getNowBalance(address addr) external view returns (uint256);
    function totalProfit() external view returns(uint256);
    function earn() external;
}

interface IUniswapV2Pair {
    function token0() external view returns (address);
    function token1() external view returns (address);
    function totalSupply()external view returns (uint);
    function getReserves()external view returns (uint, uint, uint);
}

interface IMvpERC20 {

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
}

interface IFstswapRouterV2 {

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
    function factory() external view returns (address);    
    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);
    function pairFor(address tokenA, address tokenB) external view returns (address pair);
}

interface IFistFactory {
    function getPair(address tokenA, address tokenB) external view returns (address pair);
}

interface IReward{
    function claimReward(address, uint) external;
}

interface IOskStorage{
    function deposit(uint256) external;
    function withdraw(uint256) external;
    function withdrawAll() external;
    function balance() view external returns (uint);
}

interface IChef{
    function deposit(uint256, uint256) external;
    function depositAll(uint) external;
    function withdraw(uint,uint) external;
    function withdrawAll(uint) external;
    function getPoolApy(uint) external view returns(uint);
    function getUSD(uint) external view returns(uint);
    function getTotalLocked() external view returns(uint);
    function pendingReward(uint,address) external view returns(uint);
    function poolInfos(uint) external view returns(uint,uint,uint,uint,uint,address);
    function userInfo(address,uint) external view returns(uint, uint);
    function getStakedAmount(uint,address) external view returns(uint);
    function getTokenPrice(address) external view returns (uint256);
}

contract OSKStorage {
    address public OSK = 0x04fA9Eb295266d9d4650EDCB879da204887Dc3Da;
    mapping(address=>bool) public allowContractList;
    constructor(address _osk){
        OSK = _osk;
        allowContractList[msg.sender] = true;
    }

    function deposit(uint _amount) public{
        IMvpERC20(OSK).transferFrom(msg.sender, address(this), _amount);
    }

    function withdraw(uint _amount) public{
        require(allowContractList[msg.sender]);
        IMvpERC20(OSK).transfer(msg.sender, _amount);
    }

    function withdrawAll() public{
        withdraw(balance());
    }

    function balance() public view returns(uint){
        return IMvpERC20(OSK).balanceOf(address(this));
    }
}

contract Chef is Ownable,Pausable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    struct UserInfo {
        uint256 amount;     // How many LP tokens the user has provided.
        uint256 rewardDebt; // Reward debt. See explanation below.
    }

    // Info of each pool.
    struct PoolInfo {
        uint256 maxiAmount;
        uint256 balance;
        uint256 allocPoint;
        uint256 lastRewardBlock;
        uint256 rewardPerShare;
        IERC20 lpToken;
    }

    modifier autoComp(){
        _;
        if(isAutoComp){
            _doAllStrat();
        }
    }

    modifier notContract(){
        require((!Address.isContract(msg.sender) && msg.sender == tx.origin) || allowContractList[msg.sender], "is contract!");
        _;
    }

    uint256 public REWARD_PER_BLOCK = 0;
    uint256 public START_BLOCK = 0;
    uint public STORAGE_MAX_HOLD = 900 * 1e18;
    uint public OSK_MAX_HOLD = 1000 * 1e18;
    uint256 public oskRear;
    uint256 public oskFront;
    uint256 public oskEnd;
    uint256 public oskAmountInStorage;


    PoolInfo[] public poolInfos;
    address[] public stratList;
    address public rewardMintAddress;

    address public constant FON = 0x12a055D95855b4Ec2cd70C1A5EaDb1ED43eaeF65;
    address public constant OSK = 0x04fA9Eb295266d9d4650EDCB879da204887Dc3Da;
    address public constant BEPUSD = 0x55d398326f99059fF775485246999027B3197955;
    address public constant FSTSWAP_ROUTER = 0x1B6C9c20693afDE803B27F8782156c0f892ABC2d;
    uint public slippageFactor = 950;
    uint public biasFactor = 100;
    uint256 public totalAllocPoint = 0;
    uint public minAmount = 500;
    bool public isAutoComp = false;
    mapping(uint=>address) public oskStorageList;
    mapping(address => bool) public allowContractList;
    mapping(address => bool) public isStrategy;
    mapping(address => uint256) public poolIdIndex;
    mapping(address => address[]) public increasePaths;
    mapping(address => address[]) public decreasePaths;
    mapping (uint256 => mapping (address => UserInfo)) public userInfo;
    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event SendReward(address indexed user, uint256 indexed pid, uint256 amount);

    constructor(
    )  {
    }

    // -------- For manage pool ---------
    function add(uint256 _allocPoint, IERC20 _lpToken, uint256 _maxiAmount) public onlyOwner {
        require(poolIdIndex[address(_lpToken)] == 0, "replacement lp");
        _approveMax(address(_lpToken), FSTSWAP_ROUTER);
        massUpdatePools();
        uint256 lastRewardBlock = block.number > START_BLOCK ? block.number : START_BLOCK;
        totalAllocPoint = totalAllocPoint.add(_allocPoint);
        poolIdIndex[address(_lpToken)] = poolInfos.length + 1;
        poolInfos.push(PoolInfo({
            lpToken: _lpToken,
            allocPoint: _allocPoint,
            lastRewardBlock: lastRewardBlock,
            rewardPerShare: 0,
            balance:0,
            maxiAmount:_maxiAmount
        }));
    }

    function set(uint256 _pid, uint256 _allocPoint, uint256 _maxiAmount) public onlyOwner {
        massUpdatePools();
        totalAllocPoint = totalAllocPoint.sub(poolInfos[_pid].allocPoint).add(_allocPoint);
        poolInfos[_pid].allocPoint = _allocPoint;
        poolInfos[_pid].maxiAmount = _maxiAmount;
    }

    function setAndReApprove(uint256 _pid, uint256 _allocPoint, uint256 _maxiAmount) public onlyOwner {
        massUpdatePools();
        _approveMax(address(poolInfos[_pid].lpToken), FSTSWAP_ROUTER);
        totalAllocPoint = totalAllocPoint.sub(poolInfos[_pid].allocPoint).add(_allocPoint);
        poolInfos[_pid].allocPoint = _allocPoint;
        poolInfos[_pid].maxiAmount = _maxiAmount;
    }

    function massUpdatePools() public {
        uint256 length = poolInfos.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            updatePool(pid);
        }
    }
    
    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfos[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        uint256 lpSupply = pool.balance;
        if (lpSupply == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }
        uint256 reward = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);
        pool.rewardPerShare = pool.rewardPerShare.add(reward.mul(1e18).div(lpSupply));
        pool.lastRewardBlock = block.number;
    }
    
    function _deposit(uint256 _pid, uint256 _amount) private notContract autoComp whenNotPaused {
        PoolInfo storage pool = poolInfos[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(address(pool.lpToken)!=OSK || _amount<OSK_MAX_HOLD, "osk amount too high");
        updatePool(_pid);
        if (user.amount > 0) {
            uint256 pending = user.amount.mul(pool.rewardPerShare).div(1e18).sub(user.rewardDebt);
            if(pending > 0) {
                safeTransferReward(msg.sender, pending);
            }
        }
        if(_amount > 0) {
            if(address(pool.lpToken) == OSK && pool.lpToken.balanceOf(address(this)).add(_amount)>STORAGE_MAX_HOLD){
                _depositOsk(IERC20(OSK).balanceOf(address(this)));
            }
            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
            user.amount = user.amount.add(_amount);
            pool.balance = pool.balance.add(_amount);
        }
        require(pool.balance<pool.maxiAmount, "balance too high");
        user.rewardDebt = user.amount.mul(pool.rewardPerShare).div(1e18);
        emit Deposit(msg.sender, _pid, _amount);
    }

    function deposit(uint256 _pid, uint256 _amount)  external { 
        _deposit(_pid, _amount);
    }
    
    function depositAll(uint256 _pid) external{
        PoolInfo storage pool = poolInfos[_pid];
        _deposit(_pid, pool.lpToken.balanceOf(msg.sender));
    }
    
    function _beforeTokenWithdraw(IERC20 lpToken, uint _amount) private{
        if(address(lpToken) == OSK && _amount>lpToken.balanceOf(address(this))){
            _withdrawOsk(_amount.sub(lpToken.balanceOf(address(this))));
        }
        if(_amount > lpToken.balanceOf(address(this))){
            for(uint256 pid = 0; pid < stratList.length; ++pid) {
                IStrategy strategy = IStrategy(stratList[pid]);
                if(!isStrategy[stratList[pid]]){
                    continue;
                }
                if(strategy.token0() == address(lpToken) || strategy.token1() == address(lpToken) ){
                    strategy.withdrawToken(address(lpToken),_amount.sub(lpToken.balanceOf(address(this))));
                    if(lpToken.balanceOf(address(this)) >= _amount){
                        break;
                    }
                }
            }
        }
    }

    function _withdraw(uint256 _pid, uint256 _amount) private  notContract autoComp whenNotPaused {
        PoolInfo storage pool = poolInfos[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= _amount, "Out of user amount!");
        updatePool(_pid);
        uint256 pending = user.amount.mul(pool.rewardPerShare).div(1e18).sub(user.rewardDebt);
        if(pending > 0) {
            safeTransferReward(msg.sender, pending);
        }
        if(_amount > 0) {
            _beforeTokenWithdraw(pool.lpToken, _amount);
            user.amount = user.amount.sub(_amount);
            pool.balance = pool.balance.sub(_amount);
            pool.lpToken.safeTransfer(address(msg.sender), _amount);
        }
        user.rewardDebt = user.amount.mul(pool.rewardPerShare).div(1e18);
        emit Withdraw(msg.sender, _pid, _amount);
    }
    
    function withdraw(uint256 _pid, uint256 _amount) external {
        _withdraw(_pid, _amount);
    }

    function withdrawAll(uint256 _pid) external{
        UserInfo storage user = userInfo[_pid][msg.sender];
        _withdraw(_pid, user.amount);
    }

    function safeTransferReward(address _to, uint256 _amount) private {
        if(_amount != 0){
            IReward(rewardMintAddress).claimReward(_to, _amount);
        }
    }

    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {
        return _to.sub(_from);
    }

    function getPoolReward(uint256 _from, uint256 _to, uint256 _allocPoint) public view returns (uint) {
        uint256 multiplier = getMultiplier(_from, _to);
        uint256 amount = multiplier.mul(REWARD_PER_BLOCK).mul(_allocPoint).div(totalAllocPoint);
        return amount;
    }

    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {
        PoolInfo storage pool = poolInfos[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 rewardPerShare = pool.rewardPerShare;
        uint256 lpSupply = pool.balance;
        if (block.number > pool.lastRewardBlock && lpSupply > 0) {
            uint256 reward = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);
            rewardPerShare = rewardPerShare.add(reward.mul(1e18).div(lpSupply));
        }
        return user.amount.mul(rewardPerShare).div(1e18).sub(user.rewardDebt);
    }
    
    function poolLength() external view returns (uint256) {
        return poolInfos.length;
    }
    
    function stratLength() external view returns (uint256) {
        return stratList.length;
    }
    
    function getStakedAmount(uint _pid, address _user) public view returns (uint256) {
        UserInfo storage user = userInfo[_pid][_user];
        return user.amount;
    }

    function doAllStrat() external onlyOwner{
        _doAllStrat();
    }

    function doStratSome(address _strategy, uint _token0, uint _token1) external onlyOwner{
        if(isStrategy[_strategy]){
            IStrategy strategy = IStrategy(_strategy);
            strategy.excute(_token0, _token1);
        }
    }

    function doStrat(address _strategy) external onlyOwner{
        _doStrat(_strategy);
    }

    function withdrawOskAndDoStrat(address _strategy) external onlyOwner{
        uint bal = IERC20(OSK).balanceOf(address(this));
        if(bal != 0){
            _doStrat(_strategy);
        }
        _withdrawOsk(STORAGE_MAX_HOLD);
        _doStrat(_strategy);
    }

    function withdrawOskAndDoStratSome(address _strategy, uint _amount) external onlyOwner{
        uint bal = IERC20(OSK).balanceOf(address(this));
        if(bal != 0){
            _doStrat(_strategy);
        }
        _withdrawOsk(_amount);
        _doStrat(_strategy);
    }

    function addStratHead(address _strategy) external onlyOwner{
        for(uint256 pid = 0; pid < stratList.length; ++pid) {
            if(stratList[pid] == _strategy){
                return;
            }
        }
        IStrategy strategy = IStrategy(_strategy);
        address token0 = strategy.token0();
        address token1 = strategy.token1();
        _approveMax(token0, _strategy);
        _approveMax(token1, _strategy);
        stratList.push(address(0));
        for(uint256 pid = stratList.length-1; pid >0; --pid) {
            stratList[pid] = stratList[pid-1];
        }
        stratList[0] = _strategy;
        isStrategy[_strategy] = true;
    } 

    function addStrat(address _strategy) external onlyOwner{
        for(uint256 pid = 0; pid < stratList.length; ++pid) {
            if(stratList[pid] == _strategy){
                return;
            }
        }
        IStrategy strategy = IStrategy(_strategy);
        address token0 = strategy.token0();
        address token1 = strategy.token1();
        _approveMax(token0, _strategy);
        _approveMax(token1, _strategy);
        stratList.push(_strategy);
        isStrategy[_strategy] = true;
    } 

    function removeStrat(address _strategy) external onlyOwner{
        uint256 cnt = 0;
        for(uint256 i = 0; i < stratList.length; ++i) {
            stratList[cnt] = stratList[i];
            if(stratList[i] != _strategy){
                cnt += 1;
            }            
        }
        isStrategy[_strategy] = false;
        uint256 length = stratList.length;
        for(uint256 i = 0; i < length-cnt; ++i) {
            stratList.pop();
        }
    } 
    
    function pauseStrat(address _strategy) external onlyOwner{
        isStrategy[_strategy] = false;
    }
    
    function unpauseStrat(address _strategy) external onlyOwner{
        isStrategy[_strategy] = true;
    }

    function _safeSwapExactTokensForTokens(
        address _routerAddress,
        uint256 _amountIn,
        uint256 _slippageFactor,
        address[] memory _path,
        address _to,
        uint256 _deadline
    ) private  {
        uint256[] memory amounts =
            IFstswapRouterV2(_routerAddress).getAmountsOut(_amountIn, _path);
        uint256 amountOut = amounts[amounts.length.sub(1)];
        IFstswapRouterV2(_routerAddress)
            .swapExactTokensForTokensSupportingFeeOnTransferTokens(
            _amountIn,
            amountOut.mul(_slippageFactor).div(1000),
            _path,
            _to,
            _deadline
        );
    }

    function rebalance(uint pid) external onlyOwner{
        PoolInfo storage pool = poolInfos[pid];
        address [] storage path;
        uint nowAmount = getNowBalance(pid);
        uint initAmount = getInitBalance(pid);
        if(nowAmount > initAmount.add(minAmount)){
            uint _amount = nowAmount.sub(initAmount);
            require(initAmount.mul(biasFactor).div(1000)>_amount, "bias too big");
            path = decreasePaths[address(pool.lpToken)];
            _beforeTokenWithdraw(pool.lpToken, _amount);
            _safeSwapExactTokensForTokens(FSTSWAP_ROUTER,_amount,slippageFactor,path,address(this),block.timestamp.add(600));
        }else if(nowAmount.add(minAmount) < initAmount){
            uint _amount = (initAmount.sub(nowAmount));
            require(initAmount.mul(biasFactor).div(1000)>_amount, "bias too big");
            path = increasePaths[address(pool.lpToken)];
            uint256[] memory amounts = IFstswapRouterV2(FSTSWAP_ROUTER).getAmountsIn(_amount, path);
            uint256 amountIn = amounts[0];
            _beforeTokenWithdraw(IERC20(path[0]), amountIn);
            _safeSwapExactTokensForTokens(FSTSWAP_ROUTER,amountIn,slippageFactor,path,address(this),block.timestamp.add(600));
        }else{
            return;
        }
    }
    
    function earn() external{
        for(uint256 i = 0; i < stratList.length; ++i) {
            IStrategy strategy = IStrategy(stratList[i]);
            strategy.earn();
        }
    }

    function _approveMax(address token0, address _strategy) private{
        IERC20(token0).approve(_strategy, 0);
        IERC20(token0).approve(_strategy, type(uint).max);
    }
    
    function _doStrat(address _strategy) private{
        if(isStrategy[_strategy]){
            IStrategy strategy = IStrategy(_strategy);
            strategy.excuteAll();
        }
    }

    function _doAllStrat() private{
        for(uint256 pid = 0; pid < stratList.length; ++pid) {
            _doStrat(stratList[pid]);
        }
    }

    function _stopStrat(address _strategy) private{
        if(isStrategy[_strategy]){
            IStrategy strategy = IStrategy(_strategy);
            strategy.leaveStakingAll();
        }
    }

    function stopStrat(address _strategy) external onlyOwner{
        _stopStrat(_strategy);
    }

    function _stopStratAll() private{
        for(uint256 pid = 0; pid < stratList.length; ++pid) {
            _stopStrat(stratList[pid]);
        }
    }

    function stopStratAll() external onlyOwner{
        _stopStratAll();
    }

    function getEarnAmount(uint pid) public view returns (uint256){
        uint256 theSum = 0;
        address addr = address(poolInfos[pid].lpToken);
        for(uint256 i = 0; i < stratList.length; ++i) {
            IStrategy strategy = IStrategy(stratList[i]);
            if(strategy.token0() == addr){
                theSum = theSum.add(strategy.totalProfit().div(2));
            }
            if(strategy.token1() == addr){
                theSum = theSum.add(strategy.totalProfit().div(2));
            }
            
        }
        return theSum;
    }

    function getNowBalance(uint pid) public view returns (uint256){
        uint256 theSum = poolInfos[pid].lpToken.balanceOf(address(this));
        address addr = address(poolInfos[pid].lpToken);
        for(uint256 i = 0; i < stratList.length; ++i) {
            IStrategy strategy = IStrategy(stratList[i]);
            theSum = theSum.add(strategy.getNowBalance(addr));
        }
        if(addr == OSK){
            theSum += oskAmountInStorage;
        }
        return theSum;
    }
    
    function getInitBalance(uint pid) public view returns (uint256){
        return poolInfos[pid].balance;
    }

    function getTokenPrice(address addr) public view returns (uint256){
        IFstswapRouterV2 uniroter  = IFstswapRouterV2(address(FSTSWAP_ROUTER));
        IFistFactory factory = IFistFactory(uniroter.factory());
        if(address(addr) == address(BEPUSD)){
            return 1e18;
        }
        address _pair = factory.getPair(addr, address(BEPUSD));
        IUniswapV2Pair pair = IUniswapV2Pair(_pair);
        uint _reserve0;
        uint _reserve1;
        (_reserve0, _reserve1, ) = IUniswapV2Pair(pair).getReserves();
        if(pair.token0() == address(BEPUSD)){
            return _reserve0.mul(1e18).div(_reserve1);
        } 
        if(pair.token1() == address(BEPUSD)){
            return _reserve1.mul(1e18).div(_reserve0);
        } 
        return 0;
    }

    function getRewardUSD(uint pid) public view returns(uint256){
        return getTokenPrice(address(FON)).mul(REWARD_PER_BLOCK).mul(poolInfos[pid].allocPoint).div(totalAllocPoint).mul(15).mul(60).mul(24).mul(365);
    }
    
    function getUSD(uint pid) public view returns(uint256){
        return poolInfos[pid].balance.mul(getTokenPrice(address(poolInfos[pid].lpToken))).div(1e18);
    }
    
    function getPoolApy(uint pid) public view returns (uint256){
        return getRewardUSD(pid).div(getUSD(pid));
    }

    function getTotalLocked() public view returns (uint256){
        uint the_sum = 0;
        for(uint pid=0; pid<poolInfos.length; pid++){
            the_sum += getUSD(pid);
        }
        return the_sum;
    }

    function _depositOsk(uint _amount) private{
        if(_amount != 0 ){
            oskAmountInStorage = oskAmountInStorage.add(_amount);
            IOskStorage(oskStorageList[oskRear]).deposit(_amount);
            oskRear++;
        }
    }
    
    function depositOsk(uint _amount) external onlyOwner{
        _depositOsk(_amount);
    }

    function _withdrawOsk(uint _amount) private{
        uint i;
        uint rest = _amount;
        for(i=oskFront;i<oskRear;i++){
            uint bal =IOskStorage(oskStorageList[i]).balance();
            if(rest<bal){
                IOskStorage(oskStorageList[i]).withdraw(rest);
                rest = 0;
                break;
            }else{
                IOskStorage(oskStorageList[i]).withdrawAll();
                rest -= bal;
            }
        }
        oskFront = i;
        oskAmountInStorage = oskAmountInStorage.sub(_amount).add(rest);
    }
    
    function withdrawOsk(uint _amount) external onlyOwner{
        _withdrawOsk(_amount);
    }

    function createStorage() public{
        address s = address(new OSKStorage(OSK));
        oskStorageList[oskEnd] = s;
        oskEnd ++ ;
        IERC20(OSK).approve(s, type(uint).max);
    }

    function readOskQueueAmount() public view returns(uint the_sum){
        for(uint i=oskFront; i<oskRear; i++){
            the_sum += IOskStorage(oskStorageList[i]).balance();
        }
    }

    function setAllowContract(address _cocntract) external onlyOwner{
        allowContractList[_cocntract] = true;
    }

    function setAutoComp(bool _flg) external onlyOwner{
        isAutoComp = _flg;
    }

    function setRewardMintAddress(address _address) external onlyOwner{
        rewardMintAddress = _address;
    }

    function setAll(uint256[]calldata _pids, uint256[]calldata _allocPoints) public onlyOwner{
        require(_pids.length == _allocPoints.length && _pids.length == poolInfos.length);
        massUpdatePools();
        totalAllocPoint = 0;
        for(uint i=0; i<_pids.length; i++){
            totalAllocPoint += _allocPoints[i];
            poolInfos[_pids[i]].allocPoint = _allocPoints[i];
        }
    }

    function setAll(uint256[]calldata _pids, uint256[]calldata _allocPoints, uint256 _rewardPerBlock) public onlyOwner{
        require(_pids.length == _allocPoints.length && _pids.length == poolInfos.length);
        massUpdatePools();
        totalAllocPoint = 0;
        for(uint i=0; i<_pids.length; i++){
            totalAllocPoint += _allocPoints[i];
            poolInfos[_pids[i]].allocPoint = _allocPoints[i];
        }
        setRewardPerBlock(_rewardPerBlock);
    }

    function setMinAmount(uint _minAmount) external onlyOwner{
        minAmount = _minAmount;
    }

    function setRewardPerBlock(uint256 _rewawrdPerBlock) public onlyOwner{
        massUpdatePools();
        REWARD_PER_BLOCK = _rewawrdPerBlock;
    }

    function setSlippageFactor(uint _slippageFactor) external onlyOwner{
        require(_slippageFactor>800,"slippageFactor too low");
        slippageFactor = _slippageFactor;
    }

    function setIncreasePath(address _token, address [] calldata _path) external onlyOwner{
        require(_token == _path[_path.length.sub(1)], "error increase path");
        increasePaths[_token] = _path;
    }

    function setDecreasePath(address _token, address [] calldata _path) external onlyOwner{
        require(_token == _path[0], "error decrease path");
        decreasePaths[_token] = _path;
    }

    function setBiasFactor(uint _biasFactor) external onlyOwner{
        biasFactor = _biasFactor;
    }

    function pause() external onlyOwner{
        _pause();
    }

    function unpause() external onlyOwner{
        _unpause();
    }
}