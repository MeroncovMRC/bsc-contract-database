// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(account) }
        return size > 0;
    }
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }
    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= weiValue, "Address: insufficient balance for call");
        require(!isContract(target), "Address: call to non-contract");
            (bool success, bytes memory returndata) = target.call{value: weiValue}(data);
    if (success) {
        return returndata;
    } else {
        if (returndata.length > 0) {
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
 }

}

contract FTHRefund {
    using SafeMath for uint256;
    using Address for address;

    address public owner;
    IERC20 public fthToken;
    uint256 public constant rate = 300000000; // 0.000000000000030000 BNB per token
    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;

    mapping(address => uint256) public eligibleHolders;

    constructor() {
        owner = msg.sender;
        fthToken = IERC20(0xd51D0e1A1cea1d1fa144B7327730fa001F984874);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    function fundContract() external payable onlyOwner {}

    function addEligibleHolders(address[] calldata holders, uint256[] calldata balances) external onlyOwner {
        require(holders.length == balances.length, "Holders and balances arrays must have the same length");

        for (uint256 i = 0; i < holders.length; i++) {
            eligibleHolders[holders[i]] = balances[i];
        }
    }

    function refundTokens(uint256 tokensToRefund) external {
        require(eligibleHolders[msg.sender] >= tokensToRefund, "Not eligible for refund or amount exceeds snapshot balance");

        uint256 bnbAmount = tokensToRefund * rate / (10 ** 18);
        require(address(this).balance >= bnbAmount, "Insufficient BNB balance in the contract");

        fthToken.transferFrom(msg.sender, BURN_ADDRESS, tokensToRefund);
        payable(msg.sender).transfer(bnbAmount);

        // Reduce the eligible holder's balance only if it's necessary
        if (eligibleHolders[msg.sender] != type(uint256).max) {
            eligibleHolders[msg.sender] = eligibleHolders[msg.sender].sub(tokensToRefund);
        }
    }

    function withdrawRemainingBNB() external onlyOwner {
        payable(owner).transfer(address(this).balance);
    }
}