// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

// ERC20 contract interface
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

// FatGoose token contract
contract FatGoose is IERC20 {
    string public name = "FatGoose";
    string public symbol = "FATG";
    uint8 public decimals = 18;
    uint256 public totalSupply = 69000000000 * 10 ** uint256(decimals);

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowances;
    mapping(address => uint256) public voteWeight;
    mapping(address => mapping(uint256 => bool)) public hasVoted;
    mapping(uint256 => uint256) public proposalVoteCount;
    uint256 public totalProposals;
    uint256 public votingPeriod = 7 days;

    constructor() {
        balances[msg.sender] = totalSupply;
        voteWeight[msg.sender] = totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(amount <= balances[msg.sender], "Insufficient balance");

        balances[msg.sender] -= amount;
        balances[recipient] += amount;

        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        allowances[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(amount <= balances[sender], "Insufficient balance");
        require(amount <= allowances[sender][msg.sender], "Insufficient allowance");

        balances[sender] -= amount;
        balances[recipient] += amount;
        allowances[sender][msg.sender] -= amount;

        emit Transfer(sender, recipient, amount);
        return true;
    }

    function createProposal(uint256 proposalId) external {
        require(!hasVoted[msg.sender][proposalId], "Already voted on this proposal");
        require(proposalId > totalProposals, "Invalid proposal ID");

        hasVoted[msg.sender][proposalId] = true;
        proposalVoteCount[proposalId] += voteWeight[msg.sender];
        totalProposals++;
    }

    function voteOnProposal(uint256 proposalId) external {
        require(hasVoted[msg.sender][proposalId], "Has not voted on this proposal");
        require(proposalId <= totalProposals, "Invalid proposal ID");

        uint256 votes = proposalVoteCount[proposalId];
        require(votes > 0, "No votes recorded for this proposal");

        // Perform necessary actions based on the outcome of the vote
        // Add your logic here

        // Reset vote for the proposal
        delete hasVoted[msg.sender][proposalId];
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}