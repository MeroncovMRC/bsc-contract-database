// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract KITA is IBEP20 {
    string public name = "Kita Inu";
    string public symbol = "KITA";
    uint256 public totalSupply = 1_000_000_000_000_000 * 10 ** 18;
    uint8 public decimals = 18;
    
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    address private _owner;
    address private _liquidityWallet;
    address private _burnAddress;
    address private _charityWallet;
    address private _marketingWallet;
    
    uint256 private constant _taxPercentage = 8;
    uint256 private constant _liquidityFeePercentage = 5;
    uint256 private constant _burnFeePercentage = 1;
    uint256 private constant _charityFeePercentage = 1;
    uint256 private constant _marketingFeePercentage = 1;
    
    constructor() {
        _owner = msg.sender;
        _liquidityWallet = address(0x1ffBd10BCf98A7263BFaC088b39A0bc853B3F851);
        _burnAddress = address(0x3c547862a3690B48b105a0868e25155cBe4AF508);
        _charityWallet = address(0xA67dE2b8c36848802b711D551c23935d987ABBEd);
        _marketingWallet = address(0x9488cA8E59D7D68a63babB98Cb722AA7fcda3dfc);
        
        _balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    
    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }
    
    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(_balances[sender] >= amount, "Insufficient balance");

        uint256 taxAmount = (amount * _taxPercentage) / 100;
        uint256 liquidityFee = (amount * _liquidityFeePercentage) / 100;
        uint256 burnFee = (amount * _burnFeePercentage) / 100;
        uint256 charityFee = (amount * _charityFeePercentage) / 100;
        uint256 marketingFee = (amount * _marketingFeePercentage) / 100;

        uint256 transferAmount = amount - taxAmount;
        uint256 tokensToBurn = (burnFee * transferAmount) / 100;
        uint256 tokensForLiquidity = (liquidityFee * transferAmount) / 100;
        uint256 tokensForCharity = (charityFee * transferAmount) / 100;
        uint256 tokensForMarketing = (marketingFee * transferAmount) / 100;
        
        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        _balances[_burnAddress] += tokensToBurn;
        _balances[_liquidityWallet] += tokensForLiquidity;
        _balances[_charityWallet] += tokensForCharity;
        _balances[_marketingWallet] += tokensForMarketing;
        
        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, _burnAddress, tokensToBurn);
        emit Transfer(sender, _liquidityWallet, tokensForLiquidity);
        emit Transfer(sender, _charityWallet, tokensForCharity);
        emit Transfer(sender, _marketingWallet, tokensForMarketing);
    }
    
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    // Auto liquidity functionality
    function autoLiquidity() external {
        uint256 contractTokenBalance = _balances[address(this)];
        require(contractTokenBalance > 0, "No tokens available in the contract");
        
        uint256 liquidityTokens = (contractTokenBalance * _liquidityFeePercentage) / 100;
        uint256 marketingTokens = (contractTokenBalance * _marketingFeePercentage) / 100;
        
        _balances[address(this)] -= liquidityTokens;
        _balances[_liquidityWallet] += liquidityTokens;
        _balances[address(this)] -= marketingTokens;
        _balances[_marketingWallet] += marketingTokens;
        
        emit Transfer(address(this), _liquidityWallet, liquidityTokens);
        emit Transfer(address(this), _marketingWallet, marketingTokens);
    }
    
    // Auto burn functionality
    function autoBurn() external {
        uint256 contractTokenBalance = _balances[address(this)];
        require(contractTokenBalance > 0, "No tokens available in the contract");
        
        uint256 burnTokens = (contractTokenBalance * _burnFeePercentage) / 100;
        
        _balances[address(this)] -= burnTokens;
        _balances[_burnAddress] += burnTokens;
        
        emit Transfer(address(this), _burnAddress, burnTokens);
    }
    
    // Charity functionality
    function donateToCharity(uint256 amount) external {
        require(amount > 0, "Donation amount must be greater than zero");
        require(_balances[msg.sender] >= amount, "Insufficient balance");

        uint256 charityTokens = (amount * _charityFeePercentage) / 100;
        
        _balances[msg.sender] -= amount;
        _balances[_charityWallet] += charityTokens;
        
        emit Transfer(msg.sender, _charityWallet, charityTokens);
    }
    
    // Marketing functionality
    function donateToMarketing(uint256 amount) external {
        require(amount > 0, "Donation amount must be greater than zero");
        require(_balances[msg.sender] >= amount, "Insufficient balance");

        uint256 marketingTokens = (amount * _marketingFeePercentage) / 100;
        
        _balances[msg.sender] -= amount;
        _balances[_marketingWallet] += marketingTokens;
        
        emit Transfer(msg.sender, _marketingWallet, marketingTokens);
    }
}