// File: contracts/interfaces/IERC20.sol


pragma solidity >=0.5.0;

interface IERC20 {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);
}

// File: @pancakeswap/pancake-swap-lib/contracts/GSN/Context.sol



pragma solidity >=0.4.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor() internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @pancakeswap/pancake-swap-lib/contracts/access/Ownable.sol



pragma solidity >=0.4.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: @uniswap/lib/contracts/libraries/TransferHelper.sol



pragma solidity >=0.6.0;

// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false
library TransferHelper {
    function safeApprove(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::safeApprove: approve failed'
        );
    }

    function safeTransfer(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::safeTransfer: transfer failed'
        );
    }

    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::transferFrom: transferFrom failed'
        );
    }

    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}(new bytes(0));
        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');
    }
}

// File: contracts/Reward.sol



pragma solidity 0.6.12;




contract Reward is Ownable {
    address public devAddress;
    address public rewardToken;
    uint256 MAX_AMOUNT_SVC = 100 * 5 ether;
    uint256 MAX_AMOUNT_BNB = 0.001 * 5 ether;

    event RewardEvent(address indexed, uint256 amountSVC, uint256 amountBNB);

    constructor(address _rewardToken, address _devAddress) public {
        rewardToken = _rewardToken;
        devAddress = _devAddress;
    }

    modifier onlyDev() {
        require(
            devAddress == msg.sender,
            "Permisition Error: caller is not the dev"
        );
        _;
    }

    function reward(
        address recipient,
        uint256 amountSVC,
        uint256 amountBNB
    ) external onlyDev returns (bool success) {
        // rewardToken.transferFrom(REWARD_WALLET, recipient, amountSVC);
        // payable(recipient).transfer(amountBNB);
        require(amountSVC <= MAX_AMOUNT_SVC, "Reward Quiz: amountSVC too much");
        require(amountBNB <= MAX_AMOUNT_BNB, "Reward Quiz: amountBNB too much");
        TransferHelper.safeTransfer(rewardToken, recipient, amountSVC);
        TransferHelper.safeTransferETH(recipient, amountBNB);
        RewardEvent(recipient, amountSVC, amountBNB);
        return true;
    }

    function withdrawAll() external onlyOwner returns (bool success) {
        TransferHelper.safeTransfer(
            rewardToken,
            msg.sender,
            getBalanceTokenReward()
        );
        TransferHelper.safeTransferETH(msg.sender, address(this).balance);
        return true;
    }

    function setDevAddress(address newDevAddress) public onlyOwner {
        require(
            newDevAddress != address(0),
            "DevAddress: new devAddress is the zero address"
        );
        devAddress = newDevAddress;
    }

    function setReward(address newReward) public onlyOwner {
        require(
            newReward != address(0),
            "DevAddress: new reward is the zero address"
        );
        rewardToken = newReward;
    }

    function getBalanceTokenReward() public view returns (uint256) {
        IERC20 t = IERC20(rewardToken);
        return (t.balanceOf(address(this)));
    }

    function getBalanceETH() external view returns (uint256) {
        return address(this).balance;
    }

    receive() external payable {}
}