{"DDC33.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\r\n// DuckTech Contracts (Default Duck Coin) 1.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ncontract DDC33 is IERC20{\r\n\r\n    //GENERIC VARIABLES\r\n    bool internal locked;\r\n    bool public isIssuing;\r\n    bool public isFarmingEnabled;\r\n    bool public firstFarmingWinMore;\r\n    address public COINAdminAddress;\r\n    address public investmentcurrencyaddress;\r\n    address public treasuryOwner;\r\n    address public projectOwner;\r\n    address public defaultInviterAddress;\r\n    uint256 public lastResetedLetFarm;\r\n    uint256 public percentageToUnlockToFarm;\r\n    uint256 public treasuryOnLastAnnounce;\r\n    uint256 public issuancePrice;\r\n    uint256 public sponsoredPricePercentage;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    string private _onlyadmin = \"Only the admin\";\r\n    mapping(address =\u003e uint256) public lastFarmed;\r\n    mapping(address =\u003e address) public inviteSponsor;\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e uint256) public receivedThisTurn;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    //TARIFF VARIABLES\r\n    uint256 public investSponsorTax;\r\n    uint256 public transactionSponsorTax;\r\n    uint256 public farmSponsorTax;\r\n    TaxCollector[] public investTaxCollectors;\r\n    TaxCollector[] public transactionTaxCollectors;\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        bool isFarmingEnabled_,\r\n        bool isIssuing_,\r\n        bool firstFarmingWinMore_,\r\n        uint256 percentageToUnlockToFarm_,\r\n        uint256 issuancePrice_,\r\n        uint256 sponsoredPricePercentage_,\r\n        uint256 investSponsorTax_,\r\n        uint256 transactionSponsorTax_,\r\n        uint256 farmSponsorTax_\r\n\r\n        ) {\r\n        investSponsorTax = investSponsorTax_;\r\n        transactionSponsorTax = transactionSponsorTax_;\r\n        farmSponsorTax = farmSponsorTax_;\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        COINAdminAddress = msg.sender;\r\n        treasuryOwner =  address(this);\r\n        projectOwner =  msg.sender;\r\n        isFarmingEnabled = isFarmingEnabled_;\r\n        isIssuing = isIssuing_;\r\n        firstFarmingWinMore = firstFarmingWinMore_;\r\n        defaultInviterAddress = address(this);\r\n        percentageToUnlockToFarm = percentageToUnlockToFarm_;\r\n        issuancePrice = issuancePrice_;\r\n        sponsoredPricePercentage = sponsoredPricePercentage_;\r\n    }    \r\n    fallback() external payable{}\r\n    receive() external payable{}\r\n    //STRUCTS\r\n    struct TaxCollector{\r\n        address collectorAddres;\r\n        uint256 taxPercentage;\r\n    }\r\n    //MODIFIERS\r\n    modifier noReentrant{\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n    //EVENTS\r\n    event Farm(address indexed investor);\r\n    //INTERNAL FUNCTIONS\r\n    function _sendIssuedCoins(uint256 amount) internal returns(bool){\r\n        _mint(msg.sender, (amount / issuancePrice)*(10**decimals()));\r\n        return true;\r\n    }\r\n    function _receiveInvestment(uint256 amount) internal returns(bool){\r\n        uint256 remaining_amount = amount;\r\n        for (uint256 i = 0; i \u003c investTaxCollectors.length; i++) {\r\n            uint256 tax = amount*investTaxCollectors[i].taxPercentage/1000;\r\n            remaining_amount -= tax;\r\n            require(IERC20(investmentcurrencyaddress).transferFrom(msg.sender, investTaxCollectors[i].collectorAddres, tax));\r\n        }\r\n        if(inviteSponsor[msg.sender] == address(0)){\r\n            uint256 tax = amount*investSponsorTax/1000;\r\n            remaining_amount -= tax;\r\n            require(IERC20(investmentcurrencyaddress).transferFrom(msg.sender, defaultInviterAddress, tax));\r\n        }else{\r\n            uint256 tax = amount*investSponsorTax/1000;\r\n            remaining_amount -= tax;\r\n            require(IERC20(investmentcurrencyaddress).transferFrom(msg.sender, inviteSponsor[msg.sender], tax));\r\n        }\r\n        require(IERC20(investmentcurrencyaddress).transferFrom(msg.sender, treasuryOwner, remaining_amount));\r\n        return true;\r\n    }\r\n    \r\n    //ADMIN FUNCTIONS\r\n    function adm_addInvestTaxCollectors(address _collectorAddres, uint256 _taxPercentage) external returns(bool)\r\n    {\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        investTaxCollectors.push(TaxCollector(_collectorAddres, _taxPercentage));\r\n        return true;\r\n    }\r\n    function adm_addTransactionTaxCollectors(address _collectorAddres, uint256 _taxPercentage) external returns(bool)\r\n    {\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        transactionTaxCollectors.push(TaxCollector(_collectorAddres, _taxPercentage));\r\n        return true;\r\n    }\r\n    function adm_editInvestTaxCollectors(uint256 ID, address _collectorAddres, uint256 _taxPercentage) external returns(bool){\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        investTaxCollectors[ID].collectorAddres = _collectorAddres;\r\n        investTaxCollectors[ID].taxPercentage = _taxPercentage;\r\n        return true;\r\n    }\r\n    function adm_editTransactionTaxCollectors(uint256 ID, address _collectorAddres, uint256 _taxPercentage) external returns(bool){\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        transactionTaxCollectors[ID].collectorAddres = _collectorAddres;\r\n        transactionTaxCollectors[ID].taxPercentage = _taxPercentage;\r\n        return true;\r\n    }\r\n    function adm_mint(address account, uint256 amount) external{\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        _mint(account, amount);\r\n    }\r\n    function adm_burn(address account, uint256 amount) external{\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        _burn(account, amount);\r\n    }\r\n    function adm_changeAdmin(address newAdmin) external returns(address)\r\n    {\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        COINAdminAddress = newAdmin;\r\n        return COINAdminAddress;\r\n    }\r\n    function adm_changeprojectOwner(address newOwner) external returns(address)\r\n    {\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        projectOwner = newOwner;\r\n        return projectOwner;\r\n    }\r\n    function adm_changeTreasuryOwner(address newtreasuryOwner) external returns(address)\r\n    {\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        treasuryOwner = newtreasuryOwner;\r\n        return treasuryOwner;\r\n    }\r\n    function adm_changedefaultInviterAddress(address newdefaultInviterAddress) external returns(address)\r\n    {\r\n        require(msg.sender == COINAdminAddress, _onlyadmin);\r\n        defaultInviterAddress = newdefaultInviterAddress;\r\n        return defaultInviterAddress;\r\n    }\r\n    // ADMIN TREASURY FUNCTIONS\r\n    function adm_changesponsoredPricePercentage(uint256 newsponsoredPricePercentage) external returns(uint256)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        sponsoredPricePercentage = newsponsoredPricePercentage;\r\n        return sponsoredPricePercentage;\r\n    }\r\n    function adm_changeinvestSponsorTax(uint256 newinvestSponsorTax) external returns(uint256)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        investSponsorTax = newinvestSponsorTax;\r\n        return investSponsorTax;\r\n    }\r\n    function adm_changefarmingSponsorTax(uint256 newfarmSponsorTax) external returns(uint256)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        farmSponsorTax = newfarmSponsorTax;\r\n        return investSponsorTax;\r\n    }\r\n    function adm_changetransactionSponsorTax(uint256 newtransactionSponsorTax) external returns(uint256)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        transactionSponsorTax = newtransactionSponsorTax;\r\n        return transactionSponsorTax;\r\n    }\r\n    function adm_announceCoinDividends(uint256 amount) external returns(bool)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        _transfer(msg.sender, treasuryOwner, amount);\r\n        treasuryOnLastAnnounce = getAmountInTreasury();\r\n        require(adm_letAllGoFarm());\r\n        return true;\r\n    }\r\n    function adm_changeisIssuing(bool newIsIssuing) external returns(bool)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        isIssuing = newIsIssuing;\r\n        return isIssuing;\r\n    }\r\n    function adm_changeInvestmentcurrencyaddress(address newinvestmentcurrencyaddress) external returns(bool)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        investmentcurrencyaddress = newinvestmentcurrencyaddress;\r\n        return true;\r\n    }\r\n    function adm_changeIssuancePrice(uint256 newIssuancePrice) external returns(bool)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        issuancePrice = newIssuancePrice;\r\n        return true;\r\n    }\r\n    function adm_changeisFarmingEnabled(bool newisFarmingEnabled) external returns(bool)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        isFarmingEnabled = newisFarmingEnabled;\r\n        return true;\r\n    }\r\n    function adm_changefirstFarmingWinMore(bool newfirstFarmingWinMore) external returns(bool)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        firstFarmingWinMore = newfirstFarmingWinMore;\r\n        return true;\r\n    }\r\n    function adm_changePercentageToUnlockToFarm(uint256 newPercentageToUnlockToFarm) external returns(bool)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        percentageToUnlockToFarm = newPercentageToUnlockToFarm;\r\n        return true;\r\n    }\r\n    function adm_withdraw(uint256 amount) external returns(bool)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        require(IERC20(investmentcurrencyaddress).transfer(msg.sender, amount), \"Error on payment\");\r\n        return true;\r\n    }\r\n    function adm_letAllGoFarm() public returns(bool)\r\n    {\r\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\r\n        lastResetedLetFarm = block.number;\r\n        return true;\r\n    }\r\n    //INVESTORS FUNCTION\r\n    function createAccountWithSponsor(address sponsorAddress)external returns(bool){\r\n        require(inviteSponsor[msg.sender] == address(0), \"You already have an account\");\r\n        require(inviteSponsor[msg.sender] != msg.sender);\r\n        inviteSponsor[msg.sender] = sponsorAddress;\r\n        return true;\r\n    }\r\n    function createAccountWithoutSponsor()external returns(bool){\r\n        require(inviteSponsor[msg.sender] == address(0), \"You already have an account\");\r\n        inviteSponsor[msg.sender] = defaultInviterAddress;\r\n        return true;\r\n    }\r\n    function invest(uint256 amount) external noReentrant returns(bool) \r\n    {\r\n        require(isIssuing, \"Now we are NOT issuing new coins!\");\r\n        require(_receiveInvestment(amount), \"ERROR TO RECEIVE\");\r\n        if(inviteSponsor[msg.sender] == address(0)){\r\n            require(_sendIssuedCoins(amount), \"ERROR TO SEND\");\r\n        }else{\r\n            require(_sendIssuedCoins(amount/sponsoredPricePercentage/1000), \"ERROR TO SEND\");\r\n        }\r\n        return true;\r\n    }\r\n    function farm() external noReentrant returns(bool) {\r\n        require(isFarmingEnabled, \"Farming is Disabled\");\r\n        require(lastFarmed[msg.sender] \u003c lastResetedLetFarm, \"Already Farmed\");\r\n        lastFarmed[msg.sender] = block.number;\r\n        uint256 amountFarm;\r\n        uint256 originBalance;\r\n        if(receivedThisTurn[msg.sender]\u003c=balanceOf(msg.sender)){\r\n            originBalance = (balanceOf(msg.sender)-receivedThisTurn[msg.sender]);\r\n            if(firstFarmingWinMore){\r\n                amountFarm = ((((originBalance*(10**decimals())) / totalSupply()) * percentageToUnlockToFarm)/1000) * getAmountInTreasury() /(10**decimals());\r\n            }else{\r\n                amountFarm = ((((originBalance*(10**decimals())) / totalSupply()) * percentageToUnlockToFarm)/1000) * treasuryOnLastAnnounce /(10**decimals());\r\n            }\r\n            uint256 sponsorTax = amountFarm*farmSponsorTax/1000;\r\n            uint256 remainingFarm = amountFarm - sponsorTax;\r\n            _transfer(treasuryOwner,inviteSponsor[msg.sender], sponsorTax);\r\n            _transfer(treasuryOwner,msg.sender, remainingFarm);\r\n        }\r\n        receivedThisTurn[msg.sender] = 0;\r\n        emit Farm(msg.sender);\r\n        return true;\r\n    }\r\n    //GENERIC FUNCTIONS\r\n    function getAmountInTreasury() public view returns(uint256){\r\n        return balanceOf(treasuryOwner);\r\n    }\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n        uint256 remaining_amount = amount;\r\n        for (uint256 i = 0; i \u003c transactionTaxCollectors.length; i++) {\r\n            uint256 tax = amount*transactionTaxCollectors[i].taxPercentage/1000;\r\n            remaining_amount -= tax;\r\n            _transfer(owner, transactionTaxCollectors[i].collectorAddres, tax);\r\n        }\r\n        address validSponsor;\r\n        if(inviteSponsor[msg.sender] == address(0)){\r\n            validSponsor = defaultInviterAddress;\r\n        }else{\r\n            validSponsor = inviteSponsor[msg.sender];\r\n        }\r\n        uint256 sponsorTax = amount*transactionSponsorTax/1000;\r\n        remaining_amount -= sponsorTax;\r\n        _transfer(owner, validSponsor, sponsorTax);\r\n\r\n        _transfer(owner, to, remaining_amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n\r\n        uint256 remaining_amount = amount;\r\n        for (uint256 i = 0; i \u003c transactionTaxCollectors.length; i++) {\r\n            uint256 tax = amount*transactionTaxCollectors[i].taxPercentage/1000;\r\n            remaining_amount -= tax;\r\n            _transfer(from, transactionTaxCollectors[i].collectorAddres, tax);\r\n        }\r\n        \r\n        address validSponsor;\r\n        if(inviteSponsor[from] == address(0)){\r\n            validSponsor = defaultInviterAddress;\r\n        }else{\r\n            validSponsor = inviteSponsor[from];\r\n        }\r\n        uint256 sponsorTax = amount*transactionSponsorTax/1000;\r\n        remaining_amount -= sponsorTax;\r\n        _transfer(from, validSponsor, sponsorTax);\r\n        _transfer(from, to, remaining_amount);\r\n        return true;\r\n    }\r\n    function get_receivedThisTurn(address account) public view returns(uint256){\r\n        return receivedThisTurn[account];\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view  returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to_, uint256 amount) internal {\r\n        address to;\r\n        if(to_ == address(0)){\r\n            to = treasuryOwner;\r\n        }else{\r\n            to = to_;\r\n        }\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        receivedThisTurn[to] += amount;\r\n        _beforeTokenTransfer(from, to, amount);\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0));\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0));\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal {}\r\n    //CONTEXT FUNCTIONS\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal pure returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}"}}