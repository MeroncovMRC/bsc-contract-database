/**
 *Submitted for verification at BscScan.com on 2023-05-03
*/

/**
 *Submitted for verification at BscScan.com on 2023-04-03
*/

// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;

interface BEP20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address tokenOwner) external view returns (uint balance);
    function allowance(address tokenOwner, address spender) external view returns (uint remaining);
    function transfer(address to, uint tokens) external returns (bool success);
    function approve(address spender, uint tokens) external returns (bool success);
    function transferFrom(address from, address to, uint tokens) external returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract HotshotGame {
    using SafeMath for uint256;
    BEP20 public busd = BEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    struct Player {
        address referrer;
        bool isReg;
    }
    mapping(address => Player) public players;
    address feeReceiver = 0x7c05Df3d053172A85B15C0b25d790079b32771C9;
    address owner;
    modifier onlyAdmin(){
        require(msg.sender == owner,"You are not authorized.");
        _;
    }
    constructor() public {
        owner = msg.sender;
    }
    
    function register(uint256 _amt) public {
        require(_amt == 2e18, "Invalid Amount");
        require(players[msg.sender].isReg == false, "Already registered");
        busd.transferFrom(msg.sender, address(this), _amt);
        busd.transfer(feeReceiver,_amt);
        players[msg.sender].isReg = true;
    }
    function deposit(uint256 _amt) public {
        require(_amt >= 1e18, "Invalid Amount");
        require(players[msg.sender].isReg == true, "Please register first");
        busd.transferFrom(msg.sender, address(this), _amt);
        busd.transfer(feeReceiver,_amt);
    }
    
    function unstake(address buyer,uint _amount) public returns(uint){
        require(msg.sender == owner,"You are not staker.");
        busd.transfer(buyer,_amount);
        return _amount;
    }
    
}  

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}