/*

Copyright Hodl Finance 2022.

HFT Router

*/

//SPDX-License-Identifier:Unlicensed
pragma solidity 0.8.4;

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract HftRouter is Ownable {
	struct Route {
		uint256 weight;
		address wallet;
	}

    uint256 constant DECIMAL_FACTOR = 100;
	Route[] public routes;

	/***********************************************************
	*****************  VIEW Functions **************************
	************************************************************/

	function totalWeightConfigured() public view returns(uint256 _totalWeight) {
		for (uint i = 0; i < routes.length; i++) {
			_totalWeight += routes[i].weight;
		}
	}

	/***********************************************************
	***************** Functions ********************************
	************************************************************/

	function addNewRoute(address _wallet, uint256 _weight) external onlyOwner{
		require((totalWeightConfigured() + _weight) <= 100, "Total weight exceeds 100%");
		require (routes.length < 5, "Too much routes");
		//first distibute collected balance
		doRouting();		
		routes.push(Route({
				weight: _weight,
                wallet: _wallet
            }));
	}

	function removeRoute(address _wallet) external onlyOwner{
		uint256 idx = 99;
		//first distibute collected balance
		doRouting();
		for (uint i = 0; i < routes.length; i++) {
			if (routes[i].wallet == _wallet) {
				idx = i;
				//remove record				
				routes[i] = routes[routes.length-1];
				routes.pop();
				return;
			}
		}
	}

    /**
     * @dev transfer complete balance to routing wallets
     *
     * Note none
     */
	function doRouting() public {
		if (routes.length > 0) {
            uint256 totalBalance = address(this).balance;
            uint256 totalWeight = totalWeightConfigured();
			if (totalBalance > 0) {
				uint256 transferredBalance;
				for (uint i = 0; i < routes.length-1; i++) {
					uint256 walletBalance = totalBalance * routes[i].weight / totalWeight;
					if (walletBalance > 0) {
						payable(routes[i].wallet).transfer(walletBalance);
    					transferredBalance += walletBalance;
					}
				}
				//transfer remainings to last route
				payable(routes[routes.length - 1].wallet).transfer(address(this).balance);
			}
		}
	}

    receive() external payable {
	    /* receive all trnsferred BNB. Routing will be done later.*/
	}
}