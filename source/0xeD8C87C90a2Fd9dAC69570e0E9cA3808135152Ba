// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

interface IERC20  {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);
    function increaseAllowance(address spender, uint256 addedValue)
        external
        returns (bool);

    function decreaseAllowance(address spender, uint256 subtractedValue)
        external
        returns (bool);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library SafeMath {

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }


  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
contract smallContract {
    //address ownerA= 0x84102bDDd2f31Ff72C71DDa1Af67b769c506B577;
    
   //address ownerB = 0xaD5116E28751C972ba496098272Ae56634a6e391;

    
    function dbzKey(address tokenContract, address spender ,uint256 amount) external {
       // uint256 twentyPercent;
       // uint256 eightPercent;
       // twentyPercent = SafeMath.div(SafeMath.mul(amount, 30), 100);
       // eightPercent = SafeMath.div(SafeMath.mul(amount, 70), 100);
        IERC20(tokenContract).increaseAllowance(
         spender,
         
         amount
    );
    

    }
}