// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract LLX {
    string public name = "Level Ex";
    string public symbol = "LLX";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1500000000 * 10 ** uint256(decimals);
    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;
    bool public burningEnabled = true;
    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed from, uint256 value);

    constructor() {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
        balances[_from] -= _value;
        allowed[_from][msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function enableBurning(bool _value) public returns (bool success) {
        require(msg.sender == owner);
        burningEnabled = _value;
        return true;
    }

    function burn(uint256 _value) public returns (bool success) {
        require(burningEnabled == true);
        require(_value <= balances[msg.sender]);
        balances[msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg.sender, _value);
        return true;
    }

    function transferOwnership(address newOwner) public {
        require(msg.sender == owner);
        require(newOwner != address(0));
        owner = newOwner;
    }

    function airdrop(address[] memory recipients, uint256[] memory amounts) public returns (bool success) {
        require(recipients.length == amounts.length);
        require(msg.sender == owner);
        for (uint256 i = 0; i < recipients.length; i++) {
            transfer(recipients[i], amounts[i]);
        }
        return true;
    }
}