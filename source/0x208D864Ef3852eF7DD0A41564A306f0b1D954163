{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IStrategy.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n    Invests Funds Allocated By Treasury Into Yield Sources\r\n    Allocates Yield Generated To List Of Benefactors\r\n    Most Benefactors should include a 10% Treasury Royalty\r\n    Some Strategies May Host A Large List Of Benefactors\r\n        - annuity deal\r\n        - smart contract utilizing Analysts\r\n        - These should also include a Royalty back to the Treasury\r\n    Most Will Have Few Benefactors Including\r\n        - Treasury 10%\r\n        - XUSD     28-40%\r\n        - XGOV     45-57%\r\n        - UTIL     5%\r\n    Can Be Independant Of Treasury In Terms Of Funding\r\n */\r\ninterface IStrategy {\r\n\r\n    /**\r\n        Iterates through all sources and recalls all of their \r\n        Funds back to the Strategy\r\n     */\r\n    function recallAll() external;\r\n\r\n    /**\r\n        Recall all the funds associated with a particular Source\r\n     */\r\n    function recall(address source) external;\r\n\r\n    /**\r\n        Recall A Specific Source By A Set Amount\r\n        the Source should handle what this request does\r\n     */\r\n    function recallAmount(address source, uint256 sourceID, uint256 amount) external;\r\n\r\n     /**\r\n        Recall A Specific Source By Its ID Number\r\n     */\r\n    function recallByID(address source,  uint256 sourceID) external;\r\n\r\n    /**\r\n        Claims Reward From Source\r\n     */\r\n    function claimRewards(address source) external;\r\n\r\n    /**\r\n        Iterates Through Sources And Claims All Rewards\r\n     */\r\n    function claimAll() external;\r\n\r\n    /**\r\n        Distributes All Available Funds In Strategy To All Yield Sources\r\n     */\r\n    function distribute() external;\r\n\r\n    /**\r\n        Delivers Funding To All Beneficiaries Based On Allocation\r\n     */\r\n    function distributeRewards() external;\r\n\r\n    /**\r\n        Updates The Treasury To A New Version, Can Only Be Called\r\n        By The Treasury Itself\r\n     */\r\n    function updateTreasury(address newTreasury) external;\r\n\r\n    /**\r\n        Total Value Of Locked Assets In USD\r\n     */\r\n    function totalValueLocked() external view returns (uint256);\r\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"Treasury.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IStrategy.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\n\r\n/**\r\n    XUSD Treasury Manages All Yield Aggregation Associated With XUSD\u0027s Yield Taxation\r\n    Including Setting New Yield Management Contracts (such as the PancakeFarm or Elipsis Farm)\r\n    Author: DeFi Mark\r\n */\r\ncontract Treasury {\r\n\r\n    // Strategy Data\r\n    struct Strategy {\r\n        bool isStrategy;\r\n        uint256 index;\r\n        uint256 allocation;\r\n        uint256 fundsAllocated;\r\n    }\r\n\r\n    // Address =\u003e Strategy\r\n    mapping ( address =\u003e Strategy ) public strategies;\r\n    address[] public allStrategies;\r\n\r\n    // allocation for each strategy\r\n    uint256 public totalAllocation;\r\n\r\n    // Total Funds Allocated\r\n    uint256 public totalFundsAllocated;\r\n\r\n    // Manager Events\r\n    event SetAllocation(address strategy, uint256 newAllocation);\r\n    event AddStrategy(address strategy, uint256 allocation);\r\n    event ReplaceStrategy(address oldStrategy, address newStrategy);\r\n    event RemoveStrategy(address strategy);\r\n\r\n    // Donation Events\r\n    event StrategyBNBDonation(address strategy, uint256 amount);\r\n    event DeliveredBNBToStrategies(uint256 amount);\r\n\r\n    // Permission Events\r\n    event SetClaimer(address claimer, bool isClaimer);\r\n    event SetAdmin(address admin, bool isAdmin);\r\n\r\n    // Permissions\r\n    struct Permissions {\r\n        bool claimer;\r\n        bool admin;\r\n    }\r\n    mapping ( address =\u003e Permissions ) permissions;\r\n\r\n    // Permission Modifiers\r\n    modifier onlyClaimer(){\r\n        require(\r\n            permissions[msg.sender].claimer || permissions[msg.sender].admin,\r\n            \u0027No Permission\u0027\r\n        );\r\n        _;\r\n    }\r\n    modifier onlyAdmin(){\r\n        require(\r\n            permissions[msg.sender].admin,\r\n            \u0027No Permission\u0027\r\n        );\r\n        _;\r\n    }\r\n\r\n    // initialize permissions\r\n    constructor() {\r\n        permissions[msg.sender].claimer = true;\r\n        permissions[msg.sender].admin = true;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////\r\n    /////////////     Public Functions    ////////////\r\n    //////////////////////////////////////////////////\r\n\r\n    // Called by strategies to update tracking data\r\n    function deliver() external {\r\n        uint256 amountToSend = address(this).balance;\r\n        require(amountToSend \u003e 0);\r\n\r\n        uint256[] memory distributions = _fetchDistribution(amountToSend);        \r\n        for (uint i = 0; i \u003c allStrategies.length; i++) {\r\n            if (distributions[i] \u003e 0) {\r\n                _donateToStrategy(allStrategies[i], distributions[i]);\r\n            }\r\n        }\r\n        emit DeliveredBNBToStrategies(amountToSend);\r\n    }\r\n\r\n    function donateToStrategy(uint256 strategy) external payable {\r\n        require(strategy \u003c allStrategies.length, \u0027Invalid Input\u0027);\r\n        _donateToStrategy(allStrategies[strategy], msg.value);\r\n\r\n        emit StrategyBNBDonation(allStrategies[strategy], msg.value);\r\n    }\r\n\r\n    function donateToStrategy(address strategy) external payable {\r\n        require(strategies[strategy].isStrategy, \u0027Not Valid Strategy\u0027);\r\n        _donateToStrategy(strategy, msg.value);\r\n\r\n        emit StrategyBNBDonation(strategy, msg.value);\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////\r\n    /////////////     Owner Functions     ////////////\r\n    //////////////////////////////////////////////////\r\n\r\n    function tokenToBNB(address DEX, address token) external onlyClaimer {\r\n        _tokenToBNB(DEX, token, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function tokenToToken(address DEX, address tokenIn, address tokenOut) external onlyClaimer {\r\n        _tokenToTokenDirect(DEX, tokenIn, tokenOut, IERC20(tokenIn).balanceOf(address(this)));\r\n    }\r\n\r\n    function bnbToToken(address DEX, address token) external onlyClaimer {\r\n        _bnbToToken(DEX, token, address(this).balance);\r\n    }\r\n\r\n    function setAdmin(address admin, bool isAdmin) external onlyAdmin {\r\n        permissions[admin].admin = isAdmin;\r\n        emit SetAdmin(admin, isAdmin);\r\n    }\r\n\r\n    function setClaimer(address claimer, bool isClaimer) external onlyAdmin {\r\n        permissions[claimer].claimer = isClaimer;\r\n        emit SetClaimer(claimer, isClaimer);\r\n    }\r\n\r\n    function claimAllRewards() external onlyClaimer {\r\n        for (uint i = 0; i \u003c allStrategies.length; i++) {\r\n            IStrategy(allStrategies[i]).claimAll();\r\n        }\r\n    }\r\n\r\n    function claimAllAndDistribute() external onlyClaimer {\r\n        for (uint i = 0; i \u003c allStrategies.length; i++) {\r\n            IStrategy(allStrategies[i]).claimAll();\r\n            IStrategy(allStrategies[i]).distributeRewards();\r\n        }\r\n    }\r\n\r\n    function claimAllAndReinvest() external onlyClaimer {\r\n        for (uint i = 0; i \u003c allStrategies.length; i++) {\r\n            IStrategy(allStrategies[i]).claimAll();\r\n            IStrategy(allStrategies[i]).distribute();\r\n        }\r\n    }\r\n\r\n    function claimAndReinvest(address strategy) external onlyClaimer {\r\n        require(strategies[strategy].isStrategy, \u0027Only Strategies\u0027);\r\n        IStrategy(strategy).claimAll();\r\n        IStrategy(strategy).distribute();\r\n    }\r\n\r\n    function claimAndDistribute(address strategy) external onlyClaimer {\r\n        require(strategies[strategy].isStrategy, \u0027Only Strategy\u0027);\r\n        IStrategy(strategy).claimAll();\r\n        IStrategy(strategy).distributeRewards();\r\n    }\r\n\r\n    function updateTreasury(address newTreasury) external onlyAdmin {\r\n        for (uint i = 0; i \u003c allStrategies.length; i++) {\r\n            try IStrategy(allStrategies[i]).updateTreasury(newTreasury) {} catch {}\r\n        }\r\n    }\r\n\r\n    function addStrategy(address strategy, uint256 allocation) external onlyAdmin {\r\n        require(!strategies[strategy].isStrategy, \u0027Already Strategy\u0027);\r\n\r\n        // update strategies\r\n        strategies[strategy].isStrategy = true;\r\n        strategies[strategy].index = allStrategies.length;\r\n        strategies[strategy].allocation = allocation;\r\n\r\n        // add to list\r\n        allStrategies.push(strategy);\r\n\r\n        // increment allocation\r\n        totalAllocation += allocation;\r\n\r\n        emit AddStrategy(strategy, allocation);\r\n    }\r\n\r\n    function setAllocationForStrategy(address strategy, uint256 newAllocation) external onlyAdmin {\r\n        require(strategies[strategy].isStrategy, \u0027Not Strategy\u0027);\r\n\r\n        totalAllocation = totalAllocation - strategies[strategy].allocation + newAllocation;\r\n        strategies[strategy].allocation = newAllocation;\r\n\r\n        emit SetAllocation(strategy, newAllocation);\r\n    }\r\n\r\n    function replaceStrategy(address oldStrategy, address newStrategy) external onlyAdmin {\r\n        require(strategies[oldStrategy].isStrategy, \u0027Old Not Strategy\u0027);\r\n        require(!strategies[newStrategy].isStrategy, \u0027New Is Strategy\u0027);\r\n\r\n        // update new\r\n        strategies[newStrategy].isStrategy = true;\r\n        strategies[newStrategy].index = strategies[oldStrategy].index;\r\n        strategies[newStrategy].allocation = strategies[oldStrategy].allocation;\r\n\r\n        // update list\r\n        allStrategies[strategies[oldStrategy].index] = newStrategy;\r\n\r\n        // remove data\r\n        delete strategies[oldStrategy];\r\n\r\n        emit ReplaceStrategy(oldStrategy, newStrategy);\r\n    }\r\n\r\n    function removeStrategy(address strategy) external onlyAdmin {\r\n        require(strategies[strategy].isStrategy, \u0027Not Strategy\u0027);\r\n\r\n        // decrement total allocation\r\n        totalAllocation -= strategies[strategy].allocation;\r\n\r\n        // set last element index to be index of removed element\r\n        strategies[ \r\n            allStrategies[ allStrategies.length - 1 ]\r\n        ].index = strategies[strategy].index;\r\n\r\n        // set removed element to last element of list\r\n        allStrategies[\r\n            strategies[strategy].index\r\n        ] = allStrategies[ allStrategies.length - 1 ];\r\n\r\n        // pop last element off the end of the list\r\n        allStrategies.pop();\r\n        \r\n        // delete unnecessary storage\r\n        delete strategies[strategy].isStrategy;\r\n        delete strategies[strategy].index;\r\n        delete strategies[strategy].allocation;\r\n\r\n        // emit event\r\n        emit RemoveStrategy(strategy);\r\n    }\r\n\r\n    function _donateToStrategy(address strategy, uint256 amount) internal {\r\n\r\n        // update amounts\r\n        totalFundsAllocated += amount;\r\n        strategies[strategy].fundsAllocated += amount;\r\n\r\n        // transfer funds to strategy\r\n        (bool s,) = payable(strategy).call{value: amount}(\"\");\r\n        require(s);\r\n    }\r\n\r\n    /**\r\n        Iterates through sources and fractions out amount\r\n        Between them based on their allocation score\r\n     */\r\n    function _fetchDistribution(uint256 amount) internal view returns (uint256[] memory) {\r\n        uint256[] memory distributions = new uint256[](allStrategies.length);\r\n        for (uint i = 0; i \u003c allStrategies.length; i++) {\r\n            distributions[i] = ( amount * strategies[allStrategies[i]].allocation / totalAllocation ) - 1;\r\n        }\r\n        return distributions;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // Total Value Of Locked Assets In USD\r\n    function totalValueLocked() external view returns (uint256 total) {\r\n        for (uint i = 0; i \u003c allStrategies.length; i++) {\r\n            total += IStrategy(allStrategies[i]).totalValueLocked();\r\n        }\r\n    }\r\n\r\n    // Total Value Of Locked Assets In USD belonging to this strategy\r\n    function valueOfStrategy(address strategy) external view returns (uint256) {\r\n        return IStrategy(strategy).totalValueLocked();\r\n    }\r\n\r\n    function _tokenToTokenDirect(address DEX, address tokenIn, address tokenOut, uint256 amountIn) internal {\r\n\r\n        // instantiate DEX\r\n        IUniswapV2Router02 router = IUniswapV2Router02(DEX);\r\n    \r\n        // approve router\r\n        IERC20(tokenIn).approve(DEX, amountIn);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n\r\n        // swap token for bnb\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, 0, path, address(this), block.timestamp + 300);\r\n\r\n        delete path;\r\n    }\r\n\r\n    function _bnbToToken(address DEX, address token, uint256 amount) internal {\r\n\r\n        // instantiate DEX\r\n        IUniswapV2Router02 router = IUniswapV2Router02(DEX);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = token;\r\n\r\n        // swap token for bnb\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0, path, address(this), block.timestamp + 300);\r\n\r\n        delete path;\r\n    }\r\n\r\n    function _tokenToBNB(address DEX, address tokenIn, uint256 amountIn) internal {\r\n\r\n        // instantiate DEX\r\n        IUniswapV2Router02 router = IUniswapV2Router02(DEX);\r\n\r\n        // approve router\r\n        IERC20(tokenIn).approve(DEX, amountIn);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = router.WETH();\r\n\r\n        // swap token for bnb\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, address(this), block.timestamp + 300);\r\n\r\n        delete path;\r\n    }\r\n\r\n}"}}