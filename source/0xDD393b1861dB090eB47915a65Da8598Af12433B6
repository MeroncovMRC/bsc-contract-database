pragma solidity ^0.8.6;
// SPDX-License-Identifier: Unlicensed
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, "SafeMath: subtraction overflow"); }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, "SafeMath: division by zero"); }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, "SafeMath: modulo by zero"); }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        assembly { codehash := extcodehash(account) } return (codehash != accountHash && codehash != 0x0);
    }
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    function functionCall(address target, bytes memory data) internal returns (bytes memory) { return functionCall(target, data, "Address: low-level call failed"); }
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) { return _functionCallWithValue(target, data, 0, errorMessage); }
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) { return functionCallWithValue(target, data, value, "Address: low-level call with value failed"); }
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }
    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) { return returndata; } else { if (returndata.length > 0) { assembly { let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) } } else { revert(errorMessage); } }
    }
}
interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
interface IPancakeswapRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}
interface IPancakeswapRouter02 is IPancakeswapRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountETH);
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;
}
interface IPancakeswapFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);
    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) { return payable(msg.sender); }
    function _msgData() internal view virtual returns (bytes memory) {
        this;
        return msg.data;
    }
}
contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
	modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    constructor() {
        _owner = _msgSender();
        emit OwnershipTransferred(address(0), _owner);
    }
    function owner() public view returns (address) { return _owner; }
    function renounceOwnership() external onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
    function lock(uint256 time) external onlyOwner {
        _previousOwner = _owner;
        _lockTime = block.timestamp + time;
        emit OwnershipTransferred(_owner, address(0));
		_owner = address(0);
    }
    function unlock() external {
        require(_previousOwner == _msgSender(), "You don't have permission to unlock");
        require(block.timestamp > _lockTime , "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
	function geUnlockTime() external view returns (uint256) { return _lockTime; }
}
contract OneXBETToken is Context, IBEP20, Ownable {
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _tBalances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) private _isExcluded;

	string private constant _name = "1XBET";
    string private constant _symbol = "1XBET";
    uint8 private constant _decimals = 9;
    uint256 private constant _tTotalSupply = 100 * 10**12 * 10**_decimals; // 100T

	uint256 public _buyMaxTxAmount =  300 * 10**9 * 10**_decimals; // 0.3% = 300B
	uint256 public _sellMaxTxAmount = 200 * 10**9 * 10**_decimals; // 0.2% = 200B
	uint256 public _buyLiquidityFee = 6;
	uint256 public _sellLiquidityFee = 8;

	uint256 private _maxTxAmount;
	uint256 private _liquidityFee;
	uint256 private _previousLiquidityFee;
	uint256 private _tliquidityTotal;

	address private constant burnAddress = 0x000000000000000000000000000000000000dEaD;
    IPancakeswapRouter02 public immutable pancakeswapRouter;
    address public immutable pancakeswapPair;

	event TransferBurn(address indexed from, address indexed to, uint256 value);
	constructor() {
        _tBalances[_msgSender()] = _tTotalSupply;
		// Mainnet Pancakeswap Router v2
        IPancakeswapRouter02 _pancakeswapRouter = IPancakeswapRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
		// Testnet Pancakeswap Router v2
        //IPancakeswapRouter02 _pancakeswapRouter = IPancakeswapRouter02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);
        pancakeswapPair = IPancakeswapFactory(_pancakeswapRouter.factory()).createPair(address(this), _pancakeswapRouter.WETH());
        pancakeswapRouter = _pancakeswapRouter;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
		_isExcludedFromFee[burnAddress] = true;
		_isExcluded[burnAddress] = true;
        emit Transfer(address(0), _msgSender(), _tTotalSupply);
    }
	receive() external payable {}
	function getOwner() external view returns (address) { return owner(); }
    function name() external pure returns (string memory) { return _name; }
    function symbol() external pure returns (string memory) { return _symbol; }
    function decimals() external pure returns (uint8) { return _decimals; }
    function totalSupply() external pure override returns (uint256) { return _tTotalSupply; }
    function balanceOf(address account) external view override returns (uint256) { return _tBalances[account]; }
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner, address spender) external view override returns (uint256) { return _allowances[owner][spender]; }
    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }
	function excludeFromFee(address account) external onlyOwner { _isExcludedFromFee[account] = true; }
    function includeInFee(address account) external onlyOwner { _isExcludedFromFee[account] = false; }
	function isExcludedFromFee(address account) external view returns(bool) { return _isExcludedFromFee[account]; }
    function excludeFromReward(address account) external onlyOwner() { _isExcluded[account] = true; }
    function includeInReward(address account) external onlyOwner() { _isExcluded[account] = false; }
	function isExcludedFromReward(address account) external view returns (bool) { return _isExcluded[account]; }	
	function setBuyMaxTxAmount(uint256 value) external onlyOwner() { _buyMaxTxAmount = value.mul(10**_decimals); }
	function setSellMaxTxAmount(uint256 value) external onlyOwner() { _sellMaxTxAmount = value.mul(10**_decimals); }
	function setBuyLiquidityFeePercent(uint256 percent) external onlyOwner() { _buyLiquidityFee = percent; }
	function setSellLiquidityFeePercent(uint256 percent) external onlyOwner() { _sellLiquidityFee = percent; }	
	function totalLiquidity() external view returns (uint256) { return _tliquidityTotal; }
	function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "BEP20: transfer from the zero address");
        require(to != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
		if(from != owner() && to != owner() && !_isExcluded[from] && !_isExcluded[to]) {		
			if (from == pancakeswapPair) { _maxTxAmount = _buyMaxTxAmount; } else if (to == pancakeswapPair) { _maxTxAmount = _sellMaxTxAmount; } else { _maxTxAmount = _buyMaxTxAmount; }
			require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
		}
        bool takeFee = true;
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) { takeFee = false; } else { if (from == pancakeswapPair) { _liquidityFee = _buyLiquidityFee; } else if (to == pancakeswapPair) { _liquidityFee = _sellLiquidityFee; } else { _liquidityFee = _buyLiquidityFee; } }
		if (!takeFee) removeAllFee();
		(uint256 tTransferAmount, uint256 tLiquidity) = _getTValues(amount);
        _tBalances[from] = _tBalances[from].sub(amount);
        _tBalances[to] = _tBalances[to].add(tTransferAmount);        
        emit Transfer(from, to, tTransferAmount);
		_takeLiquidity(burnAddress, tLiquidity);
		emit TransferBurn(from, burnAddress, tLiquidity);		
        if (!takeFee) restoreAllFee();
    }
	function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
	function removeAllFee() private {
        if (_liquidityFee == 0) return;
        _previousLiquidityFee = _liquidityFee;
        _liquidityFee = 0;
    }
	function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {
        uint256 tLiquidity = calculateLiquidityFee(tAmount);
        uint256 tTransferAmount = tAmount.sub(tLiquidity);
        return (tTransferAmount, tLiquidity);
    }
	function _takeLiquidity(address liquidityAddress, uint256 tLiquidity) private {
        _tBalances[liquidityAddress] = _tBalances[liquidityAddress].add(tLiquidity);
		_tliquidityTotal = _tliquidityTotal.add(tLiquidity);
    }
	function restoreAllFee() private { _liquidityFee = _previousLiquidityFee; }
	function calculateLiquidityFee(uint256 _amount) private view returns (uint256) { return _amount.mul(_liquidityFee).div(10**2); }   
}