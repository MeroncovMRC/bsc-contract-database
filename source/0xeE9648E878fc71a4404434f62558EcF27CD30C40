pragma solidity >=0.7.0;

//import "hardhat/console.sol";

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
 
 
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

 

contract DoyStaking   {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    uint256 private _totalSupply;
    mapping (address => uint256) public _balances; // share balance 
    mapping (address => uint256) public _staking; // staking balance

    IERC20 public token;
    IERC20 public bonusToken;

    constructor (address _bonusToken, address _token) {
        bonusToken = IERC20(_bonusToken);
        token = IERC20(_token);
    }

    function balance() public view returns (uint) {
        return token.balanceOf(address(this)) + bonusToken.balanceOf(address(this));            
    }


    function _mint(address account, uint256 amount) internal {   
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);   
    }

    function _burn(address account, uint256 amount) internal {
        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount); 
    }

    function deposit(uint _amount) public {
        uint _pool = balance();  
        token.safeTransferFrom(msg.sender, address(this), _amount);
        uint shares = 0;
        if (_totalSupply == 0) {
            shares = _amount;
        } else {
            shares = (_amount.mul(_totalSupply)).div(_pool);
        }

        _staking[msg.sender] = _staking[msg.sender].add(_amount);   
        _mint(msg.sender, shares);
    }

    function depositAll() external {
        deposit(token.balanceOf(msg.sender));
    }
    

    function withdraw(uint _amount) public {
        require(_amount <= _staking[msg.sender], "withdraw amount exceeds staking balance");

        address account = msg.sender;
        uint _shares = _amount.mul(_balances[account]).div(_staking[account]);
        uint r = (balance().mul(_shares)).div(_totalSupply);
        _burn(account, _shares);

        _staking[account] = _staking[account].sub(_amount);   
        token.safeTransfer(account, _amount);        
        bonusToken.safeTransfer(account, r.sub(_amount));     
    }   

    function getReward(address _account) view public returns (uint ) {
        uint r = (balance().mul(_balances[_account])).div(_totalSupply);     

        return r - _staking[_account];
    }

    function withdrawAll() external {
        withdraw(_staking[msg.sender]);
    }
 
    function getPricePerFullShare() public view returns (uint) {
        return balance().mul(1e18).div(_totalSupply);
    }
}