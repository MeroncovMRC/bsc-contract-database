{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.2 \u003c0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"CalcifireToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Address.sol\u0027;\nimport \u0027./Context.sol\u0027;\nimport \u0027./IBEP20.sol\u0027;\nimport \u0027./Ownable.sol\u0027;\n\nimport \u0027./IUniswapV2Router02.sol\u0027;\nimport \u0027./IUniswapV2Pair.sol\u0027;\nimport \u0027./IUniswapV2Factory.sol\u0027;\n\ncontract Calcifire is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address =\u003e uint256) private _reflectOwned;\n    mapping (address =\u003e uint256) private _tokenOwned;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n    mapping (address =\u003e bool) public Wallets;\n\n    mapping (address =\u003e bool) private _isExcludedFromFee;\n    mapping (address =\u003e bool) private _isExcluded;\n    address[] private _excluded;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tokenTotal = 3000000 * 10**18; //initial supply, gets capped upon entering deflationary phase\n    uint256 private _reflectTotal = 0; //gets updated upon entering deflationary phase\n    uint256 private _transferFeeTotal;\n    uint256 private _tokensToBurnTotal;\n\n    string private constant TOKEN_NAME = \"Calcifire\";\n    string private constant TOKEN_SYMBOL = \"CALCIFIRE\";\n    uint256 private constant TOKEN_DECIMALS = 18;\n\n    uint256 public _taxFee = 0; // Rewards\n    uint256 private _previousTaxFee = _taxFee;\n    uint256 public _sellTaxFee = 0; // Rewards\n\n    uint256 public _liquidityFee = 2;\n    uint256 private _previousLiquidityFee = _liquidityFee;\n    uint256 public _sellLiquidityFee = 2;\n\n    uint256 public _burnFee = 1;\n    uint256 private _previousburnFee = _burnFee;\n    uint256 public _sellBurnFee = 2;\n\n    uint256 public _treasuryFee = 0;\n    uint256 private _previousTreasuryFee = _treasuryFee;\n    uint256 public _sellTreasuryFee = 0;\n\n    uint256 public _communityFee = 0;\n    uint256 private _previousCommunityFee = _communityFee;\n    uint256 public _sellCommunityFee = 1;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to the higher sell taxes\n    mapping (address =\u003e bool) public automatedMarketMakerPairs;\n\n    address public _treasuryAddress;\n    address public _communityAddress;\n    address public _liquidityAddress;\n\n    address private constant BURN_ADDR = 0x000000000000000000000000000000000000dEaD;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address private _uniswapV2Pair; // Calcifire - BNB\n\n    bool private inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n    bool public autoSellForTreasury = false;\n    bool public autoSellForCommunity = true;\n    bool public burnToBurnAddress = true;\n\n    // Addresses that excluded from antiWhale\n    mapping(address =\u003e bool) private _excludedFromAntiWhale;\n\n    // Max transfer amount rate in basis points. (default is 1% of total supply)\n    uint16 public maxTransferAmountRate = 100;\n\n    uint256 private numTokensSellToAddToLiquidity = 100 * 10**18;\n\n    // Only operator can update tax rates and control address whitelistings\n    address private _operator;\n\n    bool public tradingOpen = false;\n\n    //token is mintable until entering deflationary phase\n    bool public isDeflationary = false;\n\n    //mapping to check _reflectOwned is updated after entering deflationary phase\n    mapping(address =\u003e bool) private _addedReflection;\n\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\n    event MaxTransferAmountRateUpdated(address indexed operator, uint256 previousRate, uint256 newRate);\n    event SetBurnFeePercent(uint256 burnFee);\n    event SetCommunityFeePercent(uint256 communityFee);\n    event SetLiquidityFeePercent(uint256 liquidityFee);\n    event SetTreasuryFeePercent(uint256 treasuryFee);\n    event SetSellFeePercents(uint256 sellTaxFee, uint256 sellLiquidityFee, uint256 sellBurnFee, uint256 sellTreasuryFee, uint256 sellCommunityFee);\n    event SetOpenTrading(bool tradingOpen);\n    event SetTaxFeePercent(uint256 taxFee);\n    event SetTreasuryAddress(address treasuryAddress);\n    event SetCommunityAddress(address communityAddress);\n    event SetLiquidityTaxAddress(address liquidityTaxAddress);\n    event SetNumTokensSellToAddToLiquidity(uint256 _numTokensSellToAddToLiquidity);\n    event SetAutoSellForTreasury(bool _enabled);\n    event SetAutoSellForCommunity(bool _enabled);\n    event SetBurnToBurnAddress(bool _enabled);\n    event SetDeflationary(bool value);\n    event AddrAddedToReflection(address addr);\n    event SetExcludedFromAntiWhale(address _account, bool _excludedAntiWhale);\n    event AutoAddLiquidityRouterUpdated(address newRouter);\n    event AddrExcludedFromReward(address account);\n    event AddrIncludedInReward(address account);\n    event AddrExcludedFromFee(address account);\n    event AddrIncludedInFee(address account);\n\n    modifier onlyOperator() {\n        require(_operator == msg.sender, \"operator: caller is not the operator\");\n        _;\n    }\n\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    modifier antiWhale(address sender, address recipient, uint256 amount) {\n        if (maxTransferAmount() \u003e 0) {\n            if (\n                _excludedFromAntiWhale[sender] == false\n                \u0026\u0026 _excludedFromAntiWhale[recipient] == false\n            ) {\n                require(amount \u003c= maxTransferAmount(), \"CALCIFIRE::antiWhale: Transfer amount exceeds the maxTransferAmount\");\n            }\n        }\n        _;\n    }\n\n    constructor (address treasuryAddress, address communityAddress, address liquidityAddress) public {\n        require(treasuryAddress != address(0), \"CALCIFIRE::treasuryAddress is the zero address\");\n        require(communityAddress != address(0), \"CALCIFIRE::communityAddress is the zero address\");\n        require(liquidityAddress != address(0), \"CALCIFIRE::liquidityAddress is the zero address\");\n\n        _operator = _msgSender();\n        emit OperatorTransferred(address(0), _operator);\n\n        _excludedFromAntiWhale[msg.sender] = true;\n        _excludedFromAntiWhale[address(0)] = true;\n        _excludedFromAntiWhale[address(this)] = true;\n\n        _liquidityAddress = liquidityAddress;\n        _treasuryAddress = treasuryAddress;\n        _communityAddress = communityAddress;\n\n        _tokenOwned[owner()] = _tokenTotal;\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xcF0feBd3f17CEf5b47b0cD257aCf6025c5BFf3b7);\n\n        // Create uniswap pair for token\n         _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n           .createPair(address(this), _uniswapV2Router.WETH());\n\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n\n        // set the rest of the contract variables\n        uniswapV2Router = _uniswapV2Router;\n\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_treasuryAddress] = true;\n        _isExcludedFromFee[_communityAddress] = true;\n        _isExcludedFromFee[_liquidityAddress] = true;\n\n        // Exlude deployer from fee\n        _isExcludedFromFee[owner()] = true;\n\n        //exclude token contract from reflection\n        _isExcluded[address(this)] = true;\n        _excluded.push(address(this));\n    }\n\n    function uniswapV2Pair() public view returns (address) {\n        return _uniswapV2Pair;\n    }\n\n    // @notice Creates `_amount` token to `_to`. Can only be called by the owner (MasterChef).\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        require(!isDeflationary, \"CALCIFIRE: cannot mint deflationary token\");\n        _mint(_to, _amount);\n        _moveDelegates(address(0), _delegates[_to], _amount);\n    }\n\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \u0027CALCIFIRE: mint to the zero address\u0027);\n\n        _tokenTotal = _tokenTotal.add(amount);\n        _tokenOwned[account] = _tokenOwned[account].add(amount);\n\n        emit Transfer(address(0), account, amount);\n    }\n\n    // deflationary phase of the token - updates _reflectTotal based on total supply\n    function setDeflationary(bool value) public onlyOperator {\n        require(!isDeflationary, \u0027CALCIFIRE: already in deflationary phase\u0027);\n\n        if (value == true) {\n          _reflectTotal = (MAX - (MAX % _tokenTotal));\n          updateAddrReflection(address(this));\n        }\n\n        isDeflationary = value;\n\n        emit SetDeflationary(value);\n    }\n\n    //update _reflectOwned after entering deflationary phase\n    function updateAddrReflection(address addr) private {\n      if(_addedReflection[addr] != true)\n      {\n        uint256 currentRate =  _getRate();\n        _reflectOwned[addr] = _reflectOwned[addr].add(_tokenOwned[addr].mul(currentRate));\n\n        _addedReflection[addr] = true;\n\n        emit AddrAddedToReflection(addr);\n      }\n    }\n\n    // @dev Returns the address of the current operator.\n    function operator() public view returns (address) {\n        return _operator;\n    }\n\n    // @dev Transfers operator of the contract to a new account (`newOperator`). Can only be called by the current operator.\n    function transferOperator(address newOperator) public onlyOperator {\n        require(newOperator != address(0), \"CALCIFIRE::transferOperator: new operator is the zero address\");\n        emit OperatorTransferred(_operator, newOperator);\n        _operator = newOperator;\n    }\n\n   // @dev Returns if the address is excluded from antiWhale\n   function isExcludedFromAntiWhale(address _account) public view returns (bool) {\n       return _excludedFromAntiWhale[_account];\n   }\n\n   //@dev Exclude or include an address from antiWhale. Can only be called by the current operator.\n   function setExcludedFromAntiWhale(address _account, bool _excludedAntiWhale) public onlyOperator {\n       _excludedFromAntiWhale[_account] = _excludedAntiWhale;\n\n       emit SetExcludedFromAntiWhale(_account, _excludedAntiWhale);\n   }\n\n   // @dev Returns the max transfer amount.\n   function maxTransferAmount() public view returns (uint256) {\n      return _tokenTotal.mul(maxTransferAmountRate).div(10000);\n\n   }\n\n   /**\n    * @dev Update the max transfer amount rate.\n    * Can only be called by the current operator.\n    */\n   function updateMaxTransferAmountRate(uint16 _maxTransferAmountRate) public onlyOperator {\n       require(_maxTransferAmountRate \u003c= 1000, \"CALCIFIRE::updateMaxTransferAmountRate: Max transfer amount rate must not exceed the maximum rate (10% of supply).\");\n       require(_maxTransferAmountRate \u003e= 50, \"CALCIFIRE::updateMaxTransferAmountRate: Max transfer amount rate must be at least 0.5% of supply\");\n       emit MaxTransferAmountRateUpdated(msg.sender, maxTransferAmountRate, _maxTransferAmountRate);\n       maxTransferAmountRate = _maxTransferAmountRate;\n   }\n\n    // update router for auto add liquidity incase pancakeswap router changes\n    function updateAutoAddLiquidityRouter(address newRouter) public onlyOperator {\n        require(newRouter != address(0), \"CALCIFIRE::updateAutoAddLiquidityRouter: newRouter is the zero address\");\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouter);  // V2!\n        uniswapV2Router = _uniswapV2Router;\n\n        emit AutoAddLiquidityRouterUpdated(newRouter);\n\n\n    }\n\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOperator {\n        require(pair != address(0), \"CALCIFIRE::setAutomatedMarketMakerPair: pair is the zero address\");\n        require(pair != _uniswapV2Pair, \"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        require(automatedMarketMakerPairs[pair] != value, \"CALCIFIRE::setAutomatedMarketMakerPair: Automated market maker pair is already set to that value\");\n        automatedMarketMakerPairs[pair] = value;\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function distribute(address[] memory _addresses, uint256[] memory _balances) onlyOperator public {\n        uint16 i;\n        uint256 count = _addresses.length;\n\n        if(count \u003e 100)\n        {\n            count = 100;\n        }\n\n        for (i=0; i \u003c count; i++) {  //_addresses.length\n            _tokenTransfer(_msgSender(),_addresses[i],_balances[i],false);\n        }\n    }\n\n    function name() public view override returns (string memory) {\n        return TOKEN_NAME;\n    }\n\n    function symbol() public view override returns (string memory) {\n        return TOKEN_SYMBOL;\n    }\n\n    function decimals() public view override returns (uint256) {\n        return TOKEN_DECIMALS;\n    }\n\n    function getOwner() external override view returns (address) {\n        return owner();\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tokenTotal;\n    }\n\n    function getReflectionRate() public view returns (uint256) {\n        return _getRate();\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account] || (!_addedReflection[account])) {\n          return _tokenOwned[account];\n        }\n        return tokenFromReflection(_reflectOwned[account]);\n    }\n\n    function setWallet(address _wallet) public {\n        Wallets[_wallet]=true;\n    }\n\n    function contains(address _wallet) public view returns (bool){\n        return Wallets[_wallet];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _transferFeeTotal;\n    }\n\n    function calculateReflection(uint256 transferAmount) public {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"excluded\");\n        (uint256 reflectAmount,,,,,,) = _getValues(transferAmount);\n        _reflectOwned[sender] = _reflectOwned[sender].sub(reflectAmount);\n        _reflectTotal = _reflectTotal.sub(reflectAmount); //\n        _transferFeeTotal = _transferFeeTotal.add(transferAmount);\n    }\n\n    function reflectionFromToken(uint256 transferAmount, bool deductTransferFee) public view returns(uint256) {\n        require(transferAmount \u003c= _tokenTotal, \"Amount \u003c supply\");\n        if (!deductTransferFee) {\n            (uint256 reflectAmount,,,,,,) = _getValues(transferAmount);\n            return reflectAmount;\n        } else {\n            (,uint256 netReflectAmount,,,,,) = _getValues(transferAmount);\n            return netReflectAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 reflectAmount) public view returns(uint256) {\n        require(reflectAmount \u003c= _reflectTotal, \"Amount \u003c reflections\");\n        uint256 currentRate =  _getRate();\n        return reflectAmount.div(currentRate);\n    }\n\n    function excludeFromReward(address account) public onlyOperator {\n        require(!_isExcluded[account], \"excluded\");\n        if(_reflectOwned[account] \u003e 0) {\n                _tokenOwned[account] = tokenFromReflection(_reflectOwned[account]);\n            }\n            _isExcluded[account] = true;\n            _excluded.push(account);\n\n            emit AddrExcludedFromReward(account);\n    }\n\n    function includeInReward(address account) external onlyOperator {\n        require(_isExcluded[account], \"excluded\");\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n                if (_excluded[i] == account) {\n                    _excluded[i] = _excluded[_excluded.length - 1];\n                    _tokenOwned[account] = 0;\n                    _isExcluded[account] = false;\n                    _excluded.pop();\n\n                    emit AddrIncludedInReward(account);\n                    break;\n                }\n            }\n    }\n\n    function excludeFromFee(address account) public onlyOperator {\n        _isExcludedFromFee[account] = true;\n\n        emit AddrExcludedFromFee(account);\n    }\n\n    function includeInFee(address account) public onlyOperator {\n        _isExcludedFromFee[account] = false;\n\n        emit AddrIncludedInFee(account);\n    }\n\n    // Sell taxes cant be higher than 20%\n    function setSellFeePercents(uint256 sellTaxFee, uint256 sellLiquidityFee, uint256 sellBurnFee, uint256 sellTreasuryFee, uint256 sellCommunityFee) external onlyOperator {\n        require((sellTaxFee + sellLiquidityFee + sellBurnFee + sellTreasuryFee + sellCommunityFee) \u003c= 20, \"\u003eMax\");\n        _sellTaxFee = sellTaxFee;\n        _sellLiquidityFee = sellLiquidityFee;\n        _sellBurnFee = sellBurnFee;\n        _sellTreasuryFee = sellTreasuryFee;\n        _sellCommunityFee = sellCommunityFee;\n\n        emit SetSellFeePercents(sellTaxFee, sellLiquidityFee, sellBurnFee, sellTreasuryFee, sellCommunityFee);\n    }\n\n    function openTrading() external onlyOwner {\n        tradingOpen = true;\n\n        emit SetOpenTrading(tradingOpen);\n    }\n\n    // Buy taxes can\u0027t be higher than 10%\n    function setTaxFeePercent(uint256 taxFee) external onlyOperator {\n        require((taxFee + _liquidityFee + _communityFee + _treasuryFee + _burnFee) \u003c= 10, \"\u003eMax\");\n        _taxFee = taxFee;\n\n        emit SetTaxFeePercent(taxFee);\n    }\n\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOperator {\n        require((_taxFee + liquidityFee + _communityFee + _treasuryFee + _burnFee) \u003c= 10, \"\u003eMax\");\n        _liquidityFee = liquidityFee;\n\n        emit SetLiquidityFeePercent(liquidityFee);\n    }\n\n    function setCommunityFeePercent(uint256 communityFee) external onlyOperator {\n        require((_taxFee + _liquidityFee + communityFee + _treasuryFee + _burnFee) \u003c= 10, \"\u003eMax\");\n        _communityFee = communityFee;\n\n        emit SetCommunityFeePercent(communityFee);\n    }\n\n    function setTreasuryFeePercent(uint256 treasuryFee) external onlyOperator {\n        require((_taxFee + _liquidityFee + _communityFee + treasuryFee + _burnFee) \u003c= 10, \"\u003eMax\");\n        _treasuryFee = treasuryFee;\n\n        emit SetTreasuryFeePercent(treasuryFee);\n    }\n\n    function setBurnFeePercent(uint256 burnFee) external onlyOperator {\n        require((_taxFee + _liquidityFee + _communityFee + _treasuryFee + burnFee) \u003c= 10, \"\u003eMax\");\n        _burnFee = burnFee;\n\n        emit SetBurnFeePercent(burnFee);\n    }\n\n    function setTreasuryAddress(address treasuryAddress) external onlyOperator {\n        require(!contains(treasuryAddress), \"!Existing\");\n        require(treasuryAddress != address(0), \"CALCIFIRE::setTreasuryAddress: treasuryAddress is the zero address\");\n\n        _treasuryAddress = treasuryAddress;\n\n        emit SetTreasuryAddress(treasuryAddress);\n    }\n\n    function setCommunityAddress(address communityAddress) external onlyOperator {\n        require(!contains(communityAddress), \"!Existing\");\n        require(communityAddress != address(0), \"CALCIFIRE::setCommunityAddress: communityAddress is the zero address\");\n\n        _communityAddress = communityAddress;\n\n        emit SetCommunityAddress(communityAddress);\n    }\n\n    function setLiquidityTaxAddress(address liquidityTaxAddress) external onlyOperator {\n        require(liquidityTaxAddress != address(0), \"CALCIFIRE::setLiquidityTaxAddress: liquidityTaxAddress is the zero address\");\n        _liquidityAddress = liquidityTaxAddress;\n\n        emit SetLiquidityTaxAddress(liquidityTaxAddress);\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOperator {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    function setNumTokensSellToAddToLiquidity(uint256 _numTokensSellToAddToLiquidity) external onlyOperator {\n        require(_numTokensSellToAddToLiquidity \u003c= maxTransferAmount(), \"out of range\");\n        numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity;\n\n        emit SetNumTokensSellToAddToLiquidity(_numTokensSellToAddToLiquidity);\n    }\n\n    function setAutoSellForTreasury(bool _enabled) external onlyOperator {\n        autoSellForTreasury = _enabled;\n\n        emit SetAutoSellForTreasury(_enabled);\n    }\n\n    function setAutoSellForCommunity(bool _enabled) external onlyOperator {\n        autoSellForCommunity = _enabled;\n\n        emit SetAutoSellForCommunity(_enabled);\n    }\n\n    function setBurnToBurnAddress(bool _enabled) external onlyOperator {\n        burnToBurnAddress = _enabled;\n\n        emit SetBurnToBurnAddress(_enabled);\n    }\n\n     //to recieve ETH from uniswapV2Router when swaping\n    receive() external payable {}\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function isExcludedFromFee(address account) public view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function applySellFee() private {\n        if(_taxFee == 0 \u0026\u0026 _liquidityFee == 0 \u0026\u0026 _communityFee == 0 \u0026\u0026 _treasuryFee == 0 \u0026\u0026 _burnFee == 0) return;\n\n        _previousTaxFee = _taxFee;\n        _previousLiquidityFee = _liquidityFee;\n        _previousCommunityFee = _communityFee;\n        _previousTreasuryFee = _treasuryFee;\n        _previousburnFee = _burnFee;\n\n        _taxFee = _sellTaxFee;\n        _liquidityFee = _sellLiquidityFee;\n        _communityFee = _sellCommunityFee;\n        _treasuryFee = _sellTreasuryFee;\n        _burnFee = _sellBurnFee;\n    }\n\n    function removeAllFee() private {\n        if(_taxFee == 0 \u0026\u0026 _liquidityFee == 0 \u0026\u0026 _communityFee == 0 \u0026\u0026 _treasuryFee == 0 \u0026\u0026 _burnFee == 0) return;\n\n        _previousTaxFee = _taxFee;\n        _previousLiquidityFee = _liquidityFee;\n        _previousCommunityFee = _communityFee;\n        _previousTreasuryFee = _treasuryFee;\n        _previousburnFee = _burnFee;\n\n        _taxFee = 0;\n        _liquidityFee = 0;\n        _communityFee = 0;\n        _treasuryFee = 0;\n        _burnFee = 0;\n    }\n\n    function restoreAllFee() private {\n        _taxFee = _previousTaxFee;\n        _liquidityFee = _previousLiquidityFee;\n        _communityFee = _previousCommunityFee;\n        _treasuryFee = _previousTreasuryFee;\n        _burnFee = _previousburnFee;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private antiWhale(from, to, amount) {\n        // can only trade / send tokens if the from or to address is excluded from fee\n        if (!_isExcludedFromFee[to] \u0026\u0026 !_isExcludedFromFee[from]\n        ) {\n          require(tradingOpen, \u0027Trading not yet enabled.\u0027);\n        }\n\n        //set _reflectOwned first time entering deflationary phase\n        if (isDeflationary)\n        {\n            updateAddrReflection(from);\n            updateAddrReflection(to);\n        }\n\n        // is the token balance of this contract address over the min number of\n        // tokens that we need to initiate a swap + liquidity lock?\n        // also, don\u0027t get caught in a circular liquidity event.\n        // also, don\u0027t swap \u0026 liquify if sender is uniswap pair.\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        if(contractTokenBalance \u003e= maxTransferAmount())\n        {\n            contractTokenBalance = maxTransferAmount();\n        }\n\n        bool overMinTokenBalance = contractTokenBalance \u003e= numTokensSellToAddToLiquidity;\n        if (\n            overMinTokenBalance \u0026\u0026\n            !inSwapAndLiquify \u0026\u0026\n            !automatedMarketMakerPairs[from] \u0026\u0026\n            swapAndLiquifyEnabled\n        ) {\n            contractTokenBalance = numTokensSellToAddToLiquidity;\n            //add liquidity\n            swapAndLiquify(contractTokenBalance);\n        }\n\n        //indicates if fee should be deducted from transfer\n        bool takeFee = true;\n\n        //if any account belongs to _isExcludedFromFee account then remove the fee\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\n            takeFee = false;\n        }\n\n        // apply higher sell taxes if recipient is pancaskeswap pair (ie someone is selling)\n        if(automatedMarketMakerPairs[to] \u0026\u0026 takeFee) applySellFee();\n\n        //transfer amount, it will take tax, burn, liquidity fee\n        _tokenTransfer(from,to,amount,takeFee);\n\n        // reset taxes to normal after sell\n        if(automatedMarketMakerPairs[to] \u0026\u0026 takeFee) restoreAllFee();\n    }\n\n\n    // pass in transfer amount\n    function _getFeeAmounts(uint256 amount) private view returns (uint256, uint256, uint256, uint256) {\n\n        uint256 burnFee = burnToBurnAddress ? _burnFee : 0;\n        uint256 totalFee = _treasuryFee.add(_communityFee).add(_liquidityFee).add(burnFee);\n        uint256 treasuryAmount = 0;\n        uint256 communityAmount = 0;\n        uint256 burnAmount = 0;\n\n\n        if(totalFee \u003e 0){\n            treasuryAmount = amount.mul(_treasuryFee).div(totalFee);\n            communityAmount = amount.mul(_communityFee).div(totalFee);\n            burnAmount = amount.mul(burnFee).div(totalFee);\n        }\n\n        uint256 feeAmount = treasuryAmount.add(communityAmount).add(burnAmount);\n        uint256 liquidityAmount;\n\n        if(amount \u003e feeAmount){\n            liquidityAmount = amount.sub(feeAmount);\n        }\n        else {\n            liquidityAmount = 0;\n        }\n\n        return (treasuryAmount, communityAmount, burnAmount, liquidityAmount);\n    }\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n\n        (uint256 treasuryAmount,uint256 communityAmount, uint256 burnAmount, uint256 liquidityAmount) = _getFeeAmounts(contractTokenBalance);\n\n        // Send to treasury addie\n        if(treasuryAmount \u003e 0){\n            if(autoSellForTreasury){\n                swapTokensForEth(treasuryAmount, _treasuryAddress);\n            }\n            else {\n                _tokenTransfer(address(this), _treasuryAddress, treasuryAmount, false);\n            }\n        }\n\n        // Send to community addie\n        if(communityAmount \u003e 0){\n            if(autoSellForCommunity){\n                swapTokensForEth(communityAmount, _communityAddress);\n            }\n            else {\n                _tokenTransfer(address(this), _communityAddress, communityAmount, false);\n            }\n        }\n\n        // Send to burn addie\n        if(burnAmount \u003e 0){\n            _tokenTransfer(address(this), BURN_ADDR, burnAmount, false);\n        }\n\n        // send to liquidity addie\n        if(liquidityAmount \u003e 0){\n            uint256 half = liquidityAmount.div(2);\n            uint256 otherHalf = liquidityAmount.sub(half);\n            uint256 initialBalance = address(this).balance;\n            swapTokensForEth(half, address(this));\n            uint256 newBalance = address(this).balance.sub(initialBalance);\n            addLiquidity(otherHalf, newBalance);\n        }\n    }\n\n    function triggerSwapAndLiquify (uint256 percent_Of_Tokens) public onlyOperator {\n\n             // Do not trigger if already in swap\n            require(!inSwapAndLiquify, \"Currently processing liquidity, try later.\");\n            if (percent_Of_Tokens \u003e 100){percent_Of_Tokens = 100;}\n            uint256 tokensOnContract = balanceOf(address(this));\n            uint256 sendTokens = tokensOnContract.mul(percent_Of_Tokens).div(100);\n            swapAndLiquify(sendTokens);\n\n    }\n\n    function swapTokensForEth(uint256 tokenAmount, address to) private {\n        // generate the uniswap pair path of token -\u003e weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            to,\n            block.timestamp);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            _liquidityAddress,\n            block.timestamp\n        );\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\n        if(!takeFee)\n            removeAllFee();\n\n        setWallet(recipient);\n\n        if (!isDeflationary) {\n          _transferInflationary(sender, recipient, amount);\n        } else if (_isExcluded[sender] \u0026\u0026 !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] \u0026\u0026 _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] \u0026\u0026 !_isExcluded[recipient]) {\n            _transferStandard(sender, recipient, amount);\n        } else if (_isExcluded[sender] \u0026\u0026 _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n\n        if(!takeFee)\n            restoreAllFee();\n    }\n\n    function _transferInflationary(address sender, address recipient, uint256 transferAmount) private {\n        (uint256 netTransferAmount, uint256 transferFee, uint256 transferFeeToTake, uint256 tokensToBurn) = _getTransferValues(transferAmount);\n\n        _tokenOwned[sender] = _tokenOwned[sender].sub(transferAmount);\n        _tokenOwned[recipient] = _tokenOwned[recipient].add(netTransferAmount);\n        _takeFee(transferFeeToTake);\n\n        _transferFeeTotal = _transferFeeTotal.add(transferFee);\n        _tokensToBurnTotal = _tokensToBurnTotal.add(tokensToBurn);\n        _tokenTotal = _tokenTotal.sub(tokensToBurn);\n\n        emit Transfer(sender, recipient, netTransferAmount);\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 transferAmount) private {\n        uint256 currentRate =  _getRate();\n        (uint256 reflectAmount, uint256 netReflectAmount, uint256 reflectFee, uint256 netTransferAmount, uint256 transferFee, uint256 transferFeeToTake, uint256 tokensToBurn) = _getValues(transferAmount);\n        uint256 reflectBurn =  tokensToBurn.mul(currentRate);\n        _reflectOwned[sender] = _reflectOwned[sender].sub(reflectAmount);\n        _reflectOwned[recipient] = _reflectOwned[recipient].add(netReflectAmount);\n        _takeFee(transferFeeToTake);\n        _reflectTotalFee(reflectFee, reflectBurn, transferFee, tokensToBurn);\n        emit Transfer(sender, recipient, netTransferAmount);\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint256 transferAmount) private {\n        uint256 currentRate =  _getRate();\n        (uint256 reflectAmount, uint256 netReflectAmount, uint256 reflectFee, uint256 netTransferAmount, uint256 transferFee, uint256 transferFeeToTake, uint256 tokensToBurn) = _getValues(transferAmount);\n        uint256 reflectBurn =  tokensToBurn.mul(currentRate);\n        _reflectOwned[sender] = _reflectOwned[sender].sub(reflectAmount);\n        _tokenOwned[recipient] = _tokenOwned[recipient].add(netTransferAmount);\n        _reflectOwned[recipient] = _reflectOwned[recipient].add(netReflectAmount);\n        _takeFee(transferFeeToTake);\n        _reflectTotalFee(reflectFee, reflectBurn, transferFee, tokensToBurn);\n        emit Transfer(sender, recipient, netTransferAmount);\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 transferAmount) private {\n        uint256 currentRate =  _getRate();\n        (uint256 reflectAmount, uint256 netReflectAmount, uint256 reflectFee, uint256 netTransferAmount, uint256 transferFee, uint256 transferFeeToTake, uint256 tokensToBurn) = _getValues(transferAmount);\n        uint256 reflectBurn =  tokensToBurn.mul(currentRate);\n        _tokenOwned[sender] = _tokenOwned[sender].sub(transferAmount);\n        _reflectOwned[sender] = _reflectOwned[sender].sub(reflectAmount);\n        _reflectOwned[recipient] = _reflectOwned[recipient].add(netReflectAmount);\n        _takeFee(transferFeeToTake);\n        _reflectTotalFee(reflectFee, reflectBurn, transferFee, tokensToBurn);\n        emit Transfer(sender, recipient, netTransferAmount);\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 transferAmount) private {\n        uint256 currentRate =  _getRate();\n        (uint256 reflectAmount, uint256 netReflectAmount, uint256 reflectFee, uint256 netTransferAmount, uint256 transferFee, uint256 transferFeeToTake, uint256 tokensToBurn) = _getValues(transferAmount);\n        uint256 reflectBurn =  tokensToBurn.mul(currentRate);\n        _tokenOwned[sender] = _tokenOwned[sender].sub(transferAmount);\n        _reflectOwned[sender] = _reflectOwned[sender].sub(reflectAmount);\n        _tokenOwned[recipient] = _tokenOwned[recipient].add(netTransferAmount);\n        _reflectOwned[recipient] = _reflectOwned[recipient].add(netReflectAmount);\n        _takeFee(transferFeeToTake);\n        _reflectTotalFee(reflectFee, reflectBurn, transferFee, tokensToBurn);\n        emit Transfer(sender, recipient, netTransferAmount);\n    }\n\n    function _takeFee(uint256 transferFeeToTake) private {\n        if (isDeflationary) {\n          uint256 currentRate =  _getRate();\n          uint256 reflectFeeToTake = transferFeeToTake.mul(currentRate);\n          _reflectOwned[address(this)] = _reflectOwned[address(this)].add(reflectFeeToTake);\n        }\n        if(_isExcluded[address(this)] || (!isDeflationary))\n            _tokenOwned[address(this)] = _tokenOwned[address(this)].add(transferFeeToTake);\n    }\n\n    function _reflectTotalFee(uint256 reflectFee, uint256 reflectBurn, uint256 transferFee, uint256 tokensToBurn) private {\n        _reflectTotal = _reflectTotal.sub(reflectFee).sub(reflectBurn);\n        _transferFeeTotal = _transferFeeTotal.add(transferFee);\n        _tokensToBurnTotal = _tokensToBurnTotal.add(tokensToBurn);\n        _tokenTotal = _tokenTotal.sub(tokensToBurn);\n    }\n\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_taxFee).div(10**2);\n    }\n\n    // if burnToBurnAddress is true then sends tokens to burn address instead of reducing supply\n    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\n        return burnToBurnAddress ? 0 : _amount.mul(_burnFee).div(10**2);\n    }\n\n    function calculateFeeToTake(uint256 _amount) private view returns (uint256) {\n        uint256 feeToTake = _treasuryFee.add(_communityFee).add(_liquidityFee);\n        if(burnToBurnAddress){\n            feeToTake = feeToTake.add(_burnFee);\n        }\n        return _amount.mul(feeToTake).div(\n            10**2\n        );\n    }\n\n    function _getValues(uint256 transferAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 netTransferAmount, uint256 transferFee, uint256 transferFeeToTake, uint256 tokensToBurn) = _getTransferValues(transferAmount);\n        (uint256 reflectAmount, uint256 netReflectAmount, uint256 reflectFee) = _getReflectionValues(transferAmount, transferFee, transferFeeToTake, tokensToBurn, _getRate());\n        return (reflectAmount, netReflectAmount, reflectFee, netTransferAmount, transferFee, transferFeeToTake, tokensToBurn);\n    }\n\n    function _getTransferValues(uint256 transferAmount) private view returns (uint256, uint256, uint256, uint256) {\n        uint256 transferFee = calculateTaxFee(transferAmount);\n        uint256 tokensToBurn = calculateBurnFee(transferAmount);\n        uint256 transferFeeToTake = calculateFeeToTake(transferAmount);\n        uint256 netTransferAmount = transferAmount.sub(transferFee).sub(tokensToBurn).sub(transferFeeToTake);\n        return (netTransferAmount, transferFee, transferFeeToTake, tokensToBurn);\n    }\n\n    function _getReflectionValues(uint256 transferAmount, uint256 transferFee, uint256 transferFeeToTake, uint256 tokensToBurn, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 reflectAmount = transferAmount.mul(currentRate);\n        uint256 reflectFee = transferFee.mul(currentRate);\n        uint256 reflectBurn = tokensToBurn.mul(currentRate);\n        uint256 reflectFeeToTake = transferFeeToTake.mul(currentRate);\n        uint256 netReflectAmount = reflectAmount.sub(reflectFee).sub(reflectBurn).sub(reflectFeeToTake);\n        return (reflectAmount, netReflectAmount, reflectFee);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 reflectSupply, uint256 tokenSupply) = _getCurrentSupply();\n        return (reflectSupply.div(tokenSupply));\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 reflectSupply = _reflectTotal;\n        uint256 tokenSupply = _tokenTotal;\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_reflectOwned[_excluded[i]] \u003e reflectSupply || _tokenOwned[_excluded[i]] \u003e tokenSupply) return (_reflectTotal, _tokenTotal);\n            reflectSupply = reflectSupply.sub(_reflectOwned[_excluded[i]]);\n            tokenSupply = tokenSupply.sub(_tokenOwned[_excluded[i]]);\n        }\n        if (reflectSupply \u003c _reflectTotal.div(_tokenTotal)) return (_reflectTotal, _tokenTotal);\n        return (reflectSupply, tokenSupply);\n    }\n\n    // Copied and modified from YAM code:\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n    // Which is copied and modified from COMPOUND:\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n\n    mapping (address =\u003e address) internal _delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint256 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address =\u003e mapping (uint256 =\u003e Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address =\u003e uint256) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract\u0027s domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address =\u003e uint) public nonces;\n\n      /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account\u0027s vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegator The address to get delegatee for\n     */\n    function delegates(address delegator)\n        external\n        view\n        returns (address)\n    {\n        return _delegates[delegator];\n    }\n\n   /**\n    * @notice Delegate votes from `msg.sender` to `delegatee`\n    * @param delegatee The address to delegate votes to\n    */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint nonce,\n        uint expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n    {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name())),\n                getChainId(),\n                address(this)\n            )\n        );\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                DELEGATION_TYPEHASH,\n                delegatee,\n                nonce,\n                expiry\n            )\n        );\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainSeparator,\n                structHash\n            )\n        );\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"CALCIFIRE::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"CALCIFIRE::delegateBySig: invalid nonce\");\n        require(now \u003c= expiry, \"CALCIFIRE::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints \u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint blockNumber)\n        external\n        view\n        returns (uint256)\n    {\n        require(blockNumber \u003c block.number, \"CALCIFIRE::getPriorVotes: not yet determined\");\n\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock \u003c= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock \u003e blockNumber) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper \u003e lower) {\n            uint256 center = upper.sub((upper.sub(lower)).div(2)); // ceil, avoiding overflow\n\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock \u003c blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee)\n        internal\n    {\n        address currentDelegate = _delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying CALCIFIREs (not scaled);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\n        if (srcRep != dstRep \u0026\u0026 amount \u003e 0) {\n            if (srcRep != address(0)) {\n                // decrease old representative\n                uint256 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum \u003e 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // increase new representative\n                uint256 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum \u003e 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint256 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    ) internal\n    {\n        uint256 blockNumber = safe32(block.number, \"CALCIFIRE::_writeCheckpoint: block number exceeds 32 bits\");\n\n        if (nCheckpoints \u003e 0 \u0026\u0026 checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint256) {\n        require(n \u003c 2**32, errorMessage);\n        return uint256(n);\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint256 chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}\n"},"CalcifireVault.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \u0027./SafeBEP20.sol\u0027;\nimport \u0027./IBEP20.sol\u0027;\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Address.sol\u0027;\nimport \u0027./Ownable.sol\u0027;\nimport \u0027./HowlsCastle.sol\u0027;\nimport \u0027./ReentrancyGuard.sol\u0027;\n\ncontract CalcifireVault is Ownable, ReentrancyGuard {\n    using SafeBEP20 for IBEP20;\n    using SafeMath for uint256;\n    using Address for address;\n\n    struct UserInfo {\n        uint256 shares; // number of shares for a user\n        uint256 lastDepositedTime; // keeps track of deposited time for potential penalty\n        uint256 calcifireAtLastUserAction; // keeps track of Calcifire deposited at the last user action\n        uint256 lastUserActionTime; // keeps track of the last user action time\n        uint256 noFeesRewardsTime; // timestamp that user can claim rewards with no fees\n    }\n\n    // The CALCIFIRE TOKEN\n    IBEP20 public constant CALCIFIRE = IBEP20(0x9e236b43D779B385c3279820e322ABAE249D3405);\n    HowlsCastle public immutable masterchef;\n\n    mapping(address =\u003e UserInfo) public userInfo;\n\n    uint256 public totalShares;\n    uint256 public lastHarvestedTime;\n    address public feeAddress;\n\n    uint256 public withdrawFee = 0;\n    uint256 public constant MAX_WITHDRAW_FEE = 1000; // 10%\n    uint256 public withdrawFeePeriod = 120 hours; // 5 days\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 240 hours; // 10 days\n\n    event Deposit(address indexed sender, uint256 amount, uint256 shares, uint256 lastDepositedTime);\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\n    event Harvest(address indexed sender);\n    event SetFeeAddress(address feeAddress);\n    event SetWithdrawFee(uint256 withdrawFee);\n    event SetWithdrawFeePeriod(uint256 withdrawFeePeriod);\n\n    /**\n     * @notice Constructor\n     * @param _masterchef: MasterChef contract\n     * @param _owner: address of the owner\n     * @param _feeAddress: address of the feeAddress (collects fees)\n     */\n    constructor(\n        HowlsCastle _masterchef,\n        address _owner,\n        address _feeAddress\n    ) public {\n        masterchef = _masterchef;\n        feeAddress = _feeAddress;\n\n        transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Deposits funds into the Calcifire Vault\n     * @param _amount: number of tokens to deposit (in CALCIFIRE)\n     */\n    function deposit(uint256 _amount) external nonReentrant {\n        require(_amount \u003e 0, \"CalcifireVault: Nothing to deposit\");\n\n        uint256 pool = underlyingTokenBalance();\n        CALCIFIRE.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 currentShares = 0;\n        if (totalShares != 0) {\n            currentShares = (_amount.mul(totalShares)).div(pool);\n        } else {\n            currentShares = _amount;\n        }\n        UserInfo storage user = userInfo[msg.sender];\n\n        user.shares = user.shares.add(currentShares);\n        user.lastDepositedTime = block.timestamp;\n        user.noFeesRewardsTime = user.lastDepositedTime.add(withdrawFeePeriod);\n\n        totalShares = totalShares.add(currentShares);\n\n        user.calcifireAtLastUserAction = user.shares.mul(underlyingTokenBalance()).div(totalShares);\n        user.lastUserActionTime = block.timestamp;\n\n        _earn();\n\n        emit Deposit(msg.sender, _amount, currentShares, block.timestamp);\n    }\n\n    /**\n     * @notice Reinvests CALCIFIRE tokens into MasterChef and claiming rewards\n     */\n    function harvest() external {\n        masterchef.withdraw(1, 0);\n\n        _earn();\n\n        emit Harvest(msg.sender);\n    }\n\n    /**\n     * @notice Withdraws funds from the Calcifire Vault\n     * @param _shares: Number of shares to withdraw\n     */\n    function withdraw(uint256 _shares) public nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n\n        require(\n            _shares \u003e 0,\n            \"CalcifireVault: Nothing to withdraw\"\n        );\n        require(\n            _shares \u003c= user.shares,\n            \"CalcifireVault: Withdraw amount exceeds balance\"\n        );\n\n        uint256 currentAmount = (underlyingTokenBalance().mul(_shares)).div(totalShares);\n        user.shares = user.shares.sub(_shares);\n        totalShares = totalShares.sub(_shares);\n\n        uint256 bal = available();\n        if (bal \u003c currentAmount) {\n            uint256 balWithdraw = currentAmount.sub(bal);\n            masterchef.withdraw(1, balWithdraw);\n            uint256 balAfter = available();\n            uint256 diff = balAfter.sub(bal);\n            if (diff \u003c balWithdraw) {\n                currentAmount = bal.add(diff);\n            }\n        }\n\n        if (\n            withdrawFee \u003e 0 \u0026\u0026\n            block.timestamp \u003c user.lastDepositedTime.add(withdrawFeePeriod)\n        ) {\n            uint256 currentWithdrawFee = currentAmount.mul(withdrawFee).div(10000);\n            CALCIFIRE.safeTransfer(feeAddress, currentWithdrawFee);\n            currentAmount = currentAmount.sub(currentWithdrawFee);\n        }\n\n        if (user.shares \u003e 0) {\n            user.calcifireAtLastUserAction = user.shares.mul(underlyingTokenBalance()).div(totalShares);\n        } else {\n            user.calcifireAtLastUserAction = 0;\n        }\n\n        user.lastUserActionTime = block.timestamp;\n\n        CALCIFIRE.safeTransfer(msg.sender, currentAmount);\n\n        emit Withdraw(msg.sender, currentAmount, _shares);\n    }\n\n    /**\n     * @notice Withdraws all funds for a user\n     */\n    function withdrawAll() external {\n        withdraw(userInfo[msg.sender].shares);\n    }\n\n    /**\n     * @notice Custom logic for how much the vault allows to be borrowed\n     * @dev The contract puts 100% of the tokens to work.\n     */\n    function available() public view returns (uint256) {\n        return CALCIFIRE.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculates the total underlying tokens\n     * @dev It includes tokens held by the contract and held in MasterChef\n     */\n    function underlyingTokenBalance() public view returns (uint256) {\n        (uint256 amount,,,,,) = masterchef.userInfo(1, address(this));\n\n        return CALCIFIRE.balanceOf(address(this)).add(amount);\n    }\n\n    /**\n     * @notice Deposits tokens into MasterChef to earn staking rewards\n     */\n    function _earn() internal {\n\n        uint256 balance = available();\n\n        if (balance \u003e 0) {\n            if (CALCIFIRE.allowance(address(this), address(masterchef)) \u003c balance) {\n                CALCIFIRE.safeApprove(address(masterchef), uint(- 1));\n            }\n\n            masterchef.deposit(1, balance, false, address(0));\n        }\n    }\n\n    // time till next claim with no fees\n    function claimRewardsTimestamp(address userAddr) public view returns (uint256) {\n        UserInfo storage user = userInfo[userAddr];\n        uint256 remainingClaimTime = 0;\n\n        if (block.timestamp \u003e= user.noFeesRewardsTime)\n        {\n          remainingClaimTime = 0;\n        }\n        else\n        {\n          remainingClaimTime = user.noFeesRewardsTime.sub(block.timestamp);\n        }\n\n        return remainingClaimTime;\n    }\n\n    /**\n     * @notice Sets fee address\n     * @dev Only callable by the contract owner.\n     */\n    function setFeeAddress(address _feeAddress) external onlyOwner {\n        require(_feeAddress != address(0), \"CalcifireVault: Cannot be zero address\");\n\n        feeAddress = _feeAddress;\n\n        emit SetFeeAddress(feeAddress);\n    }\n\n    /**\n     * @notice Sets withdraw fee\n     * @dev Only callable by the contract owner.\n     */\n    function setWithdrawFee(uint256 _withdrawFee) external onlyOwner {\n        require(\n            _withdrawFee \u003c= MAX_WITHDRAW_FEE,\n            \"CalcifireVault: withdrawFee cannot be more than MAX_WITHDRAW_FEE\"\n        );\n\n        withdrawFee = _withdrawFee;\n\n        emit SetWithdrawFee(withdrawFee);\n    }\n    /**\n     * @notice Sets withdraw fee period\n     * @dev Only callable by the contract owner.\n     */\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) external onlyOwner {\n        require(\n            _withdrawFeePeriod \u003c= MAX_WITHDRAW_FEE_PERIOD,\n            \"withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD\"\n        );\n        withdrawFeePeriod = _withdrawFeePeriod;\n\n        emit SetWithdrawFeePeriod(withdrawFeePeriod);\n    }\n\n    /**\n     * @notice Calculates the total pending rewards that can be restaked\n     * @return Returns total pending Calcifire rewards\n     */\n    function calculateTotalPendingCalcifireRewards() external view returns (uint256) {\n        uint256 amount = masterchef.pendingCalcifireTotal(1, address(this));\n        amount = amount.add(available());\n\n        return amount;\n    }\n\n    /**\n     * @notice Calculates the price per share\n     */\n    function getPricePerFullShare() external view returns (uint256) {\n        return totalShares == 0 ? 1e18 : underlyingTokenBalance().mul(1e18).div(totalShares);\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"HowlsCastle.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./IBEP20.sol\u0027;\nimport \u0027./SafeBEP20.sol\u0027;\nimport \u0027./Ownable.sol\u0027;\nimport \u0027./ReentrancyGuard.sol\u0027;\nimport \u0027./ICalcifireReferral.sol\u0027;\nimport \u0027./CalcifireToken.sol\u0027;\nimport \u0027./IERC20.sol\u0027;\nimport \u0027./IUniswapV2Pair.sol\u0027;\n\n// HowlsCastle is the residence of Calcifire and the place where all the magic happens. It can make CALCIFIRE tokens, powered by imagination and can keep moving for the whole eternity.\n\ncontract HowlsCastle is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeBEP20 for IBEP20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;         // How many LP tokens the user has provided.\n        uint256 rewardDebt;     // Reward debt. See explanation below.\n        uint256 rewardLockedUp;  // Reward locked up.\n        uint256 nextHarvestUntil; // When can the user harvest again.\n        uint256 boost; // current user boost for this pool.\n        uint256 boostLockedUp;  // reward earned due to boost locked up.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of CALCIFIREs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accCALCIFIREPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here\u0027s what happens:\n        //   1. The pool\u0027s `accCALCIFIREPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User\u0027s `amount` gets updated.\n        //   4. User\u0027s `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IBEP20 lpToken;           // Address of LP token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. CALCIFIREs to distribute per block.\n        uint256 lastRewardBlock;  // Last block number that CALCIFIREs distribution occurs.\n        uint256 accCALCIFIREPerShare;   // Accumulated CALCIFIREs per share, times 1e12. See below.\n        uint16 depositFeeBP;      // Deposit fee in basis points\n        uint256 harvestInterval;  // Harvest interval in seconds\n        bool isBoostEnabled;      // Is boost enabled for this Pool\n        uint256 lpTotalSupply;    // total supply of LP\n    }\n\n    // The CALCIFIRE TOKEN!\n    Calcifire public CALCIFIRE;\n    // Dev address.\n    address public devaddr;\n    // Treasury address - for dividends.\n    address public treasuryaddr;\n    // CALCIFIRE tokens created per block.\n    uint256 public calcifirePerBlock;\n    // final CALCIFIRE per block after emission reduction.\n    uint256 public targetCalcifirePerBlock;\n    // emission halving time\n    uint256 public calcifirePerBlockHalvingTime = block.timestamp;\n    // emission halving interval (default 6h)\n    uint256 public calcifireHalvingInterval = 21600;\n    // emission decrease percentage (default 3%)\n    uint256 public emissionRateDecreasePerBlock = 3;\n\n    // Bonus muliplier for early CALCIFIRE makers.\n    uint256 public constant BONUS_MULTIPLIER = 1;\n    // Deposit Fee address\n    address public feeAddress;\n\n    //mapping to check each pool is unique\n    mapping(IBEP20 =\u003e bool) public poolAdded;\n    //Quest Operators\n    mapping(address =\u003e bool) public operators;\n    // overall user boost\n    mapping(address =\u003e uint256) public userBoost;\n    //Amount to be added to the boost on every click of the boost button. 100 means 1% increase\n    uint256 public userPoolBoostAmount = 2500;\n    //Amount % to be paid for doing Boost on a Farm/Pool\n    uint256 public constant POOL_BOOST_FEE = 50;\n    //max overall user boost\n    uint256 public maxUserBoostAmount = 10000; //100%\n    //max boost per pool\n    uint256 public maxPoolBoostAmount = 15000; //150%\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping (uint256 =\u003e mapping (address =\u003e UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when CALCIFIRE mining starts.\n    uint256 public startBlock;\n\n    // Total locked up rewards\n    uint256 public totalLockedUpRewards;\n    // Total CALCIFIRE in CALCIFIRE Pools (can be multiple pools)\n    uint256 public totalCALCIFIREInPools = 0;\n\n    // referral contract address.\n    ICalcifireReferral public calcifireReferral;\n    // Referral commission rate in basis points.\n    uint16 public referralCommissionRate = 500;\n    // Max referral commission rate: 10%.\n    uint16 public constant MAXIMUM_REFERRAL_COMMISSION_RATE = 1000;\n\n    // Maximum deposit fee rate: 10%\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\n    // Min Havest interval: 1 hour\n    uint256 public constant MINIMUM_HARVEST_INTERVAL = 3600;\n    // Max harvest interval: 14 days.\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\n\n    //DEAD TOKENS ADDRESS\n    address public constant DEAD_TOKENS = 0x000000000000000000000000000000000000dEaD;\n\n    //token-usd pair by token symbol - used by Boosts functionality\n    mapping (string =\u003e address) private _tokenUSDPair;\n\n    //Boost USD limits\n    mapping (uint256 =\u003e uint256) private _boostUSDLimits;\n\n    bool public _boostLimitsEnabled = true;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amountHarvest);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmissionRateUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\n    event ReferralCommissionPaid(address indexed user, address indexed referrer, uint256 commissionAmount);\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\n    event Boost(address indexed user, uint256 indexed pid, uint256 userBoost);\n    event OperatorUpdated(address indexed operator, bool indexed status);\n    event SetBoostLimitsEnabled(bool boostLimitsEnabled);\n    event SetBoostAmounts (uint256 _maxPoolBoostAmount, uint256 _maxUserBoostAmount, uint256 _userPoolBoostAmount);\n    event SetPoolBoost (uint256 _pid, bool _isBoostEnabled);\n    event UserBoostAddedByOperator(address _user, uint256 _amount);\n    event UserPoolBoostAddedByOperator(uint256 _pid, address _user, uint256 _amount);\n    event DevAddressUpdated(address devaddr, address _devaddr);\n    event FeeAddressUpdated(address feeAddress, address _feeAddress);\n    event SetReferralCommissionRate(uint16 _referralCommissionRate);\n\n    modifier onlyOperator {\n        require(operators[msg.sender], \"Operator: caller is not the operator\");\n        _;\n    }\n\n    constructor(\n        Calcifire _CALCIFIRE,\n        address _devaddr,\n        address _treasuryaddr,\n        address _feeAddress,\n        uint256 _calcifirePerBlock,\n        uint256 _targetCalcifirePerBlock,\n        uint256 _startBlock\n    ) public {\n        require(_devaddr != address(0), \"_devaddr is the zero address\");\n        require(_treasuryaddr != address(0), \"_treasuryaddr is the zero address\");\n        require(_feeAddress != address(0), \"_feeAddress is the zero address\");\n\n        CALCIFIRE = _CALCIFIRE;\n        devaddr = _devaddr;\n        treasuryaddr = _treasuryaddr;\n        feeAddress = _feeAddress;\n        calcifirePerBlock = _calcifirePerBlock;\n        targetCalcifirePerBlock = _targetCalcifirePerBlock;\n        startBlock = _startBlock;\n\n        operators[_msgSender()] = true;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    function remainRewards() external view returns (uint256) {\n        return CALCIFIRE.balanceOf(address(this)).sub(totalCALCIFIREInPools);\n    }\n\n    // calculate price based on pair reserves\n    function getTokenPrice(address pairAddress, uint256 amount, string memory tokenSymbol) public view returns(uint) {\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\n        (uint256 Res0, uint256 Res1,) = pair.getReserves();\n        IERC20 token = IERC20(pair.token0());\n        uint256 price = 0;\n\n        if (keccak256(bytes(token.symbol())) == keccak256(bytes(tokenSymbol))) {\n          // return amount of token1 needed to buy token0\n          price = amount.mul(Res1.mul(10**token.decimals())).div(Res0);\n        }\n        else {\n          token = IERC20(pair.token1());\n          // return amount of token0 needed to buy token1\n          price = amount.mul(Res0.mul(10**token.decimals())).div(Res1);\n        }\n\n        return price;\n    }\n\n    // Set token-usd pair - used by Boosts functionality\n    function setTokenUSDPair(address pairAddress, string memory tokenSymbol) public onlyOperator {\n        require(pairAddress != address(0), \"setTokenUSDPair: pairAddress is the zero address\");\n        require(_tokenUSDPair[tokenSymbol] != pairAddress, \"setTokenUSDPair: pair address is already set for this token\");\n\n        _tokenUSDPair[tokenSymbol] = pairAddress;\n    }\n\n    // Get token-usd pair by token symbol\n    function getTokenUSDPair(string memory tokenSymbol) public view returns(address) {\n        return(_tokenUSDPair[tokenSymbol]);\n    }\n\n    // check native pool LP amount in USD\n    function getNativePoolLPInUSD(address lpAddress, uint256 lpTotalSupply, uint256 amount) public view returns(uint256) {\n        require(getTokenUSDPair(\"WBNB\") != address(0x0), \"getNativePoolLPInUSD: BNB-BUSD pair is mandatory\");\n\n        uint256 userLPinCalcifer = 0;\n        uint256 nativePriceUSD = 0;\n        uint256 poolAmountInUSD = 0;\n        uint256 totalTokens = 0;\n\n        //get BNB-BUSD LP address\n        address quoteTokenLP = getTokenUSDPair(\"WBNB\");\n        uint256 priceBNBinUSD = getTokenPrice(quoteTokenLP, 1, \"WBNB\");\n\n        //native token price calc\n        uint256 priceCalciferInBNB = getTokenPrice(address(CALCIFIRE.uniswapV2Pair()), 1, \"CALCIFIRE\");\n        nativePriceUSD = (priceCalciferInBNB.mul(priceBNBinUSD)).div(10**CALCIFIRE.decimals());\n\n        //native pool\n        if (lpAddress == address(CALCIFIRE)) {\n          poolAmountInUSD = amount.mul(nativePriceUSD).div(10**CALCIFIRE.decimals());\n          return poolAmountInUSD;\n        }\n\n        //native farms\n        totalTokens = CALCIFIRE.balanceOf(lpAddress);\n        userLPinCalcifer = amount.mul(totalTokens).mul(2).div(lpTotalSupply);\n\n        poolAmountInUSD = userLPinCalcifer.mul(nativePriceUSD).div(10**CALCIFIRE.decimals());\n\n        return poolAmountInUSD;\n    }\n\n    // Set token-usd pair - used by Boosts functionality\n    function setBoostLimitsEnabled(bool boostLimitsEnabled) public onlyOperator {\n        _boostLimitsEnabled = boostLimitsEnabled;\n\n        emit SetBoostLimitsEnabled(boostLimitsEnabled);\n    }\n\n    // Set Pool Boost limits\n    function setPoolBoostUSDLimits(uint256 boostStep, uint256 boostUSDLimit) public onlyOperator {\n        require(_boostUSDLimits[boostStep] != boostUSDLimit, \"setPoolBoostUSDLimits: USD limit is already set for this % step\");\n        _boostUSDLimits[boostStep] = boostUSDLimit;\n    }\n\n    // Get Pool Boost limits\n    function getPoolBoostUSDLimits(uint256 boostStep) public view returns(uint256) {\n        return(_boostUSDLimits[boostStep]);\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    function add(uint256 _allocPoint, IBEP20 _lpToken, uint16 _depositFeeBP, uint256 _harvestInterval, bool _withUpdate) public onlyOwner {\n        require(_depositFeeBP \u003c= MAXIMUM_DEPOSIT_FEE_RATE, \"add: deposit fee too high\");\n        require(_harvestInterval \u003c= MAXIMUM_HARVEST_INTERVAL, \"add: invalid harvest interval\");\n        require(poolAdded[_lpToken] != true, \"add: same LP cant be added twice\");\n        poolAdded[_lpToken] = true;\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number \u003e startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({\n            lpToken: _lpToken,\n            allocPoint: _allocPoint,\n            lastRewardBlock: lastRewardBlock,\n            accCALCIFIREPerShare: 0,\n            depositFeeBP: _depositFeeBP,\n            harvestInterval : _harvestInterval,\n            isBoostEnabled : false,\n            lpTotalSupply: _lpToken.totalSupply()\n        }));\n    }\n\n    // Update the given pool\u0027s CALCIFIRE allocation point and deposit fee. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint, uint16 _depositFeeBP, uint256 _harvestInterval, bool _withUpdate) public onlyOwner {\n        require(_depositFeeBP \u003c= MAXIMUM_DEPOSIT_FEE_RATE, \"set: deposit fee too high\");\n        require(_harvestInterval \u003c= MAXIMUM_HARVEST_INTERVAL, \"set: invalid harvest interval\");\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\n        poolInfo[_pid].harvestInterval = _harvestInterval;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\n    }\n\n    // View function to see pending CALCIFIREs on frontend.\n    function pendingCalcifireTotal(uint256 _pid, address _user) public view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accCALCIFIREPerShare = pool.accCALCIFIREPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number \u003e pool.lastRewardBlock \u0026\u0026 lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 calcifireReward = multiplier.mul(calcifirePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accCALCIFIREPerShare = accCALCIFIREPerShare.add(calcifireReward.mul(1e12).div(lpSupply));\n        }\n        uint256 pending = user.amount.mul(accCALCIFIREPerShare).div(1e12).sub(user.rewardDebt);\n\n        if (userBoost[_user] \u003e 0) {\n            uint256 boostAmount = pending.mul(userBoost[_user]).div(10000);\n            pending = pending.add(boostAmount);\n        }\n\n        if (pool.isBoostEnabled \u0026\u0026 user.boost \u003e 0) {\n            uint256 boostAmount = pending.mul(user.boost).div(10000);\n            pending = pending.add(boostAmount);\n        }\n\n        return pending.add(user.rewardLockedUp).add(user.boostLockedUp);\n    }\n\n    // View function to see pending boosted amount of CALCIFIRE\n    function pendingCalcifireBoosted(uint256 _pid, address _user) public view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accCALCIFIREPerShare = pool.accCALCIFIREPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number \u003e pool.lastRewardBlock \u0026\u0026 lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 calcifireReward = multiplier.mul(calcifirePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accCALCIFIREPerShare = accCALCIFIREPerShare.add(calcifireReward.mul(1e12).div(lpSupply));\n        }\n        uint256 pending = user.amount.mul(accCALCIFIREPerShare).div(1e12).sub(user.rewardDebt);\n        uint256 boostAmount = 0;\n\n        if (userBoost[_user] \u003e 0) {\n            boostAmount = pending.mul(userBoost[_user]).div(10000);\n        }\n\n        if (pool.isBoostEnabled \u0026\u0026 user.boost \u003e 0) {\n            boostAmount = pending.mul(user.boost).div(10000);\n        }\n\n        return boostAmount.add(user.boostLockedUp);\n    }\n\n    // View function to see if user can harvest.\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\n        UserInfo storage user = userInfo[_pid][_user];\n        return block.timestamp \u003e= user.nextHarvestUntil;\n    }\n\n    // View function to calc current Harvest Tax %\n    function harvestTax(uint256 _pid, address _user) public view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        if (block.timestamp \u003e= user.nextHarvestUntil) {\n            return 0;\n        } else {\n            uint256 remainingBlocks = user.nextHarvestUntil.sub(block.timestamp);\n            uint256 harvestTaxAmount = remainingBlocks.mul(100).div(pool.harvestInterval);\n\n            if (harvestTaxAmount \u003c 2) {\n                return 0;\n            } else {\n                return harvestTaxAmount;\n            }\n        }\n\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number \u003c= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0 || pool.allocPoint == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n\n        autoReduceEmissionRate();\n\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 calcifireReward = multiplier.mul(calcifirePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        CALCIFIRE.mint(devaddr, calcifireReward.div(20));\n        CALCIFIRE.mint(treasuryaddr, calcifireReward.div(20));\n        CALCIFIRE.mint(address(this), calcifireReward);\n        pool.accCALCIFIREPerShare = pool.accCALCIFIREPerShare.add(calcifireReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to HowlsCastle for CALCIFIRE allocation.\n    function deposit(uint256 _pid, uint256 _amount, bool _boost, address _referrer) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        uint256 amount = _amount;\n        uint256 beforeTransfer;\n\n        if (amount \u003e 0) {\n          //calculate balance of LP in the pool before transfer\n          beforeTransfer = pool.lpToken.balanceOf(address(this));\n\n          if (address(calcifireReferral) != address(0) \u0026\u0026 _referrer != address(0) \u0026\u0026 _referrer != msg.sender) {\n              calcifireReferral.recordReferral(msg.sender, _referrer);\n          }\n        }\n\n        if (_boost) {\n            require(pool.isBoostEnabled, \"deposit:BOOST NOT ENABlED\");\n            require(canHarvest(_pid, msg.sender),\u0027deposit:BOOST NOT READY\u0027);\n            if (_boostLimitsEnabled) {\n              require(getNativePoolLPInUSD(address(pool.lpToken), pool.lpTotalSupply, user.amount) \u003e= getPoolBoostUSDLimits(user.boost), \u0027deposit:BOOST USD LIMIT RESTRICTION\u0027);\n            }\n        }\n\n        payOrLockupPendingCALCIFIRE(_pid, _boost, amount);\n\n        if(!_boost \u0026\u0026 amount \u003e 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), amount);\n            //calculate balance of LP in the pool after transfer\n            uint256 afterTransfer = pool.lpToken.balanceOf(address(this));\n            amount = afterTransfer.sub(beforeTransfer);\n            if(pool.depositFeeBP \u003e 0){\n                uint256 depositFee = amount.mul(pool.depositFeeBP).div(10000);\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\n                user.amount = user.amount.add(amount).sub(depositFee);\n\n                if (address(pool.lpToken) == address(CALCIFIRE)) {\n                    totalCALCIFIREInPools = totalCALCIFIREInPools.add(amount).sub(depositFee);\n                }\n            } else {\n                user.amount = user.amount.add(amount);\n\n                if (address(pool.lpToken) == address(CALCIFIRE)) {\n                    totalCALCIFIREInPools = totalCALCIFIREInPools.add(amount);\n                }\n            }\n        }\n        user.rewardDebt = user.amount.mul(pool.accCALCIFIREPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, amount);\n    }\n\n    // Withdraw LP tokens from HowlsCastle.\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount \u003e= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 amount = _amount;\n\n        payOrLockupPendingCALCIFIRE(_pid, false, amount);\n\n        if(amount \u003e 0) {\n            //calculate balance of LP in the pool before transfer\n            uint256 beforeTransfer = pool.lpToken.balanceOf(address(this));\n\n            pool.lpToken.safeTransfer(address(msg.sender), amount);\n\n            //calculate balance of LP in the pool after transfer\n            uint256 afterTransfer = pool.lpToken.balanceOf(address(this));\n            amount = beforeTransfer.sub(afterTransfer);\n            user.amount = user.amount.sub(amount);\n\n            if (address(pool.lpToken) == address(CALCIFIRE)) {\n                totalCALCIFIREInPools = totalCALCIFIREInPools.sub(amount);\n            }\n        }\n        user.rewardDebt = user.amount.mul(pool.accCALCIFIREPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        user.nextHarvestUntil = 0;\n        user.rewardLockedUp = 0;\n        user.boostLockedUp = 0;\n\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\n\n        if (address(pool.lpToken) == address(CALCIFIRE)) {\n            totalCALCIFIREInPools = totalCALCIFIREInPools.sub(amount);\n        }\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    // Pay or lockup pending CALCIFIRE.\n    function payOrLockupPendingCALCIFIRE(uint256 _pid, bool _boost, uint256 _amount) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 pending = user.amount.mul(pool.accCALCIFIREPerShare).div(1e12).sub(user.rewardDebt);\n\n        if (pending \u003e 0 || user.rewardLockedUp \u003e 0) {\n\n            uint256 boostAmount = 0;\n            uint256 totalRewards = pending.add(user.rewardLockedUp).add(user.boostLockedUp);\n\n            //Check if user has Boost and add to total rewards\n             if (userBoost[msg.sender] \u003e 0) {\n                boostAmount = pending.mul(userBoost[msg.sender]).div(10000);\n                totalRewards = totalRewards.add(boostAmount);\n             }\n            //Check if pool boost is enabled and add to total rewards\n            if (pool.isBoostEnabled \u0026\u0026 user.boost \u003e 0) {\n                boostAmount = pending.mul(user.boost).div(10000);\n                totalRewards = totalRewards.add(boostAmount);\n            }\n\n            if (_boost || _amount == 0) { // User wanna boost or harvest\n\n                CALCIFIRE.mint(address(this), boostAmount.add(user.boostLockedUp));\n\n                if (_boost) {\n                    //add to User Pool Boost\n                    user.boost = user.boost.add(userPoolBoostAmount);\n                    if (user.boost \u003e maxPoolBoostAmount) {\n                        user.boost = maxPoolBoostAmount;\n                    }\n                    //take 50% boost fee and transfer\n                    uint256 halfRewards = totalRewards.mul(POOL_BOOST_FEE).div(100);\n                    safeCALCIFIRETransfer(DEAD_TOKENS, halfRewards);\n                    safeCALCIFIRETransfer(msg.sender, halfRewards);\n                    payReferralCommission(msg.sender, halfRewards);\n                    emit Boost(msg.sender, _pid, user.boost);\n\n                } else {\n                    //check Harvest Tax\n                    uint256 harvestTaxAmount = harvestTax(_pid, msg.sender);\n                    uint256 taxRewards = totalRewards.mul(harvestTaxAmount).div(100);\n                    uint256 netRewards = totalRewards.sub(taxRewards);\n\n                    //send rewards\n                    safeCALCIFIRETransfer(DEAD_TOKENS, taxRewards);\n                    safeCALCIFIRETransfer(msg.sender, netRewards);\n                    payReferralCommission(msg.sender, netRewards);\n                    emit Harvest(msg.sender, _pid, netRewards);\n                }\n\n                // reset lockup\n                totalLockedUpRewards = totalLockedUpRewards.sub(user.rewardLockedUp).sub(user.boostLockedUp);\n                user.rewardLockedUp = 0;\n                user.boostLockedUp = 0;\n                user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\n\n            } else { // User is making another deposit or withdrawal \u0026 has some pending\n\n                user.boostLockedUp = user.boostLockedUp.add(boostAmount);\n                user.rewardLockedUp = user.rewardLockedUp.add(pending);\n                totalLockedUpRewards = totalLockedUpRewards.add(pending).add(boostAmount);\n                emit RewardLockedUp(msg.sender, _pid, pending);\n\n            }\n\n        }\n    }\n\n    // Safe CALCIFIRE transfer function, just in case if rounding error causes pool to not have enough CALCIFIREs.\n    function safeCALCIFIRETransfer(address _to, uint256 _amount) internal {\n        uint256 calcifireBal = CALCIFIRE.balanceOf(address(this)).sub(totalCALCIFIREInPools);\n        if (_amount \u003e calcifireBal) {\n            CALCIFIRE.transfer(_to, calcifireBal);\n        } else {\n            CALCIFIRE.transfer(_to, _amount);\n        }\n    }\n\n    function setBoostAmounts (uint256 _maxPoolBoostAmount, uint256 _maxUserBoostAmount, uint256 _userPoolBoostAmount) public onlyOwner {\n        maxPoolBoostAmount = _maxPoolBoostAmount;\n        maxUserBoostAmount = _maxUserBoostAmount;\n        userPoolBoostAmount = _userPoolBoostAmount;\n\n        emit SetBoostAmounts(_maxPoolBoostAmount, _maxUserBoostAmount, _userPoolBoostAmount);\n    }\n\n    function setPoolBoost (uint256 _pid, bool _isBoostEnabled) public onlyOwner {\n        PoolInfo storage pool = poolInfo[_pid];\n        pool.isBoostEnabled = _isBoostEnabled;\n\n        emit SetPoolBoost(_pid, _isBoostEnabled);\n    }\n\n    // Add to general User Boost by Quest Operator\n    function addUserBoostByOperator(address _user, uint256 _amount) public onlyOperator {\n        require(_user != address(0), \"addUserBoostByOperator: _user is the zero address\");\n\n        userBoost[_user] = userBoost[_user].add(_amount);\n\n        if (userBoost[_user] \u003e maxUserBoostAmount) {\n            userBoost[_user] = maxUserBoostAmount;\n        }\n        emit UserBoostAddedByOperator(_user, _amount);\n    }\n\n    // Add to User Pool Boost by Operator\n    function addUserPoolBoostByOperator(uint256 _pid, address _user, uint256 _amount) public onlyOperator {\n        require(_user != address(0), \"addUserPoolBoostByOperator: _user is the zero address\");\n\n        UserInfo storage user = userInfo[_pid][_user];\n\n        user.boost = user.boost.add(_amount);\n        if (user.boost \u003e maxPoolBoostAmount) {\n            user.boost = maxPoolBoostAmount;\n        }\n\n        emit UserPoolBoostAddedByOperator(_pid, _user, _amount);\n    }\n\n    // Update dev address by the previous dev.\n    function setDevAddress(address _devaddr) public {\n        require(msg.sender == devaddr, \"setDevAddress: can only be called by dev\");\n        require(_devaddr != address(0), \"setDevAddress: devaddr is the zero address\");\n\n        emit DevAddressUpdated(devaddr, _devaddr);\n        devaddr = _devaddr;\n    }\n\n    function setFeeAddress(address _feeAddress) public{\n        require(msg.sender == feeAddress, \"setFeeAddress: can only be called by feeAddress\");\n        require(_feeAddress != address(0), \"setFeeAddress: feeAddress is the zero address\");\n\n        emit FeeAddressUpdated(feeAddress, _feeAddress);\n        feeAddress = _feeAddress;\n    }\n\n    // Update the status of the operator\n    function updateOperator(address _operator, bool _status) external onlyOwner {\n        require(_operator != address(0), \"updateOperator: _operator is the zero address\");\n\n        operators[_operator] = _status;\n        emit OperatorUpdated(_operator, _status);\n    }\n\n    //Pancake has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.\n    function updateEmissionRate(uint256 _calcifirePerBlock) public onlyOwner {\n        massUpdatePools();\n        emit EmissionRateUpdated(msg.sender, calcifirePerBlock, _calcifirePerBlock);\n        calcifirePerBlock = _calcifirePerBlock;\n    }\n\n    //Update emission halving settings\n    function updateEmissionHalving(uint256 _calcifireHalvingInterval, uint256 _emissionRateDecreasePerBlock, uint256 _targetCalcifirePerBlock) public onlyOwner {\n        massUpdatePools();\n        calcifireHalvingInterval = _calcifireHalvingInterval;\n        emissionRateDecreasePerBlock = _emissionRateDecreasePerBlock;\n        targetCalcifirePerBlock = _targetCalcifirePerBlock;\n    }\n\n    //auto-reduce emission\n    function autoReduceEmissionRate() internal returns (bool) {\n        uint calcifirePerBlockCurrentTime = block.timestamp;\n        // if 12h passed and calcifirePerBlock \u003e 0.03\n        if((calcifirePerBlockCurrentTime.sub(calcifirePerBlockHalvingTime) \u003e= calcifireHalvingInterval) \u0026\u0026 (calcifirePerBlock \u003e targetCalcifirePerBlock)){\n            if(calcifirePerBlock.sub(calcifirePerBlock.mul(emissionRateDecreasePerBlock).div(100)) \u003c targetCalcifirePerBlock) calcifirePerBlock = targetCalcifirePerBlock;\n            else calcifirePerBlock = calcifirePerBlock.sub(calcifirePerBlock.mul(emissionRateDecreasePerBlock).div(100));\n\n            calcifirePerBlockHalvingTime = calcifirePerBlockCurrentTime;\n        }\n        return true;\n    }\n\n    // Update the referral contract address by the owner\n    function setReferralContract(ICalcifireReferral _calcifireReferral) public onlyOwner {\n        calcifireReferral = _calcifireReferral;\n    }\n\n    // Update referral commission rate by the owner\n    function setReferralCommissionRate(uint16 _referralCommissionRate) public onlyOwner {\n        require(_referralCommissionRate \u003c= MAXIMUM_REFERRAL_COMMISSION_RATE, \"setReferralCommissionRate: invalid referral commission rate basis points\");\n        referralCommissionRate = _referralCommissionRate;\n\n        emit SetReferralCommissionRate(_referralCommissionRate);\n    }\n\n    // Pay referral commission to the referrer who referred this user.\n    function payReferralCommission(address _user, uint256 _pending) internal {\n        if (address(calcifireReferral) != address(0) \u0026\u0026 referralCommissionRate \u003e 0) {\n            address referrer = calcifireReferral.getReferrer(_user);\n            uint256 commissionAmount = _pending.mul(referralCommissionRate).div(10000);\n\n            if (referrer != address(0) \u0026\u0026 commissionAmount \u003e 0) {\n\n                CALCIFIRE.mint(referrer, commissionAmount);\n                calcifireReferral.recordReferralCommission(referrer, commissionAmount);\n                emit ReferralCommissionPaid(_user, referrer, commissionAmount);\n\n            }\n        }\n    }\n\n    // Update start reward block\n    function setStartRewardBlock(uint256 _block) public onlyOwner {\n        startBlock = _block;\n    }\n}\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.6.4;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint256);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"ICalcifireReferral.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ICalcifireReferral {\n    /**\n     * @dev Record referral.\n     */\n    function recordReferral(address user, address referrer) external;\n\n    /**\n     * @dev Record referral commission.\n     */\n    function recordReferralCommission(address referrer, uint256 commission) external;\n\n    /**\n     * @dev Get the referrer address that referred the user.\n     */\n    function getReferrer(address user) external view returns (address);\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\ninterface IERC20 {\n\n\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n\n    function decimals() external view returns (uint256);\n\n   /**\n    * @dev Returns the token decimals.\n    */\n\n    function symbol() external view returns (string memory);\n    /**\n     * @dev Returns the token symbol.\n     */\n     \n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \u0027./IUniswapV2Router01.sol\u0027;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\nimport \u0027./Context.sol\u0027;\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n     /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function geUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n\n    //Locks the contract for owner for the amount of time provided\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = now + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n\n    //Unlocks the contract for owner when _lockTime is exceeds\n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don\u0027t have permission to unlock\");\n        require(now \u003e _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"SafeBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\nimport \u0027./IBEP20.sol\u0027;\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Address.sol\u0027;\n\n/**\n * @title SafeBEP20\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeBEP20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}