/**
 *  SPDX-License-Identifier: MIT
*/

pragma solidity ^0.8.7;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}


interface IERC20Metadata is IERC20 {

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}



library SafeMath {
  


    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }


    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

   
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _setOwner(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }


    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

 
interface IPancakeFactory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IPancakeRouter {
     function WETH() external pure returns (address);
     function factory() external pure returns (address);
} 

interface IPancakePair{
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
}

interface Token {
  event LockToken(address indexed walletLock, uint256 amount, uint256 releaseTime, uint256 maxReleaseAmount);
}

contract WarriorViking is Context, IERC20, IERC20Metadata,Ownable, Token {
    
    using SafeMath for uint256;
    
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address=>bool) isBlacklisted;

    uint256 private _totalSupply;
    string private _name = "Warrior Viking Coin";
    string private _symbol = "WVC";
    uint256 private _initSupply = 600000000*10**18;
    address ownerWallet;
    
    uint256 public taxFeeWV = 200;
    uint256 public incubatorFee = 300;
    address public taxAddress;
    address public pairAddress;
    address public immutable routerAddress;
    address public incubatorWallet;
    
    mapping(address => bool) private _isExcludedFromFee;


    constructor() {
        _mint(msg.sender, _initSupply);
        
        taxAddress = payable(msg.sender);
        
        //IPancakeRouter _router = IPancakeRouter(0xECC5428A66808FC40A464e5B3F4D265Df985E3E8); //for test
        IPancakeRouter _router = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        
            
        pairAddress = IPancakeFactory(_router.factory())
            .createPair(address(this), _router.WETH());

        // set the rest of the contract variables
        routerAddress = address(_router);
        
        _isExcludedFromFee[owner()] = true;
    }

    


    struct lockParams{
        address walletLock;
        uint256 amount;
        uint256 releaseTime;
        uint256 maxReleaseAmount;
    }

    lockParams[] public lockArr;

    modifier onlyWallet() {
        require(ownerWallet == _msgSender(), "You cannot perform this function");
        _;
    }



    function lockToken(uint256 amount, uint256 releaseTime, uint256 maxReleaseAmount) external {
        address walletLock = msg.sender;
        require(balanceOf(walletLock) >= amount, "balance too low");

        lockParams memory lock = lockParams({walletLock: walletLock, amount: amount, releaseTime: releaseTime, maxReleaseAmount: maxReleaseAmount});

        lockArr.push(lock);
        

        _balances[walletLock] -= amount * 10 ** 18;
        emit LockToken(walletLock, amount, releaseTime,maxReleaseAmount);

    }



    function unlockTokens(address walletLocked, uint indexLocked) external onlyWallet () {

        uint256 releaseTime = lockArr[indexLocked].releaseTime;
        uint256 maxReleaseAmount = lockArr[indexLocked].maxReleaseAmount;
        address _walletLocked = lockArr[indexLocked].walletLock;
        uint256 timeAdd = 2678400;

        

        require(releaseTime <= block.timestamp, "The token is still locked");

        if(walletLocked == _walletLocked){
            _balances[walletLocked] += maxReleaseAmount * 10 ** 18;
            lockArr[indexLocked].amount -= maxReleaseAmount;
            lockArr[indexLocked].releaseTime = block.timestamp + timeAdd;

            if(lockArr[indexLocked].amount <= 0){
                delete lockArr[indexLocked];
            }

        }

        

    }

    function blackList(address _user) public onlyWallet {
        require(!isBlacklisted[_user], "user already blacklisted");
        isBlacklisted[_user] = true;
        // emit events as well
    }
    
    function removeFromBlacklist(address _user) public onlyWallet {
        require(isBlacklisted[_user], "user already whitelisted");
        isBlacklisted[_user] = false;
        // emit events as well
    }

    function setOnlyWallet(address account) public onlyOwner {
        ownerWallet = account;
    }
    
    function setIncubatorWallet(address account) public onlyOwner {
        incubatorWallet = account;
    }
    
    
    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }
    
    function setTaxAddress(address _taxAddress) public onlyOwner {
        taxAddress = _taxAddress;
    }
    
    function setTax(uint256 _taxFee) public onlyOwner{
        taxFeeWV = _taxFee;
    }

    function setIncubatorTax(uint256 _taxFee) public onlyOwner{
        incubatorFee = _taxFee;
    }
    
    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }
    
    function amountForEth(uint256 ethAmount) public view returns(uint256 tokenAmount){
        address _token0Address = IPancakePair(pairAddress).token0();
        address wethAddress = IPancakeRouter(routerAddress).WETH();
        
        (uint112 _reserve0,uint112 _reserve1,) = IPancakePair(pairAddress).getReserves();
        uint256 _tokenAmount;
        uint256 _wethAmount;
        if(_token0Address==wethAddress){
            _wethAmount = _reserve0;
            _tokenAmount = _reserve1;
        }
        else{
            _wethAmount = _reserve1;
            _tokenAmount = _reserve0;
        }
        tokenAmount = ethAmount.mul(_tokenAmount).div(_wethAmount);
    }


    function name() public view virtual override returns (string memory) {
        return _name;
    }


    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

 
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

 
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        
        _transfer(_msgSender(), recipient, amount);
        return true;
    }


    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }


    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }


    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

     function setPairAddress(address pair) public onlyOwner {
        pairAddress = pair;
    }


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance.sub(subtractedValue));
        }

        return true;
    }


    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(!isBlacklisted[sender], "Recipient is backlisted");
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");

        unchecked {
            _balances[sender] = senderBalance.sub(amount);
        }
        
        bool takeFee = true;
        if (_isExcludedFromFee[sender]) {
            takeFee = false;
        }
        
        if(recipient==pairAddress&&takeFee){
            uint256 taxFee = amount.mul(taxFeeWV).div(10000);
            uint256 incubatorTaxFee = amount.mul(incubatorFee).div(10000);
            _balances[taxAddress] = _balances[taxAddress].add(taxFee);
            _balances[incubatorWallet] = _balances[incubatorWallet].add(incubatorTaxFee);
            emit Transfer(sender, taxAddress, taxFee);
            emit Transfer(sender, incubatorWallet, incubatorTaxFee);
            amount = amount.sub(taxFee);
        }
        
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }
    

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }


    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

}