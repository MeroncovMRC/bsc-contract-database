{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don\u0027t have permission to unlock\");\r\n        require(block.timestamp \u003e _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}"},"TERTFProtocol.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract TERTFProtocol is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public _swapRate = 100;\r\n    uint256 private startSwapBlock;\r\n\r\n    mapping(address =\u003e bool) private _blackList;\r\n    mapping(address =\u003e bool) private _feeWhiteList;\r\n\r\n    address private _reward;\r\n    address public DEAD = address(0x000000000000000000000000000000000000dEaD);\r\n    address public ZERO = address(0);\r\n\r\n    event TokenSwapped(address indexed sender, uint256 amount);\r\n    event BuyReward(address indexed sender, uint256 amount);\r\n\r\n    constructor(address reward, uint256 swapRate) {\r\n        _reward = reward;\r\n        _swapRate = swapRate;\r\n        _blackList[DEAD] = true;\r\n        _blackList[ZERO] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n    }\r\n\r\n    receive() external payable {\r\n        address sender = msg.sender;\r\n        uint256 ethAmount = msg.value;\r\n\r\n        uint256 rewardAmount = swapToken(sender, ethAmount);\r\n\r\n        emit TokenSwapped(sender, rewardAmount);\r\n    }\r\n\r\n/**\r\n * @dev The minimum transfer amount for WETH is 0.01,the purpose is to limit dust attacks.\r\n * The attacker enters the minimum number of WETHs each time, \r\n * consuming the WETHs in the contract address through GAS fees.\r\n */\r\n    function swapToken(address sender, uint256 ethAmount) internal returns (uint256) {\r\n        //require(ethAmount \u003e= 0.01 ether, \"TERTProtocol: Minimum transfer amount is 0.01 WETH\");\r\n        //require(ethAmount \u003c= 10 ether, \"TERTProtocol: Maxmum transfer amount is 10 WETH\");\r\n        require(msg.value \u003e= gasleft() * tx.gasprice, \"TERTProtocol: Insufficient gas fees\");\r\n        \r\n        uint256 rewardAmount;\r\n        IERC20 Reward = IERC20(_reward);\r\n        uint256 balance = Reward.balanceOf(address(this));\r\n\r\n        if(\r\n            sender != owner() \u0026\u0026 \r\n            _feeWhiteList[sender] \u0026\u0026\r\n            ethAmount \u003e= 0.01 ether \u0026\u0026\r\n            ethAmount \u003c= 10 ether\r\n        ) {\r\n            rewardAmount = ethAmount.mul(_swapRate).mul(10 ** Reward.decimals()).div(1e18);\r\n            if(rewardAmount \u003e 0 \u0026\u0026 balance \u003e= rewardAmount) {\r\n                Reward.transfer(sender, rewardAmount);\r\n            }\r\n        } else if(\r\n            sender != owner() \u0026\u0026 \r\n            startSwapBlock \u003e 0 \u0026\u0026\r\n            !isContract(sender) \u0026\u0026\r\n            !_blackList[sender] \u0026\u0026\r\n            ethAmount \u003e= 0.01 ether \u0026\u0026\r\n            ethAmount \u003c= 10 ether\r\n        ) {\r\n            rewardAmount = ethAmount.mul(_swapRate).mul(10 ** Reward.decimals()).div(1e18);\r\n            if(rewardAmount \u003e 0 \u0026\u0026 balance \u003e= rewardAmount) {\r\n                Reward.transfer(sender, rewardAmount);\r\n            }\r\n        }\r\n        \r\n        return rewardAmount;\r\n    }\r\n\r\n    function buyReward() external payable returns (uint256) {\r\n        require(msg.value \u003e= 0.01 ether, \"TERTProtocol: Minimum transfer amount is 0.01 WETH\");\r\n        require(msg.value \u003c= 10 ether, \"TERTProtocol: Maxmum transfer amount is 10 WETH\");\r\n        require(msg.value \u003e= gasleft() * tx.gasprice, \"TERTProtocol: Insufficient gas fees\");\r\n\r\n        address sender = msg.sender;\r\n        uint256 ethAmount = msg.value;\r\n        uint256 rewardAmount;\r\n        IERC20 Reward = IERC20(_reward);\r\n        uint256 balance = Reward.balanceOf(address(this));\r\n\r\n        if(_feeWhiteList[sender]) {\r\n            rewardAmount = ethAmount.mul(_swapRate).mul(10 ** Reward.decimals()).div(1e18);\r\n            if(rewardAmount \u003e 0 \u0026\u0026 balance \u003e= rewardAmount) {\r\n                Reward.transfer(sender, rewardAmount);\r\n            }\r\n        } else if(\r\n            startSwapBlock \u003e 0 \u0026\u0026\r\n            !isContract(sender) \u0026\u0026\r\n            !_blackList[sender]\r\n        ) {\r\n            rewardAmount = ethAmount.mul(_swapRate).mul(10 ** Reward.decimals()).div(1e18);\r\n            if(rewardAmount \u003e 0 \u0026\u0026 balance \u003e= rewardAmount) {\r\n                Reward.transfer(sender, rewardAmount);\r\n            }\r\n        }\r\n        \r\n        emit BuyReward(sender, rewardAmount);\r\n\r\n        return rewardAmount;\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function setSwapRate(uint256 swapRate) external onlyOwner {\r\n        _swapRate = swapRate;\r\n    }\r\n\r\n    function claimBalance() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount, address to) external onlyOwner {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    function startSwap() external onlyOwner {\r\n        require(0 == startSwapBlock, \"TERTProtocol: startSwap has been set\");\r\n        startSwapBlock = block.number;\r\n    }\r\n\r\n    function closeSwap() external onlyOwner {\r\n        require(startSwapBlock \u003e 0, \"TERTProtocol: startSwap has not been set\");\r\n        startSwapBlock = 0;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n}"}}