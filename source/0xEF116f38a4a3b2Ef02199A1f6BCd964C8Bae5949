// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external;
    function addLiquidity(address tokenA,address tokenB,uint amountADesired,uint amountBDesired,uint amountAMin,uint amountBMin,address to,uint deadline) external returns (uint amountA, uint amountB, uint liquidity);
}

interface ISwapFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint256) external view returns (address pair);
    function allPairsLength() external view returns (uint256);
}

interface ISwapPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function token0() external view returns (address);
    function sync() external;
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
}

abstract contract Ownable {
    address internal _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == msg.sender, "!owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "new 0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract TokenDistributor {
    address public _owner;
    constructor (address token, address weth) {
        _owner = msg.sender;
        IERC20(token).approve(msg.sender, ~uint256(0));
        IERC20(weth).approve(msg.sender, ~uint256(0));
    }
    function claimToken(address token, address to, uint256 amount) external {
        require(msg.sender == _owner, "!owner");
        IERC20(token).transfer(to, amount);
    }
}

abstract contract ApiToken is IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address public fundAddress;

    string private _name;
    string private _symbol;
    uint8 private _decimals = 18;

    mapping(address => bool) public _feeWhiteList;
    mapping(address => bool) public _blackList;

    uint256 private _tTotal;

    ISwapRouter public _swapRouter;
    address public _usdt;
    address public _addLPToken;
    mapping(address => bool) public _swapPairList;

    bool private inSwap;

    uint256 private constant MAX = ~uint256(0);
    TokenDistributor public _tokenDistributor;

    uint256 public _buyLPFee = 150;
    uint256 public _buyFundFee = 150;

    uint256 public _sellLPFee = 150;
    uint256 public _sellFundFee = 150;
    address public _mainPair;
    address public _usdtPair;
    address private pancakeFactory;

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    function getPrice() public view returns (uint256) {
        address pairAddress = ISwapFactory(pancakeFactory).getPair(address(this), _addLPToken);
        require(pairAddress != address(0), "Pair does not exist");
        ISwapPair pair = ISwapPair(pairAddress);
        (uint256 reserveA, uint256 reserveB, ) = pair.getReserves();
        require(reserveA > 0 && reserveB > 0, "Reserves are zero");
        return reserveA * 1e18 / reserveB;
    }
    mapping(address => bool) public isPair;
    mapping(address => uint256) public buyAmount;
    uint256 public killTime = 15;    //区块时间15秒
    uint256 public launchedAtTimestamp; // 开盘时间戳
    uint256 public killTime2 = 600;    //10分钟时间买入转走会被拉黑，以及超过10u
    uint256 public maxBuyNum = 10;    //限制超过10u的会被拉黑
    function kill(address sender, address recipient, uint256 amount) internal {
        if (!isPair[recipient] && block.timestamp < launchedAtTimestamp + killTime) {
            _blackList[recipient] = true;
            return;
        }
        if (block.timestamp < launchedAtTimestamp + killTime2) {
            if (!isPair[sender] && !isPair[recipient]) {
                _blackList[recipient] = true;
            } else if (isPair[sender] && !isPair[recipient]) {
                uint256 _amount = getPrice().mul(amount).mul(1800).div(1e18);
                buyAmount[recipient] = buyAmount[recipient].add(_amount);
                if (buyAmount[recipient] >= maxBuyNum * 1e18) {
                    _blackList[recipient] = true;
                }
            }
        }
    }

    function setKillTime(uint256 _killTime) external onlyOwner {
        killTime = _killTime;
    }

    function setKillTime2(uint256 _killTime) external onlyOwner {
        killTime2 = _killTime;
    }

    function setIsPair(address _address, bool _isPair) external onlyOwner {
        isPair[_address] = _isPair;
    }

    function setMaxBuyNum(uint256 _maxBuyNum) external onlyOwner {
        maxBuyNum = _maxBuyNum;
    }

    function setLaunchedAtTimestamp(uint256 _launchedAtTimestamp) external onlyOwner {
        launchedAtTimestamp = _launchedAtTimestamp;
    }

    constructor (address RouterAddress, address USDTAddress, string memory Name, string memory Symbol, uint256 Supply,address FundAddress){
        _name = Name;
        _symbol = Symbol;
        ISwapRouter swapRouter = ISwapRouter(RouterAddress);
        _usdt = USDTAddress;
        _swapRouter = swapRouter;
        _allowances[address(this)][address(swapRouter)] = MAX;
        address weth = swapRouter.WETH();
        IERC20(weth).approve(RouterAddress, MAX);
        IERC20(USDTAddress).approve(RouterAddress, MAX);
        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        address mainPair = swapFactory.createPair(address(this), weth);
        _swapPairList[mainPair] = true;
        _mainPair = mainPair;
        address usdtPair = swapFactory.createPair(address(this), USDTAddress);
        _swapPairList[usdtPair] = true;
        _usdtPair = usdtPair;
        _addLPToken = weth;
        uint256 tokenDecimals = 10 ** 18;
        uint256 total = Supply * tokenDecimals;
        _tTotal = total;
        _balances[owner()] = total;
        emit Transfer(address(0), owner(), total);
        fundAddress = FundAddress;
        _feeWhiteList[owner()] = true;
        _feeWhiteList[FundAddress] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[address(swapRouter)] = true;
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[address(0)] = true;
        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;
        _tokenDistributor = new TokenDistributor(USDTAddress, weth);
        addLpProvider(owner());
        pancakeFactory = address(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73); //主网 , 测试网0xD99D1c33F9fC3444f8101754aBC46c52416550D1
    }
    function symbol() external view override returns (string memory) {
        return _symbol;
    }
    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function setPancakeFactory(address _pancakeFactory) public onlyOwner{
        pancakeFactory = _pancakeFactory;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from,address to,uint256 amount) private {
        bool isExempt = _feeWhiteList[from] || _feeWhiteList[to];
        if(!isExempt){
            require(block.timestamp >= launchedAtTimestamp,"token: Not launched");
            kill(from,to,amount);
        }
        require(!_blackList[from] || _feeWhiteList[from], "blackList");
        uint256 balance = balanceOf(from);
        require(balance >= amount, "balanceNotEnough");
        bool take;
        if(!_feeWhiteList[from] && !_feeWhiteList[to]){
            take = true;
        }
        _tokenTransfer(from, to, amount, take);
        if (from != address(this)) {
            if (!_swapPairList[to]) {
                addLpProvider(to);
            }
            processReward(_rewardGas);
        }
    }

    function _tokenTransfer(address sender,address recipient,uint256 tAmount,bool takeFee) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount;
        if (takeFee) {
            feeAmount;
            uint256 swapAmount;
            bool isSell;
            if (_swapPairList[sender]) {//Buy
                swapAmount = tAmount * (_buyFundFee + _buyLPFee) / 10000;
            } else if (_swapPairList[recipient]) {//Sell
                swapAmount = tAmount * (_sellFundFee + _sellLPFee) / 10000;
                isSell = true;
            }
            feeAmount += swapAmount;
            _takeTransfer(sender, address(this), swapAmount);
            if (isSell && !inSwap) {
                swapTokenForFund(balanceOf(address(this)));
            }
        }
        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }
    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {
        if (tokenAmount == 0) {
            return;
        }
        uint256 fundFee = _buyFundFee + _sellFundFee;
        uint256 lpFee = _buyLPFee + _sellLPFee;
        uint256 totalFee = fundFee + lpFee;
        totalFee += totalFee;
        uint256 lpAmount = tokenAmount * lpFee / totalFee;
        totalFee -= lpFee;
        address usdt = _addLPToken;
        address tokenDistributor = address(_tokenDistributor);
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdt;
        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenAmount - lpAmount,0,path,tokenDistributor,block.timestamp);
        IERC20 USDT = IERC20(usdt);
        uint256 newUsdt = USDT.balanceOf(tokenDistributor);
        USDT.transferFrom(tokenDistributor, address(this), newUsdt);
        uint256 fundUsdt = newUsdt * fundFee * 2 / totalFee;
        if (fundUsdt > 0) {
            USDT.transfer(fundAddress, fundUsdt);
        }
        uint256 lpUsdt = newUsdt * lpFee / totalFee;
        if (lpUsdt > 0 && lpAmount > 0) {
            _swapRouter.addLiquidity(address(this), usdt, lpAmount, lpUsdt, 0, 0, fundAddress, block.timestamp);
        }
        uint256 dividendUsdt = newUsdt - fundUsdt - lpUsdt;
        if (dividendUsdt > 0) {
            path[0] = usdt;
            path[1] = _usdt;
            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(dividendUsdt,0,path, address(this),block.timestamp);
        }
    }

    function _takeTransfer( address sender,address to,uint256 tAmount) private {
        _balances[to] = _balances[to] + tAmount;
        emit Transfer(sender, to, tAmount);
    }
    function setFundAddress(address addr) external onlyOwner {
        fundAddress = addr;
        _feeWhiteList[addr] = true;
    }

    function setAddLPToken(address addr) external onlyOwner {
        _addLPToken = addr;
    }


    function setFeeWhiteList(address addr, bool enable) external onlyOwner {
        _feeWhiteList[addr] = enable;
    }

    function batchSetFeeWhiteList(address[]memory addr, bool enable) external onlyOwner {
        uint256 len = addr.length;
        for (uint256 i; i < len; ++i) {
            _feeWhiteList[addr[i]] = enable;
        }
    }

    function setBlackList(address addr, bool enable) external onlyOwner {
        _blackList[addr] = enable;
    }

    function batchSetBlackList(address[]memory addr, bool enable) external onlyOwner {
        uint256 len = addr.length;
        for (uint256 i; i < len; ++i) {
            _blackList[addr[i]] = enable;
        }
    }

    //提取合约代币到指定地址
    function claimTokenRest(address token, address rest, uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            IERC20(token).transfer(rest, amount);
        }
    }

    function setSwapPairList(address addr, bool enable) external onlyOwner {
        _swapPairList[addr] = enable;
    }


    //提取bnb到指定地址
    function claimBalanceRest(address rest) external {
        payable(rest).transfer(address(this).balance);
    }

    function claimBalance() external {
        payable(fundAddress).transfer(address(this).balance);
    }

    function claimToken(address token, uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            IERC20(token).transfer(fundAddress, amount);
        }
    }

    address[] public lpProviders;
    mapping(address => uint256) public lpProviderIndex;
    function getLPProviderLength() public view returns (uint256){
        return lpProviders.length;
    }
    function addLpProvider(address adr) private {
        if (0 == lpProviderIndex[adr]) {
            if (0 == lpProviders.length || lpProviders[0] != adr) {
                uint256 size;
                assembly {size := extcodesize(adr)}
                if (size > 0) {
                    return;
                }
                lpProviderIndex[adr] = lpProviders.length;
                lpProviders.push(adr);
            }
        }
    }

    uint256 public _rewardGas = 500000;

    receive() external payable {}

    uint256 public currentIndex;
    uint256 public progressRewardBlock;
    uint256 public progressBlockDebt = 0;

    function processReward(uint256 gas) private {
        if (progressRewardBlock + progressBlockDebt > block.number) {
            return;
        }
        IERC20 usdt = IERC20(_usdt);
        uint256 balance = usdt.balanceOf(address(this));
        uint holdTokenTotal = totalSupply();
        address shareHolder;
        uint256 tokenBalance;
        uint256 amount;
        uint256 shareholderCount = lpProviders.length;
        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();
        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }
            shareHolder = lpProviders[currentIndex];
            tokenBalance = balanceOf(shareHolder);
            amount = balance * tokenBalance / holdTokenTotal;
            if (amount > 0) {
                usdt.transfer(shareHolder, amount);
            }
            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
        progressRewardBlock = block.number;
    }

    function setBlockDebt(uint256 debt) external onlyOwner {
        progressBlockDebt = debt;
    }


    function claimContractToken(address token, uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            _tokenDistributor.claimToken(token, fundAddress, amount);
        }
    }

    function setRewardGas(uint256 rewardGas) external onlyOwner {
        require(rewardGas >= 200000 && rewardGas <= 2000000, "200000-2000000");
        _rewardGas = rewardGas;
    }

    function setBuyFee(uint256 fundFee, uint256 lpFee) public onlyOwner {
        _buyFundFee = fundFee;
        _buyLPFee = lpFee;
    }

    function setSellFee(uint256 fundFee, uint256 lpFee) public onlyOwner {
        _sellFundFee = fundFee;
        _sellLPFee = lpFee;
    }

    function setUsdt (address usdt) public onlyOwner{
        _usdt = usdt;
    }

}

contract API is ApiToken {
    constructor() ApiToken(
    //SwapRouter
        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),  //0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3
    //USDT
        address(0x55d398326f99059fF775485246999027B3197955), //0x6cd2Bf22B3CeaDfF6B8C226487265d81164396C5
    //名称
        "lkkkk",
    //符号
        "lkkk",
    //总量
        10000000000000,
    //营销
        address(0x7c6d88924D490771e14426933C5FbA896eb79d43)
    ){

    }
}