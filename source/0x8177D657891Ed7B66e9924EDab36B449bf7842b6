{"Comyz.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n\n//  ██████╗ ██████╗ ███╗   ███╗██╗   ██╗███████╗     ██████╗ ██████╗ ██╗███╗   ██╗\n// ██╔════╝██╔═══██╗████╗ ████║╚██╗ ██╔╝╚══███╔╝    ██╔════╝██╔═══██╗██║████╗  ██║\n// ██║     ██║   ██║██╔████╔██║ ╚████╔╝   ███╔╝     ██║     ██║   ██║██║██╔██╗ ██║\n// ██║     ██║   ██║██║╚██╔╝██║  ╚██╔╝   ███╔╝      ██║     ██║   ██║██║██║╚██╗██║\n// ╚██████╗╚██████╔╝██║ ╚═╝ ██║   ██║   ███████╗    ╚██████╗╚██████╔╝██║██║ ╚████║\n//  ╚═════╝ ╚═════╝ ╚═╝     ╚═╝   ╚═╝   ╚══════╝     ╚═════╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝\n\n// https://www.comyz.org\n// https://www.twitter.com/ComyzCoin\n// https://www.t.me/ComyzCoin\n// 40% presale on PinkSale, follow us on Twitter for more info.\n\npragma solidity ^0.8.7;\n\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.7;\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.7;\n\ninterface IERC20Metadata is IERC20 {\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.7;\n\ncontract Comyz is Context, IERC20, IERC20Metadata {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance \u003e= amount, \"Comyz: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance \u003e= subtractedValue, \"Comyz: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"Comyz: transfer from the zero address\");\n        require(recipient != address(0), \"Comyz: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance \u003e= amount, \"Comyz: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"Comyz: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"Comyz: approve from the zero address\");\n        require(spender != address(0), \"Comyz: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"ComyzSupply.sol":{"content":"// SPDX-License-Identifier: MIT\n\n\n\n//  ██████╗ ██████╗ ███╗   ███╗██╗   ██╗███████╗     ██████╗ ██████╗ ██╗███╗   ██╗\n// ██╔════╝██╔═══██╗████╗ ████║╚██╗ ██╔╝╚══███╔╝    ██╔════╝██╔═══██╗██║████╗  ██║\n// ██║     ██║   ██║██╔████╔██║ ╚████╔╝   ███╔╝     ██║     ██║   ██║██║██╔██╗ ██║\n// ██║     ██║   ██║██║╚██╔╝██║  ╚██╔╝   ███╔╝      ██║     ██║   ██║██║██║╚██╗██║\n// ╚██████╗╚██████╔╝██║ ╚═╝ ██║   ██║   ███████╗    ╚██████╗╚██████╔╝██║██║ ╚████║\n//  ╚═════╝ ╚═════╝ ╚═╝     ╚═╝   ╚═╝   ╚══════╝     ╚═════╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝\n\n// https://www.comyz.org\n// https://www.twitter.com/ComyzCoin\n// https://www.t.me/ComyzCoin\n// 40% presale on PinkSale, follow us on Twitter for more info.\n\npragma solidity ^0.8.7;\n\nimport \"./Comyz.sol\";\n\ncontract ComyzSupply is Comyz {\n  constructor() Comyz(\u0027Comyz Coin\u0027, \u0027CMZ\u0027) {\n    _mint(msg.sender, 1000000000 * 10 ** 18);\n  }\n}\n"}}