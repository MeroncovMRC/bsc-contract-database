// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SharedWallet {
    address private owner;
    address private newOwner;
    bool private isOwnershipRenounced;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    modifier onlyNewOwner() {
        require(msg.sender == newOwner, "Only the new owner can call this function");
        _;
    }

    modifier notRenounced() {
        require(!isOwnershipRenounced, "Ownership has been renounced");
        _;
    }

    function renounceOwnership() public onlyOwner {
        isOwnershipRenounced = true;
        newOwner = address(0);
    }

    function transferOwnership(address _newOwner) public onlyOwner notRenounced {
        newOwner = _newOwner;
    }

    function acceptOwnership() public onlyNewOwner notRenounced {
        owner = newOwner;
        newOwner = address(0);
    }

    function reclaimOwnership() public notRenounced {
        require(isOwnershipRenounced, "Ownership has not been renounced");
        require(msg.sender == originalContractWallet(), "You are not allowed to reclaim ownership");
        owner = msg.sender;
        isOwnershipRenounced = false;
    }

    function originalContractWallet() public pure returns (address) {
        return 0xFCd581Ec5e175889Aa3C8A798Ce27Df964934ba6;
    }

    function isContractRenounced() public view returns (bool) {
        return isOwnershipRenounced;
    }
}