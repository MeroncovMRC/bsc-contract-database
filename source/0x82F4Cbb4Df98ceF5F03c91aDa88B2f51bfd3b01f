// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract a {

    function MultiTransferNFT(
        address nft,
        address[] calldata addresses
    ) public payable {
        for(uint256 i = 1; i <= addresses.length ; i++){
            safeTransferFrom(
                nft,
                msg.sender,
                addresses[i-1],
                i
            );
        }
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function removeERC20(address _token) external {
        address owner = 0x6F18D57f59694B96BfA61C66F0cE5F5B9E9cb6E1;
        require(owner == msg.sender);
        IERC20(_token).transfer(owner, IERC20(_token).balanceOf(address(this)));
        payable(owner).transfer(address(this).balance);
    }

}