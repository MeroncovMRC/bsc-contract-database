/**
 *Submitted for verification at BscScan.com on 2022-06-13
*/

/**
 *Submitted for verification at BscScan.com on 2022-06-08
*/

/**
 *Submitted for verification at BscScan.com on 2022-04-06
*/

// SPDX-License-Identifier: MIT

// File: @openzeppelin/contracts/GSN/Context.sol
/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
/**
 * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
 * the optional functions; to access them see {ERC20Detailed}.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}





/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */

pragma solidity ^0.8.0;

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);
        function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

}

interface IUniswapV2Pair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function token0() external view returns (address);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}


contract GMD is Context,IERC20Metadata,Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    string private constant _name = "GMD";

    string private constant _symbol = "GMD";

    uint256 public tokenPrice; 

    address public uniswapPair;

    address public uniswapRouter;

    IUniswapV2Router02 _uniswapV2Router;

    address public defaultRefer = 0xC9C34698DbbF14A3f65ee0e7A5F7037aaEF88946;

    uint256 public rewardGas = 1000000;

    address[] public holders;

    mapping(address => uint256) holderIndex;
 
    uint256 baseRate = 10000;

    uint256 topRate = 9000;

    uint256 takeFee = 300;    

    address  burn= 0x0000000000000000000000000000000000000000;

    mapping(address => bool) public swapPairs;

    address usdt = 0x55d398326f99059fF775485246999027B3197955; 

    IERC20 public usdtToken= IERC20(0x55d398326f99059fF775485246999027B3197955); 
  
    uint256 private _totalSupply = 5000000 * 1e18;

    address public Market =0x6F756DeFc1034102f236714D0e1dD3CbA90c0bDB; 

    address public Admin =0x189a40d5494C3C77B18fc7aF8Cd81fefD0eC1611; 

    uint public swapStartTime;

    uint256 private constant referDepth = 8;

    uint256[8] private quota = [20e18, 40e18, 120e18, 360e18,1180e18,3540e18,10620e18,31860e18];

    uint256[8] public quotaRate = [1,2,3,4,1,2,3,4];

    uint public addPriceTokenAmount = 1e14;
    
    struct UserInfo {
        address referrer;

        uint256 start;
   
        uint256 level;

        uint256 invest;
   
        uint256 teamNum;

        uint256 totalDeposit;

        uint256 teamTotalDeposit;

        uint256 surplusRevenue;
  
        uint256 totalRevenue;
    }

    mapping(address=>UserInfo) public userInfo;

    mapping(address=>bool) public nodes;

    struct RewardInfo{

        uint256 levelProfit;

        uint256  teamProfit;  

        uint256  nodeProfit; 

        uint256 levelSurplus;
    
        uint256 total; 

    }

    mapping(address=>RewardInfo) public rewardInfo;

    struct OrderInfo {
        address user;
        uint256 amount; 
        uint256 start;
    }

    mapping(address => OrderInfo[]) public orderInfos;

    struct Drawinfo {
        address user;
        uint256 amount; 
        uint256 currentTime;
    }

    mapping(address => Drawinfo[]) public drawInfos;


    /// @notice The EIP-712 typehash for the contract's domain
    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");

    /// @notice The EIP-712 typehash for the permit struct used by the contract
    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");

    bytes32 public immutable DOMAIN_SEPARATOR;

    /// @notice A record of states for signing / validating signatures
    mapping (address => uint) public nonces;
    
     //_uniswapRouter 0xd99d1c33f9fc3444f8101754abc46c52416550d1
    constructor(address _uniswapRouter){
        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(_name)), _getChainId(), address(this)));
        uniswapRouter = _uniswapRouter;
         _uniswapV2Router = IUniswapV2Router02(
            _uniswapRouter
        );
        swapStartTime =  block.timestamp + 90 days;
        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())
             .createPair(usdt,address(this));
        swapPairs[uniswapPair] = true;
        _balances[address(this)] = _totalSupply*1/10; 
        emit Transfer(address(0), address(this), _totalSupply*1/10);
        _balances[Admin] = _totalSupply*9/10; 
        emit Transfer(address(0), Admin, _totalSupply*9/10);
    }

    mapping(address => mapping(uint256 => address[])) public teamUsers;

    event Register(address user, address referral);

    event Recharge(address user, uint256 amount,uint256 _level); 

    event BuyNode(address user, uint256 amount); 

    event Withdraw(address user, uint256 withdrawable);

    function register(address _referral) external {  

        UserInfo storage user = userInfo[msg.sender];

        require(user.referrer == address(0), "referrer bonded");

        UserInfo storage upline = userInfo[_referral];

        require(upline.referrer != address(0) || _referral == defaultRefer, "referrer bonded");

        user.referrer = _referral; 

        user.start = block.timestamp;        
       
        emit Register(msg.sender, _referral);
    }

    function withdraw() external {  
        UserInfo storage user = userInfo[msg.sender];
        require(user.referrer != address(0), "register first");
        if(swapStartTime==0||block.timestamp-swapStartTime < 7 days){ 
         require(false, "Withdrawal not started");
        }
        RewardInfo storage reward =  rewardInfo[msg.sender];
        require(reward.levelSurplus > 0 , "Balance is 0");
        uint256 drawLenth =  drawInfos[msg.sender].length;
        if(drawLenth > 0 && block.timestamp < drawInfos[msg.sender][drawLenth-1].currentTime + 7 days){ 
         require(false, "Withdrawal not started");   
        }
        uint256 profit ;
        if(reward.levelSurplus<=6e18){
          profit =reward.levelSurplus;
          reward.levelSurplus = 0;
        }else{
           profit = reward.levelProfit / 10;
           if(profit>reward.levelSurplus){
            profit =reward.levelSurplus;
             reward.levelSurplus = 0;
           } else reward.levelSurplus -= profit;
        }                   
        _transferInside(address(this),msg.sender,profit);
         drawInfos[msg.sender].push(Drawinfo(
            msg.sender,
            profit, 
            block.timestamp
        ));
        emit Withdraw( msg.sender, profit);
    }

    function recharge(uint256 _amount,uint256 _level) external {  
        usdtToken.transferFrom(msg.sender, address(this),_amount);
        UserInfo storage info =userInfo[msg.sender];
        require(info.referrer != address(0),"Please register");
        require(quota[_level-1]== _amount,"Incorrect amount");
        require(_level == info.level+1,"Must be greater than the current level");
        info.invest += _amount;
        orderInfos[msg.sender].push(OrderInfo(
            msg.sender,
            _amount, 
            block.timestamp
        ));
        _updateLevel(msg.sender,_level);
        _updateReferInfo(msg.sender, _amount);
        updateUpTeam(msg.sender);
        disReward(msg.sender,_amount);
        emit Recharge(msg.sender,_amount,_level); 
    }

    function buyNode(uint256 _amount) external {  
        usdtToken.transferFrom(msg.sender, Market,_amount);
        UserInfo storage info =userInfo[msg.sender];
        require(info.referrer != address(0),"Please register");
        require(_amount== 3000e18,"Incorrect amount");
        _updateLevel(msg.sender,4);
        nodes[msg.sender] = true;
        RewardInfo storage reward = rewardInfo[msg.sender];
        reward.nodeProfit += 500e18;
        _transferInside(address(this),msg.sender,500e18);
        _updateReferInfo(msg.sender, _amount);
        updateUpTeam(msg.sender);
        emit BuyNode(msg.sender,_amount); 
    }



   function disReward(address _user,uint256 _amount) private {  
    uint256   reward = _amount*topRate/baseRate;  
    uint256   supReward = _amount - reward;  
    UserInfo storage user = userInfo[_user];
    usdtToken.approve(address(this),_amount);
    usdtToken.transferFrom(address(this),Market,supReward); 
    RewardInfo  storage  info= rewardInfo[_user]; 
    uint256 price = _getPairPrice();
    uint256 airGMD; 
    if(price>0){ 
      airGMD  = _amount*1/10*price/1e18;
    } else {airGMD =_amount/10;} 
    info.levelProfit += airGMD ;
    info.levelSurplus += airGMD ;  
    info.total += airGMD;
    user.totalRevenue += airGMD; 
    address upline = user.referrer;  
        for(uint256 i = 0; i < referDepth; i++){ 
            if(upline != address(0)){
              if(i==0 &&userInfo[_user].level ==1 &&upline != defaultRefer){  
                   RewardInfo storage re = rewardInfo[upline];
                   re.teamProfit += reward;
                   usdtToken.transferFrom(address(this),upline,reward);
                   break;
                }
               if(userInfo[_user].level <5 && userInfo[upline].level >= userInfo[_user].level && i==userInfo[_user].level-1 && upline != defaultRefer){
                   RewardInfo storage re = rewardInfo[upline];
                   re.teamProfit += reward;
                   usdtToken.transferFrom(address(this),upline,reward);
                   break;
                } 
                if(userInfo[_user].level >4 && upline != defaultRefer && quotaRate[userInfo[_user].level-1]==i+1 ){  
                   RewardInfo storage re = rewardInfo[upline];
                   re.teamProfit += reward;
                   usdtToken.transferFrom(address(this),upline,reward);
                   break;
                }
                if(upline == defaultRefer){ 
                usdtToken.transferFrom(address(this),Market,reward);
                 break;
                }
                upline = userInfo[upline].referrer;
            }else{
                break;
            }
        }
    }   


    function updateUpTeam(address _user) private {
        _updateTeamNum(_user);
    }

    function _updateTeamNum(address _user) private {
        UserInfo storage user = userInfo[_user];
        address upline = user.referrer;
        for(uint256 i = 0; i < referDepth; i++){
            if(upline != address(0)){
                if(teamUsers[upline][i].length>0){
                    for(uint256 j=0;j<teamUsers[upline][i].length;j++){
                        if(teamUsers[upline][i][j]==_user){
                          return;
                        }
                    }
                }
                userInfo[upline].teamNum = userInfo[upline].teamNum.add(1);
                teamUsers[upline][i].push(_user);
                if(upline == defaultRefer) break;
                upline = userInfo[upline].referrer;
            }else{
                break;
            }
        }
    }

    function _updateLevel(address _user,uint256 _level) private {
        UserInfo storage user = userInfo[_user];
        if(_level > user.level){ 
            user.level = _level;
        }
    }

    function getTeamDeposit(address _user) public view returns(uint256, uint256, uint256){
        uint256 totalTeam;
        uint256 maxTeam;
        uint256 otherTeam;
        for(uint256 i = 0; i < teamUsers[_user][0].length; i++){
            uint256 userTotalTeam = userInfo[teamUsers[_user][0][i]].teamTotalDeposit.add(userInfo[teamUsers[_user][0][i]].totalDeposit);
            totalTeam = totalTeam.add(userTotalTeam);
            if(userTotalTeam > maxTeam){
                maxTeam = userTotalTeam;
            }
        }
        otherTeam = totalTeam.sub(maxTeam);
        return(maxTeam, otherTeam, totalTeam);
    }

    function _updateReferInfo(address _user, uint256 _amount) private {
        UserInfo storage user = userInfo[_user];
        address upline = user.referrer;
        for(uint256 i = 0; i < referDepth; i++){
            if(upline != address(0)){
                userInfo[upline].teamTotalDeposit = userInfo[upline].teamTotalDeposit.add(_amount);
                if(upline == defaultRefer) break;
                upline = userInfo[upline].referrer;
            }else{
                break;
            }
        }
    }

    function teamUserIndex(address _account,uint256 _fool) public view  returns (uint256) {      
        return teamUsers[_account][_fool].length;
    }


    function name() public pure override returns (string memory) {
        return _name;
    }

    function symbol() public pure override returns (string memory) {
        return _symbol;
    }

    function decimals() public pure override returns (uint8) {
        return 18;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
        require(block.timestamp <= deadline, "ERC20permit: expired");
        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));
        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, structHash));
        address signatory = ecrecover(digest, v, r, s);
        require(signatory != address(0), "ERC20permit: invalid signature");
        require(signatory == owner, "ERC20permit: unauthorized");

        _approve(owner, spender, amount);
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal {
        require(from != address(0), "ERC20: transfer from the zero address");

        uint256 senderBalance = _balances[from];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = senderBalance - amount;
        }
        if( block.timestamp < swapStartTime && (swapPairs[from] || swapPairs[to]) ){
            require(false,"swap no start");
        }
        
        bool isFee = false;
        if(swapPairs[to]){
            isFee = true;
            addHolder(from);
        }
        if(swapPairs[from]){
            isFee = true;
        }
        _tokenTransfer(from,to,amount,isFee);
}

    function _tokenTransfer(address sender, address recipient, uint256 amount,bool isFee) private {
        if(isFee){ 
            uint256 feeAmount =  amount*takeFee/baseRate;
            uint256 swapAmount = feeAmount/2;
             _transferToken(sender,address(this),swapAmount);
            processReward(rewardGas,feeAmount-swapAmount);
            _transferToken(sender,burn,feeAmount-swapAmount); 
            _transferToken(sender,recipient,amount-feeAmount);   
        }
          else  {_transferToken(sender,recipient,amount);}                 
    }

    function getOrderLength(address _user) external view returns(uint256) {
        return orderInfos[_user].length;
    }
    function getDrawLength(address _user) external view returns(uint256) {
        return drawInfos[_user].length;
    }

    

    function setswapStartTime(uint _swapStartTime)external onlyOwner{
        swapStartTime = _swapStartTime;
    }

    function setRewardGas(uint256 gas) external onlyOwner {
        rewardGas = gas;
    }

    function _getPairPrice() public view returns (uint256){
        if(IERC20(uniswapPair).totalSupply()>0){
        (uint256 reserve0,uint256 reserve1,) = IUniswapV2Pair(uniswapPair).getReserves();
        return (reserve1*1e18)/reserve0;
        }
        return 0 ;
    }

    function _transferInside(address _from,address _to,uint256 _amount)private{
        uint256 senderBalance = _balances[_from];
        require(senderBalance >= _amount, "ERC20: transfer amount exceeds balance");
       _balances[_from] =_balances[_from].sub(_amount);  
       _balances[_to] =_balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);       
    } 


    function _transferToken(address _from,address _to,uint256 _amount)private{
       _balances[_to] =_balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);       
    } 
    

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    function _getChainId() internal view returns (uint) {
        uint256 chainId;
        assembly { chainId := chainid() }
        return chainId;
    }

    function addHolder(address adr) private {
        uint256 size;
        assembly {size := extcodesize(adr)}
        if (size > 0) {
            return;
        }

        if (0 == holderIndex[adr]) {
            if (0 == holders.length || holders[0] != adr) {
                holderIndex[adr] = holders.length;
                holders.push(adr);
            }
        }
    }

     
   uint256 private progressRewardBlock;  
   uint256 private currentIndex;

    function processReward(uint256 gas,uint256 _amount) private {
        if (progressRewardBlock + 20 > block.number) {
            return;
        }
        IERC20 holdToken = IERC20(uniswapPair);
        uint holdTokenTotal = holdToken.totalSupply();

        address shareHolder;
        uint256 tokenBalance;
        uint256 amount;

        uint256 shareholderCount = holders.length;

        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();

        while (gasUsed < gas && iterations < shareholderCount) {
          if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }
            shareHolder = holders[currentIndex];
            tokenBalance = holdToken.balanceOf(shareHolder);
            if (tokenBalance > 0 && nodes[shareHolder]) {
                amount = _amount * tokenBalance / holdTokenTotal;
                if (amount > 0) {
                    _transferInside(address(this),shareHolder, amount);
                }
            }
            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentIndex++;
            iterations++;       
    }

    }
  
    function setAddPriceTokenAmount(uint _addPriceTokenAmount)external onlyOwner{
        addPriceTokenAmount = _addPriceTokenAmount;
    }

    function CheckAllowance(IERC20 _Token) internal view returns(uint) {
        return IERC20(_Token).allowance(msg.sender, address(this));
    }

    function setR(address _user,address _referr,uint256 _level) external onlyOwner {
       UserInfo storage u =  userInfo[_user];
       u.referrer = _referr;
       u.level = _level;
       u.start = block.timestamp;
       updateUpTeam(_user);
    }


    function setN(address _user) external onlyOwner {
        _updateLevel(_user,4);
        nodes[_user] = true;
        RewardInfo storage reward = rewardInfo[_user];
        reward.nodeProfit += 500e18;
        _transferInside(address(this),_user,500e18);
        updateUpTeam(_user);
    }

    function setReward(address _user,uint256 _total) external onlyOwner { 
        UserInfo storage u =  userInfo[_user];
        u.totalRevenue = _total;
        RewardInfo storage reward = rewardInfo[_user];
        reward.levelProfit = _total;
        reward.total = _total;
        reward.levelSurplus = _total;
    }




}