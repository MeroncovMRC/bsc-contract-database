// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Calculates the average of two numbers. Since these are integers,
     * averages of an even and odd number cannot be represented, and will be
     * rounded down.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute
        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);
    }

    /**
     * @dev Multiplies two numbers, reverts on overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b);

        return c;
    }

    /**
     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0); // Solidity only automatically asserts when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Adds two numbers, reverts on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);

        return c;
    }

    /**
     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
     * reverts when dividing by zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}

contract Ownable {
    address public _owner;

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function changeOwner(address newOwner) public onlyOwner {
        _owner = newOwner;
    }
}

/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure.
 * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        require(token.transfer(to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        require(token.transferFrom(from, to, value));
    }

    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require((value == 0) || (token.allowance(msg.sender, spender) == 0));
        require(token.approve(spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(
            value
        );
        require(token.approve(spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(
            value
        );
        require(token.approve(spender, newAllowance));
    }
}

contract HMTMiner is Ownable {
    using SafeERC20 for IERC20;

    uint256 public count;
    PoolInfo private _poolInfo;

    address public HMT = address(0x160ac2e1Fb69251b662C7d12D58630f1AB6D5660);

    mapping(uint256 => DepositInfo) private _depositInfoByTid;
    mapping(address => DepositInfo[]) private _depositInfosByUser;
    
    struct DepositInfo {
        uint256 tid;
        address user;
        uint256 amount;
        uint256 depositUnix;
        uint256 lastRewardUnix;
    }

    struct PoolInfo {
        uint256 rewardEndTime;
        uint256 rate;
    }

    event Deposit(address indexed user, uint256 amount);
    event RewardPaid(address indexed user, uint256 reward);

    constructor() {
        _owner = msg.sender;

        _poolInfo.rewardEndTime = block.timestamp + 3 days;
        _poolInfo.rate = 50;
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function totalSupply() public view returns (uint256) {
        uint256 tvl;
        for (uint256 i = 1; i <= count; i++) {
            uint256 balance = extraAmount(i);
            tvl += balance;
        }

        return tvl;
    }

    function getDepositInfoByTid(uint256 tid) public view returns (DepositInfo memory) {
        DepositInfo memory d = _depositInfoByTid[tid];
        d.amount = extraAmount(tid);
        return d;
    }

    function getDepositInfosByUser(address account) public view returns (DepositInfo[] memory) {
        DepositInfo[] memory infos = _depositInfosByUser[account];
        for (uint256 i = 0; i < infos.length;) {
            infos[i].amount = extraAmount(infos[i].tid);
        unchecked{
            ++i;
        }
        }
        return infos;
    }
    
    function getPoolInfo() public view returns (PoolInfo memory) {
        return _poolInfo;
    }

    function setPoolInfo(uint256 newRewardEndTime, uint256 newRate) external onlyOwner {
        _poolInfo.rewardEndTime = newRewardEndTime;
        _poolInfo.rate = newRate;
    }

    function deposit(uint256 amount) external {

        count++;
        DepositInfo storage d = _depositInfoByTid[count];
        d.tid = count;
        d.user = msg.sender;
        d.amount = amount;
        d.depositUnix = block.timestamp;
        d.lastRewardUnix = block.timestamp;

        _depositInfosByUser[msg.sender].push(d);      

        IERC20(HMT).safeTransferFrom(msg.sender, address(this), amount);

        emit Deposit(msg.sender, amount);
    }

    function extraAmount(uint256 tid) private view returns (uint256) {
        DepositInfo memory d = _depositInfoByTid[tid];

        uint256 balance = d.amount;
        if (0 == balance) {
            return 0;
        }

        uint256 rewardStartTime = d.lastRewardUnix;

        uint256 rewardEndTime = _poolInfo.rewardEndTime;

        uint256 lastRewardTimes;
        if (rewardEndTime > rewardStartTime) {
            lastRewardTimes = (rewardEndTime - rewardStartTime) / 60;
        }

         uint256 blockTime = block.timestamp;
        // uint256 times = (blockTime - rewardStartTime) / 1 days;
        uint256 times = (blockTime - rewardStartTime) / 60;

        uint256 rewardRate = _poolInfo.rate;

        uint256 reward;
        uint256 totalReward;
        for (uint256 j = 1; j <= times;) {
            reward = balance * rewardRate / 10000;
            if (j > lastRewardTimes) {
                totalReward += reward;
            } else {
                balance += reward;
            }       
        unchecked{
            ++j;
        }
        }

        return balance + totalReward;
    }

    function balanceOf(address account) public view returns (uint256) {
        DepositInfo[] memory infos = _depositInfosByUser[account];

        uint256 totalReward;
        for (uint256 i = 0; i < infos.length;) {
            uint256 balance = extraAmount(infos[i].tid);
            totalReward += balance;
        unchecked{
            ++i;
        }
        }

        return totalReward;
    }

    function claim(uint256 amount) external {
        uint256 balance = balanceOf(msg.sender);
        require(balance >= amount, "bigger amount");

        IERC20(HMT).safeTransfer(msg.sender, amount);

        DepositInfo[] memory infos = _depositInfosByUser[msg.sender];

        for (uint256 i = 0; i < infos.length;) {

            if (amount <= 0) {
                break;
            }


            DepositInfo storage d = _depositInfoByTid[infos[i].tid];

            if (d.amount == 0) {
                continue;
            }

            uint256 bal = extraAmount(d.tid);
            if (bal > amount) {
                d.amount = bal - amount;
                amount = 0;
            } else {
                d.amount = 0;
                amount -= bal;
            }
            uint256 diffUnix = (block.timestamp - d.lastRewardUnix) % 60;
            d.lastRewardUnix = block.timestamp - diffUnix;
            _depositInfosByUser[msg.sender][i].lastRewardUnix = block.timestamp - diffUnix;
        unchecked{
            ++i;
        }
        }
       
        emit RewardPaid(msg.sender, amount);

    }

    function clearPot(address to, uint256 amount) external onlyOwner {
        if (amount > IERC20(HMT).balanceOf(address(this))) {
            amount = IERC20(HMT).balanceOf(address(this));
        }
        IERC20(HMT).safeTransfer(to, amount);
    }
}