
// File: contracts/ContractCustomContestMinter.sol
/********************** @2022 Wizarre, All rights reserved *********************
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMmMMMMMMMMMMMMMNNMMMMNddNMMMMmmmmmNMMMMNddNMMMMNMMMMMMMMMMMMMMmMMMMMMMMM
MMMMMMMMdysNhoossydNMmosyyMM+ddd-NhssdNMMNdsshN-ddd+MMsysomMNdyssoohNysdMMMMMMMM
MMMMMMMMmss::NMMh/+o+/-ohhMMhhdm`:hNNmMMMMmMNy:.mdhhMNhho-/+o+/dMMN-:ssmMMMMMMMM
MMMMMMMMNoMhyhdNNNmsoyNh/:mMMMs.oNMhoNMMMMmodMNo.yMMMd:/hNyoymNNNdhyhNoNMMMMMMMM
MMMMMMMNy/:shhhhy/-syyhhy`.hho :hho-yhhhhhhy-shh: ohh.`yhhyyo./yhhhhs:/hNMMMMMMM
MMMMMMMd `+://sso:`.`---/:osoo.syhh+yyyssyyyohhyo-osso:/---`.`/oss//:o  mMMMMMMM
MMMMMMMd `s+s+:..``.-+yhmyddhhsmyoyosddyyddsoyoymsyhdhymhy+-.``..:+s+y  mMMMMMMM
MMMMMMMd  sm`  -shhy. sMNys+ho+ssymyoodmmhooydyos+oh+yyMMo -yhhs-  `ms  mMMMMMMM
MMMMMMMd `yds` `/ss+:/hddddhhodNNhdssyNMMNyssdhNNhshhddddh/:+ss/` `ydy  mMMMMMMM
MMMMMMMd  ooNh/-..`````     :sdhdssddshmmhsddsydhdo-     `````..-/dNoo  mMMMMMMM
MMMMMMMd `md+ymddysohs.   `odmmdoyNoNmohhoNNoNssdmmho`   .yhosyddmy+dm  mMMMMMMM
MMMMMMMd `Nmh+/oyo-+o` `  syMMsM/dy/NhdyhhhN:yd+MsMNyo  ` `o+-oyo:+hmm  mMMMMMMM
MMMMMMMd  -NNy+/+yy.  :../odyhohssohyhsooshshossh+hyd+/`-:  -yy+/+yNm.  mMMMMMMM
MMMMMMMd -/-::yNN/   +/`so/shhssyhyy+yy++hy+hshysyhho:oo`++   +Nms::-/. mMMMMMMM
MMMMMMMd oMy/MMh.   ss hMNNhs+:/++++/yhyyhy/++++::oshNhNy ys   .hMM:hM+ mMMMMMMM
MMMMMMMd hMooMo    ym`oMdhymhyo/    `ooo+oo`    .shhdmyhM+`ms    oM+oMy mMMMMMMM
MMMMMMMd mMsy-    yM:`Nmsdyhysys:  ` `:ys/` ` `hmMMdsshsom /My    :ysMm mMMMMMMM
MMMMMMMd.MMd.    yMh :yssMNhshymNy: /``Nm .: .yNdMN/hmMddM- dMs    .mMM`mMMMMMMM
MMMMMMMdoMh`    oMM- :omdoMMMMdhddm/ s.--.s /mhshMhydhhdoN/ :MM+    `dM+mMMMMMMM
MMMMMMMdmh`    :MMd  /yhhh+s:ysyy+hN+`d..d`+ddhyyssNNyddss+  mMM-    `ddmMMMMMMM
MMMMMMMMh`     dMMy  :hodoNoy+hysdmym-+dd/-mymhdhdyd+NNmyN-  hMMd     `hMMMMMMMM
MMMMMMMM.      .sNMh- /yddyms+NMm:mmhs`Nm yMmhdssyhs+dy+o: -dMNs`      .MMMMMMMM
MMMMMMMNd:       .sNNs.`sNNyhhoNMm+dh-`dd`:Moymhhdyhsdho`.sNNs.       /mMMMMMMMM
MMMMMMMdhmo:`      .odm+`:sddmmsmmo/o +--+ /dymddhhmms-`+md+`      `:sNymMMMMMMM
MMMMMMMd/sy:do-      `:hh/`:sdmdydm- ./  /``odmyhydo-./dy:`      -sh:yy:mMMMMMMM
MMMMMMMd`m/.+shh+-      .os/`:ohdds  - // - `hMNhs-./s+.     `-+hhs/./m mMMMMMMM
MMMMMMMd -.mho/-hNds:.    `-/-`.oo`    --    `oo-`-/-`   `./sdNy-/sdm`- mMMMMMMM
MMMMMMMd  oMoo/.mNyooss+/-`  ``       `/:`       ``  .-/+ssoohMm.+osMo  mMMMMMMM
MMMMMMMd  myssh+hN.`o++/oNmo+/-.`  `.+hddh/.`  `.-++smm+/++o`.Nhohssyd  mMMMMMMM
MMMMMMMd  ++++osys-..--:/++:/yso+/:/o+-``-+o/:/+oss::++/:--..:syso++++  mMMMMMMM
MMMMMMMMh/.`-+hdmoohdmmmmddhmmmy+ooh/ .ys` +hoo+ymmmhddmmmmdhoomdh+-`.+hMMMMMMMM
MMMMMMMMMNmhs.`::`yhymdyoshNdsddyy. .+mNNm+` -yydhsmNhsoymdyhs /:`.sdmNMMMMMMMMM
MMMMMMMMMsohh.ymhy+//+./NMNssh+::.`+dmymmymd/`.::+hosNMm/.+//+yhmy.dh+yMMMMMMMMM
MMMMMMMMMNhysmMMMMMMMMh+MNhNMMMNNMdysyNMMNssydMNNMMMNhNN+dMMMMMMMMmsydNMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/


// SPDX-License-Identifier: None
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";

interface IERC721Transfer {
    function transferFrom(address from, address to, uint256 tokenId) external;
}

interface ICardNFTMint {
    function mint(address receiver, uint256 cardType) external returns (uint256);
}

interface IERC1155Mint {
    function mint(address account, uint256 id, uint256 amount, bytes memory data) external;

    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;
}

contract CustomContestMinter is AccessControl, Pausable, ERC721Holder {
    bytes32 public constant ADD_WINNER_ROLE = keccak256("ADD_WINNER_ROLE");

    IERC721Transfer public WIZARD_CONTRACT_ADDRESS;
    ICardNFTMint public CARD_CONTRACT_ADDRESS;
    IERC1155Mint public ENHANCEMENT_CONTRACT_ADDRESS;

    struct WizardContest {
        uint256 endTimestamp;
        uint256 rewardAmount;
    }

    struct CardContest {
        uint256 endTimestamp;
        uint256[] cardTypes;
    }

    struct EnhancementContest {
        uint256 endTimestamp;
        uint256[] ids;
        uint256[] rewardAmounts;
    }

    mapping(uint256 => WizardContest) public wizardContests;
    mapping(uint256 => CardContest) public cardContests;
    mapping(uint256 => EnhancementContest) public enhancementContests;

    mapping(uint256 => mapping(address => bool)) private winnersGlobal;

    uint256[] private availableWizardIds;
    uint256 private availableWizardIdPointer = 0;

    event WizardContestCreated(uint256 contestId, uint256 endTimestamp, uint256 rewardAmount, address[] winners);
    event CartContestCreated(uint256 contestId, uint256 endTimestamp, uint256[] cardTypes, address[] winners);
    event EnhancementContestCreated(uint256 contestId, uint256 endTimestamp, uint256[] ids, uint256[] rewardAmounts, address[] winners);

    event WizardRewardClaimed(uint256 contestId, address winner, uint256[] ids);
    event CardRewardClaimed(uint256 contestId, address winner, uint256[] cardTypes);
    event EnhancementRewardClaimed(uint256 contestId, address winner, uint256[] ids, uint256[] rewardAmounts);

    event AddedWinners(uint256 contestId, address[] winners);
    event RemovedWinners(uint256 contestId, address[] winners);
    event RemovedContest(uint256 contestId);

    constructor (
        IERC721Transfer _wizardContractAddress,
        ICardNFTMint _cardContractAddress,
        IERC1155Mint _enhancementContractAddress
    ) {
        WIZARD_CONTRACT_ADDRESS = _wizardContractAddress;
        CARD_CONTRACT_ADDRESS = _cardContractAddress;
        ENHANCEMENT_CONTRACT_ADDRESS = _enhancementContractAddress;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(ADD_WINNER_ROLE, _msgSender());
    }

    function setWizardIds(uint256[] calldata _nftsIds) external onlyRole(ADD_WINNER_ROLE) {
        delete availableWizardIds;
        appendAvailableWizards(_nftsIds);
        setAvailableWizardPointer(0);
    }

    function setAvailableWizardPointer(uint256 _pointer) public onlyRole(ADD_WINNER_ROLE) {
        availableWizardIdPointer = _pointer;
    }

    function appendAvailableWizards(uint256[] calldata _nftsIds) public onlyRole(ADD_WINNER_ROLE) {
        for (uint256 _i = 0; _i < _nftsIds.length; _i++) {
            availableWizardIds.push(_nftsIds[_i]);
        }
    }

    function remainingAvailableWizards() view external returns (uint256) {
        return availableWizardIds.length - availableWizardIdPointer;
    }

    function setNewWizardContest(
        uint256 _contestId,
        uint256 _endTimestamp,
        uint256 _rewardAmount,
        address[] calldata _winners
    ) external onlyRole(ADD_WINNER_ROLE) {
        _validateContestInput(_contestId, _endTimestamp, _winners);
        require(_rewardAmount > 0, 'NO_REWARD_AMOUNT');

        _setWinners(_contestId, _winners);

        wizardContests[_contestId] =
            WizardContest({
                endTimestamp : _endTimestamp,
                rewardAmount : _rewardAmount
            });

        emit WizardContestCreated(_contestId, _endTimestamp, _rewardAmount, _winners);
    }

    function setNewCardContest(
        uint256 _contestId,
        uint256 _endTimestamp,
        uint256[] calldata _cardTypes,
        address[] calldata _winners
    ) external onlyRole(ADD_WINNER_ROLE) {
        _validateContestInput(_contestId, _endTimestamp, _winners);
        require(_cardTypes.length > 0, 'NO_CARD_TYPES');

        _setWinners(_contestId, _winners);

        cardContests[_contestId] =
            CardContest({
                endTimestamp : _endTimestamp,
                cardTypes : _cardTypes
            });

        emit CartContestCreated(_contestId, _endTimestamp, _cardTypes, _winners);
    }

    function setNewEnhancementContest(
        uint256 _contestId,
        uint256 _endTimestamp,
        uint256[] calldata _ids,
        uint256[] calldata _rewardAmounts,
        address[] calldata _winners
    ) external onlyRole(ADD_WINNER_ROLE) {
        _validateContestInput(_contestId, _endTimestamp, _winners);
        require(_ids.length > 0, 'NO_IDS');
        require(_rewardAmounts.length > 0, 'NO_REWARD_AMOUNT');
        require(_ids.length == _rewardAmounts.length, 'IDS_AMOUNT_NOT_EQUAL');

        _setWinners(_contestId, _winners);

        enhancementContests[_contestId] =
            EnhancementContest({
                endTimestamp : _endTimestamp,
                ids : _ids,
                rewardAmounts : _rewardAmounts
                });

        emit EnhancementContestCreated(_contestId, _endTimestamp, _ids, _rewardAmounts, _winners);
    }

    function _validateContestInput(uint256 _contestId, uint256 _endTimestamp, address[] calldata _winners) view private {
        require(_contestId >= 0, 'NO_CONTEST_ID');
        require(_endTimestamp > 0, 'NO_END_TIMESTAMP');
        require(_winners.length > 0, 'NO_WINNERS');

        require(0 == wizardContests[_contestId].endTimestamp, 'CONTEST_WITH_GIVEN_ID_EXISTS');
        require(0 == cardContests[_contestId].endTimestamp, 'CONTEST_WITH_GIVEN_ID_EXISTS');
        require(0 == enhancementContests[_contestId].endTimestamp, 'CONTEST_WITH_GIVEN_ID_EXISTS');
    }

    function _setWinners(uint256 _contestId, address[] calldata _winners) private {
        for (uint256 _i = 0; _i < _winners.length; _i++) {
            winnersGlobal[_contestId][_winners[_i]] = true;
        }
    }

    function claimReward(uint256 _contestId) external whenNotPaused {
        if (!_claimRewardOnly(_contestId)) {
            revert('NOT_ABLE_TO_CLAIM');
        }
    }

    function claimAllRewards(uint256[] calldata _contestIds) external whenNotPaused {
        for (uint256 _i = 0; _i < _contestIds.length; _i++) {
            _claimRewardOnly(_contestIds[_i]);
        }
    }

    function _claimRewardOnly(uint256 _contestId) private returns (bool) {
        if (wizardContests[_contestId].endTimestamp > 0) {
            require(true == _isAbleToClaim(_contestId, _msgSender()), 'NOT_ABLE_TO_CLAIM');
            require(wizardContests[_contestId].endTimestamp > block.timestamp, 'REWARD_CLAIM_EXPIRED');
            require(availableWizardIds.length > availableWizardIdPointer, 'NOT_ENOUGH_REWARDS');
            delete winnersGlobal[_contestId][_msgSender()];
            uint256[] memory _wonIds = new uint256[](wizardContests[_contestId].rewardAmount);
            for (uint256 _i = 0; _i < wizardContests[_contestId].rewardAmount; _i++) {
                WIZARD_CONTRACT_ADDRESS.transferFrom(address(this), _msgSender(), availableWizardIds[availableWizardIdPointer]);
                _wonIds[_i] = availableWizardIds[availableWizardIdPointer];
                availableWizardIdPointer++;
            }

            emit WizardRewardClaimed(_contestId, _msgSender(), _wonIds);

            return true;
        }

        if (cardContests[_contestId].endTimestamp > 0) {
            require(true == _isAbleToClaim(_contestId, _msgSender()), 'NOT_ABLE_TO_CLAIM');
            require(cardContests[_contestId].endTimestamp > block.timestamp, 'REWARD_CLAIM_EXPIRED');
            delete winnersGlobal[_contestId][_msgSender()];
            for (uint256 _i = 0; _i < cardContests[_contestId].cardTypes.length; _i++) {
                CARD_CONTRACT_ADDRESS.mint(_msgSender(), cardContests[_contestId].cardTypes[_i]);
            }

            emit CardRewardClaimed(_contestId, _msgSender(), cardContests[_contestId].cardTypes);

            return true;
        }

        if (enhancementContests[_contestId].endTimestamp > 0) {
            require(true == _isAbleToClaim(_contestId, _msgSender()), 'NOT_ABLE_TO_CLAIM');
            require(enhancementContests[_contestId].endTimestamp > block.timestamp, 'REWARD_CLAIM_EXPIRED');
            delete winnersGlobal[_contestId][_msgSender()];
            ENHANCEMENT_CONTRACT_ADDRESS.mintBatch(_msgSender(), enhancementContests[_contestId].ids, enhancementContests[_contestId].rewardAmounts, bytes(''));

            emit EnhancementRewardClaimed(_contestId, _msgSender(), enhancementContests[_contestId].ids, enhancementContests[_contestId].rewardAmounts);

            return true;
        }

        return false;
    }

    function isAbleToClaim(uint256 _contestId, address _address) external view returns (bool){
        return (
        wizardContests[_contestId].endTimestamp > 0
        || cardContests[_contestId].endTimestamp > 0
        || enhancementContests[_contestId].endTimestamp > 0
        ) && _isAbleToClaim(_contestId, _address);
    }

    function _isAbleToClaim(uint256 _contestId, address _address) private view returns (bool){
        return winnersGlobal[_contestId][_address];
    }

    function addWinners(uint256 _contestId, address[] calldata _winners) external onlyRole(ADD_WINNER_ROLE) {
        for (uint256 _i = 0; _i < _winners.length; _i++) {
            winnersGlobal[_contestId][_winners[_i]] = true;
        }

        emit AddedWinners(_contestId, _winners);
    }

    function removeWinners(uint256 _contestId, address[] calldata _winners) external onlyRole(ADD_WINNER_ROLE) {
        for (uint256 _i = 0; _i < _winners.length; _i++) {
            delete winnersGlobal[_contestId][_winners[_i]];
        }

        emit RemovedWinners(_contestId, _winners);
    }

    function removeContest(uint256 _contestId) external onlyRole(ADD_WINNER_ROLE) {
        if (wizardContests[_contestId].endTimestamp > 0) {
            delete wizardContests[_contestId];
        } else if (cardContests[_contestId].endTimestamp > 0) {
            delete cardContests[_contestId];
        } else if (enhancementContests[_contestId].endTimestamp > 0) {
            delete enhancementContests[_contestId];
        }

        emit RemovedContest(_contestId);
    }

    function getWizardContest(uint256 _contestId) view external returns (WizardContest memory){
        return wizardContests[_contestId];
    }

    function getCardContest(uint256 _contestId) view external returns (CardContest memory){
        return cardContests[_contestId];
    }

    function getEnhancementContest(uint256 _contestId) view external returns (EnhancementContest memory){
        return enhancementContests[_contestId];
    }

    function transferWizards(uint256[] calldata _ids, address _to) external onlyRole(DEFAULT_ADMIN_ROLE) {
        for (uint256 _i = 0; _i < _ids.length; _i++) {
            WIZARD_CONTRACT_ADDRESS.transferFrom(address(this), _to, _ids[_i]);
        }
    }

    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {
        _pause();
    }

    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {
        _unpause();
    }
}






// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";
import "../utils/Context.sol";
import "../utils/Strings.sol";
import "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `_msgSender()` is missing `role`.
     * Overriding this function changes the behavior of the {onlyRole} modifier.
     *
     * Format of the revert message is described in {_checkRole}.
     *
     * _Available since v4.6._
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)

pragma solidity ^0.8.0;

import "../IERC721Receiver.sol";

/**
 * @dev Implementation of the {IERC721Receiver} interface.
 *
 * Accepts all token transfers.
 * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.
 */
contract ERC721Holder is IERC721Receiver {
    /**
     * @dev See {IERC721Receiver-onERC721Received}.
     *
     * Always returns `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC721Received.selector;
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

