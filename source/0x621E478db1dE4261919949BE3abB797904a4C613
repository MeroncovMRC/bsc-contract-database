// File: contracts/IOracle.sol

pragma solidity =0.8.7;

interface IOracle {
  function getPrice(uint256 _currPoolId) external view returns (uint256 price);
}
// File: contracts/Context.sol



pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: contracts/Ownable.sol



pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/Oracle.sol

pragma solidity =0.8.7;



contract Oracle is IOracle, Ownable {
    constructor() {
        Managers[msg.sender] = true;
    }

    //***Variables***//

    //***Mappings***//
    mapping(address => bool) internal Managers;
    mapping(address => bool) internal AllowedContracts;
    mapping(uint256 => uint256) internal Prices;

    //***Structs***//
    struct UpdatePriceStruct {
        uint256 currPoolId;
        uint256 value;
    }

    //***Modificators***//
    modifier onlyManager() {
        require(
            Managers[msg.sender],
            "Only managers allow to execute this operation"
        );
        _;
    }

    modifier onlyAllowedContract() {
        require(AllowedContracts[msg.sender], "Only allowedContracts allow to execute this operation");
        _;
    }

    //***Events***//

    //***Functions***//
    function getPrice(uint256 _currPoolId) external view override onlyAllowedContract returns (uint256 price) {
        require(Prices[_currPoolId] != 0, "Zero price");
        return Prices[_currPoolId];
    }

    function setPrice(uint256 _currPoolId, uint256 _newPrice)
        public
        onlyManager
    {
        require(_newPrice > 0, "Zero price is not allowed");
        Prices[_currPoolId] = _newPrice;
    }

    function bulkSetPrice (bytes calldata data) external onlyManager {
        UpdatePriceStruct[] memory priceArr = abi.decode(
            data,
            (UpdatePriceStruct[])
        );
        uint256 arrLength = priceArr.length;
        require(arrLength > 0, "Empty array");
        for (uint256 i = 0; i < arrLength; i++) {
            setPrice(priceArr[i].currPoolId, priceArr[i].value);
        }
    }

    function addManager(address _addr) external onlyOwner {
        Managers[_addr] = true;
    }

    function removeManager(address _addr) external onlyOwner {
        Managers[_addr] = false;
    }

    function isManager(address _addr)
        external
        view
        onlyOwner
        returns (bool _isManager)
    {
        return (Managers[_addr]);
    }

    function addAllowedAddr(address _addr) external onlyOwner {
        AllowedContracts[_addr] = true;
    }

    function removeAllowedAddr(address _addr) external onlyOwner {
        AllowedContracts[_addr] = false;
    }

    function isAllowed(address _addr)
        external
        view
        onlyOwner
        returns (bool _isManager)
    {
        return (AllowedContracts[_addr]);
    }


}