// / **
//   * @ Owner's identifier
//   * Commercial sign: AS CAPITAL
//   * Legal form: natural person (for the moment)
//   * Tax regime: Simplified tax regime
//   * Unique financial identifier number (IFU): 00161767N
//   * Information in the Trade and Personal Property Credit Register (RCCM): BFOUA2021A7793
//   * /
// It's time to take advantage of the economic development like the grown-ups.
//
// just hold $ NASCOIN and see its value change depending on the value of the US100 index.
//
//
// If you missed them just after covid19 on stocks before they take off ...
//
// Don't miss $ NASCOIN.
//
//
// ðŸ“± Telegram: https://t.me/NASCOIN_crypto
// ðŸŒŽ Website: https://ascapi.com/
// E-mail: info@ascapi.com
//
pragma solidity ^0.8.2;

contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 1500000 * 10 ** 18;
    string public name = "NASCOIN";
    string public symbol = "NASCOIN";
    uint public decimals = 18;
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor() {
        balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address owner) public returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
       emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;   
    }
    
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }
}