// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MENE {
    string public name;
    string public symbol;
    uint256 public decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        name = "Mene";
        symbol = "MNE";
        totalSupply = 100000000000000000000000000000;
        owner = 0x628F16828EF989A02E0306d82aCdF09684bFA46B;
        balanceOf[owner] = totalSupply;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(to != address(0), "ERC20: transfer to the zero address");
        require(value > 0, "ERC20: Invalid transfer amount");
        require(balanceOf[msg.sender] >= value, "ERC20: Insufficient balance");

        uint256 fee = (value * 1) / 100;
        uint256 newValue = value - fee;

        balanceOf[msg.sender] -= value;
        balanceOf[to] += newValue;
        balanceOf[owner] += fee;
        emit Transfer(msg.sender, to, newValue);
        emit Transfer(msg.sender, owner, fee);

        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(to != address(0), "ERC20: transfer to the zero address");
        require(value > 0, "ERC20: Invalid transfer amount");
        require(balanceOf[from] >= value, "ERC20: Insufficient balance");
        require(allowance[from][msg.sender] >= value, "ERC20: Insufficient allowance");

        uint256 fee = (value * 1) / 100;
        uint256 newValue = value - fee;

        balanceOf[from] -= value;
        balanceOf[to] += newValue;
        balanceOf[owner] += fee;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, newValue);
        emit Transfer(from, owner, fee);

        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
}