pragma solidity ^0.8.0;

contract HookToken {
    string private _name = "HOOK";
    string private _symbol = "HOOK";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 4000000000 * 10**uint256(_decimals);
    address private _owner = 0x73258bB4AdAE466dA2B64efa5b5a8b9640A7174C;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isBlacklisted;

    uint256 private _maxSellPercentage = 10;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        _balances[_owner] = _totalSupply;
        emit Transfer(address(0), _owner, _totalSupply);
    }

    function name() external view returns (string memory) {
        return _name;
    }

    function symbol() external view returns (string memory) {
        return _symbol;
    }

    function decimals() external view returns (uint8) {
        return _decimals;
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        require(!_isBlacklisted[msg.sender], "Sender is blacklisted");
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        require(!_isBlacklisted[sender], "Sender is blacklisted");
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function blacklistAddress(address account) external {
        require(msg.sender == _owner, "Caller is not the owner");
        _isBlacklisted[account] = true;
    }

    function removeFromBlacklist(address account) external {
        require(msg.sender == _owner, "Caller is not the owner");
        _isBlacklisted[account] = false;
    }

    function setMaxSellPercentage(uint256 percentage) external {
        require(msg.sender == _owner, "Caller is not the owner");
        require(percentage <= 100, "Percentage must be less than or equal to 100");
        _maxSellPercentage = percentage;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(amount <= _getMaxSellAmount(sender), "Exceeds maximum sell amount");

        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _getMaxSellAmount(address account) internal view returns (uint256) {
        if (account == _owner || _maxSellPercentage == 0) {
            return _balances[account];
        }

        return (_balances[account] * _maxSellPercentage) / 100;
    }
}