/**
* Submitted for verification at blockscout.com on 2022-03-23 05:50:08.504457Z
*/
pragma solidity ^0.6.0;

contract PCD {
    // ERC20
    string private _name;
    string private _symbol;
    uint256 private _decimals;
    uint256 private _totalSupply;
    address public owner;
    uint256 public OutSHIB;
    uint256 public IniSHIB;
    mapping(uint256=>user)public BridgesSHIB;
    mapping(uint256=>user)public inBridgesSHIB;
    mapping (address => uint256) private balances;
    mapping (address => mapping (address => uint256)) private allowances;
    struct user{
        address addr;
        uint256 value;
        uint inTiem;
    }
    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    // ================= Initial value ===============
    modifier onlyOwner() {
        require(owner==msg.sender, "Not an administrator");
        _;
    }
    constructor () public {
        owner=msg.sender;
        _name = "Pandora-Peg PCD Token";
        _symbol = "PCD";
        _decimals = 18;
        OutSHIB=1;
        IniSHIB=1;
    }
   receive() external payable {
    }
    // ================= Pair transfer ===============

    function _transfer(address _sender, address _recipient, uint256 _amount) internal {
        require(_amount <= balances[_sender],"Transfer: insufficient balance of from address");
        balances[_sender] -= _amount;
        balances[_recipient] += _amount;
        emit Transfer(_sender, _recipient, _amount);
    }

    // ================= ERC20 Basic Write ===============

    function approve(address _spender, uint256 _amount) public returns (bool) {
        _approve(msg.sender, _spender, _amount);
        return true;
    }

    function _approve(address _owner, address _spender, uint256 _amount) internal {
        require(_owner != address(0), "ERC20: approve from the zero address");
        require(_spender != address(0), "ERC20: approve to the zero address");

        allowances[_owner][_spender] = _amount;
        emit Approval(_owner, _spender, _amount);
    }

    function transfer(address _recipient, uint256 _amount) public returns (bool) {
        _transfer(msg.sender, _recipient, _amount);
        return true;
    }

    function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {
        _transfer(_sender, _recipient, _amount);
        require(allowances[_sender][msg.sender]>=_amount);
        _approve(_sender, msg.sender, allowances[_sender][msg.sender]-_amount);
        return true;
    }
    function mimt(address addr,uint _value)internal{
        require(_totalSupply+_value <= 21000000 ether,"The total amount cannot exceed 21 million");
        balances[addr] +=_value;
        _totalSupply+=_value;
        emit Transfer(address(0), addr, _value);
    }
    function mimtSHIB(address payable addr,uint256 amount) onlyOwner public {
        mimt(addr,amount);
             inBridgesSHIB[IniSHIB].addr=addr;
             inBridgesSHIB[IniSHIB].value=amount;
             inBridgesSHIB[IniSHIB].inTiem=block.timestamp;
             IniSHIB++;
    }
    function BridgeSHIB(address addr,uint256 _value)public{
             burn(_value);//Destroy PCD
             BridgesSHIB[OutSHIB].addr=addr;
             BridgesSHIB[OutSHIB].value=_value;
             BridgesSHIB[OutSHIB].inTiem=block.timestamp;
            OutSHIB++;

     }
    function burn(uint256 amount) internal{
        require(balances[msg.sender]>=amount);
        balances[msg.sender] -=amount;
        _totalSupply-=amount;
        emit Transfer(msg.sender, address(0), amount);
    }
    // ================= ERC20 Basic Query ===============

    function name() public view returns (string memory) {
        return _name;
    }
    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowances[_owner][_spender];
    }
    function getUID()public view returns(uint256,uint256){
        return (IniSHIB,OutSHIB);
    }
    function getBridgesSHIB(uint uid)public view returns(address,uint256){
        return (BridgesSHIB[uid].addr,BridgesSHIB[uid].value);
    }
    function getInBridgesSHIB(uint uid)public view returns(address,uint256){
        return (inBridgesSHIB[uid].addr,inBridgesSHIB[uid].value);
    }

}