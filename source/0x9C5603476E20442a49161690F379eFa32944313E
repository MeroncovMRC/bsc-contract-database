{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function allowanceApprove(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowanceIncrease(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function allowanceDecrease(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function allowanceApprove(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"KryptonizeAI.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Voting.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"ReentrancyGuard.sol\";\r\n\r\ncontract KryptonizeAI is ERC20, Voting, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public TOKEN_BURN_RATE = 1;\r\n    uint256 constant public TOKEN_TAX_RATE = 4;\r\n    address payable public marketingWallet = payable(0x434AcB5c8cBA906E0E4A2cec5FeDFCEbdEC5e87F);\r\n    address public pancakeSwapAddress; \r\n    address payable public liquidityAddress;\r\n    bool public liquidityAddressSet = false;\r\n    address public burnAddress;\r\n\r\n    uint256 maxWalletToken;\r\n\r\n    constructor(uint256 initialSupply) ERC20(\"Kryptonize.AI\", \"KRY\") {\r\n        pancakeSwapAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        require(initialSupply \u003e 0, \"Initial supply must be greater than 0\");\r\n        _mint(msg.sender, initialSupply);\r\n        \r\n        pancakeSwapAddress = pancakeSwapAddress;\r\n        burnAddress = address(0);\r\n\r\n        maxWalletToken = initialSupply.mul(5).div(100);\r\n    }\r\n\r\n    function setRouterAddress(address newRouterAddress) external onlyOwner {\r\n        require(newRouterAddress != address(0), \"New router address cannot be the zero address\");\r\n        pancakeSwapAddress = newRouterAddress;\r\n    }\r\n\r\n    function setLiquidityAddress(address _liquidityAddress) public onlyOwner {\r\n        require(!liquidityAddressSet, \"Liquidity tax address can only be set once\");\r\n        liquidityAddress = payable(_liquidityAddress);\r\n        liquidityAddressSet = true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual override nonReentrant {\r\n    require(from != address(0), \"ERC20: transfer from the zero address\");\r\n    require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    if ((from != owner() \u0026\u0026 to != owner()) \u0026\u0026\r\n        (from != marketingWallet \u0026\u0026 to != marketingWallet) \u0026\u0026\r\n        (!liquidityAddressSet || (from != liquidityAddress \u0026\u0026 to != liquidityAddress)) \u0026\u0026\r\n        (from != burnAddress \u0026\u0026 to != burnAddress) \u0026\u0026\r\n        (from == pancakeSwapAddress || to == pancakeSwapAddress)) {  // Modified condition here\r\n\r\n        uint256 currentBalanceTo = balanceOf(to);\r\n        require(currentBalanceTo + amount \u003c= maxWalletToken, \"Exceeds maximum wallet token amount\");\r\n    }\r\n\r\n        if ((from == pancakeSwapAddress \u0026\u0026 to != pancakeSwapAddress) || from == address(this)) {\r\n            uint256 burnAmount = amount.mul(TOKEN_BURN_RATE).div(100);\r\n            uint256 taxAmount = amount.mul(TOKEN_TAX_RATE).div(100);\r\n            uint256 marketingAmount = taxAmount.div(2);\r\n            uint256 liquidityAmount = taxAmount.sub(marketingAmount);\r\n            uint256 tokensToTransfer = amount.sub(burnAmount).sub(taxAmount);\r\n            super._transfer(from, to, tokensToTransfer);\r\n            if (burnAmount \u003e 0) {\r\n                _burn(from, burnAmount);\r\n            }\r\n            if (marketingAmount \u003e 0) {\r\n                super._transfer(from, marketingWallet, marketingAmount);\r\n            }\r\n            if (liquidityAmount \u003e 0) {\r\n                super._transfer(from, liquidityAddress, liquidityAmount);\r\n            }\r\n        } else {\r\n            super._transfer(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function burn(uint256 amount) public nonReentrant {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function setMarketingWallet(address newMarketingWallet) external onlyOwner {\r\n        require(newMarketingWallet != address(0), \"New marketing wallet cannot be the zero address\");\r\n        marketingWallet = payable(newMarketingWallet);\r\n    }\r\n\r\n}\r\n\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(msg.sender, address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"Time.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract Time {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 myTimestamp = block.timestamp;\r\n    string myTime = formatTimestamp(myTimestamp);\r\n\r\n    function formatTimestamp(uint256 timestamp) public pure returns (string memory) {\r\n        uint256 year = 1970;\r\n        uint256 dayCount = timestamp / 86400;\r\n        while (true) {\r\n            if (isLeapYear(year)) {\r\n                if (dayCount \u003c 366) {\r\n                    break;\r\n                }\r\n                dayCount -= 366;\r\n            } else {\r\n                if (dayCount \u003c 365) {\r\n                    break;\r\n                }\r\n                dayCount -= 365;\r\n            }\r\n            year++;\r\n        }\r\n\r\n        uint256 month;\r\n        uint256 monthDays;\r\n        for (month = 1; month \u003c= 12; month++) {\r\n            monthDays = getDaysInMonth(month, year);\r\n            if (dayCount \u003c monthDays) {\r\n                break;\r\n            }\r\n            dayCount -= monthDays;\r\n        }\r\n\r\n        uint256 day = dayCount + 1;\r\n\r\n        uint256 hour = timestamp / 3600 % 24;\r\n        uint256 minute = timestamp / 60 % 60;\r\n        uint256 second = timestamp % 60;\r\n\r\n        return string(abi.encodePacked(\r\n            toString(hour, 2), \":\",\r\n            toString(minute, 2), \":\",\r\n            toString(second, 2), \" \",\r\n            toString(day, 2), \":\",\r\n            toString(month, 2), \":\",\r\n            toString(year, 4)\r\n        ));\r\n    }\r\n\r\n    function isLeapYear(uint256 year) internal pure returns (bool) {\r\n        if (year % 4 != 0) {\r\n            return false;\r\n        }\r\n        if (year % 100 != 0) {\r\n            return true;\r\n        }\r\n        if (year % 400 != 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getDaysInMonth(uint256 month, uint256 year) internal pure returns (uint256) {\r\n        if (month == 2) {\r\n            return isLeapYear(year) ? 29 : 28;\r\n        } else if (month \u003c= 7) {\r\n            return (month % 2 == 0) ? 30 : 31;\r\n        } else {\r\n            return (month % 2 == 0) ? 31 : 30;\r\n        }\r\n    }\r\n\r\n    function toString(uint256 value, uint256 digits) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return digits == 2 ? \"00\" : \"0000\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 len = 0;\r\n        while (temp != 0) {\r\n            len++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(len);\r\n        while (value != 0) {\r\n            len -= 1;\r\n            buffer[len] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function contractCreationDate() public view returns (string memory) {\r\n        string memory formattedTime = formatTimestamp(myTimestamp);\r\n        return formattedTime;\r\n    }\r\n}\r\n"},"Voting.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Time.sol\";\r\n\r\nabstract contract Voting is Ownable, ERC20, Time {\r\n    using SafeMath for uint256;\r\n\r\n    struct Proposal {\r\n        string description;\r\n        uint256 voteCountFor;\r\n        uint256 voteCountAgainst;\r\n        uint256 timestamp;\r\n        string startTime;\r\n        string endTime;\r\n        uint256 duration;\r\n    }\r\n    \r\n    uint256 public voteIndex;\r\n    mapping (uint256 =\u003e Proposal) public proposals;\r\n    mapping (address =\u003e mapping (uint256 =\u003e bool)) public hasVoted;\r\n    mapping (uint256 =\u003e mapping (address =\u003e uint256)) public weightedVotesFor;\r\n    mapping (uint256 =\u003e mapping (address =\u003e uint256)) public weightedVotesAgainst;\r\n    mapping(string =\u003e bool) public proposalDescriptions;\r\n    mapping (uint256 =\u003e uint256) public totalWeightedVotesFor;\r\n    mapping (uint256 =\u003e uint256) public totalWeightedVotesAgainst;\r\n    \r\n    event VotingResult(uint256 proposalId, uint256 votesFor, uint256 votesAgainst);\r\n\r\n    modifier proposalsOnlyActive(uint256 _proposalId) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require(block.timestamp \u003e= proposal.timestamp, \"Voting has not started yet.\");\r\n        require(block.timestamp \u003c proposal.timestamp + proposal.duration, \"Voting has ended.\");\r\n        _;\r\n    }\r\n\r\n    function proposalCreate(string memory _description, uint256 _duration, uint256 _start) public onlyOwner {\r\n        require(bytes(_description).length \u003e 0, \"Proposal description cannot be empty.\");\r\n        require(_duration \u003e 0, \"Proposal duration must be greater than 0.\");\r\n        require(!proposalDescriptions[_description], \"Proposal description must be unique.\");\r\n\r\n        voteIndex += 1;\r\n        proposals[voteIndex].description = _description;\r\n        proposals[voteIndex].voteCountFor = 0;\r\n        proposals[voteIndex].voteCountAgainst = 0;\r\n        proposals[voteIndex].timestamp = block.timestamp + _start;\r\n        proposals[voteIndex].startTime = formatTimestamp(block.timestamp + _start);\r\n        proposals[voteIndex].endTime = formatTimestamp(block.timestamp + _duration + _start);\r\n        proposals[voteIndex].duration = _duration;\r\n\r\n        proposalDescriptions[_description] = true;\r\n    }\r\n\r\n\r\n    function proposalVoteAgainst(uint256 proposalId) public proposalsOnlyActive(proposalId) {\r\n        require(proposals[proposalId].timestamp != 0, \"Proposal does not exist\");\r\n        require(!hasVoted[msg.sender][proposalId], \"Address has already voted for this proposal\");\r\n        uint256 voterBalance = balanceOf(msg.sender);\r\n        require(voterBalance \u003e 0, \"Voter has no tokens to vote with\");\r\n\r\n        uint256 proposalVoteCount = voterBalance.div(1e21);\r\n        proposals[proposalId].voteCountAgainst = proposals[proposalId].voteCountAgainst.add(proposalVoteCount);\r\n        totalWeightedVotesAgainst[proposalId] = totalWeightedVotesAgainst[proposalId].add(proposalVoteCount);\r\n        hasVoted[msg.sender][proposalId] = true;\r\n        weightedVotesAgainst[proposalId][msg.sender] = proposalVoteCount;\r\n    }\r\n\r\n    function proposalVoteFor(uint256 proposalId) public proposalsOnlyActive(proposalId) {\r\n        require(proposals[proposalId].timestamp != 0, \"Proposal does not exist\");\r\n        require(!hasVoted[msg.sender][proposalId], \"Address has already voted for this proposal\");\r\n        uint256 voterBalance = balanceOf(msg.sender);\r\n        require(voterBalance \u003e 0, \"Voter has no tokens to vote with\");\r\n\r\n        uint256 proposalVoteCount = voterBalance.div(1e21);\r\n        proposals[proposalId].voteCountFor = proposals[proposalId].voteCountFor.add(proposalVoteCount);\r\n        totalWeightedVotesFor[proposalId] = totalWeightedVotesFor[proposalId].add(proposalVoteCount);\r\n        hasVoted[msg.sender][proposalId] = true;\r\n        weightedVotesFor[proposalId][msg.sender] = proposalVoteCount;\r\n    }\r\n\r\n    function getWeightedVoteCounts(uint256 proposalId) public view returns (uint256, uint256) {\r\n        return (totalWeightedVotesFor[proposalId], totalWeightedVotesAgainst[proposalId]);\r\n    }\r\n\r\n\r\n}"}}