
// File: contracts/wcttoken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

contract WhaleCartToken {
    string private _name = "WhaleChart Token";
    string private _symbol = "WCT";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 250_000_000_000 * 10**uint256(_decimals);
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        uint256 allowedAmount = _allowances[from][msg.sender];
        require(allowedAmount >= value, "Insufficient allowance");

        _transfer(from, to, value);
        _approve(from, msg.sender, allowedAmount - value);

        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        uint256 currentAllowance = _allowances[msg.sender][spender];
        require(currentAllowance >= subtractedValue, "Decreased allowance below zero");
        _approve(msg.sender, spender, currentAllowance - subtractedValue);
        return true;
    }

    function _transfer(address from, address to, uint256 value) internal {
        require(from != address(0), "Transfer from the zero address");
        require(to != address(0), "Transfer to the zero address");
        require(value <= _balances[from], "Insufficient balance");

        if (from == msg.sender) {
            uint256 burnedAmount = value / 200; // Perform 0.5% burn
            uint256 transferAmount = value - burnedAmount;

            _balances[from] -= value;
            _balances[to] += transferAmount;
            _totalSupply -= burnedAmount;

            emit Transfer(from, to, transferAmount);
            emit Transfer(from, address(0), burnedAmount);
        } else {
            _balances[from] -= value;
            _balances[to] += value;

            emit Transfer(from, to, value);
        }
    }

    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }
}

