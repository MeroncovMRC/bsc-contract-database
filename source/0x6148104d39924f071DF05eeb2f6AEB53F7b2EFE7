pragma solidity 0.6.12;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, 'SafeMath: addition overflow');

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, 'SafeMath: subtraction overflow');
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, 'SafeMath: multiplication overflow');

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, 'SafeMath: division by zero');
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, 'SafeMath: modulo by zero');
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }

    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
        z = x < y ? x : y;
    }

    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
    function sqrt(uint256 y) internal pure returns (uint256 z) {
        if (y > 3) {
            z = y;
            uint256 x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, 'Address: insufficient balance');

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}('');
        require(success, 'Address: unable to send value, recipient may have reverted');
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, 'Address: low-level call failed');
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, 'Address: insufficient balance for call');
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), 'Address: call to non-contract');

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
library SafeBEP20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(
        IBEP20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IBEP20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IBEP20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            'SafeBEP20: approve from non-zero to non-zero allowance'
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(
            value,
            'SafeBEP20: decreased allowance below zero'
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IBEP20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');
        if (returndata.length > 0) {
            // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');
        }
    }
}
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor() internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
interface IBPToken {
    function balanceOf(address account) external view returns (uint256);
    function mintTo(address to, uint256 amount) external returns (bool);
}
interface IMasterChef {
    function cakePerBlock() view external returns(uint);
    function totalAllocPoint() view external returns(uint);

    function poolInfo(uint _pid) view external returns(address lpToken, uint allocPoint, uint lastRewardBlock, uint accCakePerShare);
    function userInfo(uint _pid, address _account) view external returns(uint amount, uint rewardDebt);

    function deposit(uint256 _pid, uint256 _amount) external;
    function withdraw(uint256 _pid, uint256 _amount) external;

    function enterStaking(uint256 _amount) external;
    function leaveStaking(uint256 _amount) external;
}

contract BunnyParkMasterChefV2 is Ownable {
    using SafeMath for uint256;
    using SafeBEP20 for IBEP20;
    bytes4 private constant SELECTOR_TRANSFER = bytes4(keccak256(bytes('transfer(address,uint256)')));
    // Info of each user.
    struct UserInfo {
        uint256 amount;     // How many LP tokens the user has provided.
        // pending reward = (user.amount * pool.accBPPerShare) - user.rewardDebt
        uint256 rewardDebt;
    }

    // Info of each pool.
    struct PoolInfo {
        IBEP20 lpToken;           // Address of LP token contract.can be cake token
        uint256 lpSupply;         // add all user deposited lp in this pool
        uint256 allocPoint;       // How many allocation points assigned to this pool.
        uint256 lastRewardBlock;  // Last block number that BPs distribution occurs.
        uint256 accBPPerShare; // Accumulated BPs per share, times 1e12. See below.
    }

    IBPToken public bpToken;//BP contract address
    IBEP20 public cake;//cake contract address
    IMasterChef public CAKE_MASTER_CHEF;//pancake farm's master chef address
    address public cakeRecipientAddress;//receive cake reward
    //calculate reward by phase,mul 0.9 per 30 days
    uint256 public phasePeriod = 60 * 60 * 24 * 30 / 3;
    // BP tokens created per block.
    uint256 public BPPerBlock = 25e18; //25 BP in phase 0
    uint8 private unlocked = 1;
    // Info of each pool.
    PoolInfo[] public poolInfo;
    // Info of each user that stakes LP tokens.
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;//pid=>user=>userinfo
    mapping(uint256 => bool) public masterChefPidExist;//master chef pid =>exist or not,need set before run deposit
    mapping(uint256 => uint256) public pancakeMasterChefPid;//pid in this contract=>pancakefarm pid+1,for rm default 0 value
    // Total allocation points. Must be the sum of all allocation points in all pools.
    uint256 public totalAllocPoint = 0;
    // The block number when BP mining starts.
    uint256 public startBlock;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 havestAmount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, uint256 havestAmount);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event SetPidAllocPoint(uint256 _pid, uint256 _allocPoint);
    event SetBPPerBlock(address indexed user,uint256 bpPerBlock);
	
    modifier lock() {
        require(unlocked == 1, 'LOCKED');
        unlocked = 0;
        _;
        unlocked = 1;
    }
    //1、need BPToken contract set this contract as keeper,so this contract can mint bp
    //2、set exist masterchef poolid of pancake farm
    constructor(
        IMasterChef _CAKE_MASTER_CHEF,
        IBEP20 _cake,
        IBPToken _bp,
        uint256 _startBlock,
        address _cakeRecipientAddress
    ) public {
        CAKE_MASTER_CHEF = _CAKE_MASTER_CHEF;
        cake = _cake;
        bpToken = _bp;
        startBlock = _startBlock;
        cakeRecipientAddress = _cakeRecipientAddress;
    }

    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }

    // Add a new lp to the pool. Can only be called by the owner.
    // DO NOT add the same LP token more than once. Rewards will be messed up if you do.
    function add(uint256 masterChefPoolId, uint256 _allocPoint, IBEP20 _lpToken) public onlyOwner {
        checkPoolDuplicate(_lpToken);
        massUpdatePools();
        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
        totalAllocPoint = totalAllocPoint.add(_allocPoint);
        poolInfo.push(PoolInfo({
        lpToken : _lpToken,
        lpSupply : 0,
        allocPoint : _allocPoint,
        lastRewardBlock : lastRewardBlock,
        accBPPerShare : 0
        }));
        //if masterChefPoolId exist in pancake farm,will havest cake to this contract
        if (masterChefPidExist[masterChefPoolId]) {
            //approve masterchef transfer this contract's flip token
            _safeApprove(address(_lpToken), address(CAKE_MASTER_CHEF), uint(~0));
            pancakeMasterChefPid[poolInfo.length - 1] = masterChefPoolId.add(1);
        }
    }

    // Update the given pool's BP allocation point. Can only be called by the owner.
    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {
        require(_pid < poolInfo.length, "BunnyParkMasterChef: pid not right");
        massUpdatePools();
        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;
        poolInfo[_pid].allocPoint = _allocPoint;
        if (prevAllocPoint != _allocPoint) {
            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);
        }
        emit SetPidAllocPoint(_pid,_allocPoint);
    }

    // View function to see pending BPs on frontend.
    function pendingBP(uint256 _pid, address _user) external view returns (uint256) {
        return pendingBPByBlockNumber(_pid, _user, block.number);
    }

    function pendingBPByBlockNumber(uint256 _pid, address _user, uint256 currentBlock) public view returns (uint256){
        require(_pid < poolInfo.length, "BunnyParkMasterChef: pid not right");
        PoolInfo memory pool = poolInfo[_pid];
        UserInfo memory user = userInfo[_pid][_user];
        uint256 accBPPerShare = pool.accBPPerShare;
        if (currentBlock > pool.lastRewardBlock && pool.lpSupply != 0) {
            uint256 blockReward = getBPRewardByBlockNumber(pool.lastRewardBlock, currentBlock);
            // Calculate the rewards obtained by the pool based on the allocPoint
            uint256 BPReward = blockReward.mul(pool.allocPoint).div(totalAllocPoint);
            //calculate acc BP rate per lp
            accBPPerShare = accBPPerShare.add(BPReward.mul(1e12).div(pool.lpSupply));
        }

        return user.amount.mul(accBPPerShare).div(1e12).sub(user.rewardDebt);
    }

    // Update reward variables for all pools. Be careful of gas spending!
    function massUpdatePools() public {
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            updatePool(pid);
        }
    }

    // Update reward variables of the given pool to be up-to-date.
    function updatePool(uint256 _pid) public {
        require(_pid < poolInfo.length, "BunnyParkMasterChef: pid not right");
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        uint256 lpSupply = pool.lpSupply;
        if (lpSupply == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }

        //calculate lastRewardBlock to this block's reward
        uint256 blockReward = getBPReward(pool.lastRewardBlock);
        if (blockReward <= 0) {
            return;
        }
        // Calculate the rewards obtained by the pool based on the allocPoint
        uint256 BPReward = blockReward.mul(pool.allocPoint).div(totalAllocPoint);

        //mint bp in here
        bpToken.mintTo(address(this), BPReward);
        pool.accBPPerShare = pool.accBPPerShare.add(BPReward.mul(1e12).div(lpSupply));
        pool.lastRewardBlock = block.number;
    }

    // Deposit LP tokens to BunnyParkMasterChef for BP allocation.
    function deposit(uint256 _pid, uint256 _amount) public lock {
        require(_pid < poolInfo.length, "BunnyParkMasterChef: pid not right");
        PoolInfo storage pool = poolInfo[_pid];

        UserInfo storage user = userInfo[_pid][msg.sender];
        updatePool(_pid);
        uint256 pending = 0;
        if (user.amount > 0) {
            pending = user.amount.mul(pool.accBPPerShare).div(1e12).sub(user.rewardDebt);
            if (pending > 0) {
                safeBPTransfer(msg.sender, pending);
            }
        }
        if (_amount > 0) {
            user.amount = user.amount.add(_amount);
            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
        }
        user.rewardDebt = user.amount.mul(pool.accBPPerShare).div(1e12);
        uint256 savedMasterChefPid = pancakeMasterChefPid[_pid];
        if (savedMasterChefPid != 0) {
            uint256 actualMasterChefPid = savedMasterChefPid.sub(1);
            if (masterChefPidExist[actualMasterChefPid]) {
                //transfer to pancake farm
                if (actualMasterChefPid == 0) {
                    CAKE_MASTER_CHEF.enterStaking(_amount);
                } else {
                    CAKE_MASTER_CHEF.deposit(actualMasterChefPid, _amount);
                }
            }
        }
        pool.lpSupply = pool.lpSupply.add(_amount);
        emit Deposit(msg.sender, _pid, _amount, pending);
    }

    // Withdraw LP tokens from MasterChef.only havest BP if _amount is 0
    function withdraw(uint256 _pid, uint256 _amount) public lock{
        require(_pid < poolInfo.length, "BunnyParkMasterChef: pid not right");
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= _amount, "BunnyParkMasterChef: amount not right");
        updatePool(_pid);
        uint256 pending = user.amount.mul(pool.accBPPerShare).div(1e12).sub(user.rewardDebt);
        if (pending > 0) {
            safeBPTransfer(msg.sender, pending);
        }
        if (_amount > 0) {
            user.amount = user.amount.sub(_amount);
            uint256 savedMasterChefPid = pancakeMasterChefPid[_pid];
            if (savedMasterChefPid != 0) {
                uint256 actualMasterChefPid = savedMasterChefPid.sub(1);
                if (masterChefPidExist[actualMasterChefPid]) {
                    if (actualMasterChefPid == 0) {
                        CAKE_MASTER_CHEF.leaveStaking(_amount);
                    } else {
                        CAKE_MASTER_CHEF.withdraw(actualMasterChefPid, _amount);
                    }
                }
            }

            pool.lpSupply = pool.lpSupply.sub(_amount);
            pool.lpToken.safeTransfer(address(msg.sender), _amount);
        }
        user.rewardDebt = user.amount.mul(pool.accBPPerShare).div(1e12);
        emit Withdraw(msg.sender, _pid, _amount, pending);
    }

    function balanceOf(uint256 _pid) public view returns (uint256){
        require(_pid < poolInfo.length, "BunnyParkMasterChef: pid not right");
        return poolInfo[_pid].lpSupply;
    }

    //harvest CAKE
    function harvestAllCake() public {
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            uint256 savedMasterChefPid = pancakeMasterChefPid[pid];
            if (savedMasterChefPid != 0) {
                uint256 actualMasterChefPid = savedMasterChefPid.sub(1);
                if (masterChefPidExist[actualMasterChefPid]) {
                    if (actualMasterChefPid == 0) {
                        CAKE_MASTER_CHEF.leaveStaking(0);
                    } else {
                        CAKE_MASTER_CHEF.withdraw(actualMasterChefPid, 0);
                    }
                }
            }
        }
        cake.safeTransfer(cakeRecipientAddress, cake.balanceOf(address(this)));
    }

    //owner set to timelock
    function setBPPerBlock(uint256 _BPPerBlock) public onlyOwner {
        massUpdatePools();
        BPPerBlock = _BPPerBlock;
		emit SetBPPerBlock(msg.sender,_BPPerBlock);
    }

    // At what phase
    function phaseByBlockNumber(uint256 blockNumber) public view returns (uint256 ret) {
        if (phasePeriod == 0) {
            return 0;
        }
        if (blockNumber > startBlock) {
            ret = (blockNumber.sub(startBlock).sub(1)).div(phasePeriod);
            return ret;
        }
        return 0;
    }

    function phase() public view returns (uint256) {
        return phaseByBlockNumber(block.number);
    }

    function rewardByBlockNumber(uint256 blockNumber) public view returns (uint256) {
        uint256 _phase = phaseByBlockNumber(blockNumber);
        if (_phase > 59) {
            _phase = 59;
        }
        //mul 0.9 per phase
        return BPPerBlock.mul(9 ** _phase).div(10 ** _phase);
    }

    function reward() public view returns (uint256) {
        return rewardByBlockNumber(block.number);
    }

    // Rewards for the current block
    function getBPReward(uint256 _lastRewardBlock) public view returns (uint256) {
        return getBPRewardByBlockNumber(_lastRewardBlock, block.number);
    }

    // Rewards for the current block
    function getBPRewardByBlockNumber(uint256 _lastRewardBlock, uint256 currentBlock) public view returns (uint256) {
        require(_lastRewardBlock <= currentBlock, "BunnyParkMasterChef: must less than the current block number");
        uint256 blockReward = 0;
        uint256 n = phaseByBlockNumber(_lastRewardBlock);
        uint256 m = phaseByBlockNumber(currentBlock);
        // If it crosses the cycle
        while (n < m) {
            n++;
            // Get the last block of the previous cycle
            uint256 r = n.mul(phasePeriod).add(startBlock);
            // Get rewards from previous periods
            blockReward = blockReward.add((r.sub(_lastRewardBlock)).mul(rewardByBlockNumber(r)));
            _lastRewardBlock = r;
        }
        blockReward = blockReward.add((currentBlock.sub(_lastRewardBlock)).mul(rewardByBlockNumber(currentBlock)));
        return blockReward;
    }

    function setMasterChefPidExist(uint256[] calldata pids) public onlyOwner {
        for (uint256 i = 0; i < pids.length; i++) {
            masterChefPidExist[pids[i]] = true;
        }
    }

    // Safe bp transfer function, just in case if rounding error causes pool to not have enough BPs.
    function safeBPTransfer(address _to, uint256 _amount) internal {
        uint256 bal = IBPToken(bpToken).balanceOf(address(this));
        if (_amount > bal) {
            _safeTransfer(address(bpToken), _to, _amount);
        } else {
            _safeTransfer(address(bpToken), _to, _amount);
        }
    }

    function _safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'BunnyParkMasterChef: APPROVE_FAILED');
    }
    function _safeTransfer(address token,address to ,uint256 value) internal {
        (bool success,bytes memory data)  = token.call(abi.encodeWithSelector(SELECTOR_TRANSFER,to,value));
        require(success && (data.length ==0 || abi.decode(data,(bool))));
    }
    function checkPoolDuplicate(IBEP20 _lpToken)  view internal {
        uint256 length = poolInfo.length;
        for(uint256 pid =0; pid < length;++pid){
            require(poolInfo[pid].lpToken != _lpToken,"add: existing pool");
        }
    }
    // for user Withdraw without caring about BP rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        uint256 userAmount = user.amount;
        uint256 savedMasterChefPid = pancakeMasterChefPid[_pid];
        if (savedMasterChefPid != 0) {
            uint256 actualMasterChefPid = savedMasterChefPid.sub(1);
            if (masterChefPidExist[actualMasterChefPid]) {
                if (actualMasterChefPid == 0) {
                    CAKE_MASTER_CHEF.leaveStaking(userAmount);
                } else {
                    CAKE_MASTER_CHEF.withdraw(actualMasterChefPid, userAmount);
                }
            }
        }
        pool.lpSupply = pool.lpSupply.sub(userAmount);
        user.amount = 0;
        user.rewardDebt = 0;
        pool.lpToken.safeTransfer(address(msg.sender), userAmount);
        emit EmergencyWithdraw(msg.sender, _pid, userAmount);
    }
}