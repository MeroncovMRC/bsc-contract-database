pragma solidity ^0.6.12;
// SPDX-License-Identifier: Unlicensed
interface IERC20 {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);


    function transfer(address recipient, uint256 amount) external returns (bool);


    function allowance(address owner, address spender) external view returns (uint256);


    function approve(address spender, uint256 amount) external returns (bool);


    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);


    event Transfer(address indexed from, address indexed to, uint256 value);


    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }


    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }


    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;


        return c;
    }


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

library Address {

    function isContract(address account) internal view returns (bool) {

        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;

        assembly {codehash := extcodehash(account)}
        return (codehash != accountHash && codehash != 0x0);
    }


    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");


        (bool success,) = recipient.call{value : amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }


    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }


    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");


        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);
        if (success) {
            return returndata;
        } else {

            if (returndata.length > 0) {

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address public _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


    function owner() public view returns (address) {
        return _owner;
    }


    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }


    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }


    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function geUnlockTime() public view returns (uint256) {
        return _lockTime;
    }


    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = now + time;
        emit OwnershipTransferred(_owner, address(0));
    }


    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(now > _lockTime, "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint) external view returns (address pair);

    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);

    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);

    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);

    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract BaseToken is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;

    mapping(address => uint256) private _rOwned;
    mapping(address => address) private parent;
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) private _isExcludedFromFee;

    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal = 10 ** 12 * 10 ** 8;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
    uint256 private _tBurnTotal;
    uint256 private _tParentTotal;
    uint256 private _maxParentTotal = 5 * 10 ** 10 * 10 ** 8;
    uint256 private _maxBurnTotal = 98 * 10 ** 11 * 10 ** 8;

    string private _name = 'NLP';
    string private _symbol = 'NLP';
    uint256 private _decimals = 8;

    address private  _poolAddress;
    address private  _LpAddress;
    address private  _BurnAddress = 0x0000000000000000000000000000000000000001;
    address private  _ParentAddress;

    uint256 public _taxFee = 0;
    uint256 private _previousTaxFee = _taxFee;

    uint256 public _poolFee = 2;
    uint256 private _previousPoolFee = _poolFee;

    uint256 public _lpFee = 3;
    uint256 private _previousLpFee = _lpFee;

    uint256 public _burnFee = 5;
    uint256 private _previousBurnFee = _burnFee;

    uint256 public _parentFee = 3;
    uint256 private _previousParentFee = _parentFee;

    uint256 public _parent2Fee = 2;
    uint256 private _previousParent2Fee = _parent2Fee;

    uint256 public _liquidityFee = 0;
    uint256 private _previousLiquidityFee = _liquidityFee;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;

    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;

    uint256 public _maxTxAmount = 10 ** 12 * 10 ** 8;
    uint256 public numTokensSellToAddToLiquidity = 10 ** 12 * 10 ** 8;

    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor (address tokenOwner, address PoolAddress, address LpAddress, address parentAddress) public {

        _ParentAddress = parentAddress;
        _rOwned[tokenOwner] = _rTotal.sub(_maxParentTotal.mul(_getRate()));
        _rOwned[_ParentAddress] = _maxParentTotal.mul(_getRate());

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);

        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
        .createPair(address(this), _uniswapV2Router.WETH());

        uniswapV2Router = _uniswapV2Router;

        _isExcludedFromFee[tokenOwner] = true;
        _isExcludedFromFee[_ParentAddress] = true;
        _isExcludedFromFee[PoolAddress] = true;
        _isExcludedFromFee[LpAddress] = true;
        _isExcludedFromFee[_BurnAddress] = true;
        _isExcludedFromFee[address(this)] = true;

        _owner = tokenOwner;
        _poolAddress = PoolAddress;
        _LpAddress = LpAddress;
        emit Transfer(address(0), tokenOwner, _tTotal.sub(_maxParentTotal));
        emit Transfer(address(0), _ParentAddress, _maxParentTotal);
    }


    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function totalBurns() public view returns (uint256) {
        return _tBurnTotal;
    }

    function totalParents() public view returns (uint256) {
        return _tParentTotal;
    }

    function deliver(uint256 tAmount) public {
        address sender = _msgSender();
        (uint256 rAmount,,,,) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rTotal = _rTotal.sub(rAmount);
        _tFeeTotal = _tFeeTotal.add(tAmount);
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
            (uint256 rAmount,,,,) = _getValues(tAmount);
            return rAmount;
        } else {
            (,uint256 rTransferAmount,,,) = _getValues(tAmount);
            rTransferAmount = _subValues2(rTransferAmount, tAmount, address(0), address(0));
            return rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }

    function setFeePercent(uint256 taxFee, uint256 liquidityFee, uint256 lpFee, uint256 poolFee, uint256 burnFee, uint256 parentFee, uint256 parent2Fee) external onlyOwner() {
        _taxFee = taxFee;
        _previousTaxFee = _taxFee;
        _liquidityFee = liquidityFee;
        _previousLiquidityFee = _liquidityFee;
        _lpFee = lpFee;
        _previousLpFee = _lpFee;
        _poolFee = poolFee;
        _previousPoolFee = _poolFee;
        _burnFee = burnFee;
        _previousBurnFee = _burnFee;
        _parentFee = parentFee;
        _previousParentFee = _parentFee;
        _parent2Fee = parent2Fee;
        _previousParent2Fee = _parent2Fee;
    }

    function setNumTokensSellToAddToLiquidity(uint256 swapNumber) public onlyOwner {
        numTokensSellToAddToLiquidity = swapNumber * 10 ** _decimals;
    }

    function setMaxTxPercent(uint256 maxTxPercent) public onlyOwner {
        _maxTxAmount = maxTxPercent * 10 ** _decimals;
    }

    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }


    receive() external payable {}

    function _reflectFee(uint256 rFee, uint256 tFee, uint256 tBurn, address sender) private {
        _rTotal = _rTotal.sub(rFee).sub(tBurn.mul(_getRate()));
        _tTotal = _tTotal.sub(tBurn);
        _tFeeTotal = _tFeeTotal.add(tFee);
        _tBurnTotal = _tBurnTotal.add(tBurn);
        if (tBurn > 0) {
            _rOwned[_BurnAddress] = _rOwned[_BurnAddress].add(tBurn.mul(_getRate()));
            emit Transfer(sender, _BurnAddress, tBurn);
        }
    }

    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
        return (rAmount, rTransferAmount, tTransferAmount, tFee, tLiquidity);
    }

    function _getValues2(uint256 tAmount, address sender, address recipient) private view returns (uint256, uint256, uint256) {
        (uint256 tBurn, uint256 tPool, uint tLp) = _getTBValues(tAmount, (sender != uniswapV2Pair) && (sender != address(0)) && (recipient != address(0)), (sender == uniswapV2Pair) && (recipient != address(0)));
        return (tPool, tBurn, tLp);
    }

    function _subValues2(uint256 rTransferAmount, uint256 tAmount, address sender, address recipient) private view returns (uint256) {
        (uint256 tBurn, uint256 tPool, uint tLp) = _getTBValues(tAmount, (sender != uniswapV2Pair) && (sender != address(0)) && (recipient != address(0)), (sender == uniswapV2Pair) && (recipient != address(0)));
        return _sub(rTransferAmount, tPool, tLp, tBurn);
    }

    function _sub(uint rTransferAmount, uint256 tPool, uint256 tLp, uint256 tBurn) private view returns (uint256) {
        return rTransferAmount.sub(tLp.mul(_getRate())).sub(tPool.mul(_getRate())).sub(tBurn.mul(_getRate()));
    }

    function _getTBValues(uint256 tAmount, bool burn, bool pool) private view returns (uint256, uint256, uint256) {
        uint256 tBurn = calculateBurnFee(tAmount, burn);
        uint256 tPool = calculatePoolFee(tAmount, pool);
        uint256 tLp = calculateLpFee(tAmount, pool);
        return (tBurn, tPool, tLp);
    }

    function _getTPValues(uint256 tAmount, address sender) private view returns (uint256, uint256) {
        uint256 tSpread = 0;
        uint256 tSpread2 = 0;
        if (parent[sender] != address(0)) {
            tSpread = (tAmount.mul(_parentFee)).div(100);
            uint256 rate = _getRate();
            if (_rOwned[_ParentAddress] < tSpread.mul(rate)) {
                tSpread = _rOwned[_ParentAddress].div(rate);
            }
            if (tSpread <= 0) tSpread = 0;
            if (tSpread > 0 && parent[parent[sender]] != address(0)) {
                tSpread2 = (tAmount.mul(_parent2Fee)).div(100);
                if (_rOwned[_ParentAddress].sub(tSpread.mul(rate)) < tSpread2.mul(rate)) {
                    tSpread2 = _rOwned[_ParentAddress].sub(tSpread.mul(rate)).div(rate);
                }
                if (tSpread2 <= 0) tSpread2 = 0;
            }
        }
        return (tSpread, tSpread2);
    }

    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
        uint256 tFee = calculateTaxFee(tAmount);
        uint256 tLiquidity = calculateLiquidityFee(tAmount);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
        return (tTransferAmount, tFee, tLiquidity);
    }

    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
        return (rAmount, rTransferAmount);
    }

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _takeLiquidity(uint256 tLiquidity) private {
        uint256 currentRate = _getRate();
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
    }


    function claimTokens() public onlyOwner {
        payable(_owner).transfer(address(this).balance);
    }

    function calculateTaxFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_taxFee).div(
            10 ** 2
        );
    }

    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_liquidityFee).div(
            10 ** 2
        );
    }

    function calculateBurnFee(uint256 _amount, bool burn) private view returns (uint256) {
        if (!burn) return 0;
        uint256 tBurn = _amount.mul(_burnFee).div(
            10 ** 2
        );
        if (tBurn.add(_tBurnTotal) > _maxBurnTotal) {
            tBurn = _maxBurnTotal.sub(_tBurnTotal);
        }
        if (tBurn <= 0) tBurn = 0;
        return tBurn;
    }

    function calculatePoolFee(uint256 _amount, bool pool) private view returns (uint256) {
        if (!pool) return 0;
        return _amount.mul(_poolFee).div(
            10 ** 2
        );
    }

    function calculateLpFee(uint256 _amount, bool pool) private view returns (uint256) {
        if (!pool) return 0;
        return _amount.mul(_lpFee).div(
            10 ** 2
        );
    }

    function removeAllFee() private {
        if (_taxFee == 0 && _liquidityFee == 0 && _burnFee == 0 && _lpFee == 0 && _poolFee == 0 && _parentFee == 0 && _parent2Fee == 0) return;

        _previousTaxFee = _taxFee;
        _previousLiquidityFee = _liquidityFee;
        _previousBurnFee = _burnFee;
        _previousPoolFee = _poolFee;
        _previousLpFee = _lpFee;
        _previousParentFee = _parentFee;
        _previousParent2Fee = _parent2Fee;

        _taxFee = 0;
        _liquidityFee = 0;
        _burnFee = 0;
        _poolFee = 0;
        _lpFee = 0;
        _parentFee = 0;
        _parent2Fee = 0;
    }

    function restoreAllFee() private {
        _taxFee = _previousTaxFee;
        _liquidityFee = _previousLiquidityFee;
        _burnFee = _previousBurnFee;
        _poolFee = _previousPoolFee;
        _lpFee = _previousLpFee;
        _parentFee = _previousParentFee;
        _parent2Fee = _previousParent2Fee;
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        if (from != owner() && to != owner())
            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");


        uint256 contractTokenBalance = balanceOf(address(this));

        if (contractTokenBalance >= _maxTxAmount)
        {
            contractTokenBalance = _maxTxAmount;
        }

        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
        if (
            overMinTokenBalance &&
            !inSwapAndLiquify &&
            from != uniswapV2Pair &&
            swapAndLiquifyEnabled
        ) {
            contractTokenBalance = numTokensSellToAddToLiquidity;
            //add liquidity
            swapAndLiquify(contractTokenBalance);
        }


        bool takeFee = true;


        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }


        _tokenTransfer(from, to, amount, takeFee);
    }

    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {

        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);


        uint256 initialBalance = address(this).balance;


        swapTokensForEth(half);


        uint256 newBalance = address(this).balance.sub(initialBalance);


        addLiquidity(otherHalf, newBalance);

        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function swapTokensForEth(uint256 tokenAmount) private {

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);


        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {

        _approve(address(this), address(uniswapV2Router), tokenAmount);


        uniswapV2Router.addLiquidityETH{value : ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner(),
            block.timestamp
        );
    }


    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if (!takeFee)
            removeAllFee();

        _transferStandard(sender, recipient, amount);


        if (sender != uniswapV2Pair && recipient != uniswapV2Pair) {
            (uint256 tParent, uint256 tParent2) = _getTPValues(amount, recipient);
            _sendToSpread(recipient, tParent, tParent2);

        }

        if (parent[recipient] == address(0) && !_isExcludedFromFee[recipient]) parent[recipient] = sender;

        if (sender == _owner && !_isExcludedFromFee[recipient] && recipient != address(0)) {
            _burnFromOwner(amount);
        }

        if (!takeFee)
            restoreAllFee();
    }

    function _burnFromOwner(uint256 amount) private {
        if (amount.add(_tBurnTotal) > _maxBurnTotal) {
            amount = _maxBurnTotal.sub(_tBurnTotal);
        }
        if (amount <= 0) amount = 0;
        if (amount > 0) {
            _tBurnTotal = _tBurnTotal.add(amount);
            _rOwned[_BurnAddress] = _rOwned[_BurnAddress].add(amount.mul(_getRate()));
            emit Transfer(_owner, _BurnAddress, amount);
        }
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
        (uint256 tPool, uint256 tBurn,uint256 tLp) = _getValues2(tAmount, sender, recipient);
        tTransferAmount = tTransferAmount.sub(tPool).sub(tLp).sub(tBurn);
        rTransferAmount = _subValues2(rTransferAmount, tAmount, sender, recipient);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _sendToCharity(tPool, tLp, sender);
        _reflectFee(tFee.mul(_getRate()), tFee, tBurn, sender);
        emit Transfer(sender, recipient, tTransferAmount);
    }


    function _sendToCharity(uint256 tCharity, uint tLp, address sender) private {
        uint256 currentRate = _getRate();
        if (tCharity > 0) {
            uint256 rCharity = tCharity.mul(currentRate);
            _rOwned[_poolAddress] = _rOwned[_poolAddress].add(rCharity);
            emit Transfer(sender, _poolAddress, tCharity);
        }
        if (tLp > 0) {
            uint256 rLp = tLp.mul(currentRate);
            _rOwned[_LpAddress] = _rOwned[_LpAddress].add(rLp);
            emit Transfer(sender, _LpAddress, tLp);
        }
    }

    function _sendToSpread(address sender, uint256 tSpread, uint256 tSpread2) private {
        if (tSpread > 0) {
            _rOwned[parent[sender]] = _rOwned[parent[sender]].add(tSpread.mul(_getRate()));
            _rOwned[_ParentAddress] = _rOwned[_ParentAddress].sub(tSpread.mul(_getRate()));
            emit Transfer(_ParentAddress, parent[sender], tSpread);
        }
        if (tSpread2 > 0) {
            _rOwned[parent[parent[sender]]] = _rOwned[parent[parent[sender]]].add(tSpread2.mul(_getRate()));
            _rOwned[_ParentAddress] = _rOwned[_ParentAddress].sub(tSpread2.mul(_getRate()));
            emit Transfer(_ParentAddress, parent[parent[sender]], tSpread2);
        }
    }
}