
// File: Sale.sol
// SPDX-License-Identifier: MIT
// GoldQuality

pragma solidity ^0.8.19;

import "IERC20.sol";
import "IPair.sol";
import "Ownable.sol";

contract Sale is Ownable {
    IERC20 public token;
    IPair private pair;
    uint256 public price;

    event PriceChanged(address user, uint256 price);
    event TokensWithdrawn(address user, uint256 amount);
    event CoinsWithdrawn(address user, uint256 amount);
    event TokensPurchased(address indexed user, uint256 coinsAmount, uint256 tokensAmount);

    constructor(
        address _token,
        address _pair
    )
    {
        token = IERC20(_token);
        pair = IPair(_pair);
        price = 0;
    }

    function getPriceInCoins()
    public view
    returns (uint256)
    {
        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();
        return reserve1 * price * 1e16 / reserve0;
    }

    function setPrice(uint256 _price)
    external onlyOwner
    {
        require(_price != 0, "Wrong price");
        price = _price;

        emit PriceChanged(_msgSender(), _price);
    }

    function withdrawTokens()
    external onlyOwner
    {
        uint256 amount = token.balanceOf(address(this));
        token.transfer(owner(), amount);

        emit TokensWithdrawn(_msgSender(), amount);
    }

    function withdrawCoins()
    external onlyOwner
    {
        uint256 amount = address(this).balance;
        payable(owner()).transfer(amount);

        emit CoinsWithdrawn(_msgSender(), amount);
    }

    receive()
    external payable
    {
        require(price != 0, "Sales do not work");

        uint256 tokenAmount = msg.value * 1e18 / getPriceInCoins();

        require(token.balanceOf(address(this)) >= tokenAmount, "Not enough tokens to sale");

        token.transfer(_msgSender(), tokenAmount);

        emit TokensPurchased(_msgSender(), msg.value, tokenAmount);
    }
}

// File: IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function burn(uint256 amount) external;
}

// File: IPair.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

interface IPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
}

// File: Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

