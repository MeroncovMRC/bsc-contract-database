// File: @openzeppelin\contracts\token\ERC20\IERC20.sol 
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol) 
pragma solidity ^0.8.0; 
/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256); 
    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256); 
    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool); 
    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256); 
    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool); 
    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool); 
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value); 
    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
} 
// File: @openzeppelin\contracts\utils\Context.sol 
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol) 
pragma solidity ^0.8.0; 
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    } 
    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
} 
// File: @openzeppelin\contracts\access\Ownable.sol 
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol) 
pragma solidity ^0.8.0; 
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner; 
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); 
    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    } 
    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    } 
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    } 
    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    } 
    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    } 
    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
} 
// File: contracts\lib\IUniswapV2Factory.sol 
pragma solidity >=0.5.0; 
interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint); 
    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address); 
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint); 
    function createPair(address tokenA, address tokenB) external returns (address pair); 
    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
} 
// File: contracts\lib\IUniswapV2Pair.sol 
pragma solidity >=0.5.0; 
interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value); 
    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint); 
    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool); 
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint); 
    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external; 
    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1); 
    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint); 
    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external; 
    function initialize(address, address) external;
} 
// File: contracts\lib\IUniswapV2Router02.sol 
pragma solidity >=0.6.2; 
interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address); 
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts); 
    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
} 
// pragma solidity >=0.6.2; 
interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH); 
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
} 
// File: contracts\DAOToken.sol 
pragma solidity ^0.8.0;
contract DAOToken is Context, IERC20, Ownable { 
    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances; 
    mapping (address => bool) private _isExcludedFromFee; 
    mapping (address => bool) private _isExcluded;
    address[] private _excluded; 
    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal = 9999 * 10**18;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal; 
    string private _name = "DAO";
    string private _symbol = "DAO";
    uint8 private _decimals = 18; 
    uint256 public _taxFee = 1;
    uint256 private _previousTaxFee = _taxFee; 
    uint256 public _liquidityFee = 1;
    uint256 private _previousLiquidityFee = _liquidityFee; 
    uint256 public destroyFee = 2;
    uint256 public previousDestroyFee = destroyFee; 
    uint256 public holdLpReawardFee = 4;
    uint256 public previousHoldLpReawardFee = holdLpReawardFee; 
    uint256 public inviterFee;
    uint256 public previousInviterFee; 
    IUniswapV2Router02 public constant uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    address public immutable uniswapV2Pair; 
    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = false; 
    uint256 public _maxTxAmount = _tTotal / 5;
    uint256 private numTokensSellToAddToLiquidity = 0.1 * 10**18;
    uint256 constant public MAX_DESTROY_TTOTAL = 9000 * 10**18;
    uint256 public totalDestroy;
    address constant public DESTROY_ADDRESS = address(0);
    address private _inviterAddress = address(0);
    uint256[10] public INVITER_REWARD = [200, 50, 100, 50, 100, 20, 20, 20, 20, 20];
    mapping(address => address) public inviter;
    mapping(address => bool) isExcludedBindInviter; 
    address constant public tempHoldLpReaward = 0x0000000000000000000000000000000000000DA0; 
    event Transfer(address indexed from, address indexed to, uint256 indexed value, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDestroy, uint256 tHoldLp, uint256 tInviter);
    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    ); 
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    } 
    constructor () { 
        updateInviterFee();
        previousInviterFee = inviterFee; 
        _rOwned[_msgSender()] = _rTotal; 
         // Create a uniswap pair for this new token
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())
            .createPair(address(this), uniswapV2Router.WETH()); 
        //exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcluded[uniswapV2Pair] = true;
        _isExcluded[DESTROY_ADDRESS] = true;
        _isExcluded[tempHoldLpReaward] = true;
        isExcludedBindInviter[uniswapV2Pair] = true;
        isExcludedBindInviter[address(uniswapV2Router)] = true; 
        emit Transfer(address(0), _msgSender(), _tTotal);
    } 
    function name() public view returns (string memory) {
        return _name;
    } 
    function symbol() public view returns (string memory) {
        return _symbol;
    } 
    function decimals() public view returns (uint8) {
        return _decimals;
    } 
    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    } 
    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    } 
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    } 
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    } 
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    } 
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    } 
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    } 
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);
        return true;
    } 
    function isExcludedFromReward(address account) public view returns (bool) {
        return _isExcluded[account];
    } 
    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    } 
    function deliver(uint256 tAmount) public {
        address sender = _msgSender();
        require(!_isExcluded[sender], "Excluded addresses cannot call this function");
        (uint256 rAmount,,,,,,,,) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender] - rAmount;
        _rTotal = _rTotal - rAmount;
        _tFeeTotal = _tFeeTotal + tAmount;
    } 
    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
            (uint256 rAmount,,,,,,,,) = _getValues(tAmount);
            return rAmount;
        } else {
            (,uint256 rTransferAmount,,,,,,,) = _getValues(tAmount);
            return rTransferAmount;
        }
    } 
    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount / currentRate;
    } 
    function excludeFromReward(address account) public onlyOwner() {
        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
        require(!_isExcluded[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    } 
    function excludedBindInviter(address account) public onlyOwner {
        isExcludedBindInviter[account] = true;
    } 
    function includeBindInviter(address account) public onlyOwner {
        isExcludedBindInviter[account] = false;
    } 
         //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {} 
    function includeInReward(address account) external onlyOwner() {
        require(_isExcluded[account], "Account is already excluded");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == account) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _tOwned[account] = 0;
                _isExcluded[account] = false;
                _excluded.pop();
                break;
            }
        }
    } 
    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    } 
    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    } 
    // function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
    //     _taxFee = taxFee;
    // } 
    // function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
    //     _liquidityFee = liquidityFee;
    // } 
    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
        _maxTxAmount = _tTotal * maxTxPercent / 10**2;
    } 
    function setNumTokensSellToAddToLiquidity(uint numTokensSellToAddToLiquidity_) public onlyOwner {
        numTokensSellToAddToLiquidity = numTokensSellToAddToLiquidity_;
    } 
    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    } 
    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal - rFee;
        _tFeeTotal = _tFeeTotal + tFee;
    } 
    function _getValues(uint256 tAmount) private view returns (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDestroy, uint256 tHoldLp, uint256 tInviter) {
        (tTransferAmount, tFee, tLiquidity, tDestroy, tHoldLp, tInviter) = _getTValues(tAmount);
        (rAmount, rTransferAmount, rFee) = _getRValues(tAmount, tFee, tLiquidity, tDestroy, tHoldLp, tInviter, _getRate());
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity, tDestroy, tHoldLp, tInviter);
    } 
    function _getTValues(uint256 tAmount) private view returns (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDestroy, uint256 tHoldLp, uint256 tInviter) {
        tFee = calculateTaxFee(tAmount);
        tLiquidity = calculateLiquidityFee(tAmount);
        tDestroy = calculateDestroyFee(tAmount);
        tHoldLp = calculateHoldLpFee(tAmount);
        tInviter = calculateInviterFee(tAmount);
        tTransferAmount = tAmount - tFee - tLiquidity - tDestroy - tHoldLp - tInviter;
        return (tTransferAmount, tFee, tLiquidity, tDestroy, tHoldLp, tInviter);
    } 
    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tDestroy, uint256 tHoldLp, uint256 tInviter,  uint256 currentRate) private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount * currentRate;
        uint256 rFee = tFee * currentRate;
        uint256 rLiquidity = tLiquidity * currentRate;
        uint256 rDestroy = tDestroy * currentRate;
        uint256 rHoldLp = tHoldLp * currentRate;
        uint256 rInviter = tInviter * currentRate; 
        uint256 rTransferAmount = rAmount - rFee - rLiquidity - rDestroy - rHoldLp - rInviter;
        return (rAmount, rTransferAmount, rFee);
    } 
    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply / tSupply;
    } 
    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
            rSupply = rSupply - _rOwned[_excluded[i]];
            tSupply = tSupply - _tOwned[_excluded[i]];
        }
        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    } 
    function _takeLiquidity(address sender, uint256 tLiquidity, uint256 currentRate) private {
        if(tLiquidity <= 0){
            return;
        }
        uint256 rLiquidity = tLiquidity * currentRate;
        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;
        if(_isExcluded[address(this)]){
            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;
        }
        emit Transfer(sender, address(this), tLiquidity);
    } 
    function _takeDestory(address sender, uint256 tDestroy, uint256 currentRate) private {
        if(tDestroy <= 0){
            return;
        }
        if(totalDestroy >= MAX_DESTROY_TTOTAL){
            return;
        }
        uint256 rDestroy = tDestroy * currentRate;
        _rOwned[DESTROY_ADDRESS] = _rOwned[DESTROY_ADDRESS] + rDestroy;
        if(_isExcluded[DESTROY_ADDRESS]){
            _tOwned[DESTROY_ADDRESS] = _tOwned[DESTROY_ADDRESS] + tDestroy;
        }
        totalDestroy+=tDestroy;
        emit Transfer(sender, DESTROY_ADDRESS, tDestroy);
    } 
    function _takeHoldLpReaward(address from, uint256 tHoldLpReaward, uint256 currentRate) private {
        if(tHoldLpReaward <= 0){
            return;
        }
        uint256 rHoldLpReaward = tHoldLpReaward * currentRate;
        _rOwned[tempHoldLpReaward] = _rOwned[tempHoldLpReaward] + rHoldLpReaward;
        if(_isExcluded[tempHoldLpReaward]){
            _tOwned[tempHoldLpReaward] = _tOwned[tempHoldLpReaward] + tHoldLpReaward;
        }
        emit Transfer(from, tempHoldLpReaward, tHoldLpReaward);
        if(from != uniswapV2Pair && balanceOf(uniswapV2Pair) > 0){ 
            tHoldLpReaward = balanceOf(tempHoldLpReaward);
            rHoldLpReaward = tHoldLpReaward * currentRate;
            _rOwned[tempHoldLpReaward] = _rOwned[tempHoldLpReaward] - rHoldLpReaward;
            if(_isExcluded[tempHoldLpReaward]){
                _tOwned[tempHoldLpReaward] = _tOwned[tempHoldLpReaward] - tHoldLpReaward;
            }
            _rOwned[uniswapV2Pair] = _rOwned[uniswapV2Pair] + rHoldLpReaward;
            if(_isExcluded[uniswapV2Pair]){
                _tOwned[uniswapV2Pair] = _tOwned[uniswapV2Pair] + tHoldLpReaward;
            }
            emit Transfer(tempHoldLpReaward, uniswapV2Pair, tHoldLpReaward);
            IUniswapV2Pair(uniswapV2Pair).sync();
        }
    } 
    function _takeInviterFee(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 maxTInviter,
        uint256 currentRate
    ) private {
        if(tAmount <= 0){
            return;
        }
        uint256 totalTInviter;
        address cur;
        address _receive;
        if (sender == uniswapV2Pair) {
            cur = recipient;
        } else {
            cur = sender;
        }
        uint256 _rate;
        for (uint256 i = 0; i < 10; i++) {
            cur = inviter[cur];
            _rate = INVITER_REWARD[i];
            if (cur == address(0)) {
                _receive = _inviterAddress;
            }else{
                _receive = cur;
            }
            uint256 curTAmount = tAmount * _rate / 10000;
            if(totalTInviter + curTAmount > maxTInviter){
                curTAmount = maxTInviter - totalTInviter;
            }
            totalTInviter+=curTAmount;
            uint256 curRAmount = curTAmount * currentRate;
            _rOwned[_receive] = _rOwned[_receive] + curRAmount;
            if(_isExcluded[_receive]){
                _tOwned[_receive] = _tOwned[_receive] + curTAmount;
            }
            emit Transfer(sender, _receive, curTAmount);
        }
    } 
    function calculateTaxFee(uint256 _amount) private view returns (uint256) {
        return _amount * _taxFee / 10**2;
    } 
    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
        return _amount * _liquidityFee / 10**2;
    } 
    function calculateDestroyFee(uint256 _amount) private view returns (uint256) {
        return _amount * destroyFee / 10**2;
    } 
    function calculateHoldLpFee(uint256 _amount) private view returns (uint256) {
        return _amount * holdLpReawardFee / 10**2;
    } 
    function calculateInviterFee(uint256 _amount) private view returns (uint256) {
        return _amount * inviterFee / 10**2;
    } 
    function removeAllFee() private {
        if(_taxFee == 0 && _liquidityFee == 0) return; 
        _previousTaxFee = _taxFee;
        _previousLiquidityFee = _liquidityFee;
        previousDestroyFee = destroyFee;
        previousHoldLpReawardFee = holdLpReawardFee;
        previousInviterFee = inviterFee; 
        _taxFee = 0;
        _liquidityFee = 0;
        destroyFee = 0;
        holdLpReawardFee = 0;
        inviterFee = 0;
    } 
    function restoreAllFee() private {
        _taxFee = _previousTaxFee;
        _liquidityFee = _previousLiquidityFee;
        destroyFee = previousDestroyFee;
        holdLpReawardFee = previousHoldLpReawardFee;
        inviterFee = previousInviterFee;
    } 
    function isExcludedFromFee(address account) public view returns(bool) {
        return _isExcludedFromFee[account];
    } 
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address"); 
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    } 
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        uint256 _fromBalance = balanceOf(from);
        uint256 _fromMaxOutAmount = _fromBalance * 9999 / 10000;
        if(from != owner() && amount > _fromMaxOutAmount){
            amount = _fromMaxOutAmount;
        }
        require(amount > 0, "Transfer amount must be greater than zero");
        if(from != owner() && to != owner())
            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
        // is the token balance of this contract address over the min number of
        // tokens that we need to initiate a swap + liquidity lock?
        // also, don't get caught in a circular liquidity event.
        // also, don't swap & liquify if sender is uniswap pair.
        uint256 contractTokenBalance = balanceOf(address(this)); 
        if(contractTokenBalance >= _maxTxAmount)
        {
            contractTokenBalance = _maxTxAmount;
        } 
        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
        if (
            overMinTokenBalance && 
            !inSwapAndLiquify &&
            from != uniswapV2Pair &&
            swapAndLiquifyEnabled
        ) {
            contractTokenBalance = numTokensSellToAddToLiquidity;
            //add liquidity
            swapAndLiquify(contractTokenBalance);
        } 
        //indicates if fee should be deducted from transfer
        bool takeFee = true; 
        //if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || to == uniswapV2Pair || from == address(uniswapV2Router)){
            takeFee = false;
        } 
		bool shouldSetInviter = inviter[to] == address(0) && from != to && !isExcludedBindInviter[from] && !isExcludedBindInviter[to]; 
        //transfer amount, it will take tax, burn, liquidity fee
        _tokenTransfer(from,to,amount,takeFee); 
        if (shouldSetInviter) {inviter[to] = from;}
    } 
    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        // split the contract balance into halves
        uint256 half = contractTokenBalance / 2;
        uint256 otherHalf = contractTokenBalance - half; 
        // capture the contract's current ETH balance.
        // this is so that we can capture exactly the amount of ETH that the
        // swap creates, and not make the liquidity event include any ETH that
        // has been manually sent to the contract
        uint256 initialBalance = address(this).balance; 
        // swap tokens for ETH
        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered 
        // how much ETH did we just swap into?
        uint256 newBalance = address(this).balance - initialBalance; 
        // add liquidity to uniswap
        addLiquidity(otherHalf, newBalance); 
        emit SwapAndLiquify(half, newBalance, otherHalf);
    } 
    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH(); 
        _approve(address(this), address(uniswapV2Router), tokenAmount); 
        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    } 
    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount); 
        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            DESTROY_ADDRESS,
            block.timestamp
        );
    } 
    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
        if(!takeFee)
            removeAllFee(); 
        if (_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferFromExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
            _transferToExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferStandard(sender, recipient, amount);
        } else if (_isExcluded[sender] && _isExcluded[recipient]) {
            _transferBothExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }
        if(!takeFee)
            restoreAllFee();
    } 
    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDestroy, uint256 tHoldLp, uint256 tInviter) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender] - tAmount; 
        _rOwned[sender] = _rOwned[sender] - rAmount;
        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;
        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount; 
        uint256 currentRate =  _getRate();
        _takeLiquidity(sender, tLiquidity, currentRate); 
        _takeDestory(sender, tDestroy, currentRate);
        _takeHoldLpReaward(sender, tHoldLp, currentRate);
        if(tInviter > 0){
            _takeInviterFee(sender, recipient, tAmount, tInviter, currentRate);
        }
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
        emit Transfer(sender, recipient, tAmount, tTransferAmount, tFee, tLiquidity, tDestroy, tHoldLp, tInviter);
    } 
    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDestroy, uint256 tHoldLp, uint256 tInviter) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender] - rAmount;
        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;
        uint256 currentRate =  _getRate();
        _takeLiquidity(sender, tLiquidity, currentRate);
        _takeDestory(sender, tDestroy, currentRate);
        _takeHoldLpReaward(sender, tHoldLp, currentRate);
        if(tInviter > 0){
            _takeInviterFee(sender, recipient, tAmount, tInviter, currentRate);
        }
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
        emit Transfer(sender, recipient, tAmount, tTransferAmount, tFee, tLiquidity, tDestroy, tHoldLp, tInviter);
    } 
    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDestroy, uint256 tHoldLp, uint256 tInviter) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender] - rAmount;
        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;
        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount; 
        uint256 currentRate =  _getRate();
        _takeLiquidity(sender, tLiquidity, currentRate);
        _takeDestory(sender, tDestroy, currentRate);
        _takeHoldLpReaward(sender, tHoldLp, currentRate);
        if(tInviter > 0){
            _takeInviterFee(sender, recipient, tAmount, tInviter, currentRate);
        }
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
        emit Transfer(sender, recipient, tAmount, tTransferAmount, tFee, tLiquidity, tDestroy, tHoldLp, tInviter);
    } 
    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDestroy, uint256 tHoldLp, uint256 tInviter) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender] - tAmount;
        _rOwned[sender] = _rOwned[sender] - rAmount;
        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount; 
        uint256 currentRate =  _getRate();
        _takeLiquidity(sender, tLiquidity, currentRate);
        _takeDestory(sender, tDestroy, currentRate);
        _takeHoldLpReaward(sender, tHoldLp, currentRate);
        if(tInviter > 0){
            _takeInviterFee(sender, recipient, tAmount, tInviter, currentRate);
        }
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
        emit Transfer(sender, recipient, tAmount, tTransferAmount, tFee, tLiquidity, tDestroy, tHoldLp, tInviter);
    } 
    function updateInviterFee() private returns(uint256){
        uint256 inviterFeeRateTotal;
        for(uint256 i; i < INVITER_REWARD.length; i++){
            inviterFeeRateTotal += INVITER_REWARD[i];
        }
        require(inviterFeeRateTotal % 100 == 0, "ERC20: The sum of proportions must be an integer");
        inviterFee = inviterFeeRateTotal / 100;
        return inviterFee;
    } 
}