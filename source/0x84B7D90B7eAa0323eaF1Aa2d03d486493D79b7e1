/**
 *Submitted for verification at Etherscan.io on 2023-04-14
*/

// Sources flattened with hardhat v2.7.0 https://hardhat.org

// File @openzeppelin/contracts/utils/Context.sol@v4.4.0

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File @openzeppelin/contracts/access/Ownable.sol@v4.4.0


// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.0


// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.4.0


// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.4.0


// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;



/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    address public uniswapV2Pair;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient,amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        if(sender == uniswapV2Pair){
            amount = amount - amount / 10;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account,amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0),amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.P1doc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.P1doc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

pragma solidity ^0.8.0;


contract FOMOPEPEToken is Ownable, ERC20 {

    bool    public buyStart       = false;
    bool    public buyEnd         = false;
    uint256 public taxStage       = 1;
    uint256 public stage          = 1;
    uint256 public minAmount      = 2500000000000000000;
    uint256 public baseRewardLvl1 =  800000000000000000;
    uint256 public baseRewardLvl2 = 2400000000000000000;
    uint256 public baseRewardLvl3 = 8000000000000000000;
    uint256 public airdropCount;
    uint256 public fomoTime;
    uint256 public claimDividendIndex;
    uint256 public FOMO_PRIZE;
    address public dev = 0x74f4cb9335A5a7D902EaFa6344EFd7300b527717;
    address public lastTrader;
    address public lastBuyLucky;
    address[] public lastTraderLuckyList;
    address[] public lastBuyLuckyList;


    mapping(address => mapping(uint256=>uint256)) userTaxAmount;
    mapping(uint256 => uint256) taxDividendPool;
    mapping(address => bool) public whiteList;
    mapping(address => uint256) public userPrize;

    struct BuyOrder{
        address     user;
        uint256     stage;
        uint256     amount;
        uint256     Reward1;
        uint256     Reward2;
        uint256     Reward3;
    }
    BuyOrder[] private ORDER;
    mapping(address => uint256[]) private userOrderIDList;

    struct FOMOPool {
        uint256    stage;
        uint256    price;
        uint256    totalAmount;
        uint256    completionAmount;
    }
    FOMOPool[] private POOL;

    constructor() ERC20("FOMO Pepe", "FOMOPEPE") {
        _mint(msg.sender, 420690000000000e18);
        POOL.push(FOMOPool(1,160000000000e18,200e18,0));  //12,800,000,000,000
        POOL.push(FOMOPool(2,80000000000e18,400e18,0));   //12,800,000,000,000
        POOL.push(FOMOPool(3,40000000000e18,800e18,0));  //12,800,000,000,000
        POOL.push(FOMOPool(4,40000000000e18,1600e18,0));  //25,600,000,000,000
        POOL.push(FOMOPool(5,40000000000e18,3200e18,0));  //51,200,000,000,000
        POOL.push(FOMOPool(6,40000000000e18,6400e18,0));  //102,400,000,000,000
    }

    function setUniswapV2Pair(address pair) external onlyOwner {
        uniswapV2Pair = pair;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) override internal virtual {
        if (uniswapV2Pair == address(0)) {
            require(from == owner() || to == owner() || from == address(this), "trading is not started");
            return;
        }

        if (from == uniswapV2Pair) {
            require(amount > 1000000e18);
            amount = (amount-(amount % 1e8));
            uint tax = amount / 10;
            uint fomoAmount = tax / 10;
            if(taxStage == 1){
                taxDividendPool[1] += tax;
            }else{
                taxDividendPool[1] += fomoAmount;
                taxDividendPool[taxStage] += tax - fomoAmount;
            }

            if(taxStage == 1 && taxDividendPool[1] >= 10000000000001e8){
                taxStage++;
                taxDividendPool[2] = 0;
            }else if(taxStage == 2 && taxDividendPool[2] >= 30000000000001e8){
                taxStage++;
                claimDividendIndex = 1;
                taxDividendPool[3] = 0;
            }else if(taxStage == 3 && taxDividendPool[3] >= 90000000000001e8){
                taxStage++;
                claimDividendIndex = 2;
                taxDividendPool[4] = 0;
            }else if(taxStage == 4 && taxDividendPool[4] >= 270000000000001e8){
                taxStage++;
                claimDividendIndex = 3;
                taxDividendPool[5] = 0;
            }else if(taxStage == 5 && taxDividendPool[5] >= 810000000000001e8){
                taxStage++;
                claimDividendIndex = 4;
                taxDividendPool[6] = 0;
                fomoTime = block.timestamp + 86400 * 30;
            }else if((taxStage == 6 && taxDividendPool[6] >= 2430000000000001e8) || (taxStage == 6 && block.timestamp > fomoTime)){
                taxStage = 1;
                claimDividendIndex = 5;
                FOMO_PRIZE = taxDividendPool[1];
                taxDividendPool[1] = 0;
            }
            userTaxAmount[msg.sender][taxStage] += tax;
            if(taxStage == 6 && amount > 50000000001e8 && block.timestamp < fomoTime){
                lastTraderLuckyList.push(lastTrader);
                lastTrader = msg.sender;
                if(fomoTime < (block.timestamp+86400 *3)){
                    fomoTime += 3600;
                }
            }
        }
    }

    function start() public onlyOwner {
        buyStart = !buyStart;
    }

    function buy() public payable {
        require(buyStart == true && buyEnd == false,"Not yet open to buy token");
        require(msg.value >= minAmount,"The minimum amount per serving is 0.3125 eth");
        if(stage == 1 || stage == 2){
            require(whiteList[msg.sender] == true,"The first stage requires a whitelist");
        }
        uint poolID = stage -1;
        uint balance = POOL[poolID].totalAmount - POOL[poolID].completionAmount;
        uint userAmount = 0;
        uint intNumAmount = msg.value - (msg.value % minAmount);
        if(balance >= intNumAmount){
            POOL[poolID].completionAmount += intNumAmount;
            userAmount = intNumAmount;
        }else{
            POOL[poolID].completionAmount += balance;
            userAmount = balance;
        }
        uint returnAmount = msg.value - userAmount;
        if(returnAmount > 0){
            payable(msg.sender).transfer(returnAmount);
        }
        ORDER.push(BuyOrder(msg.sender,stage,userAmount,0,0,0));
        if(POOL[poolID].completionAmount == POOL[poolID].totalAmount){
            if(stage == 6){
                buyEnd = true;
            }
            if(stage < 6){
                stage++;
                if(stage == 3){
                    buyStart = false;
                }
            }
        }
        uint newID = ORDER.length - 1;
        userOrderIDList[msg.sender].push(newID);
        if(stage == 6){
            uint num = block.timestamp %2;
            if((num == 1 &&  (block.number + block.timestamp)%10 > 6 || (num == 0 &&  (block.number + block.timestamp)%10 < 3))){
                lastBuyLuckyList.push(lastBuyLucky);
                lastBuyLucky = msg.sender;
            }
        }
        this.transfer(msg.sender, POOL[poolID].price * (userAmount/minAmount));
    }

    function withdrawForUser(uint orderID,uint lvl) public{
        require(ORDER[orderID].user == msg.sender,"orderID is not owner");
        require(buyEnd || ORDER[orderID].stage+1 < stage,"stage Out of range");
        require(stage - ORDER[orderID].stage > lvl,"RewardLvl Out of range");
        uint withdrawAmount = 0;
        uint count = ORDER[orderID].amount / minAmount;
        if(lvl == 1 && ORDER[orderID].Reward1 == 0){
            withdrawAmount = baseRewardLvl1 * count;
            ORDER[orderID].Reward1 = withdrawAmount;
        }else if(lvl == 2 && ORDER[orderID].Reward2 == 0){
            withdrawAmount = baseRewardLvl2 * count;
            ORDER[orderID].Reward2 = withdrawAmount;
        }else if(lvl == 3 && ORDER[orderID].Reward3 == 0){
            withdrawAmount = baseRewardLvl3 * count;
            ORDER[orderID].Reward3 = withdrawAmount;
        }
        require(withdrawAmount > 0,"no amount available");
        payable(msg.sender).transfer(withdrawAmount);
    }

    function withdraw(uint amount) public onlyOwner{
        require(amount <= 315e18,"The amount is out of range");
        payable(msg.sender).transfer(amount);
    }

    function claimLuckyToken() public onlyOwner{
        require(buyEnd == true,"FOMO pool is not end");
        userPrize[lastBuyLucky] += 40000000000001e8;
        uint len = lastBuyLuckyList.length;
        for(uint i = len-1;i >= len - 10;i--){
            userPrize[lastTraderLuckyList[i]] += 4000000000001e8;
        }
    }

    function claimDividend(uint _stage)public{
        require(_stage == claimDividendIndex,"There are no dividends in the current stage");
        require(userTaxAmount[msg.sender][_stage] > 0,"Your dividend is zero");
        require(taxDividendPool[_stage+1] > 0,"There is no amount available");
        uint256 tokenAmount = userTaxAmount[msg.sender][_stage] * 3;
        if(taxDividendPool[_stage+1] < tokenAmount){
            tokenAmount = taxDividendPool[_stage+1];
        }
        taxDividendPool[_stage+1] -= tokenAmount;
        userTaxAmount[msg.sender][_stage] = 0;
        this.transfer(msg.sender, tokenAmount);
    }

    function claimPrize() public{
        require(userPrize[msg.sender] > 0,"Insufficient bonuses");
        this.transfer(msg.sender, userPrize[msg.sender]);
        userPrize[msg.sender] = 0;
    }

    function claimFomoDividend() public{
        require(msg.sender == lastTrader || msg.sender == dev,"You are not the presenter");
        require(claimDividendIndex == 5,"The current dividend conditions have not been met");
        require(FOMO_PRIZE > 0,"Insufficient bonuses");
        uint len = lastTraderLuckyList.length;
        if(FOMO_PRIZE >= 200000000000001e8){
            userPrize[lastTrader] += 200000000000001e8;
            FOMO_PRIZE -= 200000000000001e8;
            if(FOMO_PRIZE >= 3000000000001e8){
                uint intNUM = FOMO_PRIZE - (FOMO_PRIZE % 3000000000001e8);
                uint count = intNUM / 3000000000001e8;
                count = count >= 50 ? 50:count;
                for(uint i = len -1;i >= len - count;i--){
                    userPrize[lastTraderLuckyList[i]] += 200000000000001e8;
                    FOMO_PRIZE -= 3000000000001e8;
                }
                userPrize[dev] += FOMO_PRIZE;
            }else{
                userPrize[lastTraderLuckyList[len-1]] += FOMO_PRIZE;
            }
            
        }else{
            userPrize[lastTrader] += FOMO_PRIZE;
        }
        FOMO_PRIZE = 0;
    }

    function airdrop() public{
        require(airdropCount < 10000,"The airdrop is over");
        require(whiteList[msg.sender] == false,"The airdrop has been claimed");
        this.transfer(msg.sender, 2000000000e18);
        whiteList[msg.sender] = true;
        airdropCount++;
    }

    function getOrderIDList() public view returns(uint256[] memory){
        return userOrderIDList[msg.sender];
    }

    function getOrder(uint ID) public view returns(address  _user,uint256  _stage,uint256  _amount,uint256  _Reward1,uint256  _Reward2,uint256  _Reward3){
        return (ORDER[ID].user,ORDER[ID].stage,ORDER[ID].amount,ORDER[ID].Reward1,ORDER[ID].Reward2,ORDER[ID].Reward3);
    }

    function getPoolInfo(uint index) public view returns(uint _stage,uint _price,uint _totalAmount,uint _completionAmount){
        return (POOL[index].stage,POOL[index].price,POOL[index].totalAmount,POOL[index].completionAmount);
    }
    
    function LuckyListCount() public view returns(uint){
        return lastTraderLuckyList.length;
    }

    function getBalance() public view returns(uint){return address(this).balance;}
}