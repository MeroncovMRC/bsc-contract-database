// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface BojiToken {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract BojiAirdrop {
    BojiToken public bojiToken;
    uint256 public maxClaimCount;
    uint256 public maxClaimableTokens;
    uint256 public totalClaimedTokens;
    uint256 public claimedCount;
    address public owner;
    mapping(address => bool) public hasClaimed;
    uint256 public endDate;
     uint256 public constant FirstrewardAmount = 3418767 * 10**9;
     uint256 public constant secondrewardAmount = 2564075 * 10**9;
    uint256 public constant ThirdrewardAmount = 1709384 * 10**9;
    uint256 public constant ForthrewardAmount = 1282037 * 10**9;
    uint256 public constant FifthrewardAmount = 1025630 * 10**9;
    uint256 public constant SixthrewardAmount = 854692 * 10**9;
    
    event TokensClaimed(address indexed recipient, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can use this.");
        _;
    }
    constructor(address _bojiToken, uint256 _maxClaimCount, uint256 _maxClaimableTokens, uint256 _endDate) {
        bojiToken = BojiToken(_bojiToken);
        maxClaimCount = _maxClaimCount;
        maxClaimableTokens = _maxClaimableTokens * 10**9;
        endDate = _endDate;
        owner = msg.sender;
    }
    
    function claimTokens() external {
        require(!hasClaimed[msg.sender], "You have already claimed your tokens.");
        require(totalClaimedTokens < maxClaimableTokens, "All tokens have been claimed.");
        require(block.timestamp <= endDate, "Airdrop has ended.");
        require(claimedCount < maxClaimCount, "Claim limit reached.");
        
        hasClaimed[msg.sender] = true;
          if(claimedCount < 100){
            totalClaimedTokens += FirstrewardAmount;

        }
        else if(claimedCount < 999){
            totalClaimedTokens += secondrewardAmount;

        }
        else if(claimedCount < 2999){
                totalClaimedTokens += ThirdrewardAmount;  

        }
        else if(claimedCount < 4999){
                totalClaimedTokens += ForthrewardAmount;  


        }
        else if(claimedCount < 7999){
                totalClaimedTokens += FifthrewardAmount;  


        }
        else if(claimedCount < 10000){
                totalClaimedTokens += SixthrewardAmount;  


        }

        claimedCount++;
        
        require(totalClaimedTokens <= maxClaimableTokens, "All tokens have been claimed.");
        if(claimedCount <= 1){
        bojiToken.transfer(msg.sender, FirstrewardAmount);
        emit TokensClaimed(msg.sender, FirstrewardAmount);

        }
        else if(claimedCount <= 2){
        bojiToken.transfer(msg.sender, secondrewardAmount);
        emit TokensClaimed(msg.sender, secondrewardAmount);

        }
              else if(claimedCount <= 3){
        bojiToken.transfer(msg.sender, ThirdrewardAmount);
        emit TokensClaimed(msg.sender, ThirdrewardAmount);

        }
              else if(claimedCount <= 4){
        bojiToken.transfer(msg.sender, ForthrewardAmount);
        emit TokensClaimed(msg.sender, ForthrewardAmount);

        }
              else if(claimedCount <= 5){
        bojiToken.transfer(msg.sender, FifthrewardAmount);
        emit TokensClaimed(msg.sender, FifthrewardAmount);

        }
              else if(claimedCount <= 6){
        bojiToken.transfer(msg.sender, SixthrewardAmount);
        emit TokensClaimed(msg.sender, SixthrewardAmount);

        }

    }
    
    function remainingTokens() external view returns (uint256) {
        return maxClaimableTokens - totalClaimedTokens;
    }

    function withdrawTokens() external onlyOwner {
    require(0 < bojiToken.balanceOf(address(this)), "Insufficient contract token balance.");
    bojiToken.transfer(owner, bojiToken.balanceOf(address(this)));
}

}