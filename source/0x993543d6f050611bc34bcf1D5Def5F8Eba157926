// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor() {
        _transferOwnership(_msgSender());
    }    
    modifier onlyOwner() {
        _checkOwner();
        _;
    }    
    function owner() public view virtual returns (address) {
        return _owner;
    }    
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IBEP20 {    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);    
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
}

interface IBEP20Metadata is IBEP20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

contract ERC20 is Context, IBEP20, IBEP20Metadata {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }
    function name() public view virtual override returns (string memory) {
        return _name;
    }
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }
        return true;
    }
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        _beforeTransfer(from, to, amount);
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;
        emit Transfer(from, to, amount);
        _afterTransfer(from, to, amount);
    }
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");
        _beforeTransfer(address(0), account, amount);
        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
        _afterTransfer(address(0), account, amount);
    }
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        _beforeTransfer(account, address(0), amount);
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;
        emit Transfer(account, address(0), amount);
        _afterTransfer(account, address(0), amount);
    }
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }
    function _beforeTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
    function _afterTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

contract KaToken is ERC20, Ownable {
    using SafeMath for uint256;  
    address public authorizeRole;
    bool public transfersEnabled;
    mapping(address => uint256) public lockedBalanceOf;
    event TokenLocked(address indexed account, uint256 amount);
    event TokenUnlocked(address indexed account, uint256 amount);
    event TransfersEnabled(bool newStatus);
    event AuthorizeRoleAssigned(address authorizeRole);
    mapping(address => uint256) public userLockTimeLastUpdated;
    uint256 public secondOfDay;
    mapping(address => uint256) public countLockTransOfUser;
    uint256 public oneDollar = 1000000000000000000; // 1 Dollar
    constructor() ERC20("KaToken", "KATOK") {
        _mint(msg.sender, 10000000000 * 10 ** decimals());
        secondOfDay = 60;
    }
    modifier transfersAllowed {
        require(transfersEnabled, "Transfers not available");
        _;
    }
    modifier onlyAuthorized {
        require(_msgSender() == owner() || _msgSender() == authorizeRole, "Not authorized");
        _;
    }
    function unlockPercentDaily(address _wallet) public onlyAuthorized {
        uint256 percentReceive = lockedBalanceOf[_wallet].div(20);
        require(percentReceive > 0 && lockedBalanceOf[_wallet] > 0 && lockedBalanceOf[_wallet] >= percentReceive, "Not enough unlocked token balance");
        if(block.timestamp - userLockTimeLastUpdated[_wallet] >= secondOfDay) {
            lockedBalanceOf[_wallet] = lockedBalanceOf[_wallet].sub(percentReceive);
            userLockTimeLastUpdated[_wallet] = userLockTimeLastUpdated[_wallet] = block.timestamp;
            countLockTransOfUser[_wallet] = countLockTransOfUser[_wallet].add(1);
            emit TokenUnlocked(_wallet, percentReceive);
        }
    }
    function unlockPercentDailys(address[] memory _wallet) public onlyAuthorized {
        require(_wallet.length > 0, "Input lengths do not match");
        for (uint256 i = 0; i < _wallet.length; i++) {
            uint256 percentReceive = lockedBalanceOf[_wallet[i]].div(20);
            if (percentReceive > 0 && lockedBalanceOf[_wallet[i]] > 0 && lockedBalanceOf[_wallet[i]] >= percentReceive) {
                lockedBalanceOf[_wallet[i]] = lockedBalanceOf[_wallet[i]].sub(percentReceive);
                userLockTimeLastUpdated[_wallet[i]] = userLockTimeLastUpdated[_wallet[i]] = block.timestamp;
                countLockTransOfUser[_wallet[i]] = countLockTransOfUser[_wallet[i]].add(1);
                emit TokenUnlocked(_wallet[i], percentReceive);
            }            
        }
    }
    function timetemp() public view returns (uint256) {
        return block.timestamp;
    }
    function unlockedBalanceOf(address account) public view returns (uint256) {
        return balanceOf(account).sub(lockedBalanceOf[account]);
    }
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        require(unlockedBalanceOf(_msgSender()) >= amount, "Not enough unlocked token balance");
        return super.transfer(to, amount);
    }
    function lockTransfer(address account, uint256 amount) public onlyAuthorized returns (bool) {
        require(amount > 0 && unlockedBalanceOf(account) >= amount, "Not enough unlocked tokens");
        lockedBalanceOf[account] = lockedBalanceOf[account].add(amount);
        emit TokenLocked(account, amount);
        return true;
    }
    function unlockTransfer(address account, uint256 amount) public onlyAuthorized returns (bool) {
        require(amount > 0 && lockedBalanceOf[account] >= amount, "Not enough locked tokens");
        lockedBalanceOf[account] = lockedBalanceOf[account].sub(amount);
        emit TokenUnlocked(account, amount);
        return true;
    }
    function unlockTransfers(address[] memory accounts, uint256 amount) public onlyAuthorized returns (bool) {
        require(amount > 0 && accounts.length > 0, "Input lengths do not match");
        for (uint256 i = 0; i < accounts.length; i++) {
            if (lockedBalanceOf[accounts[i]] >= amount) {
                lockedBalanceOf[accounts[i]] = lockedBalanceOf[accounts[i]].sub(amount);
                emit TokenUnlocked(accounts[i], amount);
            }
        }
        return true;
    }
    function withdraw(address account) public onlyAuthorized returns (bool) {
        require(lockedBalanceOf[account] > 0, "Not enough locked tokens");
        uint256 amount = lockedBalanceOf[account];
        lockedBalanceOf[account] = lockedBalanceOf[account].sub(amount);
        emit TokenUnlocked(account, amount);
        return true;
    }
    function withdraws(address[] memory accounts) public onlyAuthorized returns (bool) {
        require(accounts.length > 0, "Input lengths do not match");
        for (uint256 i = 0; i < accounts.length; i++) {
            uint256 amount = lockedBalanceOf[accounts[i]];
            if (lockedBalanceOf[accounts[i]] > 0) {
                lockedBalanceOf[accounts[i]] = lockedBalanceOf[accounts[i]].sub(amount);
                emit TokenUnlocked(accounts[i], amount);
            }
        }
        return true;
    }
    function transfers(
        address[] memory recipients,
        uint256[] memory values
    ) public transfersAllowed returns (bool) {
        require(recipients.length == values.length, "Input lengths do not match");
        for (uint256 i = 0; i < recipients.length; i++) {
            require(values[i] > 0 && unlockedBalanceOf(recipients[i]) >= values[i], "Not enough unlocked token balance");
            transfer(recipients[i], values[i]);
        }
        return true;
    }  
    function transferLock(address recipient, uint256 amount) public onlyAuthorized returns (bool) {
        require(amount > 0 && unlockedBalanceOf(_msgSender()) >= amount, "Not enough unlocked token balance");
        super.transfer(recipient, amount);
        lockedBalanceOf[recipient] = lockedBalanceOf[recipient].add(amount);
        emit TokenLocked(recipient, amount);
        return true;
    }
    function transferFrom(address from,
        address to,
        uint256 amount) public returns (bool) {
        require(amount > 0 && unlockedBalanceOf(from) >= amount, "Not enough unlocked token balance of sender");
        return transferFrom(from, to, amount);
    }
    function setSecondOfDay(uint256 _value) public onlyAuthorized {
        secondOfDay = _value;
    }
}