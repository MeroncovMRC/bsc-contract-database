// SPDX-License-Identifier: GPL-3.0
// File: @openzeppelin/contracts/utils/Strings.sol

pragma solidity ^0.8.0;


// File: @openzeppelin/contracts/utils/Context.sol
/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

/**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol



/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract GameAccess is Ownable {
    //$ERO Token
    IERC20 public Token;

    //takes a gameId to actual game
    mapping(uint256 => Game) private IdtoGame;

    //checks if address has access to certain game
    mapping(uint256 => mapping(address => uint256)) private access;

    uint256 private subscriptionTime = 2592000; //30 days

    //stores the game ids that exist
    mapping(uint => bool) private gameIds;

    // interface to marketplace item
    struct Game {
        uint256 gameId;
        uint256 price;
        address payoutWallet;
        uint256 tax;
        bool subscription;
    }

    constructor () {
        Token = IERC20(0x22cbd249e6c68712dA6767f1077b28C87745FA6D); //0x22cbd249e6c68712dA6767f1077b28C87745FA6D
    }

    //set ERC20
    function setTokenInterface(address newInterface) public onlyOwner {
        Token = IERC20(newInterface);
    }

    //see how much bnb the contract holds
    function contractBNBBalance() public view returns(uint256) {
        return address(this).balance;
    }

    //see how much ERO the contract holds
    function contractEROBalance() public view returns(uint256) {
        return Token.balanceOf(address(this));
    }

    //take out bnb from contracts
    function withdrawBNB() public onlyOwner {
        (bool sent, ) = payable(msg.sender).call{value: contractBNBBalance()}("");
        require(sent, "Failed to send Ether");
    }

    //take out ERO from contract
    function withdrawERO() public onlyOwner {
        Token.transferFrom(address(this), msg.sender, contractEROBalance());
    }

    //function for the owner to add a new game
    function addGame(uint gameId, uint256 price, address payoutWallet, uint256 tax, bool subscription) public onlyOwner {
        require(!gameIds[gameId], "Game Id Already Exists!");
        require(tax <= 100, "Cannot have higher than a 100% tax");
        require(payoutWallet != address(0), "Invalid Payout Address!");

        IdtoGame[gameId] = Game(gameId, price, payoutWallet, tax, subscription);
        gameIds[gameId] = true;
    }

    //function for the owner to add a new game
    function updateGame(uint gameId, uint256 price, address payoutWallet, uint256 tax, bool subscription) public onlyOwner {
        require(gameIds[gameId], "Game Id does not exist!");
        require(tax <= 100, "Cannot have higher than a 100% tax");
        require(payoutWallet != address(0), "Invalid Payout Address!");

        IdtoGame[gameId] = Game(gameId, price, payoutWallet, tax, subscription);
    }

    //delete a game
    function deleteGame(uint gameId) public onlyOwner {
        require(gameIds[gameId], "Game Id does not exist!");
        gameIds[gameId] = false;
    }

    //get the game that corresponds to a certain gameId
    function fetchGame(uint256 gameId) public view returns(Game memory) {
        require(gameIds[gameId], "Game Id does not exist!");
        return IdtoGame[gameId];
    }

    //pay for access of a certain game
    function buyAccess(uint256 gameId) public {
        require(gameIds[gameId], "Game Id does not exist!");
        Game memory game = IdtoGame[gameId];

        require(Token.balanceOf(msg.sender) >= game.price, "Insufficient funds to pay for Game Access!");
        if (game.tax > 0) {
            uint256 payment1 = (game.price * game.tax) / 100;
            Token.transferFrom(msg.sender, address(this), payment1);
            Token.transferFrom(msg.sender, game.payoutWallet, game.price - payment1);
        }
        else {
            Token.transferFrom(msg.sender, game.payoutWallet, game.price);
        }
        


        access[gameId][msg.sender] = block.timestamp + subscriptionTime;

        
    }

    //see if specific address has access to specific game
    function hasAccess(address who, uint256 gameId) public view returns(bool) {
        require(who != address(0), "Invalid Address!");
        require(gameIds[gameId], "Game Id does not exist!");

        Game memory game = IdtoGame[gameId];
        if (game.subscription) {
            return access[gameId][who] > block.timestamp || who == owner();
        }
        else {
            return access[gameId][who] > 0 || who == owner();
        }
        
    }

    //take away game acces for specific wallet
    function revokeAccess(uint gameId, address revokedWallet) public onlyOwner {
        require(revokedWallet != address(0), "Invalid Address!");
        require(gameIds[gameId], "Game Id does not exist!");

        access[gameId][revokedWallet] = 0;
    }

    //check if a certain id exists
    function gameIdExists(uint gameId) public view returns(bool) {
        return gameIds[gameId];
    }

}