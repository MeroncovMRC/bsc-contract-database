{"AntiSniper.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./Libraries.sol\";\r\nimport \"./Interfaces.sol\";\r\nimport \"./BaseErc20.sol\";\r\n\r\ninterface IPinkAntiBot {\r\n  function setTokenOwner(address owner) external;\r\n  function onPreTransferCheck(address from, address to, uint256 amount) external;\r\n}\r\n\r\nabstract contract AntiSniper is BaseErc20 {\r\n    using SafeMath for uint256;\r\n    \r\n    IPinkAntiBot public pinkAntiBot;\r\n    bool private pinkAntiBotConfigured;\r\n\r\n    bool public enableSniperBlocking;\r\n    bool public enableBlockLogProtection;\r\n    bool public enableHighTaxCountdown;\r\n    bool public enablePinkAntiBot;\r\n    //bool public enableHighGasProtection;\r\n    \r\n    uint256 public maxSellPercentage;\r\n    uint256 public maxHoldPercentage;\r\n\r\n    uint256 public launchTime;\r\n    uint256 public snipersCaught;\r\n    \r\n    mapping (address =\u003e bool) public isSniper;\r\n    mapping (address =\u003e bool) public isNeverSniper;\r\n    mapping (address =\u003e uint256) public transactionBlockLog;\r\n    \r\n    // Overrides\r\n    \r\n    function launch() override virtual public onlyOwner {\r\n        super.launch();\r\n        launchTime = block.timestamp;\r\n    }\r\n    \r\n    function preTransfer(address from, address to, uint256 value) override virtual internal {\r\n        super.preTransfer(from, to, value);\r\n        require(isSniper[msg.sender] == false || enableSniperBlocking == false, \"sniper rejected\");\r\n        \r\n        if (launched \u0026\u0026 isAlwaysExempt(to) == false \u0026\u0026 from != owner \u0026\u0026 isNeverSniper[from] == false \u0026\u0026 isNeverSniper[to] == false) {\r\n            if(enableBlockLogProtection) {\r\n                if (transactionBlockLog[to] == block.number) {\r\n                    isSniper[to] = true;\r\n                    snipersCaught ++;\r\n                }\r\n                if (transactionBlockLog[from] == block.number) {\r\n                    isSniper[from] = true;\r\n                    snipersCaught ++;\r\n                }\r\n                if (isAlwaysExempt(to) == false) {\r\n                    transactionBlockLog[to] = block.number;\r\n                }\r\n                if (isAlwaysExempt(from) == false) {\r\n                    transactionBlockLog[from] = block.number;\r\n                }\r\n            }\r\n            \r\n            if (enablePinkAntiBot) {\r\n                pinkAntiBot.onPreTransferCheck(from, to, value);\r\n            }\r\n            \r\n            if (maxHoldPercentage \u003e 0) {\r\n                require (_balances[to].add(value) \u003c= maxHoldAmount(), \"this is over the max hold amount\");\r\n            }\r\n            \r\n            if (maxSellPercentage \u003e 0) {\r\n                require (value \u003c= maxSellAmount(), \"this is over the max sell amount\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    function calculateTransferAmount(address from, address to, uint256 value) internal virtual override returns (uint256) {\r\n        uint256 amountAfterTax = value;\r\n        if (launched \u0026\u0026 enableHighTaxCountdown) {\r\n            if (isAlwaysExempt(to) == false \u0026\u0026 from != owner \u0026\u0026 sniperTax() \u003e 0 \u0026\u0026 isNeverSniper[from] == false \u0026\u0026 isNeverSniper[to] == false) {\r\n                uint256 taxAmount = value.mul(sniperTax()).div(10000);\r\n                amountAfterTax = amountAfterTax.sub(taxAmount);\r\n            }\r\n        }\r\n        return super.calculateTransferAmount(from, to, amountAfterTax);\r\n    }\r\n    \r\n    // Public methods\r\n    \r\n    function maxHoldAmount() public view returns (uint256) {\r\n        return totalSupply().mul(maxHoldPercentage).div(10000);\r\n    }\r\n    \r\n    function maxSellAmount() public view returns (uint256) {\r\n         return totalSupply().mul(maxSellPercentage).div(10000);\r\n    }\r\n    \r\n   function sniperTax() public view returns (uint256) {\r\n        if(launched) {\r\n            uint256 timeSinceLaunch = block.timestamp - launchTime;\r\n            if (timeSinceLaunch \u003c 100) {\r\n                return uint256(100).sub(timeSinceLaunch).mul(100);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    // Admin methods\r\n    \r\n    function configurePinkAntiBot(address antiBot) internal {\r\n        pinkAntiBot = IPinkAntiBot(antiBot);\r\n        pinkAntiBot.setTokenOwner(owner);\r\n        pinkAntiBotConfigured = true;\r\n        enablePinkAntiBot = true;\r\n    }\r\n    \r\n    function setSniperBlocking(bool enabled) public onlyOwner {\r\n        enableSniperBlocking = enabled;\r\n    }\r\n    \r\n    function setBlockLogProtection(bool enabled) public onlyOwner {\r\n        enableBlockLogProtection = enabled;\r\n    }\r\n    \r\n    function setHighTaxCountdown(bool enabled) public onlyOwner {\r\n        enableHighTaxCountdown = enabled;\r\n    }\r\n    \r\n    function setPinkAntiBot(bool enabled) public onlyOwner {\r\n        require(pinkAntiBotConfigured, \"pink anti bot is not configured\");\r\n        enablePinkAntiBot = enabled;\r\n    }\r\n    \r\n    function setMaxSellPercentage(uint256 amount) public onlyOwner {\r\n        maxSellPercentage = amount;\r\n    }\r\n    \r\n    function setMaxHoldPercentage(uint256 amount) public onlyOwner {\r\n        maxHoldPercentage = amount;\r\n    }\r\n    \r\n    function setIsSniper(address who, bool enabled) public onlyOwner {\r\n        isSniper[who] = enabled;\r\n    }\r\n\r\n    function setNeverSniper(address who, bool enabled) public onlyOwner {\r\n        isNeverSniper[who] = enabled;\r\n    }\r\n\r\n    // private methods\r\n}"},"BaseErc20.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./Interfaces.sol\";\r\nimport \"./Libraries.sol\";\r\n\r\nabstract contract BaseErc20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003e uint256) internal _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) internal _allowed;\r\n    uint256 internal _totalSupply;\r\n    \r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    \r\n    address public owner;\r\n    bool public isTradingEnabled = true;\r\n    bool public launched;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"can only be called by the contract owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier isLaunched() {\r\n        require(launched, \"can only be called once token is launched\");\r\n        _;\r\n    }\r\n\r\n    modifier tradingEnabled(address from) {\r\n        require((isTradingEnabled \u0026\u0026 launched) || msg.sender == owner || from == owner, \"trading not enabled\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public override view returns (uint256) {\r\n        return _balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address spender) public override view returns (uint256) {\r\n        return _allowed[_owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public override tradingEnabled(msg.sender) returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public override tradingEnabled(msg.sender) returns (bool) {\r\n        require(spender != address(0), \"cannot approve the 0 address\");\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public override tradingEnabled(from) returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public tradingEnabled(msg.sender) returns (bool) {\r\n        require(spender != address(0), \"cannot approve the 0 address\");\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public tradingEnabled(msg.sender) returns (bool) {\r\n        require(spender != address(0), \"cannot approve the 0 address\");\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    // Admin methods\r\n    function changeOwner(address who) public onlyOwner {\r\n        require(who != address(0), \"cannot be zero address\");\r\n        owner = who;\r\n    }\r\n\r\n    function removeBnb() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner).transfer(balance);\r\n    }\r\n\r\n    function transferTokens(address token, address to) public onlyOwner returns(bool){\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        return IERC20(token).transfer(to, balance);\r\n    }\r\n\r\n    function setTradingEnabled(bool enabled) public onlyOwner {\r\n        isTradingEnabled = enabled;\r\n    }\r\n    \r\n    \r\n    \r\n    // Virtual methods\r\n    function launch() virtual public onlyOwner {\r\n        launched = true;\r\n    }\r\n    \r\n    function preTransfer(address from, address to, uint256 value) virtual internal { }\r\n\r\n    function calculateTransferAmount(address from, address to, uint256 value) virtual internal returns (uint256) {\r\n        require(from != to);\r\n        return value;\r\n    }\r\n    \r\n    function postTransfer(address from, address to) virtual internal { }\r\n    \r\n    function isAlwaysExempt(address who) virtual internal returns (bool) {\r\n        return who == address(0);\r\n    }\r\n    \r\n    \r\n    \r\n    // Private methods\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) private {\r\n        require(to != address(0), \"cannot be zero address\");\r\n        \r\n        preTransfer(from, to, value);\r\n\r\n        uint256 modifiedAmount =  calculateTransferAmount(from, to, value);\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(modifiedAmount);\r\n\r\n        postTransfer(from, to);\r\n\r\n        emit Transfer(from, to, modifiedAmount);\r\n    }\r\n}"},"Dividends.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./Interfaces.sol\";\r\nimport \"./BaseErc20.sol\";\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address private _token;\r\n    address private _distributor;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    address[] private shareholders;\r\n    mapping (address =\u003e uint256) private shareholderIndexes;\r\n    mapping (address =\u003e uint256) private shareholderClaims;\r\n\r\n    mapping (address =\u003e Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10 ** 18);\r\n\r\n    uint256 private currentIndex;\r\n\r\n    event DividendsDistributed(uint256 amountDistributed);\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token, \"can only be called by the parent token\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDistributor() {\r\n        require(msg.sender == _distributor, \"can only be called by the tax distributor\");\r\n        _;\r\n    }\r\n\r\n    constructor (address distributor) {\r\n        _token = msg.sender;\r\n        _distributor = distributor;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount \u003e 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount \u003e 0 \u0026\u0026 shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 \u0026\u0026 shares[shareholder].amount \u003e 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyDistributor {\r\n        uint256 amount = msg.value;\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations;\r\n        uint256 distributed;\r\n\r\n        while(gasUsed \u003c gas \u0026\u0026 iterations \u003c shareholderCount) {\r\n            if(currentIndex \u003e= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributed += distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        emit DividendsDistributed(distributed);\r\n    }\r\n\r\n    function shouldDistribute(address shareholder) private view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod \u003c block.timestamp\r\n        \u0026\u0026 getUnpaidEarnings(shareholder) \u003e minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) private returns (uint256){\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount \u003e 0) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n            payable(shareholder).transfer(amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends \u003c= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) private view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) private {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\nabstract contract Dividends is BaseErc20 {\r\n    IDividendDistributor dividendDistributor;\r\n    bool autoDistributeDividends;\r\n    mapping (address =\u003e bool) public excludedFromDividends;\r\n    uint256 distributorGas;\r\n    \r\n    /**\r\n     * @dev Return the address of the dividend distributor contract\r\n     */\r\n    function dividendDistributorAddress() public view returns (address) {\r\n        return address(dividendDistributor);\r\n    }\r\n    \r\n    \r\n    // Overrides\r\n    \r\n    function isAlwaysExempt(address who) internal virtual override returns (bool) {\r\n        return (super.isAlwaysExempt(who) || who == address(dividendDistributor));\r\n    }\r\n    \r\n    function postTransfer(address from, address to) internal virtual override {\r\n        if (excludedFromDividends[from] == false) {\r\n            dividendDistributor.setShare(from, _balances[from]);\r\n        }\r\n        if (excludedFromDividends[to] == false) {\r\n            dividendDistributor.setShare(to, _balances[to]);\r\n        }\r\n        if (autoDistributeDividends) {\r\n            try dividendDistributor.process(distributorGas) {} catch {}\r\n        }\r\n        super.postTransfer(from, to);\r\n    }\r\n    \r\n    \r\n    // Admin methods\r\n    \r\n    function setDividendDistributionThresholds(uint256 minAmount, uint256 minTime, uint256 gas) public onlyOwner {\r\n        distributorGas = gas;\r\n        dividendDistributor.setDistributionCriteria(minTime, minAmount);\r\n    }\r\n\r\n    function setAutoDistributeDividends(bool enabled) public onlyOwner {\r\n        autoDistributeDividends = enabled;\r\n    }\r\n\r\n    function setIsDividendExempt(address who, bool isExempt) public onlyOwner {\r\n        require(who != address(this) \u0026\u0026 isAlwaysExempt(who) == false, \"this address cannot receive shares\");\r\n        excludedFromDividends[who] = isExempt;\r\n        if (isExempt){\r\n            dividendDistributor.setShare(who, 0);\r\n        } else {\r\n            dividendDistributor.setShare(who, _balances[who]);\r\n        }\r\n    }\r\n\r\n    function runDividendsManually(uint256 gas) public onlyOwner {\r\n        dividendDistributor.process(gas);\r\n    }\r\n}"},"Flipstar.sol":{"content":"/*\r\n  _____ _ _      ____  _             \r\n |  ___| (_)_ __/ ___|| |_ __ _ _ __ \r\n | |_  | | | \u0027_ \\___ \\| __/ _` | \u0027__|\r\n |  _| | | | |_) |__) | || (_| | |   \r\n |_|   |_|_| .__/____/ \\__\\__,_|_|   \r\n           |_|                       \r\n*/\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./Interfaces.sol\";\r\nimport \"./Libraries.sol\";\r\nimport \"./BaseErc20.sol\";\r\nimport \"./Taxable.sol\";\r\nimport \"./Dividends.sol\";\r\nimport \"./AntiSniper.sol\";\r\n\r\ncontract FlipStar is BaseErc20, Taxable, Dividends, AntiSniper {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003e bool) public excludedFromSelling;\r\n\r\n    constructor () {\r\n        //owner = msg.sender;\r\n        owner = 0x29830c9534B169d9f53a0B101A4B14A8a3819C20;\r\n        symbol = \"FLIP\";\r\n        name = \"FlipStar\";\r\n        decimals = 18;\r\n\r\n        //address pancakeSwap = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3; // TESTNET\r\n        address pancakeSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // MAINNET\r\n        IDEXRouter router = IDEXRouter(pancakeSwap);\r\n        address WBNB = router.WETH();\r\n        address pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        exchanges[pair] = true;\r\n        exchanges[pancakeSwap] = true;\r\n        minimumTimeBetweenSwaps = 5 minutes;\r\n        minimumTokensBeforeSwap = 1000 * 10 ** decimals;\r\n        distributorGas  = 500000;\r\n        \r\n        maxHoldPercentage = 150;\r\n        maxSellPercentage = 10;\r\n        enableSniperBlocking = true;\r\n        enableBlockLogProtection = true;\r\n        enableHighTaxCountdown = true;\r\n        //configurePinkAntiBot(0xbb06F5C7689eA93d9DeACCf4aF8546C4Fe0Bf1E5); // TESTNET\r\n        configurePinkAntiBot(0x8EFDb3b642eb2a20607ffe0A56CFefF6a95Df002); // MAINNET\r\n\r\n        taxDistributor = new TaxDistributor(pancakeSwap, pair, WBNB);\r\n        dividendDistributor = new DividendDistributor(address(taxDistributor));\r\n\r\n        taxDistributor.createWalletTax(\"Development\", 100, 100, 0x66A4E962Ad91F457190e720BE5d764fd41172E97);\r\n        taxDistributor.createWalletTax(\"Marketing\", 100, 100, 0xFee915C14EA243B31F84A08De6B9476fFc2835aC);\r\n        taxDistributor.createWalletTax(\"Lotto\", 100, 100, 0xf8485507d30A3387eA6dFbae129DAf6DF7Eb8244);\r\n        taxDistributor.createDividendTax(\"Liquidity\", 200, 300, address(dividendDistributor));\r\n        taxDistributor.createLiquidityTax(\"Rewards\", 500, 600);\r\n\r\n        excludedFromTax[owner] = true;\r\n        excludedFromTax[address(taxDistributor)] = true;\r\n        excludedFromTax[address(dividendDistributor)] = true;\r\n\r\n        excludedFromDividends[pair] = true;\r\n        excludedFromDividends[address(this)] = true;\r\n        excludedFromDividends[address(taxDistributor)] = true;\r\n        excludedFromDividends[address(dividendDistributor)] = true;\r\n\r\n        _allowed[address(taxDistributor)][pancakeSwap] = 2**256 - 1;\r\n        _totalSupply = _totalSupply.add(100_000_000 * 10 ** decimals);\r\n        _balances[owner] = _balances[owner].add(_totalSupply);\r\n        \r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n\r\n    // Overrides\r\n\r\n    function launch() public override(AntiSniper, BaseErc20) onlyOwner {\r\n        return super.launch();\r\n    }\r\n\r\n    function isAlwaysExempt(address who) override(Taxable, Dividends, BaseErc20) internal returns (bool) {\r\n        return super.isAlwaysExempt(who);\r\n    }\r\n\r\n    function preTransfer(address from, address to, uint256 value) override(AntiSniper, BaseErc20) internal {\r\n        require(excludedFromSelling[from] == false, \"address is not allowed to sell\");\r\n        super.preTransfer(from, to, value);\r\n    }\r\n    \r\n    function calculateTransferAmount(address from, address to, uint256 value) override(AntiSniper, Taxable, BaseErc20) internal returns (uint256) {\r\n        return super.calculateTransferAmount(from, to, value);\r\n    }\r\n    \r\n    function postTransfer(address from, address to) override(Taxable, Dividends, BaseErc20) internal {\r\n        super.postTransfer(from, to);\r\n    }\r\n\r\n\r\n    // Admin methods\r\n\r\n    function setExchange(address who, bool isExchange) public onlyOwner {\r\n        exchanges[who] = isExchange;\r\n        excludedFromDividends[who] = isExchange;\r\n    }\r\n\r\n    function setExcludedFromSelling(address who, bool isExcluded) public onlyOwner {\r\n        require(who != address(this) \u0026\u0026 who != address(taxDistributor) \u0026\u0026 who != address(dividendDistributor) \u0026\u0026 exchanges[who] == false, \"this address cannot be excluded\");\r\n        excludedFromSelling[who] = isExcluded;\r\n    }\r\n}\r\n"},"Interfaces.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}"},"Libraries.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, reverts on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 \u0026\u0026 b == INT256_MIN)); // This is the only case of overflow not detected by the check below\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\r\n        require(!(b == -1 \u0026\u0026 a == INT256_MIN)); // This is the only case of overflow\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, reverts on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b \u003e= 0 \u0026\u0026 c \u003c= a) || (b \u003c 0 \u0026\u0026 c \u003e a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, reverts on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b \u003e= 0 \u0026\u0026 c \u003e= a) || (b \u003c 0 \u0026\u0026 c \u003c a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n"},"Taxable.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./Libraries.sol\";\r\nimport \"./Interfaces.sol\";\r\nimport \"./BaseErc20.sol\";\r\n\r\ncontract TaxDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address public tokenPair;\r\n    address public routerAddress;\r\n    address private _token;\r\n    address private _wbnb;\r\n\r\n    IDEXRouter private _router;\r\n\r\n    bool public inSwap;\r\n    uint256 public lastSwapTime;\r\n\r\n    enum TaxType { WALLET, DIVIDEND, LIQUIDITY }\r\n    struct Tax {\r\n        string taxName;\r\n        uint256 buyTaxPercentage;\r\n        uint256 sellTaxPercentage;\r\n        uint256 taxPool;\r\n        TaxType taxType;\r\n        address location;\r\n        uint256 share;\r\n    }\r\n    Tax[] public taxes;\r\n\r\n    event TaxesDistributed(uint256 tokensSwapped, uint256 ethReceived);\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token, \"no permissions\");\r\n        _;\r\n    }\r\n\r\n    modifier notInSwap() {\r\n        require(inSwap == false, \"already swapping\");\r\n        _;\r\n    }\r\n\r\n    constructor (address router, address pair, address wbnb) {\r\n        _token = msg.sender;\r\n        _wbnb = wbnb;\r\n        _router = IDEXRouter(router);\r\n        tokenPair = pair;\r\n        routerAddress = router;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function createWalletTax(string memory name, uint256 buyTax, uint256 sellTax, address wallet) public onlyToken {\r\n        taxes.push(Tax(name, buyTax, sellTax, 0, TaxType.WALLET, wallet, 0));\r\n    }\r\n    \r\n    function createDividendTax(string memory name, uint256 buyTax, uint256 sellTax, address dividendDistributor) public onlyToken {\r\n        taxes.push(Tax(name, buyTax, sellTax, 0, TaxType.DIVIDEND, dividendDistributor, 0));\r\n    }\r\n    \r\n    function createLiquidityTax(string memory name, uint256 buyTax, uint256 sellTax) public onlyToken {\r\n        taxes.push(Tax(name, buyTax, sellTax, 0, TaxType.LIQUIDITY, address(0), 0));\r\n    }\r\n\r\n    function distribute() public payable onlyToken notInSwap {\r\n        inSwap = true;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = _token;\r\n        path[1] = _wbnb;\r\n\r\n        uint256 totalTokens;\r\n        for (uint256 i = 0; i \u003c taxes.length - 1; i++) {\r\n            if (taxes[i].taxType == TaxType.LIQUIDITY) {\r\n                uint256 half = taxes[i].taxPool.div(2);\r\n                totalTokens += taxes[i].taxPool.sub(half);\r\n            } else {\r\n                totalTokens += taxes[i].taxPool;\r\n            }\r\n        }\r\n        \r\n        uint256 balanceBefore = address(this).balance;\r\n        _router.swapExactTokensForETH(\r\n            totalTokens,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        // Calculate the distribution\r\n        uint256 toDistribute = amountBNB;\r\n        for (uint256 i = 0; i \u003c taxes.length - 1; i++) {\r\n            uint256 share = amountBNB.mul(taxes[i].taxPool).div(totalTokens);\r\n            taxes[i].share = share;\r\n            toDistribute = toDistribute.sub(share);\r\n        }\r\n        taxes[taxes.length - 1].share = toDistribute;\r\n\r\n        // Distribute the coins\r\n        for (uint256 i = 0; i \u003c taxes.length; i++) {\r\n            \r\n            if (taxes[i].taxType == TaxType.WALLET) {\r\n                payable(taxes[i].location).transfer(taxes[i].share);\r\n            }\r\n            else if (taxes[i].taxType == TaxType.DIVIDEND) {\r\n                IDividendDistributor(taxes[i].location).deposit{value: taxes[i].share}();\r\n            }\r\n            else if (taxes[i].taxType == TaxType.LIQUIDITY) {\r\n                if(taxes[i].share \u003e 0){\r\n                    _router.addLiquidityETH{value: taxes[i].share}(\r\n                        _token,\r\n                        taxes[i].taxPool.div(2),\r\n                        0,\r\n                        0,\r\n                        BaseErc20(_token).owner(),\r\n                        block.timestamp\r\n                    );\r\n                }\r\n            }\r\n            \r\n            taxes[i].taxPool = 0;\r\n            taxes[i].share = 0;\r\n        }\r\n\r\n        emit TaxesDistributed(totalTokens, amountBNB);\r\n\r\n        lastSwapTime = block.timestamp;\r\n        inSwap = false;\r\n    }\r\n\r\n    function getSellTax() public onlyToken view returns (uint256) {\r\n        uint256 taxAmount;\r\n        for (uint256 i = 0; i \u003c taxes.length; i++) {\r\n            taxAmount += taxes[i].sellTaxPercentage;\r\n        }\r\n        return taxAmount;\r\n    }\r\n\r\n    function getBuyTax() public onlyToken view returns (uint256) {\r\n        uint256 taxAmount;\r\n        for (uint256 i = 0; i \u003c taxes.length; i++) {\r\n            taxAmount += taxes[i].buyTaxPercentage;\r\n        }\r\n        return taxAmount;\r\n    }\r\n    \r\n    function setTaxWallet(string memory taxName, address wallet) public onlyToken {\r\n        bool updated;\r\n        for (uint256 i = 0; i \u003c taxes.length; i++) {\r\n            if (taxes[i].taxType == TaxType.WALLET \u0026\u0026 compareStrings(taxes[i].taxName, taxName)) {\r\n                taxes[i].location = wallet;\r\n                updated = true;\r\n            }\r\n        }\r\n        require(updated, \"could not find tax to update\");\r\n    }\r\n\r\n    function setSellTax(string memory taxName, uint256 taxPercentage) public onlyToken {\r\n        bool updated;\r\n        for (uint256 i = 0; i \u003c taxes.length; i++) {\r\n            if (compareStrings(taxes[i].taxName, taxName)) {\r\n                taxes[i].sellTaxPercentage = taxPercentage;\r\n                updated = true;\r\n            }\r\n        }\r\n        require(updated, \"could not find tax to update\");\r\n        require(getSellTax() \u003c= 10000, \"tax cannot be more than 100%\");\r\n    }\r\n\r\n    function setBuyTax(string memory taxName, uint256 taxPercentage) public onlyToken {\r\n        bool updated;\r\n        for (uint256 i = 0; i \u003c taxes.length; i++) {\r\n            //if (taxes[i].taxName == taxName) {\r\n            if (compareStrings(taxes[i].taxName, taxName)) {\r\n                taxes[i].buyTaxPercentage = taxPercentage;\r\n                updated = true;\r\n            }\r\n        }\r\n        require(updated, \"could not find tax to update\");\r\n        require(getBuyTax() \u003c= 10000, \"tax cannot be more than 100%\");\r\n    }\r\n\r\n    function takeSellTax(uint256 value) public onlyToken returns (uint256) {\r\n        for (uint256 i = 0; i \u003c taxes.length; i++) {\r\n            if (taxes[i].sellTaxPercentage \u003e 0) {\r\n                uint256 taxAmount = value.mul(taxes[i].sellTaxPercentage).div(10000);\r\n                taxes[i].taxPool += taxAmount;\r\n                value = value.sub(taxAmount);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function takeBuyTax(uint256 value) public onlyToken returns (uint256) {\r\n        for (uint256 i = 0; i \u003c taxes.length; i++) {\r\n            if (taxes[i].buyTaxPercentage \u003e 0) {\r\n                uint256 taxAmount = value.mul(taxes[i].buyTaxPercentage).div(10000);\r\n                taxes[i].taxPool += taxAmount;\r\n                value = value.sub(taxAmount);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    \r\n    \r\n    \r\n    // Private methods\r\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n}\r\n\r\n\r\nabstract contract Taxable is BaseErc20 {\r\n    using SafeMath for uint256;\r\n    \r\n    TaxDistributor taxDistributor;\r\n    mapping (address =\u003e bool) public exchanges;\r\n    uint256 public minimumTimeBetweenSwaps;\r\n    uint256 public minimumTokensBeforeSwap;\r\n    mapping (address =\u003e bool) public excludedFromTax;\r\n    \r\n    \r\n    /**\r\n     * @dev Return the current total sell tax from the tax distributor\r\n     */\r\n    function sellTax() public view returns (uint256) {\r\n        return taxDistributor.getSellTax();\r\n    }\r\n\r\n    /**\r\n     * @dev Return the current total sell tax from the tax distributor\r\n     */\r\n    function buyTax() public view returns (uint256) {\r\n        return taxDistributor.getBuyTax();\r\n    }\r\n\r\n    /**\r\n     * @dev Return the address of the tax distributor contract\r\n     */\r\n    function taxDistributorAddress() public view returns (address) {\r\n        return address(taxDistributor);\r\n    }    \r\n    \r\n    \r\n    // Overrides\r\n    \r\n    function isAlwaysExempt(address who) internal virtual override returns (bool) {\r\n         return (super.isAlwaysExempt(who) || who == address(taxDistributor) || exchanges[who]);\r\n    }\r\n    \r\n    function calculateTransferAmount(address from, address to, uint256 value) internal virtual override returns (uint256) {\r\n        \r\n        uint256 amountAfterTax = value;\r\n\r\n        if (excludedFromTax[from] == false \u0026\u0026 excludedFromTax[to] == false \u0026\u0026 launched) {\r\n            if (exchanges[from]) {\r\n                // we are BUYING\r\n                amountAfterTax = taxDistributor.takeBuyTax(value);\r\n            } else {\r\n                // we are SELLING\r\n                amountAfterTax = taxDistributor.takeSellTax(value);\r\n            }\r\n        }\r\n\r\n        uint256 taxAmount = value.sub(amountAfterTax);\r\n        if (taxAmount \u003e 0) {\r\n            _balances[address(taxDistributor)] = _balances[address(taxDistributor)].add(taxAmount);\r\n            emit Transfer(from, address(taxDistributor), taxAmount);\r\n        }\r\n        return super.calculateTransferAmount(from, to, amountAfterTax);\r\n    }\r\n\r\n\r\n    function postTransfer(address from, address to) override virtual internal {\r\n        uint256 timeSinceLastSwap = block.timestamp - taxDistributor.lastSwapTime();\r\n        if (taxDistributor.inSwap() == false \u0026\u0026\r\n            launched \u0026\u0026 \r\n            timeSinceLastSwap \u003e= minimumTimeBetweenSwaps \u0026\u0026\r\n            _balances[address(taxDistributor)] \u003e= minimumTokensBeforeSwap) {\r\n            try taxDistributor.distribute() {} catch {}\r\n        }\r\n        super.postTransfer(from, to);\r\n    }\r\n    \r\n    \r\n    \r\n    // Admin methods\r\n    \r\n    \r\n    function setExcludedFromTax(address who, bool enabled) public onlyOwner {\r\n        excludedFromTax[who] = enabled;\r\n    }\r\n\r\n    function setTaxDistributionThresholds(uint256 minAmount, uint256 minTime) public onlyOwner {\r\n        minimumTokensBeforeSwap = minAmount;\r\n        minimumTimeBetweenSwaps = minTime;\r\n    }\r\n    \r\n    function setSellTax(string memory taxName, uint256 taxAmount) public onlyOwner {\r\n        taxDistributor.setSellTax(taxName, taxAmount);\r\n    }\r\n\r\n    function setBuyTax(string memory taxName, uint256 taxAmount) public onlyOwner {\r\n        taxDistributor.setBuyTax(taxName, taxAmount);\r\n    }\r\n    \r\n    function setWallets(string memory taxName, address wallet) public onlyOwner {\r\n        taxDistributor.setTaxWallet(taxName, wallet);\r\n    }\r\n    \r\n    function runSwapManually() public onlyOwner isLaunched {\r\n        taxDistributor.distribute();\r\n    }\r\n}"}}