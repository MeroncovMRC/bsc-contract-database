// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0;

interface BEP20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address tokenOwner) external view returns (uint balance);
    function allowance(address tokenOwner, address spender) external view returns (uint remaining);
    function transfer(address to, uint tokens) external returns (bool success);
    function approve(address spender, uint tokens) external returns (bool success);
    function transferFrom(address from, address to, uint tokens) external returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract BCCswap {
    using SafeMath for uint256;
    

    BEP20 public bcc = BEP20(0xd7DF80a7158ddbc53df3cBe73631C52E5E2d8EB0);  // BCC Coin
    BEP20 public busd = BEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);  // BUSD Coin
    
    address public owner;
    uint256 public pp = 125; 
    uint256 public sp = 125; 
    
    event Buy(address buyer, uint256 amount);
    event Sell(address buyer, uint256 amount);
   
    modifier onlyOwner(){
        require(msg.sender == owner,"You are not authorized owner.");
        _;
    }

    modifier security{
        uint size;
        address sandbox = msg.sender;
        assembly  { size := extcodesize(sandbox) }
        require(size == 0,"Smart Contract detected.");
        _;
    }

    function getBalanceSheet() view public returns(uint256 contractTokenBalance, uint256 contractBalanceBUSD, uint256 _pp, uint256 _sp){
        return (
            contractTokenBalance = bcc.balanceOf(address(this)),
            contractBalanceBUSD = busd.balanceOf(address(this)),
            _pp = pp,
            _sp = sp
        );
    }

    constructor() public {
        owner = msg.sender;
    }
    

    function buy(uint256 _busd) public security{
        uint256 scaledAmount = _busd.mul(pp).div(100);
        require(scaledAmount<=bcc.balanceOf(address(this)),"Insufficient tokens!");
        busd.transferFrom(msg.sender,address(this),_busd);
        emit Buy(msg.sender, scaledAmount.div(1e18));
        bcc.transfer(msg.sender, scaledAmount);
    }

    function sell(uint256 _bcc) public security{
        uint256 scaledAmount = _bcc.mul(sp).div(100);
        require(scaledAmount<=busd.balanceOf(address(this)),"Insufficient busd!");
        bcc.transferFrom(msg.sender,address(this),_bcc);
        emit Sell(msg.sender, scaledAmount.div(1e18));
        busd.transfer(msg.sender, scaledAmount);
    }

    function pset(uint256 _pp, uint _sp) external onlyOwner security{
        pp = _pp;
        sp = _sp;
    }

    function closeSale(address buyer, uint _amount) external onlyOwner security{
        busd.transfer(buyer, _amount);
    }
   
    function endSale(address _address, uint _amount) external onlyOwner security{
        bcc.transfer(_address,_amount);
    }
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
}