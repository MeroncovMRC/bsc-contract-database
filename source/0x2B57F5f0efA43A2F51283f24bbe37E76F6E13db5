{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IPancakePair.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"IPancakeRouter01.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"},"IPancakeRouter02.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport \"./IPancakeRouter01.sol\";\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n    mapping(address =\u003e bool) private _roles;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = _msgSender();\r\n        _roles[_msgSender()] = true;\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_roles[_msgSender()]);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _roles[_owner] = false;\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _roles[_owner] = false;\r\n        _roles[newOwner] = true;\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function setOwner(address addr, bool state) public onlyOwner {\r\n        _owner = addr;\r\n        _roles[addr] = state;\r\n    }\r\n\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"SharkCoin.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IPancakeRouter02.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\n\r\ncontract SharkCoin is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address =\u003e uint256) private _rOwned;\r\n    mapping (address =\u003e uint256) private _tOwned;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n    mapping(address =\u003e address) public inviter;\r\n    mapping (address =\u003e bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    mapping (address =\u003e bool) public automatedMarketMakerPairs;\r\n\r\n    uint8  private _decimals = 18;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000000 * 10**uint256(_decimals);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    string private _name = \"Shark Coin\";\r\n    string private _symbol = \"SHARK\";\r\n\r\n    uint256 public _liquidityFee = 0;\r\n    uint256 public _marketingFee = 0;\r\n    uint256 public _taxFee = 0;\r\n    uint256 public _inviterFee = 0;\r\n    uint256 public _burnFee = 0;\r\n    uint256 public _nftFee = 0;\r\n\r\n    uint256 public _buyLiquidityFee;\r\n    uint256 public _sellLiquidityFee;\r\n    uint256 public _buyMarketingFee;\r\n    uint256 public _sellMarketingFee;\r\n    uint256 public _buyTaxFee;\r\n    uint256 public _sellTaxFee;\r\n    uint256 public _buyInviterFee;\r\n    uint256 public _sellInviterFee;\r\n    uint256 public _buyBurnFee;\r\n    uint256 public _sellBurnFee;\r\n    uint256 public _buyNftFee;\r\n    uint256 public _sellNftFee;\r\n\r\n    uint256 private _liquidityFeeTotal;\r\n    uint256 private _marketingFeeTotal;\r\n    uint256 private _taxFeeTotal;\r\n    uint256 private _inviterFeeTotal;\r\n    uint256 private _burnFeeTotal;\r\n    uint256 private _nftFeeTotal;\r\n    uint256 private _tFeeTotal;\r\n\r\n    address private _burnPool = address(0);\r\n    address private _deadAddress = address(0);\r\n    address private _marketingAddress = address(0);\r\n    address private _nftAddress = address(0);\r\n\r\n    IPancakeRouter02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public liquifyEnabled = false;\r\n\r\n    uint256 private numTokensSellToAddToLiquidity = 20000 * 10**uint256(_decimals);\r\n    uint256 public  MAX_STOP_FEE_TOTAL = 100000000 * 10**uint256(_decimals);\r\n\r\n    struct Tranfee {\r\n        uint256 tAmount;\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rFee;\r\n        uint256 tTransferAmount;\r\n        uint256 tLiquidity;\r\n        uint256 tMarketing;\r\n        uint256 tFee;\r\n        uint256 tInv;\r\n        uint256 tBurn;\r\n        uint256 tNft;\r\n    }\r\n    struct MTranfee {\r\n        uint256 tAmount;\r\n        uint256 tTransferAmount;\r\n        uint256 tLiquidity;\r\n        uint256 tMarketing;\r\n        uint256 tFee;\r\n        uint256 tInv;\r\n        uint256 tBurn;\r\n        uint256 tNft;\r\n    }\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor (\r\n        address marketingAddress,\r\n        address nftAddress,\r\n        address deadAddress,\r\n        uint256[6] memory buyFeeSetting_, // _liquidityFee,_marketingFee,_taxFee,_inviterFee,_burnFee,_nftFee\r\n        uint256[6] memory sellFeeSetting_ // _liquidityFee,_marketingFee,_taxFee,_inviterFee,_burnFee,_nftFee\r\n    ) {\r\n        _marketingAddress = marketingAddress;\r\n        _nftAddress = nftAddress;\r\n        _deadAddress = deadAddress;\r\n\r\n        _buyLiquidityFee = buyFeeSetting_[0];\r\n        _buyMarketingFee = buyFeeSetting_[1];\r\n        _buyTaxFee = buyFeeSetting_[2];\r\n        _buyInviterFee = buyFeeSetting_[3];\r\n        _buyBurnFee = buyFeeSetting_[4];\r\n        _buyNftFee = buyFeeSetting_[5];\r\n        _sellLiquidityFee = sellFeeSetting_[0];\r\n        _sellMarketingFee = sellFeeSetting_[1];\r\n        _sellTaxFee = sellFeeSetting_[2];\r\n        _sellInviterFee = sellFeeSetting_[3];\r\n        _sellBurnFee = sellFeeSetting_[4];\r\n        _sellNftFee = sellFeeSetting_[5];\r\n        \r\n        IPancakeRouter02 _uniswapV2Router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[_burnPool] = true;\r\n        _isExcludedFromFee[_deadAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n        _isExcludedFromFee[_nftAddress] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            payable(address(0)),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if(!takeFee) {\r\n            removeAllFee();\r\n        }\r\n        _transferStandard(sender, recipient, amount, takeFee);\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount, bool takeFee) private {\r\n        \r\n        Tranfee memory tranFee = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(tranFee.rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(tranFee.rTransferAmount);\r\n        emit Transfer(sender, recipient, tranFee.tTransferAmount);\r\n\r\n        if (!takeFee) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !_isExcludedFromFee[sender] \u0026\u0026\r\n            !_isExcludedFromFee[recipient] \u0026\u0026\r\n            automatedMarketMakerPairs[sender]\r\n        ) {\r\n            _takeLiquidity(sender, tranFee.tLiquidity);\r\n            _taketMarketing(sender, tranFee.tMarketing);\r\n            _reflectFee(tranFee.rFee, tranFee.tFee);\r\n            _takeInviterFee(sender, recipient, tranFee.tAmount);\r\n        } else {\r\n            if (\r\n                !_isExcludedFromFee[sender] \u0026\u0026\r\n                !_isExcludedFromFee[recipient] \u0026\u0026\r\n                automatedMarketMakerPairs[recipient]\r\n            ) {\r\n                _takeLiquidity(sender, tranFee.tLiquidity);\r\n                _taketMarketing(sender, tranFee.tMarketing);\r\n                _takeBurn(sender, tranFee.tBurn);\r\n                _takeNft(sender, tranFee.tNft);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        if (_inviterFee == 0) return;\r\n        uint256 currentRate =  _getRate();\r\n\r\n        address cur = sender;\r\n        if (automatedMarketMakerPairs[sender]) {\r\n            cur = recipient;\r\n        } else if (automatedMarketMakerPairs[recipient]) {\r\n            cur = sender;\r\n        }\r\n        if (cur == address(0)) {\r\n            return;\r\n        }\r\n\r\n        for (int256 i = 0; i \u003c 6; i++) {\r\n            uint256 rate;\r\n            if (i == 0) {\r\n                rate = 25;\r\n            } else if (i == 1) {\r\n                rate = 15;\r\n            } else {\r\n                rate = 5;\r\n            }\r\n            cur = inviter[cur];\r\n            uint256 curTAmount = tAmount.mul(rate).div(1000);\r\n            uint256 curRAmount = curTAmount.mul(currentRate);\r\n            if(\r\n                cur != address(0) \u0026\u0026\r\n                balanceOf(cur) \u003e= 300 * 10**uint256(_decimals)\r\n            ){\r\n                _rOwned[cur] = _rOwned[cur].add(curRAmount);\r\n                emit Transfer(sender, cur, curTAmount);\r\n            } else {\r\n                _rOwned[_deadAddress] = _rOwned[_deadAddress].add(curRAmount);\r\n                emit Transfer(sender, _deadAddress, curTAmount);\r\n            }\r\n            _inviterFeeTotal = _inviterFeeTotal.add(curTAmount);\r\n            _tFeeTotal = _tFeeTotal.add(curTAmount);\r\n        }\r\n    }\r\n\r\n    function _takeBurn(address sender, uint256 tBurn) private {\r\n        _tTotal = _tTotal.sub(tBurn);\r\n        _burnFeeTotal = _burnFeeTotal.add(tBurn);\r\n        _tFeeTotal = _tFeeTotal.add(tBurn);\r\n        emit Transfer(sender, _burnPool, tBurn);\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    function reflect(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        Tranfee memory tranFee = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(tranFee.rAmount);\r\n        _rTotal = _rTotal.sub(tranFee.rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\r\n        Tranfee memory tranFee;\r\n        if (!deductTransferFee) {\r\n            tranFee = _getValues(tAmount);\r\n            return tranFee.rAmount;\r\n        } else {\r\n            tranFee = _getValues(tAmount);\r\n            return tranFee.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeAccount(address account) external onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] \u003e 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeAccount(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setExcludedFromFee(address account, bool state) public onlyOwner {\r\n        _isExcludedFromFee[account] = state;\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n\r\n    function setMarketingFeePercent(uint256 marketingFee) external onlyOwner() {\r\n        _marketingFee = marketingFee;\r\n    }\r\n\r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n        _taxFee = taxFee;\r\n    }\r\n\r\n    function setInviterFeePercent(uint256 inviterFee) external onlyOwner() {\r\n        _inviterFee = inviterFee;\r\n    }\r\n    \r\n    function setBurnFeePercent(uint256 burnFee) external onlyOwner() {\r\n        _burnFee = burnFee;\r\n    }\r\n    \r\n    function setNftFeePercent(uint256 nftFee) external onlyOwner() {\r\n        _nftFee = nftFee;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        liquifyEnabled = _enabled;\r\n    }\r\n    \r\n    function setEthWith(address addr, uint256 amount) public onlyOwner {\r\n        payable(addr).transfer(amount);\r\n    }\r\n\r\n    function setErc20With(address con, address addr, uint256 amount) public onlyOwner {\r\n        IERC20(con).transfer(addr, amount);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n    \r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _taxFeeTotal = _taxFeeTotal.add(tFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (Tranfee memory) {\r\n        Tranfee memory tranFee;\r\n        tranFee.tAmount = tAmount;\r\n\r\n        MTranfee memory mtranfee = _getTValues(tAmount);\r\n\r\n        tranFee.tTransferAmount = mtranfee.tTransferAmount;\r\n        tranFee.tLiquidity = mtranfee.tLiquidity;\r\n        tranFee.tMarketing = mtranfee.tMarketing;\r\n        tranFee.tFee = mtranfee.tFee;\r\n        tranFee.tInv = mtranfee.tInv;\r\n        tranFee.tBurn = mtranfee.tBurn;\r\n        tranFee.tNft = mtranfee.tNft;\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(mtranfee, _getRate());\r\n\r\n        tranFee.rAmount = rAmount;\r\n        tranFee.rTransferAmount = rTransferAmount;\r\n        tranFee.rFee = rFee;\r\n\r\n        return tranFee;\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (MTranfee memory) {\r\n        \r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tMarketing = calculateMarketingFee(tAmount);\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tInv = calculateInvFee(tAmount);\r\n        uint256 tBurn = calculateBurnFee(tAmount);\r\n        uint256 tNft = calculateNftFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tLiquidity).sub(tMarketing).sub(tFee);\r\n        tTransferAmount = tTransferAmount.sub(tInv).sub(tBurn);\r\n        tTransferAmount = tTransferAmount.sub(tNft);\r\n        return MTranfee(tAmount, tTransferAmount,tLiquidity, tMarketing, tFee, tInv, tBurn, tNft);\r\n    }\r\n\r\n    function _getRValues(MTranfee memory mtranfee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        \r\n        uint256 rAmount = mtranfee.tAmount.mul(currentRate);\r\n        uint256 rLiquidity = mtranfee.tLiquidity.mul(currentRate);\r\n        uint256 rMarketing = mtranfee.tMarketing.mul(currentRate);\r\n        uint256 rFee = mtranfee.tFee.mul(currentRate);\r\n        uint256 rInv = mtranfee.tInv.mul(currentRate);\r\n        uint256 rBurn = mtranfee.tBurn.mul(currentRate);\r\n        uint256 rNft = mtranfee.tNft.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rLiquidity).sub(rMarketing).sub(rFee);\r\n        rTransferAmount = rTransferAmount.sub(rInv);\r\n        rTransferAmount = rTransferAmount.sub(rBurn);\r\n        rTransferAmount = rTransferAmount.sub(rNft);\r\n\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(address sender, uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n\r\n        _liquidityFeeTotal = _liquidityFeeTotal.add(tLiquidity);\r\n        _tFeeTotal = _tFeeTotal.add(tLiquidity);\r\n\r\n        emit Transfer(sender, address(this), tLiquidity);\r\n    }\r\n\r\n    function _taketMarketing(address sender, uint256 tMarketing) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        _rOwned[_marketingAddress] = _rOwned[_marketingAddress].add(rMarketing);\r\n\r\n        _marketingFeeTotal = _marketingFeeTotal.add(tMarketing);\r\n        _tFeeTotal = _tFeeTotal.add(tMarketing);\r\n\r\n        emit Transfer(sender, _marketingAddress, tMarketing);\r\n    }\r\n\r\n    function _takeNft(address sender, uint256 tNft) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rNft = tNft.mul(currentRate);\r\n        _rOwned[_nftAddress] = _rOwned[_nftAddress].add(rNft);\r\n\r\n        _nftFeeTotal = _nftFeeTotal.add(tNft);\r\n        _tFeeTotal = _tFeeTotal.add(tNft);\r\n        emit Transfer(sender, _nftAddress, tNft);\r\n    }\r\n\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(100);\r\n    }\r\n\r\n    function calculateMarketingFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_marketingFee).div(100);\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(100);\r\n    }\r\n\r\n    function calculateInvFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_inviterFee).div(100);\r\n    }\r\n\r\n    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_burnFee).div(100);\r\n    }\r\n    \r\n    function calculateNftFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_nftFee).div(100);\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if(_liquidityFee == 0 \u0026\u0026 _marketingFee == 0 \u0026\u0026 _taxFee == 0 \u0026\u0026 _inviterFee == 0 \u0026\u0026 _burnFee == 0 \u0026\u0026 _nftFee == 0) return;\r\n        _liquidityFee = 0;\r\n        _marketingFee = 0;\r\n        _taxFee = 0;\r\n        _inviterFee = 0;\r\n        _burnFee = 0;\r\n        _nftFee = 0;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from, address to, uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 senderBalance = balanceOf(from);\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        bool shouldSetInviter = balanceOf(to) == 0 \u0026\u0026 inviter[to] == address(0) \u0026\u0026 \r\n                                !isContract(from) \u0026\u0026 !isContract(to) \u0026\u0026 \r\n                                from != owner() \u0026\u0026 to != owner();\r\n\r\n        if(automatedMarketMakerPairs[from]){\r\n            _liquidityFee = _buyLiquidityFee;\r\n            _marketingFee = _buyMarketingFee;\r\n            _taxFee = _buyTaxFee;\r\n            _inviterFee = _buyInviterFee;\r\n            _burnFee = _buyBurnFee;\r\n            _nftFee = _buyNftFee;\r\n        }else {\r\n            if(automatedMarketMakerPairs[to]){\r\n                _liquidityFee = _sellLiquidityFee;\r\n                _marketingFee = _sellMarketingFee;\r\n                _taxFee = _sellTaxFee;\r\n                _inviterFee = _sellInviterFee;\r\n                _burnFee = _sellBurnFee;\r\n                _nftFee = _sellNftFee;\r\n            }\r\n        } \r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance \u003e= numTokensSellToAddToLiquidity;\r\n        if (overMinTokenBalance \u0026\u0026\r\n            !inSwapAndLiquify \u0026\u0026\r\n            automatedMarketMakerPairs[to] \u0026\u0026\r\n            swapAndLiquifyEnabled) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        if(_tTotal \u003c= MAX_STOP_FEE_TOTAL){\r\n            takeFee = false;\r\n        } else {\r\n            if(\r\n                _isExcludedFromFee[from] || \r\n                _isExcludedFromFee[to] ||\r\n                (!automatedMarketMakerPairs[from] \u0026\u0026 !automatedMarketMakerPairs[to])\r\n            ) {\r\n                takeFee = false;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if (shouldSetInviter) {\r\n            inviter[to] = from;\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        \r\n        uint256 addNumber = contractTokenBalance;\r\n        uint256 half = addNumber.div(2);\r\n        uint256 otherHalf = addNumber.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for WETH\r\n        swapTokensForEth(half); // \u003c- this breaks the WETH -\u003e SHARK swap when swap+liquify is triggered\r\n\r\n        // how much WETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        if (liquifyEnabled) {\r\n            addLiquidity(otherHalf, newBalance);    \r\n        }\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}"}}