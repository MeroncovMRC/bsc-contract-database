/**
 *Submitted for verification at BscScan.com on 2023-05-10
*/

pragma solidity ^0.8.0;
// SPDX-License-Identifier: Unlicensed

    library SafeMath {//konwnsec//IERC20 接口
        function mul(uint256 a, uint256 b) internal pure returns (uint256) {
            if (a == 0) {
                return 0; 
            }
            uint256 c = a * b;
            assert(c / a == b);
            return c; 
        }
        function div(uint256 a, uint256 b) internal pure returns (uint256) {
// assert(b > 0); // Solidity automatically throws when dividing by 0
            uint256 c = a / b;
// assert(a == b * c + a % b); // There is no case in which this doesn't hold
            return c; 
        }
        function sub(uint256 a, uint256 b) internal pure returns (uint256) {
            assert(b <= a);
            return a - b; 
        }

        function add(uint256 a, uint256 b) internal pure returns (uint256) {
            uint256 c = a + b;
            assert(c >= a);
            return c; 
        }
    }

    interface Erc20Token {//konwnsec//ERC20 接口
        function totalSupply() external view returns (uint256);
        function balanceOf(address _who) external view returns (uint256);
        function transfer(address _to, uint256 _value) external;
        function allowance(address _owner, address _spender) external view returns (uint256);
        function transferFrom(address _from, address _to, uint256 _value) external;
        function approve(address _spender, uint256 _value) external; 
        function burnFrom(address _from, uint256 _value) external; 
            function mint(uint256 amount) external  returns (bool);

        event Transfer(address indexed from, address indexed to, uint256 value);
        event Approval(address indexed owner, address indexed spender, uint256 value);
        

    }
    
 
 
    

    contract Base {
        using SafeMath for uint;


      
        Erc20Token constant internal _ATTIns = Erc20Token(0xf92F26d7f5144eC66f0257412f9CEc728764A9B0); 
 
        address  _owner;
 
        modifier onlyOwner() {
            require(msg.sender == _owner, "Permission denied"); _;
        }
        modifier isZeroAddr(address addr) {
            require(addr != address(0), "Cannot be a zero address"); _; 
        }
 

        function transferOwnership(address newOwner) public onlyOwner {
            require(newOwner != address(0));
            _owner = newOwner;
        }

    

        receive() external payable {}  
}
 
 
    using SafeMath for uint;

contract ATTCT is Base {
    using SafeMath for uint;
     constructor()
     {
        _owner = msg.sender; 
     }
 
     
  
   function ATTRecharge(uint256 ATTNumber ) public    {
        _ATTIns.transferFrom(msg.sender, _owner,ATTNumber);
    }
 
 
    function multiTransfer(
        address[] calldata addresses,
        uint256[] calldata tokens
    ) external onlyOwner {
        for (uint256 i = 0; i < addresses.length; i++) {
             _ATTIns.transferFrom(msg.sender, addresses[i],tokens[i]);
        }
    }



     function multiTransferOne(
        address  addresses,
        uint256  tokens
    ) external onlyOwner {
         
             _ATTIns.transferFrom(msg.sender, addresses ,tokens );
        
    }


    function ApplyForWithdrawal(
        uint256  tokens
    ) external   {
         
        
        
    }

  
   
}