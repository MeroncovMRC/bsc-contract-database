{"Constants.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Pancakeswap.sol\";\r\n\r\nlibrary Constants {\r\n\r\n    IPancakeRouter02 private constant _pancakeRouter = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address private constant _WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address private constant _BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address private constant _STONK = address(0xC2973496E7c568D6EEcBF1d4234A24aa2FD71bd8);\r\n\r\n    function pancakeRouter() internal pure returns (IPancakeRouter02) {\r\n        return _pancakeRouter;\r\n    }\r\n\r\n    function WBNB() internal pure returns (address) {\r\n        return _WBNB;\r\n    }\r\n\r\n    function BUSD() internal pure returns (address) {\r\n        return _BUSD;\r\n    }\r\n\r\n    function STONK() internal pure returns (address) {\r\n        return _STONK;\r\n    }\r\n\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.7.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IWBNB.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWBNB {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function withdraw(uint wad) external;\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"Pancakeswap.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nlibrary PancakeLibrary {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \u0027PancakeLibrary: IDENTICAL_ADDRESSES\u0027);\r\n        (token0, token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \u0027PancakeLibrary: ZERO_ADDRESS\u0027);\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex\u0027ff\u0027,\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex\u0027d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\u0027 // init code hash\r\n            )))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        pairFor(factory, tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IPancakePair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_AMOUNT\u0027);\r\n        require(reserveA \u003e 0 \u0026\u0026 reserveB \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n\r\n        // uniswap\r\n        //uint amountInWithFee = amountIn.mul(997);\r\n\r\n        //pancakeswap\r\n        uint amountInWithFee = amountIn.mul(998);\r\n\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(998);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027PancakeLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i \u003c path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027PancakeLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i \u003e 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: APPROVE_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        require(success, \u0027TransferHelper: ETH_TRANSFER_FAILED\u0027);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n}\r\n"},"StonkFees.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IBEP20.sol\";\r\nimport \"./Pancakeswap.sol\";\r\nimport \"./Constants.sol\";\r\n\r\n/**\r\n *\r\n * STONKS\r\n *\r\n * Coin: 0xC2973496E7c568D6EEcBF1d4234A24aa2FD71bd8\r\n *\r\n * App: https://app.stonks.cash\r\n *\r\n * Website: https://stonks.cash\r\n *\r\n * Telegram: https://t.me/stonksCoinBsc\r\n *\r\n * Created by: https://github.com/fryzjerr\r\n *\r\n * From Yolo Doggins with love \u003c3\r\n */\r\ncontract StonkFees is Ownable {\r\n    string public name = \"StonkFees\";\r\n\r\n    uint8 public fee = 5; // 0.5%\r\n    uint8 public feeSplit = 50; // 50% to stakers 50% to team\r\n\r\n    uint256 public totalFees;\r\n    uint256 public undistributedFees;\r\n\r\n    uint256 public totalUnclaimedFees;\r\n    uint256 public totalStakedStonks;\r\n\r\n    address[] public _unclaimedFeesAddresses;\r\n    mapping(address =\u003e Staker) public unclaimedFees;\r\n\r\n    address[] public stakersAddresses;\r\n    mapping(address =\u003e Staker) public stakers;\r\n\r\n    address teamWallet = 0x2C9CfdACBd6AC05C67CBd800B87a4Af939020Ff9;\r\n\r\n\r\n    struct Staker {\r\n        uint256 amount;\r\n        uint256 arrayIndex;\r\n        int8 exists;\r\n    }\r\n\r\n\r\n    constructor () {\r\n        transferOwnership(tx.origin);\r\n        totalFees = 0;\r\n        undistributedFees = 0;\r\n        totalUnclaimedFees = 0;\r\n        totalStakedStonks = 0;\r\n\r\n        stakers[teamWallet] = Staker(0, 0, 1);\r\n        unclaimedFees[teamWallet] = Staker(0, 0, 1);\r\n    }\r\n\r\n    function changeTeamWallet(address newAddress) external onlyOwner {\r\n        teamWallet = newAddress;\r\n    }\r\n\r\n    function changeTeamWalletAsTeam(address newAddress) external {\r\n        require(msg.sender == teamWallet, \"Caller must be the team address!\");\r\n        teamWallet = newAddress;\r\n    }\r\n\r\n    function changeFee(uint8 newFee) external onlyOwner {\r\n        fee = newFee;\r\n    }\r\n\r\n    function changeFeeSplit(uint8 newFeeSplit) external onlyOwner {\r\n        feeSplit = newFeeSplit;\r\n    }\r\n\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function depositFee(uint256 amount) payable external {\r\n        require(msg.value == amount);\r\n\r\n        totalFees += msg.value;\r\n        undistributedFees += msg.value;\r\n    }\r\n\r\n    /**\r\n    * Takes fee (in BNB) from the address that invoked the transaction\r\n    */\r\n    function takeFee(uint256 orderWorthBNB) public returns (uint256 amount) {\r\n        amount = computeFee(orderWorthBNB);\r\n\r\n        IBEP20(Constants.WBNB()).transferFrom(tx.origin, address(this), amount);\r\n        totalFees = totalFees + amount;\r\n        undistributedFees = undistributedFees + amount;\r\n    }\r\n\r\n    /**\r\n    * Computes fees for given worth in BNB\r\n    */\r\n    function computeFee(uint256 orderWorthBNB) public view returns (uint256) {\r\n        return orderWorthBNB * fee / 1000;\r\n    }\r\n\r\n    /**\r\n    * Computes fees for given worth in BNB\r\n    */\r\n    function computeFeeFromToken(uint256 amountIn, address tokenIn) public view returns (uint256) {\r\n        uint256 amountBNB = getCurrentAmountOut(amountIn, tokenIn, Constants.WBNB());\r\n        return computeFee(amountBNB);\r\n    }\r\n\r\n    /**\r\n    * Returns current amount out from pancakeRouter\r\n    */\r\n    function getCurrentAmountOut(uint256 amountIn, address tokenIn, address tokenOut) internal view returns (uint256 amount) {\r\n        address[] memory tokens = new address[](2);\r\n        tokens[0] = tokenIn;\r\n        tokens[1] = tokenOut;\r\n\r\n        return Constants.pancakeRouter().getAmountsOut(amountIn, tokens)[1];\r\n    }\r\n\r\n    /**\r\n    * Distributes fees from undistributed fees to unclaimed fees mapping\r\n    */\r\n    function distributeFees() public {\r\n        uint teamFees = undistributedFees * feeSplit / 100;\r\n        teamFees = undistributedFees - teamFees;\r\n\r\n        undistributedFees -= teamFees;\r\n        unclaimedFees[teamWallet].amount += teamFees;\r\n\r\n        for (uint i = 0; i \u003c stakersAddresses.length; i++) {\r\n            address stakersAddress = stakersAddresses[i];\r\n\r\n            if (unclaimedFees[stakersAddress].exists == 0) {\r\n                _unclaimedFeesAddresses.push(stakersAddress);\r\n                unclaimedFees[stakersAddress] = Staker(0, _unclaimedFeesAddresses.length - 1, 1);\r\n            }\r\n\r\n            unclaimedFees[stakersAddress].amount += undistributedFees * stakers[stakersAddress].amount / totalStakedStonks;\r\n        }\r\n\r\n        totalUnclaimedFees += teamFees;\r\n        totalUnclaimedFees += undistributedFees;\r\n        undistributedFees = 0;\r\n    }\r\n\r\n    /**\r\n    * Claims dividend for the tx.origin\r\n    */\r\n    function claimDividend() external {\r\n        claimDividendFor(tx.origin);\r\n    }\r\n\r\n    /*\r\n    * Claims dividend for the receiver\r\n    */\r\n    function claimDividendFor(address receiver) public {\r\n        require(unclaimedFees[receiver].amount \u003e 0, \"You have no dividend to claim!\");\r\n\r\n        uint256 amount = unclaimedFees[receiver].amount;\r\n\r\n        payable(receiver).transfer(amount);\r\n\r\n        unclaimedFees[receiver].amount = 0;\r\n\r\n        if (stakers[receiver].exists == 0) {\r\n            removeFromUnclaimedFeesAddresses(unclaimedFees[receiver].arrayIndex);\r\n            unclaimedFees[receiver] = Staker(0, 0, 0);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Claims dividend for everyone\r\n    */\r\n    function claimDividendForAll() external {\r\n        if (unclaimedFees[teamWallet].amount \u003e 0) {\r\n            claimDividendFor(teamWallet);\r\n        }\r\n\r\n        for (uint i = 0; i \u003c _unclaimedFeesAddresses.length; i++) {\r\n            address receiver = _unclaimedFeesAddresses[i];\r\n\r\n            if (unclaimedFees[receiver].amount \u003e 0) {\r\n                claimDividendFor(receiver);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeFromUnclaimedFeesAddresses(uint index) internal {\r\n        _unclaimedFeesAddresses[index] = _unclaimedFeesAddresses[_unclaimedFeesAddresses.length - 1];\r\n        stakers[_unclaimedFeesAddresses[index]].arrayIndex = index;\r\n\r\n        _unclaimedFeesAddresses.pop();\r\n    }\r\n\r\n    /**\r\n    *   Adds coins to the stake to let the adding address claim rewards\r\n    */\r\n    function addStake(uint256 amount) external {\r\n        addStakeFor(amount, tx.origin);\r\n    }\r\n\r\n    /**\r\n    *   Adds coins to the stake to let the adding address claim rewards\r\n    */\r\n    function addStakeFor(uint256 amount, address receiver) public {\r\n        require(\r\n            IBEP20(Constants.STONK()).allowance(tx.origin, address(this)) \u003e= amount,\r\n            \"Not enough allowance!\"\r\n        );\r\n\r\n        uint realAmount = IBEP20(Constants.STONK()).balanceOf(address(this));\r\n\r\n        require(\r\n            IBEP20(Constants.STONK()).transferFrom(tx.origin, address(this), amount),\r\n            \"Transfer went wrong!\"\r\n        );\r\n\r\n        realAmount = IBEP20(Constants.STONK()).balanceOf(address(this)) - realAmount;\r\n\r\n        addStaker(amount, receiver);\r\n    }\r\n\r\n    /**\r\n    *   Adds coins to the stake by buying Stonk for BNB to let the adding address claim rewards.\r\n    *   This method saves fees as it only makes Stonks transfer once.\r\n    */\r\n    function purchaseStake(uint256 amount) payable external {\r\n        require(msg.value == amount, \"Wrong amount!\");\r\n\r\n        uint deadline = block.timestamp + 1000;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(Constants.WBNB());\r\n        path[1] = address(Constants.STONK());\r\n\r\n        uint realAmount = IBEP20(Constants.STONK()).balanceOf(address(this));\r\n\r\n        uint256[] memory amountsOut = Constants.pancakeRouter().swapExactETHForTokens{value : msg.value}(0, path, address(this), deadline);\r\n\r\n        realAmount = IBEP20(Constants.STONK()).balanceOf(address(this)) - realAmount;\r\n\r\n        addStaker(realAmount, tx.origin);\r\n    }\r\n\r\n    /**\r\n    *   Returns all current stakers\r\n    */\r\n    function getStakers() external view returns (address[] memory) {\r\n        return stakersAddresses;\r\n    }\r\n\r\n    /**\r\n    *   Returns stake of given address\r\n    */\r\n    function getStake(address staker) external view returns (uint) {\r\n        return stakers[staker].amount;\r\n    }\r\n\r\n    /**\r\n    *   Returns unclaimed of given address\r\n    */\r\n    function getUnclaimedFeeOf(address staker) external view returns (uint) {\r\n        return unclaimedFees[staker].amount;\r\n    }\r\n\r\n    /**\r\n    *   Withdraws the stake of the tx.origin\r\n    */\r\n    function withdrawStake() external {\r\n        require(stakers[tx.origin].amount \u003e 0, \"You have no stake!\");\r\n\r\n        require(\r\n            IBEP20(Constants.STONK()).transfer(tx.origin, stakers[tx.origin].amount),\r\n            \"Transfer went wrong!\"\r\n        );\r\n\r\n        removeStaker(tx.origin);\r\n    }\r\n\r\n    function addStaker(uint256 amount, address receiver) internal {\r\n        if (stakers[receiver].exists == 0) {\r\n            Staker memory staker;\r\n            stakersAddresses.push(receiver);\r\n\r\n            staker = Staker(amount, stakersAddresses.length - 1, 1);\r\n            stakers[receiver] = staker;\r\n\r\n        } else {\r\n            stakers[receiver].amount = stakers[receiver].amount + amount;\r\n        }\r\n\r\n        totalStakedStonks += stakers[receiver].amount;\r\n    }\r\n\r\n    function removeStaker(address staker) internal {\r\n        totalStakedStonks -= stakers[staker].amount;\r\n\r\n        removeFromStakersAddresses(stakers[staker].arrayIndex);\r\n        stakers[staker] = Staker(0, 0, 0);\r\n    }\r\n\r\n    function removeFromStakersAddresses(uint index) internal {\r\n        if (stakersAddresses.length == 1) {\r\n            delete stakersAddresses;\r\n\r\n        } else {\r\n            stakersAddresses[index] = stakersAddresses[stakersAddresses.length - 1];\r\n            stakers[stakersAddresses[index]].arrayIndex = index;\r\n            stakersAddresses.pop();\r\n        }\r\n    }\r\n}\r\n\r\n"}}