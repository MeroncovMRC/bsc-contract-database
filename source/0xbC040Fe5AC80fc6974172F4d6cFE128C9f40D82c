// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HCE {
    string public name = "HCETEST";
    string public symbol = "HCETEST";
    uint256 public totalSupply = 1000000;

    mapping(address => uint256) public balanceOf;

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        return true;
    }

    function mint(uint256 _amount) public returns (bool success) {
        totalSupply += _amount;
        balanceOf[msg.sender] += _amount;
        return true;
    }

    function burn(uint256 _amount) public returns (bool success) {
        require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
        totalSupply -= _amount;
        balanceOf[msg.sender] -= _amount;
        return true;
    }

    function buyback(uint256 _amount) public returns (bool success) {
        require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
        totalSupply -= _amount;
        balanceOf[msg.sender] -= _amount;
        // TODO: 发送等价的 BNB 给用户
        return true;
    }

    function distribute(address _to, uint256 _amount) public returns (bool success) {
        require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
        balanceOf[msg.sender] -= _amount;
        balanceOf[_to] += _amount;
        return true;
    }
}