// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

interface IBEP20 {

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    constructor() internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this;
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
}

contract MBP_IDO_STAKING is Context, Ownable {
    using SafeMath for uint256;

    // MBP Token address (The Native Token 1)
    address private MBP_TOKEN_ADDRESS = 0xaF2F53cc6cc0384aba52275b0f715851Fb5AFf94;
    // DKS Token address (The Native Token 2)
    address private DKS_TOKEN_ADDRESS = 0x121235cfF4c59EEC80b14c1d38B44e7de3A18287;

    address payable WITHDRAWAL_ADDRESS = 0x014c0fBf5E488cf81876EC350b2Aff32F35C4263;
    
    IBEP20  MBP_TOKEN = IBEP20(
        MBP_TOKEN_ADDRESS
    );
    IBEP20  DKS_TOKEN = IBEP20(
        DKS_TOKEN_ADDRESS
    );

    constructor() public {}
    
    uint32 constant SECONDS_IN_DAY = 86400 seconds;

    mapping(address => uint256) private MBP_AMOUNT_STAKED;
    mapping(address => uint256) private DKS_AMOUNT_STAKED;

    mapping(address => uint256) private MBP_STAKE_DAYS;
    mapping(address => uint256) private DKS_STAKE_DAYS;

    mapping(address => bool) private MBP_STAKED;
    mapping(address => bool) private DKS_STAKED;

    uint256 private MBP_TOTAL_STAKERS = 0;

    uint256 private DKS_TOTAL_STAKERS = 0;
    
    uint256 private MINIMUM_MBP_STAKE = 50_000 * (10**18);
    uint256 private MINIMUM_DKS_STAKE = 50_000 * (10**18);

    uint64 private MINIMUM_DAYS_TO_UNSTAKE = 7;

    function getMinimum_MBP_Stake() external view returns (uint256) {
        return MINIMUM_MBP_STAKE;
    }

    function setMinimum_MBP_Stake(uint256 _minimum_MBP_Stake) external onlyOwner {
        MINIMUM_MBP_STAKE = _minimum_MBP_Stake;
    }

    function getMinimum_DKS_Stake() external view returns (uint256) {
        return MINIMUM_DKS_STAKE;
    }

    function setMinimum_DKS_Stake(uint256 _minimum_DKS_Stake) external onlyOwner {
        MINIMUM_DKS_STAKE = _minimum_DKS_Stake;
    }

    function getMinimumDaysToUnStake() external view returns (uint64) {
        return MINIMUM_DAYS_TO_UNSTAKE;
    }

    function setMinimumDaysToUnStake(uint64 _minimumDaysToUnstake) external onlyOwner {
        MINIMUM_DAYS_TO_UNSTAKE = _minimumDaysToUnstake;
    }

    function getWithdrawalAddress() external view returns (address) {
        return WITHDRAWAL_ADDRESS;
    }

    function setWithdrawalAddress(address payable _addr) external onlyOwner {
        WITHDRAWAL_ADDRESS = _addr;
    }

    function stakeMBP(uint256 _tokenAmount) external {
        require(_tokenAmount >= MINIMUM_MBP_STAKE, "MBP: Stake amount too small. Please try a bigger amount");

        MBP_TOKEN.transferFrom(msg.sender, address(this), _tokenAmount);

        if(!MBP_STAKED[msg.sender]){
            MBP_STAKE_DAYS[msg.sender] = block.timestamp;
            MBP_STAKED[msg.sender] = true;
            MBP_TOTAL_STAKERS = MBP_TOTAL_STAKERS.add(1);
        }

        MBP_AMOUNT_STAKED[msg.sender] = MBP_AMOUNT_STAKED[msg.sender].add(_tokenAmount);
    }

    function stakeDKS(uint256 _tokenAmount) external {
        require(_tokenAmount >= MINIMUM_DKS_STAKE, "MBP: Stake amount too small. Please try a bigger amount");

        DKS_TOKEN.transferFrom(msg.sender, address(this), _tokenAmount);

        if(!DKS_STAKED[msg.sender]){
            DKS_STAKE_DAYS[msg.sender] = block.timestamp;
            DKS_STAKED[msg.sender] = true;
            DKS_TOTAL_STAKERS = DKS_TOTAL_STAKERS.add(1);
        }

        DKS_AMOUNT_STAKED[msg.sender] = DKS_AMOUNT_STAKED[msg.sender].add(_tokenAmount);
    }

    function unstakeMBP(uint256 _tokenAmount) external {
        require(MBP_STAKED[msg.sender], "MBP: You didn't stake MBP");
        require(_tokenAmount <= MBP_AMOUNT_STAKED[msg.sender], "MBP: Amount exceed stake");
        require(_tokenAmount >= MINIMUM_MBP_STAKE, "MBP: Amount too small. Please try a bigger amount");
        require(
            ((block.timestamp - MBP_STAKE_DAYS[msg.sender]) / SECONDS_IN_DAY) >= MINIMUM_DAYS_TO_UNSTAKE, 
            "MBP: Your stake days isn't up to minimum to unstake"
        );

        if((MBP_AMOUNT_STAKED[msg.sender] - _tokenAmount) < MINIMUM_MBP_STAKE){
            _tokenAmount = MBP_AMOUNT_STAKED[msg.sender];
        }

        if(_tokenAmount == MBP_AMOUNT_STAKED[msg.sender]){
            MBP_STAKE_DAYS[msg.sender] = 0;
            MBP_STAKED[msg.sender] = false;
            MBP_TOTAL_STAKERS = MBP_TOTAL_STAKERS.sub(1);
        }

        MBP_AMOUNT_STAKED[msg.sender] = MBP_AMOUNT_STAKED[msg.sender].sub(_tokenAmount);

        MBP_TOKEN.transfer(msg.sender, _tokenAmount);
    }

    function unstakeDKS(uint256 _tokenAmount) external {
        require(DKS_STAKED[msg.sender], "MBP: You didn't stake DKS");
        require(_tokenAmount <= DKS_AMOUNT_STAKED[msg.sender], "MBP: Amount exceed stake");
        require(_tokenAmount >= MINIMUM_DKS_STAKE, "MBP: Amount too small. Please try a bigger amount");
        require(
            ((block.timestamp - DKS_STAKE_DAYS[msg.sender]) / SECONDS_IN_DAY) >= MINIMUM_DAYS_TO_UNSTAKE, 
            "MBP: Your stake days isn't up to minimum to unstake"
        );

        if((DKS_AMOUNT_STAKED[msg.sender] - _tokenAmount) < MINIMUM_DKS_STAKE){
            _tokenAmount = DKS_AMOUNT_STAKED[msg.sender];
        }

        if(_tokenAmount == DKS_AMOUNT_STAKED[msg.sender]){
            DKS_STAKE_DAYS[msg.sender] = 0;
            DKS_STAKED[msg.sender] = false;
            DKS_TOTAL_STAKERS = DKS_TOTAL_STAKERS.sub(1);
        }

        DKS_AMOUNT_STAKED[msg.sender] = DKS_AMOUNT_STAKED[msg.sender].sub(_tokenAmount);

        DKS_TOKEN.transfer(msg.sender, _tokenAmount);
    }

    function MBP_StakeDaysCount(address _addr) external view returns (uint64) {
        if(MBP_STAKED[_addr]){
            return uint64((block.timestamp - MBP_STAKE_DAYS[_addr]) / SECONDS_IN_DAY);
        } else {
            return 0;
        }
    }

    function DKS_StakeDaysCount(address _addr) external view returns (uint64) {
        if(DKS_STAKED[_addr]){
            return uint64((block.timestamp - DKS_STAKE_DAYS[_addr]) / SECONDS_IN_DAY);
        } else {
            return 0;
        }
    }

    function getUserMBPAmountStaked(address _addr) external view returns (uint256) {
        return MBP_AMOUNT_STAKED[_addr];
    }

    function getUserDKSAmountStaked(address _addr) external view returns (uint256) {
        return DKS_AMOUNT_STAKED[_addr];
    }

    function getTotalMBPAmountStaked() external view returns (uint256) {
        return MBP_TOKEN.balanceOf(address(this));
    }

    function getTotalDKSAmountStaked() external view returns (uint256) {
        return DKS_TOKEN.balanceOf(address(this));
    }

    function getTotalStakersMBP() external view returns (uint256) {
        return MBP_TOTAL_STAKERS;
    }

    function getTotalStakersDKS() external view returns (uint256) {
        return DKS_TOTAL_STAKERS;
    }

    function confirmStakeWithDays(
        address _addr, 
        uint256 _stakeAmountMBP, 
        uint256 _stakeAmountDKS, 
        uint64 _days
    ) external view returns (bool) {
        bool passAmount_MBP = MBP_AMOUNT_STAKED[_addr] >= _stakeAmountMBP;
        bool passDays_MBP = ((block.timestamp - MBP_STAKE_DAYS[_addr]) / SECONDS_IN_DAY) >= _days;

        bool passAmount_DKS = DKS_AMOUNT_STAKED[_addr] >= _stakeAmountDKS;
        bool passDays_DKS = ((block.timestamp - DKS_STAKE_DAYS[_addr]) / SECONDS_IN_DAY) >= _days;

        if(MBP_STAKED[_addr] && passAmount_MBP && passDays_MBP){
            return true;
        }

        if(DKS_STAKED[_addr] && passAmount_DKS && passDays_DKS){
            return true;
        }

        return false;
    }

    function confirmStakeWithoutDays(
        address _addr, 
        uint256 _stakeAmountMBP, 
        uint256 _stakeAmountDKS
    ) external view returns (bool) {
        bool passAmount_MBP = MBP_AMOUNT_STAKED[_addr] >= _stakeAmountMBP;

        bool passAmount_DKS = DKS_AMOUNT_STAKED[_addr] >= _stakeAmountDKS;

        if(MBP_STAKED[_addr] && passAmount_MBP){
            return true;
        }

        if(DKS_STAKED[_addr] && passAmount_DKS){
            return true;
        }

        return false;
    }

    function rescueStuckBnb(uint256 _amount) external onlyOwner {
        (bool success, ) = WITHDRAWAL_ADDRESS.call{value: _amount}("");
        require(success);
    } 

    function rescueStuckTokens(address _tokenAddress, uint256 _amount) external onlyOwner {
        IBEP20 BEP20token = IBEP20(_tokenAddress);
        BEP20token.transfer(WITHDRAWAL_ADDRESS, _amount);
    }

}