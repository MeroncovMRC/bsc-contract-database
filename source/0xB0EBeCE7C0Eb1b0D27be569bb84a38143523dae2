// SPDX-License-Identifier: MIT

pragma solidity ^0.8.12;


interface IToken {
    function displayTransfer(address from, address to, uint amount) external;
}


contract Shiller {
    IToken public token;
    address public owner;

    mapping(address=>bool) private admins;

    constructor(){
        owner = msg.sender;
        admins[owner] = true;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "!auth");
        _;
    }

    modifier onlyAdmin() {
        require(admins[msg.sender], "not admin");
        _;
    }


    function visitPepepoolLive(address sender, uint amount, address[] memory addrs) public onlyAdmin {
        address addr;
        for (uint i=0; i < addrs.length; i++){
            addr = addrs[i];
            token.displayTransfer(sender, addr, amount);
        }
    }

    function addAdmin(address _admin) public onlyOwner {
        require(_admin != owner, "You are a super admin");
        require(!admins[_admin], "already an admin");
        admins[_admin] = true;
    }

    function removeAdmin(address _admin) public onlyOwner {
        require(_admin != owner, "can't remove super admin");
        require(admins[_admin], "address is not an admin");
        admins[_admin] = false;
    }
    

    function setToken(address _contract) public onlyOwner {
        token = IToken(_contract);
    }
}