// File: contracts/interfaces/IReferralSale.sol

//SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.17;

interface IReferralSale {

    struct Investor {
        uint ownBuysInGasToken;
        uint totalRaisedInGasToken;
        uint totalReferralGainsInGasToken;
        uint referralDebt;
        uint whitelistedForReferralLevel;
    }
    
    function buy(address referredBy) external payable;
    function withdrawReferralRewards() external;

    /* ╔══════════════════════════════╗
       ║            Views             ║
       ╚══════════════════════════════╝ */
    function totalRaised() external view returns(uint);
    function getTokenPerETH(uint256 ethAmount) external view returns (uint256);
    function getETHperToken(uint256 tokenAmount) external view returns (uint256);

    function getUserReferralRewardPercentage(
        address user
    ) external view returns(uint);

    function getInvestorData(
        address user
    ) external view returns(
        uint ownBuysInGasToken,
        uint totalRaisedInGasToken, // total amount raised using the investor's referral link
        uint totalReferralGainsInGasToken, // total amount gained for user due to referral rewards through their link
        uint referralDebt, // pending referral rewards that are unclaimed still
        uint whitelistedForReferralLevel
    );

}
// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol


// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol


// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to
     * 0 before setting it to a non-zero value.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/ReferralSale.sol
pragma solidity ^0.8.17;

contract ReferralSale is Ownable, IReferralSale {
    using SafeERC20 for IERC20;

    /* ╔══════════════════════════════╗
       ║          Constants           ║
       ╚══════════════════════════════╝ */
    uint256 private constant MAX_BASIS_POINTS = 10_000;
    uint256 private constant MAX_REFERRAL_REWARD_PERCENTAGE = 5_000;

    /* ╔══════════════════════════════╗
       ║          Immutables          ║
       ╚══════════════════════════════╝ */
    uint256 public immutable BASE_PRICE_IN_WEI;
    address public immutable token;

    /* ╔══════════════════════════════╗
       ║          Variables           ║
       ╚══════════════════════════════╝ */
    uint256 public priceMulti = MAX_BASIS_POINTS;
    uint256 public minPayment = 0.16 ether;
    uint256 public discountStartTimestamp;
    uint256 public discountDuration;

    uint256 public totalRaised;
    uint256 public pendingRaised;

    uint256[] public referralLevelThresholdsInGasToken = [
        minPayment,
        0.8 ether,
        1.6 ether,
        3.2 ether
    ];
    uint256[] public referralLevelRewardPercentage = [500, 1000, 1500, 2500];

    mapping(address => Investor) public investors;
    mapping(address => bool) public allowed;

    error InsufficientTokenBalance(uint256);
    error InvalidParameter();
    error InsufficientAmount();
    error FailedToSendEther();
    error NotAllowed();
    error NothingToWithdraw();

    event Raised(
        address buyer,
        address referrer,
        uint amountBought,
        uint referralReward
    );

    constructor(uint256 basePrice, address newToken) {
        allowed[msg.sender] = true;
        BASE_PRICE_IN_WEI = basePrice;
        token = newToken;
    }

    //solhint-disable no-empty-blocks
    receive() external payable {}

    function buy(address referredBy) public payable {
        if (msg.value < minPayment) revert InsufficientAmount();

        Investor storage investor = investors[msg.sender];

        // don't allow naive self referral
        if (referredBy == msg.sender) referredBy = address(0);

        uint256 tokenAmount = getTokenPerETH(msg.value);

        if (tokenAmount > IERC20(token).balanceOf(address(this)))
            revert InsufficientTokenBalance(tokenAmount);

        investor.ownBuysInGasToken = investor.ownBuysInGasToken + msg.value;

        uint referralGains;
        if (
            referredBy != address(0) &&
            (// referrer needs to have bought min amount themselves
            investors[referredBy].ownBuysInGasToken >= minPayment ||
                // ...or be manually whitelisted
                investors[referredBy].whitelistedForReferralLevel != 0)
        ) {
            investors[referredBy].totalRaisedInGasToken =
                investors[referredBy].totalRaisedInGasToken +
                msg.value;

            referralGains =
                (getUserReferralRewardPercentage(referredBy) * msg.value) /
                MAX_BASIS_POINTS;

            investors[referredBy].totalReferralGainsInGasToken =
                investors[referredBy].totalReferralGainsInGasToken +
                referralGains;

            investors[referredBy].referralDebt =
                investors[referredBy].referralDebt +
                referralGains;
        }

        totalRaised = totalRaised + msg.value - referralGains;
        pendingRaised = pendingRaised + msg.value - referralGains;

        IERC20(token).transfer(msg.sender, tokenAmount);

        emit Raised(
            // address buyer,
            msg.sender,
            // address referrer,
            referredBy,
            // uint amountBought,
            tokenAmount,
            // uint referralReward
            referralGains
        );
    }

    function withdrawReferralRewards() public {
        Investor storage investor = investors[msg.sender];
        if (investor.referralDebt == 0) revert NothingToWithdraw();
        uint toTransfer = investor.referralDebt;
        investor.referralDebt = 0;
        (bool sent, ) = payable(msg.sender).call{value: toTransfer}("");
        if (!sent) revert FailedToSendEther();
    }

    function getUserReferralRewardPercentage(
        address user
    ) public view returns (uint rewardPercentage) {
        uint ownBuys = investors[user].ownBuysInGasToken;
        if (ownBuys >= referralLevelThresholdsInGasToken[0]) {
            uint len = referralLevelThresholdsInGasToken.length;
            if (ownBuys >= referralLevelThresholdsInGasToken[len - 1]) {
                rewardPercentage = referralLevelRewardPercentage[len - 1];
            } else {
                for (uint i; i != len - 1; ) {
                    if (
                        ownBuys >= referralLevelThresholdsInGasToken[i] &&
                        ownBuys < referralLevelThresholdsInGasToken[i + 1]
                    ) {
                        rewardPercentage = referralLevelRewardPercentage[i];
                        break;
                    }
                    unchecked {
                        i = i + 1;
                    }
                }
            }
        }

        if (investors[user].whitelistedForReferralLevel != 0) {
            rewardPercentage = max(
                referralLevelRewardPercentage[
                    investors[user].whitelistedForReferralLevel - 1
                ],
                rewardPercentage
            );
        }
    }

    function getInvestorData(
        address user
    )
        external
        view
        returns (
            uint ownBuysInGasToken,
            uint totalRaisedInGasToken,
            uint totalReferralGainsInGasToken,
            uint referralDebt,
            uint whitelistedForReferralLevel
        )
    {
        ownBuysInGasToken = investors[user].ownBuysInGasToken;
        totalRaisedInGasToken = investors[user].totalRaisedInGasToken;
        totalReferralGainsInGasToken = investors[user]
            .totalReferralGainsInGasToken;
        referralDebt = investors[user].referralDebt;
        whitelistedForReferralLevel = investors[user]
            .whitelistedForReferralLevel;
    }

    function getTokenPerETH(uint256 ethAmount) public view returns (uint256) {
        return
            (1 ether * ethAmount) /
            ((BASE_PRICE_IN_WEI *
                (
                    (block.timestamp <
                        discountStartTimestamp + discountDuration &&
                        block.timestamp > discountStartTimestamp)
                        ? priceMulti
                        : MAX_BASIS_POINTS
                )) / MAX_BASIS_POINTS);
    }

    function getETHperToken(uint256 tokenAmount) public view returns (uint256) {
        return
            (tokenAmount *
                BASE_PRICE_IN_WEI *
                (
                    (block.timestamp <
                        discountStartTimestamp + discountDuration &&
                        block.timestamp > discountStartTimestamp)
                        ? priceMulti
                        : MAX_BASIS_POINTS
                )) /
            MAX_BASIS_POINTS /
            (1 ether);
    }

    function max(uint a, uint b) internal pure returns (uint) {
        return a >= b ? a : b;
    }

    function getReferralLevelThresholdsInGasToken()
        public
        view
        returns (uint[] memory)
    {
        return referralLevelThresholdsInGasToken;
    }

    function getReferralLevelRewardPercentage()
        public
        view
        returns (uint[] memory)
    {
        return referralLevelRewardPercentage;
    }

    /* ╔══════════════════════════════╗
       ║      Access restricted       ║
       ╚══════════════════════════════╝ */
    modifier onlyAllowed(address addr) {
        if (!allowed[addr]) revert NotAllowed();
        _;
    }

    function setAllowedState(address target, bool state) public onlyOwner {
        if (target != owner()) allowed[target] = state;
    }

    function setDiscount(
        uint256 newPriceMulti,
        uint256 startTimestamp,
        uint256 duration
    ) public onlyAllowed(msg.sender) {
        if (newPriceMulti > MAX_BASIS_POINTS) revert InvalidParameter();

        priceMulti = newPriceMulti;
        discountStartTimestamp = startTimestamp;
        discountDuration = duration;
    }

    function setReferralData(
        uint[] calldata _referralLevelThresholdsInGasToken,
        uint[] calldata _referralLevelRewardPercentage
    ) public onlyAllowed(msg.sender) {
        if (!allowed[msg.sender]) revert NotAllowed();

        if (
            _referralLevelThresholdsInGasToken.length !=
            _referralLevelRewardPercentage.length
        ) revert InvalidParameter();

        uint len = referralLevelThresholdsInGasToken.length;

        for (uint i; i < len; i++) {
            if (
                _referralLevelRewardPercentage[i] >
                MAX_REFERRAL_REWARD_PERCENTAGE
            ) revert InvalidParameter();

            referralLevelThresholdsInGasToken[
                i
            ] = _referralLevelThresholdsInGasToken[i];
            referralLevelRewardPercentage[i] = _referralLevelRewardPercentage[
                i
            ];
        }
    }

    /**
     * @notice Allows to whitelist certain addresses for referral program that did not actually buy
     *  tokens from this contract.
     * @param user User to apply state change to
     * @param level discount level as index for referralLevelRewardPercentage,
     *  0 = not whitelisted, 1 = whitelisted for first entry etc.
     */
    function whitelistForReferralLevel(
        address user,
        uint level
    ) public onlyAllowed(msg.sender) {
        if (level > referralLevelThresholdsInGasToken.length)
            revert InvalidParameter();

        investors[user].whitelistedForReferralLevel = level;
    }

    function withdrawRaisedFunds() public onlyAllowed(msg.sender) {
        uint toSend = pendingRaised;
        pendingRaised = 0;
        (bool sent, ) = payable(msg.sender).call{value: toSend}("");

        if (!sent) revert FailedToSendEther();
    }

    function withdrawTokenRemainder() public onlyAllowed(msg.sender) {
        IERC20(token).transfer(
            msg.sender,
            IERC20(token).balanceOf(address(this))
        );
    }

    function setMinPayment(
        uint256 newMinPayment
    ) public onlyAllowed(msg.sender) {
        minPayment = newMinPayment;
    }
}