// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

interface IBEP20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

contract PrimaCoin {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 public price;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    constructor() {
        name = "Prima Coin";
        symbol = "PRIMA";
        decimals = 18;
        totalSupply = 1000000000 * 10 ** decimals; 
        balances[msg.sender] = totalSupply;
        price = 250000000000000 wei; 
    }

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(balances[sender] >= amount, "Insufficient balance");
        require(allowances[sender][msg.sender] >= amount, "Insufficient allowance");
        balances[sender] -= amount;
        balances[recipient] += amount;
        allowances[sender][msg.sender] -= amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function buy(uint256 _amount) public payable {
        uint256 cost = _amount * price;
        require(msg.value == cost, "Invalid amount");

        require(balances[msg.sender] + _amount >= balances[msg.sender], "Balance overflow");
        require(balances[msg.sender] + _amount <= totalSupply, "Exceeds total supply");

        balances[msg.sender] += _amount;
        balances[msg.sender] -= cost;
        balances[address(this)] += cost;
        emit Transfer(address(this), msg.sender, _amount);
    }

    function withdraw() public {
        uint256 balance = balances[address(this)];
        require(balance > 0, "Insufficient balance");

        balances[address(this)] = 0;
        balances[msg.sender] += balance;
        emit Transfer(address(this), msg.sender, balance);
    }

    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
}