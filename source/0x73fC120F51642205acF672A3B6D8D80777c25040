// File: contracts/libs/Ownable.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;

contract Ownable {
  address internal owner;
  mapping(address => bool) internal manager;

  constructor() public {
    owner = msg.sender;
    manager[msg.sender] = true;
  }

  modifier onlySafe() {
    require(msg.sender == owner, "permission denied");
    _;
  }

  modifier onlyManager() {
    require(manager[msg.sender], "permission denied");
    _;
  }

  function transferOwnership(address newOwner) public onlySafe {
    if (newOwner != address(0)) {
      owner = newOwner;
    }
  }

  function addManager(address _who) public onlySafe {
    if (manager[_who] == false) {
      manager[_who] = true;
    }
  }

  function removeManager(address _who) public onlySafe {
    if (manager[_who] == true) {
      manager[_who] = false;
    }
  }

  function isOwner(address _who) public view returns (bool) {
    return owner == _who;
  }

  function isManager(address _who) public view returns (bool) {
    return manager[_who];
  }
}

// File: contracts/interfaces/IDoe.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;

contract IDoe {
  function liquidity(address _dtoken, uint256 _tokens) external returns (bool) {}
}

// File: contracts/interfaces/IPause.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;

contract IPause {
  function isPaused() external view returns (bool) {}
}

// File: contracts/interfaces/IToken.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;

contract IToken {
  function WETH() external view returns (address) {}

  function PAIR() external view returns (address) {}

  function V2ROUTER() external view returns (address) {}

  function isToken(address _token) external view returns (bool) {}

  function isErc20(address _token) external view returns (bool) {}

  function dtoken(address _token) external view returns (address) {}

  function getToken(address _token)
    external
    view
    returns (
      address token,
      address d_token,
      address feed,
      uint256 decimals,
      bool is_erc20
    )
  {}

  function maxWithdrawAmount(address _who, address _tokenAddress)
    external
    view
    returns (uint256)
  {}

  function maxBorrowsAmount(address _who, address _tokenAddress)
    external
    view
    returns (uint256)
  {}

  function depositValueOf(address _who) external view returns (uint256) {}

  function depositValueOf(address _who, bool _pv)
    external
    view
    returns (uint256)
  {}

  function borrowsValueOf(address _who) external view returns (uint256) {}

  function borrowsValueOf(address _who, bool _pv)
    external
    view
    returns (uint256)
  {}

  function depositValueTotal() external view returns (uint256) {}

  function depositValueTotal(bool _pv) external view returns (uint256) {}

  function borrowsValueTotal() external view returns (uint256) {}

  function borrowsValueTotal(bool _pv) external view returns (uint256) {}

  function performance(address _who)
    external
    view
    returns (uint256 depositAmount, uint256 borrowsAmount)
  {}

  function performanceTotal()
    external
    view
    returns (uint256 totalDepositValue, uint256 totalBorrowsValue)
  {}
}

// File: contracts/interfaces/IPrice.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;

contract IPrice {
  function getPrice(address _token)
    external
    view
    returns (uint256 price, uint256 priceDecimals)
  {}

  function getDebug() external view returns (bool) {}
}

// File: contracts/interfaces/IUsers.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */

pragma solidity 0.5.12;

contract IUsers {
  function isBlackList(address _who) external view returns (bool) {}

  function getUser(address _who)
    external
    view
    returns (
      address id,
      address pid,
      uint256 level,
      uint256 createdAt
    )
  {}

  function isUser(address _who) external view returns (bool) {}

  function register(address _id, address _pid) external returns (bool) {}

  function setUserLevel(address _who) external returns (bool) {}

  function setLevelParams(
    uint256 _key,
    uint256 _amount,
    uint256 _layer
  ) external {}

  function getUserLevel(address _who)
    external
    view
    returns (uint256 amount, uint256 layer)
  {}

  function getLevel(uint256 level)
    external
    view
    returns (uint256 amount, uint256 layer)
  {}

  function getLastLevel()
    external
    view
    returns (uint256 amount, uint256 layer)
  {}
}

// File: contracts/interfaces/IEvents.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;

contract IEvents {
  function emitRegister(address who, address pid) external {}

  function emitSetUserLevel(address who, uint256 level) external {}

  function emitSetLevelParams(
    uint256 key,
    uint256 layer,
    uint256 amount
  ) external {}

  function emitDeposit(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitWithdraw(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitBorrows(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitRepay(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitLiquidateBorrows(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitLiquidateDeposit(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitLiquidatePenalty(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitSettleInterestDeposit(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitSettleInterestBorrows(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitSetTokenParmas(
    address dtoken,
    uint256 base,
    uint256 give,
    uint256 reserve,
    uint256 borrows,
    uint256 liquidity,
    uint256 penalty,
    uint256 speed
  ) external {}

  function emitMinting(
    address who,
    uint256 tokens,
    uint256 mint
  ) external {}

  function emitPledgeDeposit(
    address sender,
    address pledger,
    uint256 tokens
  ) external {}

  function emitPledgeWithdraw(
    address sender,
    address pledger,
    uint256 tokens
  ) external {}
}

// File: contracts/interfaces/IRouter.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;







// IRouter contract
contract IRouter is IDoe, IPause, IToken, IPrice, IUsers {
  function NOW() external view returns (uint256) {}

  function ETH() external view returns (address) {}

  function DOE() external view returns (address) {}

  function USDT() external view returns (address) {}

  function USER() external view returns (address) {}

  function PAUSE() external view returns (address) {}

  function PLEDGE() external view returns (address) {}

  function TOKEN() external view returns (address) {}

  function PRICE() external view returns (address) {}

  function DEBUG() external view returns (bool) {}

  function DATE() external view returns (uint256) {}

  function MARKET() external view returns (address) {}

  function setDate() external returns (bool) {}

  function pledgeOf(address _who) external view returns (uint256) {}

  function deposit(
    address _who,
    address payable _dtoken,
    uint256 _tokens
  ) external payable returns (bool) {}

  function withdraw(
    address _who,
    address _dtoken,
    uint256 _tokens
  ) external returns (bool) {}

  function borrows(
    address _who,
    address _dtoken,
    uint256 _tokens
  ) external returns (bool) {}

  function repay(
    address _who,
    address payable _dtoken,
    uint256 _tokens
  ) external payable returns (bool) {}

  function emitRegister(address who, address pid) external {}

  function emitSetUserLevel(address who, uint256 level) external {}

  function emitSetLevelParams(
    uint256 key,
    uint256 layer,
    uint256 amount
  ) external {}

  function emitLiquidateBorrows(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitLiquidateDeposit(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitLiquidatePenalty(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitSettleInterestDeposit(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitSettleInterestBorrows(
    address who,
    address dtoken,
    uint256 tokens
  ) external {}

  function emitSetTokenParmas(
    address dtoken,
    uint256 base,
    uint256 give,
    uint256 reserve,
    uint256 _borrows,
    uint256 liquidity,
    uint256 penalty,
    uint256 speed
  ) external {}

  function emitMinting(
    address who,
    uint256 tokens,
    uint256 mint
  ) external {}

  function emitPledgeDeposit(
    address sender,
    address pledger,
    uint256 tokens
  ) external {}

  function emitPledgeWithdraw(
    address sender,
    address pledger,
    uint256 tokens
  ) external {}
}

// File: contracts/libs/DRouter.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;




contract DRouter is Ownable {
  IRouter internal _dRouter;
  uint256 BASE = 1e18;

  function setRouter(address _router) public onlySafe {
    _dRouter = IRouter(_router);
  }
}

// File: contracts/libs/BlackList.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;


contract BlackList is Ownable {
  mapping(address => bool) public isBlackListed;

  modifier isNotBlackList(address _who) {
    require(!isBlackListed[_who], "You are already on the blacklist");
    _;
  }

  function addBlackList(address _who) public onlySafe {
    isBlackListed[_who] = true;
    emit AddedBlackList(_who);
  }

  function removeBlackList(address _who) public onlySafe {
    isBlackListed[_who] = false;
    emit RemovedBlackList(_who);
  }

  event AddedBlackList(address _user);

  event RemovedBlackList(address _user);
}

// File: contracts/libs/ERC20Basic.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;

/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20Basic {
  uint256 public _totalSupply;
  uint256 public decimals;
  string public name;
  string public symbol;

  function totalSupply() external view returns (uint256) {}

  function balanceOf(address who) external view returns (uint256) {}

  function transfer(address to, uint256 value) external returns (bool) {}

  event Transfer(address indexed from, address indexed to, uint256 value);
}

// File: contracts/libs/ERC20.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;


/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender)
    external
    view
    returns (uint256)
  {}

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool){}

  function approve(address spender, uint256 value) external returns (bool) {}

  event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: contracts/libs/Pausable.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;


/**
 * @title Pausable
 * @dev Base contract which allows children to implement an emergency stop mechanism.
 */
contract Pausable is Ownable {
  event Pause();
  event Unpause();

  bool public paused = false;

  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
    require(!paused);
    _;
  }

  /**
   * @dev Modifier to make a function callable only when the contract is paused.
   */
  modifier whenPaused() {
    require(paused);
    _;
  }

  /**
   * @dev called by the owner to pause, triggers stopped state
   */
  function pause() public onlySafe whenNotPaused {
    paused = true;
    emit Pause();
  }

  /**
   * @dev called by the owner to unpause, returns to normal state
   */
  function unpause() public onlySafe whenPaused {
    paused = false;
    emit Unpause();
  }
}

// File: contracts/libs/SafeMath.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0 || b == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b, "ds-math-mul-overflow");
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0, "the dividend must be greater than 0");
    uint256 c = a / b;
    require(a == b * c + (a % b), "ds-math-div-underflow");
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a, "ds-math-sub-underflow");
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0, "ds-math-mod-overflow");
    return a % b;
  }
}

// File: contracts/libs/BasicToken.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;





/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is Ownable, Pausable, ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) public balances;
  mapping(address => uint256) public borrowss;

  // additional variables for use if transaction fees ever became necessary
  uint256 public basisPointsRate = 0;
  uint256 public maximumFee = 0;

  /**
   * @dev Fix for the ERC20 short address attack.
   */
  modifier onlyPayloadSize(uint256 size) {
    require(!(msg.data.length < size + 4));
    _;
  }

  /**
   * @dev transfer token for a specified address
   * @param _to The address to transfer to.
   * @param _value The amount to be transferred.
   */
  function transfer(address _to, uint256 _value)
    public
    onlyPayloadSize(2 * 32)
    returns (bool success)
  {
    require(_value > 0);
    require(_to != address(0));
    
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
   * @dev Gets the balance of the specified address.
   * @param _owner The address to query the the balance of.
   */
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }
}

// File: contracts/libs/StandardToken.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;



/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is BasicToken, ERC20 {
  mapping(address => mapping(address => uint256)) public allowed;

  uint256 public MAX_UINT = 2**256 - 1;

  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint the amount of tokens to be transferred
   */
  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  ) public onlyPayloadSize(3 * 32) returns (bool success) {
    require(_value > 0);
    require(_to != address(0));
    
    uint256 _allowance = allowed[_from][msg.sender];
    allowed[_from][msg.sender] = _allowance.sub(_value);
    
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(_from, _to, _value);
    
    return true;
  }

  function transferTokens(
    address _tokenAddress,
    address _to,
    uint256 _tokens
  ) public onlySafe returns (bool success) {
    require(_tokens > 0);
    ERC20(_tokenAddress).transfer(_to, _tokens);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value)
    public
    onlyPayloadSize(2 * 32)
    returns (bool success)
  {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens than an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   */
  function allowance(address _owner, address _spender)
    public
    view
    returns (uint256 remaining)
  {
    return allowed[_owner][_spender];
  }
}

// File: contracts/DOE.sol

/**
 * Submitted for verification at Etherscan.io on 2021-01-02
 */
pragma solidity 0.5.12;





contract DOE is IDoe, StandardToken, BlackList, DRouter {
  bool internal enableSwap;
  uint256 internal lockTime;
  uint256 internal _maxSupply;

  uint256 internal MINT_WAIT = 0;
  uint256 internal MINT_SUCCESS = 1;
  uint256 internal MINT_FAILURE = 2;

  mapping(address => uint256) internal _mintState; // User mining status

  constructor(address _router) public {
    _dRouter = IRouter(_router);

    decimals = 18;
    name = "Double eagle";
    symbol = "DOE";

    _maxSupply = 30000000 * 10**decimals;
    _totalSupply = 6000000 * 10**decimals;
    balances[owner] = _totalSupply;
    emit Transfer(address(0), owner, _totalSupply);

    lockTime = 10 minutes;
  }

  // Forward ERC20 methods to upgraded contract if this one is deprecated
  function transfer(address _to, uint256 _value)
    public
    whenNotPaused
    returns (bool success)
  {
    require(!isBlackListed[msg.sender]);
    if (_dRouter.DATE().add(1 days) < block.timestamp) {
      require(_dRouter.setDate());
    }

    if (!enableSwap) {
      address _pair = _dRouter.PAIR();
      if (_pair == msg.sender && owner != _to) {
        revert("permission denied");
      }
      if (_pair == _to && owner != msg.sender) {
        revert("permission denied");
      }
    }

    return super.transfer(_to, _value);
  }

  // Forward ERC20 methods to upgraded contract if this one is deprecated
  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  ) public whenNotPaused returns (bool success) {
    require(!isBlackListed[_from]);

    if (_dRouter.DATE().add(1 days) < block.timestamp) {
      require(_dRouter.setDate());
    }
    if (!enableSwap) {
      if (msg.sender == _dRouter.V2ROUTER() && _from != owner) {
        revert("permission denied");
      }
    }
    return super.transferFrom(_from, _to, _value);
  }

  // Forward ERC20 methods to upgraded contract if this one is deprecated
  function balanceOf(address who) public view returns (uint256) {
    return super.balanceOf(who);
  }

  // Forward ERC20 methods to upgraded contract if this one is deprecated
  function approve(address _spender, uint256 _value)
    public
    onlyPayloadSize(2 * 32)
    returns (bool success)
  {
    return super.approve(_spender, _value);
  }

  // Forward ERC20 methods to upgraded contract if this one is deprecated
  function allowance(address _owner, address _spender)
    public
    view
    returns (uint256 remaining)
  {
    return super.allowance(_owner, _spender);
  }

  // deprecate current contract if favour of a new one
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function mintTotal() public view returns (uint256) {
    return totalSupply().sub(6000000 * 10**decimals);
  }

  function liquidity(address _dtoken, uint256 _tokens) public returns (bool) {
    require(msg.sender == _dRouter.TOKEN(), "permission denied");
    address _market = _dRouter.MARKET();
    balances[_market] = balances[_market].sub(_tokens);
    balances[_dtoken] = balances[_dtoken].add(_tokens);
    emit Liquidity(_market, _dtoken, _tokens);
    return true;
  }

  function mintState(address _who) public view returns (bool) {
    if (_mintState[_who] == 0) {
      return true;
    } else {
      if (_mintState[_who].add(lockTime) < block.timestamp) {
        return true;
      }
    }
    return false;
  }

  function minting(uint256 _tokens) public {
    address _who = msg.sender;
    require(_tokens > 1e18);
    require(mintState(_who), "mining settlement, please wait");
    if (_dRouter.isUser(_who) && _totalSupply < _maxSupply) {
      _mintState[_who] = block.timestamp;
    }
    _dRouter.emitMinting(_who, _tokens, MINT_WAIT);
  }

  function minting(
    address _who,
    uint256 _tokens,
    uint256 _type
  ) public onlySafe {
    require(_type == MINT_SUCCESS || _type == MINT_FAILURE);
    require(_tokens > 1e18);
    _mintState[_who] = 0;
    if (_type == MINT_SUCCESS) {
      if (_totalSupply + _tokens > _maxSupply) {
        _tokens = _maxSupply.sub(_totalSupply);
      }
      balances[_who] = balances[_who].add(_tokens);
      _totalSupply = _totalSupply.add(_tokens);
    }
    _dRouter.emitMinting(_who, _tokens, _type);
  }

  function setLockTime(uint256 _time) public onlySafe {
    lockTime = _time;
  }

  function setEnableSwap(bool _enable) public onlySafe {
    enableSwap = _enable;
  }

  event Airdrop(address who, uint256 tokens);

  event Liquidity(address indexed from, address indexed to, uint256 value);
}