{"IBEP20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function LockUserCoin(address user,uint256 amount) external;\r\n    function UnLockCoin(address user,uint256 amount) external;\r\n \r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function burnFrom(address account, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"KZMiner.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity \u003e=0.8.0;\r\nimport \"./IBEP20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./MinerPool.sol\";\r\nimport \"./TransferHelper.sol\";\r\n\r\ncontract KZMiner is Ownable\r\n{\r\n    address _kz;\r\n    address _lp;\r\n    mapping(address=\u003euint256) public _userLockCounta;\r\n    mapping(address=\u003euint256) public _userLockCountb;\r\n    mapping(address=\u003euint256) public _userLockCountc;\r\n    mapping(address=\u003euint256) public _userReleaseCountb;\r\n    mapping(address=\u003euint256) public _dtCounta;\r\n    mapping(address=\u003euint256) public _dtCountb;\r\n    mapping(address=\u003euint256) public _dtCountc;\r\n    mapping(address=\u003emapping(address=\u003euint256)) _dtCountaByUser;\r\n    mapping(address=\u003emapping(address=\u003euint256)) _dtCountbByUser;\r\n    mapping(address=\u003emapping(address=\u003euint256)) _dtCountcByUser;\r\n    mapping(address=\u003euint256) _locktime;\r\n    mapping(address=\u003euint256) _pendinga;\r\n    mapping(address=\u003euint256) _pendingb;\r\n    mapping(address=\u003euint256) _pendingc;\r\n    mapping(address=\u003euint256) _takeda;\r\n    mapping(address=\u003euint256) _takedb;\r\n    mapping(address=\u003euint256) _takedc;\r\n    mapping(address =\u003e address) public _parents;\r\n    mapping(address =\u003e address[]) public _mychilders;\r\n\r\n    using SafeMath for uint256;\r\n    using TransferHelper for address;\r\n\r\n    uint256 public totalcounta;\r\n    uint256 public totalcountb;\r\n    uint256 public totalcountc;\r\n    uint256 public _lasttimechangeA;\r\n    uint256 public _oneshargetA;\r\n    uint256 public _oneshargetB;\r\n    uint256 public _oneshargetC;\r\n    uint256 public _onesecondReward;\r\n    uint256[15] holdneed = [20,60,60,200,200,600,600,600,600,600,2000,2000,2000,2000,2000];\r\n\r\n    MinerPool pool;\r\n    bool public allowlockb;\r\n \r\n    constructor(address kz)\r\n    {\r\n        _kz=kz;\r\n        _parents[address(2)]= address(1);\r\n        _onesecondReward= 21722;\r\n        _onesecondReward= _onesecondReward.mul(1e36).div(86400);\r\n        pool= new MinerPool(_kz,owner());\r\n        allowlockb=true;\r\n    }\r\n\r\n    function setLpAddress(address lp) public onlyOwner\r\n    {\r\n        _lp=lp;\r\n    }\r\n\r\n    function takeOutErrorTransfer(address tokenaddress) public onlyOwner\r\n    {\r\n        IBEP20(tokenaddress).transfer(owner(), IBEP20(tokenaddress).balanceOf(address(this)));\r\n    }\r\n\r\n    function getMinerPool() external view returns(address)\r\n    {\r\n        return address(pool);\r\n    }\r\n\r\n    function setAllowlockb(bool a) public onlyOwner\r\n    {\r\n        allowlockb=a;\r\n    }\r\n\r\n    function setHoldNeed(uint idx,uint256 amount) public onlyOwner \r\n    {\r\n        holdneed[idx]=amount;\r\n    }\r\n\r\n    function bindParet(address parent) external\r\n    {\r\n        address user=msg.sender;\r\n        require(_parents[user] == address(0), \"H\");\r\n        require(parent != address(0), \"I\");\r\n        require(parent != user, \"J\");\r\n        _parents[user] = parent;\r\n        _mychilders[parent].push(user);\r\n    }\r\n\r\n    function getParent(address user) public view returns(address)\r\n    {\r\n        return _parents[user];\r\n    }\r\n\r\n    function getTotalHold(address user) public view returns(uint256)\r\n    {\r\n        return _userLockCounta[user].add(_userLockCountb[user]).sub(_userReleaseCountb[user]);\r\n    }\r\n\r\n    function LockToMineA(uint256 amount) public\r\n    {\r\n        address user= msg.sender;\r\n        require(getParent(user) !=address(0),\"bind\");\r\n        IBEP20(_kz).LockUserCoin(user, amount);\r\n        UserCountAChanged(user,amount,true);\r\n    }\r\n\r\n    function ULockMineA(uint256 amount) public\r\n    {\r\n        address user= msg.sender;\r\n        require(_userLockCounta[user] \u003e=amount,\"amounterror\");\r\n        UserCountAChanged(user,amount,false);\r\n        IBEP20(_kz).UnLockCoin(user, amount);\r\n    }\r\n\r\n    function StackLp(uint256 amount) public\r\n    {\r\n         address user= msg.sender;\r\n        require(getParent(user) !=address(0),\"bind\");\r\n        IBEP20(_lp).transferFrom(user,address(this), amount);\r\n        UserCountCChanged(user,amount,true);\r\n    }\r\n\r\n    function TakeBackLp(uint256 amount) public\r\n    {\r\n        address user= msg.sender;\r\n        require(_userLockCountc[user] \u003e=amount,\"amounterror\");\r\n        UserCountCChanged(user,amount,false);\r\n        IBEP20(_lp).transfer(user, amount);\r\n    }\r\n\r\n    function LockToMineB(uint256 amount) public\r\n    {\r\n        require(allowlockb,\"now allow\");\r\n        TakeBackB();\r\n        address user= msg.sender;\r\n        require(getParent(user) !=address(0),\"\");\r\n        _kz.safeTransferFrom(user, address(this), amount);\r\n        UserCountBChanged(user,amount,true);\r\n    }\r\n\r\n    function getNextReleaseBTime(address user) public view returns(uint256)\r\n    {\r\n        if(_userLockCountb[user]==0)\r\n            return 0;\r\n        uint256 weeksb = (block.timestamp -_locktime[user]) / (7*86400);\r\n        return _locktime[user] + ((weeksb + 1) * 7 * 86400);\r\n    }\r\n\r\n    function getCanTakeBackB(address user) public view returns(uint256)\r\n    {\r\n        if(_userLockCountb[user]==0)\r\n            return 0;\r\n        //每周释放7.5%\r\n        uint256 weeksb = (block.timestamp -_locktime[user]) / (7*86400);\r\n        if(weeksb \u003c=12)\r\n        {\r\n            return _userLockCountb[user].mul(weeksb).mul(75).div(1000).sub(_userReleaseCountb[user]);\r\n        }\r\n        else\r\n            return _userLockCountb[user].sub(_userReleaseCountb[user]);\r\n    }\r\n\r\n    function TakeBackB() public\r\n    {\r\n        address user=msg.sender;\r\n        uint256 cangetback= getCanTakeBackB(user);\r\n        if(cangetback \u003e 0)\r\n        {\r\n            _kz.safeTransfer(user, cangetback);\r\n            UserCountBChanged(user,cangetback,false);\r\n        }\r\n    }\r\n\r\n    function WithDrawCredit() public\r\n    {\r\n        address user=msg.sender;\r\n        uint256 oneshare= getOneshareNowA();\r\n        uint256 credit= getPendingAE(user, oneshare) + getPendingCoinB(user) +getPendingCoinC(user);\r\n        _takeda[user]=oneshare;\r\n        _takedb[user]= _oneshargetB;\r\n        _takedc[user]= _oneshargetC;\r\n        _pendinga[user]=0;\r\n        _pendingb[user]=0;\r\n        _pendingc[user]=0;\r\n        pool.MineOut(user, credit);\r\n    }\r\n\r\n     function getMyChilders(address user)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return _mychilders[user];\r\n    }\r\n\r\n    function AddMineBPool(uint256 amount) public\r\n    {\r\n        require(msg.sender==_kz,\"onlykz\");\r\n        _oneshargetB = _oneshargetB.add(amount.mul(1e18).div(totalcountb));\r\n        _oneshargetC = _oneshargetC.add(amount.mul(2e18).div(totalcountc));\r\n    }\r\n\r\n    function UserCountAChanged(address user,uint256 amount,bool add) private \r\n    {\r\n        uint256 oneshare= getOneshareNowA();\r\n        _pendinga[user]=getPendingAE(user,oneshare);\r\n        _takeda[user]= oneshare;\r\n        if(add)\r\n        {\r\n            uint256 totala=amount;\r\n            _userLockCounta[user]=_userLockCounta[user].add(amount);\r\n            \r\n            address parent=user;\r\n            for(uint i=0;i\u003c15;i++)\r\n            {\r\n                parent=getParent(parent);\r\n                if(parent==address(2) || parent==address(0))\r\n                    break;\r\n                uint256 credit=amount.div(10);\r\n                if(getTotalHold(parent) \u003e= holdneed[i] * 1e18)\r\n                {\r\n                    _pendinga[parent]=getPendingAE(parent,oneshare);\r\n                    _takeda[parent]= oneshare;\r\n                    _dtCounta[parent]=_dtCounta[parent].add(credit);\r\n                    _dtCountaByUser[parent][user]=_dtCountaByUser[parent][user].add(credit);\r\n                    totala=totala.add(credit);\r\n                }\r\n            }\r\n            LogCheckPoint(totala,0,true);\r\n        }\r\n        else\r\n        {\r\n            uint256 totala=amount;\r\n            _userLockCounta[user]=_userLockCounta[user].sub(amount);\r\n            address parent=user;\r\n            for(uint i=0;i\u003c15;i++)\r\n            {\r\n                parent=getParent(parent);\r\n                if(parent==address(2) || parent==address(0))\r\n                    break;\r\n                uint256 credit=amount.div(10);\r\n                if(_dtCountaByUser[parent][user] \u003c credit)\r\n                {\r\n                   credit=_dtCountaByUser[parent][user];\r\n                }\r\n\r\n                if(credit \u003e 0)\r\n                {\r\n                    _pendinga[parent]=getPendingAE(parent,oneshare);\r\n                    _takeda[parent]= oneshare;\r\n                    _dtCounta[parent]=_dtCounta[parent].sub(credit);\r\n                    _dtCountaByUser[parent][user]=_dtCountaByUser[parent][user].subwithlesszero(credit);\r\n                    totala=totala.sub(credit);\r\n                }\r\n            }\r\n            LogCheckPoint(totala,0,false);\r\n        }\r\n    }\r\n\r\n \r\n\r\n    function UserCountBChanged(address user,uint256 amount,bool add) private \r\n    {\r\n        uint256 oneshare= getOneshareNowA();\r\n        _pendinga[user]=getPendingAE(user,oneshare);\r\n        _takeda[user]= oneshare;\r\n        _pendingb[user] = getPendingCoinB(user);\r\n        _takedb[user] = _oneshargetB;\r\n        \r\n        \r\n        if(add)\r\n        {\r\n            uint256 totalb=amount;\r\n            _userLockCountb[user] =  _userLockCountb[user].sub(_userReleaseCountb[user]);\r\n            _userReleaseCountb[user]=0;\r\n            _locktime[user]=block.timestamp;\r\n            _userLockCountb[user]=_userLockCountb[user].add(amount);\r\n     \r\n            address parent=user;\r\n            for(uint i=0;i\u003c15;i++)\r\n            {\r\n                parent=getParent(parent);\r\n                if(parent==address(2) || parent==address(0))\r\n                    break;\r\n                uint256 credit=amount.div(10);\r\n                if(getTotalHold(parent) \u003e= holdneed[i] * 1e18)\r\n                {\r\n                    _pendinga[parent]=getPendingAE(parent,oneshare);\r\n                    _takeda[parent]= oneshare;\r\n                    _pendingb[parent] = getPendingCoinB(parent);\r\n                    _takedb[parent] = _oneshargetB;\r\n\r\n                    _dtCountb[parent]=_dtCountb[parent].add(credit);\r\n                    _dtCountbByUser[parent][user]=_dtCountbByUser[parent][user].add(credit);\r\n                    totalb=totalb.add(credit);\r\n                }\r\n            }\r\n            LogCheckPoint(0,totalb,true);\r\n        }\r\n        else\r\n        {\r\n\r\n             uint256 totalb=amount;\r\n            _userReleaseCountb[user]=_userReleaseCountb[user].add(amount);\r\n            address parent=user;\r\n            for(uint i=0;i\u003c15;i++)\r\n            {\r\n                parent=getParent(parent);\r\n                if(parent==address(2) || parent==address(0))\r\n                    break;\r\n                uint256 credit=amount.div(10);\r\n                if(_dtCountbByUser[parent][user] \u003c credit)\r\n                {\r\n                   credit=_dtCountbByUser[parent][user];\r\n                }\r\n\r\n                if(credit \u003e 0)\r\n                {\r\n                    _pendinga[parent]=getPendingAE(parent,oneshare);\r\n                    _takeda[parent]= oneshare;\r\n                    _pendingb[parent] = getPendingCoinB(parent);\r\n                    _takedb[parent] = _oneshargetB;\r\n                    _dtCountb[parent]=_dtCountb[parent].sub(credit);\r\n                    _dtCountbByUser[parent][user]=_dtCountbByUser[parent][user].subwithlesszero(credit);\r\n                    totalb=totalb.sub(credit);\r\n                }\r\n            }\r\n            LogCheckPoint(0,totalb,false);\r\n        }\r\n    }\r\n\r\n    function UserCountCChanged(address user,uint256 amount,bool add) private \r\n    {\r\n \r\n        _pendinga[user]=getPendingCoinC(user);\r\n        _takedc[user]= _oneshargetC;\r\n        if(add)\r\n        {\r\n            uint256 totalc=amount;\r\n            _userLockCountc[user]=_userLockCountc[user].add(amount);\r\n            \r\n            address parent=user;\r\n            for(uint i=0;i\u003c15;i++)\r\n            {\r\n                parent=getParent(parent);\r\n                if(parent==address(2) || parent==address(0))\r\n                    break;\r\n                uint256 credit=amount.div(10);\r\n                if(getTotalHold(parent) \u003e= holdneed[i] * 1e18)\r\n                {\r\n                    _pendingc[parent]=getPendingCoinC(parent);\r\n                    _takedc[parent]= _oneshargetC;\r\n                    _dtCountc[parent]=_dtCountc[parent].add(credit);\r\n                    _dtCountcByUser[parent][user]=_dtCountcByUser[parent][user].add(credit);\r\n                    totalc=totalc.add(credit);\r\n                }\r\n            }\r\n            totalcountc= totalcountc.add(totalc);\r\n        }\r\n        else\r\n        {\r\n\r\n            uint256 totalc=amount;\r\n            _userLockCountc[user]=_userLockCountc[user].sub(amount);\r\n            address parent=user;\r\n            for(uint i=0;i\u003c15;i++)\r\n            {\r\n                parent=getParent(parent);\r\n                if(parent==address(2) || parent==address(0))\r\n                    break;\r\n                uint256 credit=amount.div(10);\r\n                if(_dtCountcByUser[parent][user] \u003c credit)\r\n                {\r\n                   credit=_dtCountcByUser[parent][user];\r\n                }\r\n\r\n                if(credit \u003e 0)\r\n                {\r\n                    _pendingc[parent]=getPendingCoinC(parent);\r\n                    _takedc[parent]= _oneshargetC;\r\n                    _dtCountc[parent]=_dtCountc[parent].sub(credit);\r\n                    _dtCountcByUser[parent][user]=_dtCountcByUser[parent][user].subwithlesszero(credit);\r\n                    totalc=totalc.sub(credit);\r\n                }\r\n            }\r\n            totalcountc= totalcountc.subwithlesszero(totalc);\r\n        }\r\n    }\r\n\r\n\r\n    function getPendingCoinA(address user) public view returns(uint256)\r\n    {\r\n        return getPendingAE(user,getOneshareNowA());\r\n    }\r\n\r\n    function getPendingCoinB(address user) public  view returns(uint256)\r\n    {\r\n        uint256 myhash=_userLockCountb[user] + _dtCountb[user] - _userReleaseCountb[user];\r\n        uint256 oneshare=_oneshargetB;\r\n        if(myhash\u003e0)\r\n        {\r\n            uint256 cashed=_takedb[user];\r\n            uint256 newp =0;\r\n            if(oneshare \u003e cashed)\r\n               newp = myhash.mul(oneshare.subwithlesszero(cashed)).div(1e18);\r\n            return _pendingb[user].add(newp);\r\n        }\r\n        else\r\n        {\r\n            return _pendingb[user];\r\n        }\r\n    }\r\n\r\n    function getPendingCoinC(address user) public view returns(uint256)\r\n    {\r\n        uint256 myhash=_userLockCountc[user] + _dtCountc[user];\r\n        uint256 oneshare=_oneshargetC;\r\n        if(myhash\u003e0)\r\n        {\r\n            uint256 cashed=_takedc[user];\r\n            uint256 newp =0;\r\n            if(oneshare \u003e cashed)\r\n               newp = myhash.mul(oneshare.subwithlesszero(cashed)).div(1e18);\r\n            return _pendingc[user].add(newp);\r\n        }\r\n        else\r\n        {\r\n            return _pendingc[user];\r\n        }\r\n    }\r\n \r\n    function getPendingAE(address user,uint256 oneshare) public view returns(uint256)\r\n    {\r\n      \r\n        uint256 myhash=_userLockCounta[user] + _dtCounta[user] + _userLockCountb[user] + _dtCountb[user] -_userReleaseCountb[user];\r\n        if(myhash\u003e0)\r\n        {\r\n            uint256 cashed=_takeda[user];\r\n            uint256 newp =0;\r\n            if(oneshare \u003e cashed)\r\n               newp = myhash.mul(oneshare.subwithlesszero(cashed)).div(1e20);\r\n\r\n            return _pendinga[user].add(newp);\r\n        }\r\n        else\r\n        {\r\n            return _pendinga[user];\r\n        }\r\n\r\n    }\r\n\r\n    function getOneshareNowA() public view returns (uint256)\r\n    {\r\n         uint256 oneshare=_oneshargetA;\r\n         if(_lasttimechangeA\u003e0)\r\n         {\r\n             \r\n              if(block.timestamp \u003e _lasttimechangeA)\r\n            {\r\n                uint256 totalhash=totalcounta + totalcountb;\r\n                uint256 addoneshar= _onesecondReward.mul(block.timestamp.sub(_lasttimechangeA)).div(totalhash);\r\n                oneshare= oneshare.add(addoneshar);\r\n            }\r\n         }\r\n         return oneshare;\r\n    }\r\n\r\n \r\n\r\n    function LogCheckPoint(uint256 totala,uint256 totalb,bool add) private\r\n    {\r\n\r\n        if(block.timestamp \u003e _lasttimechangeA)\r\n        {\r\n            uint256 totalhash=totalcounta + totalcountb;\r\n            if(totalhash \u003e 0)\r\n            {\r\n                uint256 addoneshar= _onesecondReward.mul(block.timestamp.sub(_lasttimechangeA)).div(totalhash);\r\n                _oneshargetA = _oneshargetA.add(addoneshar);\r\n            }\r\n            _lasttimechangeA= block.timestamp;\r\n        }\r\n\r\n        if(add)\r\n        {\r\n            totalcounta= totalcounta.add(totala);\r\n            totalcountb=totalcountb.add(totalb);\r\n        }\r\n        else\r\n        {\r\n            totalcounta= totalcounta.subwithlesszero(totala);\r\n            totalcountb=totalcountb.subwithlesszero(totalb);\r\n        }\r\n\r\n    }\r\n}"},"MinerPool.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity \u003e=0.5.0;\r\nimport \"./TransferHelper.sol\";\r\nimport \"./IBEP20.sol\";\r\n \r\ncontract MinerPool\r\n{\r\n    address _miner;\r\n    address _token;\r\n    address _owner;\r\n    using TransferHelper for address;\r\n \r\n    constructor(address tokenaddress,address owner)\r\n    {\r\n        _miner=msg.sender;\r\n        _token=tokenaddress;\r\n        _owner=owner;\r\n    }\r\n\r\n    function SendOut(address to,uint256 amount) public returns(bool)\r\n    {\r\n        require(msg.sender==_owner);\r\n        _token.safeTransfer(to, amount);\r\n        return true;\r\n    }\r\n\r\n \r\n    function MineOut(address to,uint256 amount) public returns(bool){\r\n        require(msg.sender==_miner);\r\n        _token.safeTransfer(to, amount);\r\n        return true;\r\n    }\r\n \r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \u0027SafeMath: addition overflow\u0027);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0027SafeMath: subtraction overflow\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function subwithlesszero(uint256 a,uint256 b) internal pure returns (uint256)\r\n    {\r\n        if(b\u003ea)\r\n            return 0;\r\n        else\r\n            return a-b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0027SafeMath: multiplication overflow\u0027);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0027SafeMath: modulo by zero\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x \u003c y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y \u003e 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x \u003c z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n"},"TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\n// helper methods for interacting with BEP20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: APPROVE_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferBNB(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \u0027TransferHelper: BNB_TRANSFER_FAILED\u0027);\r\n    }\r\n}\r\n"}}