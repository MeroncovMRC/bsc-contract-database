{"Imports.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n  \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;}\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n"},"Verify.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n\n██╗░░░██╗███████╗██████╗░██╗███████╗██╗░░░██╗\n██║░░░██║██╔════╝██╔══██╗██║██╔════╝╚██╗░██╔╝\n╚██╗░██╔╝█████╗░░██████╔╝██║█████╗░░░╚████╔╝░\n░╚████╔╝░██╔══╝░░██╔══██╗██║██╔══╝░░░░╚██╔╝░░\n░░╚██╔╝░░███████╗██║░░██║██║██║░░░░░░░░██║░░░\n░░░╚═╝░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░░░░╚═╝░░░\n                                                                                               \n\n\nVERIFY Tokenomics :\n\nTotal Supply 50 Trillion \n\n10% Total tax\n3% R\u0026D wallet automatically converted to BNB\n3% going into LP automatically\n2% Charity automatically converted to BNB\n2% automatic burn\n\n*/\n\npragma solidity ^0.8.7;\n\nimport \"./Imports.sol\";\n\n\ncontract VERIFY is IERC20Metadata, Ownable {\n    using SafeMath for uint256;\n    \n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n    \n    uint256 private _totalSupply = 50000000000000 * (10**18);\n\n    string private _name = \"VERIFY\";\n    string private _symbol = \"VFY\";\n    uint8 constant _decimals = 18;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n\n    bool private swapping;\n    bool public swapEnabled = true;\n    bool public isInPresale = false;\n\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\n    address public RDWallet = 0x5e2F1A839B46f8D59cb7445d9715B01bC09CD63f;\n    address public charityWallet = 0x952c1079B61A9DE24FBb4c9022aD719e2B270935;\n\n    uint256 public swapTokensAtAmount = 20000000 * (10**18);\n    uint256 public maxBuyTranscationAmount = 250000000000 * (10**18); // 0.5% of total supply\n    uint256 public maxSellTransactionAmount = 250000000000 * (10**18); // 0.5% of total supply\n    uint256 public maxWalletToken = 1000000000000 * (10**18); // 2% of total supply\n\n    uint256 public liquidityFee = 3;\n    uint256 public charityFee = 2;\n    uint256 public RDFee = 3;\n    uint256 public burnFee = 2;\n    uint256 public totalFees = charityFee.add(liquidityFee).add(RDFee).add(burnFee);\n    \n    uint256 internal FEES_DIVISOR = 10**2;\n    \n    mapping(address =\u003e bool) public _isBlacklisted;\n    \n     // exlcude from fees and max transaction amount\n    mapping (address =\u003e bool) private _isExcludedFromFees;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping (address =\u003e bool) public automatedMarketMakerPairs;\n\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\n\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n\n    constructor() {\n        \n        _balances[owner()] = _balances[owner()].add(_totalSupply);\n        \n    \tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n         // Create a uniswap pair for this new token\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2Pair = _uniswapV2Pair;\n\n        // exclude from paying fees or having max transaction amount\n        excludeFromFees(owner(), true);\n        excludeFromFees(charityWallet, true);\n        excludeFromFees(RDWallet, true);\n        excludeFromFees(address(this), true);\n\n        _approve(owner(),address(uniswapV2Router), ~uint256(0));\n        emit Transfer(address(0), address(this), _totalSupply);\n    }\n\n    receive() external payable {\n\n  \t}\n  \t\n  \tfunction name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n    \n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool){\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n        }\n    \n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n    \n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\n        require(newAddress != address(uniswapV2Router), \"The router already has that address\");\n        uniswapV2Router = IUniswapV2Router02(newAddress);\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        require(_isExcludedFromFees[account] != excluded, \"Account is already the value of \u0027excluded\u0027\");\n        _isExcludedFromFees[account] = excluded;\n\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\n        for(uint256 i = 0; i \u003c accounts.length; i++) {\n            _isExcludedFromFees[accounts[i]] = excluded;\n        }\n\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\n    }\n\n    function setRDWallet(address payable wallet) external onlyOwner{\n        RDWallet = wallet;\n    }\n    \n    function setCharityWallet(address payable wallet) external onlyOwner{\n        charityWallet = wallet;\n    }\n    \n     function calcTotalFees() private {\n        totalFees = charityFee.add(liquidityFee).add(RDFee).add(burnFee); \n    }\n\n    function setRDFee(uint256 value) external onlyOwner{\n        RDFee = value;\n        calcTotalFees();\n    }\n\n    function setLiquidityFee(uint256 value) external onlyOwner{\n        liquidityFee = value;\n        calcTotalFees();\n    }\n\n    function setCharityFee(uint256 value) external onlyOwner{\n        charityFee = value;\n        calcTotalFees();\n    }\n    \n    function setBurnFee(uint256 value) external onlyOwner{\n        burnFee = value;\n        calcTotalFees();\n    }\n    \n    function setMaxBuyTransaction(uint256 maxTxn) external onlyOwner {\n  \t    maxBuyTranscationAmount = maxTxn * (10**18);\n  \t}\n  \t\n  \tfunction setMaxSellTransaction(uint256 maxTxn) external onlyOwner {\n  \t    maxSellTransactionAmount = maxTxn * (10**18);\n  \t}\n  \t\n  \tfunction setMaxWalletToken(uint256 maxToken) external onlyOwner {\n  \t    maxWalletToken = maxToken * (10**18);\n  \t}\n\n    function updateSwapTokensAt(uint256 _swaptokens) external onlyOwner {\n        swapTokensAtAmount = _swaptokens * (10**18);\n    }\n    \n    function updateSwapEnabled(bool _enabled) external onlyOwner {\n        swapEnabled  = _enabled;\n    }\n    \n    function switchPresale(bool _enabled) external onlyOwner {\n        require(isInPresale != _enabled, \"Presale is already set to this perimeter.\");\n        isInPresale = _enabled;\n    }\n\n    function blacklistAddress(address account, bool value) external onlyOwner{\n        _isBlacklisted[account] = value;\n    }\n\n    function isExcludedFromFees(address account) public view returns(bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(!_isBlacklisted[from] \u0026\u0026 !_isBlacklisted[to], \u0027Blacklisted address\u0027);\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n         // Buying\n        if (from == uniswapV2Pair \u0026\u0026 !_isExcludedFromFees[to]) {\n            require(amount \u003c= maxBuyTranscationAmount, \"Transfer amount exceeds the maxBuyTxAmount.\");\n        } \n        \n        if ( maxWalletToken \u003e 0 \u0026\u0026 !_isExcludedFromFees[to] \u0026\u0026 !_isExcludedFromFees[from] \u0026\u0026 to != address(uniswapV2Pair) ) {\n                uint256 contractBalanceRecepient = balanceOf(to);\n                require(contractBalanceRecepient + amount \u003c= maxWalletToken, \"Exceeds maximum wallet token amount.\");\n            }\n            \n         // Selling\n         if ( !_isExcludedFromFees[from] \u0026\u0026 to == uniswapV2Pair ) {\n            require(amount \u003c= maxSellTransactionAmount, \"Sell transfer amount exceeds the maxSellTransactionAmount.\");\n        }\n\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n\n        bool canSwap = contractTokenBalance \u003e= swapTokensAtAmount;\n\n        if( canSwap \u0026\u0026 !swapping \u0026\u0026 swapEnabled \u0026\u0026 to == uniswapV2Pair ) {\n            swapping = true;\n            \n            swapAndLiquify(contractTokenBalance);\n            \n            swapping = false;\n        }\n\n\n        bool takeFee = true;\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n        \n        if ( isInPresale ){ takeFee = false; }\n\n        if(takeFee) {\n        \t_takeFees(amount, from);\n        \t\n        \tuint256 fees = amount.mul(totalFees).div(FEES_DIVISOR);\n            amount = amount.sub(fees);\n        }\n        \n        _transferTokens(from, to, amount);\n    }\n    \n    function _transferTokens (address sender, address recipient, uint256 amount) private {\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);   \n    }\n    \n    function _takeFee(uint256 amount, uint256 fee, address sender, address recipient) private {\n        uint256 tAmount = amount.mul(fee).div(FEES_DIVISOR);\n        _balances[recipient] = _balances[recipient].add(tAmount);\n        \n        emit Transfer(sender, recipient, tAmount); \n    }\n    \n    function _takeFees(uint256 amount, address sender) private {\n        _takeFee( amount, liquidityFee, sender, address(this)); // Liquidity fee\n        _takeFee( amount, RDFee, sender, RDWallet); // RD fee\n        _takeFee( amount, charityFee, sender, charityWallet); // Charity fee\n        _takeFee( amount, burnFee, sender, deadWallet); // Burn fee\n    }\n\n    function swapAndLiquify(uint256 tokens) private {\n       // split the contract balance into halves\n        uint256 half = tokens.div(2);\n        uint256 otherHalf = tokens.sub(half);\n\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        swapTokensForEth(half); // \u003c- this breaks the ETH -\u003e HATE swap when swap+liquify is triggered\n\n        // how much ETH did we just swap into?\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n\n        // generate the uniswap pair path of token -\u003e weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(0),\n            block.timestamp\n        );\n    }\n    \n    function TransferBNB(address payable recipient, uint256 amount) external onlyOwner {\n        require(recipient != address(0), \"Cannot withdraw the BNB balance to the zero address\");\n        recipient.transfer(amount);\n    }\n    \n}\n"}}