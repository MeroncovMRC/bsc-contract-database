{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.4;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"BEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\nimport \u0027./IBEP20.sol\u0027;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\n\r\nabstract contract BEP20 is IBEP20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003e uint256) internal _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) internal _allowances;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint256 internal _totalSupply = 0;\r\n    uint8 internal _decimals = 18;\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"CryptoWatchCoin.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./CWC20.sol\";\r\nimport \"./RecordCreation.sol\";\r\n\r\ncontract CryptoWatchCoin is CWC20, RecordCreation {\r\n    using SafeMath for uint256;\r\n    \r\n    constructor() CWC20(50000000) {\r\n        _name = \"Cryptowatch Coin\";\r\n        _symbol = \"CWC\";\r\n    }\r\n}"},"CWC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./CwcStaking.sol\";\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \"./IBEP20.sol\";\r\n\r\nabstract contract CWC20 is CwcStaking {\r\n    using SafeMath for uint256;\r\n\r\n    address private devAddress = 0xE5Bfa38aDFa799c48B01f748f9c1727EF605c0Ec;\r\n    IBEP20 private _addy;\r\n    bool private _firstTx = true; // flag for first tx (as this will be to provide liquidity so don\u0027t want limit)\r\n    uint256 private _burnRate = 150; // 0.15% of tx to be burned\r\n    uint256 private _devRate = 50; // 0.15% of tx to be given to dev address\r\n    uint256 private _distributeRatio = 4; // 1:18 ratio of burn:distribute\r\n    uint256 private _totalBurnt;\r\n    uint32 private _maxTxPercent = 500; // max size as % of supply as percentage to 1d.p, eg 50 = 5.0%\r\n\r\n    /**\r\n     * Mint tx sender with initial supply\r\n     */\r\n    constructor(uint256 supply) {\r\n        uint256 amount = supply * uint256(10 ** _decimals);\r\n        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        updateHoldersTransferRecipient(_msgSender()); // ensure receiver is set as sender\r\n        emit Transfer(address(0), _msgSender(), amount);\r\n    }\r\n    \r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function getTotalBurnt() external view returns (uint256) {\r\n        return _totalBurnt;\r\n    }\r\n    \r\n    function getBurnRate() public view returns (uint256) {\r\n        return _burnRate;\r\n    }\r\n\r\n    function getDevRate() public view returns (uint256) {\r\n        return _devRate;\r\n    }\r\n\r\n     function getDistributionRatio() public view returns (uint256) {\r\n         return _distributeRatio;\r\n     }\r\n    \r\n    function setBurnRate(uint256 newRate) external onlyOwner {\r\n        require(newRate \u003c 500);\r\n        _burnRate = newRate;\r\n    }\r\n\r\n    function setDevRate(uint256 newRate) external onlyOwner {\r\n        require(newRate \u003c 500);\r\n        _devRate = newRate;\r\n    }\r\n    \r\n    function setDistributionRatio(uint256 newRatio) external onlyOwner {\r\n        require(newRatio \u003e= 1);\r\n        _distributeRatio = newRatio;\r\n    }\r\n\r\n        /**\r\n     * Burns transaction amount as per burn rate \u0026 returns remaining transfer amount. \r\n     */\r\n    function _txBurn(address account, uint256 txAmount, bool isDevRecipient, bool isPresale) internal returns (uint256) {\r\n        if (isDevRecipient) {\r\n            return txAmount;\r\n        }\r\n        if (isPresale) {\r\n            return txAmount;\r\n        }\r\n        uint256 toBurn = txAmount.mul(_burnRate).div(10000).div(_distributeRatio);\r\n        uint256 toDistribute = toBurn.mul(_distributeRatio.sub(1));\r\n        uint256 toDev = txAmount.mul(_devRate).div(10000);\r\n        \r\n        _distribute(account, toDistribute);\r\n        _burn(account, toBurn);\r\n        _transferFrom(account, devAddress, toDev);\r\n        \r\n        return txAmount.sub(toBurn).sub(toDistribute).sub(toDev);\r\n    }\r\n    \r\n    /**\r\n     * Burn amount tokens from sender\r\n     */\r\n    function burn(uint256 amount) public {\r\n        require(_balances[_msgSender()] \u003e= amount);\r\n        _burn(_msgSender(), amount);\r\n    }\r\n    \r\n    /**\r\n     * Burns amount of tokens from account\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0027BEP20: burn from the zero address\u0027);\r\n        if(amount == 0){ return; }\r\n        \r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _totalBurnt = _totalBurnt.add(amount);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        \r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    /**\r\n     * Ensure tx size is within allowed % of supply\r\n     */\r\n    function checkTxAmount(uint256 amount) internal {\r\n        if(_firstTx) {\r\n            _firstTx = amount == 0 ? true : false;\r\n            return;\r\n        } // skip first tx as this will be providing 100% as liquidity\r\n        require(amount \u003c= _totalSupply.mul(_maxTxPercent).div(1000), \"Tx size exceeds limit\");\r\n    }\r\n    \r\n    /**\r\n     * Change the max tx size percent. Required to be from 1% to 100%\r\n     */\r\n    function setMaxTxPercent(uint32 amount) external onlyOwner {\r\n        require(amount \u003e 10 \u0026\u0026 amount \u003c 1000, \"Invalid max tx size\");\r\n        _maxTxPercent = amount;\r\n    }\r\n    \r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"Can\u0027t transfer from zero\");\r\n        require(recipient != address(0), \"Can\u0027t transfer to zero\");\r\n        \r\n        // ensure tx size is below limit\r\n        checkTxAmount(amount); \r\n\r\n        require(_balances[sender] \u003e= amount, \"Not enough balance\");\r\n\r\n        bool isDevRecipient = recipient == devAddress;\r\n        bool isPresale = sender == address(_addy);\r\n        \r\n        // require allowance if sender is not transaction creator\r\n        if(!isDevRecipient \u0026\u0026 !isPresale \u0026\u0026 sender != _msgSender()) {\r\n            _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()].sub(amount, \"Not enough allowance\");\r\n        }\r\n        // burn \u0026 distribute\r\n        uint256 sendAmt = _txBurn(sender, amount, isDevRecipient, isPresale);\r\n        \r\n        // transfer\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(sendAmt);\r\n        \r\n        // update holders\r\n        updateHoldersTransferSender(sender);\r\n        updateHoldersTransferRecipient(recipient);\r\n        \r\n        \r\n        emit Transfer(sender, recipient, sendAmt);\r\n    }\r\n    \r\n\r\n    function _approve (address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \u0027BEP20: approve from the zero address\u0027);\r\n        require(spender != address(0), \u0027BEP20: approve to the zero address\u0027);\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n         _transferFrom(_msgSender(), recipient, amount);\r\n         return true;\r\n     }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transferFrom(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Bulk execute transfers\r\n     */\r\n    function multiTransfer(address[] memory accounts, uint256[] memory amounts) external {\r\n        require(accounts.length == amounts.length, \"Accounts \u0026 amounts must be same length\");\r\n        for(uint256 i=0; i\u003caccounts.length; i++){\r\n            _transferFrom(_msgSender(), accounts[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \u0027BEP20: decreased allowance below zero\u0027));\r\n        return true;\r\n    }\r\n\r\n    function setPresaleAddress(address addy) external onlyOwner {\r\n        _addy = IBEP20(addy);\r\n    }\r\n}"},"CwcStaking.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IBEP20.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./BEP20.sol\";\r\nimport \"./ICwcStaking.sol\";\r\nimport \"./SafeBep20.sol\";\r\nimport \"./HolderController.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\nabstract contract CwcStaking is ICwcStaking, BEP20, HolderController, Ownable {\r\n    using SafeBEP20 for IBEP20;\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Struct for holding record of account stakes.\r\n     */\r\n    struct Stake {\r\n        uint256 LP; // Amount of LP tokens staked\r\n        uint256 excludedAmt; // Amount of staking rewards to exclude from returns (if claimed or staked after)\r\n        uint256 realised; // realised rewards\r\n    }\r\n\r\n    mapping (address =\u003e Stake) _stakes;\r\n    \r\n    IBEP20 private _pair;\r\n    bool private _pairInitialized;\r\n    uint256 private _totalFees;\r\n    uint256 private _totalLP;\r\n    uint256 private _totalRealised;\r\n\r\n    /**\r\n     * Require pair address to be set\r\n     */\r\n    modifier pairInitialized() {\r\n        require(_pairInitialized);\r\n        _;\r\n    }\r\n    \r\n    function getTotalStaked() external override view returns (uint256) {\r\n        return _totalLP;\r\n    }\r\n    \r\n    function getTotalFees() external override view returns (uint256) {\r\n        return _totalFees;\r\n    }\r\n    \r\n    function getStake(address account) public override view returns (uint256) {\r\n        return _stakes[account].LP;\r\n    }\r\n    \r\n    function getEarnings(address staker) external override view returns (uint256) {\r\n        return _stakes[staker].realised; // realised gains\r\n    }\r\n    \r\n    function getUnrealisedEarnings(address staker) external view returns (uint256) {\r\n        return earnt(staker);\r\n    }\r\n    \r\n    function stake(uint256 amount) external override pairInitialized {\r\n        _stake(msg.sender, amount);\r\n    }\r\n    \r\n    function unstake(uint256 amount) external override pairInitialized {\r\n        _unstake(msg.sender, amount);\r\n    }\r\n    \r\n    /**\r\n     * Return Cake-LP pair address\r\n     */\r\n    function getPairAddress() external view override returns (address) {\r\n        return address(_pair);\r\n    }\r\n    \r\n    function forceUnstakeAll() external override onlyOwner {\r\n        for(uint256 i=0; i\u003c_holders.length; i++){\r\n            uint256 amt = getStake(_holders[i]);\r\n            if(amt \u003e 0){\r\n                _unstake(_holders[i], amt); \r\n            }\r\n        }\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        //Add outstanding staking rewards to balance\r\n        return _balances[account];\r\n    }\r\n    \r\n    /**\r\n     * Convert unrealised staking gains into actual balance\r\n     */\r\n    function realise() public {\r\n        _realise(msg.sender);\r\n    }\r\n    \r\n    function _realise(address account) internal {\r\n        if (getStake(account) != 0){\r\n            uint256 amount = earnt(account);\r\n            _balances[account] = _balances[account].add(amount);\r\n            _stakes[account].realised = _stakes[account].realised.add(amount);\r\n            _totalRealised = _totalRealised.add(amount);\r\n        }\r\n        _stakes[account].excludedAmt = _totalFees;\r\n    }\r\n    \r\n    /**\r\n     * Calculate current outstanding staking gains\r\n     */\r\n    function earnt(address account) internal view returns (uint256) {\r\n        if (_stakes[account].excludedAmt == _totalFees || _stakes[account].LP == 0) {\r\n            return 0;\r\n        }\r\n        uint256 availableFees = _totalFees.sub(_stakes[account].excludedAmt);\r\n        uint256 share = availableFees.mul(_stakes[account].LP).div(_totalLP); // won\u0027t overflow as even totalsupply^2 is less than uint256 max\r\n        return share;\r\n    }\r\n    \r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    /**\r\n     * Stake amount LP from account\r\n     */\r\n    function _stake(address account, uint256 amount) internal {\r\n        // uint256 amount2 = multiply(amount, (10 ** 18));\r\n        _pair.transferFrom(account, address(this), amount);\r\n        \r\n        \r\n        // realise staking gains now (also works to set excluded amt to current total rewards)\r\n        _realise(account); \r\n        \r\n        // add to current address\u0027 stake\r\n        _stakes[account].LP = _stakes[account].LP.add(amount);\r\n        _totalLP = _totalLP.add(amount);\r\n        \r\n        // ensure staker is recorded as holder\r\n        updateHoldersStaked(account);\r\n        \r\n        emit Staked(account, amount);\r\n    }\r\n    \r\n    /**\r\n     * Unstake amount for account\r\n     */\r\n    function _unstake(address account, uint256 amount) internal {\r\n        require(_stakes[account].LP \u003e= amount);\r\n        \r\n        _realise(account);\r\n        \r\n        // remove stake\r\n        _stakes[account].LP = _stakes[account].LP.sub(amount);\r\n        _totalLP = _totalLP.sub(amount);\r\n        \r\n        // send LP tokens back\r\n        \r\n        // uint256 amount2 = multiply(amount, (10 ** 18));\r\n        _pair.transfer(account, amount);\r\n        \r\n        // check if sender is no longer a holder\r\n        updateHoldersUnstaked(account);\r\n        \r\n        emit Unstaked(account, amount);\r\n    }\r\n    \r\n    /**\r\n     * Distribute amount to stakers.\r\n     */\r\n    function distribute(uint256 amount) external {\r\n        _realise(msg.sender);\r\n        require(_balances[msg.sender] \u003e= amount);\r\n        \r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _distribute(msg.sender, amount);\r\n    }\r\n    \r\n    /**\r\n     * Distribute amount from account as transaction fee\r\n     */\r\n    function _distribute(address account, uint256 amount) internal {\r\n        _totalFees = _totalFees.add(amount);\r\n        emit FeesDistributed(account, amount);\r\n    }\r\n    \r\n    /**\r\n     * Check if account is holding in context of transaction sender\r\n     */\r\n    function updateHoldersTransferSender(address account) internal {\r\n        if( !isStillHolding(account)) {\r\n            removeHolder(account); \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Check if account is still holding in context of transaction recipient\r\n     */\r\n    function updateHoldersTransferRecipient(address account) internal {\r\n        if (!isHolder(account)) {\r\n            addHolder(account);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Check if account is holding in context of staking tokens\r\n     */\r\n    function updateHoldersStaked(address account) internal {\r\n        if (!isHolder(account)) {\r\n            addHolder(account);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Check if account is still holding in context of unstaking tokens\r\n     */\r\n    function updateHoldersUnstaked(address account) internal {\r\n        if (!isStillHolding(account)) {\r\n            removeHolder(account);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Check if account has a balance or a stake\r\n     */\r\n    function isStillHolding(address account) internal view returns (bool) {\r\n        return balanceOf(account) \u003e 0 || getStake(account) \u003e 0;\r\n    }\r\n    \r\n    /**\r\n     * Set the pair address.\r\n     * Don\u0027t allow changing whilst LP is staked (as this would prevent stakers getting their LP back)\r\n     */\r\n    function setPairAddress(address pair) external onlyOwner {\r\n        require(_totalLP == 0, \"Cannot change pair whilst there is LP staked\");\r\n        _pair = IBEP20(pair);\r\n        _pairInitialized = true;\r\n    }\r\n}"},"HolderController.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\n\r\nabstract contract HolderController {\r\n    \r\n    /**\r\n     * Struct for storing holdings data\r\n     */\r\n    struct Holding {\r\n        bool holding; // whether address is currently holding\r\n        uint256 adrIndex; // index of address in holders array\r\n    }\r\n    \r\n    address[] internal _holders;\r\n    mapping (address =\u003e Holding) internal _holdings;\r\n    uint256 internal _holdersCount;\r\n    \r\n    function getHolders() public view returns (address[] memory) {\r\n        return _holders;\r\n    }\r\n    \r\n    function getHoldersCount() public view returns (uint256) {\r\n        return _holdersCount;\r\n    }\r\n    \r\n    function isHolder(address holder) public view returns (bool) {\r\n        return _holdings[holder].holding;\r\n    }\r\n    \r\n    function addHolder(address account) internal {\r\n        _holdings[account].holding = true;\r\n        _holdings[account].adrIndex = _holders.length;\r\n        _holders.push(account);\r\n        _holdersCount++;\r\n    }\r\n\r\n    function removeHolder(address account) internal {\r\n        _holdings[account].holding = false;\r\n        \r\n        uint256 i = _holdings[account].adrIndex;\r\n        _holders[i] = _holders[_holders.length-1];\r\n        _holders.pop();\r\n        _holdings[_holders[i]].adrIndex = i;        \r\n        _holdersCount--;\r\n    }\r\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens onlyOwner by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"ICwcStaking.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\n\r\ninterface ICwcStaking {\r\n\r\n    function forceUnstakeAll() external;\r\n    function getEarnings(address staker) external view returns (uint256);\r\n    function getPairAddress() external view returns (address);\r\n    function getStake(address staker) external view returns (uint256);\r\n    function getTotalFees() external view returns (uint256);\r\n    function getTotalStaked() external view returns (uint256);\r\n    function stake(uint256 amount) external;\r\n    function unstake(uint256 amount) external;\r\n    \r\n    event FeesDistributed(address account, uint256 amount);\r\n    event Staked(address account, uint256 amount);\r\n    event Unstaked(address account, uint256 amount);\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity \u003e=0.7.4;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n"},"Migrations.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.4.22 \u003c0.9.0;\n\ncontract Migrations {\n  address public owner = msg.sender;\n  uint public last_completed_migration;\n\n  modifier restricted() {\n    require(\n      msg.sender == owner,\n      \"This function is restricted to the contract\u0027s owner\"\n    );\n    _;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.4;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"RecordCreation.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\n\r\nabstract contract RecordCreation {\r\n    uint256 public creationBlock;\r\n    uint256 public creationTimestamp;\r\n    \r\n    constructor(){\r\n        creationBlock = block.number;\r\n        creationTimestamp = block.timestamp;\r\n    }\r\n}"},"SafeBep20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.6.0 \u003c0.8.0;\r\n\r\nimport \u0027./IBEP20.sol\u0027;\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \u0027SafeBEP20: approve from non-zero to non-zero allowance\u0027\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \u0027SafeBEP20: decreased allowance below zero\u0027\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \u0027SafeBEP20: low-level call failed\u0027);\r\n        if (returndata.length \u003e 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \u0027SafeBEP20: BEP20 operation did not succeed\u0027);\r\n        }\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c \u003c a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b \u003e a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a % b;\n    }\n}"},"Tokensale.sol":{"content":"// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./CryptoWatchCoin.sol\";\r\nimport \"./IBEP20.sol\";\r\n\r\ncontract Tokensale {\r\n    address payable admin;\r\n    CryptoWatchCoin public tokenContract;\r\n    uint256 public tokenPrice;\r\n    uint256 public tokensSold;\r\n\r\n    event Sell(address _buyer, uint256 _amount);\r\n\r\n    constructor(CryptoWatchCoin _tokenContract, uint256 _tokenPrice) {\r\n        admin = msg.sender;\r\n        tokenContract = _tokenContract;\r\n        tokenPrice = _tokenPrice;\r\n    }\r\n\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function buyTokens(uint256 _numberOfTokens) public payable { \r\n        uint256 convertedValue = multiply(_numberOfTokens, tokenPrice);\r\n        require(msg.value == div(convertedValue, (10 ** 18)));\r\n        require(tokenContract.balanceOf(address(this)) \u003e= _numberOfTokens);\r\n        require(tokenContract.transfer(msg.sender, _numberOfTokens));\r\n\r\n        tokensSold += _numberOfTokens;\r\n\r\n        emit Sell(msg.sender, _numberOfTokens);\r\n    }\r\n\r\n    function endSale() public payable {\r\n        require(msg.sender == admin);\r\n        uint256 amount = div(tokenContract.balanceOf(address(this)), (10 ** 18));\r\n        require(tokenContract.transfer(admin, amount));\r\n        tokensSold = 0;\r\n        admin.transfer(address(this).balance);\r\n    }\r\n}"}}