
// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: contracts/zhpool/interfaces/ILock.sol
// SPDX-License-Identifier: MIT
interface ILock {
    function locking(address account, uint256 lock) external;
}


// File: contracts/zhpool/zhAsdicPool.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "./interfaces/ILock.sol";

contract ZHASDICPOOL {
    using SafeMath for uint;
    enum opreate {
        stake,
        upStake,
        claim
    }
    struct StakedInfo {
        uint index;
        uint stakedAmount;
        uint updateTime;
        uint available;
        uint accruedReward;
    }
    struct recordInfo {
        uint lpAmount;
        uint stakeTime;
        uint endTime;
    }

    StakedInfo public globalStakedInfo;
    mapping(address => StakedInfo) public userStakedInfos;

    mapping(address => recordInfo[]) public record;

    uint public startTime;
    uint public yearHalfCount;
    uint public yearHalfAmount = 2000000e18;

    uint public subHalfTime = 365 days;

    address public owner;
    IERC20 public asdic;
    ILock public lock;
    IERC20 public token;

    constructor(address _token, address _asdic, address _lock) {
        owner = msg.sender;
        asdic = IERC20(_asdic);
        lock = ILock(_lock);
        token = IERC20(_token);

        IERC20(asdic).approve(address(lock), type(uint).max);
    }

    function getRecordInfos(
        address account
    ) external view returns (recordInfo[] memory) {
        return record[account];
    }

    function setSubHalfTime(uint _time) external {
        require(msg.sender == owner, "No owner to set the time");
        subHalfTime = _time;
    }

    function takeToken(uint index, uint amount) external {
        address sender = msg.sender;
        uint cTime = block.timestamp;
        uint lpValue;

        recordInfo[] storage info = record[sender];
        require(info.length > index, "Take lp error for index too long");
        require(
            info[index].lpAmount >= amount,
            "Take lp error for exceed balance"
        );
        require(
            info[index].endTime <= cTime,
            "Take lp error for exceed the time"
        );
        uint time = info[index].endTime.sub(info[index].stakeTime).div(1 days);
        if (time == 60) {
            lpValue = amount;
        }
        if (time == 90) {
            lpValue = amount.mul(150).div(100);
        }
        if (time == 120) {
            lpValue = amount.mul(2);
        }
        info[index].lpAmount = info[index].lpAmount.sub(amount);

        if (info[index].lpAmount == 0) {
            info[index] = info[info.length - 1];
            info.pop();
        }

        updateIndex(opreate.upStake, lpValue);
        updateUserIndex(sender, opreate.upStake, lpValue);

        token.transfer(sender, amount);
    }

    function halfYear() internal returns (uint) {
        require(subHalfTime > 0, "SubHalf time error");
        startTime = startTime == 0 ? block.timestamp : startTime;
        uint yearCount = (block.timestamp - startTime).div(subHalfTime);

        if (yearHalfCount <= yearCount) {
            yearHalfCount = yearCount + 1;

            yearHalfAmount = yearHalfAmount.div(2);
        }

        return yearHalfAmount.div(subHalfTime);
    }

    function getHalfYear() internal view returns (uint) {
        if (yearHalfAmount == 0) {
            return 0;
        }
        return yearHalfAmount.div(subHalfTime);
    }

    function claim() public {
        address sender = msg.sender;
        updateIndex(opreate.claim, 0);
        updateUserIndex(sender, opreate.claim, 0);

        StakedInfo storage userStakedInfo = userStakedInfos[sender];

        if (userStakedInfo.available > 0) {
            uint temp = userStakedInfo.available;
            IERC20(asdic).transfer(sender, temp.mul(30).div(100));
            ILock(lock).locking(sender, temp.mul(70).div(100));
            userStakedInfo.accruedReward += temp;
            userStakedInfo.available = 0;
        }
    }

    function updateIndex(opreate _oprea, uint lpAmount) internal {
        StakedInfo storage info = globalStakedInfo;
        if (info.updateTime == 0 || info.stakedAmount == 0) {
            info.updateTime = block.timestamp;
            info.stakedAmount += lpAmount;
            halfYear();
            return;
        }
        uint release = halfYear();

        release = release.mul(block.timestamp - info.updateTime);

        release = release.mul(1e18);

        release = release.div(info.stakedAmount);

        info.index += release;

        if (_oprea == opreate.stake) {
            info.stakedAmount += lpAmount;
        }
        if (_oprea == opreate.upStake) {
            info.stakedAmount -= lpAmount;
        }

        info.updateTime = block.timestamp;
    }

    function awaitGetAmount(address user) external view returns (uint) {
        StakedInfo memory infoGlo = globalStakedInfo;
        StakedInfo memory infoUser = userStakedInfos[user];

        uint secRelease = getHalfYear();

        if (infoGlo.stakedAmount == 0) return 0;

        uint _time = block.timestamp.sub(infoGlo.updateTime);

        uint _amount = _time.mul(secRelease);

        _amount = _amount.mul(1e18);

        _amount = _amount.div(infoGlo.stakedAmount);

        uint _gloIndex = infoGlo.index.add(_amount);

        uint value = _gloIndex.sub(infoUser.index);

        value = value.mul(infoUser.stakedAmount);

        value = value.div(1e18);

        value = value.add(infoUser.available);

        return (value);
    }

    function updateUserIndex(
        address user,
        opreate _oprea,
        uint lpAmount
    ) internal {
        StakedInfo storage info = userStakedInfos[user];

        info.updateTime = block.timestamp;

        uint value = info.stakedAmount.mul(globalStakedInfo.index - info.index);

        value = value / 1e18;

        if (value != 0) {
            info.available += value;
        }

        if (_oprea == opreate.stake) {
            info.stakedAmount += lpAmount;
        }
        if (_oprea == opreate.upStake) {
            info.stakedAmount -= lpAmount;
        }

        info.index = globalStakedInfo.index;
    }

    function stake(uint _amount, uint _days) external {
        address sender = msg.sender;
        _stake(sender, _amount, _days);
    }

    function _stake(address _sender, uint _amount, uint _days) internal {
        require(
            IERC20(token).balanceOf(_sender) >= _amount,
            "Asdic balance of error"
        );
        require(
            _days == 60 days || _days == 90 days || _days == 120 days,
            "deposit days error"
        );
        uint asAmount;
        if (_days == 60 days) {
            asAmount = _amount;
        }
        if (_days == 90 days) {
            asAmount = _amount.mul(150).div(100);
        }
        if (_days == 120 days) {
            asAmount = _amount.mul(2);
        }

        record[_sender].push(
            recordInfo({
                lpAmount: _amount,
                stakeTime: block.timestamp,
                endTime: block.timestamp + _days
            })
        );
        updateIndex(opreate.stake, asAmount);
        updateUserIndex(_sender, opreate.stake, asAmount);

        IERC20(token).transferFrom(_sender, address(this), _amount);
    }
}

