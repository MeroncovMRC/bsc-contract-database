
// File: /contracts/TrustLaunchServicesToken.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

pragma solidity 0.8.17;

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface ITrustLaunchAdmins  {
    function isAllowed(address _address, uint256 actionCode) external view returns (bool allowed);
    function isMichaelOrJan(address _address) external view returns (bool allowed);
    function getAddress(uint256 index) external view returns (address addr);
    function isAdminsContract() external pure returns (bool response);

}

pragma solidity 0.8.17;
contract Ownable is Context {
    address private _initialOwner;
    address public _trustLaunchAdmins;

    ITrustLaunchAdmins public trustLaunchAdminsContract;

    function setAdminsContractAddress( address newAddr) public {
        require(trustLaunchAdminsContract.isMichaelOrJan(_msgSender()), "bad sender");
        trustLaunchAdminsContract = ITrustLaunchAdmins(newAddr);
        require(trustLaunchAdminsContract.isAdminsContract(), "bad contract");
        _trustLaunchAdmins = newAddr;
    }


    modifier onlyAdminsContract() {
        require(_trustLaunchAdmins == _msgSender(), "Ownable: caller is not AdminContract");
        _;
    }



    constructor () {
        address msgSender = _msgSender();
        _initialOwner = msgSender;
        if( block.chainid == 97) {
            _trustLaunchAdmins = address(0x4a05D94995cAE2c06797b39ee7fDB27a94375Cf6);
            trustLaunchAdminsContract = ITrustLaunchAdmins(_trustLaunchAdmins);
        }
        if( block.chainid == 56) {
            _trustLaunchAdmins = address(0xd3aE3EA3daEa54145D6B6Eec9F0260c28ff2E850);
            trustLaunchAdminsContract = ITrustLaunchAdmins(_trustLaunchAdmins);
        }
        require(trustLaunchAdminsContract.isAdminsContract(), "bad contract");
    }
    function Michael() public view returns (address) {
        return trustLaunchAdminsContract.getAddress(0);
    }
    function Jan() public view returns (address) {
        return trustLaunchAdminsContract.getAddress(1);
    }
    function initialOwner() public view returns (address) {
        return _initialOwner;
    }

    modifier onlyMichael(){
        address msgSender = _msgSender();
        require(trustLaunchAdminsContract.getAddress(0) == msgSender, "Only Michael can call this function");
        _;
    }

    modifier onlyJan(){
        address msgSender = _msgSender();
        require(trustLaunchAdminsContract.getAddress(1) == msgSender, "Only Jan can call this function");
        _;
    }


    modifier onlyOwner() {
        address msgSender = _msgSender();
        require(trustLaunchAdminsContract.isMichaelOrJan(msgSender), "Ownable: caller is not one of allowed owners");
        _;
    }
}

contract ReentrancyGuard {
  bool private rL = false;
  modifier nonReentrant() {
    require(!rL);
    rL = true;
    _;
    rL = false;
  }
}

interface ITrustEvents {
function addEventAllData(uint256 eventTypeId,
        uint256[] memory numbers,
        bool[] memory booleans,
        address[] memory addresses,
        string[] memory strings,
        uint256 _hash,
        uint256 ts
        ) external;
}

interface ITrustLaunchFees  {
    function getFeeData(uint256 optionId) external view returns (bool active, uint256 fee, address feeReceiver);
    function getFeeDataSE(uint256 optionId, address sender) external view returns (bool active, uint256 fee, address feeReceiver);
}

abstract contract WalletDetector {
    function _ow() private view{
        require(msg.sender == tx.origin, "Reverting, Method can only be called directly by user.");
    }

    modifier onlyWallet() {
        _ow();
        _;
    }
}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}



interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}




contract TrustLaunchServicesToken is Ownable,ReentrancyGuard,WalletDetector {
    using SafeMath for uint256;

    struct PaymentOption {
        string name;
        bool active;
        bool autoSendPayout;

        uint256 paymentDivider;
        address paymentReceiver; 
        uint256 minimalPaymentAmount;
        uint256 currentAmount;
        uint256 paidAmount;
        uint256 lastPayout;
        bool moveToUnused;
    }

    mapping(uint256 => PaymentOption) public paymentOptions;

    mapping(uint256 => PaymentOption) public JanOffer;
    mapping(uint256 => PaymentOption) public MichaelOffer;

    mapping(address => bool) public whitelisted;
    bool public useWhitelist = false;
    mapping(address => uint256) public minimalFee;

    uint256 public paymentOptionsCounter = 0;
    uint256 public unusedBalance = 0;
    bool public autoRun = true;
    uint256 public feeIndex = 0;
    uint256 public eventIndex = 4;
    bool public useFixedFee = false;
    address public _tokenAddress;
    IERC20 public _tokenAddressContract;
    string public serviceName = "Audit USDT Service";
    uint256 public percentMinAmount = 990;

    event PaymentReceived(address indexed sender, uint256 value);
    ITrustEvents private TrustEventsContract;
    ITrustLaunchFees private tlf;

    IUniswapV2Router02 private _uniswapV2Router;
    IUniswapV2Factory private _uniswapV2Factory;
    address private uniswapRouter;



    uint256 private MAX_INT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;

    function isWhitelisted(address addr) public view returns (bool _isWhitelisted) {
        return whitelisted[addr];
    }
    function setWhitelisted(address addr, bool _isWhitelisted) external onlyOwner {
        whitelisted[addr] = _isWhitelisted;
    }

    function setUseWhitelist(bool _useWhitelist) external onlyOwner {
        useWhitelist = _useWhitelist;
    }
    function setMinimalFee(address addr, uint256 _minimalFee) external onlyOwner {
        minimalFee[addr] = _minimalFee;
    }

    function getAddressData(address addr) external view returns( bool _isWhitelisted, uint256 _minimalFee) {
        return (whitelisted[addr], minimalFee[addr]);
    }



    function setAddress(uint256 _index, address newAddr) external onlyAdminsContract {
       if( _index == 1) { //fees
            tlf = ITrustLaunchFees(newAddr);
        }
        if( _index == 8) { //events
            TrustEventsContract = ITrustEvents(newAddr);
        }
    }

    function setPercentMinAmount(uint256 val) external onlyOwner {
        percentMinAmount=val;
    }

    function setTokenAddress(address newAddr) external onlyOwner {
       _tokenAddress = newAddr;
       _tokenAddressContract = IERC20(newAddr);
    }

    function _st(
        IERC20 Itoken,
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        uint256 oldRecipientBalance = Itoken.balanceOf(recipient);
        Itoken.transferFrom(sender, recipient, amount);
        uint256 newRecipientBalance = Itoken.balanceOf(recipient);
        require(
            newRecipientBalance - oldRecipientBalance == amount,
            "E63"
        );
    }


    function recoverTokens(address tokenAddress, address receiver) external onlyOwner {
        IERC20(tokenAddress).approve(address(this), MAX_INT);
        IERC20(tokenAddress).transferFrom(
                            address(this),
                            receiver,
                            IERC20(tokenAddress).balanceOf(address(this))
        );
    }

    function recoverETH(address receiver) external onlyOwner {
        (bool success,) = payable(receiver).call{value: address(this).balance}("");
        require(success, "E40");
    }




    constructor() {
        _addPaymentOption("TrustLaunchTeam");
        uint256 optionId = 0;
        paymentOptions[optionId].active = true;
        paymentOptions[optionId].paymentDivider = 1000;
        paymentOptions[optionId].paymentReceiver = 0x16E1aF57Bf0dc6bF7a86A418F8df33B75eEe0E0a;
        paymentOptions[optionId].autoSendPayout = true;

        if( block.chainid == 97) {
                uniswapRouter = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; //testnet
        }
        else {
                uniswapRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //mainnet
        }
        _uniswapV2Router = IUniswapV2Router02(uniswapRouter);
        _uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());


    }

    receive() external payable {}
    fallback() external payable {}

    function _addPaymentOption(string memory name) private {
        paymentOptions[paymentOptionsCounter].name = name;
        paymentOptions[paymentOptionsCounter].active = false;
        paymentOptions[paymentOptionsCounter].paymentDivider = 0;
        paymentOptionsCounter++;
    }

    function addPaymentOption(string memory name) external onlyOwner {
        _addPaymentOption(name);
    }

    function setIndexes(uint256 _feeIndex, uint256 _eventIndex, bool _useFixedFee) public onlyOwner{
        feeIndex = _feeIndex;
        eventIndex = _eventIndex;
        useFixedFee = _useFixedFee;
    }

    function setServiceName(string memory newName) public onlyOwner {
        serviceName = newName;
    }

    function swapTokensForEth(uint256 tokenAmount) private returns (uint256 howManyReceived) {
        address[] memory path = new address[](2);
        path[0] = _tokenAddress;
        path[1] = _uniswapV2Router.WETH();

        uint256 oldRecipientBalance = address(this).balance;


        uint256 currentPrice = getPriceDirect(_tokenAddress, _uniswapV2Router.WETH(), tokenAmount)[1];
        uint256 minPrice = currentPrice.mul(percentMinAmount).div(1000);
        _tokenAddressContract.approve(address(_uniswapV2Router), MAX_INT);
        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            minPrice, 
            path,
            address(this),
            block.timestamp
        );

        uint256 newRecipientBalance = address(this).balance;
        return newRecipientBalance.sub(oldRecipientBalance);
    }

    function getPriceDirect(address firstAddress, address secondAddress, uint256 inAmount) public view returns (uint256[] memory amounts) {
        address[] memory path = new address[](2);
        path[0] = firstAddress;
        path[1] = secondAddress;
        return _uniswapV2Router.getAmountsOut(inAmount, path);
    }

    function buyFixed(string memory notes) public nonReentrant onlyWallet {
        require (useFixedFee, "this contract uses fixed fee!");
        if( useWhitelist) {
            require(whitelisted[msg.sender], "You cannot use this contract");
        }

        uint256 amount = 0;
        (bool active, uint256 fee,) = tlf.getFeeDataSE(feeIndex, msg.sender);
        if( active) {
            amount = fee;
        }

        _st(_tokenAddressContract, msg.sender, address(this), amount);
        uint256 receivedBalance = swapTokensForEth(amount);
        unusedBalance = unusedBalance.add(receivedBalance);
        if(autoRun) {
            _runPayments();
        }
        uint256[] memory _data = new uint256[](2);
        _data[0] = amount;
        _data[1] = receivedBalance;
        bool[] memory _bool = new bool[](1);
        address[] memory _addresses = new address[](1);
        _addresses[0] = msg.sender;
        string[] memory _strings = new string[](1);
        _strings[0] = notes;
        TrustEventsContract.addEventAllData(eventIndex, _data, _bool, _addresses, _strings, 0, block.timestamp);
    }


    function buy(uint256 amount, string memory notes) public nonReentrant onlyWallet {
        require (!useFixedFee, "this contract uses fixed fee!");
        if( useWhitelist) {
            require(whitelisted[msg.sender], "You cannot use this contract");
        }
        require(amount >= minimalFee[msg.sender], "Bad amount");

        _st(_tokenAddressContract, msg.sender, address(this), amount);
        uint256 receivedBalance = swapTokensForEth(amount);
        unusedBalance = unusedBalance.add(receivedBalance);
        if(autoRun) {
            _runPayments();
        }
        uint256[] memory _data = new uint256[](2);
        _data[0] = amount;
        _data[1] = receivedBalance;
        bool[] memory _bool = new bool[](1);
        address[] memory _addresses = new address[](1);
        _addresses[0] = msg.sender;
        string[] memory _strings = new string[](1);
        _strings[0] = notes;
        TrustEventsContract.addEventAllData(eventIndex, _data, _bool, _addresses, _strings, 0, block.timestamp);
    }

    function _runPayments() private {
        //divide unused balance into all active receivers
        uint256 a = 0;
        uint256 initialValue = unusedBalance;
        uint256 remainigValue = unusedBalance;

        for( a = 0; a < paymentOptionsCounter; a++){
            if( paymentOptions[a].active && remainigValue > 0 && paymentOptions[a].paymentDivider > 0) {
                uint256 paymentPart = initialValue.mul(paymentOptions[a].paymentDivider).div(1000);
                if(paymentPart > remainigValue) {
                    paymentPart = remainigValue;
                }
                remainigValue = remainigValue.sub(paymentPart);
                paymentOptions[a].currentAmount = paymentOptions[a].currentAmount.add(paymentPart);
            }
        }

        //what we did not divided, it is new unused balance, and we will use it later
        unusedBalance = remainigValue;

        for(a = 0; a < paymentOptionsCounter; a++) {
            if( paymentOptions[a].autoSendPayout && paymentOptions[a].currentAmount > 0 && paymentOptions[a].currentAmount >= paymentOptions[a].minimalPaymentAmount) {
                _dopayout(a);
            }
        }
    }

    function _dopayout(uint256 a) private {
        (bool success,) = payable(paymentOptions[a].paymentReceiver).call{value: paymentOptions[a].currentAmount}("");
        require(success, "Failed to send!");
        paymentOptions[a].paidAmount = paymentOptions[a].paidAmount.add(paymentOptions[a].currentAmount);
        paymentOptions[a].currentAmount = 0;
        paymentOptions[a].lastPayout = block.timestamp;
    }

    function doManualPayout(uint256 option) external {
            require( msg.sender == paymentOptions[option].paymentReceiver || msg.sender == Jan() || msg.sender == Michael(), "You are not allowed to call");
            if( paymentOptions[option].currentAmount > 0) {
                _dopayout(option);
            }
    }

    function setAutoRun(bool run) external onlyOwner {
            autoRun=run;
    }



    function runPayments() external onlyOwner {
        _runPayments();
    }

    function compareStrings(string memory str1, string memory str2) public pure returns (bool) {
        return keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));
    }

    function verifySameOffer(uint256 optionId) private {
        if(
            compareStrings(JanOffer[optionId].name,MichaelOffer[optionId].name) && 
            JanOffer[optionId].paymentDivider == MichaelOffer[optionId].paymentDivider && 
            JanOffer[optionId].active == MichaelOffer[optionId].active && 
            JanOffer[optionId].paymentReceiver == MichaelOffer[optionId].paymentReceiver && JanOffer[optionId].paymentReceiver != address(0) &&
            JanOffer[optionId].minimalPaymentAmount == MichaelOffer[optionId].minimalPaymentAmount &&
            JanOffer[optionId].autoSendPayout == MichaelOffer[optionId].autoSendPayout
        ){
            paymentOptions[optionId].active = JanOffer[optionId].active;
            paymentOptions[optionId].paymentDivider = JanOffer[optionId].paymentDivider;
            paymentOptions[optionId].paymentReceiver = JanOffer[optionId].paymentReceiver;
            paymentOptions[optionId].name = JanOffer[optionId].name;
            paymentOptions[optionId].minimalPaymentAmount = JanOffer[optionId].minimalPaymentAmount;
            paymentOptions[optionId].autoSendPayout = JanOffer[optionId].autoSendPayout;
        }

        if( block.chainid == 97) {
            paymentOptions[optionId].active = JanOffer[optionId].active;
            paymentOptions[optionId].paymentDivider = JanOffer[optionId].paymentDivider;
            paymentOptions[optionId].paymentReceiver = JanOffer[optionId].paymentReceiver;
            paymentOptions[optionId].name = JanOffer[optionId].name;
            paymentOptions[optionId].minimalPaymentAmount = JanOffer[optionId].minimalPaymentAmount;
            paymentOptions[optionId].autoSendPayout = JanOffer[optionId].autoSendPayout;
        }
    }


    function verifyMove(uint256 optionId) private {
        if(
            JanOffer[optionId].moveToUnused &&
            JanOffer[optionId].moveToUnused == MichaelOffer[optionId].moveToUnused 
        ){
            unusedBalance = unusedBalance.add(paymentOptions[optionId].currentAmount);
            paymentOptions[optionId].currentAmount = 0;
            JanOffer[optionId].moveToUnused = false;
            MichaelOffer[optionId].moveToUnused = false;
        }
    }

    function setMichaelOption(uint256 optionId, uint256 minimalPaymentAmount, bool autoSendPayout) external onlyMichael {
        require( paymentOptions[optionId].paymentReceiver == Michael(), "Bad caller"); 
        paymentOptions[optionId].minimalPaymentAmount = minimalPaymentAmount;
        if( autoSendPayout == false) {
            paymentOptions[optionId].autoSendPayout = autoSendPayout;
        }
    }

    function setJanOption(uint256 optionId, uint256 minimalPaymentAmount, bool autoSendPayout) external onlyJan {
        require( paymentOptions[optionId].paymentReceiver == Jan(), "Bad caller") ;
        paymentOptions[optionId].minimalPaymentAmount = minimalPaymentAmount;
        if( autoSendPayout == false) {
            paymentOptions[optionId].autoSendPayout = autoSendPayout;
        }
    
    }


    function setJanOffer(uint256 optionId, bool active, bool autoSendPayout, uint256 minimalPaymentAmount, uint256 paymentDivider, address paymentReceiver , string memory name) external onlyJan {
        JanOffer[optionId].active = active;
        JanOffer[optionId].autoSendPayout = autoSendPayout;
        JanOffer[optionId].paymentDivider = paymentDivider;
        JanOffer[optionId].paymentReceiver = paymentReceiver;
        JanOffer[optionId].minimalPaymentAmount = minimalPaymentAmount;
        JanOffer[optionId].name = name;
        verifySameOffer(optionId);
    }

    function moveToUnusedJan(uint256 optionId, bool move) external onlyJan {
        JanOffer[optionId].moveToUnused = move;
        verifyMove(optionId);
    }

    function setMichaelOffer(uint256 optionId, bool active, bool autoSendPayout, uint256 minimalPaymentAmount, uint256 paymentDivider, address paymentReceiver, string memory name) external onlyMichael {
        MichaelOffer[optionId].active = active;
        MichaelOffer[optionId].autoSendPayout = autoSendPayout;
        MichaelOffer[optionId].paymentDivider = paymentDivider;
        MichaelOffer[optionId].paymentReceiver = paymentReceiver;
        MichaelOffer[optionId].minimalPaymentAmount = minimalPaymentAmount;
        MichaelOffer[optionId].name = name;

        verifySameOffer(optionId);
    }
    function moveToUnusedMichael(uint256 optionId, bool move) external onlyMichael {
        MichaelOffer[optionId].moveToUnused = move;
        verifyMove(optionId);
    }

    function getPaymenteInfo(uint256 id) external view returns (PaymentOption memory) {
        return paymentOptions[id];
    }
    function getJanInfo(uint256 id) external view returns (PaymentOption memory) {
        return JanOffer[id];
    }
    function getMichaelInfo(uint256 id) external view returns (PaymentOption memory) {
        return MichaelOffer[id];
    }



}

