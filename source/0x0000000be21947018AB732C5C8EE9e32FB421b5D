/*                                                                                     
`7MM"""Yp,     `7MM"""Mq.        db      `7MN.   `7MF'`7MMF'`7MMF'   `7MF'`7MMM.     ,MMF'
  MM    Yb       MM   `MM.      ;MM:       MMN.    M    MM    MM       M    MMMb    dPMM  
  MM    dP       MM   ,M9      ,V^MM.      M YMb   M    MM    MM       M    M YM   ,M MM  
  MM"""bg.       MMmmdM9      ,M  `MM      M  `MN. M    MM    MM       M    M  Mb  M' MM  
  MM    `Y mmmmm MM  YM.      AbmmmqMA     M   `MM.M    MM    MM       M    M  YM.P'  MM  
  MM    ,9       MM   `Mb.   A'     VML    M     YMM    MM    YM.     ,M    M  `YM'   MM  
.JMMmmmd9      .JMML. .JMM..AMA.   .AMMA..JML.    YM  .JMML.   `bmmmmd"'  .JML. `'  .JMML.
                                                                                          
https://b-ranium.com/
https://t.me/b_ranium
https://twitter.com/b_ranium

☢️1.000.000 tokens supply
☢️100BNB PinkSale Presale

✅Only 8% transaction taxes

🔥The first BSC token with tokenomics based on a real life phenomenon, implemented into a custom smart-contract.

*/
//SPDX-License-Identifier: MIT

pragma solidity ^0.8.12;

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IDEXFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IDEXRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

abstract contract Auth {
    address internal owner;
    mapping (address => bool) internal authorizations;

    constructor(address _owner) {
        owner = _owner;
        authorizations[_owner] = true;
    }

    modifier onlyOwner() {
        require(isOwner(msg.sender), "!OWNER"); _;
    }

    modifier authorized() {
        require(isAuthorized(msg.sender), "!AUTHORIZED"); _;
    }

    function authorize(address adr) public onlyOwner {
        authorizations[adr] = true;
    }

    function unauthorize(address adr) public onlyOwner {
        authorizations[adr] = false;
    }

    function isOwner(address account) public view returns (bool) {
        return account == owner;
    }

    function isAuthorized(address adr) public view returns (bool) {
        return authorizations[adr];
    }

    function transferOwnership(address payable adr) public onlyOwner {
        owner = adr;
        authorizations[adr] = true;
        emit OwnershipTransferred(adr);
    }

    event OwnershipTransferred(address owner);
}

contract BRANIUM is IBEP20, Auth {

    using SafeMath for uint256;

    string constant _name = "B-RANIUM";
    string constant _symbol = "$BRN";
    uint8 constant _decimals = 9;

    address DEAD = 0x000000000000000000000000000000000000dEaD;
    address ZERO = 0x0000000000000000000000000000000000000000;
    address routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address constructorOwner = 0xfeFd7785A5b9da2b624622d366dfcf1388587d26;
    address public pinkSaleContract = 0x000000000000000000000000000000000000dEaD;


    uint256 _totalSupply = 1 * 10**6 * (10 ** _decimals);
    uint256 public _walletMax = _totalSupply * 2 / 100;

    mapping (address => uint256) _balances;
    mapping (address => mapping (address => uint256)) _allowances;

    mapping (address => bool) public isFeeExempt;
    mapping (address => bool) public isTxLimitExempt;
    mapping (address => bool) public isHalfLifeExempt;
    mapping (address => uint256) public lastSell;
    mapping (address => bool) public isSecured;

    uint256 public teamFee = 3;
    uint256 public marketingFee = 5;
    uint256 public extraFeeOnSell = 0;

    uint256 public totalFee = 0;
    uint256 public totalFeeIfSelling = 0;
    uint256 public halfLife = 36000;

    address public teamWallet;
    address public marketingWallet;

    IDEXRouter public router;
    address public pair;

    uint256 public launchedAt;
    bool public activeHalfLife = true;

    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;
    bool public swapAndLiquifyByLimitOnly = false;

    uint256 public swapThreshold = _totalSupply * 1 / 200;

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor () Auth(constructorOwner) {

        router = IDEXRouter(routerAddress);
        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));
        _allowances[address(this)][address(router)] = 2**256-1;

        isFeeExempt[constructorOwner] = true;
        isFeeExempt[address(this)] = true;

        isTxLimitExempt[constructorOwner] = true;
        isTxLimitExempt[pair] = true;
        isTxLimitExempt[DEAD] = true;


        isHalfLifeExempt[constructorOwner] = true;
        isHalfLifeExempt[pair] = true;
        isHalfLifeExempt[address(this)] = true;

        teamWallet = 0x6F7A8B439f16D3E1011D2283E57932459B959438;
        marketingWallet = 0x453e4A40084E4D6374Ab47a77518F39de3890758;


        totalFee = marketingFee.add(teamFee);
        totalFeeIfSelling = totalFee.add(extraFeeOnSell);

        _balances[constructorOwner] = _totalSupply;
        emit Transfer(address(0), constructorOwner, _totalSupply);
    }

    receive() external payable { }

    function name() external pure override returns (string memory) { return _name; }
    function symbol() external pure override returns (string memory) { return _symbol; }
    function decimals() external pure override returns (uint8) { return _decimals; }
    function totalSupply() external view override returns (uint256) { return _totalSupply; }
    function getOwner() external view override returns (address) { return owner; }

    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));
    }

    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function approveMax(address spender) external returns (bool) {
        return approve(spender, 2**256-1);
    }

    function launched() internal view returns (bool) {
        return launchedAt != 0;
    }

    function launch() external authorized {
        launchedAt = block.number;
    }

    function changePinkSaleContract(address newAddress) external authorized{
        pinkSaleContract = newAddress;
        isFeeExempt[newAddress] = true;
        isHalfLifeExempt[newAddress] = true;
        isTxLimitExempt[newAddress] = true;
    }

    function changeWalletLimit(uint256 newLimit) external authorized {
        _walletMax  = newLimit * (10 ** _decimals);
    }

    function changeIsSecured(address holder, bool newStatus) external authorized {
        isSecured[holder] = newStatus;
    }


    function changeLastSell(address holder, uint256 newValue) external authorized{
        lastSell[holder] = newValue;
    }

    function changeHalfLife(uint256 newDuration) external authorized{
        halfLife = newDuration;
    }
    function changeHalfLifeExempt(address wallet, bool newStatus) external authorized {
        isHalfLifeExempt[wallet] = newStatus;
    }

    function changeIsFeeExempt(address holder, bool exempt) external authorized {
        isFeeExempt[holder] = exempt;
    }

    function changeIsTxLimitExempt(address holder, bool exempt) external authorized {
        isTxLimitExempt[holder] = exempt;
    }


    function changeActiveHalfLife(bool newStatus) external authorized{
        activeHalfLife = newStatus;
    }

    function changeFees(uint256 newTeamFee, uint256 newMarketingFee, uint256 newExtraSellFee) external authorized {
        teamFee = newTeamFee;
        marketingFee = newMarketingFee;
        extraFeeOnSell = newExtraSellFee;

        totalFee = marketingFee.add(teamFee);
        totalFeeIfSelling = totalFee.add(extraFeeOnSell);
    }

    function changeFeeReceivers(address newTeamWallet, address newMarketingWallet) external authorized {
        teamWallet = newTeamWallet;
        marketingWallet = newMarketingWallet;
    }

    function changeSwapBackSettings(bool enableSwapBack, uint256 newSwapBackLimit, bool swapByLimitOnly) external authorized {
        swapAndLiquifyEnabled  = enableSwapBack;
        swapThreshold = newSwapBackLimit;
        swapAndLiquifyByLimitOnly = swapByLimitOnly;
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        return _transferFrom(msg.sender, recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {

        if(_allowances[sender][msg.sender] != 2**256-1){
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, "Insufficient Allowance");
        }
        return _transferFrom(sender, recipient, amount);
    }

    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
        require(launched() || authorizations[sender] || sender == pinkSaleContract , "B-RANIUM has not launched yet!");

        if(inSwapAndLiquify){ return _basicTransfer(sender, recipient, amount); }

        if(msg.sender != pair && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold){ swapBack(); }

        if(activeHalfLife){
            require(halfLifeCheck(sender,recipient,amount));
        }
        
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");

        if(!isTxLimitExempt[recipient])
        {
            require(_balances[recipient].add(amount) <= _walletMax);
        }

        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] ? takeFee(sender, recipient, amount) : amount;
        _balances[recipient] = _balances[recipient].add(finalAmount);

        emit Transfer(sender, recipient, finalAmount);
        return true;
    }

    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function getCurrentTimeStamp() public view returns (uint256){
        return block.timestamp;
    }

    function halfLifeCheck(address sender, address recipient, uint256 amount) internal returns (bool){
        if(isHalfLifeExempt[sender] && isHalfLifeExempt[recipient] || sender == pinkSaleContract){
            return true; 
        }
        else if(pair == recipient){
            require(!isSecured[sender],"Sniping gave you a deadly dose of radiation");
            require(lastSell[sender] == 0 || lastSell[sender] + halfLife < block.timestamp, "Your half life period is not over.");
            require(amount <= _balances[sender] * 1/2,"You cannot sell more than 50% of your current balance.");
            lastSell[sender] = block.timestamp;
            return true;
        }
        else if(pair == sender){
            return true;
        }
        else{
            require(!isSecured[sender],"Sniping gave you a deadly dose of radiation");
            require(lastSell[sender] == 0 || lastSell[sender] + halfLife < block.timestamp, "Your half life period is not over.");
            require(amount <= _balances[sender] * 1/2,"You cannot transfer more than 50% of your current balance.");
            lastSell[sender] = block.timestamp;
            lastSell[recipient] = block.timestamp;
            return true;
        }


    }

    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {

        uint256 feeApplicable = pair == recipient ? totalFeeIfSelling : totalFee;
        uint256 feeAmount = amount.mul(feeApplicable).div(100);

        _balances[address(this)] = _balances[address(this)].add(feeAmount);
        emit Transfer(sender, address(this), feeAmount);

        return amount.sub(feeAmount);
    }


    function swapBack() internal lockTheSwap {

        uint256 amountToSwap = _balances[address(this)];

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();

        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amountToSwap,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amountBNB = address(this).balance;
        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalFee);
        uint256 marketingShare = amountBNBMarketing.mul(19).div(20);
        (bool tmpSuccess,) = payable(marketingWallet).call{value: marketingShare, gas: 31000}("");
        (tmpSuccess,) = payable(teamWallet).call{value: address(this).balance, gas: 31000}("");
        tmpSuccess = false;

    }
}