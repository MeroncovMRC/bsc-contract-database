
// File: contracts/ltt/ico_white.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);

    function decimals() external view returns (uint8);
}

interface StakeInfo {
    struct UserInfo {
        uint256 stakedOf;
        uint256 rewardOf;
        uint256 duration;
        uint256 lastDepositAt;
        uint256 lastRewardAt;
        uint256 userReward;
    }
}

interface ILiteStaked is StakeInfo {
    function userInfo(
        uint256 pid,
        address _account
    ) external view returns (UserInfo memory _user);
}

library TransferHelper {
    function safeTransfer(address token, address to, uint256 value) internal {
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSelector(0xa9059cbb, to, value)
        );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TransferHelper: TRANSFER_FAILED"
        );
    }

    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSelector(0x23b872dd, from, to, value)
        );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TransferHelper: TRANSFER_FROM_FAILED"
        );
    }
}

contract SharesWhite is StakeInfo {
    address public daoAddress;
    address public owner;
    uint256 public totalLock;
    uint256 public totalUnlock;

    uint256 public tokenDecimals;
    address public tokenAddress;
    address public constant usdtToken =
        0x55d398326f99059fF775485246999027B3197955;

    address public constant liteStaked =
        0xec2C096152E4A3f556C714C4923B8E15Fe7CD211;

    uint256 public epoch = 1 days;
    uint256 public unlockTimes = 1;
    uint256 public sharesPrice = 1e17;
    uint256 public sharesAmount = 100000 ether;
    uint256 public totalAmount;

    bool public isUnlock = false;
    uint256 public startUnlockTime;
    uint256 public sharesStartTime;
    uint256 public sharesEndTime;

    uint256 public totalStaked;
    mapping(address => uint256) public userStaked;

    mapping(address => uint256) public whiteList;
    mapping(address => uint256) public lastUnlockAt;
    mapping(address => uint256) public lockBalanceOf;
    mapping(address => uint256) public unlockAmountOf;
    mapping(address => uint256) public avgUnlockAmount;
    event Join(address indexed account, uint256 amount);
    event Unlock(address indexed account, uint256 amount);

    constructor(
        address daoAddr_,
        address _tokenAddr,
        uint256 _startTime,
        uint256 _endTime,
        uint256 _unlockTime
    ) {
        require(_unlockTime > _endTime, "end time error");
        owner = msg.sender;
        daoAddress = daoAddr_;
        tokenAddress = _tokenAddr;
        tokenDecimals = 10 ** IERC20(tokenAddress).decimals();

        startUnlockTime = _unlockTime;
        sharesStartTime = _startTime;
        sharesEndTime = _endTime;
    }

    modifier onlyOwner() {
        require(owner == msg.sender, "caller is not the owner");
        _;
    }

    function setOwner(address newOwner) external onlyOwner {
        owner = newOwner;
    }

    function setDaoAddr(address newAddr) external onlyOwner {
        daoAddress = newAddr;
    }

    function withdrawToken(
        address token,
        address _to,
        uint256 amount
    ) external onlyOwner {
        TransferHelper.safeTransfer(token, _to, amount);
    }

    function setSharesAmount(uint256 _amounts) external onlyOwner {
        sharesAmount = _amounts;
    }

    function setSharesPrice(uint256 _price) external onlyOwner {
        sharesPrice = _price;
    }

    function setUnlockOpt(uint256 _epoch, uint256 _times) external onlyOwner {
        require(!isUnlock, "start unlock error");
        epoch = _epoch;
        unlockTimes = _times;
    }

    function setSharesTime(
        uint256 _startTime,
        uint256 _endTime,
        uint256 _unlockTime
    ) external onlyOwner {
        require(!isUnlock, "start unlock error");
        require(_unlockTime > _endTime, "end time error");
        sharesStartTime = _startTime;
        sharesEndTime = _endTime;
        startUnlockTime = _unlockTime;
    }

    function setWhiteList(
        address[] memory addrlist,
        uint256[] memory amounts
    ) external onlyOwner {
        require(addrlist.length > 0, "lsit empty error");
        for (uint256 i = 0; i < addrlist.length; i++) {
            whiteList[addrlist[i]] = amounts[i];
        }
    }

    function confirmQuota() external {
        require(block.timestamp < sharesEndTime, "End error");
        uint256 staked = stakeUserQuota(msg.sender);
        totalStaked += staked;
        totalStaked -= userStaked[msg.sender];
        userStaked[msg.sender] = staked;
    }

    function stakeUserQuota(address account) public view returns (uint256) {
        return whiteList[account];
    }

    function getUserQuota(address account) public view returns (uint256) {
        return whiteList[account];
    }

    function join(uint256 _amount) external returns (bool) {
        require(
            block.timestamp > sharesEndTime &&
                block.timestamp < startUnlockTime,
            "Time error"
        );
        require(_amount > 0, "shareAmount error");
        require(usdtToken != address(0), "token error");
        require(
            totalAmount + _amount <= sharesAmount,
            "total shares amount overflow error"
        );

        uint256 _quota = getUserQuota(msg.sender);
        require(
            _quota >= _amount + lockBalanceOf[msg.sender],
            "userQuota amount error"
        );

        if (sharesPrice > 0) {
            TransferHelper.safeTransferFrom(
                usdtToken,
                msg.sender,
                daoAddress,
                (_amount * sharesPrice) / tokenDecimals
            );
        }

        totalAmount += _amount;
        totalLock += _amount;
        lockBalanceOf[msg.sender] += _amount;
        emit Join(msg.sender, _amount);
        return true;
    }

    function unlock() external {
        require(block.timestamp > startUnlockTime, "start unlock error");
        require(epoch > 0 && unlockTimes > 0, "unlock option error");
        require(lockBalanceOf[msg.sender] > 0, "balanceOf error");
        require(
            block.timestamp - lastUnlockAt[msg.sender] >= epoch,
            "last unlock error"
        );
        isUnlock = true;

        if (avgUnlockAmount[msg.sender] == 0) {
            avgUnlockAmount[msg.sender] =
                lockBalanceOf[msg.sender] /
                unlockTimes;
        }

        lastUnlockAt[msg.sender] = block.timestamp;
        uint256 unlockAmount = avgUnlockAmount[msg.sender];
        if (unlockAmount > lockBalanceOf[msg.sender]) {
            unlockAmount = lockBalanceOf[msg.sender];
            lockBalanceOf[msg.sender] = 0;
        } else {
            lockBalanceOf[msg.sender] -= unlockAmount;
        }
        totalLock -= unlockAmount;
        totalUnlock += unlockAmount;
        unlockAmountOf[msg.sender] += unlockAmount;
        TransferHelper.safeTransfer(tokenAddress, msg.sender, unlockAmount);
        emit Unlock(msg.sender, unlockAmount);
    }
}

