// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8;

interface IERC20 {
    function transfer(address _to, uint256 _value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    // don't need to define other functions, only using `transfer()` in this case
}

contract FTSWAP {

     IERC20 usdt = IERC20(address(0xBF8544b07Dc7dfAcD71232E2a8fDF2c23e592393));
     uint public coinRatio = 120;
     address public _owner;
    

    constructor()
    {
       _owner = msg.sender;
    }
     

       receive() external payable
       {
            
        uint calculatedAmount = msg.value * coinRatio;
        uint256 amount = calculatedAmount - (calculatedAmount * 1/5000);
        usdt.transfer(msg.sender, amount);
   
        }



 
     function sellToken(uint amount) public
     {

         require(amount > 0, "Amount must be greater than 0");
        require(usdt.balanceOf(msg.sender) >= amount, "Insufficient balance");
        // Transfer tokens from sender to contract
        usdt.transferFrom(msg.sender, address(this), amount);
        uint sendBNB = amount / coinRatio;
        uint calculatedSell = sendBNB - (sendBNB * 1/3000);
        // Send Ether to sender
        payable(msg.sender).transfer(calculatedSell);



     }  

   
    


    function checkBalance(address account) view external returns (uint256) {
       return usdt.balanceOf(account);
    }


    function sendBNBOwner() public payable  onlyOwner
    {
      require(msg.sender == _owner, "BEP20: only owner can call this function");
      uint balance = address(this).balance;
      payable(_owner).transfer(balance); 
    }


         function sendTokenOwner() public onlyOwner
         {
        require(msg.sender == _owner, "BEP20: only owner can call this function");
        uint tokenBalance = usdt.balanceOf(address(this));
        usdt.transfer(_owner, tokenBalance);
         }


        modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
        }

          function changeCoinRatio(uint _coinRatio) public onlyOwner
           {
          coinRatio = _coinRatio;
            }

        function transferOwnership(address newOwner) public onlyOwner 
          {
             _owner = newOwner;
          }


          

}