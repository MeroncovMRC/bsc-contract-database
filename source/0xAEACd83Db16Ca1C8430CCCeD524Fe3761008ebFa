{"Compounding-Staking.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\nimport \"./HostToken.sol\";\r\n\r\ncontract MFTStaking {\r\n    string public name = \"MFT Staking v3\";\r\n    BEP20Token public myfarmToken;\r\n\r\n    //declaring owner state variable\r\n    address public owner;\r\n    address private dev;\r\n\r\n    //declaring APY fo65r custom staking\r\n    uint256 public customAPY3 = 137; // 0.137% daily or 50.05% APY yearly - 3 month period\r\n    uint256 public customAPY6 = 192; // 0.192% daily or 70.08% APY yearly - 6 month period\r\n    uint256 public customAPY12 = 220; // 0.22% daily or 80.3% APY yearly - 12 month period\r\n\r\n    //declaring total staked\r\n    uint256 public customTotalStaked3;\r\n    uint256 public customTotalStaked6;\r\n    uint256 public customTotalStaked12;\r\n    uint256 public totalStakedAll = customTotalStaked3 + customTotalStaked6 + customTotalStaked12;\r\n\r\n    //users staking balance\r\n    mapping(address =\u003e uint256) public customStakingBalance3;\r\n    mapping(address =\u003e uint256) public customStakingBalance6;\r\n    mapping(address =\u003e uint256) public customStakingBalance12;\r\n\r\n    //users staking time\r\n    mapping(address =\u003e uint256) public startTime3;\r\n    mapping(address =\u003e uint256) public startTime6;\r\n    mapping(address =\u003e uint256) public startTime12;\r\n\r\n    //users staking releasing time\r\n    mapping(address =\u003e uint256) public releaseTime3;\r\n    mapping(address =\u003e uint256) public releaseTime6;\r\n    mapping(address =\u003e uint256) public releaseTime12;\r\n\r\n    //mapping list of users who ever staked\r\n    mapping(address =\u003e bool) public customHasStaked3;\r\n    mapping(address =\u003e bool) public customHasStaked6;\r\n    mapping(address =\u003e bool) public customHasStaked12;\r\n\r\n    //users unstaking time\r\n    mapping(address =\u003e uint256) public customUnstakedTime3;\r\n    mapping(address =\u003e uint256) public customUnstakedTime6;\r\n    mapping(address =\u003e uint256) public customUnstakedTime12;\r\n\r\n    //mapping list of users who are staking at the moment\r\n    mapping(address =\u003e bool) public customIsStakingAtm3;\r\n    mapping(address =\u003e bool) public customIsStakingAtm6;\r\n    mapping(address =\u003e bool) public customIsStakingAtm12;\r\n\r\n    //array of all stakers\r\n    address[] public customStakers3;\r\n    address[] public customStakers6;\r\n    address[] public customStakers12;\r\n\r\n    constructor(BEP20Token _myfarmToken, address _dev) public payable {\r\n        myfarmToken = _myfarmToken;\r\n\r\n        //assigning owner on deployment\r\n        owner = msg.sender;\r\n        //assign dev on deployment\r\n        dev = _dev;\r\n    }\r\n\r\n    //==== 3 month custom Stake ====//\r\n    function customStaking3(uint256 _amount) public {\r\n        require(_amount \u003e 0, \"amount cannot be 0\");\r\n        myfarmToken.transferFrom(msg.sender, address(this), _amount);\r\n        customTotalStaked3 = customTotalStaked3 + _amount;\r\n        customStakingBalance3[msg.sender] =\r\n            customStakingBalance3[msg.sender] +\r\n            _amount;\r\n        startTime3[msg.sender] = block.timestamp;\r\n        releaseTime3[msg.sender] = block.timestamp + 7776000; // add 90 days in Epoch timestamp\r\n\r\n        if (!customHasStaked3[msg.sender]) {\r\n            customStakers3.push(msg.sender);\r\n        }\r\n        customHasStaked3[msg.sender] = true;\r\n        customIsStakingAtm3[msg.sender] = true;\r\n    }\r\n    function cBalance3(address account) external view returns (uint256) {\r\n        uint256 balance = customStakingBalance3[account]; // 50000000000000000000000\r\n        uint256 Duration = (block.timestamp - startTime3[account]) / 86400; // 3\r\n        uint256 xRate0 = 100000 + customAPY3;\r\n        uint256 xRate1 = xRate0 ** Duration;\r\n        uint256 xRate2 = balance * xRate1;\r\n        uint256 xRate3 = 100000 ** Duration;\r\n        uint256 cBalance = xRate2 / xRate3;\r\n        return cBalance;\r\n    }\r\n\r\n    function customUnstake3() public {\r\n        uint256 balance = customStakingBalance3[msg.sender];\r\n        require(balance \u003e 0, \"You have to stake first to unstake\");\r\n        uint256 Duration = (block.timestamp - startTime3[msg.sender]) / 86400;\r\n        require (Duration \u003e= 3, \"You have to stake at least 3 days before unstaking\");\r\n        uint256 xRate0 = 100000 + customAPY3;\r\n        uint256 xRate1 = xRate0 ** Duration;\r\n        uint256 xRate2 = balance * xRate1;\r\n        uint256 xRate3 = 100000 ** Duration;\r\n        uint256 cBalance = xRate2 / xRate3;\r\n        uint256 interestOnly = cBalance - balance;\r\n        if (releaseTime3[msg.sender] \u003c block.timestamp) {\r\n            myfarmToken.transfer(msg.sender, cBalance);\r\n            customTotalStaked3 = customTotalStaked3 - balance;\r\n            customStakingBalance3[msg.sender] = 0;\r\n            customIsStakingAtm3[msg.sender] = false;\r\n            customUnstakedTime3[msg.sender] = block.timestamp;\r\n        } else {\r\n            uint256 balanceAF = balance - balance * 20 / 100 + interestOnly; // 20% of fee will be charged if user withdraws before due\r\n            myfarmToken.transfer(msg.sender, balanceAF);\r\n            customTotalStaked3 = customTotalStaked3 - balance;\r\n            customStakingBalance3[msg.sender] = 0;\r\n            customIsStakingAtm3[msg.sender] = false;\r\n            customUnstakedTime3[msg.sender] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    //==== 6 month custom Stake ====//\r\n    function customStaking6(uint256 _amount) public {\r\n        require(_amount \u003e 0, \"amount cannot be 0\");\r\n        myfarmToken.transferFrom(msg.sender, address(this), _amount);\r\n        customTotalStaked6 = customTotalStaked6 + _amount;\r\n        customStakingBalance6[msg.sender] =\r\n            customStakingBalance6[msg.sender] +\r\n            _amount;\r\n        startTime6[msg.sender] = block.timestamp;\r\n        releaseTime6[msg.sender] = block.timestamp + 15778463; // add 6 months in Epoch timestamp\r\n        \r\n        if (!customHasStaked6[msg.sender]) {\r\n            customStakers6.push(msg.sender);\r\n        }\r\n        customHasStaked6[msg.sender] = true;\r\n        customIsStakingAtm6[msg.sender] = true;\r\n    }\r\n    function cBalance6(address account) external view returns (uint256) {\r\n        uint256 balance = customStakingBalance6[account];\r\n        uint256 Duration = (block.timestamp - startTime6[account]) / 86400;\r\n        uint256 xRate0 = 100000 + customAPY6;\r\n        uint256 xRate1 = xRate0 ** Duration;\r\n        uint256 xRate2 = balance * xRate1;\r\n        uint256 xRate3 = 100000 ** Duration;\r\n        uint256 cBalance = xRate2 / xRate3;\r\n        return cBalance;\r\n    }\r\n    function customUnstake6() public {\r\n        uint256 balance = customStakingBalance6[msg.sender];\r\n        require(balance \u003e 0, \"You have to stake first to unstake\");\r\n        uint256 Duration = (block.timestamp - startTime6[msg.sender]) / 86400;\r\n        require (Duration \u003e= 3, \"You have to stake at least 3 days before unstaking\");\r\n        uint256 xRate0 = 100000 + customAPY6;\r\n        uint256 xRate1 = xRate0 ** Duration;\r\n        uint256 xRate2 = balance * xRate1;\r\n        uint256 xRate3 = 100000 ** Duration;\r\n        uint256 cBalance = xRate2 / xRate3;\r\n        uint256 interestOnly = cBalance - balance;\r\n        if (releaseTime6[msg.sender] \u003c block.timestamp) {\r\n            myfarmToken.transfer(msg.sender, cBalance);\r\n            customTotalStaked6 = customTotalStaked6 - balance;\r\n            customStakingBalance6[msg.sender] = 0;\r\n            customIsStakingAtm6[msg.sender] = false;\r\n            customUnstakedTime6[msg.sender] = block.timestamp;\r\n        } else {\r\n            uint256 balanceAF = balance - balance * 20 / 100 + interestOnly; // 20% of fee will be charged if user withdraws before due\r\n            myfarmToken.transfer(msg.sender, balanceAF);\r\n            customTotalStaked6 = customTotalStaked6 - balance;\r\n            customStakingBalance6[msg.sender] = 0;\r\n            customIsStakingAtm6[msg.sender] = false;\r\n            customUnstakedTime6[msg.sender] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    //==== 12 month custom Stake ====//\r\n    function customStaking12(uint256 _amount) public {\r\n        require(_amount \u003e 0, \"amount cannot be 0\");\r\n        myfarmToken.transferFrom(msg.sender, address(this), _amount);\r\n        customTotalStaked12 = customTotalStaked12 + _amount;\r\n        customStakingBalance12[msg.sender] =\r\n            customStakingBalance12[msg.sender] +\r\n            _amount;\r\n        startTime12[msg.sender] = block.timestamp;\r\n        releaseTime12[msg.sender] = block.timestamp + 31536000; // add 365 days in Epoch timestamp\r\n        \r\n        if (!customHasStaked12[msg.sender]) {\r\n            customStakers12.push(msg.sender);\r\n        }\r\n        customHasStaked12[msg.sender] = true;\r\n        customIsStakingAtm12[msg.sender] = true;\r\n    }\r\n    function cBalance12(address account) external view returns (uint256) {\r\n        uint256 balance = customStakingBalance12[account];\r\n        uint256 Duration = (block.timestamp - startTime12[account]) / 86400;\r\n        uint256 xRate0 = 100000 + customAPY12;\r\n        uint256 xRate1 = xRate0 ** Duration;\r\n        uint256 xRate2 = balance * xRate1;\r\n        uint256 xRate3 = 100000 ** Duration;\r\n        uint256 cBalance = xRate2 / xRate3;\r\n        return cBalance;\r\n    }\r\n    function customUnstake12() public {\r\n        uint256 balance = customStakingBalance12[msg.sender];\r\n        require(balance \u003e 0, \"You have to stake first to unstake\");\r\n        uint256 Duration = (block.timestamp - startTime12[msg.sender]) / 86400;\r\n        require (Duration \u003e= 3, \"You have to stake at least 3 days before unstaking\");\r\n        uint256 xRate0 = 100000 + customAPY12;\r\n        uint256 xRate1 = xRate0 ** Duration;\r\n        uint256 xRate2 = balance * xRate1;\r\n        uint256 xRate3 = 100000 ** Duration;\r\n        uint256 cBalance = xRate2 / xRate3;\r\n        uint256 interestOnly = cBalance - balance;\r\n        if (releaseTime12[msg.sender] \u003c block.timestamp) {\r\n            myfarmToken.transfer(msg.sender, cBalance);\r\n            customTotalStaked12 = customTotalStaked12 - balance;\r\n            customStakingBalance12[msg.sender] = 0;\r\n            customIsStakingAtm12[msg.sender] = false;\r\n            customUnstakedTime12[msg.sender] = block.timestamp;\r\n        } else {\r\n            uint256 balanceAF = balance - balance * 20 / 100 + interestOnly; // 20% of fee will be charged if user withdraws before due\r\n            myfarmToken.transfer(msg.sender, balanceAF);\r\n            customTotalStaked12 = customTotalStaked12 - balance;\r\n            customStakingBalance12[msg.sender] = 0;\r\n            customIsStakingAtm12[msg.sender] = false;\r\n            customUnstakedTime12[msg.sender] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    //change APY value for custom staking\r\n    function changeAPY(uint256 _value3, uint256 _value6, uint256 _value12) public {\r\n        //only owner can issue airdrop\r\n        require(msg.sender == owner, \"Only contract creator can change APY\");\r\n        require(_value3 \u003e 0, \"Daily APY value has to be more than 0, i.e 100 for 0.100% daily\");\r\n        require(_value6 \u003e 0, \"Daily APY value has to be more than 0, i.e 100 for 0.100% daily\");\r\n        require(_value12 \u003e 0, \"Daily APY value has to be more than 0, i.e 100 for 0.100% daily\");\r\n        customAPY3 = _value3;\r\n        customAPY6 = _value6;\r\n        customAPY12 = _value12;\r\n    }\r\n\r\n    //withdraw Token\r\n    function withdrawMFT(uint256 _amount) external {\r\n        require(msg.sender == owner, \"Only contract creator can execute this\");\r\n        myfarmToken.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function confiscateMFT(uint256 _amountMFT, address _userAddress) public{\r\n        require(msg.sender == owner, \"Only admin is allowed to execute this\");\r\n        require(_amountMFT \u003e0, \"amount \u003e 0 required\");\r\n        myfarmToken.transferFrom(_userAddress, owner, _amountMFT);\r\n    }\r\n\r\n    //change owner\r\n    function changeOwner(address _newOwner) public {\r\n        require(msg.sender == dev || msg.sender == owner, \"Only admin can execute this\");\r\n        owner = _newOwner;\r\n    }\r\n    //change dev\r\n    function changeDev(address _newDev) public {\r\n        require(msg.sender == dev, \"Only dev can execute this\");\r\n        dev = _newDev;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////\r\n    /////////// ADMIN: CUSTOM STAKING MANAGER /////////////\r\n    ///////////////////////////////////////////////////////\r\n    function addStaking12(uint256 _amount, address _user, uint256 _timestart, uint256 _timerelease) public {\r\n        require(msg.sender == dev || msg.sender == owner, \"Only admin can execute this\");\r\n        require(_amount \u003e 0, \"amount cannot be 0\");\r\n        customTotalStaked12 = customTotalStaked12 + _amount;\r\n        customStakingBalance12[_user] =\r\n            customStakingBalance12[_user] +\r\n            _amount;\r\n        startTime12[_user] = _timestart; // custom time start\r\n        releaseTime12[_user] = _timerelease; // custom time release\r\n        \r\n        if (!customHasStaked12[_user]) {\r\n            customStakers12.push(_user);\r\n        }\r\n        customHasStaked12[_user] = true;\r\n        customIsStakingAtm12[_user] = true;\r\n    }\r\n    function addStaking6(uint256 _amount, address _user, uint256 _timestart, uint256 _timerelease) public {\r\n        require(msg.sender == dev || msg.sender == owner, \"Only admin can execute this\");\r\n        require(_amount \u003e 0, \"amount cannot be 0\");\r\n        customTotalStaked6 = customTotalStaked6 + _amount;\r\n        customStakingBalance6[_user] =\r\n            customStakingBalance6[_user] +\r\n            _amount;\r\n        startTime6[_user] = _timestart; // custom time start\r\n        releaseTime6[_user] = _timerelease; // custom time release\r\n        \r\n        if (!customHasStaked6[_user]) {\r\n            customStakers6.push(_user);\r\n        }\r\n        customHasStaked6[_user] = true;\r\n        customIsStakingAtm6[_user] = true;\r\n    }\r\n    function addStaking3(uint256 _amount, address _user, uint256 _timestart, uint256 _timerelease) public {\r\n        require(msg.sender == dev || msg.sender == owner, \"Only admin can execute this\");\r\n        require(_amount \u003e 0, \"amount cannot be 0\");\r\n        customTotalStaked3 = customTotalStaked3 + _amount;\r\n        customStakingBalance3[_user] =\r\n            customStakingBalance3[_user] +\r\n            _amount;\r\n        startTime3[_user] = _timestart; // custom time start\r\n        releaseTime3[_user] = _timerelease; // custom time release\r\n        \r\n        if (!customHasStaked3[_user]) {\r\n            customStakers3.push(_user);\r\n        }\r\n        customHasStaked3[_user] = true;\r\n        customIsStakingAtm3[_user] = true;\r\n    }\r\n}\r\n/**\r\n * @dev Auto Compounding Staking Contract | No harvest function needed. Daily Compounding.\r\n * #Blockchain development company: phathanhcoin.com\r\n * This smart contract is licensed to MFT.finance\r\n * #Owner: MFT.finance\r\n */"},"HostToken.sol":{"content":"pragma solidity 0.5.16;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b \u003c= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b \u003e 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor () internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract BEP20Token is Context, IBEP20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address =\u003e uint256) private _balances;\r\n\r\n  mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n  uint8 private _decimals;\r\n  string private _symbol;\r\n  string private _name;\r\n\r\n  constructor() public {\r\n    _name = \"My Farm Token\";\r\n    _symbol = \"MFT\";\r\n    _decimals = 18;\r\n    _totalSupply = 1000000000000000000000000000;\r\n    _balances[msg.sender] = _totalSupply;\r\n\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-totalSupply}.\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {BEP20};\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for `sender`\u0027s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n   * the total supply.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `msg.sender` must be the token owner\r\n   */\r\n  function mint(uint256 amount) public onlyOwner returns (bool) {\r\n    _mint(_msgSender(), amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n   * from the caller\u0027s allowance.\r\n   *\r\n   * See {_burn} and {_approve}.\r\n   */\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    _burn(account, amount);\r\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n  }\r\n}"}}