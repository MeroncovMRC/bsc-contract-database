
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/staking/MYCStakingManager.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/access/Ownable.sol";

contract MYCStakingManager is Ownable {
    /**
     * @dev Emitted when `owner` changes status to `status` for `factory` address
     */
    event ChangeFactoryStatus(address indexed factory, bool status);

    /**
     * @dev Emitted when `factory` created new staking contract `poolAddress` address using `signature`
     */
    event AddedStakingPool(
        address indexed factory,
        bytes32 signature,
        address poolAddress
    );

    error WrongAddress();
    error OnlyFactories();
    error SignatureAlreadyUsed();
    error OnlyOwnerOrSigner();

    /**
     * @dev Throws if param is address zero
     */
    modifier noAddressZero(address adr) {
        if (adr == address(0)) revert WrongAddress();
        _;
    }

    mapping(bytes32 => address) internal _poolAddressBySignature;
    address[] internal _allPools;
    mapping(address => bool) internal _factoryStatus;
    address internal _treasury;
    address internal _signer;

    constructor(address treasury_, address signer_) {
        _treasury = treasury_;
        _signer = signer_;
    }

    /**
     * @dev Returns pool address by `id`
     */
    function poolAddressById(uint256 id) external view returns (address) {
        return _allPools[id];
    }

    /**
     * @dev Returns pool length
     */
    function poolAddressesLength() external view returns (uint256) {
        return _allPools.length;
    }

    /**
     * @dev Returns {PoolInfo} by `signature`
     */
    function poolAddressBySignature(
        bytes memory signature
    ) external view returns (address) {
        return _poolAddressBySignature[bytes32(signature)];
    }

    function poolAddressBySignature(
        bytes32 signature
    ) external view returns (address) {
        return _poolAddressBySignature[bytes32(signature)];
    }

    /**
     * @dev Returns MYC treasury address
     */
    function treasury() external view returns (address) {
        return _treasury;
    }

    /**
     * @dev Returns signer address
     */
    function signer() external view returns (address) {
        return _signer;
    }

    /**
     * @dev Uses signature to prevent external usage
     * Only owner and signer can execute the function
     * Important: Sets address(1) as usage status flag
     */
    function useSignature(bytes32 signature) external {
        if (msg.sender != owner() && msg.sender != _signer)
            revert OnlyOwnerOrSigner();
        _poolAddressBySignature[signature] = address(1);
    }

    /**
     * @dev Sets new `status` for `factory`
     * @param factory Factory address
     * @param status New status: (toEnable): [true/false]
     */
    function setFactoryStatus(address factory, bool status) external onlyOwner {
        _factoryStatus[factory] = status;
        emit ChangeFactoryStatus(factory, status);
    }

    /**
     * @dev Used by approved factories contracts for emiting {AddedStakingPool} events
     * @param poolAddress Staking pool address
     * @param signature Signature used for creating pool
     */
    function addStakingPool(address poolAddress, bytes32 signature) external {
        if (!_factoryStatus[msg.sender]) revert OnlyFactories();
        if (_poolAddressBySignature[signature] != address(0))
            revert SignatureAlreadyUsed();
        _allPools.push(poolAddress);
        _poolAddressBySignature[signature] = poolAddress;
        emit AddedStakingPool(msg.sender, signature, poolAddress);
    }

    /**
     * @dev Sets `newTreasury` as new {treasury} address
     * @param newTreasury new treasury address
     */
    function setTreasury(
        address newTreasury
    ) external noAddressZero(newTreasury) onlyOwner {
        _treasury = newTreasury;
    }

    /**
     * @dev Sets `newSigner` as new {signer} address
     * @param newSigner new signer address
     */
    function setSigner(
        address newSigner
    ) external noAddressZero(newSigner) onlyOwner {
        _signer = newSigner;
    }
}

