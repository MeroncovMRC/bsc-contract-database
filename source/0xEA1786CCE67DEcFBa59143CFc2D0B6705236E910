// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ContratoPepe {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => bool) public isBlacklisted;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed from, uint256 value);
    event AddToBlacklist(address indexed account);
    event RemoveFromBlacklist(address indexed account);
    event RenounceContractOwnership(address indexed previousOwner, address indexed newOwner);

    address private owner;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }

    modifier notBlacklisted(address _account) {
        require(!isBlacklisted[_account], "Account is blacklisted");
        _;
    }

    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;
        balanceOf[msg.sender] = _totalSupply;
        owner = msg.sender;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function transfer(address _to, uint256 _value) public notBlacklisted(msg.sender) notBlacklisted(_to) returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public notBlacklisted(msg.sender) notBlacklisted(_spender) returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public notBlacklisted(msg.sender) notBlacklisted(_from) notBlacklisted(_to) returns (bool success) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Allowance exceeded");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function burn(uint256 _value) public notBlacklisted(msg.sender) returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg.sender, _value);
        return true;
    }

    function addToBlacklist(address _account) public onlyOwner {
        isBlacklisted[_account] = true;
        emit AddToBlacklist(_account);
    }

    function removeFromBlacklist(address _account) public onlyOwner {
        isBlacklisted[_account] = false;
        emit RemoveFromBlacklist(_account);
    }

    function renounceContractOwnership() public onlyOwner {
        address previousOwner = owner;
        owner = address(0);
        emit RenounceContractOwnership(previousOwner, owner);
    }
}