// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


pragma experimental ABIEncoderV2;
pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: @openzeppelin/contracts/math/SafeMath.sol



pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol



pragma solidity >=0.6.0 <0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol



pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: @openzeppelin/contracts/utils/Address.sol



pragma solidity >=0.6.2 <0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol



pragma solidity >=0.6.0 <0.8.0;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: @openzeppelin/contracts/introspection/IERC165.sol



pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin/contracts/token/ERC721/IERC721.sol



pragma solidity >=0.6.2 <0.8.0;


/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
      * @dev Safely transfers `tokenId` token from `from` to `to`.
      *
      * Requirements:
      *
      * - `from` cannot be the zero address.
      * - `to` cannot be the zero address.
      * - `tokenId` token must exist and be owned by `from`.
      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
      *
      * Emits a {Transfer} event.
      */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
}

// File: contracts/interfaces/INFT.sol

pragma solidity ^0.6.12;

interface INFT {

	function safeTransferFrom(
		address _from,
		address _to,
		uint256 _id,
		uint256 _amount,
		bytes calldata _data
	) external;

	function safeTransferFrom(
		address _from,
		address _to,
		uint256 _id,
		bytes calldata _data
	) external;

	function balanceOf(address _owner, uint256 _id) external view returns (uint256);

	function setApprovalForAll(address _operator, bool _approved) external;

	function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);

	function getCatId(uint256 _id) external view returns (uint256);

	function ownerOf(uint256 _id) external view returns (address[] memory);

	function createNFT(
		address _to,
		uint256 _catId,
		bytes calldata _data
	) external returns (uint256);

	function burn(address _from, uint256 _tokenId) external;
}

// File: contracts/interfaces/IStruct.sol

pragma solidity >=0.6.2;


interface IStruct {

    struct CatBody {
        uint256 partId;
        uint256 partType; // 1-8 1:ear|2:head|3:right hand|4:left hand|5:body|6:left Leg|7: right Leg|8: Tail
    }

    struct CatInfo {
        uint256 colorId;
        uint256 gender;
        uint256 faceId;
        uint256 breedTimes;
        uint256 element;
        uint256 standBy1;
        uint256 standBy2;
    }

    struct Skill {
        uint256 pendantId;
        uint256 pendantType; //1-4 1:weapons|2:head|3:neck|4:tail
        uint256 quality; // 1-5 1:white|2:green|3:blue|4:violet|5:gold
        uint256 element; // 1-5 1:water|2:fire|3:ray|4:light|5:dark
    }

    struct BattleInfo {
        uint256 vit; // Physical strength
        uint256 str; // power
        uint256 def; // strong
        uint256 agi; // agile
        uint256 mor; // morale
    }

    struct BreedInfo {
      uint256 breedType; // 1-11 2-12 3-21 4-22
      uint256 genesisPTokenId0;
      uint256 genesisPTokenId1;
      uint256 bravePTokenId0;
      uint256 bravePTokenId1;
    }
}

// File: contracts/interfaces/IGenesisCatNFT.sol

pragma solidity >=0.6.2;



interface IGenesisCatNFT is IStruct {

    function safeTransferFrom(
      address _from,
      address _to,
      uint256 _id,
      bytes calldata _data
    ) external;

    function balanceOf(address _owner, uint256 _id) external view returns (uint256);

    function setApprovalForAll(address _operator, bool _approved) external;

    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);

    function getCatId(uint256 _id) external view returns (uint256);

    function ownerOf(uint256 _id) external view returns (address);

    function nftCatInfos(uint256 _token) external view returns(CatInfo memory);

    function getNFTSummonTimes(uint256 _id) external view returns(uint256);

    function getNFTSkills(uint256 _id) external view returns(Skill[] memory);

    function getNFTBody(uint256 _id) external view returns(CatBody[] memory);

    function createGenesisNFT(
      		address _to,
      		uint256 _catId,
          uint256 _colorId,
          uint256 _gender,
          uint256 _faceId,
      		bytes memory _data
      	) external returns (uint256 tokenId);

     function setNFTSummonTimes(uint256 _tokenId, uint256 _summonTimes) external;

     function setNFTSkill(uint256 _tokenId,
             uint256[] calldata _pendantIds,
             uint256[] calldata _pendantTypes,
             uint256[] calldata _qualitys,
             uint256[] calldata _elements) external;

     function setNFTBattleInfo(uint256 _tokenId,
               uint256 _vit,
               uint256 _str,
               uint256 _def,
               uint256 _agi,
               uint256 _mor) external;

     function setNFTBody(uint256 _tokenId,
               uint256[] calldata _partIds,
               uint256[] calldata _partTypes) external;

     function burn(address _from, uint256 _tokenId) external;


     function setNFTStandBy1(uint256 _tokenId, uint256 _standBy1) external;
}

// File: contracts/interfaces/IBraveCatNFT.sol

pragma solidity >=0.6.2;



interface IBraveCatNFT is IStruct {

    function safeTransferFrom(
      address _from,
      address _to,
      uint256 _id,
      bytes calldata _data
    ) external;

    function getParents(uint256 _tokenId) external view returns (uint256 _breedType,
  							 uint256 _pTokenId0,
  							 uint256 _pTokenId1
   						);

    function balanceOf(address _owner, uint256 _id) external view returns (uint256);

    function setApprovalForAll(address _operator, bool _approved) external;

    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);

    function ownerOf(uint256 _id) external view returns (address);

    function nftCatInfos(uint256 _token) external view returns(CatInfo memory);

    function getNFTSummonTimes(uint256 _id) external view returns(uint256);

    function getNFTSkills(uint256 _id) external view returns(Skill[] memory);

    function getNFTBody(uint256 _id) external view returns(CatBody[] memory);

    function createBraveNFT(address _to,
            uint256 _colorId,
            uint256 _gender,
            uint256 _faceId,
            uint256 _breedType,
            uint256 _pTokenId0,
            uint256 _pTokenId1,
            bytes memory _data) external returns (uint256 tokenId);

     function setNFTSummonTimes(uint256 _tokenId, uint256 _summonTimes) external;
     function setNFTElement(uint256 _tokenId, uint256 _element) external;

     function setNFTSkill(uint256 _tokenId,
             uint256[] calldata _pendantIds,
             uint256[] calldata _pendantTypes,
             uint256[] calldata _qualitys,
             uint256[] calldata _elements) external;

     function setNFTBattleInfo(uint256 _tokenId,
               uint256 _vit,
               uint256 _str,
               uint256 _def,
               uint256 _agi,
               uint256 _mor) external;

     function setNFTBody(uint256 _tokenId,
               uint256[] calldata _partIds,
               uint256[] calldata _partTypes) external;

     function burn(address _from, uint256 _tokenId) external;

     function setNFTStandBy1(uint256 _tokenId, uint256 _standBy1) external;
}

// File: contracts/interfaces/IUniswapV2Router01.sol

pragma solidity >=0.6.2;


interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// File: contracts/interfaces/IUniswapV2Router02.sol

pragma solidity >=0.6.2;


interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// File: contracts/library/Utils.sol

pragma solidity ^0.6.12;



// Utils For DNAxCAT
library Utils {
    using SafeMath for uint256;

    //require(len < _newColorIds.length, string(abi.encodePacked("color length out Bound", toString(_newColorIds.length), Utils.toString(colorIds.length), toString(len), toString(i))));
    //

    function toString(uint256 value) internal pure returns (string memory) {
    // Inspired by OraclizeAPI's implementation - MIT license
    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }


    ///// random
    function _seed(address _user, uint256 _type, uint256 _supply) internal view returns (uint256){
      return uint256( uint256( keccak256(
              abi.encodePacked(_user, block.number, gasleft(), _type, _supply, block.timestamp, block.difficulty, block.coinbase)
            ) ) % _supply );
    }

    function _seedNew(address _user, uint256 _type, uint256 _seedNum, uint256 _supply) internal view returns (uint256){
      return uint256( uint256( keccak256(
              abi.encodePacked(_user, block.number, gasleft(), _seedNum, _type, _supply, block.timestamp, block.coinbase, block.difficulty)
            ) ) % _supply );
    }

    function _seedMutation(address _user, uint256 _type, uint256 _supply) internal view returns (uint256){
      return uint256( uint256( keccak256(
              abi.encodePacked(_type, block.timestamp, gasleft(), _user, _supply, block.number, block.difficulty, block.coinbase)
            ) ) % _supply );
    }

    function _seedMutationNew(address _user, uint256 _type, uint256 _seedNum, uint256 _supply) internal view returns (uint256){
      return uint256( uint256( keccak256(
              abi.encodePacked(_type, block.timestamp, gasleft(), _seedNum, _user, _supply, block.coinbase, block.number, block.difficulty)
            ) ) % _supply );
    }

    function _seedTypeModule(address _user, uint256 _type, uint256 _module, uint256 _supply) internal view returns(uint256){
        return uint256( uint256( keccak256(
              abi.encodePacked(_user, _type, block.number, gasleft(), block.difficulty, _supply, _module, block.timestamp, block.coinbase)
            ) ) % _supply );
    }

    function _transferBNB(address _user, uint256 _amount) internal {
        (bool success, ) = address(_user).call{ value: _amount }(new bytes(0));
        require(success, "unable to send value, user may have reverted");
    }

    function _safeTokenTransfer(address token, address to, uint256 value) internal {
    // bytes4(keccak256(bytes('transfer(address,uint256)')));
      (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
      require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
  	}

    function swapBNBToToken(address _router, address _dstToken,
                    address[] memory _paths,
                    uint256 _bnbAmount) internal {
        //swap BNB to Token
        require(_paths.length > 0, "no set token paths");
        require(_paths[_paths.length - 1] == _dstToken, "paths Token no match");

        IUniswapV2Router02(_router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: _bnbAmount}(
                0,
                _paths,
                address(this),
                block.timestamp
        );
    }

    function getSummonRate(uint256 _genesisRate, uint256 _braveRate, uint256 _summonType) internal pure
                          returns (uint256 _p0Rate, uint256 _p1Rate) {
          if(_summonType == 11){
              _p0Rate = _genesisRate;
              _p1Rate = _genesisRate;
          }else if(_summonType == 12){
              _p0Rate = _genesisRate;
              _p1Rate = _braveRate;
          }else if(_summonType == 21){
              _p0Rate = _braveRate;
              _p1Rate = _genesisRate;
          }else if(_summonType == 22){
              _p0Rate = _braveRate;
              _p1Rate = _braveRate;
          }else{
             revert("getSummonRate: no support SummonType..");
          }
    }

    function getBreedRate(uint256 _genesisRate, uint256 _childRate, uint256 _breedType) internal pure
                          returns (uint256 _p0Rate, uint256 _p1Rate) {
          if(_breedType == 11){
              _p0Rate = _genesisRate;
              _p1Rate = _genesisRate;
          }else if(_breedType == 12){
              _p0Rate = _genesisRate;
              _p1Rate = _childRate;
          }else if(_breedType == 21){
              _p0Rate = _childRate;
              _p1Rate = _genesisRate;
          }else if(_breedType == 22){
              _p0Rate = _childRate;
              _p1Rate = _childRate;
          }else{
             revert("getBreedRate: no support BreedType..");
          }
    }

    function diffSet(uint256[] memory _ids,
                uint256[] memory _excludeIds) internal pure returns(uint256[] memory _r){
          _r = new uint256[](_ids.length.sub(_excludeIds.length));
          uint256 rIndex = 0;
          for(uint256 i = 0; i < _ids.length; i ++){
              (bool isIn, ) = firstIndexOf(_excludeIds, _ids[i]);
              if(!isIn && rIndex < _r.length){
                 _r[rIndex] = _ids[i];
                 rIndex ++;
              }
          }

          return _r;
    }

    function randomMuch(address _user,
                      uint256[] memory array,
                      uint256 _len,
                      uint256 _num,
                      uint256 _seedNum) internal view returns(uint256[] memory _r){
        _r = new uint256[](_num);
        for(uint256 i = 0; i < _num; i ++){
            uint256 _rdx = _seed(_user, 3311110 + i + _seedNum, _len);
            _r[i] = array[_rdx];
            array[_rdx] = array[_len - 1];
            _len = _len - 1;
        }
    }

    function firstIndexOf(uint256[] memory array, uint256 key) internal pure returns (bool, uint256) {

    	if(array.length == 0){
    		return (false, 0);
    	}

    	for(uint256 i = 0; i < array.length; i++){
    		if(array[i] == key){
    			return (true, i);
    		}
    	}
    	return (false, 0);
    }

}

// File: contracts/dxct/DXCTStarUpgrade.sol

pragma solidity ^0.6.12;












/**
 * DXCT Star Upgrade
 */
contract DXCTStarUpgrade is Ownable, IStruct {
    using SafeMath for uint256;
    using Address for address;
	  using SafeERC20 for IERC20;

    address public genesisCatNFT;
    address public braveCatNFT;
    address public vaultAddr;
    address public sfcToken;

    struct StarInfo {
        bool isOpen;
        uint256 sfcAmount;
        uint256 burnNftNum;
    }

    // nextLevel =>
    mapping(uint256 => StarInfo) public stars;

    uint256 public maxLevel = 7;



    event UpgradeStarEvent(address indexed owner, uint256 nftType,
              uint256 tokenId, uint256 starNum);

    constructor (address _genesisCatNFT,
                 address _braveCatNFT,
                 address _vaultAddr,
                 address _sfcToken) public {
      genesisCatNFT = _genesisCatNFT;
      braveCatNFT = _braveCatNFT;
      vaultAddr = _vaultAddr;
      sfcToken = _sfcToken;
    }

    modifier notContract() {
       require(!address(msg.sender).isContract(), "contract not allowed");
       require(msg.sender == tx.origin, "proxy contract not allowed");
      _;
    }

    function getStarNum(uint256 _nftType, uint256 _tokenId) public view returns(uint256){
        CatInfo memory _catInfo;
        if(_nftType == 1){
             _catInfo = IGenesisCatNFT(genesisCatNFT).nftCatInfos(_tokenId);
             uint256 _catId = IGenesisCatNFT(genesisCatNFT).getCatId(_tokenId);
             if(_catId == 16 || _catId == 17 || _catId == 18){
                return _catInfo.standBy1 > 3 ? _catInfo.standBy1 : 3;
             }else{
                return _catInfo.standBy1 > 2 ? _catInfo.standBy1 : 2;
             }
        }else{
            _catInfo = IBraveCatNFT(braveCatNFT).nftCatInfos(_tokenId);

            return _catInfo.standBy1;
        }


    }

    //
    function store(uint256 _nftType,
                  uint256 _tokenId,
                  uint256 _burnNftType,
                  uint256 _burnTokenId,
                  uint256 _sfcAmount) external {
        if(_nftType == 1){
            require(IGenesisCatNFT(genesisCatNFT).ownerOf(_tokenId) == msg.sender, "no owner");
        }else{
            require(IBraveCatNFT(braveCatNFT).ownerOf(_tokenId) == msg.sender, "no owner");
        }

        uint256 _starNum = getStarNum(_nftType, _tokenId);
        StarInfo memory _starInfo = stars[_starNum + 1];
        require(_starInfo.isOpen, "no config level");
        require(_starInfo.sfcAmount == _sfcAmount, "sfcAmount no match");
        IERC20(sfcToken).safeTransferFrom(msg.sender, address(this), _sfcAmount);
        if(_starInfo.burnNftNum > 0){
            if(_burnNftType == 1){
                require(IGenesisCatNFT(genesisCatNFT).ownerOf(_burnTokenId) == msg.sender, "burnToken no owner");
            }else{
                require(IBraveCatNFT(braveCatNFT).ownerOf(_burnTokenId) == msg.sender, "burnToken no owner");
            }

            uint256 _burnStarNum = getStarNum(_burnNftType, _burnTokenId);
            require(_burnStarNum == _starNum, "burnToken must same StarNum");

            if(_burnNftType == 1){
                IGenesisCatNFT(genesisCatNFT).burn(msg.sender, _burnTokenId);
            }else{
                IBraveCatNFT(braveCatNFT).burn(msg.sender, _burnTokenId);
            }
        }

        {
          if(_nftType == 1){
              IGenesisCatNFT(genesisCatNFT).setNFTStandBy1(_tokenId, _starNum.add(1));
          }else{
              IBraveCatNFT(braveCatNFT).setNFTStandBy1(_tokenId, _starNum.add(1));
          }
        }

        IERC20(sfcToken).transfer(vaultAddr, IERC20(sfcToken).balanceOf(address(this)));

        emit UpgradeStarEvent(msg.sender, _nftType, _tokenId, _starNum.add(1));
    }

    function getStarConfigs() external view returns(uint256[] memory _targetLevels,
            uint256[] memory _sfcAmounts,
            uint256[] memory _burnNftNums){

        _targetLevels = new uint256[](maxLevel);
        _sfcAmounts = new uint256[](maxLevel);
        _burnNftNums = new uint256[](maxLevel);

        for(uint256 i = 1; i <= maxLevel; i ++){
          _targetLevels[i - 1] = i;
          _sfcAmounts[i - 1] = stars[i].sfcAmount;
          _burnNftNums[i - 1] = stars[i].burnNftNum;
        }
    }

    //////////set/////

    function setStarConfigs(uint256[] calldata _sfcAmounts,
                          uint256[] calldata _burnNftNums) external onlyOwner{
        require(_sfcAmounts.length == maxLevel, "sfcAmounts Length no match");
        require(_burnNftNums.length == maxLevel, "burnNftNums Length no match");

        for(uint256 i = 1; i <= _sfcAmounts.length; i ++){
            stars[i] = StarInfo({
                isOpen: true,
                sfcAmount: _sfcAmounts[i-1],
                burnNftNum: _burnNftNums[i-1]
            });
        }
    }

    function setMaxLevel(uint256 _maxLevel) external onlyOwner {
        maxLevel = _maxLevel;
    }

}