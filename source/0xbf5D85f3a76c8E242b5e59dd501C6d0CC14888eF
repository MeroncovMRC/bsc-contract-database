// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CRSDToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowed;
    mapping(address => bool) private whitelist;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        name = "CRSD";
        symbol = "CRSD";
        decimals = 9;
        totalSupply = 10000000000 * 10**uint256(decimals);
        balances[msg.sender] = totalSupply;
        whitelist[msg.sender] = true;
    }

    function transfer(address _to, uint256 _value) external returns (bool) {
        require(whitelist[msg.sender], "Sender is not whitelisted");
        require(_to != address(0), "Invalid recipient");
        require(_value <= balances[msg.sender], "Insufficient balance");

        balances[msg.sender] -= _value;
        balances[_to] += _value;

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {
        require(whitelist[_from], "Sender is not whitelisted");
        require(_to != address(0), "Invalid recipient");
        require(_value <= balances[_from], "Insufficient balance");
        require(_value <= allowed[_from][msg.sender], "Insufficient allowance");

        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, _value);
        return true;
    }

    function balanceOf(address _owner) external view returns (uint256) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) external returns (bool) {
        allowed[msg.sender][_spender] = _value;

        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) external view returns (uint256) {
        return allowed[_owner][_spender];
    }

    function addToWhitelist(address _address) external {
        whitelist[_address] = true;
    }

    function removeFromWhitelist(address _address) external {
        whitelist[_address] = false;
    }
}