//  SPDX-License-Identifier: MIT
pragma solidity ^0.8.16;

//IERC20 Token Standard #20 Interface
interface IBep20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint balance);
    function allowance(address owner, address spender) external view returns (uint remaining);
    function transfer( address recipient, uint amount) external returns (bool success);
    function approve(address spender, uint amount) external returns (bool success);
    function transferFrom(address spender, address recipient, uint amount) external returns (bool success);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

//Actual token contract 
 contract PeopleBlockchainSolution is IBep20 {
     string public symbol;
     string public name;
     uint public decimals;
     uint public _totalSupply;

     mapping(address => uint) balances;
     mapping(address => mapping (address => uint)) allowed;

     constructor() {
         symbol = "PBS";
         name = "PeopleBlockchainSolution";
         decimals = 18;
         _totalSupply = 1_000_000_100_000_000_000_000_000_000; // A billion + 100 coins, with 18 zeros for decimal points
         balances [0xA42982D1E78247EEB68D664B474738D59E47466E] = _totalSupply;
         emit Transfer(address(0), 0xA42982D1E78247EEB68D664B474738D59E47466E, _totalSupply);
     }
     function totalSupply() public view returns (uint) {
         return _totalSupply - balances[address(0)];
     }

     function balanceOf(address account) public view returns (uint balance) {
         return balances[account];
     }
     
     function transfer(address recipient, uint amount) public returns (bool success) { amount;
         emit Transfer(msg.sender, recipient, amount);
         return true;
     }

     function approve(address spender, uint amount) public returns (bool success) {
         allowed[msg.sender] [spender] = amount;
         emit Approval(msg.sender, spender, amount);
         return true;
     }
 
     function transferFrom(address sender, address recipient, uint amount) public returns (bool success) {
         balances[sender] = balances[sender] - amount;
         balances [recipient] = balances[recipient] + amount;
         emit Transfer(sender, recipient, amount);
         return true;
     }

     function allowance(address owner, address spender) public view returns (uint remaining) { 
         return allowed[owner][spender]; 
     }
     function transfer(address recipient, uint amount, uint gasPrice) public returns (bool success){
         require(amount > 0); require(gasPrice > 0);
         balances[msg.sender] -= amount;
         balances[recipient] += amount; 
         emit Transfer(msg.sender, recipient, amount);
         return true;
     }

     function approve(address spender, uint amount, uint gasPrice) public returns (bool success){     
         require(amount > 0);
         require(gasPrice > 0);
         allowed[msg.sender][spender] = amount;
         emit Approval(msg.sender, spender, amount);
        return true;
     }
    event GasPrice(uint gasPrice);

        }