pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract MyContract {
    IPancakeRouter02 public immutable pancakeRouter;
    address private constant WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // WETH address
    address private rewardToken = 0xA3378bd30f9153aC12AFF64743841f4AFa29bC57; // Reward token address
    address private feeAddress = 0xEa4794D559987FBEa5B1352F2954125F69d659b5; // Fee address

    // Определение событий
    event RewardAmount(uint256 amount);
    event ContractBalance(uint256 balance);

    // Mapping to store the last transaction timestamp of each user
    mapping(address => uint256) private lastTransaction;

    constructor(address _router) {
        pancakeRouter = IPancakeRouter02(_router);
    }

    function buyTokens(address _token, uint256 _bnbAmount) external payable {
        require(msg.value == _bnbAmount, "BNB not correct");

        // Calculate swap amounts
        uint256 swapAmount = (_bnbAmount * 975) / 1000;
        uint256 swapAmount_bnb = swapAmount;
        uint256 feeAmount = (_bnbAmount - swapAmount) / 2;

        // Get the token contract
        IERC20 rewardTokenContract = IERC20(rewardToken);

        // Get the minimum token amount for swap
        uint256 minTokens = getMinimumTokenAmount(_token, swapAmount);

        // Set up the swap path
        address[] memory path = new address[](2);
        path[0] = WETH;
        path[1] = _token;

        // Perform the swapRewardToken
        pancakeRouter.swapExactETHForTokens{value: swapAmount}(minTokens, path, msg.sender, block.timestamp + 1);

        // Get the minimum token amount for swap
        uint256 minTokensRewardToken = getMinimumTokenAmount(rewardToken, feeAmount);

        // Set up the swap path
        address[] memory pathRewardToken = new address[](2);
        pathRewardToken[0] = WETH;
        pathRewardToken[1] = rewardToken;
        pancakeRouter.swapExactETHForTokens{value: feeAmount}(minTokensRewardToken, pathRewardToken, address(this), block.timestamp + 1);

        // Transfer fee to fee address
        (bool success,) = feeAddress.call{value: feeAmount}("");
        require(success, "Transfer failed");

        // Reward the user
        uint256 rewardPercentage = calculateRewardPercentage(lastTransaction[msg.sender]);
        uint256 rewardAmountBNB = (swapAmount_bnb * rewardPercentage) / 1000;
        uint256 rewardAmount = getMinimumTokenAmount(rewardToken, rewardAmountBNB);

        // Log values before checking
        emit RewardAmount(rewardAmount);
        emit ContractBalance(rewardTokenContract.balanceOf(address(this)));

        require(rewardTokenContract.balanceOf(address(this)) >= rewardAmount, "Insufficient reward tokens");
        rewardTokenContract.transfer(msg.sender, rewardAmount);

        // Update the last transaction timestamp
        lastTransaction[msg.sender] = block.timestamp;
    }
    function sellTokensForBNB(address _token, uint256 _tokenAmount) external {
        IERC20 token = IERC20(_token);
        // Transferring tokens to the contract
        token.transferFrom(msg.sender, address(this), _tokenAmount);

        uint256 minBNBAmount1 = getMinimumBnbAmount(_token, _tokenAmount);
        uint256 tokenAmountToUser = (_tokenAmount * 975) / 1000; // 97.5% of BNB to the user
        uint256 TokenToFee = (_tokenAmount * 125) / 10000; // 1.25% of BNB to the fee address     
        uint256 bnbToFee = (minBNBAmount1 * 125) / 10000; // 1.25% of BNB to the fee address
        uint256 bnbToRewardToken = (minBNBAmount1 * 125) / 10000; // 1.25% of BNB to buy the reward token



        // Approving the token amount for swapping
        token.approve(address(pancakeRouter), _tokenAmount);
        address[] memory path = new address[](2);
        path[0] = _token;
        path[1] = WETH;

        // Get the minimum token amount for swap
        uint256 minBNBAmount = getMinimumBnbAmount(_token, tokenAmountToUser);
        // Calculate BNB amounts

        // Swap tokens for BNB
        pancakeRouter.swapExactTokensForETH(tokenAmountToUser, minBNBAmount, path, msg.sender, block.timestamp + 1);
        /*
        // Get the minimum token amount for swap
        uint256 minBNBAmountbnbToFee = getMinimumTokenAmount(rewardToken, bnbToFee);
        // Calculate BNB amounts
        // Swap tokens for BNB
        pancakeRouter.swapExactTokensForETH(TokenToFee, minBNBAmountbnbToFee, path, feeAddress, block.timestamp + 1);

        
        // Buy reward token with the remaining BNB
        address[] memory pathRewardToken = new address[](3);
        pathRewardToken[0] = _token;
        pathRewardToken[1] = WETH;
        pathRewardToken[2] = rewardToken;
        
        // Get the minimum token amount for swap
        uint256 minRewardTokens = getMinimumTokenAmount(rewardToken, bnbToRewardToken);

        pancakeRouter.swapExactETHForTokens{value: TokenToFee}(minRewardTokens, pathRewardToken, address(this), block.timestamp + 1);
        */
        //Reward the user
        /*
        IERC20 rewardTokenContract = IERC20(rewardToken);
        uint256 rewardPercentage = calculateRewardPercentage(lastTransaction[msg.sender]);
        uint256 rewardAmountBNB = (minBNBAmount * rewardPercentage) / 1000;
        uint256 rewardAmount = getMinimumTokenAmount(rewardToken, rewardAmountBNB);

        // Log values before checking
        emit RewardAmount(rewardAmount);
        emit ContractBalance(rewardTokenContract.balanceOf(address(this)));

        require(rewardTokenContract.balanceOf(address(this)) >= rewardAmount, "Insufficient reward tokens");
        rewardTokenContract.transfer(msg.sender, rewardAmount);
        */
        // Update the last transaction timestamp
        lastTransaction[msg.sender] = block.timestamp;
    }

    function getMinimumTokenAmount(address _token, uint256 _bnbAmount) public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = WETH;
        path[1] = _token;

        uint256[] memory amounts = pancakeRouter.getAmountsOut(_bnbAmount, path);

        return amounts[amounts.length - 1];
    }

    function getMinimumBnbAmount(address _token, uint256 _tokenAmount) public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = _token;
        path[1] = WETH;

        uint256[] memory amounts = pancakeRouter.getAmountsOut( _tokenAmount, path);

        return amounts[amounts.length - 1];
    }
    function calculateRewardPercentage(uint256 lastTimestamp) private view returns (uint256) {
        uint256 elapsedTime = block.timestamp - lastTimestamp;
        uint256 minutesElapsed = elapsedTime / 1 minutes;

        if (lastTimestamp == 0 || minutesElapsed < 1) {
            return 30;
        } else if (minutesElapsed < 3) {
            return 23;
        } else if (minutesElapsed < 5) {
            return 20;
        } else if (minutesElapsed < 7) {
            return 10;
        } else {
            return 0;
        }
    }
}