// File: contracts/MyToken.sol


pragma solidity ^0.8.0;


contract MyToken {
    string public name = "MyTok";
    string public symbol = "MTK";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000 ether;
    address public owner;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;


    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);


    constructor() {
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
    }


    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }


    function approve(address spender, uint256 amount) public returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }


    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(amount <= balanceOf[sender], "Not enough balance");
        require(amount <= allowance[sender][msg.sender], "Not enough allowance");
        allowance[sender][msg.sender] -= amount;
        _transfer(sender, recipient, amount);
        return true;
    }


    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from zero address");
        require(recipient != address(0), "Transfer to zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(balanceOf[sender] >= amount, "Not enough balance");
        balanceOf[sender] -= amount;
        balanceOf[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }


    function sell(uint256 amount) public returns (bool) {
        require(msg.sender == owner, "Only owner can sell tokens");
        require(amount > 0, "Sell amount must be greater than zero");
        require(balanceOf[owner] >= amount, "Not enough tokens to sell");
        balanceOf[owner] -= amount;
        totalSupply -= amount;
        emit Transfer(owner, address(0), amount);
        return true;
    }
}