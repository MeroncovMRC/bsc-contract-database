
// File: contracts/farmNoProxy.sol
pragma solidity ^0.8.15;

// SPDX-License-Identifier: MIT

import "./DependenciesNoProxy.sol";

interface IStrategy {

    // Sum of all shares of users
    function sharesTotal() external view returns (uint256);

    // Get wantLockedTotal and sharesTotal  
    function getShares() external view returns (uint256, uint256);

    // Transfer want tokens gammaFarm -> strategy
    function deposit(uint256 _wantAmt) external returns (uint256);
    function depositAuthorized(uint256 _wantAmt) external returns (uint256);

    // Transfer want tokens strategy -> gammaFarm
    function withdraw(uint256 _wantAmt) external returns (uint256, uint256);

    // Transfer infinity want tokens strategy -> gammaFarm
    function unstake(uint256 _wantAmt, bool instantly) external returns (uint256, uint256);

    // Transfer want tokens without claiming pending rewards strategy -> gammaFarm
    function emergencyWithdraw(uint256 _wantAmt) external returns (uint256, uint256);

    // Exchange rate between gTokens and iTokens
    function iTokenExchangeRate() external view returns (uint256);

    // Transfer rewards for autocompounding gammaFarm -> strategy
    function earnGammaProfits() external;

    // get pending Rewards generated by strategy
    function getStratPendingRewards() external view returns (uint256);
}

interface Reservoir {
    
    // Get farm drip rate per block 
    function farmV2DripRate() external view returns(uint);

    // Drip rewards reservoir -> gammaFarm
    function drip() external;
    
}

interface IToken {

    // Mint iTokens
    function mint(address accountAddress, uint256 amount) external;

    // Burn iTokens
    function burn(address accountAddress, uint256 amount) external;
}

interface GToken {
    function exchangeRateStored() external view returns (uint);
}

interface GammaTroller {
    function updateFactor(address _user, uint256 _newiGammaBalance) external;
}


contract PlanetFarm is Ownable, ReentrancyGuard {

    using SafeERC20 for IERC20;
    using Math for uint256;

    // Info of each user.
    struct UserInfo {
        uint256 shares; // Number of shares that the user has in the pool.
        uint256 rewardDebt; // Reward adjustment that the user should not receive at the next distribution.
        uint256 factor; // Square root of user.shares * iGammaBalance. This decides the share of boosted rewards that the user receives.
        
        // infinity vault related variables
        uint256 iTokenToBeUnstaked; // keep track of how much iToken the user has started unstaking
        uint256 unstakeStartTime;  // keep track of timestamp at which startUnstakeProcess function is called
        uint256 minTimeToWithdraw; // keep track of minTimeToWithdraw when startUnstakeProcess function is called
        uint256 gTokenToBeUnstaked; //keep track of how much  gToken the user has given for unstaking
        uint256 unstakingRewardDebt; // keep track of the reward debt lost due to unstaking
    }

    struct PoolInfo {
        uint256 allocPoint; //  Number of allocation points assigned to this pool. It determines the share of GAMMA distributed to this pool in the farm.
        uint256 lastRewardBlock; // Block number at which the last GAMMA distribution occurred.
        uint256 accGAMMAPerShare; // Accumulated GAMMA per share, times 1e12.
        IERC20 want; // Address of the want/lp token.
        address strat; // Address of the strategy that will store or compound want tokens.
        uint256 accGAMMMAPerFactorPerShare; // Boosted GAMMA rewards to be provided to users per user factor
        uint256 gammaRewardBoostPercentage; // Portion of the total GAMMA rewards to be rewarded to user as boosted rewards
        uint256 totalFactor; // Total factor of the pool. This is the sum of the user factors of all the users in the pool.
        bool isInfinity; // whether the pool is any infinity pool
        address gToken; // address of gToken associated with the infinity pool
        address iToken; // address of iToken associated with the infinity pool
        bool hasStratRewards; // whether the pool has strategy generating extra rewards inaddition to the farm rewards
        bool isBoosted; // whether the pool has boosted rewards
    }

    address public GAMMA; 
    address public iGammaAddress; // To handle GAMMA infinity vault separately from all other pools
    uint256 public iGammaPid; 
    uint256 public minTimeToWithdraw;
    uint256 public totalAllocPoint; // Total allocation points. Must be the sum of all allocation points in all pools.

    bool public autoStakeGamma; // controls whether to stake users rewards to stake to infinity vault or transfer to user
    bool public isDrip; // Specifies if rewards from reservor are turned on for the farm

    PoolInfo[] public poolInfo; // Info of each pool.
    Reservoir public ReservoirAddress;
    GammaTroller public GammaTrollerAddress;
    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // Info of each user that stakes tokens.
    mapping(address => uint256) internal usersClaimableGamma;
    mapping(address => uint256[]) public usersPoolList;


    // Controls whether a given address/user can deposit to gamma infinity vault on behalf of someone else 
    mapping(address => bool) public authorized; 
    
    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);

    constructor () {

        ReservoirAddress = Reservoir(0xa6928730381e0d5ac2A01DfD208D226F47a170d1);
        GammaTrollerAddress = GammaTroller(0x13F9d3caf2bfB5772eF42bc9C4FA6a69Bd6a652D);
        GAMMA = 0xD009348909f5be1ED9125917Ad82F8CD923c8CAe;
        minTimeToWithdraw = 15 minutes;
        totalAllocPoint = 0; // Total allocation points. Must be the sum of all allocation points in all pools.
        isDrip = true;
        autoStakeGamma = true;
    }
    
    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }

    // Add a new token to the pool. Can only be called by the owner.
    function add(uint256 _allocPoint, IERC20 _want, address _strat, uint256 _gammaRewardBoostPercentage, bool _withUpdate, bool _isInfinity, address _iToken, address _gToken, bool _hasStratRewards) external onlyOwner{
        require(_gammaRewardBoostPercentage <= 10_000, ">10k");
        // _withudpate should always be true. Made it optional as if we have too many pools, this function might fail. 
        // In that case we call massUpdatePools separately first and then call this fucntion with _withUpdate set to false.
        if (_withUpdate) {
            massUpdatePools();
        }
        //uint256 lastRewardBlock = block.number;
        totalAllocPoint = totalAllocPoint + _allocPoint;
        
        PoolInfo memory poolData = PoolInfo({
            want: _want,
            allocPoint: _allocPoint,
            lastRewardBlock: block.number,
            accGAMMAPerShare: 0,
            strat: _strat,
            accGAMMMAPerFactorPerShare: 0, // user's GAMMA share per factor 
            gammaRewardBoostPercentage: _gammaRewardBoostPercentage, // percentage of total dripped that will go for boosted rewards
            totalFactor: 0,
            isInfinity: _isInfinity,
            iToken: _iToken,
            gToken: _gToken,
            hasStratRewards: _hasStratRewards,
            isBoosted: true
        });

        poolInfo.push(poolData);
    
    }
    // Updates the given pool's GAMMA allocation point and gammaRewardBoostPercentage. Can only be called by the owner.
    function set(uint256 _pid, uint256 _allocPoint, uint256 _gammaRewardBoostPercentage, bool _withUpdate, bool _hasStratRewards) external onlyOwner{
        require(_gammaRewardBoostPercentage <= 10_000, ">10k");
        if (_withUpdate) {
            massUpdatePools();
        }
        totalAllocPoint = (totalAllocPoint - poolInfo[_pid].allocPoint) + _allocPoint;
        poolInfo[_pid].allocPoint = _allocPoint;
        poolInfo[_pid].gammaRewardBoostPercentage = _gammaRewardBoostPercentage;
        // This should be true for pools that has startegies generating rewards 
        poolInfo[_pid].hasStratRewards = _hasStratRewards;
    }

    /// @notice Removes pool from the boosted list
    /// @param _pid poolInfo pid that needs to be removed
    function deprecateBoostForPool(uint256 _pid) external onlyOwner {
        require(poolInfo[_pid].gammaRewardBoostPercentage == 0, "boost !0");
        
        //PoolInfo storage poolData = poolInfo[_pid];
        poolInfo[_pid].isBoosted = false;  

    }

    /// @notice Removes pool from users pool list 
    /// @param _pid poolInfo pid that needs to be removed
    /// @param _user user for which the pid is to be removed from the list
    function _removePoolFromUsersPoolList(uint256 _pid, address _user) internal {

        uint256 userPoolListLength = usersPoolList[_user].length;
        for(uint256 i = 0; i < userPoolListLength; ++i){
            if(usersPoolList[_user][i] == _pid){
                usersPoolList[_user][i] = usersPoolList[_user][userPoolListLength - 1];
                usersPoolList[_user].pop();
                break;
            }
        }
    }

    // Return reward multiplier over the given _from to _to block.
    function getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256){
        if(!isDrip){
            return 0;
        }
        return _to - _from;
    }

    // View function to calculate pending GAMMA for one pool.
    function _pendingGAMMA(uint256 _pid, address _user) internal view returns (uint256) {
        if (_pid == iGammaPid){
            return 0;
        }
        PoolInfo memory pool = poolInfo[_pid];
        //UserInfo memory user = userInfo[_pid][_user];
        uint256 accGAMMAPerShare = pool.accGAMMAPerShare;
        uint256 accGAMMMAPerFactorPerShare = pool.accGAMMMAPerFactorPerShare;
        uint256 userShares = userInfo[_pid][_user].shares;

        if(pool.isInfinity) {
            userShares = IERC20(pool.iToken).balanceOf(_user) - userInfo[_pid][_user].iTokenToBeUnstaked;
        }

        uint256 sharesTotal = IStrategy(pool.strat).sharesTotal();
        if (block.number > pool.lastRewardBlock && sharesTotal != 0) {
            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
            uint256 GAMMAReward = (multiplier * ReservoirAddress.farmV2DripRate() * pool.allocPoint)/totalAllocPoint;

            if(pool.hasStratRewards){
                    GAMMAReward = GAMMAReward + IStrategy(pool.strat).getStratPendingRewards();
            }

            accGAMMAPerShare = accGAMMAPerShare + ((GAMMAReward*1e12)*(10_000 - pool.gammaRewardBoostPercentage))/(sharesTotal*10_000);

            if(pool.gammaRewardBoostPercentage != 0 && pool.totalFactor != 0){
                accGAMMMAPerFactorPerShare = accGAMMMAPerFactorPerShare + (GAMMAReward*1e12*pool.gammaRewardBoostPercentage)/(pool.totalFactor*10_000);
            }            
        }
        return (userShares*accGAMMAPerShare + userInfo[_pid][_user].factor*accGAMMMAPerFactorPerShare)/1e12 - userInfo[_pid][_user].rewardDebt;
    }

    // View function to see pending GAMMA on frontend for all pools.
    function pendingGAMMAAllPools(address _user) external view returns (uint256) {
        uint256 poolLen = usersPoolList[_user].length;
        uint256 totalPendingGamma;

        for(uint256 i = 0; i < poolLen; ++i){
            totalPendingGamma = totalPendingGamma + _pendingGAMMA(usersPoolList[_user][i], _user);
        }
        return totalPendingGamma + usersClaimableGamma[_user];
    }

    // View function to see staked Want tokens on frontend.
    function stakedWantTokens(uint256 _pid, address _user) external view returns (uint256){
        (uint256 wantLockedTotal, uint256 sharesTotal) = IStrategy(poolInfo[_pid].strat).getShares();
        if (sharesTotal == 0) {
            return 0;
        }
        if(poolInfo[_pid].isInfinity){
            return (IERC20(poolInfo[_pid].iToken).balanceOf(_user)*wantLockedTotal*GToken(poolInfo[_pid].gToken).exchangeRateStored())/(sharesTotal*1e36);
        }
        else{
            return (userInfo[_pid][_user].shares*wantLockedTotal)/sharesTotal;
        }
    }

    // Update reward variables for all pools. Be careful of gas spending!
    function massUpdatePools() public{
        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {
            updatePool(pid);
        }
    }

    // Update reward variables of the given pool to be up-to-date.
    function updatePool(uint256 _pid) public{
        PoolInfo storage pool = poolInfo[_pid];
        uint256 sharesTotal = IStrategy(pool.strat).sharesTotal();

        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        
        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);

        pool.lastRewardBlock = block.number;

        if (sharesTotal == 0 || pool.allocPoint == 0 || multiplier == 0) {
            return;
        }
    
        uint256 GAMMAReward = (multiplier * ReservoirAddress.farmV2DripRate() * pool.allocPoint)/totalAllocPoint;

        // For GAMMA infinity vault, we send farm rewards to strategy and also collect green planet rewards in strategy 
        // and supply both to green planet right away. There are no rewards to be distributed to the user.
        if (_pid == iGammaPid){
            if(GAMMAReward > IERC20(GAMMA).balanceOf(address(this)))
                ReservoirAddress.drip();

            IERC20(GAMMA).safeTransfer(pool.strat, GAMMAReward);
            IStrategy(pool.strat).earnGammaProfits();

            return;
        }
        // For any pools that are generating extra rewards in the strategy, in addition to the farm rewards, (for example, AQUA infinity vault), 
        // we claim rewards from strategy and bring back to farm so that those rewards are included in reward distribution
        if (pool.hasStratRewards) {           
            uint256 balBefore = IERC20(GAMMA).balanceOf(address(this));
            IStrategy(pool.strat).earnGammaProfits();
            uint256 balDiff = IERC20(GAMMA).balanceOf(address(this)) - balBefore;
            GAMMAReward = GAMMAReward + balDiff;
        }

        //Reserving gamma based on gammaRewardBoostRate to reward the gamma stakers only
        //So before 100% gamma went to everyone now updatePool function divides total gamma dripped
        //into two bags one for boosted rewards other for the normal rewards. 
        if(pool.totalFactor != 0){
            pool.accGAMMMAPerFactorPerShare = pool.accGAMMMAPerFactorPerShare + (GAMMAReward*1e12*pool.gammaRewardBoostPercentage)/(pool.totalFactor*10_000);
        }
        //Common gamma to distributed to everyone else
        pool.accGAMMAPerShare = pool.accGAMMAPerShare + (GAMMAReward*1e12*(10_000 - pool.gammaRewardBoostPercentage))/(sharesTotal*10_000);
    }

    // Want tokens moved from user -> GammaFarm (GAMMA allocation) -> Strategy
    function deposit(uint256 _pid, uint256 _wantAmt) external nonReentrant {
        updatePool(_pid);
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_msgSender()];
        uint256 sharesAdded; // same as mint amount in case of infinity vaults

        _distributePendingRewards(user,pool);

        if (_wantAmt != 0) {

            uint256 balanceBefore = pool.want.balanceOf(address(this));
            pool.want.safeTransferFrom(address(_msgSender()), address(this),_wantAmt);
            uint256 receivedAmount = pool.want.balanceOf(address(this)) - balanceBefore;
            pool.want.safeIncreaseAllowance(pool.strat, receivedAmount);

            uint256 userShares = user.shares;
            if (pool.isInfinity){
                userShares = IERC20(pool.iToken).balanceOf(_msgSender());
            }

            if(userShares == 0){
                usersPoolList[_msgSender()].push(_pid);
            }

            sharesAdded = IStrategy(pool.strat).deposit(receivedAmount);

            if(pool.isInfinity) {
                IToken(pool.iToken).mint(_msgSender(), sharesAdded);
            }
            if(_pid == iGammaPid) {
                userShares = IERC20(iGammaAddress).balanceOf(_msgSender());
                updateFactorInternal(_msgSender(), userShares);
                GammaTrollerAddress.updateFactor(_msgSender(), userShares);

            }
        }
        _updateUserAndPool(user, pool, sharesAdded, true);
        emit Deposit(_msgSender(), _pid, _wantAmt);
    }

    // Want tokens moved from user -> GammaFarm (GAMMA allocation) -> Strategy
    // called by gammatroller
    function depositAuthorized(address _user,uint256 _wantAmt) external onlyAuthorized nonReentrant {
        depositAuthorized(_user, _wantAmt, true);
    }

    // Want tokens moved from user -> GammaFarm (GAMMA allocation) -> Strategy
    // called directly by farm
    function depositAuthorized(address _user,uint256 _wantAmt, bool takeWantFromMsgsender) internal  {
        updatePool(iGammaPid);
        PoolInfo storage pool = poolInfo[iGammaPid];

        if (_wantAmt != 0) {
            if(takeWantFromMsgsender){
                uint256 balanceBefore = pool.want.balanceOf(address(this));
                pool.want.safeTransferFrom(address(_msgSender()), address(this),_wantAmt);
                _wantAmt = pool.want.balanceOf(address(this)) - balanceBefore;
            }

            pool.want.safeIncreaseAllowance(pool.strat, _wantAmt);

            uint256 userShares = IERC20(iGammaAddress).balanceOf(_msgSender());

            if(userShares == 0){
                usersPoolList[_user].push(iGammaPid);
            }
    
            uint256 mintAmount = IStrategy(pool.strat).depositAuthorized(_wantAmt);
            
            IToken(pool.iToken).mint(_user, mintAmount);

            userShares = IERC20(iGammaAddress).balanceOf(_msgSender());

            updateFactorInternal(_user, userShares);
            GammaTrollerAddress.updateFactor(_user, userShares);

        }
        emit Deposit(_user, iGammaPid, _wantAmt);
    }

    /// @notice Updates user and pool infos
    /// @param _user The user that needs to be updated
    /// @param _pool The pool that needs to be updated
    /// @param _shares The amount that was deposited or withdrawn
    /// @param _isDeposit If the action of the user is a deposit
    function _updateUserAndPool(UserInfo storage _user, PoolInfo storage _pool, uint256 _shares, bool _isDeposit) private {

        if (_pool.iToken == iGammaAddress) {
            return;
        }

        if (_pool.isInfinity){
            _user.rewardDebt = ((IERC20(_pool.iToken).balanceOf(_msgSender()) - _user.iTokenToBeUnstaked) * _pool.accGAMMAPerShare)/1e12;
            return;
        }
        
        //uint256 oldShares = _user.shares;
        uint256 newShares = _isDeposit ? _user.shares + _shares : _user.shares - _shares;

        if (_shares != 0) {
            _user.shares = newShares;
        }

        uint256 newFactor = Math.sqrt(newShares * IERC20(iGammaAddress).balanceOf(_msgSender()));

        if (_user.factor != newFactor) {
            // total fator  - old factor + new factor
            _pool.totalFactor = _pool.totalFactor - _user.factor + newFactor;
            _user.factor = newFactor;
        }

        _user.rewardDebt = (newShares * _pool.accGAMMAPerShare + newFactor * _pool.accGAMMMAPerFactorPerShare)/1e12;
    
    }

    /// @notice Distributes pending rewards
    /// @param _user The user that needs to get rewards
    /// @param _pool The pool in which the user receives rewards
    function _distributePendingRewards(UserInfo storage _user, PoolInfo storage _pool) private {
        
        if(_pool.iToken == iGammaAddress){
            return;
        }

        uint256 userShares = _user.shares;
        if(_pool.isInfinity){
            userShares = IERC20(_pool.iToken).balanceOf(_msgSender()) - _user.iTokenToBeUnstaked;
        }
        
        uint256 pending = (userShares*_pool.accGAMMAPerShare + _user.factor * _pool.accGAMMMAPerFactorPerShare)/1e12 - _user.rewardDebt;
        usersClaimableGamma[_msgSender()] = usersClaimableGamma[_msgSender()] + pending;

    }
    
    function updateFactorByItoken(address _sender, address _recepient) external {
        require(_msgSender() == iGammaAddress, "!iGAMMA");

        uint256 senderiGammaBalance = IERC20(iGammaAddress).balanceOf(_sender);
        uint256 recepientiGammaBalance = IERC20(iGammaAddress).balanceOf(_recepient);

        updateFactorInternal(_sender, senderiGammaBalance);
        updateFactorInternal(_recepient, recepientiGammaBalance);

        GammaTrollerAddress.updateFactor(_sender, senderiGammaBalance);
        GammaTrollerAddress.updateFactor(_recepient, recepientiGammaBalance);
    }

    /// @notice Updates factor after after a iGamma token operation.
    /// This function needs to be called by the iGamma contract after
    /// every mint / burn.
    /// @param _user The users address we are updating
    function updateFactorInternal(address _user, uint256 _iGammaBalance) internal {

        uint256 len = usersPoolList[_user].length;
        uint256 pendingRewards;

        for(uint256 i = 0; i < len; ++i) {
            uint256 pid = usersPoolList[_user][i];
            PoolInfo storage pool = poolInfo[pid];
            UserInfo storage user = userInfo[pid][_user];

            // Skip if infinity pool or unboosted Pool
            if (pool.isInfinity || !pool.isBoosted) {
                continue;
            }

            uint256 shares = user.shares;
            // updating pool so that we can distribute rewards based on current user factor
            updatePool(pid);

            // distributing rewards to user based on the current user factor before it gets updated
            uint256 oldFactor = user.factor;
            (uint256 accGAMMAPerShare, uint256 accGAMMAPerFactorPerShare) = (pool.accGAMMAPerShare, pool.accGAMMMAPerFactorPerShare);
            pendingRewards = pendingRewards + (shares*accGAMMAPerShare + oldFactor*accGAMMAPerFactorPerShare)/1e12 - user.rewardDebt;

            // Update user factor based on new iGamma Balance
            uint256 newFactor = Math.sqrt(shares * _iGammaBalance);
            user.factor = newFactor;
            pool.totalFactor = pool.totalFactor - oldFactor + newFactor;

            // update reward debt based on the latest distribution
            user.rewardDebt = (shares*accGAMMAPerShare + newFactor*accGAMMAPerFactorPerShare)/1e12;
        }

        usersClaimableGamma[_user] += pendingRewards;
    }

    // Withdraw LP tokens from Strategy.
    function withdraw(uint256 _pid, uint256 _wantAmt) external nonReentrant {    
        PoolInfo storage pool = poolInfo[_pid];
        require(!pool.isInfinity, "!infinity");
        updatePool(_pid);
        UserInfo storage user = userInfo[_pid][_msgSender()];

        (uint256 wantLockedTotal, uint256 sharesTotal) = IStrategy(pool.strat).getShares();
        uint256 toBeSentToUser;
        uint256 sharesRemoved;

        require(user.shares !=0, "user.shares 0");
        require(sharesTotal !=0, "sharesTotal 0");

        _distributePendingRewards(user,pool);

        // Withdraw want tokens
        uint256 amount = (user.shares*wantLockedTotal)/sharesTotal;
        if (_wantAmt > amount) {
            _wantAmt = amount;
        }
        if (_wantAmt != 0) {
            (sharesRemoved, toBeSentToUser) = IStrategy(pool.strat).withdraw(_wantAmt);  
            _updateUserAndPool(user, pool, sharesRemoved, false);

             if(user.shares == 0)
                _removePoolFromUsersPoolList(_pid, _msgSender());
                pool.want.safeTransfer(address(_msgSender()), toBeSentToUser);
        }else{
            // upate rewarddebt for the reward distribution done at the beginning of the function
            user.rewardDebt = (user.shares * pool.accGAMMAPerShare + user.factor * pool.accGAMMMAPerFactorPerShare)/1e12;
        }
        emit Withdraw(_msgSender(), _pid, sharesRemoved);
    }

    function claimAllPoolsPendingGamma() external nonReentrant {
        uint256 length = usersPoolList[_msgSender()].length;
        uint256 pendingRewards;
        
        for(uint256 i = 0; i < length; ++i) {
            uint256 pid = usersPoolList[_msgSender()][i];
            if(pid == iGammaPid) {
                continue;
            }

            updatePool(pid);
            PoolInfo memory pool = poolInfo[pid];
            UserInfo storage user = userInfo[pid][_msgSender()];

            uint256 userShares = user.shares;
            if(pool.isInfinity){
                userShares = IERC20(pool.iToken).balanceOf(_msgSender()) - user.iTokenToBeUnstaked;
            }
        
            pendingRewards = pendingRewards + (userShares*pool.accGAMMAPerShare + user.factor * pool.accGAMMMAPerFactorPerShare)/1e12 - user.rewardDebt;
            user.rewardDebt = (userShares*pool.accGAMMAPerShare + user.factor*pool.accGAMMMAPerFactorPerShare)/1e12;
        }

        pendingRewards += usersClaimableGamma[_msgSender()];
        usersClaimableGamma[_msgSender()] = 0;

        if(pendingRewards > IERC20(GAMMA).balanceOf(address(this)))
            ReservoirAddress.drip();

        if(pendingRewards != 0) {
            if(autoStakeGamma)
                depositAuthorized(_msgSender(),pendingRewards, false);
            else
                IERC20(GAMMA).safeTransfer(_msgSender(), pendingRewards);
        }
    }

    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _pid) external nonReentrant {
        PoolInfo storage pool = poolInfo[_pid];
        require(!pool.isInfinity , "infinity");
        UserInfo storage user = userInfo[_pid][_msgSender()];

        (uint256 wantLockedTotal, uint256 sharesTotal) = IStrategy(pool.strat).getShares();
       
        uint256 amount = (user.shares*wantLockedTotal)/sharesTotal;
        
        uint256 wantBalBefore = IERC20(pool.want).balanceOf(address(this));
        IStrategy(pool.strat).emergencyWithdraw(amount); 
        uint256 wantBalAfter = IERC20(pool.want).balanceOf(address(this));

        uint256 wantBal = wantBalAfter - wantBalBefore;
        if (wantBal < amount) {
            amount = wantBal;
        }

        user.shares = 0;
        user.rewardDebt = 0;
        pool.totalFactor = pool.totalFactor - user.factor;    
        user.factor = 0;
    
        _removePoolFromUsersPoolList(_pid, _msgSender());

        pool.want.safeTransfer(address(_msgSender()), amount);
    }

    function inCaseTokensGetStuck(address _token, uint256 _amount) external onlyOwner{
        require(_token != GAMMA, "!safe");
        IERC20(_token).safeTransfer(_msgSender(), _amount);
    }

    function setReservoir(Reservoir _reservoir) external onlyOwner {
        ReservoirAddress = _reservoir;
    }

    function setGammaTroller(GammaTroller _gammaTroller) external onlyOwner {
        GammaTrollerAddress = _gammaTroller;
    }
    
    function changeIsDrip(bool _dripStatus, bool _withUpdate) external onlyOwner {
        require(_dripStatus != isDrip,"same");
        if (_withUpdate)
            massUpdatePools();

        isDrip = _dripStatus;        
    }

    function setAutoStakeGamma(bool _isAutoStakeGamma) external onlyOwner {
        autoStakeGamma = _isAutoStakeGamma;
    }

    
    function getUserITokenToBeUnstaked(address account, uint256 pid) external view returns(uint256) {
        return userInfo[pid][account].iTokenToBeUnstaked;
    }

    /**
     * @notice Starts unstaking phase for caller for specific iToken of user
     * @param unstakeAmount: number of tokens given for unstaking 
     */
    function startUnstakeProcess(uint256 _pid, uint256 unstakeAmount) external nonReentrant{
        PoolInfo storage pool = poolInfo[_pid];
        require(pool.isInfinity, "!infinity");
        UserInfo storage user = userInfo[_pid][_msgSender()];
        
        // get rewards up to date to be claimed for AQUA infinity vault, and autocompound rewards in strategy for GAMMA infinity vault
        updatePool(_pid); 
        // distribute rewards so far minus the rewards for already unstaking amount to the user
        _distributePendingRewards(user,pool);

        uint256 useriTokenBalance = IERC20(pool.iToken).balanceOf(_msgSender());

        //iTokens user has already given for unstake
        uint256 iTokenAlreadyGivenForUnstake = user.iTokenToBeUnstaked; 

        require(useriTokenBalance > iTokenAlreadyGivenForUnstake,
        "useriToken<=iTokenAlreadyGivenForUnstake");

        //amount of gToken user can unstake more
        uint256 iTokenUserCanUnstakeMore = useriTokenBalance - iTokenAlreadyGivenForUnstake;
        uint256 exchangeRate = IStrategy(pool.strat).iTokenExchangeRate();
        uint256 gToken_exchange_rate = GToken(pool.gToken).exchangeRateStored();

        uint256 underlyingEquivalentOfUsersBal = (iTokenUserCanUnstakeMore*exchangeRate*gToken_exchange_rate)/1e36;

        if (unstakeAmount > underlyingEquivalentOfUsersBal){
            unstakeAmount = underlyingEquivalentOfUsersBal;
        }

        uint256 unstakegTokenAmount =  (unstakeAmount * 1e18) / gToken_exchange_rate;
        uint256 unstakeItokenAmount = (unstakegTokenAmount * 1e18) / exchangeRate;
                 
        require(unstakeItokenAmount != 0,"!UnstakeiTokenAmount<=0");

        user.iTokenToBeUnstaked += unstakeItokenAmount;
        user.unstakeStartTime = block.number;
        user.minTimeToWithdraw = minTimeToWithdraw;
        user.gTokenToBeUnstaked += unstakegTokenAmount;

        if(_pid != iGammaPid) {
            user.rewardDebt = (((useriTokenBalance - user.iTokenToBeUnstaked) * pool.accGAMMAPerShare) / (1e12));
            user.unstakingRewardDebt += (((unstakeItokenAmount) * pool.accGAMMAPerShare) / (1e12));
        }
    }

    /**
     * @notice stops unstaking phase for caller if unstake phase is already started
     */
    function stopUnstakeProcess(uint256 _pid) external nonReentrant{
       /*
        * Stop ongoing unstake process if present for caller 
        */
        stopUnstakeProcessInternal(_msgSender(), _pid);
    }

    /**
     * @notice stops unstaking phase for caller if unstake phase is already started
     */
    function stopUnstakeProcessByIToken(address account, uint256 _pid) external nonReentrant{
        PoolInfo storage pool = poolInfo[_pid];
        require((pool.iToken == _msgSender()),"unauth");
        stopUnstakeProcessInternal(account, _pid);
    }

    function stopUnstakeProcessInternal(address userAddress, uint256 _pid) internal {
       /*
        * Stop ongoing unstake process if present for caller 
        */
        UserInfo storage user = userInfo[_pid][userAddress];
        require(user.iTokenToBeUnstaked != 0 , "Nothing's unstaking");
        user.rewardDebt += user.unstakingRewardDebt;
        user.unstakingRewardDebt = 0;
        user.iTokenToBeUnstaked = 0;
        user.unstakeStartTime = 0;
        user.minTimeToWithdraw = 0;
        user.gTokenToBeUnstaked = 0;
    }

    function unstakeInstantly(uint256 _pid, uint256 unstakeAmount ) external nonReentrant{
        PoolInfo storage pool = poolInfo[_pid];
        require(pool.isInfinity, "!infinity");
        UserInfo storage user = userInfo[_pid][_msgSender()];

        updatePool(_pid); 
        _distributePendingRewards(user,pool);

        uint256 itokens;
        uint256 useriTokenBalance = IERC20(pool.iToken).balanceOf(_msgSender());
        uint256 exchange_rate_before_withdraw  = IStrategy(pool.strat).iTokenExchangeRate();
        uint256 gToken_exchange_rate = GToken(pool.gToken).exchangeRateStored();

        uint256 underlyingEquivalentOfUsersBal = (useriTokenBalance*exchange_rate_before_withdraw*gToken_exchange_rate)/1e36;

        if (unstakeAmount > underlyingEquivalentOfUsersBal){
            unstakeAmount = underlyingEquivalentOfUsersBal;
        }
      
        uint256 currentAmount =  (unstakeAmount * 1e18) / gToken_exchange_rate;
        
        uint256 wantAmtTobeSentToUser;
        uint256 stratWantTokensRemoved;
        if (currentAmount != 0) {
            (wantAmtTobeSentToUser, stratWantTokensRemoved ) = IStrategy(pool.strat).unstake(currentAmount, false);
        }

        itokens = (stratWantTokensRemoved * 1e18) / exchange_rate_before_withdraw;

        require(itokens <= useriTokenBalance - user.iTokenToBeUnstaked,
            "!enough itokens");
        
        IToken(pool.iToken).burn(_msgSender(), itokens);
        if(_pid == iGammaPid ) {
            uint256 useriGammaBalance = IERC20(iGammaAddress).balanceOf(_msgSender());
            updateFactorInternal(_msgSender(), useriGammaBalance);
            GammaTrollerAddress.updateFactor(_msgSender(), useriGammaBalance);
        }

        _updateUserAndPool(user, pool, 0, false);

        useriTokenBalance = IERC20(iGammaAddress).balanceOf(_msgSender());
        if(useriTokenBalance == 0)
            _removePoolFromUsersPoolList(_pid, _msgSender());

        pool.want.safeTransfer(_msgSender(), wantAmtTobeSentToUser);
        emit Withdraw(_msgSender(), _pid, stratWantTokensRemoved);    
    }

    function unstakeAfterMinWithdrawTime(uint256 _pid) external nonReentrant{        
        PoolInfo storage pool = poolInfo[_pid];
        require(pool.isInfinity, "!infinity");
        UserInfo storage user = userInfo[_pid][_msgSender()];

        updatePool(_pid); 
        _distributePendingRewards(user,pool);
       
        uint256 useriTokenBalance = IERC20(pool.iToken).balanceOf(_msgSender());
        uint256 itokens = user.iTokenToBeUnstaked;
        uint256 totalItokensUnstaking = user.iTokenToBeUnstaked;

        require(itokens != 0,"itok<=0");
        require(user.unstakeStartTime + user.minTimeToWithdraw < block.number, "early");

        uint256 currentAmount = user.gTokenToBeUnstaked;
        uint256 exchange_rate_before_withdraw  = (currentAmount * 1e18) / itokens;

        uint256 wantAmtTobeSentToUser;
        uint256 stratWantTokensRemoved;
        if (currentAmount != 0) {
            (wantAmtTobeSentToUser, stratWantTokensRemoved ) = IStrategy(pool.strat).unstake(currentAmount, false);
        }

        itokens = (stratWantTokensRemoved * 1e18) / exchange_rate_before_withdraw;
        require(itokens <= useriTokenBalance,"Withdraw amount exceeds balance");

        IToken(pool.iToken).burn(_msgSender(), itokens);
        if(_pid == iGammaPid) {
            useriTokenBalance = IERC20(iGammaAddress).balanceOf(_msgSender());
            updateFactorInternal(_msgSender(), useriTokenBalance);
            GammaTrollerAddress.updateFactor(_msgSender(), useriTokenBalance);
        }

        if(user.gTokenToBeUnstaked > stratWantTokensRemoved && user.iTokenToBeUnstaked > itokens) {
       	   user.gTokenToBeUnstaked -= stratWantTokensRemoved;
           user.iTokenToBeUnstaked -= itokens;
	    }
        else {
       	   user.gTokenToBeUnstaked = 0;
           user.iTokenToBeUnstaked = 0;
       	   user.unstakeStartTime = 0;
       	   user.minTimeToWithdraw = 0;
        }

        _updateUserAndPool(user, pool, 0, false);
        useriTokenBalance = IERC20(pool.iToken).balanceOf(_msgSender());
        if( useriTokenBalance == 0)
            _removePoolFromUsersPoolList(_pid, _msgSender());

        pool.want.safeTransfer(_msgSender(), wantAmtTobeSentToUser);

        uint256 lostRewards = ((itokens * pool.accGAMMAPerShare) / (1e12)) - ((user.unstakingRewardDebt* itokens)/totalItokensUnstaking);
        if (_pid == iGammaPid){
            IERC20(GAMMA).safeTransfer(pool.strat, lostRewards);
            IStrategy(pool.strat).earnGammaProfits();
        }
        else{
            pool.accGAMMAPerShare = pool.accGAMMAPerShare + lostRewards;
            user.unstakingRewardDebt = (user.iTokenToBeUnstaked * ((user.unstakingRewardDebt * 1e12)/totalItokensUnstaking)) / (1e12);
        }
        emit Withdraw(_msgSender(), _pid, stratWantTokensRemoved);
    }

    function updateInfinityVaultVariables(uint256 _iGammaPid, address _iGammaAddress) external onlyOwner {
        iGammaPid = _iGammaPid;
        iGammaAddress =  _iGammaAddress;
    }

    function setMinTimeToWithdraw(uint256 newMinTimeToWithdraw) external onlyOwner{
        require(newMinTimeToWithdraw <= 365 days, "too high");
        minTimeToWithdraw = newMinTimeToWithdraw;
    }

    /**
    * @notice this will toggle vault authorized status 
    *         in the contract it is called by owner address only
    */
    function updateAuthorizedAddress(address _vault) external onlyOwner {
        require(_vault != address(0),"address(0)");
        authorized[_vault] = !authorized[_vault];
    }

    function _onlyAuthorized() internal view {
        require(authorized[_msgSender()] == true, "!authorized");
    }

    /**
    * @notice Checks if the _msgSender() is authorized or not
    */
    modifier onlyAuthorized() {
        _onlyAuthorized();
        _;
    }
}


// File: contracts/DependenciesNoProxy.sol
pragma solidity ^0.8.15;

// SPDX-License-Identifier: MIT

library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
 /**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */

library Math {

    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
    function sqrt(uint256 y) internal pure returns (uint256 z) {
        if (y > 3) {
            z = y;
            uint x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}

interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender,uint256 value);
}

library SafeERC20 {

    using AddressUpgradeable for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector,spender,newAllowance));
    }

    function _callOptionalReturn(IERC20 token, bytes memory data) private {

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


// import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol";
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}
