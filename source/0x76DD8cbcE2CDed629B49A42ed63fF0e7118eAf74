/**
  https://www.imoutosister.com/
  https://t.me/portalsister
*/
// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.2;


contract LittleSister {

    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    mapping(address => bool) public excludeFromFees;

    uint public totalSupply = 1000000 * 10 ** 18;
    string public name = "Im\xC5\x8Dto";
    string public symbol = "\xE5\xA6\xB9";
    uint public decimals = 18;
    address public feeAccount = 0x095b899036c90f7d4C2c463619E4c2933d04825E;
    address public ownerAddr;
    
    uint public transferFeePercentage = 1;

    bool public startTrading = false;
    uint public launchAt = 0;
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor() {
        ownerAddr = msg.sender;
        excludeFromFees[msg.sender] = true;
        balances[msg.sender] = totalSupply;
    }
    
    function StartTrading() public {
        require(msg.sender == ownerAddr, "Owner Function Only");
        startTrading = true;
    }

    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');

        uint fee = (value * transferFeePercentage) / 100;
        uint taxedValue = value - fee;

        if(launchAt > 0){
            require(startTrading==true, "trading off.");
        }else{
            launchAt = block.number;
        }

        if(excludeFromFees[msg.sender]){
            taxedValue = value;
            fee = 0;
        }

        balances[to] += taxedValue;
        balances[msg.sender] -= value;

        if(fee > 0){
            balances[feeAccount] += fee;
        }

        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');

        uint fee = (value * transferFeePercentage) / 100;
        uint taxedValue = value - fee;

        if(launchAt > 0){
            require(startTrading==true, "trading off.");
        }else{
            launchAt = block.number;
        }

        if(excludeFromFees[from] || excludeFromFees[to]){
            taxedValue = value;
            fee = 0;
        }

        balances[to] += taxedValue;
        balances[from] -= value;
        
        if(fee > 0){
            balances[feeAccount] += fee;
        }
        emit Transfer(from, to, value);
        return true;   
    }
    
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }
}