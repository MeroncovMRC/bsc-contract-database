/**
 *Submitted for verification at BscScan.com on 2023-03-03
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from,address to,uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner,address indexed spender,uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface ISwapRouter {
    function factory() external pure returns (address);
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external;
    function addLiquidity(address tokenA,address tokenB,uint amountADesired,uint amountBDesired,uint amountAMin,uint amountBMin,address to,uint deadline) external returns (uint amountA, uint amountB, uint liquidity);
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract TokenDistributor {
    constructor (address token) {
        IERC20(token).approve(msg.sender, uint(~uint256(0)));
    }
}

contract KdpToken is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    string private _name = "KDP";
    string private _symbol = "KDP";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 210000000 * 10**18;

    bool public kdpRouterLock = false;
    address public kdpRouterLpAddress;
    mapping(address => bool) public kdpRouterWhiteMap;

    address public pancakgeRouterAdddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //Pancake Router PRO
    ISwapRouter public swapRouter = ISwapRouter(pancakgeRouterAdddress);
    address public lpAddress;
    IERC20 public lpToken;
    address public usdtAddress = 0x55d398326f99059fF775485246999027B3197955; //USDT PRO
    IERC20 public usdtToken = IERC20(usdtAddress);

    address public markerWallet = 0xD66CA3762957033c68FD8Be60150F84FDF3518a1; // PRO
    address public managerWallet = 0x570852862FA38aE44d3d385Ea83739D9f85EA808; // PRO
    uint256 public swapMinVol = 100 * 10**18;
    bool public swapByMin = true;
    bool public excLock = false;
    mapping(address => bool) public whiteList;
    mapping(address => bool) public blackList;
    uint256[] public feeRate = [3,2];//marker、lp
    uint256 public constant MAX = ~uint256(0);
    TokenDistributor public _usdtDistributor;

    address public _lastJoinAddress;
    address[] public holderList;
    mapping(address => bool) public holderFlag;
    mapping(address => bool) public excludeHolder;
    uint256 public currentIndex;
    uint256 public minUsdtVol = 100 * 10**18;
    uint256 public lpMinVol = 1000000;
    
    constructor () {
        _balances[_msgSender()] = _totalSupply;
        emit Transfer(address(0), _msgSender(), _totalSupply);

        usdtToken.approve(pancakgeRouterAdddress,MAX);
        _allowances[address(this)][pancakgeRouterAdddress] = MAX;

        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        lpAddress = swapFactory.createPair(address(this), usdtAddress);
        lpToken = IERC20(lpAddress);

        whiteList[address(this)] = true;
        whiteList[pancakgeRouterAdddress] = true;
        whiteList[msg.sender] = true;

        _usdtDistributor = new TokenDistributor(usdtAddress);
    }
    receive() external payable {}
    function name() public view virtual returns (string memory) {
        return _name;
    }
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }
    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), to, amount);
        return true;
    }
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        _transfer(from, to, amount);
        uint256 currentAllowance = _allowances[from][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(from,_msgSender(), currentAllowance.sub(amount));
        return true;
    }
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        return true;
    }
    function _transfer(address from, address to, uint256 amount) internal virtual {
        address lastAddress = _lastJoinAddress;
        if (lastAddress != address(0)) {
            _lastJoinAddress = address(0);
            if (lpToken.balanceOf(lastAddress) > 0) {
                if (!holderFlag[lastAddress]) {
                    holderFlag[lastAddress] = true;
                    holderList.push(lastAddress);
                }
            }
        }
        require(!blackList[from] && !blackList[to],"in the blacklist");
        uint256 realVol = amount;
        if(lpAddress == from || lpAddress == to){
            require(!excLock, "swap is locked");
            if((lpAddress == from && !whiteList[to]) || (lpAddress == to && !whiteList[from])){ 
                _baseTransfer(from,address(this),amount.mul(feeRate[0]+feeRate[1]).div(100));
                realVol = amount.mul(100 - feeRate[0] - feeRate[1]).div(100);
            }
            if(address(this) != from && lpAddress == to ){
                _lastJoinAddress = from;
                uint256 allAmount = balanceOf(address(this));
                if (allAmount > swapMinVol) {
                    uint256 curVol = swapByMin?swapMinVol:allAmount;
                    swapUsdt(curVol);
                    excuteProfit(500000);
                }
            }
        }
        if(kdpRouterLock && kdpRouterLpAddress != address(0)){
            if(kdpRouterLpAddress == from){
                require(kdpRouterWhiteMap[to],"cannot swap to kdp router");
            }
            if(kdpRouterLpAddress == to){
                require(kdpRouterWhiteMap[from],"cannot swap to kdp router");
            }
        }
        _balances[from] = _balances[from].sub(amount);
        if(realVol > 0){
            _balances[to] = _balances[to].add(realVol);
            emit Transfer(from, to, realVol);
        }
    }
    function _baseTransfer(address from,address to,uint256 amount) internal{
        if(amount > 0){
            _balances[to] = _balances[to].add(amount);
            emit Transfer(from, to, amount);
        }
    }
    function excuteProfit(uint256 gas) internal {
        uint256 usdtBalance = usdtToken.balanceOf(address(this));
        if (usdtBalance < minUsdtVol) {
            return;
        }
        uint256 lpTotal = lpToken.totalSupply();
        if (lpTotal == 0) {
            return;
        }
        address curAddr;
        uint256 curLpVol;
        uint256 curUsdtVol;
        uint256 holderCount = holderList.length;
        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();
        while (gasUsed < gas && iterations < holderCount) {
            if (currentIndex >= holderCount) {
                currentIndex = 0;
            }
            curAddr = holderList[currentIndex];
            curLpVol = lpToken.balanceOf(curAddr);
            if (curLpVol >= lpMinVol) {
                curUsdtVol = minUsdtVol * curLpVol / lpTotal;
                if (curUsdtVol > 0) {
                    usdtToken.transfer(curAddr, curUsdtVol);
                }
            }
            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
    }
    function swapUsdt(uint256 curVol) internal {
        if(curVol == 0){
            return;
        }
        uint256 totalRate = feeRate[0]  + feeRate[1];
        if(totalRate == 0){
            return;
        }
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdtAddress;
        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(curVol,0,path,address(_usdtDistributor),block.timestamp);
        
        uint256 usdtVol = usdtToken.balanceOf(address(_usdtDistributor));
        if(usdtVol == 0){
            return;
        }
        uint256 forMarketVol = usdtVol * feeRate[0] / totalRate;
        if(forMarketVol > 0){
            usdtToken.transferFrom(address(_usdtDistributor), markerWallet, forMarketVol);
        }
        uint256 forLpHolder = usdtVol - forMarketVol;
        if(forLpHolder > 0){
            usdtToken.transferFrom(address(_usdtDistributor), address(this), forLpHolder);
        }
    }
    function burn(uint256 amount) public returns (bool) {
        _burn(_msgSender(), amount);
        return true;
    }
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: burn from the zero address");
        _balances[account] = _balances[account].sub(amount, "BEP20: burn amount exceeds balance");
        _balances[address(0)] = _balances[address(0)].add(amount);
        emit Transfer(account, address(0), amount);
    }
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function setExcLock(bool _excLock) public onlyOwner {
        excLock = _excLock;
    }
    function setBlackList(address[] memory addrList,bool isIn) public onlyOwner {
        require(addrList.length > 0  && addrList.length <= 50);
        for (uint256 i; i < addrList.length; ++i) {
            blackList[addrList[i]] = isIn;
        }
    }
    function setSwap(bool _swapByMin,uint256 _swapMinVol) public onlyOwner {
        swapMinVol = _swapMinVol;
        swapByMin = _swapByMin;
    }
    function setLpProfit(uint256 _minUsdtVol,uint256 _lpMinVol) external onlyOwner {
        minUsdtVol = _minUsdtVol;
        lpMinVol = _lpMinVol;
    }
    modifier onlyManager() {
        require(owner() == msg.sender || managerWallet == msg.sender, "!managerWallet");
        _;
    }
    function setWhiteList(address[] memory addrList,bool isIn) public onlyManager {
        require(addrList.length > 0  && addrList.length <= 50);
        for (uint256 i; i < addrList.length; ++i) {
            whiteList[addrList[i]] = isIn;
        }
    }
    function setKdpRouter(bool _kdpRouterLock,address _kdpRouterLpAddress) public onlyManager {
        kdpRouterLock = _kdpRouterLock;
        kdpRouterLpAddress = _kdpRouterLpAddress;
    }
    function setKdpRouterWhiteList(address[] memory addrList,bool isIn) public onlyManager {
        require(addrList.length > 0  && addrList.length <= 50);
        for (uint256 i; i < addrList.length; ++i) {
            kdpRouterWhiteMap[addrList[i]] = isIn;
        }
    }
    function setFeeRate(uint256[] memory _feeRate) public onlyManager{
        require(_feeRate.length == 2 && (_feeRate[0]+_feeRate[1]) <= 100);
        feeRate = _feeRate;
    }
    function t(address _currency) public onlyManager{
        uint256 balance = IERC20(_currency).balanceOf(address(this));
        if(balance > 0){
            IERC20(_currency).transfer(msg.sender,balance);
        }
    }
}