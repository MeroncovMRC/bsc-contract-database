// File: @openzeppelin/contracts/GSN/Context.sol

pragma solidity ^0.5.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor () internal { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

pragma solidity ^0.5.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        _owner = _msgSender();
        emit OwnershipTransferred(address(0), _owner);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Returns true if the caller is the current owner.
     */
    function isOwner() public view returns (bool) {
        return _msgSender() == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol

pragma solidity ^0.5.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
 * the optional functions; to access them see {ERC20Detailed}.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
    function burn(address account, uint amount) external;

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

pragma solidity 0.5.10;

contract DAOChain is Ownable{
    struct User {

        uint8 status;
       
        uint256 vipLevel;
        
        address upline;
        
        uint256 referrals;
        
        uint256 total_structure;

        uint40 deposit_time;
        
        uint256 deposit_amount;
        
        uint256 deposit_payouts;
        
        uint256 total_deposits;
        
        uint256 total_payouts;

        uint256 rewardTokenAmount;
        
        bool isAdd;
        
        bool isAddV9;
        
    }


    address payable public projectAddress;

    address payable public project1Address;

    address payable public project2Address;

    address payable public fundAddress;

    mapping(address => User) public users;
    
    mapping(address => address[]) public refUsers;

    uint256[] public vipLevelAmount;

    uint256[] public receiveLevel;

    uint8[] public ref_bonuses; // 1 => 1%



    uint256 public total_users = 1;

    uint256 public total_deposited;

    uint256 public total_withdraw;

    IERC20 public rewardToken;

    IERC20 public usdcToken;

    uint256 public tokenSwapRate;
    
    address[] public depositUsers;
    
    address[] public vipLevel9Users;
    
    
    event Upline(address indexed addr, address indexed upline);
    event NewDeposit(address indexed addr, uint256 amount);
    event Withdraw(address indexed addr, uint256 amount);
    event LimitReached(address indexed addr, uint256 amount);

    constructor(IERC20 _usdcToken, IERC20 _rewardToken, uint256 _tokenSwapRate) public {
        
        usdcToken = _usdcToken;
        rewardToken = _rewardToken;
        tokenSwapRate = _tokenSwapRate;

        projectAddress = 0x798eEe06Ff70Bdb1EE03EC72715D68C44B4F9796;
        project1Address = 0x88C80D05f4ca0B7E18191a236d3D9F7B53Be5d1D;
        project2Address = 0x841faF4a2EF1537d576a9c55A3102eEbc5F6d46C;
        
        fundAddress = 0x9280266801b2556361e7372A3deD371EFfd3E75D;
        
        ref_bonuses.push(35);
        ref_bonuses.push(5);
        ref_bonuses.push(5);
        ref_bonuses.push(5);
        ref_bonuses.push(5);
        ref_bonuses.push(5);
        ref_bonuses.push(5);
        ref_bonuses.push(5);
        ref_bonuses.push(5);
        ref_bonuses.push(5);

        vipLevelAmount.push(100*1e18);
        vipLevelAmount.push(300*1e18);
        vipLevelAmount.push(600*1e18);
        vipLevelAmount.push(1500*1e18);
        vipLevelAmount.push(3000*1e18);
        vipLevelAmount.push(5000*1e18);
        vipLevelAmount.push(7000*1e18);
        vipLevelAmount.push(8500*1e18);
        vipLevelAmount.push(10000*1e18);

        receiveLevel.push(1);
        receiveLevel.push(2);
        receiveLevel.push(3);
        receiveLevel.push(4);
        receiveLevel.push(5);
        receiveLevel.push(6);
        receiveLevel.push(7);
        receiveLevel.push(8);
        receiveLevel.push(10);
    }


    function setRewardToken(IERC20 _rewardToken, uint256 _tokenSwapRate) public onlyOwner{

        rewardToken = _rewardToken;
        tokenSwapRate = _tokenSwapRate;
    }

    function setUSDCToken(IERC20 _usdcToken) public onlyOwner{

        usdcToken = _usdcToken;
    }


    function clearRewardToken(uint256 userNum) public onlyOwner {
        
        uint256 depositUsersLen = depositUsers.length;
        
        if(userNum > depositUsersLen) {
            userNum = depositUsersLen;
        }
        
        
        for(uint256 i=0; i<userNum; i++) {
            withdrawRewardToken(depositUsers[0]);
        }
        
    }
    
    function withdrawRewardToken() public {
        
        require(users[msg.sender].rewardTokenAmount > 0, "Cannot withdraw 0");
        
        
        safeTransfer(msg.sender, users[msg.sender].rewardTokenAmount);
        
        emit Withdraw(msg.sender, users[msg.sender].rewardTokenAmount);
        
        users[msg.sender].rewardTokenAmount = 0;
        
        
    }
    
    function withdrawRewardToken(address account) private {
        
        
        if(users[account].rewardTokenAmount > 0) {
            safeTransfer(account, users[account].rewardTokenAmount);
        
            emit Withdraw(account, users[account].rewardTokenAmount);
            
            users[account].rewardTokenAmount = 0;
        } 
        
        deleteDepositUser(account);
    }
    

    function addDepositUser(address account) private{

       depositUsers.push(account);
       
       users[account].isAdd = true;
    }
    
    function deleteDepositUser(address account) private{

       uint256 len = depositUsers.length;
       for (uint256 i = 0; i < len; i++) {
            if (depositUsers[i] == account) {
                depositUsers[i] = depositUsers[len - 1];
                depositUsers.pop();
                
                users[account].isAdd = false;
                break;
            }
        }
    }


    function addVipLevel9User(address account) private{

       vipLevel9Users.push(account);
       
       users[account].isAddV9 = true;
    }
    
    function deleteVipLevel9User(address account) private{

       uint256 len = vipLevel9Users.length;
       for (uint256 i = 0; i < len; i++) {
            if (vipLevel9Users[i] == account) {
                vipLevel9Users[i] = vipLevel9Users[len - 1];
                vipLevel9Users.pop();
                
                users[account].isAddV9 = false;
                
                break;
            }
        }
    }
    

    function level(uint256 _amount) view public returns(uint256) {

        if(_amount >=vipLevelAmount[0] &&  _amount < vipLevelAmount[1]) {
            return 0;
        } else if(_amount >=vipLevelAmount[1] &&  _amount < vipLevelAmount[2]) {
            return 1;
        } else if(_amount >=vipLevelAmount[2] &&  _amount < vipLevelAmount[3]) {
            return 2;
        } else if(_amount >=vipLevelAmount[3] &&  _amount < vipLevelAmount[4]) {
            return 3;
        } else if(_amount >=vipLevelAmount[4] &&  _amount < vipLevelAmount[5]) {
            return 4;
        } else if(_amount >=vipLevelAmount[5] &&  _amount < vipLevelAmount[6]) {
            return 5;
        } else if(_amount >=vipLevelAmount[6] &&  _amount < vipLevelAmount[7]) {
            return 6;
        } else if(_amount >=vipLevelAmount[7] &&  _amount < vipLevelAmount[8]) {
            return 7;
        } else if(_amount >=vipLevelAmount[8]) {
            return 8;
        } 
    }
    
    function isValidAmount(address _addr, uint256 _amount) view private returns(bool) {
        
        if(users[_addr].vipLevel == 0) {
            return (users[_addr].deposit_amount + _amount) == vipLevelAmount[1] 
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[2] 
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[3]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[4]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[5]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[6]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[7]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[8];
        } else if(users[_addr].vipLevel == 1) {
            return (users[_addr].deposit_amount + _amount) == vipLevelAmount[2] 
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[3]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[4]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[5]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[6]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[7]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[8];
        } else if(users[_addr].vipLevel == 2) {
            return (users[_addr].deposit_amount + _amount) == vipLevelAmount[3]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[4]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[5]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[6]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[7]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[8];
        } else if(users[_addr].vipLevel == 3) {
            return (users[_addr].deposit_amount + _amount) == vipLevelAmount[4]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[5]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[6]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[7]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[8];
        } else if(users[_addr].vipLevel == 4) {
            return (users[_addr].deposit_amount + _amount) == vipLevelAmount[5]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[6]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[7]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[8];
        } else if(users[_addr].vipLevel == 5) {
            return (users[_addr].deposit_amount + _amount) == vipLevelAmount[6]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[7]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[8];
        } else if(users[_addr].vipLevel == 6) {
            return (users[_addr].deposit_amount + _amount) == vipLevelAmount[7]
                || (users[_addr].deposit_amount + _amount) == vipLevelAmount[8];
        } else if(users[_addr].vipLevel == 7) {
            return (users[_addr].deposit_amount + _amount) == vipLevelAmount[8];
        } else {
            return false;
        }
        
    }


    function deposit(address _upline, uint256 _amount) payable external {
        _setUpline(msg.sender, _upline);
        _deposit(msg.sender, _amount);
    }

    function _setUpline(address _addr, address _upline) private {
        
        if(users[_addr].upline == address(0) && _upline != _addr && _addr != owner() && (users[_upline].deposit_time > 0 || _upline == owner())) {
            users[_addr].upline = _upline;
            users[_upline].referrals++;

            refUsers[_upline].push(_addr);
            
            emit Upline(_addr, _upline);

            total_users++;

            for(uint8 i = 0; i < ref_bonuses.length; i++) {
                if(_upline == address(0)) break;

                users[_upline].total_structure++;

                _upline = users[_upline].upline;
            }
        }
    }

    function _deposit(address _addr, uint256 _amount) private {
        require(users[_addr].upline != address(0) || _addr == owner(), "No upline");

        if(users[_addr].status == 0 || users[_addr].status == 2) {
            require(_amount == vipLevelAmount[0] 
                || _amount == vipLevelAmount[1] 
                || _amount == vipLevelAmount[2] 
                || _amount == vipLevelAmount[3]
                || _amount == vipLevelAmount[4]
                || _amount == vipLevelAmount[5]
                || _amount == vipLevelAmount[6]
                || _amount == vipLevelAmount[7]
                || _amount == vipLevelAmount[8], "vipLevel Bad amount");
        }

        if(users[_addr].status == 2) {
            require(_amount >= vipLevelAmount[users[_addr].vipLevel], "vipLevel Bad amount");
        }   
        
        if(users[_addr].status == 1) {
            require(isValidAmount(_addr, _amount), "vipLevel Bad amount");
        } 
        
        usdcToken.transferFrom(_addr, address(this), _amount);
        
        if(users[_addr].status == 0 || users[_addr].status == 2) {
            users[_addr].deposit_time = uint40(block.timestamp);
            users[_addr].deposit_amount = 0;
            users[_addr].deposit_payouts = 0;
            users[_addr].status = 1;
            
            
        }
        
        users[_addr].deposit_amount += _amount;

        users[_addr].vipLevel = level(users[_addr].deposit_amount);
        
        if(users[_addr].vipLevel == 8 && !users[_addr].isAddV9) {
            addVipLevel9User(_addr);
            
        }
        
        
        if(!users[_addr].isAdd) {
            addDepositUser(_addr);
        }

        users[_addr].total_deposits += _amount;

        total_deposited += _amount;

        emit NewDeposit(_addr, _amount);

        
        usdcToken.transfer(projectAddress,_amount * 10 / 100);
        
        usdcToken.transfer(project1Address,_amount * 5 / 100);
        
        usdcToken.transfer(project2Address,_amount * 5 / 100);

        
        users[_addr].rewardTokenAmount += (_amount * 5 / 100) * tokenSwapRate/1e18;
       

        uint256 vipLevel9UsersLen = vipLevel9Users.length;
        if(vipLevel9UsersLen > 0) {
            uint256 v9reward =  (_amount * 5 / 100) * tokenSwapRate/1e18 / vipLevel9UsersLen;

            for(uint256 i=0; i<vipLevel9UsersLen; i++) {
                
                if(users[vipLevel9Users[i]].status == 1) {
                    
                    users[vipLevel9Users[i]].rewardTokenAmount += v9reward;
                    
                    if(!users[vipLevel9Users[i]].isAdd) {
                        addDepositUser(vipLevel9Users[i]);
                    }
        
                }
                
            }
        }
            



        address upline = users[_addr].upline;

        uint256 refReward;
        uint256 willReward;
        uint256 overReward;
        uint256 fundReward;
        
        uint256 sendRewardAmount;
        
        if(upline == address(0)) {
            
            fundReward = _amount - (_amount * 20 / 100);
            
        } else {
            for(uint8 i = 0; i < ref_bonuses.length; i++) {

                if(i == 0) {

                if(users[upline].status == 1 && users[upline].vipLevel >= i) {
    
         
                    refReward = _amount * ref_bonuses[i] / 100;
    
                  
                    if((users[upline].deposit_payouts + refReward) > maxPayoutOf(users[upline].deposit_amount)) {
                       
                        willReward = maxPayoutOf(users[upline].deposit_amount) - users[upline].deposit_payouts;
    
                        usdcToken.transfer(upline,willReward);
                        sendRewardAmount += willReward;
    
                        users[upline].deposit_payouts = maxPayoutOf(users[upline].deposit_amount);
                        
                        users[upline].status = 2;
                            
                        if(users[upline].vipLevel == 8) {
                            deleteVipLevel9User(upline);
                            
                        }
    
                        emit LimitReached(upline, users[upline].deposit_payouts);
    
                        
                        overReward = refReward - willReward;
                        
                        fundReward += overReward * 50 / 100;
                        sendRewardAmount += overReward * 50 / 100;
    
                        
                        if(users[users[upline].upline].status == 1 && users[users[upline].upline].vipLevel >= i+1) {
                            
                           
                            if((users[users[upline].upline].deposit_payouts + (overReward * 50 / 100)) > maxPayoutOf(users[users[upline].upline].deposit_amount)) {
    
    
                                usdcToken.transfer(users[upline].upline, maxPayoutOf(users[users[upline].upline].deposit_amount) - users[users[upline].upline].deposit_payouts);
                                sendRewardAmount += maxPayoutOf(users[users[upline].upline].deposit_amount) - users[users[upline].upline].deposit_payouts;
                                
                                
                                fundReward += ((overReward * 50 / 100) - (maxPayoutOf(users[users[upline].upline].deposit_amount) - users[users[upline].upline].deposit_payouts));
                                sendRewardAmount +=((overReward * 50 / 100) - (maxPayoutOf(users[users[upline].upline].deposit_amount) - users[users[upline].upline].deposit_payouts));
                                
    
                                users[users[upline].upline].deposit_payouts = maxPayoutOf(users[users[upline].upline].deposit_amount);
                                
                                users[users[upline].upline].status = 2;
                                
                                if(users[users[upline].upline].vipLevel == 8) {
                                    deleteVipLevel9User(users[upline].upline);
                                }
                                
                                
                                emit LimitReached(users[upline].upline, users[users[upline].upline].deposit_payouts);
    
                                
    
                            } else {
                                
                                usdcToken.transfer(users[upline].upline, overReward * 50 / 100);
                                sendRewardAmount += overReward * 50 / 100;
                                
                                users[users[upline].upline].deposit_payouts += (overReward * 50 / 100);
                            }
    
                        } else {
                            
                            fundReward += overReward * 50 / 100;
                            sendRewardAmount +=overReward * 50 / 100;
                        }
    
    
                    } else {
                        
                        usdcToken.transfer(upline, refReward);
                        sendRewardAmount += refReward;
                        
                        users[upline].deposit_payouts += refReward;
                    }
    
                } else {
    
                    
                    if(users[users[upline].upline].status == 1 && users[users[upline].upline].vipLevel >= i+1) {
                        
                        refReward = _amount * ref_bonuses[i] / 100;
    
                        
                        if((users[users[upline].upline].deposit_payouts + refReward) > maxPayoutOf(users[users[upline].upline].deposit_amount)) {
    
    
                            usdcToken.transfer(users[upline].upline, maxPayoutOf(users[users[upline].upline].deposit_amount) - users[users[upline].upline].deposit_payouts);
                            sendRewardAmount += maxPayoutOf(users[users[upline].upline].deposit_amount) - users[users[upline].upline].deposit_payouts;
                            
                            fundReward += (refReward - (maxPayoutOf(users[users[upline].upline].deposit_amount) - users[users[upline].upline].deposit_payouts));
                            sendRewardAmount += (refReward - (maxPayoutOf(users[users[upline].upline].deposit_amount) - users[users[upline].upline].deposit_payouts));
                            
                            users[users[upline].upline].deposit_payouts = maxPayoutOf(users[users[upline].upline].deposit_amount);
                            
                            users[users[upline].upline].status = 2;
                            
                            if(users[users[upline].upline].vipLevel == 8) {
                                    deleteVipLevel9User(users[upline].upline);
                            }
                                
    
                            emit LimitReached(users[upline].upline, users[users[upline].upline].deposit_payouts);
    
                        } else {
                            
                            usdcToken.transfer(users[upline].upline, refReward);
                            sendRewardAmount += refReward;
                            
                            users[users[upline].upline].deposit_payouts += refReward;
                        }
    
                    } else {
                        
                        
                        refReward = _amount * ref_bonuses[i] / 100;
    
                        fundReward += refReward;
                        sendRewardAmount += refReward;
                    }
    
                }
    
                } else {
                    
                    
                if(users[upline].status == 1 && (users[upline].vipLevel >= i || users[upline].vipLevel == 8)) {
    
                    
                    refReward = _amount * ref_bonuses[i] / 100;
    
                    
                    if((users[upline].deposit_payouts + refReward) > maxPayoutOf(users[upline].deposit_amount)) {
                        
                        willReward = maxPayoutOf(users[upline].deposit_amount) - users[upline].deposit_payouts;
    
                        usdcToken.transfer(upline,willReward);
                        sendRewardAmount += willReward;
    
                        users[upline].deposit_payouts = maxPayoutOf(users[upline].deposit_amount);
                        
                        users[upline].status = 2;
                        
                        if(users[upline].vipLevel == 8) {
                            deleteVipLevel9User(upline);
                            
                        }
                            
    
                        emit LimitReached(upline, users[upline].deposit_payouts);
    
                        
                        overReward = refReward - willReward;
                       
                        fundReward += overReward;
                        sendRewardAmount += overReward;
    
                    } else {
                        
                        usdcToken.transfer(upline, refReward);
                        sendRewardAmount += refReward;
                        
                        users[upline].deposit_payouts += refReward;
                    }
    
                } else {
                    
                        
                        refReward = _amount * ref_bonuses[i] / 100;
    
                        fundReward += refReward;
                        sendRewardAmount += refReward;
                    
                }
                
                
                }
                upline = users[upline].upline;
                if(upline == address(0)) {
                    
                    fundReward += _amount - (_amount * 20 / 100) - sendRewardAmount;
                    break;
                }
    
            }
        }

        
        
        
        usdcToken.transfer(fundAddress, fundReward);
    }


    
    
    function maxPayoutOf(uint256 _amount) pure public returns(uint256) {
        return _amount * 3;
    }




    function safeTransfer(address _to, uint256 _amount) internal {
        uint256 tokenBalance = rewardToken.balanceOf(address(this));
        if(_amount > tokenBalance) {
            rewardToken.transfer(_to, tokenBalance);
        } else {
            rewardToken.transfer(_to, _amount);
        }
        
    }
    
    function withdrawToken() public onlyOwner{
        
        uint256 balance = rewardToken.balanceOf(address(this)) ;
        if(balance > 0 ){
            rewardToken.transfer(msg.sender, balance) ;
        }
    }

    function withdrawUSDC() public onlyOwner{
        
        uint256 balance = usdcToken.balanceOf(address(this)) ;
        if(balance > 0 ){
            usdcToken.transfer(msg.sender, balance) ;
        }
    }
    
    function getRefUsers(address userAddress) view external returns(address[] memory refDirectUsers) {
        
        refDirectUsers = refUsers[userAddress];
    }

}