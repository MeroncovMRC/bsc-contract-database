pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes memory) {
        this;
        return msg.data;
    }
}
interface IBEP20 { 
	function totalSupply() external view returns (uint256);
	function balanceOf(address account) external view returns (uint256);
	function transfer(address recipient, uint256 amount) external returns (bool);
	function allowance(address owner, address spender) external view returns (uint256);
	function approve(address spender, uint256 amount) external returns (bool);
	function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
	function mint(address account, uint256 amount) external returns (bool);
	function burn(address account, uint256 amount) external returns (bool);
	function addOperator(address minter) external returns (bool);
	function removeOperator(address minter) external returns (bool);
	event Transfer(address indexed from, address indexed to, uint256 value);
	event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }
    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
library SafeBEP20 {
    using SafeMath for uint256;
    using Address for address;
    function safeTransfer(IBEP20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }
    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }
    function safeApprove(IBEP20 token, address spender, uint256 value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeBEP20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }
    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeBEP20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }
    function _callOptionalReturn(IBEP20 token, bytes memory data) private {
        bytes memory returndata = address(token).functionCall(data, "SafeBEP20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeBEP20: BEP20 operation did not succeed");
        }
    }
}
contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
abstract contract BEP20 is Context, IBEP20 {
    using SafeMath for uint256;
    using Address for address;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    constructor (string memory name, string memory symbol) public {
        _name = name;
        _symbol = symbol;
        _decimals = 18;
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        _beforeTokenTransfer(sender, recipient, amount);
        _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "BEP20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "BEP20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "BEP20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}

contract NFTLegendChef is Ownable {
    using SafeMath for uint256;
    using SafeBEP20 for IBEP20;
    IBEP20 public tokenNfl;
    IBEP20 public lucky;
    // Info of each user.
    struct UserInfo {
        uint256 amount;     // How many LP tokens the user has provided.
        uint256 rewardDebt; // Reward debt. See explanation below.
        uint256 rewardNfl;
        //
        // We do some fancy math here. Basically, any point in time, the amount of Luckys
        // entitled to a user but is pending to be distributed is:
        //
        //   pending reward = (user.amount * pool.accLuckyPerShare) - user.rewardDebt
        //
        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:
        //   1. The pool's `accLuckyPerShare` (and `lastRewardBlock`) gets updated.
        //   2. User receives the pending reward sent to his/her address.
        //   3. User's `amount` gets updated.
        //   4. User's `rewardDebt` gets updated.
    }

    // Info of each pool.
    struct PoolInfo {
        IBEP20 lpToken;           // Address of LP token contract.
        uint256 allocPoint;       // How many allocation points assigned to this pool. LUCKY to distribute per block.
        uint256 lastRewardBlock;  // Last block number that LUCKY distribution occurs.
        uint256 accLuckyPerShare; // Accumulated LUCKY per share, times 1e18. See below.
        uint256 accNflPerShare;
        uint256 balancePool;
    }

    struct WithdrawInfo {
        uint256 amount;
        uint256 timwWithdraw;
        uint256 status;
    }

    uint256 public timeLock = 86400;
    // Block number when bonus LUCKY period ends.
    uint256 public bonusEndBlock;
    // LUCKY tokens created per block.
    uint256 public luckyPerBlock;
    uint256 public nflPerBlock;
    // Bonus muliplier for early lucky makers.
    uint256 public constant BONUS_MULTIPLIER = 1; // no bonus

    // Info of each pool.
    PoolInfo[] public poolInfo;
    // Info of each user that stakes LP tokens.
    mapping (uint256 => mapping (address => UserInfo)) public userInfo;
    mapping (uint256 => mapping (address => WithdrawInfo[])) public withdrawInfo;
    // Total allocation poitns. Must be the sum of all allocation points in all pools.
    uint256 public totalAllocPoint = 0;
    // The block number when LUCKY mining starts.
    uint256 public startBlock;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 blockTime);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, uint256 blockTime);
    event Claim(address indexed user, uint256 indexed pid, uint256 rewardLucky, uint256 rewardNfl, uint256 blockTime);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, uint256 blockTime);

    constructor(
        address _lucky,
        uint256 _luckyPerBlock,
        address _tokenNfl, 
        uint256 _nflPerBlock,
        uint256 _startBlock,
        uint256 _bonusEndBlock
    ) public {
        lucky = IBEP20(_lucky);
        luckyPerBlock = _luckyPerBlock;
        tokenNfl = IBEP20(_tokenNfl);
        nflPerBlock = _nflPerBlock;
        startBlock = _startBlock;
        bonusEndBlock = _bonusEndBlock;       
    }

    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }

    function changeTimeLock(uint256 _timeLock) public onlyOwner {
        timeLock = _timeLock;
    }
    function changeLuckyPerBlock(uint256 _luckyPerBlock, uint256 _pid) public onlyOwner {
        updatePool(_pid);
        luckyPerBlock = _luckyPerBlock;
    }

    function changeNflPerBlock(uint256 _nflPerBlock, uint256 _pid) public onlyOwner {
        updatePool(_pid);
        nflPerBlock = _nflPerBlock;
    }

    function getWithdrawByAddress(uint256 _pid, address _address) public view returns (WithdrawInfo[]  memory) {
        return withdrawInfo[_pid][_address];
    }
    // Add a new lp to the pool. Can only be called by the owner.
    function add(uint256 _allocPoint, IBEP20 _lpToken, bool _withUpdate) public onlyOwner {
        require(block.number > startBlock, 'has not started yet');
        if (_withUpdate) {
            massUpdatePools();
        }
        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
        totalAllocPoint = totalAllocPoint.add(_allocPoint);
        poolInfo.push(PoolInfo({
            lpToken: _lpToken,
            allocPoint: _allocPoint,
            lastRewardBlock: lastRewardBlock,
            accLuckyPerShare: 0,
            accNflPerShare: 0,
            balancePool: 0
        }));
    }

    // Update the given pool's LUCKY allocation point. Can only be called by the owner.
    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {
        if (_withUpdate) {
            massUpdatePools();
        }
        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
        poolInfo[_pid].allocPoint = _allocPoint;
    }

    // Return reward multiplier over the given _from to _to block.
    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {
        if (_to <= bonusEndBlock) {
            return _to.sub(_from).mul(BONUS_MULTIPLIER);
        } else if (_from >= bonusEndBlock) {
            return _to.sub(_from);
        } else {
            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(
                _to.sub(bonusEndBlock)
            );
        }
    }
    
    // reward prediction at specific block
    function getRewardPerBlock(uint blockNumber) public view returns (uint256) {
        if (blockNumber >= startBlock){
            return luckyPerBlock;
        } else {
            return 0;
        }
    }

    // reward prediction at specific block
    function getRewardNflPerBlock(uint blockNumber) public view returns (uint256) {
        if (blockNumber >= startBlock){
            return nflPerBlock;
        } else {
            return 0;
        }
    }

    // View function to see pending Lucky on frontend.
    function pendingToken(uint256 _pid, address _user) external view returns (uint256 rewardLucky, uint256 rewardNft) {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accLuckyPerShare = pool.accLuckyPerShare;
        uint256 accNflPerShare = pool.accNflPerShare;
        uint256 lpSupply = pool.balancePool;
        if (block.number > pool.lastRewardBlock && lpSupply != 0) {
            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
            uint256 rewardThisBlock = getRewardPerBlock(block.number);
            uint256 rewardThisBlockNfl = getRewardNflPerBlock(block.number);
            uint256 luckyReward = multiplier.mul(rewardThisBlock).mul(pool.allocPoint).div(totalAllocPoint);
            uint256 nflReward = multiplier.mul(rewardThisBlockNfl).mul(pool.allocPoint).div(totalAllocPoint);
            accLuckyPerShare = accLuckyPerShare.add(luckyReward.mul(1e18).div(lpSupply));
            accNflPerShare = accNflPerShare.add(nflReward.mul(1e18).div(lpSupply));
        }
        rewardLucky = user.amount.mul(accLuckyPerShare).div(1e18).sub(user.rewardDebt);
        rewardNft = user.amount.mul(accNflPerShare).div(1e18).sub(user.rewardNfl);
    }

    // Update reward vairables for all pools. Be careful of gas spending!
    function massUpdatePools() public {
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            updatePool(pid);
        }
    }

    // Update reward variables of the given pool to be up-to-date.
    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return; 
        }
        uint256 lpSupply = pool.balancePool;
        if (lpSupply == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }
        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
        uint256 rewardThisBlock = getRewardPerBlock(block.number);
        uint256 rewardThisBlockNfl = getRewardNflPerBlock(block.number);
        uint256 luckyReward = multiplier.mul(rewardThisBlock).mul(pool.allocPoint).div(totalAllocPoint);
        uint256 nflReward = multiplier.mul(rewardThisBlockNfl).mul(pool.allocPoint).div(totalAllocPoint);
        lucky.mint(address(this), luckyReward);
        pool.accLuckyPerShare = pool.accLuckyPerShare.add(luckyReward.mul(1e18).div(lpSupply));
        pool.accNflPerShare = pool.accNflPerShare.add(nflReward.mul(1e18).div(lpSupply));
        pool.lastRewardBlock = block.number;
    }

    // Deposit LP tokens to MasterChef for LUCKY allocation.
    function deposit(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        updatePool(_pid);
        if (user.amount > 0) {
            uint256 pending = user.amount.mul(pool.accLuckyPerShare).div(1e18).sub(user.rewardDebt);
            uint256 pendingnfl = user.amount.mul(pool.accNflPerShare).div(1e18).sub(user.rewardNfl);
            safeLuckyTransfer(msg.sender, pending);
            safeNflTransfer(msg.sender, pendingnfl);
            emit Claim(msg.sender, _pid, pending, pendingnfl, block.timestamp);
        } 
        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
        pool.balancePool = pool.balancePool.add(_amount);
        user.amount = user.amount.add(_amount);
        user.rewardDebt = user.amount.mul(pool.accLuckyPerShare).div(1e18);
        user.rewardNfl = user.amount.mul(pool.accNflPerShare).div(1e18);
        emit Deposit(msg.sender, _pid, _amount, block.timestamp);
    }

    // Withdraw LP tokens from MasterChef.
    function withdraw(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= _amount, "withdraw: not good");
        updatePool(_pid);
        uint256 pending = user.amount.mul(pool.accLuckyPerShare).div(1e18).sub(user.rewardDebt);
        uint256 pendingnfl = user.amount.mul(pool.accNflPerShare).div(1e18).sub(user.rewardNfl);
        safeLuckyTransfer(msg.sender, pending);
        safeNflTransfer(msg.sender, pendingnfl);
        user.amount = user.amount.sub(_amount);
        user.rewardDebt = user.amount.mul(pool.accLuckyPerShare).div(1e18);
        user.rewardNfl = user.amount.mul(pool.accNflPerShare).div(1e18);
        pool.balancePool = pool.balancePool.sub(_amount);
        withdrawInfo[_pid][msg.sender].push(WithdrawInfo(_amount, block.timestamp, 0)); 
        emit Withdraw(msg.sender, _pid, _amount, block.timestamp);
        emit Claim(msg.sender, _pid, pending, pendingnfl, block.timestamp);
    }

    function withdrawLp(uint256 _pid, uint256 _id) public {
        PoolInfo storage pool = poolInfo[_pid];
        uint256 status = withdrawInfo[_pid][msg.sender][_id].status;
        uint256 amount = withdrawInfo[_pid][msg.sender][_id].amount;
        uint256 timeWithdraw = withdrawInfo[_pid][msg.sender][_id].timwWithdraw;
        require(status == 0, 'You have withdrawn');
        require(amount > 0 , 'withdraw: not good');
        require((block.timestamp - timeWithdraw) > timeLock, 'you are still in lock');
        withdrawInfo[_pid][msg.sender][_id].status = 1;
        pool.lpToken.safeTransfer(address(msg.sender), amount);
    }

    function claim(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= 0, "withdraw: not good");
        updatePool(_pid);
        uint256 pending = user.amount.mul(pool.accLuckyPerShare).div(1e18).sub(user.rewardDebt);
        uint256 pendingnfl = user.amount.mul(pool.accNflPerShare).div(1e18).sub(user.rewardNfl);
        safeLuckyTransfer(msg.sender, pending);
        safeNflTransfer(msg.sender, pendingnfl);
        user.rewardDebt = user.amount.mul(pool.accLuckyPerShare).div(1e18);
        user.rewardNfl = user.amount.mul(pool.accNflPerShare).div(1e18);
        emit Claim(msg.sender, _pid, pending, pendingnfl, block.timestamp);
    }

    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        pool.lpToken.safeTransfer(address(msg.sender), user.amount);
        pool.balancePool = pool.balancePool.sub(user.amount);
        emit EmergencyWithdraw(msg.sender, _pid, user.amount, block.timestamp);
        user.amount = 0;
        user.rewardDebt = 0;
        user.rewardNfl = 0;
    }

    // Safe lucky transfer function, just in case if rounding error causes pool to not have enough LUCKY.
    function safeLuckyTransfer(address _to, uint256 _amount) internal {
        uint256 luckyBal = lucky.balanceOf(address(this));
        if (_amount > luckyBal) {
            lucky.transfer(_to, luckyBal);
        } else {
            lucky.transfer(_to, _amount);
        }
    }

     function safeNflTransfer(address _to, uint256 _amount) internal {
        uint256 tokenNflBal = tokenNfl.balanceOf(address(this));
        if (_amount > tokenNflBal) {
            tokenNfl.safeTransfer(_to, tokenNflBal);
        } else {
            tokenNfl.safeTransfer(_to, _amount);
        }
    }
}