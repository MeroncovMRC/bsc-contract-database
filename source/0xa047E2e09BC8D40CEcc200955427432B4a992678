{"aquaduct4lifetoken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\nAquaduct4Life is an ERC20 token that is used to fund the construction of water projects in developing countries.\r\nThe contract has the following features:\r\n4.4 Billion total supply; 2.2 Billion Max circulating supply (Equal to the estimated number of people without access to fresh drinking water and sanitation)\r\nFees: When tokens are transferred, a fee is collected. The fees are distributed as follows:\r\n0.5% is collected as a tax.\r\n60% is used to fund the construction of water projects for people without access to clean drinking water.\r\n20% is for education.\r\n10% is distributed to stakeholders.\r\n9% is used to market the project.\r\n1% is used to develop the project.\r\nExcluding accounts from fees: The owner of the contract can exclude accounts from fees.\r\nBurning tokens: 1 Token for every 1 person an A4L project completes.\r\nUpgarde path when proxyOwner = Owner\r\nhttps://aquaduct4life.org  */\r\n\r\npragma solidity ^0.8.0;\r\n\r\npragma solidity 0.8.0 - 0.8.9;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract Aquaduct4Life is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private _name = \"Aquaduct4Life\";\r\n    string private _symbol = \"A4L\";\r\n    uint256 private _totalSupply = 4400000000 * 10 ** 18;\r\n    uint8 private _decimals = 18;\r\n    uint256 private _transactionFee = 5; // 0.5%\r\n    uint256 private _transactionFeeMultiplier = 1000;\r\n \r\n\r\n    address public projectWallet;\r\n    address public educationWallet;\r\n    address public stakeholderWallet;\r\n    address public maintenanceWallet;\r\n    address public devWallet;\r\n    address private proxyOwner;\r\n\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 public projectFee = 60;\r\n    uint256 public educationFee = 20;\r\n    uint256 public stakeholderFee = 10;\r\n    uint256 public maintenanceFee = 9;\r\n    uint256 public devFee = 1;\r\n\r\n    constructor(\r\n        address _projectWallet,\r\n        address _educationWallet,\r\n        address _stakeholderWallet,\r\n        address _maintenanceWallet,\r\n        address _devWallet\r\n    ) \r\n    {\r\n        projectWallet = _projectWallet;\r\n\r\n        educationWallet = _educationWallet;\r\n        stakeholderWallet = _stakeholderWallet;\r\n        maintenanceWallet = _maintenanceWallet;\r\n        devWallet = _devWallet;\r\n\r\n        _balances[address(this)] = 2200000000 * 10 ** 18;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        require(recipient != address(0), \"ERC20: transfer to zero address\");\r\n\r\n        uint256 fee = amount.mul(_transactionFee).div(_transactionFeeMultiplier);  // calculate the fee using SafeMath\r\n        uint256 netAmount = amount.sub(fee);\r\n        uint256 projectAmount = fee * projectFee / 100;\r\n\r\n        uint256 educationAmount = fee * educationFee / 100;\r\n        uint256 stakeholderAmount = fee * stakeholderFee / 100;\r\n        uint256 maintenanceAmount = fee * maintenanceFee / 100;\r\n        uint256 devAmount = fee * devFee / 100;\r\n\r\n        _balances[msg.sender] -= amount;\r\n        _balances[recipient] += netAmount;\r\n        _balances[projectWallet] += projectAmount;\r\n\r\n        _balances[educationWallet] += educationAmount;\r\n        _balances[stakeholderWallet] += stakeholderAmount;\r\n        _balances[maintenanceWallet] += maintenanceAmount;\r\n        _balances[devWallet] += devAmount;\r\n\r\n        emit Transfer(msg.sender, recipient, netAmount);\r\n        emit Transfer(msg.sender, projectWallet, projectAmount);\r\n\r\n        emit Transfer(msg.sender, educationWallet, educationAmount);\r\n        emit Transfer(msg.sender, stakeholderWallet, stakeholderAmount);\r\n        emit Transfer(msg.sender, maintenanceWallet, maintenanceAmount);\r\n        emit Transfer(msg.sender, devWallet, devAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(recipient != address(0), \"ERC20: transfer to zero address\");\r\n        require(sender != address(0), \"ERC20: transfer from zero address\");\r\n\r\n        uint256 fee = amount.mul(_transactionFee).div(_transactionFeeMultiplier);\r\n        uint256 netAmount = amount - fee;\r\n        uint256 projectAmount = fee * projectFee / 100;\r\n\r\n        uint256 educationAmount = fee * educationFee / 100;\r\n        uint256 stakeholderAmount = fee * stakeholderFee / 100;\r\n        uint256 maintenanceAmount = fee * maintenanceFee / 100;\r\n        uint256 devAmount = fee * devFee / 100;\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += netAmount;\r\n        _balances[projectWallet] += projectAmount;\r\n\r\n        _balances[educationWallet] += educationAmount;\r\n        _balances[stakeholderWallet] += stakeholderAmount;\r\n        _balances[maintenanceWallet] += maintenanceAmount;\r\n        _balances[devWallet] += devAmount;\r\n        _allowances[sender][msg.sender] -= amount;\r\n\r\n        emit Transfer(sender, recipient, netAmount);\r\n        emit Transfer(sender, projectWallet, projectAmount);\r\n\r\n        emit Transfer(sender, educationWallet, educationAmount);\r\n        emit Transfer(sender, stakeholderWallet, stakeholderAmount);\r\n        emit Transfer(sender, maintenanceWallet, maintenanceAmount);\r\n        emit Transfer(sender, devWallet, devAmount);\r\n\r\n        return true;\r\n    }\r\n        function burn(uint256 amount) public onlyOwner {\r\n        _totalSupply -= amount;\r\n        _balances[owner()] -= amount;\r\n        emit Transfer(owner(), address(0), amount);\r\n    }\r\n    function donate() external payable {\r\n    address donationWallet = 0x11365365688Aa936aA4A7B4316E2b80b0025712B;\r\n    payable(donationWallet).transfer(msg.value);\r\n    }\r\n\r\n    receive() external onlyOwner payable {\r\n    // receive the donation amount here and perform any necessary actions\r\n    }\r\n\r\n    modifier onlyProxyOwner() {\r\n    require(msg.sender == proxyOwner, \"Only the proxy owner can call this function\");\r\n    _;\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}