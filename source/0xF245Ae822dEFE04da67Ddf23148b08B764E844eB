// SPDX-License-Identifier: No License
pragma solidity 0.8.0;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

   
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

   
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
      
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

  
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}




 contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  constructor () {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
     emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }

}


library Address {
  
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

  
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

   
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

  
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

   
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
  
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

  
    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

  
    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to
     * 0 before setting it to a non-zero value.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

interface NFTContract{
    function balanceOf(address owner) external view returns (uint256 balance);
    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external returns(bool);

function setApprovalForAll(address operator, bool _approved) external;

    function isApprovedForAll(address owner, address operator) external view returns (bool);

function tokenURI(uint256 tokenId) external view returns (string memory);

function userNFTs(address _owner)
    external
    view
    returns (uint256[] memory);

    function ownerOf(uint256 tokenId) external view returns (address);

}

contract ReentrancyGuard {

  /**
   * @dev We use a single lock for the whole contract.
   */
  bool private reentrancyLock = false;

  /**
   * @dev Prevents a contract from calling itself, directly or indirectly.
   * @notice If you mark a function `nonReentrant`, you should also
   * mark it `external`. Calling one nonReentrant function from
   * another is not supported. Instead, you can implement a
   * `private` function doing the actual work, and a `external`
   * wrapper marked as `nonReentrant`.
   */
  modifier nonReentrant() {
    require(!reentrancyLock);
    reentrancyLock = true;
    _;
    reentrancyLock = false;
  }

}




contract StakingContract is Ownable, ReentrancyGuard {
    using SafeMath for *;
    using Address for address;
    using SafeERC20 for IERC20;
    
   
    uint256 public poolId;
    IERC20 public token;
   // uint256 public totalLocked;
  //  uint256 public multiply  = 2;
    NFTContract private nft;
    uint256 public tokensPerUSD; 
     

    struct Pool {
        uint256 id;
        uint256 maxStake; //nfts
        uint256 poolSize;
        uint256 startTime;
        uint256 _days;
        uint256 totalStaked; //NFTs
        uint256 nftWorth; //USD
        uint256 apy;
        bool cancelled;
        address[] stakers;
   
    }

    struct Staker{
        uint256 id;
        mapping(address => User) users;
    }

    struct User {
        uint256 stakedAmounts; //USD
        uint256 nfts;
        uint256 stakeDate;
        uint256 dueDate;

    }

    struct Stats {
        uint256 total;
     //   uint256 reward;
        uint256[] pools;
    }

    mapping(uint256 => Pool) public pools;
     mapping(uint256 => Staker) stakers;
     mapping(address => Stats) public stats;
  //   mapping(address => mapping(uint256 => bool)) public oldWithdrawn;

      constructor(IERC20 _token, address nftAddr) {
    token = _token;
    nft = NFTContract(nftAddr);
  }

    modifier isClosed(uint id){
         Pool storage pool = pools[id];
        require(pool.totalStaked < pool.poolSize, "This pool is closed!");
        _;
    }

    function createPool(
        uint256 _maxStake,
        uint256 _poolSize,
        uint256 _startTime,
        uint256 _days,
        uint256 _nftWorth, //In USD
        uint256 _apy
    ) external onlyOwner returns (uint256 id) {
       // require(_startTime > block.timestamp, "Start time must be in the future");
       
        poolId++;

        Pool storage pool = pools[poolId];
        Staker storage staker = stakers[poolId];

            pool.id = poolId;
            staker.id = poolId;
            pool.maxStake = _maxStake;
            pool.poolSize = _poolSize;
            pool.startTime = _startTime;
            pool._days = _days;
            pool.totalStaked = 0;
            pool.nftWorth = _nftWorth;
            pool.apy = _apy;

            return poolId;
    }

      function checkOwnership(address user, uint256[] memory tokenIds) internal view returns (bool) {
        for (uint256 i = 0; i < tokenIds.length; i++) {
            if (nft.ownerOf(tokenIds[i]) != user) {
                return false; // User does not own at least one NFT ID in the array
            }
        }

        return true; // User owns all NFT IDs in the array
    }

    function stake(uint256 _poolId, uint256[] memory _nftIDs) external isClosed(_poolId) nonReentrant returns(bool success){
        Pool storage pool = pools[_poolId];
        Staker storage s = stakers[_poolId];
        uint256 _amount = pool.nftWorth;
        uint256 nftBal = nft.balanceOf(msg.sender);
       // address nftOwner = nft.ownerOf(_nftID);
        require(nftBal >= _nftIDs.length, "Insufficient NFT balance..");
        require(checkOwnership(msg.sender, _nftIDs), "You are not the owner of at least 1 of this NFT.");
        require(block.timestamp >= pool.startTime, "Staking not yet started");
        require(s.users[msg.sender].nfts.add(_nftIDs.length) <= pool.maxStake, "Exceeded max stake per wallet");
        require(pool.totalStaked.add(_nftIDs.length) <= pool.poolSize, "Exceeded max stake for this pool");
        require(_nftIDs.length > 0, "Invalid NFT.");

        // Transfer tokens to contract
        for(uint256 i = 0; i < _nftIDs.length; i++){
        nft.transferFrom(msg.sender, address(this), _nftIDs[i]);
      //  totalLocked = totalLocked.add(1);

        // Update staking amounts and total staked
        s.users[msg.sender].stakedAmounts = s.users[msg.sender].stakedAmounts.add(_amount);
        s.users[msg.sender].nfts = s.users[msg.sender].nfts.add(1);
        stats[msg.sender].total = stats[msg.sender].total.add(1);
        pool.totalStaked = pool.totalStaked.add(1);
        
        }

         s.users[msg.sender].stakeDate = block.timestamp;
        s.users[msg.sender].dueDate = (block.timestamp + convertDaysToSeconds(pool._days));
         stats[msg.sender].pools.push(_poolId);
         pool.stakers.push(msg.sender);

        return true;
    }

     function getPercent(uint256 percent, uint256 amount) internal pure returns (uint256){
        uint256 mul = percent * amount;
        uint256 div = mul / 100;
        return div;
    } 

    function calculateTokens(uint256 _poolId) internal view returns(uint256){
         Pool storage pool = pools[_poolId];
        Staker storage s = stakers[_poolId];
        uint256 rewards = (getPercent(pool.apy, s.users[msg.sender].stakedAmounts).add(s.users[msg.sender].stakedAmounts));
        return tokensPerUSD.mul(rewards);
    }


    function withdraw(uint256 _poolId) external nonReentrant returns(bool success) {
        Pool storage pool = pools[_poolId];
        Staker storage s = stakers[_poolId];
        require(!Address.isContract(msg.sender), "Something is not right here.");
        require(msg.sender != address(0x0), "Address zero not allowed");
        require(block.timestamp >= s.users[msg.sender].dueDate, "Staking is not yet due for withdrawal!");
        require(s.users[msg.sender].stakedAmounts > 0 && s.users[msg.sender].nfts > 0, "You have no stakes in this pool!");
       // require(amount < (s.users[msg.sender].stakedAmounts * multiply), "Invalide amount!");
        uint256 stakes = (s.users[msg.sender].stakedAmounts / pool.nftWorth);
        uint256 amount = calculateTokens(_poolId);
         s.users[msg.sender].stakedAmounts = 0;
         s.users[msg.sender].nfts = 0;
     moveTokens(msg.sender, amount);
        stats[msg.sender].total = stats[msg.sender].total.sub(stakes);

        return true;
    }



    function moveTokens(address user, uint256 val) private {
             token.safeTransfer(user, val);
   
    }


function convertDaysToSeconds(uint256 daysCount) public pure returns (uint256) {
    uint256 secondsPerDay = 86400; // 24 hours in seconds
    return daysCount * secondsPerDay;
}

      function getAllStakers(uint _marketId) external view returns (address[] memory) {
    Pool storage m = pools[_marketId];
    uint sCount = m.stakers.length;
    address[] memory all = new address[](sCount);

    for (uint i = 0; i < sCount; i++) {
        all[i] = m.stakers[i];
    }

    return all;
}

  function getLivePools() public view returns (Pool[] memory){
  uint liveMarketCount = 0;
  for (uint i = 1; i <= poolId; i++) {
       Pool storage market = pools[i];
      if(market.totalStaked < market.poolSize && market.cancelled == false){
        liveMarketCount++;
      }
  }

      Pool[] memory p = new Pool[](liveMarketCount);
      uint index = 0;
      for (uint i = 1; i <= poolId; i++) {
          Pool storage market = pools[i];
          if(market.totalStaked < market.poolSize && market.cancelled == false){
          p[index] = market;
          index++;
          }
      }
      return p;
  }

  function getPools() public view returns (Pool[] memory){
  uint liveMarketCount = 0;
  for (uint i = 1; i <= poolId; i++) {
       Pool storage market = pools[i];
      if(market.totalStaked >= market.poolSize && market.cancelled == false){
        liveMarketCount++;
      }
  }

      Pool[] memory p = new Pool[](liveMarketCount);
      uint index = 0;
      for (uint i = 1; i <= poolId; i++) {
          Pool storage market = pools[i];
           if(market.totalStaked >= market.poolSize && market.cancelled == false){
          p[index] = market;
          index++;
           }
      }
      return p;
  }

  function getStake(uint256 id, address user) external view returns (uint256 stakedAmounts, uint256 nfts, uint256 stakeDate, uint256 dueDate){
       Staker storage s = stakers[id];
       return (s.users[user].stakedAmounts, s.users[user].nfts, s.users[user].stakeDate, s.users[user].dueDate);
  }

   function getUserStakes(address _user) external view returns (Pool[] memory){
    // Pool[] memory m = new Pool[](poolId);
     if(stats[_user].pools.length == 0){
         Pool[] memory m;
         return m;
     }
else{
     Pool[] memory m = new Pool[](stats[_user].pools.length);
      uint index = 0;
      for (uint256 i = 0; i < stats[_user].pools.length; i++) {
          Pool storage market = pools[stats[_user].pools[i]];
          m[index] = market;
          index++;
      }
      return m;
   }
  }

  function tokenURI(uint256 tokenId) external view returns (string memory){
      return nft.tokenURI(tokenId);
  }

function userNFTs(address _owner)
    external
    view
    returns (uint256[] memory){
        return nft.userNFTs(_owner);
    }

    function isApprovedForAll(address owner, address operator) external view returns (bool){
        return nft.isApprovedForAll(owner, operator);
    }

   function setToken(IERC20 _token) public onlyOwner {
        token = _token;
    }

     function setNFTAddress(NFTContract _address) public onlyOwner {
        nft = NFTContract(_address);
    }


     function setTokensPerUSD(uint256 _val) public onlyOwner {
        tokensPerUSD = _val;
    }

    
    
    function takeOutRemainingTokens() public onlyOwner {
        require(!Address.isContract(msg.sender), "Something is not right here.");
        token.safeTransfer(msg.sender, token.balanceOf(address(this)));
    }

    function cancelPool(uint256 poolID) external onlyOwner returns(bool){
        Pool storage p = pools[poolID];
       // require(p.totalStaked == 0, "This pool already has stakes.");
        p.cancelled = true;
        return true;
    }



}