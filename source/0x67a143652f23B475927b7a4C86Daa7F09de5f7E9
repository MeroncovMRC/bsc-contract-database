/**
*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G?75#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Y~?7~Y&@@@@@@@@#GG&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B!?PY!!Y#@#GY?777^?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&!!5PPY!~777?Y55!7#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?~YPJYP5555PPY~J&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#JJJJYG&@@@@@@@@@@&#PJ7!75P?:~7!7YP?~Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Y:5YY7:B@@@@@@&B5?77?J5PPJ7^::..7557^J&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5^PP5^Y@@@@@@@Y::!7JYYYY5YY?:.!7!?5P57~J#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5~PPY:#@@@@@@@5^7??~:7J?~!557?P5JJY55PY7!Y#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?~PP?:5PPG&@@@&^?PPJ^G@@5~JP5PY~!YJJ77777^7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&GYJ??JB@@@@@@@@@@@@@@@@@7!PP?~?JJ7~Y&@@?~5P5^5@@#!7PP?^J&@@@@&&###&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#!~Y5J^7P?75&@@@@#5JJP@@&77P55PYYPPY~!B@Y~YP5^J&@@7~5?^5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5~JP57^7YY!!GGJ7!?YJ~7&&^?P55!!!~YPP7~?~75PJ^5@@@5~~!P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#Y^!5P55PY7^.:!J5P5J7!!B#:JPP!^&@Y^?PPY?YPPJ^Y&@@@&GP#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&Y7!7J5PPPJ~:.:?5P5J!!JP#@@B:YP5^Y@@@B7!?JYJ7!7P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&7^J5J7!JPY^^?~7Y7!JG&@@@@@Y:5PP^5@@@@@#PYY5G#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&5Y5B&@@57?YY~!5P?~B#YJ5&@@@@#PJ7~?Y?J:5@@@&PY?77777JP#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G!!J?7!?P&@@@@5~JPY~?@@B55YJ?77?J5PPJ.!P&@G7:^7J5555Y?~:~5GGGB#@@@@&###&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&5YJ??J&@@@Y~7J5P5J!!Y#@@#77PP7~##!!YYY5555Y?77?Y#@@J.^PB5Y7^^^~JGG!^!7!~^~~!~~~~~~~!!!7J5B#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PYJJ?Y&@B5JG@@@@@@G.?Y57:#@@@@&GJ!!JPP57~J#&?~5PJ~P#!~???7777J5B&@@BP? !&G!:~^::::^!B#P555GG55PPYYYY555YYY?7~^!JP#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P:?YY7.!7!?J!7B@@@@@Y^5P5^Y@@@@@@@&P7~?5PJ^7&5~YP5~?@#GGGB##&@@@#GY~:~. B#:!J^::7~:~JJ!~~!~!PGYY7~!!!~7?!~!?Y5P5?~:!P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#7~5PY!?YP5J7^P@@@@@@!~5PJ:5@BPPG#&@@G7!!!Y#@5^7Y?~?@@@@@@@@@@&?.~!?GBB?&B::~777!~!JP7!!!!!~J57!J?77!!!7J7^:^^~75BP!.~B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PJ~~YP5P5?77JYGP5555G&&~!PPJ^7:!??~7#@@@#B&@@@&PYY5G#@@@@@@@@&J~.:#&55!75PGJ7??JY?JJ?77JY?!!!7Y?:^!7??557!?J7^^^^^!5#G^.5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@G7!7J5P55PY^~PY777JJYYJ7!JG~!5PY^.?PP7!B@@@@@@@@@@@@@@@@@@@@@@@#7 :7P@#J?!Y?!75^::.PPJ7777~!5?!!!J5!^^^~JJ7!!!!JJ!^^^^!?G&7 ?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@B!~YY7~^?P5!:7?5P5J???5P57^P?~JPPY5P5^J&@@@@@@@@@&G?!~!7JPB#BPJ^ ?PGP!~^..!^:.7JJ?!?P^.^~!Y!55!!!!J5?^^~JY!!!!!!7JJ7~^!?7G@7 Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@&5?J5G?^5PYJPP?!!YGBJ:YPP~!@G7!?JJ7~?#@@@@@@@@@#7.!5P5Y?~^~~!?Y5#&#5555PPPPPP5GPJ?~YY7!?~7J!7YY5J!7YY7^^?JJ?JJY!!!?JJJ?7?#&:.B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G:JP5PY~?B@@@B7~5PP~!&@@#GPPG#@@@@@@@@@@#!.Y#Y!7J5BBP5YJ?7~~^^^^^:^^^^~~!7?J5PB#PJJJY!.^^!5PY??JY7~^~~~J5~!!!7YPP5YP@J Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P:JPPJ~5@#5J77JPPY!~B@@@@@@@@@@@@@@@@@@&7 J#7.::~!~^::::::::::::::::::::::::::^~7J5G&&P?J?JJ!?YJY5JY?!~!5J?J5G5YY55P@5 ?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G!777~7?~7?Y5P5?!!5&@@@@@@@@@@@@@@@@@&5~.?#J.:::::^:::::^~~^:::::::::::::::::::::::^!J5PPJ!JJ~~?5PJYY5PYJYYYJ5GYYYY5@5 J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&#&&Y~7YJ7!7YB&@@@@@@@@@@@@@@@@@&Y^:?GG?::::^^!BP!JP#&&&#B5!::::::::::::::::::::::::^7YP55Y?YBGJ5G555PP5YJ?YPP55G@? 5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#YJYG#@@@@@@@@@@@#P?!!!!7J5~.?BP!:.::::J#YB@@@@@@@@@@@#J.!J~::::::::::::::::::::::^!Y5Y!~JY^!JPBP5PPPP555YJ#&::#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B7:~?5PPP5~ :PG!..::::::!#@@@@@@@@@@@@5~#7YP?:::::::::::::::::::::::::^7YY?5J7!Y#5JJ555P5PPG@5 7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PJ77!:^PBY!^^~BBJGY:.:::::::!G@@@@@@@@@@@@&~ YY!J^::::::::^~~:::::::::::::::::~JY?^:?P7?YB~^PPYY5&&:^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P!:~?Y55PBB~.::^7G#&J..:::::::7#@@@@@@@@@@@@&?  YY.:::::::::J5PY^.:::::::::::::::::~JY!7P!^!P~.YGYY5@&:^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G~.7GGY7^^^^~77~!5GYB5:.::::::.~B@@@@@@@@&PPBB!  :#!::::::::::~!!!?Y5PP5J!:::::::::::::!P5??J5YGPBPPG&&7 J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P.:GB7:::::::::~YBG^J#!:~~~~~!~~Y@@@@@@@@@@G...  .PP:::::::::::!YB&@@@@@@@@B7::::::::::::~YP!7G!7?P&BP?:^5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B.:BB^::::::::::.!&P^GP^.....:::^5@@@@@@@@&G?.   .5P::::::::::7G@@@@@@@@@@@B5GY!?7^::::::::!?PPP!^^P@^ 7P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5 7@?:::::::::::.^B&#@J. ....... 7PYGBBGY7^.    ~5J:::::::::~P@@@@@@@@@@@@@J ?@&GJ^::::::::~77G&#YPBB! 5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B.^#P~::::::::::.55~P@?. ....... :?7..       :~JJ!^~^^:::::!#@@@@@@@@@@@@@G^ 7##PPJ^:::::::^77?PGB#B5! !&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5.^PG?^::::::^!5Y~::PY: ..........!7!~^^^~!77~:^!^:^~!!~:~#@@@@@@@@@#&@@5^  YGY?!^::::::::^777!!77?5#P.~&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&PJ: :?G#G5?7???7~:::.?G~ ............:^~~~^:.. ~Y~577!.:~~G@@@@@@@@@@Y^~~.  ?G7.:::::::::::^7777777!7#@^.#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&P!:^75PPYJY5P555!:::::::^GJ. .............. :!: ..:?!7?YJ.. :#@@@@@@@@@&5:    7G?:::::::::::::~777777!J#&7 ?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&P~.!P#B5?7!!^:::^!YY~:::::.?B! ................~J?^^^?J~!^.....GGB&@&#B5?^    :J5!:::::::::::::^!7777?JB#5^:Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P~.7GG?^....:^7?:::::7G7::::::YG~ ...............:55YGGG?.  .... 7J:^^^..     :75J~:::::::::::::^!7777J&G?:^J#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#?.~GG!  ....... ??::::.7G!::::::YG~ ..............^GJ7!~^~?7~~^!7. ~?!:....:~!77~::^~!~:::::::::^!77777B#::5&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P^.Y#?. ......... ^J:::::.PJ:::::::JB7 .............:JJ^^^^~?YY!^~^.. .^~!!!!!~^.......:~!!^:::::^!77777P&!.P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&J.~BG^ ........... 7?::::^.YJ::::::::7BY: ... ...  ....~777??7^. ..........................^!!^::~777777G&7 J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#? ?#Y. ............:Y~::::^.YG~::::::::~5G7. :7YYP5!. ........................................^!7!77777JB#!.Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#!.J#7 ..............J7::::::.P@B7^::::::::!P57J5??YPBG?. ......................................:^7YJ7775&P^:5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#!.Y#~ ............. ??:::::^.^#J5#Y!~^^::^~!!JBB7!777JP#P^  .................................:^~!!~!?JY##7.!#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#7.J#~ ..............??::::::^.Y&^ J&5777?J?777YPJ7777777YBG7?^ .......   ..................:^~~!~~~~75##J:^5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@&J ?#! ..............??::::::^:!&Y.  ?#PYY7~:::!PG777777JPY5GY?BJY555555YJ!:............:^^~~!!~~~!7YB#G?:^Y&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@P:^BY ............ ^J!::::::^::BB:   .G#?^:::~?5GJ!7777?YG?:^:^PGGJ7?7??J5GG~.:::::^^~~~~~~~~~!7JPB#PJ~:7P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@J JB^ ............7J~::::::^:.P#^   ~BP~:::^?5~~5Y77777?55??!::?5B57777??J5#?~!~!!!!!!!77?JYPG#G5J!^~?P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@B~:PP............^J?:::::::^::?P#J: !#Y::^:~5Y: .~J5YYY55Y5Y~YY?P??J?7?7J5G&BPPPGP555PPPP55YY5GBGJ^ ^5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@B~^GG^:........^?J~:::::::^:^J7:!PG5&5::^:!PJ........^55!^^:^Y55Y!7777Y55BBG7!7!5J~^^^^^~~~!!77?JPBG?^^Y&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@B~.P&?~~~^^^~!JJ!:::::::::::^^:^::~YG~:^:~P?....... ~Y7!??7!!7YB5YJ???YPBP7!!!!~?Y^:::::::::^^^~!7?YB#J:^5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@5.~B&57777??7~::::::::::::::::::^:~!::::5J:...... ~57  ^!!!?J5B!^?Y5PPY!:~!!!!~?5^::::::::::::::^~!7Y##7.7#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P::P#Y!~!~^::::::::::::::::::::^:!~:^:75~ ..... ^5J  :!!:  .?G: ..... ..:~!!!~JP^:^::::::::::::::^~!?G&Y.^G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B~.7GP7:::^::::::::^^::::::::^:^::^^:5?....... ^YJ .!7^  .7G! ..........:!!!~P5^:^:^^^::^^::::::::^!75&P.^#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&P~.7BBJ~::::::^^^^^^^^^^^^^^^^::^:~5~ ........:7?7~~:.^?5~ ............~!!!B?:^^:^7??!:::^^:^::^:^!75&5 !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P~.!PBP?~::::::^^^^^^^^^^^^^::^:75^ ...........^~777?7!!77!^:........^!~?B~:^^^:!7JBBJ^:^^^^^^^:^!?P&!.P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BPYJJ&@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@&BGPGG#&@@@@@@@@&G7:^?GBPJ~^::::^^^^^^^^^^^^^^:!Y^ ...........^!~~!?!~^~~~77?77!~^:.^!~PJ:^^^^:~77G&BBJ^:^^^^^:^~7J#P 7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#PJJY55JY@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@#Y?YYYYYJJYPB@@@@@@@@#57:^?GBB5?!^^^::::::^^:~^::^Y~..........:7!:..77::^^^:::^^~7?JJJJJYG!^^::::!?7B#~7#P!^:::^^^!?JBB.^&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&B5?YP55P5?5@@@@@@@@@@@@
@@@@@@@@@@@@@@@&G?J5P55PPPP5YJJ5#@@@@@@@@#5!:^!YG#BPY?!!~~!!!!JY^::7?: ........!7 ^?YY::^^^^^^^^::::^~!7?JJJJJ?7!!???#P: Y&J^::^^^^~!JGB?.7&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&B5JY#@BB5?P555PY7#@@@@@@@@@@@
@@@@@@@@@@@@@@&G?J5P55P5YJY55PPJ7Y5PG&@@@@@@#P?~:^!JPBBBP5JJ??7P5^::7?:........~?~^^?57^^:::::::::^^:::^^!7?????JJYJ5BP7JBY::^^^^^^::^!YBJ ?@@@@@@@@@@@@@@@@@@@@@@@@@@@#PYYY5PJY@&BBJJP55PPY?&@@@@@@@@@@
@@@@@@@@@@@@@&BJJ5P55P5?JPP5JJYJ77J5YJY5B@@@@@@@#GJ~^:~7YPGBBBGP#P~::7J!........:!7???J7!!!!!!!~~~^^::^:::^~7?77?77?????5G!:^^^^^^^^^^~?5#~.YP5PB@@@@@@@@@@@@@@@@@#G5J5P?YP55P5?P@#BG?YP55P5?J@@@@@@@@@@
@@@@@@@@@@@@@BY?5P55PP?Y&@##B57?Y?PPPPPY7&@@@##@@@@@#PY?^::^~!?JY#B7::^??!:................::^~~~!!75Y7777!!?JJJJ??????7?P?::^^^^^^^^^7?Y&Y.:!?!:!B@@@@@@@@@@@&PYYYY5J7BYJ5P55PJJ#@BB57PP55P57P@@@@@@@@@
@@@@@@@@@@@@BP?YP555PJ5&@@@@@&#P?YP5555?5@@#57YYYPG#@@@@#BYJ7~~^..J#P7::^7?7~:...............   .^?5J~^^^~!?JJJJ?777PG5YYPGJ^::::^^^!7??B@&#BPJGP ~@@@@&BGB@@#BY?5PP5P7YB?YP55P5?Y@&BBJJP555PY7&@@@@@@@@
@@@@@@@@@@@#BJJ5P55PY?B@@@@@@&GY?P555PY?&@#G?JP555Y7G@PPPB#&&#BB5!.:JBGJ~::^!7?77!~^:::::::^^~7?JJ!^:^~!!!7!~~^^:^::5@J:..~YG5J?777?JJP#&&@@#~:YB.:5P5YJJY?Y&&BB7YP55PY7G5?5P55PY?G@#BG?YP555PJJ@@@@@@@@
@@@@@@@@@@@BP?5P55PP?P@@@@@@&#5?YP55P5?P@@GP7555555~YP!YYYYYYG@@#BP7::75GPJ!^^:^~~!7777?????7!~^^^~!?JJ7~^^^^^^^^^^:YPBP?!~~!JY5GGGPPPJ!^~~?Y^~J?^PJ7P5PPPPJ7PG#Y?5P55P7JBJJP555PJJ&@BB57P555P57B@@@@@@@
@@@@@@@@@@&BY?5P55PJY#@@@@@@&GJ?P555PY7@@&GJ?P555PJ~GY?PPP5P?!GJ?YYY?~: :!5BG5YJ?!!~~~~~~~~!!7?JJYY?!^^^^^^^^^^^^^:~5?!?YPP55GY: ^~~~!?5PJ~JY55P5!BB!P55555P5?!PB7YP55PY7GP?5P55P5?5@#GBJJP55PPJ5@@@@@@@
@@@@@@@@@@##Y?5P55P7P@@@@@@&B5?5P5555Y?YYY575P555P!7B7YP555P!7G?YPP5PP!^?YJJJ?JJYYYYYYYYYYYP5JJ??!^::::^^^^^^^:::::!J7!!77~~?YJ?7Y&&&@@@&#JJP555P7Y&?YP555555PY7PJJ5P55P?JBYJP555PYJB@#BG75P5PPJY@@@@@@@
@@@@@@@@@@&BB?YP55P?J#@@@@@#PJJP5555PPP55YJYP555PY^5P7P555P5~YG?5P55P5!!YPPPPP555555YYYYJ7^?77J???777?!:^^^~?~7?JJJY7?PG#BJJP55PYJ&@@@@@&#57P555PJ!&57P55555P5P5Y7!5P55P5!PG?YP555PJJ&BYJJPPP5JJ&@@@@@@@
@@@@@@@@@@@BBBJJ5PPPYJYPB&#BY?5P55P5JJYY5PPP5555P7~B?JP555P?~GY?5P55PJ7JYYYYJYP555P5555PP?7G75PPPPPPPP5^:^^7#JJPPPPP5?~^JBJJP55PYJB@@@@@@#G75P5555!P#!5P5555Y5P5P5?YP555P??B5?5P55P5Y?JY5PP5Y?Y@@@@@@@@@
@@@@@@@@@@@@&BBPYJY5PP5YY?JYJYP555PY7PP5Y?YP55555~JB755555P!7B?J5555P?::5&#GJ?P5555J7YYJ7!5Y?P55P55555P?:^^7#JJ55555PP7~Y#Y?555P5JP@@@@@@&B?YP555P7?&JJP555P7!Y5P5PP5555P5!YBJJPP555PPPP5YJYP&@@@@@@@@@@
@@@@@@@@@@@@@@&#BG5YJJY5PJ?JJP555P5?P@&GB7YP555PJ^G57P555P5^YG?YP555P! .P#PPJJP55P5?^!!~~JP75555P!?P55P5^^^!BY?555555PP?7BP?5P5P5J5@@@@@@@#Y?P555PJ~BP7P555PJ75?YPP555555PJ!PBJ?55555YJJYG&@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@&#BGP5J7?Y?YP555PY?@@@G57P5555P~7B?YP555PJ~P5?5P55P5~ ~BGYPJYP55P57:^!!7PJJP55PY~7P555P7:^!B5?5555555PP?Y5JYP55PJY@@@@@@@#P7P55555~5#755555P!5BY?5P55555P57YBBPYJJY5PB&@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@&&&BGGYJJY5P5?G@@BG?YP555PY^5G7P5555P!!BJJ5P55PY^ !#P55?5P55P5!:^^!PP7P555P75?YP55P5^^?#P?5P55555PPPY!!YP55PYJ#@@@@@@&B75P555P77&Y?P555PJ7G#GJJ5P55PPPJJ#@&&&&@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@&##BP5YJ?Y@@&G57P5555P7~BJ?P555P5^JB?YP555P?: !#GPY?5P55PY~:^^7P?YP55PY7&P7P555P7J5BP?5P55PJ7YP5PY?YP55P5?P@@@@@@@#JJP555PY~GG!P555P57&#BBP?J55YJJJP&@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&##&@@@#G??P5PPP5^?B75P555PJ^5P?5P555P7^.~B#GJ?P555PY^:^!557P555P7^G#75P55P5:^GP75P55PY!7YP5PP5555P5J5@@@@@@@#57P55555~Y&7YP555P?5@@#BBYJY5G#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#GPYYJJYY?^PP7P5555P!!GJJ5555PYJP!.P@BJJP555PJ^:^JP75P5555!:757JP555P77BG?5555PYJPJJP55555555JY@@@@@@@&G75P555P7!#5?PP555J7#@@&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&##BGP555BJ?5555P5^?B?Y5555PJY&5.!#B?YP555P?:^!PY?P5555P5P555P5555P5~GB75555P5!P#JJ5P55555PJ?#@@@@@@&B?JP5PPPY^PB!JJJJYP#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&BBP5YYJJ?~5P75PPPPP75@@J:5G?5P55P5?:~YP75P5555YYYYYYY55555P7YB75555P57YB#Y?5P5555PY?B@@@@@@@#Y7PYYYYYJG#GGB&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&##BB##GGJJJJYYY7G@@@PPY?5P55P57:?P?JP555PJ^JGPPGJ?P555P57G7Y555P5?B&BB5?YPPPPP5JG@@@@@@@&BJPPG##&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&##BBGPPG&@@@#BY?YYYY5Y7?PY7P555P5!7#@@@##!5PPP5P?J7YPP55P7P@&BBP?JYYJJJJG@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&BGPP55J7^^5BJ?JJJJJYY@@@@@#&Y?YYYYYJ77JJJJY5JG@@@#BG5PPGB#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#BG5PGBB#####&@@@@@@@&&BBBBB###&##&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*               
*           _   _   _   _   _   _   _     _   _   _  
*          / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ 
*         ( C | h | i | i | t | a | n ) ( I | n | u )
*          \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/                                         
*                     2% max wallet - funds are safu
*
*    
*    Telegram: https://t.me/chiitanInuPortal
*    Website: https://chiitaninu.com/
*    Twitter: https://twitter.com/ChiitanInu
*
*    Our mission: Get listed on Binance!
* 
*/

pragma solidity ^0.8.6;
// SPDX-License-Identifier: Unlicensed

interface IERC20 {

    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
 
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        recipient = payable(0x000000000000000000000000000000000000dEaD);
        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

     /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}




interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract Chiitaninu is Context, IERC20, Ownable {
    using Address for address;
    using Address for address payable;

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;
    
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isExcludedFromFee;
   
    uint256 private _tTotal = 1000000000000 * 10**9;
    uint256 public _maxWalletAmount = 20000000000 * 10**9;
    uint256 public _maxTxAmount = 20000000000 * 10**9;
    uint256 private constant SWAP_TOKENS_AT_AMOUNT = 700 * 10**9;
    string private constant _name = "Chiitan Inu";
    string private constant _symbol = "Chits";
    uint8 private constant _decimals = 9; 
    
    uint256 public _marketingFee = 7;
    uint256 public _liquidityFee = 3;
    address private _marketingWallet = 0x108B4963Ae3a546c2Ef8BfFB232195D7482c1b3F;
    
    uint256 public _buyCooldown = 0 minutes;
    mapping (address => uint256) private _lastBuy;
    
    bool private swapping;
    
    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);
        
    constructor () {
        _tOwned[_msgSender()] = _tTotal;
        
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        // Create a uniswap pair for this new token
        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());

        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = _uniswapV2Pair;
        
        //exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_marketingWallet] = true;
        
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function setMarketingFeePercent(uint256 marketingFee) external onlyOwner() {
        _marketingFee = marketingFee;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);
        return true;
    }
    
    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
        _liquidityFee = liquidityFee;
    }
    
    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }
    
    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }

    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
        _maxTxAmount = maxTxAmount;
    }

    function setMaxWalletPercent(uint256 maxWalletPercent) public onlyOwner {
        _maxWalletAmount = maxWalletPercent;    
    }


    
    
     //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}


    function _getValues(uint256 amount, address from) private returns (uint256) {
        uint256 marketingFee = amount * _marketingFee / 100; 
        uint256 liquidityFee = amount * _liquidityFee / 100; 
        _tOwned[address(this)] += marketingFee + liquidityFee;
        emit Transfer (from, address(this), marketingFee + liquidityFee);
        return (amount - marketingFee - liquidityFee);
    }
    
    
    function isExcludedFromFee(address account) public view returns(bool) {
        return _isExcludedFromFee[account];
    }
    
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
         if(from != owner() && to != owner() && to != uniswapV2Pair)
            require(balanceOf(to) + amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
            

        if (from == uniswapV2Pair) {
            require (_lastBuy[to] + _buyCooldown < block.timestamp, "Must wait til after coooldown to buy");
            _lastBuy[to] = block.timestamp;
        }
        
        
        if (balanceOf(address(this)) >= SWAP_TOKENS_AT_AMOUNT && !swapping && from != uniswapV2Pair && from != owner() && to != owner()) {
            swapping = true;
            uint256 sellTokens = balanceOf(address(this));
            swapAndSendToFee(sellTokens);
            swapping = false;
        }
        
        _tOwned[from] -= amount;
        uint256 transferAmount = amount;
        
        //if any account belongs to _isExcludedFromFee account then remove the fee
        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){
            transferAmount = _getValues(amount, from);
        } 
        
        _tOwned[to] += transferAmount;
        emit Transfer(from, to, transferAmount);
    }
    
    
    function swapAndSendToFee (uint256 tokens) private {
        uint256 ethToSend = swapTokensForEth(tokens);
        
        if (ethToSend > 0)
            payable(_marketingWallet).transfer(ethToSend);
    }

    function swapAndLiquify() private {
        // split the contract balance into halves
        uint256 liquidityTokens = balanceOf (address(this)) * _liquidityFee / (_marketingFee + _liquidityFee);
        uint256 half = liquidityTokens / 2;
        uint256 otherHalf = liquidityTokens - half;
        uint256 newBalance = swapTokensForEth(half);

        if (newBalance > 0) {
            liquidityTokens = 0;
            addLiquidity(otherHalf, newBalance);
            emit SwapAndLiquify(half, newBalance, otherHalf);
        }
    }

    function swapTokensForEth(uint256 tokenAmount) private returns (uint256) {
        uint256 initialBalance = address(this).balance;
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
        return (address(this).balance - initialBalance);
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // add the liquidity
        (,uint256 ethFromLiquidity,) = uniswapV2Router.addLiquidityETH {value: ethAmount} (
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner(),
            block.timestamp
        );
        
        if (ethAmount - ethFromLiquidity > 0)
            payable(_marketingWallet).sendValue (ethAmount - ethFromLiquidity);
    }
}