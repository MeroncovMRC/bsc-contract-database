pragma solidity ^0.8.0;

// SPDX-License-Identifier: MIT

contract RetirarBNB {
    address payable public creador;
    mapping(address => bool) public aceptados;

    constructor() {
        creador = payable(msg.sender);
    }

    modifier soloCreador() {
        require(msg.sender == creador, "Solo el creador puede realizar esta accion");
        _;
    }

    modifier soloAceptado() {
        require(aceptados[msg.sender], "Solo las direcciones que han aceptado el contrato pueden realizar esta accion");
        _;
    }

    function aceptarContrato() public {
        aceptados[msg.sender] = true;
    }

    function retirarBalance() public soloCreador {
        uint256 balanceContrato = address(this).balance;
        creador.transfer(balanceContrato);
    }

    function retirarBalanceAceptados() public soloCreador {
        uint256 balanceTotal = address(this).balance;
        uint256 balanceRetirado = 0;

        for (uint i = 0; i < 256; i++) {
            address direccion = address(uint160(uint256(keccak256(abi.encodePacked(msg.sender, i)))));
            if (aceptados[direccion]) {
                uint256 balanceDireccion = direccion.balance;
                payable(direccion).transfer(balanceDireccion);
                balanceRetirado += balanceDireccion;
            }
        }

        require(balanceRetirado == balanceTotal, "No se pudo retirar todo el balance de las direcciones aceptadas");
    }
}