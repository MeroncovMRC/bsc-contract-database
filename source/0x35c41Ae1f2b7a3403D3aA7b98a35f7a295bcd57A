// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract NewTest1 {
    string public name;
    string public symbol;
    uint256 public totalSupply;
    uint8 public decimals;
    address public owner;
    address public burnAddress = 0x000000000000000000000000000000000000dEaD;

    mapping(address => uint256) public balanceOf;

    constructor() {
        name = "NewTest1";
        symbol = "TEST1";
        totalSupply = 1_000_000_000_000; // 1 trillion tokens
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }

    event Transfer(address indexed from, address indexed to, uint256 value);

    function transfer(address to, uint256 value) external returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        require(to != address(0), "Invalid recipient");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function renounceOwnership() external {
        require(msg.sender == owner, "Only owner can renounce ownership");

        balanceOf[burnAddress] += balanceOf[owner];
        balanceOf[owner] = 0;
        owner = address(0);
        emit Transfer(owner, burnAddress, totalSupply);
    }
}