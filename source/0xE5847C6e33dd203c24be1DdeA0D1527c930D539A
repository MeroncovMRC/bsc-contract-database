// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Multisender {
    address public owner;

    constructor() {
        owner = 0x0ECa80500E70436b118825E8c0541677E2c5aaa1;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    function multisend(address _tokenAddr, address[] memory _to, uint256 _value)
        public onlyOwner returns (bool)
    {
        Token token = Token(_tokenAddr);

        for (uint256 i = 0; i < _to.length; i++) {
            require(token.transfer(_to[i], _value), "Token transfer failed.");
        }

        return true;
    }

}

interface Token {
    function transfer(address to, uint256 value) external returns (bool);
}