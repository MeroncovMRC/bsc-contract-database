// File: contracts/utils/Initializable.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.7.0;

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 */
abstract contract Initializable {

    /**
     * @dev Indicates that the contract has been initialized.
     */
    bool private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Modifier to protect an initializer function from being invoked twice.
     */
    modifier initializer() {
        require(_initializing ||  !_initialized, "Initializable: contract is already initialized");

        bool isTopLevelCall = !_initializing;
        if (isTopLevelCall) {
            _initializing = true;
            _initialized = true;
        }

        _;

        if (isTopLevelCall) {
            _initializing = false;
        }
    }

}

// File: contracts/utils/ContextUpgradeable.sol


// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)




/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal initializer {
        __Context_init_unchained();
    }

    function __Context_init_unchained() internal initializer {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
    uint256[50] private __gap;
}

// File: contracts/access/OwnableUpgradeable.sol


// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)





/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal initializer {
        __Context_init_unchained();
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal initializer {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
    uint256[49] private __gap;
}

// File: contracts/interfaces/IBonusERC20.sol





/**
 * @dev Interface of the bonus ERC20  as defined in the EIP.
 */
interface IBonusERC20 {

    function initialize(address owner_, string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_,
        address charityAddress_, address liquidityAddress_,
        uint256 burnFee_, uint256 reflectionFee_, uint256 charityFee_, uint256 crctLiquidityFee_,
        uint256 numTokensSellToAddToLiquidity_) external;

}

// File: contracts/erc20/BonusERC20Token.sol



library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}



contract BonusERC20Token is IBonusERC20, OwnableUpgradeable{
    using SafeMath for uint256;

    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isExcludedFromFee;

    mapping (address => bool) private _isExcluded;

    address[] private _excluded;

    address payable public charityAddress;
    address payable public liquidityAddress;
    address public burnAddr = 0x000000000000000000000000000000000000dEaD;

    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal;
    uint256 private _rTotal;

    uint256 private _tFeeTotal;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    uint256 public _burnFee;
    uint256 private _previousBurnFee;

    uint256 public _reflectionFee;
    uint256 private _previousReflectionFee;

    uint256 public _charityFee;
    uint256 private _previousCharityFee;

    uint256 private _crctLiquidityFee;
    uint256 private _pcrctLiquidityFee;

    uint256 private _liquidityFee;
    uint256 private _previousLiquidityFee;

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;

    bool private inSwapAndLiquidity;
    bool public swapAndLiquidityEnabled = true;

    uint256 public numTokensSellToAddToLiquidity;

    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);

    event SwapAndLiquidityEnabledUpdated(bool enabled);

    event SwapAndLiquidity(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    modifier lockTheSwap {
        inSwapAndLiquidity = true;
        _;
        inSwapAndLiquidity = false;
    }

    function initialize(address owner_, string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_,
        address charityAddress_, address liquidityAddress_,
        uint256 burnFee_, uint256 reflectionFee_, uint256 charityFee_, uint256 crctLiquidityFee_,
        uint256 numTokensSellToAddToLiquidity_) external override initializer {

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        // Create a uniswap pair for this new token
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());

        // set the rest of the contract variables
        uniswapV2Router = _uniswapV2Router;

        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;

        _tTotal = totalSupply_;

        _rTotal = (MAX - (MAX % _tTotal));

        OwnableUpgradeable.__Ownable_init();
        transferOwnership(owner_);

        _rOwned[owner()] = _rTotal;

        //exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;

        charityAddress = payable(charityAddress_);
        liquidityAddress = payable(liquidityAddress_);

        burnAddr = 0x000000000000000000000000000000000000dEaD;

        _burnFee = burnFee_;

        _reflectionFee = reflectionFee_;

        _charityFee = charityFee_;

        _crctLiquidityFee = crctLiquidityFee_;

        _liquidityFee = _charityFee.add(_crctLiquidityFee);

        swapAndLiquidityEnabled = true;

        numTokensSellToAddToLiquidity = numTokensSellToAddToLiquidity_;

        emit Transfer(address(0), owner(), _tTotal);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view returns (uint256) {
        if (_isExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function isExcludedFromReward(address account) public view returns (bool) {
        return _isExcluded[account];
    }

    function deliver(uint256 tAmount) public {
        address sender = _msgSender();
        require(!_isExcluded[sender], "Excluded addresses cannot call this function");

        //(uint256 rAmount,,,,,,,,) = _getValues(tAmount);
        uint256[] memory feeArr = _getValues(tAmount);
        uint256 rAmount = feeArr[0];

        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rTotal = _rTotal.sub(rAmount);
        _tFeeTotal = _tFeeTotal.add(tAmount);
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
//            (uint256 rAmount,,,,,,,,) = _getValues(tAmount);
            uint256[] memory feeArr = _getValues(tAmount);
            uint256 rAmount = feeArr[0];

            return rAmount;
        } else {
//            (,uint256 rTransferAmount,,,,,,,) = _getValues(tAmount);
            uint256[] memory feeArr = _getValues(tAmount);
            uint256 rTransferAmount = feeArr[1];

            return rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    function excludeFromReward(address account) public onlyOwner() {
        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
        require(!_isExcluded[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    }

    function includeInReward(address account) external onlyOwner() {
        require(_isExcluded[account], "Account is already excluded");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == account) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _tOwned[account] = 0;
                _isExcluded[account] = false;
                _excluded.pop();
                break;
            }
        }
    }

    function isExcludedFromFee(address account) public view returns(bool) {
        return _isExcludedFromFee[account];
    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }

    function feeTotal() public view returns (uint256) {
        return _tFeeTotal;
    }

    function getLiquidityFee() public view returns (uint256){
        return _crctLiquidityFee;
    }

    function setBurnFeePercent(uint256 _fee) external onlyOwner() {
        _burnFee = _fee;
    }

    function setReflectionFeePercent(uint256 _fee) external onlyOwner() {
        _reflectionFee = _fee;
    }

    function setCharityFeePercent(uint256 _fee) external onlyOwner() {
        _charityFee = _fee;
        _liquidityFee = _crctLiquidityFee.add(_charityFee);
    }

    function setLiquidityFeePercent(uint256 _fee) external onlyOwner() {
        _crctLiquidityFee = _fee;
        _liquidityFee = _crctLiquidityFee.add(_charityFee);
    }

    function setCharityAddress(address payable _charityAddress) external onlyOwner() {
        charityAddress = _charityAddress;
    }

    function setLiquidityAddress(address payable _liquidityAddress) external onlyOwner() {
        liquidityAddress = _liquidityAddress;
    }

    function setSwapAndLiquidityEnabled(bool _enabled) public onlyOwner {
        swapAndLiquidityEnabled = _enabled;
        emit SwapAndLiquidityEnabledUpdated(_enabled);
    }

    function setMinTokenSendToCharity(uint256 minCharityValue) public onlyOwner() {
        numTokensSellToAddToLiquidity = minCharityValue;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 contractTokenBalance = balanceOf(address(this));

        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
        if (
            overMinTokenBalance &&
            !inSwapAndLiquidity &&
            from != uniswapV2Pair &&
            swapAndLiquidityEnabled
        ) {
            contractTokenBalance = numTokensSellToAddToLiquidity;
            swapAndLiquidity(contractTokenBalance);
        }

        bool takeFee = true;

        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
            takeFee = false;
        }

        _tokenTransfer(from, to, amount, takeFee);
    }

    function swapAndLiquidity(uint256 contractTokenBalance) private lockTheSwap {
        // first split contract into charity fee and liquidity fee
        uint256 liquidityAmount = contractTokenBalance;
        uint256 initialBalance = address(this).balance;

        if(_charityFee > 0) {
            uint256 charityAmount = contractTokenBalance.mul(_charityFee).div(_liquidityFee);
            liquidityAmount = contractTokenBalance.sub(charityAmount);
            swapTokensForEth(charityAmount);

            transferForCharityETH(charityAddress, address(this).balance.sub(initialBalance));

            initialBalance = address(this).balance;
        }

        if(_crctLiquidityFee > 0) {
            uint256 half = liquidityAmount.div(2);
            uint256 otherHalf = liquidityAmount.sub(half);

            swapTokensForEth(half);

            uint256 newBalance = address(this).balance.sub(initialBalance);

            addLiquidity(otherHalf, newBalance);

            emit SwapAndLiquidity(half, newBalance, otherHalf);
        }
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function transferForCharityETH(address payable recipient, uint256 amount) private {
        require(recipient != address(0), "BEP20: Charity to the zero address");
        recipient.transfer(amount);
        emit Transfer(address(this), recipient, amount);
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            liquidityAddress,
            block.timestamp
        );
    }

    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
        if(!takeFee){
            removeAllFee();
        }

        if (_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferFromExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
            _transferToExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferStandard(sender, recipient, amount);
        } else if (_isExcluded[sender] && _isExcluded[recipient]) {
            _transferBothExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }

        if(!takeFee){
            restoreAllFee();
        }
    }

    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
//        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rbFee, uint256 rLiquidity, uint256 tTransferAmount, uint256 tFee, uint256 bFee, uint256 tLiquidity) = _getValues(tAmount);
        uint256[] memory feeArr = _getValues(tAmount);

        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(feeArr[0]);
        _rOwned[recipient] = _rOwned[recipient].add(feeArr[1]);

        if(_burnFee > 0) {
            _burn(sender, feeArr[7], feeArr[3]);
        }

        _takeLiquidity(feeArr[8], feeArr[4]);

        _reflectFee(feeArr[2], feeArr[6]);

        emit Transfer(sender, recipient, feeArr[5]);
    }

    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
//        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rbFee, uint256 rLiquidity, uint256 tTransferAmount, uint256 tFee, uint256 bFee, uint256 tLiquidity) = _getValues(tAmount);
        uint256[] memory feeArr = _getValues(tAmount);

        _rOwned[sender] = _rOwned[sender].sub(feeArr[0]);
        _tOwned[recipient] = _tOwned[recipient].add(feeArr[5]);
        _rOwned[recipient] = _rOwned[recipient].add(feeArr[1]);

        if(_burnFee > 0) {
            _burn(sender, feeArr[7], feeArr[3]);
        }

        _takeLiquidity(feeArr[8], feeArr[4]);

        _reflectFee(feeArr[2], feeArr[6]);

        emit Transfer(sender, recipient, feeArr[5]);
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
//        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rbFee, uint256 rLiquidity, uint256 tTransferAmount, uint256 tFee, uint256 bFee, uint256 tLiquidity) = _getValues(tAmount);
        uint256[] memory feeArr = _getValues(tAmount);

        _rOwned[sender] = _rOwned[sender].sub(feeArr[0]);
        _rOwned[recipient] = _rOwned[recipient].add(feeArr[1]);

        if(_burnFee > 0) {
            _burn(sender, feeArr[7], feeArr[3]);
        }

        _takeLiquidity(feeArr[8], feeArr[4]);

        _reflectFee(feeArr[2], feeArr[6]);

        emit Transfer(sender, recipient, feeArr[5]);
    }

    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
//        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rbFee, uint256 rLiquidity, uint256 tTransferAmount, uint256 tFee, uint256 bFee, uint256 tLiquidity) = _getValues(tAmount);
        uint256[] memory feeArr = _getValues(tAmount);

        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(feeArr[0]);
        _tOwned[recipient] = _tOwned[recipient].add(feeArr[5]);
        _rOwned[recipient] = _rOwned[recipient].add(feeArr[1]);

        if(_burnFee > 0) {
            _burn(sender, feeArr[7], feeArr[3]);
        }

        _takeLiquidity(feeArr[8], feeArr[4]);

        _reflectFee(feeArr[2], feeArr[6]);

        emit Transfer(sender, recipient, feeArr[5]);
    }

    function _burn(address account, uint256 tAmount, uint256 rAmount) internal {
        require(account != burnAddr, "BEP20: burn from the zero address");

        //add the reflections of the token to the address(0) balance.
        //This reduces the supply of reflectedTokens
        //without double altering the reflection/token ratio.

        _rOwned[burnAddr] = _rOwned[burnAddr].add(rAmount);

        if(_isExcluded[burnAddr]){
            _tOwned[burnAddr] = _tOwned[burnAddr].add(tAmount);
        }

        emit Transfer(account, burnAddr, tAmount);
    }

    function _takeLiquidity(uint256 tLiquidity, uint256 rLiquidity) private {
        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);

        if(_isExcluded[address(this)]){
            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
        }
    }

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    function _getValues(uint256 tAmount) private view returns (uint256[] memory) {
//        (uint256 tTransferAmount, uint256 tFee, uint256 bFee, uint256 tLiquidity) = _getTValues(tAmount);
        uint256[] memory tFeeArr = _getTValues(tAmount);

        //_getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 bFee, uint256 currentRate)
        uint256[] memory rFeeArr = _getRValues(tAmount, tFeeArr[1], tFeeArr[3], tFeeArr[2], _getRate());

        uint256[] memory feeArr = new uint256[](9);
        for(uint256 i = 0; i< rFeeArr.length; i++){
            feeArr[i]= rFeeArr[i];
        }

        for(uint256 j = 0; j< tFeeArr.length; j++){
            feeArr[5+j]= tFeeArr[j];
        }

//        return (rAmount, rTransferAmount, rFee, rbFee, rLiquidity, tTransferAmount, tFee, bFee, tLiquidity);
        return feeArr;
    }

    function _getTValues(uint256 tAmount) private view returns (uint256[] memory) {
        uint256 tFee = calculateReflectionFee(tAmount);
        uint256 bFee = calculateBurnFee(tAmount);
        uint256 tLiquidity = calculateLiquidityFee(tAmount);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(bFee);

        uint256[] memory feeArr = new uint256[](4);
        feeArr[0] = tTransferAmount;
        feeArr[1] = tFee;
        feeArr[2] = bFee;
        feeArr[3] = tLiquidity;

//        return (tTransferAmount, tFee, bFee, tLiquidity);
        return feeArr;
    }

    function calculateReflectionFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_reflectionFee).div(100);
    }

    function calculateBurnFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_burnFee).div(100);
    }

    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_liquidityFee).div(100);
    }

    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 bFee, uint256 currentRate) private pure returns (uint256[] memory) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rbFee = bFee.mul(currentRate);
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rbFee);

        uint256[] memory feeArr = new uint256[](5);
        feeArr[0] = rAmount;
        feeArr[1] = rTransferAmount;
        feeArr[2] = rFee;
        feeArr[3] = rbFee;
        feeArr[4] = rLiquidity;

        //return (rAmount, rTransferAmount, rFee, rbFee, rLiquidity);
        return feeArr;
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) {
                return (_rTotal, _tTotal);
            }

            rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            tSupply = tSupply.sub(_tOwned[_excluded[i]]);
        }

        if (rSupply < _rTotal.div(_tTotal)) {
            return (_rTotal, _tTotal);
        }

        return (rSupply, tSupply);
    }

    function removeAllFee() private {
        _previousBurnFee = _burnFee; // burn fee
        _previousReflectionFee = _reflectionFee; //reflection fee

        _previousCharityFee = _charityFee; // charity fee
        _pcrctLiquidityFee = _crctLiquidityFee;
        _previousLiquidityFee = _liquidityFee;

        _burnFee = 0;
        _reflectionFee = 0;

        _charityFee = 0;
        _crctLiquidityFee = 0;
        _liquidityFee = 0;
    }

    function restoreAllFee() private {
        _burnFee = _previousBurnFee; // burn fee
        _reflectionFee = _previousReflectionFee; //reflection fee

        _charityFee = _previousCharityFee; // charity fee
        _crctLiquidityFee = _pcrctLiquidityFee;
        _liquidityFee = _previousLiquidityFee;
    }

    function withdraw() public onlyOwner(){
        address payable recipient = payable(_msgSender());
        recipient.transfer(address(this).balance);
    }

    //New Pancakeswap router version?
    //No problem, just change it!
    function setRouterAddress(address newRouter) public onlyOwner() {
        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);
        uniswapV2Pair = IUniswapV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());
        uniswapV2Router = _newPancakeRouter;
    }

    receive() external payable {}

}