
// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: src/MixieThenaAutomation.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.18;

import "lib/openzeppelin-contracts/contracts/access/Ownable.sol";

error ArrayLengthMismatch();

// This contract automate claiming rebase, increasing unlock time and voting for MIX pools
contract MixieThenaAutomation is Ownable {
    VoterV3 public constant voter =
        VoterV3(0x3A1D0952809F4948d15EBCe8d345962A282C4fCb); // https://bscscan.com/address/0x3A1D0952809F4948d15EBCe8d345962A282C4fCb
    RewardsDistributorV2 public constant rewardDistributor =
        RewardsDistributorV2(0xC6bE40f6a14D4C2F3AAdf9b02294b003e3967779); // https://bscscan.com/address/0xc6be40f6a14d4c2f3aadf9b02294b003e3967779
    VotingEscrow public constant votingEscrow =
        VotingEscrow(0xfBBF371C9B0B994EebFcC977CEf603F7f31c070D); // https://bscscan.com/address/0xfbbf371c9b0b994eebfcc977cef603f7f31c070d#code

    address[] public pools = [0x0f7d50A2728dE6f94B3aC8013031f527572cc9F1]; // MIX/WBNB https://bscscan.com/address/0x0f7d50a2728de6f94b3ac8013031f527572cc9f1
    uint256[] public weights = [100];

    uint public constant MAXTIME = 2 * 365 * 86400;

    function configure(
        address[] calldata _pools,
        uint256[] calldata _weights
    ) external onlyOwner {
        if (_pools.length != _weights.length) {
            revert ArrayLengthMismatch();
        }
        delete pools;
        for (uint idx = 0; idx < _pools.length; ++idx) {
            pools.push(_pools[idx]);
        }
        delete weights;
        for (uint idx = 0; idx < _weights.length; ++idx) {
            weights.push(_weights[idx]);
        }
    }

    function run(uint256 tokenId) external {
        // tokenId must have been approved for this contract
        rewardDistributor.claim(tokenId);
        votingEscrow.increase_unlock_time(tokenId, MAXTIME);
        voter.vote(tokenId, pools, weights);
    }
}

interface VoterV3 {
    function vote(
        uint _tokenId,
        address[] calldata _poolVote,
        uint256[] calldata _weights
    ) external;
}

interface RewardsDistributorV2 {
    function claim(uint _tokenId) external returns (uint);
}

interface VotingEscrow {
    function increase_unlock_time(uint _tokenId, uint _lock_duration) external;
}

