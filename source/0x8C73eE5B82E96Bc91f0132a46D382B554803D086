// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

struct Contract {
    address contractAddress;
    string contractName;
}

/**
 * @dev Abstract contract to manage owner access to contract
 */
abstract contract Owner {
    address public CONTRACT_DEFINER;

    modifier mod_onlyContractDefiner() {
        require(msg.sender == CONTRACT_DEFINER, "Wrong sender.");
        _;
    }

    function renounceOwnership() external mod_onlyContractDefiner {
        CONTRACT_DEFINER = address(0x0);
    }
}

/**
 * @dev Contract to manage contract identification and reference
 */
contract ContractsManager is Owner {

    mapping(string => uint256) public ContractPosition;
    Contract[] public Contracts;

    //registers a contract
    function registerContract(string memory name, address contractAddress) public mod_onlyContractDefiner {

        //checks the contract position if it already exists, returns 0 in case it doesn't
        uint256 position = ContractPosition[name];
        //if there is a position, update the contract address
        if(position > 0) {
            Contracts[position].contractAddress = contractAddress;
        }
        //if the position is 0, check if the names match because it might actually be the position 0, and update the contract address
        else if(position == 0 && Contracts.length > 0 && keccak256(bytes(Contracts[0].contractName)) == keccak256(bytes(name))) {
            Contracts[0].contractAddress = contractAddress;
        }
        else {
            //map the position
            ContractPosition[name] = Contracts.length;
            //create the record
            Contract memory ctr = Contract(contractAddress, name);
            //push it to the contracts array
            Contracts.push(ctr);
        }
    }

    //clears all data
    function clear() public mod_onlyContractDefiner {
        for(uint256 i = 0; i < Contracts.length; i++) {
            ContractPosition[Contracts[i].contractName] = 0;
        }
        delete Contracts;
    }

    //finds the contract by contract name
    function find(string memory contractName) public view returns (address, bool) {
        if(Contracts.length == 0) return (address(0x0), false);
        
        uint256 position = ContractPosition[contractName];
        if(position > 0) return (Contracts[position].contractAddress, true);
        else if(position == 0 && keccak256(bytes(Contracts[0].contractName)) == keccak256(bytes(contractName))) {
            return (Contracts[0].contractAddress, true);
        }
        else return (address(0x0), false);
    }

    constructor() {
        CONTRACT_DEFINER = msg.sender;

        //TOKEN_CONTRACT
        registerContract("TOKEN_CONTRACT", address(0x6616895Ad59B98B6198E30D9af83BDe10437092c));

        //AUCTION_CONTRACT
        registerContract("AUCTION_CONTRACT", address(0x269cB876e915A9a54a8013a982129B4Bd7573bBd));

        //ATLAS_MATH_CONTRACT
        registerContract("ATLAS_MATH_CONTRACT", address(0xC4ED48F10E4cD1B3861cD7c9aCE2Da50dF1e3Fe8));

        //ATLAS_STAKE_MATH
        registerContract("ATLAS_STAKE_MATH", address(0xe28BC4CEc3501FbE619298b0181b91fa160CFb07));

        //SUPPLYMGMT_CONTRACT
        registerContract("SUPPLYMGMT_CONTRACT", address(0x2971E2d43FBeEc59633aD34f5B22E63098174817));

        //ATLAS_POOL_MGMT
        registerContract("ATLAS_POOL_MGMT", address(0x9f84B4c30e8d0E94cCf3518FCe64667E9eFb61d4));

        //ATLAS_BUSD_FEES_RECEIVER
        registerContract("ATLAS_BUSD_FEES_RECEIVER", address(0xD4b0e85Dc907481d38EEa8c30b2aa386937259CD));

        //EQNOX_UTILS_CONTRACT
        registerContract("EQNOX_UTILS_CONTRACT", address(0x7e3E3c6CE2C374EEB67a2F4a3F8ef812228B6929));

        //MADDRESS_CONTRACT
        registerContract("MADDRESS_CONTRACT", address(0xA352ce1345106092d44d371107CF467bD058C188));

        //EQNOX_CONTRACT = 0x05486aDfD491130FCD38233c1Cb125FCb2bFb803
        registerContract("EQNOX_CONTRACT", address(0x05486aDfD491130FCD38233c1Cb125FCb2bFb803));

        //UNISWAP_ROUTER = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        registerContract("UNISWAP_ROUTER", address(0x10ED43C718714eb63d5aA57B78B54704E256024E));
        
        //BUSD_CONTRACT = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
        registerContract("BUSD_CONTRACT", address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56));

        
    }
}