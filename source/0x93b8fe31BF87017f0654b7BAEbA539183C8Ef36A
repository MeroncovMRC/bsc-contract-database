// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
interface IBEP20 {
     function totalSupply() external view returns (uint256); 
     function balanceOf(address account) external view returns (uint256); 
     function transfer(address recipient, uint256 amount) external returns (bool); 
     function allowance(address owner, address spender) external view returns (uint256); 
     function approve(address spender, uint256 amount) external returns (bool); 
     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); 
     event Transfer(address indexed from, address indexed to, uint256 value); 
     event Approval(address indexed owner, address indexed spender, uint256 value); 
} 
 contract AfraFin is IBEP20 { string public constant name = "Africa finance"; 
 string public constant symbol = "AFRAFIN"; 
 uint8 public constant decimals = 18; 
 uint256 private constant MAX_SUPPLY = 1_000_000_000 * 10 ** decimals; 
 uint256 private _totalSupply; 
 mapping(address => uint256) private _balances; 
 mapping(address => mapping(address => uint256)) private _allowances; constructor() 
 {
     _totalSupply = MAX_SUPPLY;
     _balances[msg.sender] = MAX_SUPPLY * 80 / 100; // 20% burned initially emit transfer 
     emit Transfer(address(0), msg.sender, _balances[msg.sender]); 
 } 
 function totalSupply() public view override returns (uint256) {
     return _totalSupply; 
 } 
 function balanceOf(address account) public view override returns (uint256) {
     return _balances[account];
 } 
 function transfer(address recipient, uint256 amount) public override returns (bool) {
     _transfer(msg.sender, recipient, amount); return true; 
 } 
 function allowance(address owner, address spender) public view override returns (uint256) {
     return _allowances[owner][spender]; 
 }
 function approve(address spender, uint256 amount) public override returns (bool) { 
    _approve(msg.sender, spender, amount); return true; 
 }
 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
     _transfer(sender, recipient, amount);
     uint256 currentAllowance = _allowances[sender][msg.sender]; 
     require(currentAllowance >= amount, "BEP20: transfer amount exceeds allowance"); 
     _approve(sender, msg.sender, currentAllowance - amount); 
     return true; 
 } 
 function _transfer(address sender, address recipient, uint256 amount) private { 
    require(sender != address(0), "BEP20: transfer from the zero address"); 
    require(recipient != address(0), "BEP20: transfer to the zero address"); 
    uint256 senderBalance = _balances[sender]; 
    require(senderBalance >= amount, "BEP20: transfer amount exceeds balance"); 
    _balances[sender] = senderBalance - amount; _balances[recipient] += amount; 
    emit Transfer(sender, recipient, amount); 
 } 
 function _approve(address owner, address spender, uint256 amount) private { 
    require(owner != address(0), "BEP20: approve from the zero address"); 
    require(spender != address(0), "BEP20: approve to the zero address"); 
    _allowances[owner][spender] = amount; 
    emit Approval(owner, spender, amount); 
    } 
}