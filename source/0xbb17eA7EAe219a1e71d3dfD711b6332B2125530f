
// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/staking/FlexibleStaking/FlexibleStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./../IMYCStakingFactory.sol";
import "./../IMYCStakingPool.sol";

/// @title Flexible Staking Contract
contract FlexibleStaking is IMYCStakingPool {
    IERC20 private stakeToken;

    uint256 private rewardTokensPerSecond;
    uint256 private amountOfTokensStaked;
    uint256 private rewardAmount;
    uint256 private endTimestamp;
    uint256 private startTimestamp;

    uint256 private accRewardPerShare;
    uint256 private lastAccRewardPerShareTimestamp;
    uint256 private constant REWARDS_PRECISION = 1e12;

    address public immutable creator;
    address public immutable factory;

    struct Staker {
        uint256 amount;
        uint256 rewardDebt;
        uint256 pendingRewards;
        uint256 timestamp;
    }

    mapping(address => Staker) public stakers;

    event Withdrawal(
        address indexed staker,
        uint256 amount,
        uint256 indexed timestamp
    );
    event ClaimRewards(
        address indexed staker,
        uint256 amount,
        uint256 indexed timestamp
    );
    event Deposit(
        address indexed staker,
        uint256 amount,
        uint256 indexed timestamp
    );

    constructor(
        address _stakeToken,
        address _creator,
        uint256 _rewardTokensPerSecond,
        uint256 _startTimestamp,
        uint256 _endTimestamp
    ) {
        stakeToken = IERC20(_stakeToken);
        rewardTokensPerSecond = _rewardTokensPerSecond;
        startTimestamp = _startTimestamp;
        endTimestamp = _endTimestamp;
        rewardAmount =
            (_endTimestamp - _startTimestamp) *
            rewardTokensPerSecond;
        creator = _creator;
        factory = msg.sender;
    }

    /**
     * @notice Extends staking end time
     * Only creator. Requires token spend allowance.
     * @param _newEndDate New end date of staking
     */
    function extendStakingTime(uint256 _newEndDate) external {
        require(msg.sender == creator, "creator mismatch");
        require(_newEndDate > endTimestamp, "timesstamp err");
        uint256 tokenAmount = (_newEndDate - endTimestamp) *
            rewardTokensPerSecond;
        stakeToken.transferFrom(msg.sender, address(this), tokenAmount);
        endTimestamp = _newEndDate;
    }

    /**
     * @notice Allows anyone to deposit into the contract
     * @param _amount The amount to deposit to the contract
     */
    function deposit(uint256 _amount) external {
        require(_amount > 0, "amount cannot be zero");
        require(endTimestamp > block.timestamp, "only before end date");
        require(startTimestamp < block.timestamp, "only after start date");
        Staker storage staker = stakers[msg.sender];
        //1. Update accRewardPerShare
        updateAccRewardPerShare();
        //2. Update user rewards
        uint256 userRewards = ((staker.amount * accRewardPerShare) /
            REWARDS_PRECISION) - staker.rewardDebt;
        staker.pendingRewards += userRewards;
        //3. Update user balance
        staker.amount += _amount;
        //4. Update rewardDebt
        staker.rewardDebt =
            (staker.amount * accRewardPerShare) /
            REWARDS_PRECISION;
        amountOfTokensStaked += _amount;
        stakeToken.transferFrom(msg.sender, address(this), _amount);
        staker.timestamp = block.timestamp;
        emit Deposit(msg.sender, _amount, block.timestamp);
    }

    /**
     * @notice Allows anyone to withdraw their stake from the contract and harvest their rewards alongside
     * @param _amount The amount to withdraw from the contract
     */
    function withdraw(uint256 _amount) external {
        Staker storage staker = stakers[msg.sender];
        require(staker.amount > 0, "balance is zero");
        require(staker.amount >= _amount, "amount > balance");
        claimRewards();
        staker.amount -= _amount;
        amountOfTokensStaked -= _amount;
        staker.rewardDebt = 0;
        stakeToken.transfer(msg.sender, _amount);
        staker.timestamp = 0;
        emit Withdrawal(msg.sender, _amount, block.timestamp);
    }

    /**
     * @notice Allows anyone to harvest their staking rewards
     */
    function claimRewards() public {
        Staker storage staker = stakers[msg.sender];
        require(staker.amount > 0, "balance is zero");
        //1. Update accRewardPerShare
        updateAccRewardPerShare();
        //2. Calculate user rewards to harvest
        uint256 rewardsToHarvest = ((staker.amount * accRewardPerShare) /
            REWARDS_PRECISION) - staker.rewardDebt;
        //3. Update rewardDebt
        staker.rewardDebt =
            (staker.amount * accRewardPerShare) /
            REWARDS_PRECISION;

        rewardsToHarvest += staker.pendingRewards;

        if (rewardsToHarvest <= 0) {
            return;
        }

        staker.pendingRewards = 0;

        stakeToken.transfer(msg.sender, rewardsToHarvest);
        emit ClaimRewards(msg.sender, rewardsToHarvest, block.timestamp);
    }

    /**
     * @notice Allows anyone to check their rewards
     * @param _staker The staker's address
     * @return staker's unharvested rewards
     */
    function checkRewards(address _staker) external view returns (uint256) {
        Staker storage staker = stakers[_staker];
        if (staker.amount <= 0) {
            return 0;
        }
        //1. Calculate accRewardPerShareTemp
        uint256 accRewardPerShareTemp = accRewardPerShare;
        uint256 timestampMaxOrCurrent = block.timestamp < endTimestamp
            ? block.timestamp
            : endTimestamp;
        if (amountOfTokensStaked > 0) {
            uint256 timeDiff = timestampMaxOrCurrent -
                lastAccRewardPerShareTimestamp;
            uint256 rewardsPerShare = timeDiff * rewardTokensPerSecond;
            accRewardPerShareTemp =
                accRewardPerShareTemp +
                ((rewardsPerShare * REWARDS_PRECISION) / amountOfTokensStaked);
        } else {
            return 0;
        }
        //2. Calculate user rewards to harvest
        uint256 rewardsToHarvest = ((staker.amount * accRewardPerShareTemp) /
            REWARDS_PRECISION) - staker.rewardDebt;

        rewardsToHarvest += staker.pendingRewards;

        if (rewardsToHarvest <= 0) {
            return 0;
        }

        return rewardsToHarvest;
    }

    /**
     * @notice Used to update accRewardPerShare
     */
    function updateAccRewardPerShare() private {
        uint256 timestampMaxOrCurrent = block.timestamp < endTimestamp
            ? block.timestamp
            : endTimestamp;
        if (amountOfTokensStaked > 0) {
            uint256 timeDiff = timestampMaxOrCurrent -
                lastAccRewardPerShareTimestamp;
            uint256 rewardsPerShare = timeDiff * rewardTokensPerSecond;
            accRewardPerShare =
                accRewardPerShare +
                ((rewardsPerShare * REWARDS_PRECISION) / amountOfTokensStaked);
        }
        lastAccRewardPerShareTimestamp = timestampMaxOrCurrent;
    }

    /**
     * @notice Used to get the summary of data in the contract
     * @return token rewards per block
     * @return amount of tokens staked
     * @return accumulated reward per share
     * @return last reward block
     * @return start timestamp
     * @return end timestamp
     */
    function getSummary()
        external
        view
        returns (uint256, uint256, uint256, uint256, uint256, uint256, address)
    {
        return (
            rewardTokensPerSecond,
            amountOfTokensStaked,
            accRewardPerShare,
            lastAccRewardPerShareTimestamp,
            startTimestamp,
            endTimestamp,
            address(stakeToken)
        );
    }

    /**
     * @notice Used to withdraw the amount of tokens from contract to protocol owner address. Unsafe function, please, use only with emergency
     * @param _tokenAddress Token address
     * @param _amount Amount to withdraw
     */
    function emergencyWithdraw(address _tokenAddress, uint256 _amount) external {
        address owner = IMYCStakingFactory(factory).owner();
        require(msg.sender == owner, "Only protocol owner");
        IERC20(_tokenAddress).transfer(owner, _amount);
    }
}


// File: contracts/staking/IMYCStakingFactory.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

interface IMYCStakingFactory {
    function treasury() external view returns (address);

    function signer() external view returns (address);

    function mycStakingManager() external view returns (address);

    function owner() external view returns (address);
}


// File: contracts/staking/IMYCStakingPool.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

interface IMYCStakingPool {
    function factory() external returns (address);
}

