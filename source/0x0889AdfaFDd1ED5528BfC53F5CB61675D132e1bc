{"Address.sol":{"content":"pragma solidity ^0.8.4;\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            \n            if (returndata.length \u003e 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"CoffeeBeans.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2Router01.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\n\r\ncontract CoffeeBeans is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    address payable public marketingAddress = payable(0x491cACF99C27DC8477bDBfcbdF89aAa967eF2620);\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    mapping (address =\u003e uint256) private _rOwned;\r\n    mapping (address =\u003e uint256) private _tOwned;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n    mapping (address =\u003e bool) private _isExcludedFromMasVolAmount;\r\n\r\n    mapping (address =\u003e bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000000 * 10**6 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"CoffeeBeansToken\";\r\n    string private _symbol = \"CBT\";\r\n    uint8 private _decimals = 9;\r\n\r\n    struct AddressFee {\r\n        bool enable;\r\n        uint256 _taxFee;\r\n        uint256 _liquidityFee;\r\n        uint256 _buyTaxFee;\r\n        uint256 _buyLiquidityFee;\r\n        uint256 _sellTaxFee;\r\n        uint256 _sellLiquidityFee;\r\n    }\r\n\r\n    struct SellHistories {\r\n        uint256 time;\r\n        uint256 bnbAmount;\r\n    }\r\n\r\n    uint256 public _taxFee = 0;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    \r\n    uint256 public _liquidityFee = 0;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    \r\n    uint256 public _buyTaxFee = 0;\r\n    uint256 public _buyLiquidityFee = 0;\r\n    \r\n    uint256 public _sellTaxFee = 0;\r\n    uint256 public _sellLiquidityFee = 0;\r\n\r\n    uint256 public _startTimeForSwap;\r\n    uint256 public _intervalMinutesForSwap = 1 * 1 minutes;\r\n\r\n    uint256 public _buyBackRangeRate = 80;\r\n\r\n    // Fee per address\r\n    mapping (address =\u003e AddressFee) public _addressFees;\r\n\r\n    uint256 public marketingDivisor = 80;\r\n    \r\n    uint256 public _MasVolAmount = 100000;\r\n    uint256 private minimumTokensBeforeSwap = 400000 * 10**6 * 10**9; \r\n    uint256 public buyBackSellLimit = 1 * 10**14;\r\n\r\n    // LookBack into historical sale data\r\n    SellHistories[] public _sellHistories;\r\n    bool public _isAutoBuyBack = false;\r\n    uint256 public _buyBackDivisor = 30;\r\n    uint256 public _buyBackTimeInterval = 5 minutes;\r\n    uint256 public _buyBackMaxTimeForHistories = 24 * 60 minutes;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    bool public buyBackEnabled = true;\r\n\r\n    bool public _isEnabledBuyBackAndBurn = true;\r\n    \r\n    event RewardLiquidityProviders(uint256 tokenAmount);\r\n    event BuyBackEnabledUpdated(bool enabled);\r\n    event AutoBuyBackEnabledUpdated(bool enabled);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    event SwapETHForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        \r\n        _isExcludedFromMasVolAmount[owner()] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _startTimeForSwap = block.timestamp;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\r\n        return minimumTokensBeforeSwap;\r\n    }\r\n    \r\n    function buyBackSellLimitAmount() public view returns (uint256) {\r\n        return buyBackSellLimit;\r\n    }\r\n    \r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n  \r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] \u003e 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        if (! _isExcludedFromMasVolAmount[from] \u0026\u0026 !_isExcludedFromMasVolAmount[to])\r\n            require(amount \u003c= _MasVolAmount, \"Transfer amount exceeds the MasVolAmount.\");\r\n        \r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance \u003e= minimumTokensBeforeSwap;    \r\n\r\n        if (to == uniswapV2Pair \u0026\u0026 balanceOf(uniswapV2Pair) \u003e 0) {\r\n            SellHistories memory sellHistory;\r\n            sellHistory.time = block.timestamp;\r\n            sellHistory.bnbAmount = _getSellBnBAmount(amount);\r\n\r\n            _sellHistories.push(sellHistory);\r\n        }\r\n\r\n        // Sell tokens for ETH\r\n        if (!inSwapAndLiquify \u0026\u0026 swapAndLiquifyEnabled \u0026\u0026 balanceOf(uniswapV2Pair) \u003e 0) {\r\n            if (to == uniswapV2Pair) {\r\n                if (overMinimumTokenBalance \u0026\u0026 _startTimeForSwap + _intervalMinutesForSwap \u003c= block.timestamp) {\r\n                    _startTimeForSwap = block.timestamp;\r\n                    contractTokenBalance = minimumTokensBeforeSwap;\r\n                    swapTokens(contractTokenBalance);    \r\n                }  \r\n\r\n                if (buyBackEnabled) {\r\n\r\n                    uint256 balance = address(this).balance;\r\n                \r\n                    uint256 _bBSLimitMax = buyBackSellLimit;\r\n\r\n                    if (_isAutoBuyBack) {\r\n\r\n                        uint256 sumBnbAmount = 0;\r\n                        uint256 startTime = block.timestamp - _buyBackTimeInterval;\r\n                        uint256 cnt = 0;\r\n\r\n                        for (uint i = 0; i \u003c _sellHistories.length; i ++) {\r\n                            \r\n                            if (_sellHistories[i].time \u003e= startTime) {\r\n                                sumBnbAmount = sumBnbAmount.add(_sellHistories[i].bnbAmount);\r\n                                cnt = cnt + 1;\r\n                            }\r\n                        }\r\n\r\n                        if (cnt \u003e 0 \u0026\u0026 _buyBackDivisor \u003e 0) {\r\n                            _bBSLimitMax = sumBnbAmount.div(cnt).div(_buyBackDivisor);\r\n                        }\r\n\r\n                        _removeOldSellHistories();\r\n                    }\r\n\r\n                    uint256 _bBSLimitMin = _bBSLimitMax.mul(_buyBackRangeRate).div(100);\r\n\r\n                    uint256 _bBSLimit = _bBSLimitMin + uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))) % (_bBSLimitMax - _bBSLimitMin + 1);\r\n\r\n                    if (balance \u003e _bBSLimit) {\r\n                        buyBackTokens(_bBSLimit);\r\n                    } \r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        bool takeFee = true;\r\n        \r\n        // If any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        else{\r\n            // Buy\r\n            if(from == uniswapV2Pair){\r\n                removeAllFee();\r\n                _taxFee = _buyTaxFee;\r\n                _liquidityFee = _buyLiquidityFee;\r\n            }\r\n            // Sell\r\n            if(to == uniswapV2Pair){\r\n                removeAllFee();\r\n                _taxFee = _sellTaxFee;\r\n                _liquidityFee = _sellLiquidityFee;\r\n            }\r\n            \r\n            // If send account has a special fee \r\n            if(_addressFees[from].enable){\r\n                removeAllFee();\r\n                _taxFee = _addressFees[from]._taxFee;\r\n                _liquidityFee = _addressFees[from]._liquidityFee;\r\n                \r\n                // Sell\r\n                if(to == uniswapV2Pair){\r\n                    _taxFee = _addressFees[from]._sellTaxFee;\r\n                    _liquidityFee = _addressFees[from]._sellLiquidityFee;\r\n                }\r\n            }\r\n            else{\r\n                // If buy account has a special fee\r\n                if(_addressFees[to].enable){\r\n                    //buy\r\n                    removeAllFee();\r\n                    if(from == uniswapV2Pair){\r\n                        _taxFee = _addressFees[to]._buyTaxFee;\r\n                        _liquidityFee = _addressFees[to]._buyLiquidityFee;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\r\n       \r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(contractTokenBalance);\r\n        uint256 transferredBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // Send to Marketing address\r\n        transferToAddressETH(marketingAddress, transferredBalance.mul(marketingDivisor).div(100));\r\n        \r\n    }\r\n    \r\n\r\n    function buyBackTokens(uint256 amount) private lockTheSwap {\r\n    \tif (amount \u003e 0) {\r\n    \t    swapETHForTokens(amount);\r\n\t    }\r\n    }\r\n    \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // Generate the uniswap pair path of token -\u003e WETH\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // Make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // Accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n        \r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n    \r\n    function swapETHForTokens(uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path,\r\n            deadAddress,\r\n            block.timestamp.add(300)\r\n        );\r\n        \r\n        emit SwapETHForTokens(amount, path);\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        if (_isExcluded[sender] \u0026\u0026 !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] \u0026\u0026 _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] \u0026\u0026 _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\t    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n    \t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n    \t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n    \r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 \u0026\u0026 _liquidityFee == 0) return;\r\n        \r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        \r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n\r\n    function _getSellBnBAmount(uint256 tokenAmount) private view returns(uint256) {\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        uint[] memory amounts = uniswapV2Router.getAmountsOut(tokenAmount, path);\r\n\r\n        return amounts[1];\r\n    }\r\n\r\n    function _removeOldSellHistories() private {\r\n        uint256 i = 0;\r\n        uint256 maxStartTimeForHistories = block.timestamp - _buyBackMaxTimeForHistories;\r\n\r\n        for (uint256 j = 0; j \u003c _sellHistories.length; j ++) {\r\n\r\n            if (_sellHistories[j].time \u003e= maxStartTimeForHistories) {\r\n\r\n                _sellHistories[i].time = _sellHistories[j].time;\r\n                _sellHistories[i].bnbAmount = _sellHistories[j].bnbAmount;\r\n\r\n                i = i + 1;\r\n            }\r\n        }\r\n\r\n        uint256 removedCnt = _sellHistories.length - i;\r\n\r\n        for (uint256 j = 0; j \u003c removedCnt; j ++) {\r\n            \r\n            _sellHistories.pop();\r\n        }\r\n        \r\n    }\r\n\r\n    function SetBuyBackMaxTimeForHistories(uint256 newMinutes) external onlyOwner {\r\n        _buyBackMaxTimeForHistories = newMinutes * 1 minutes;\r\n    }\r\n\r\n    function SetBuyBackDivisor(uint256 newDivisor) external onlyOwner {\r\n        _buyBackDivisor = newDivisor;\r\n    }\r\n\r\n    function GetBuyBackTimeInterval() public view returns(uint256) {\r\n        return _buyBackTimeInterval.div(60);\r\n    }\r\n\r\n    function SetBuyBackTimeInterval(uint256 newMinutes) external onlyOwner {\r\n        _buyBackTimeInterval = newMinutes * 1 minutes;\r\n    }\r\n\r\n    function SetBuyBackRangeRate(uint256 newPercent) external onlyOwner {\r\n        require(newPercent \u003c= 100, \"The value must not be larger than 100.\");\r\n        _buyBackRangeRate = newPercent;\r\n    }\r\n\r\n    function GetSwapMinutes() public view returns(uint256) {\r\n        return _intervalMinutesForSwap.div(60);\r\n    }\r\n\r\n    function SetSwapMinutes(uint256 newMinutes) external onlyOwner {\r\n        _intervalMinutesForSwap = newMinutes * 1 minutes;\r\n    }\r\n    \r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n        _taxFee = taxFee;\r\n    }\r\n        \r\n    function setBuyFee(uint256 buyTaxFee, uint256 buyLiquidityFee) external onlyOwner {\r\n        _buyTaxFee = buyTaxFee;\r\n        _buyLiquidityFee = buyLiquidityFee;\r\n    }\r\n   \r\n    function setSellFee(uint256 sellTaxFee, uint256 sellLiquidityFee) external onlyOwner {\r\n        _sellTaxFee = sellTaxFee;\r\n        _sellLiquidityFee = sellLiquidityFee;\r\n    }\r\n    \r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n\r\n    function setBuyBackSellLimit(uint256 buyBackSellSetLimit) external onlyOwner {\r\n        buyBackSellLimit = buyBackSellSetLimit;\r\n    }\r\n\r\n    function setMasVolAmount(uint256 MasVolAmount) external onlyOwner {\r\n        _MasVolAmount = MasVolAmount;\r\n    }\r\n    \r\n    function setMarketingDivisor(uint256 divisor) external onlyOwner {\r\n        marketingDivisor = divisor;\r\n    }\r\n\r\n    function setNumTokensSellToAddToBuyBack(uint256 _minimumTokensBeforeSwap) external onlyOwner {\r\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\r\n    }\r\n\r\n    function setMarketingAddress(address _marketingAddress) external onlyOwner {\r\n        marketingAddress = payable(_marketingAddress);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setBuyBackEnabled(bool _enabled) public onlyOwner {\r\n        buyBackEnabled = _enabled;\r\n        emit BuyBackEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setAutoBuyBackEnabled(bool _enabled) public onlyOwner {\r\n        _isAutoBuyBack = _enabled;\r\n        emit AutoBuyBackEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function FacciamoIlCaffe() external onlyOwner {\r\n        _taxFee = 3;\r\n        _liquidityFee = 13;\r\n        _buyTaxFee = 3;\r\n        _buyLiquidityFee = 13;\r\n        _sellTaxFee = 4;\r\n        _sellLiquidityFee = 14;\r\n        _startTimeForSwap = block.timestamp;\r\n        setSwapAndLiquifyEnabled(true);\r\n        _MasVolAmount = 10000000 * 10**6 * 10**9;\r\n    }\r\n    function excludeFromMasVol(address account) public onlyOwner {\r\n    _isExcludedFromMasVolAmount[account] = true;\r\n    }\r\n    function includeFromMasVol(address account) public onlyOwner {\r\n    _isExcludedFromMasVolAmount[account] = false;\r\n    }\r\n    \r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function changeRouterVersion(address _router) public onlyOwner returns(address _pair) {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\r\n        \r\n        _pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\r\n        if(_pair == address(0)){\r\n            _pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        }\r\n        uniswapV2Pair = _pair;\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n       \r\n    function transferForeignToken(address _token, address _to) public onlyOwner returns(bool _sent){\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n    \r\n    function Sweep() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n    }\r\n\r\n    function setAddressFee(address _address, bool _enable, uint256 _addressTaxFee, uint256 _addressLiquidityFee) external onlyOwner {\r\n        _addressFees[_address].enable = _enable;\r\n        _addressFees[_address]._taxFee = _addressTaxFee;\r\n        _addressFees[_address]._liquidityFee = _addressLiquidityFee;\r\n    }\r\n    \r\n    function setBuyAddressFee(address _address, bool _enable, uint256 _addressTaxFee, uint256 _addressLiquidityFee) external onlyOwner {\r\n        _addressFees[_address].enable = _enable;\r\n        _addressFees[_address]._buyTaxFee = _addressTaxFee;\r\n        _addressFees[_address]._buyLiquidityFee = _addressLiquidityFee;\r\n    }\r\n    \r\n    function setSellAddressFee(address _address, bool _enable, uint256 _addressTaxFee, uint256 _addressLiquidityFee) external onlyOwner {\r\n        _addressFees[_address].enable = _enable;\r\n        _addressFees[_address]._sellTaxFee = _addressTaxFee;\r\n        _addressFees[_address]._sellLiquidityFee = _addressLiquidityFee;\r\n    }\r\n    \r\n}"},"Context.sol":{"content":"pragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"pragma solidity ^0.8.4;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n\n}"},"IUniswapV2Factory.sol":{"content":"pragma solidity ^0.8.4;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"},"IUniswapV2Pair.sol":{"content":"pragma solidity ^0.8.4;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    \n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"},"IUniswapV2Router01.sol":{"content":"pragma solidity ^0.8.4;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"},"IUniswapV2Router02.sol":{"content":"pragma solidity ^0.8.4;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"},"Migrations.sol":{"content":"pragma solidity \u003e=0.4.22 \u003c0.9.0;\n\ncontract Migrations {\n  address public owner = msg.sender;\n  uint public last_completed_migration;\n\n  modifier restricted() {\n    require(\n      msg.sender == owner,\n      \"This function is restricted to the contract\u0027s owner\"\n    );\n    _;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.8.4;\n\nimport \"./Context.sol\";\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }   \n    \n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n    \n    function getTime() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = block.timestamp + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n    \n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don\u0027t have permission to unlock\");\n        require(block.timestamp \u003e _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"},"testa.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract testa {\n    uint256 _decimals = 9; \n    uint256 public supply = 1000000000 * 10**6 * 10**9;\n    uint256 public maxtx = 5000000 * 10**6 * 10**9;\n}"}}