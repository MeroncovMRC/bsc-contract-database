// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract LondanPepe is IERC20 {
    string public constant name = "Londan Pepe";
    string public constant symbol = "LPEPE";
    uint8 public constant decimals = 18;
    uint256 private constant _totalSupply = 100000000 * 10**uint256(decimals);
    address private constant _marketingWallet = 0xfA991D6e73AFf5194AC2f8036EC422d9646f88d0;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    uint256 public constant buyTax = 5;
    uint256 public constant sellTax = 10;
    uint256 public constant liquidityFee = 2;
    
    constructor() {
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }
    
    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }
    
    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        require(_allowances[sender][msg.sender] >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }
    
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "ERC20: transfer amount must be greater than zero");
        
        uint256 taxAmount;
        if (sender == address(this) || recipient == address(this)) {
            // Exclude liquidity fees for token contract or liquidity pool
            taxAmount = 0;
        } else if (sender == _marketingWallet) {
            // Marketing wallet has no tax
            taxAmount = 0;
        } else if (recipient == _marketingWallet) {
            // Sell transaction to marketing wallet incurs sell tax
            taxAmount = (amount * sellTax) / 100;
        } else {
            // Other transfers incur buy tax
            taxAmount = (amount * buyTax) / 100;
        }
        
        uint256 transferAmount = amount - taxAmount;
        
        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        
        // Apply liquidity fee
        if (taxAmount > 0) {
            uint256 liquidityAmount = (taxAmount * liquidityFee) / 100;
            _balances[address(this)] += liquidityAmount;
            emit Transfer(sender, address(this), liquidityAmount);
            taxAmount -= liquidityAmount;
        }
        
        emit Transfer(sender, recipient, transferAmount);
        
        
    }
    
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}