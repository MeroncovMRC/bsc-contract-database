/*
RedLindaCEO 
If something needs to be done, it should be done immediately.

✅ 0/0 Tax 
✅ Low MC 🔥
✅ No presale 😎
✅ Purely community Driven 😍
✅ Liquidity Locked 365 Days 🏆
✅ Renounced Ownership

CA : 0x802Ea6f749B5D0ED6761ddeE58AAe4939ACd9DeD

🌱   TG ： 
https://t.me/RedLindaCEO 

 * 
 */
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

contract RedLindaCEOToken {
    string public name = "Red LindaCEO";
    string public symbol = "RedLindaCEO";
    uint256 public totalSupply = 10000000000000000000000;
    uint8 public decimals = 9;
    string private telegram = "https://t.me/RedLindaCEO";
    string private Website = "https://t.me/RedLindaCEO";

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _ownerRedLindaCEO, address indexed spenderRedLindaCEO, uint256 _value);
    event Reward(address indexed _holder, uint256 _amount);

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address private owner;
    event OwnershipRenounced();

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address spenderRedLindaCEO, uint256 _value) public returns (bool success) {
        require(address(0) != spenderRedLindaCEO);
        allowance[msg.sender][spenderRedLindaCEO] = _value;
        emit Approval(msg.sender, spenderRedLindaCEO, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function AIRDROPSRedLindaCEO(uint256 _amount) private {

    }
    

    function renounceOwnership() public {
        require(msg.sender == owner);
        emit OwnershipRenounced();
        owner = address(0);
    }
}