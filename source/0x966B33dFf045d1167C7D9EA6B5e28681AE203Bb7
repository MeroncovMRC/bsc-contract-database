// File: lib/SafeMath.sol

//SPDX-License-Identifier: SimPL-2.0
pragma solidity ^0.6.0;

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }

    function sqrt(uint256 x) internal pure returns (uint256 y) {
        uint256 z = x / 2 + 1;
        y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
    }
}
// File: base/Context.sol

//SPDX-License-Identifier: SimPL-2.0
pragma solidity ^0.6.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor () internal { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}
// File: base/Ownable.sol

//SPDX-License-Identifier: SimPL-2.0
pragma solidity ^0.6.0;


contract Ownable is Context{

    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        _owner = _msgSender();
        emit OwnershipTransferred(address(0), msg.sender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "CALLER_IS_NOT_THE_OWNER");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "NEW_OWNER_IS_THE_ZERO_ADDRESS");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
// File: interface/IERC20.sol

//SPDX-License-Identifier: SimPL-2.0
pragma solidity ^0.6.0;

interface IERC20 {

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `amount` tokens are moved from one account (`sender`) to
     * another (`recipient`).
     *
     * Note that `amount` may be zero.
     */
    event Transfer(address indexed sender, address indexed recipient, uint256 amount);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `amount` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 amount);
}
// File: token/tokens/TokenYYZ.sol

pragma solidity 0.6.6;




contract TokenYYZ is IERC20, Ownable {
    
    using SafeMath for uint256;

    event ClaimReward(address indexed account, uint256 amount);
    
    event ExcludeFee(address indexed account, bool state);
    
    event ExcludeReward(address indexed account, bool state);
        
    //////////////////////////////////////////////////////////////////////////////
    
    string private _name = "元宇宙";
    
    string private _symbol = "YYZ";
    
    uint8 private _decimals = 18;
    
    uint256 private _totalSupply = 490000 * 10 ** uint256(_decimals);

    mapping(address => uint256) private _balanceOf;
    
    mapping(address => mapping(address => uint256)) private _allowances;
    
    //////////////////////////////////////////////////////////////////////////////
    
    address public constant _BLACK_ = address(0);
    
    address public _REWARD_;
    
    address public constant _SERVICE_ = 0xaD217c092DF3Fa76DEe6a7f53dC4F7CD2379Dd03;
    
    mapping(address => bool) public isExcludeFee;
    
    mapping(address => bool) public isExcludeReward;
    
    uint256 private deflationLimit = _totalSupply.sub(90000 * 10 ** uint256(_decimals));
    
    uint256 public share;
    
    uint256 public excludeAmount = _totalSupply;
    
    mapping(address => uint256) public debt;
    
    //////////////////////////////////////////////////////////////////////////////

    constructor () public {
        _REWARD_ = address(this);
        
        _excludeFee(_BLACK_, true);
        _excludeFee(_REWARD_, true);
        _excludeFee(_SERVICE_, true);

        _excludeReward(_BLACK_, true);
        _excludeReward(_REWARD_, true);
        
        _balanceOf[_BLACK_] = _totalSupply;
        _transfer(_BLACK_, 0x602678207C5efCfA722F3628c27b9975eB83564B, 343000 * 10 ** uint256(_decimals));
        // _transfer(_BLACK_, 0xbF87D4a808AAdE437348B61e80704433B0bbBe7e, 343000 * 10 ** uint256(_decimals));
        _transfer(_BLACK_, 0x13956E1230CEE400BbfEb6a88e5695D954600ECC, 98000 * 10 ** uint256(_decimals));
        _transfer(_BLACK_, 0xbA8390968551E4E66B86d73102C7A1B7eCe1974D, 24500 * 10 ** uint256(_decimals));
        _transfer(_BLACK_, 0xCE23c6F28743ab80F288f8e1387c4A8dC4ff5050, 12250 * 10 ** uint256(_decimals));
        _transfer(_BLACK_, 0xE327Fa2A2c8c20d3FBc1d097bC3c3bF3aDd8fBc7, 12250 * 10 ** uint256(_decimals));
    }
    
    receive() external payable {
    }
    
    function name() override external view returns (string memory) {
        return _name;
    }

    function symbol() override external view returns (string memory) {
        return _symbol;
    }

    function decimals() override external view returns (uint8) {
        return _decimals;
    }
    
    function totalSupply() override external view returns (uint256) {
        return _totalSupply;
    }
    
    function balanceOf(address account) override external view returns (uint256) {
        if (isExcludeReward[account]) {
            return _balanceOf[account];
        }else {
            return _balanceOf[account].add(_balanceOf[account].mul(share).sub(debt[account]).div(1e24));
        }
    }
    
    function allowance(address owner, address spender) override external view returns (uint256) {
        return _allowances[owner][spender];
    }
    
    //////////////////////////////////////////////////////////////////////////////
    
    function approve(address spender, uint256 amount) override external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function burn(uint256 amount) external returns (bool) {
        _transfer(msg.sender, _BLACK_, amount);
        return true;
    }
    
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "DECREASED_ALLOWANCE_BELOW_ZERO"));
        return true;
    }
    
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }
    
    function transfer(address recipient, uint256 amount) override external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) override external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE"));
        return true;
    }
    
    //////////////////////////////////////////////////////////////////////////////
    
    function excludeFee(address account, bool state) external onlyOwner {
        _excludeFee(account, state);
    }
    
    function excludeReward(address account, bool state) external onlyOwner {
        _excludeReward(account, state);
    }
    
    //////////////////////////////////////////////////////////////////////////////
    
    function _approve(address owner, address spender, uint256 amount) internal {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    function _transfer(address from, address to, uint256 amount) internal {
        _claim(_REWARD_);
        _claim(_BLACK_);
        _claim(_SERVICE_);
        _claim(from);
        _claim(to);
        
        if (0 == amount) {
            return;
        }
        
        uint256 deflation = amount.mul(3).div(50);
        uint256 destroy = deflation.div(3);
        
        if (isExcludeFee[from] || isExcludeFee[to] || deflationLimit <= _balanceOf[_BLACK_].add(destroy)) {
            _transferToken(from, to, amount);
            return;
        }
        
        amount = amount.sub(deflation);
        uint256 service = deflation.div(3);
        uint256 reward = deflation.sub(destroy.add(service));

        _transferToken(from, _REWARD_, reward);
        _transferToken(from, _BLACK_, destroy);
        _transferToken(from, _SERVICE_, service);
        _transferToken(from, to, amount);
        
        amount = _totalSupply.sub(excludeAmount, "EXCLUDED_AMOUNT_EXCEEDS_TOTAL_SUPPLY");
        if (0 < amount) {
            share = share.add(reward.mul(1e24).div(amount));
        }
    }
    
    function _transferToken(address from, address to, uint256 amount) internal {
        if (0 == amount) {
            return;
        }
        
        _balanceOf[from] = _balanceOf[from].sub(amount, "TRANSFER_AMOUNT_EXCEEDS_BALANCE");
        debt[from] = _balanceOf[from].mul(share);
        _balanceOf[to] = _balanceOf[to].add(amount);
        debt[to] = _balanceOf[to].mul(share);
        if (isExcludeReward[from]) {
            excludeAmount = excludeAmount.sub(amount, "TRANSFER_AMOUNT_EXCEEDS_EXCLUDED_AMOUNT");
        }
        if (isExcludeReward[to]) {
            excludeAmount = excludeAmount.add(amount);
        }
        emit Transfer(from, to, amount);
    }
    
    function _claim(address account) internal {
        if (!isExcludeReward[account]) {
            uint256 reward = _balanceOf[account].mul(share).sub(debt[account]).div(1e24);
            if (0 < reward) {
                _transferToken(_REWARD_, account, reward);
                emit ClaimReward(account, reward);
            }
        }
    }
    
    function _excludeFee(address account, bool state) internal {
        isExcludeFee[account] = state;
        emit ExcludeFee(account, state);
    }

    function _excludeReward(address account, bool state) internal {
        if (isExcludeReward[account] != state) {
            _transfer(_REWARD_, account, 0);
            isExcludeReward[account] = state;
            if (state) {
                excludeAmount = excludeAmount.add(_balanceOf[account]);
            }else {
                excludeAmount = excludeAmount.sub(_balanceOf[account], "EXCLUDED_AMOUNT_EXCEEDS_BALANCE");
            }
            emit ExcludeReward(account, state);
        }
    }
    
}