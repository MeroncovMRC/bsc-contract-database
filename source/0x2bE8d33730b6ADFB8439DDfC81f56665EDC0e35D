// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// ERC-20 standart token arayüzü
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// Token kontratı
contract PEPELON is IERC20 {
    string private _name = "PEPELON"; // Token adı
    string private _symbol = "PEPe"; // Token sembolü
    uint8 private _decimals = 9; // Token ondalık basamak sayısı
    uint256 private _totalSupply = 1000000000* 10**_decimals; // Token toplam arzı
    mapping (address => uint256) private _balances; // Adreslerin token bakiyeleri
    mapping (address => mapping (address => uint256)) private _allowances; // Adreslerin diğer adresler adına onay verilen token bakiyeleri

    // Token oluşturucu
    constructor(uint256 totalSupply_) {
        _totalSupply = totalSupply_;
        _balances[msg.sender] = totalSupply_;
        emit Transfer(address(0), msg.sender, totalSupply_);
    }

    // Token adı
    function name() public view returns (string memory) {
        return _name;
    }

    // Token sembolü
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    // Token ondalık basamak sayısı
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    // Token toplam arzı
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    // Belirtilen adresin token bakiyesi
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    // Belirtilen miktarda token transferi
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    // Diğer adres adına onay verilen token bakiyesi
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    // Diğer adres adına onay verme
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    // Diğer adresten belirtilen miktarda token transferi
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg
.sender] - amount);
return true;
}
// İç transfer işlemi
function _transfer(address sender, address recipient, uint256 amount) private {
    require(sender != address(0), "PEPELON: transfer from the zero address");
    require(recipient != address(0), "PEPELON: transfer to the zero address");
    require(amount > 0, "PEPELON: transfer amount must be greater than zero");
    require(_balances[sender] >= amount, "PEPELON: transfer amount exceeds balance");
    _balances[sender] -= amount;
    _balances[recipient] += amount;
    emit Transfer(sender, recipient, amount);
}

// Onay verme işlemi
function _approve(address owner, address spender, uint256 amount) private {
    require(owner != address(0), "PEPELON: approve from the zero address");
    require(spender != address(0), "PEPELON: approve to the zero address");
    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
}

// Cüzdan adresine token transferi
function transferToAddress(address payable recipient, uint256 amount) public returns (bool) {
    require(msg.sender != address(0), "PEPELON: transfer from the zero address");
    require(recipient != address(0), "PEPELON: transfer to the zero address");
    require(amount > 0, "PEPELON: transfer amount must be greater than zero");
    require(_balances[msg.sender] >= amount, "PEPELON: transfer amount exceeds balance");
    _balances[msg.sender] -= amount;
    _balances[recipient] += amount;
    emit Transfer(msg.sender, recipient, amount);
    return true;
}

// Cüzdan adresine token transferi (birden fazla token için)
function transferToAddressBatch(address payable recipient, uint256[] memory amounts) public returns (bool) {
    require(msg.sender != address(0), "PEPELON: transfer from the zero address");
    require(recipient != address(0), "PEPELON: transfer to the zero address");
    require(amounts.length > 0, "PEPELON: transfer amount array must not be empty");

    uint256 totalAmount = 0;
    for (uint i = 0; i < amounts.length; i++) {
        totalAmount += amounts[i];
    }

    require(totalAmount > 0, "PEPELON: transfer amount must be greater than zero");
    require(_balances[msg.sender] >= totalAmount, "PEPELON: transfer amount exceeds balance");

    for (uint i = 0; i < amounts.length; i++) {
        _balances[msg.sender] -= amounts[i];
        _balances[recipient] += amounts[i];
        emit Transfer(msg.sender, recipient, amounts[i]);
    }

    return true;
}

// Cüzdan adresine token transferi (tüm bakiye için)
function transferToAddressAll(address payable recipient) public returns (bool) {
    require(msg.sender != address(0), "PEPELON: transfer from the zero address");
    require(recipient != address(0), "PEPELON: transfer to the zero address");
    require(_balances[msg.sender] > 0, "PEPELON: sender has zero balance");

    uint256 amount = _balances[msg.sender];
    _balances[msg.sender] = 0;
    _balances[recipient] += amount;
    emit Transfer(msg.sender, recipient, amount);

    return true;
}

// Cüzdan adresine token transferi (belirli bir bakiye için)
function transferToAddressPartial(address payable recipient, uint256 amount)
public returns (bool) {
require(msg.sender != address(0), "PEPELON: transfer from the zero address");
require(recipient != address(0), "PEPELON: transfer to the zero address");
require(amount > 0, "PEPELON: transfer amount must be greater than zero");
require(_balances[msg.sender] >= amount, "PEPELON: transfer amount exceeds balance");
_balances[msg.sender] -= amount;
_balances[recipient] += amount;
emit Transfer(msg.sender, recipient, amount);
return true;
}
}