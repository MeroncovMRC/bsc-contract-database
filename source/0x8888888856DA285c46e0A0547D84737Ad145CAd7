
// File: src/FLTRebalancer.sol
// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.0;

import { ERC20 } from "solmate/tokens/ERC20.sol";
import { SafeTransferLib } from "solmate/utils/SafeTransferLib.sol";
import { FixedPointMathLib } from "solmate/utils/FixedPointMathLib.sol";

/**
 * @title FLTRebalancer
 * @author bayu <bayu@risedle.com> <https://github.com/pyk>
 * @notice This is just example contract on how people can make money in FLT
 *         market by contributing as rebalancer.
 *
 *         Rebalancer is incentivized to keep leverage ratio closely to
 *         target leverage ratio while the traders enjoy trading leveraged
 *         tokens without risk of liquidation.
 */
contract FLTRebalancer {
    using FixedPointMathLib for uint256;
    using SafeTransferLib for ERC20;
    address public recipient;

    constructor(address _recipient) {
        recipient = _recipient;
    }

    /**
     * @notice Get available rebalances to execute
     * @dev Only call this function off-chain
     * @param _flts list of FLT
     * @param _minProfits in ether
     * @return _calls Calldata that can be executed directly
     */
    function getRebalances(address[] memory _flts, uint256[] memory _minProfits)
        external
        view
        returns (bytes[] memory _calls)
    {
        uint256 n = _flts.length;
        require(n == _minProfits.length, "INVALID");

        _calls = new bytes[](n);

        for(uint256 i = 0; i < _flts.length; i++) {
            // Get FLT
            FLT flt = FLT(_flts[i]);
            uint256 minProfitInETH = _minProfits[i];

            // Check leverage ratio and target leverage ratio
            uint256 lr = flt.leverageRatio();
            uint256 maxLr = flt.maxLeverageRatio();
            uint256 minLr = flt.minLeverageRatio();

            if (lr > maxLr) {
                _calls[i] = previewLeverageDown(flt, minProfitInETH);
            } else if (lr < minLr) {
                _calls[i] = previewLeverageUp(flt, minProfitInETH);
            }
        }
        return _calls;
    }

    function getLeverageDownInOut(FLT _flt)
        internal
        view
        returns (uint256 _amountIn, uint256 _amountOut)
    {
        address c = address(_flt.collateral());
        address d = address(_flt.debt());

        uint256 lr = _flt.leverageRatio();
        uint256 mlr = _flt.maxLeverageRatio();
        uint256 mi = _flt.maxIncentive();
        uint256 md = _flt.maxDrift();
        uint256 tlr = _flt.targetLeverageRatio();

        Oracle oracle = _flt.oracleAdapter();

        // Get max amount out
        uint256 step = (lr - tlr).mulWadDown(0.5 ether);
        uint256 maxAmountOutInETH = step.mulWadDown(
            _flt.value(
                _flt.totalSupply()
            )
        );
        uint256 maxAmountOut = oracle.totalValue(
            address(0),
            c,
            maxAmountOutInETH
        );

        uint256 incentive = (lr - mlr).mulDivDown(mi, md);
        if (incentive > mi) incentive = mi;

        uint256 maxIncentive = incentive.mulWadDown(maxAmountOut);
        uint256 estAmountOut = maxAmountOut - maxIncentive;
        _amountIn = oracle.totalValue(
            c,
            d,
            estAmountOut
        );
        _amountOut = estAmountOut + incentive.mulWadDown(estAmountOut);
    }

    function getLeverageUpInOut(FLT _flt)
        internal
        view
        returns (uint256 _amountIn, uint256 _amountOut)
    {
        address c = address(_flt.collateral());
        address d = address(_flt.debt());

        uint256 lr = _flt.leverageRatio();
        uint256 mlr = _flt.minLeverageRatio();
        uint256 mi = _flt.maxIncentive();
        uint256 md = _flt.maxDrift();

        Oracle oracle = _flt.oracleAdapter();

        // Get max amount out
        uint256 step = (_flt.targetLeverageRatio() - lr).mulWadDown(0.5 ether);
        uint256 maxAmountOutInETH = step.mulWadDown(
            _flt.value(
                _flt.totalSupply()
            )
        );
        uint256 maxAmountOut = oracle.totalValue(
            address(0),
            d,
            maxAmountOutInETH
        );

        uint256 incentive = (mlr - lr).mulDivDown(mi, md);
        if (incentive > mi) incentive = mi;

        uint256 maxIncentive = incentive.mulWadDown(maxAmountOut);
        uint256 estAmountOut = maxAmountOut - maxIncentive;
        _amountIn = oracle.totalValue(
            d,
            c,
            estAmountOut
        );
        _amountOut = estAmountOut + incentive.mulWadDown(estAmountOut);
    }

    function previewLeverageDown(FLT _flt, uint256 _minProfitInETH)
        internal
        view
        returns (bytes memory _calldata)
    {
        address debt = address(_flt.debt());
        address collateral = address(_flt.collateral());

        (
            uint256 amountIn,
            uint256 amountOut
        ) = getLeverageDownInOut(_flt);

        address[] memory path = new address[](2);
        path[0] = address(collateral);
        path[1] = address(debt);

        uint256 output = _flt.router().getAmountsIn(amountIn, path)[0];
        uint256 profit = 0;
        if (amountOut > output) {
            profit = amountOut - output;
        }
        if (profit == 0) return _calldata;

        uint256 profitInETH = _flt.oracleAdapter().totalValue(
            collateral,
            _flt.router().WETH(),
            profit
        );
        if (profitInETH < _minProfitInETH) return _calldata;

        return abi.encodeWithSelector(
            FLTRebalancer.leverageDown.selector,
            _flt,
            _minProfitInETH
        );
    }

    function previewLeverageUp(FLT _flt, uint256 _minProfitInETH)
        internal
        view
        returns (bytes memory _calldata)
    {
        address debt = address(_flt.debt());
        address collateral = address(_flt.collateral());

        (
            uint256 amountIn,
            uint256 amountOut
        ) = getLeverageUpInOut(_flt);

        address[] memory path = new address[](2);
        path[0] = address(debt);
        path[1] = address(collateral);

        uint256 output = _flt.router().getAmountsIn(amountIn, path)[0];
        uint256 profit = 0;
        if (amountOut > output) {
            profit = amountOut - output;
        }
        if (profit == 0) return _calldata;

        uint256 profitInETH = _flt.oracleAdapter().totalValue(
            debt,
            _flt.router().WETH(),
            profit
        );
        if (profitInETH < _minProfitInETH) return _calldata;

        return abi.encodeWithSelector(
            FLTRebalancer.leverageUp.selector,
            _flt,
            _minProfitInETH
        );
    }

    enum FlashSwapType {LeverageUp, LeverageDown}

    struct FlashSwapParams {
        FlashSwapType flashSwapType;

        FLT flt;
        uint256 borrowAmount;
        uint256 repayAmount;
        uint256 profitAmount;
    }

    function pancakeCall(
        address _sender,
        uint256 _amount0,
        uint256 _amount1,
        bytes memory _data
    ) external {
        _callback(_sender, _amount0, _amount1, _data);
    }

    function uniswapV2Call(
        address _sender,
        uint256 _amount0,
        uint256 _amount1,
        bytes memory _data
    ) external {
        _callback(_sender, _amount0, _amount1, _data);
    }

    function _callback(
        address _sender,
        uint256 _amount0,
        uint256 _amount1,
        bytes memory _data
    ) internal {
        // no need to check the caller coz we don't store any balance here
        FlashSwapParams memory params = abi.decode(_data, (FlashSwapParams));
        FLT flt = params.flt;

        // Make sure borrowed amount from flash swap is correct
        uint256 r = _amount0 == 0 ? _amount1 : _amount0;
        require(r == params.borrowAmount, "INVALID_BORROW");

        // we need the FLT here; leverage up or down
        if (params.flashSwapType == FlashSwapType.LeverageDown) {
            // Send debt token to flt
            flt.debt().safeTransfer(address(flt), params.borrowAmount);
            // Exec pushd
            flt.pushd();
            uint256 balance = flt.collateral().balanceOf(address(this));
            // Repay amount
            flt.collateral().safeTransfer(address(flt.pair()), params.repayAmount);
            // Send profits
            flt.collateral().safeTransfer(recipient, balance - params.repayAmount);
        } else if (params.flashSwapType == FlashSwapType.LeverageUp) {
            // Send collateral token to flt
            flt.collateral().safeTransfer(address(flt), params.borrowAmount);
            // Exec pushc
            flt.pushc();
            uint256 balance = flt.debt().balanceOf(address(this));
            // Repay amount
            flt.debt().safeTransfer(address(flt.pair()), params.repayAmount);
            // Send profits
            flt.debt().safeTransfer(recipient, balance - params.repayAmount);
        } else revert("INVALID FLASHSWAP");
    }

    function leverageDown(FLT _flt, uint256 _minProfitInETH) external {
        FlashSwapParams memory params;

        (
            uint256 amountIn,
            uint256 amountOut
        ) = getLeverageDownInOut(_flt);

        address[] memory path = new address[](2);
        path[0] = address(_flt.collateral());
        path[1] = address(_flt.debt());

        uint256 repayAmount = _flt.router().getAmountsIn(amountIn, path)[0];
        uint256 profit = 0;
        if (amountOut > repayAmount) {
            profit = amountOut - repayAmount;
        }
        require(profit > 0, "UNPROFITABLE");

        uint256 profitInETH = _flt.oracleAdapter().totalValue(
            address(_flt.collateral()),
            _flt.router().WETH(),
            profit
        );
        require(profitInETH > _minProfitInETH, "UNPROFITABLE");

        params = FlashSwapParams({
            flashSwapType: FlashSwapType.LeverageDown,
            flt: _flt,
            borrowAmount: amountIn,
            repayAmount: repayAmount,
            profitAmount: profit
        });

        // Borrow debt from pancake then push debt
        address d = address(_flt.debt());
        uint256 amount0Out = d == _flt.pair().token0() ? amountIn : 0;
        uint256 amount1Out = d == _flt.pair().token1() ? amountIn : 0;
        bytes memory data = abi.encode(params);
        _flt.pair().swap(amount0Out, amount1Out, address(this), data);
    }

    function leverageUp(FLT _flt, uint256 _minProfitInETH) external {
        FlashSwapParams memory params;

        (
            uint256 amountIn,
            uint256 amountOut
        ) = getLeverageUpInOut(_flt);

        address[] memory path = new address[](2);
        path[0] = address(_flt.debt());
        path[1] = address(_flt.collateral());

        uint256 repayAmount = _flt.router().getAmountsIn(amountIn, path)[0];
        uint256 profit = 0;
        if (amountOut > repayAmount) {
            profit = amountOut - repayAmount;
        }
        require(profit > 0, "UNPROFITABLE");

        uint256 profitInETH = _flt.oracleAdapter().totalValue(
            address(_flt.debt()),
            _flt.router().WETH(),
            profit
        );
        require(profitInETH > _minProfitInETH, "UNPROFITABLE");

        params = FlashSwapParams({
            flashSwapType: FlashSwapType.LeverageUp,
            flt: _flt,
            borrowAmount: amountIn,
            repayAmount: repayAmount,
            profitAmount: profit
        });

        // Borrow collateral from pancake then push collateral
        address c = address(_flt.collateral());
        uint256 amount0Out = c == _flt.pair().token0() ? amountIn : 0;
        uint256 amount1Out = c == _flt.pair().token1() ? amountIn : 0;
        bytes memory data = abi.encode(params);
        _flt.pair().swap(amount0Out, amount1Out, address(this), data);
    }

    function multicall(bytes[] calldata data)
        public
        payable
        returns (bytes[] memory results)
    {
        results = new bytes[](data.length);
        for (uint256 i = 0; i < data.length; i++) {
            (bool success, bytes memory result) = address(this).delegatecall(data[i]);

            if (!success) {
                // Next 5 lines from https://ethereum.stackexchange.com/a/83577
                if (result.length < 68) revert();
                assembly {
                    result := add(result, 0x04)
                }
                revert(abi.decode(result, (string)));
            }

            results[i] = result;
        }
    }
}

interface Oracle {
    function totalValue(address _base, address _quote, uint256 _amount)
        external
        view
        returns (uint256);
}

interface Router {
    function WETH()
        external
        view
        returns (address);

    function getAmountsIn(uint256 _amountOut, address[] memory _path)
        external
        view
        returns (uint256[] memory _amounts);

    function getAmountsOut(uint256 _amountIn, address[] memory _path)
        external
        view
        returns (uint256[] memory _amounts);
}

interface Pair {
    function token1()
        external
        view
        returns (address);
    function token0()
        external
        view
        returns (address);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;
}

interface FLT {
    function leverageRatio()
        external
        view
        returns (uint256);

    function targetLeverageRatio()
        external
        view
        returns (uint256);

    function maxLeverageRatio()
        external
        view
        returns (uint256);

    function minLeverageRatio()
        external
        view
        returns (uint256);

    function maxDrift()
        external
        view
        returns (uint256);

    function maxIncentive()
        external
        view
        returns (uint256);

    function totalSupply()
        external
        view
        returns (uint256);

    function value(uint256 _shares)
        external
        view
        returns (uint256);

    function oracleAdapter()
        external
        view
        returns (Oracle);

    function debt()
        external
        view
        returns (ERC20);

    function collateral()
        external
        view
        returns (ERC20);

    function fees()
        external
        view
        returns (uint256);

    function router()
        external
        view
        returns (Router);

    function pair()
        external
        view
        returns (Pair);

    function pushd() external;
    function pushc() external;
}


// File: lib/solmate/src/tokens/ERC20.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity >=0.8.0;

/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.
/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)
/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)
/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.
abstract contract ERC20 {
    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event Transfer(address indexed from, address indexed to, uint256 amount);

    event Approval(address indexed owner, address indexed spender, uint256 amount);

    /*//////////////////////////////////////////////////////////////
                            METADATA STORAGE
    //////////////////////////////////////////////////////////////*/

    string public name;

    string public symbol;

    uint8 public immutable decimals;

    /*//////////////////////////////////////////////////////////////
                              ERC20 STORAGE
    //////////////////////////////////////////////////////////////*/

    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;

    mapping(address => mapping(address => uint256)) public allowance;

    /*//////////////////////////////////////////////////////////////
                            EIP-2612 STORAGE
    //////////////////////////////////////////////////////////////*/

    uint256 internal immutable INITIAL_CHAIN_ID;

    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;

    mapping(address => uint256) public nonces;

    /*//////////////////////////////////////////////////////////////
                               CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;

        INITIAL_CHAIN_ID = block.chainid;
        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();
    }

    /*//////////////////////////////////////////////////////////////
                               ERC20 LOGIC
    //////////////////////////////////////////////////////////////*/

    function approve(address spender, uint256 amount) public virtual returns (bool) {
        allowance[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);

        return true;
    }

    function transfer(address to, uint256 amount) public virtual returns (bool) {
        balanceOf[msg.sender] -= amount;

        // Cannot overflow because the sum of all user
        // balances can't exceed the max uint256 value.
        unchecked {
            balanceOf[to] += amount;
        }

        emit Transfer(msg.sender, to, amount);

        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual returns (bool) {
        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.

        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;

        balanceOf[from] -= amount;

        // Cannot overflow because the sum of all user
        // balances can't exceed the max uint256 value.
        unchecked {
            balanceOf[to] += amount;
        }

        emit Transfer(from, to, amount);

        return true;
    }

    /*//////////////////////////////////////////////////////////////
                             EIP-2612 LOGIC
    //////////////////////////////////////////////////////////////*/

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) public virtual {
        require(deadline >= block.timestamp, "PERMIT_DEADLINE_EXPIRED");

        // Unchecked because the only math done is incrementing
        // the owner's nonce which cannot realistically overflow.
        unchecked {
            address recoveredAddress = ecrecover(
                keccak256(
                    abi.encodePacked(
                        "\x19\x01",
                        DOMAIN_SEPARATOR(),
                        keccak256(
                            abi.encode(
                                keccak256(
                                    "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
                                ),
                                owner,
                                spender,
                                value,
                                nonces[owner]++,
                                deadline
                            )
                        )
                    )
                ),
                v,
                r,
                s
            );

            require(recoveredAddress != address(0) && recoveredAddress == owner, "INVALID_SIGNER");

            allowance[recoveredAddress][spender] = value;
        }

        emit Approval(owner, spender, value);
    }

    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {
        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();
    }

    function computeDomainSeparator() internal view virtual returns (bytes32) {
        return
            keccak256(
                abi.encode(
                    keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
                    keccak256(bytes(name)),
                    keccak256("1"),
                    block.chainid,
                    address(this)
                )
            );
    }

    /*//////////////////////////////////////////////////////////////
                        INTERNAL MINT/BURN LOGIC
    //////////////////////////////////////////////////////////////*/

    function _mint(address to, uint256 amount) internal virtual {
        totalSupply += amount;

        // Cannot overflow because the sum of all user
        // balances can't exceed the max uint256 value.
        unchecked {
            balanceOf[to] += amount;
        }

        emit Transfer(address(0), to, amount);
    }

    function _burn(address from, uint256 amount) internal virtual {
        balanceOf[from] -= amount;

        // Cannot underflow because a user's balance
        // will never be larger than the total supply.
        unchecked {
            totalSupply -= amount;
        }

        emit Transfer(from, address(0), amount);
    }
}


// File: lib/solmate/src/utils/SafeTransferLib.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity >=0.8.0;

import {ERC20} from "../tokens/ERC20.sol";

/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.
/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)
/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.
/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.
library SafeTransferLib {
    /*//////////////////////////////////////////////////////////////
                             ETH OPERATIONS
    //////////////////////////////////////////////////////////////*/

    function safeTransferETH(address to, uint256 amount) internal {
        bool success;

        assembly {
            // Transfer the ETH and store if it succeeded or not.
            success := call(gas(), to, amount, 0, 0, 0, 0)
        }

        require(success, "ETH_TRANSFER_FAILED");
    }

    /*//////////////////////////////////////////////////////////////
                            ERC20 OPERATIONS
    //////////////////////////////////////////////////////////////*/

    function safeTransferFrom(
        ERC20 token,
        address from,
        address to,
        uint256 amount
    ) internal {
        bool success;

        assembly {
            // Get a pointer to some free memory.
            let freeMemoryPointer := mload(0x40)

            // Write the abi-encoded calldata into memory, beginning with the function selector.
            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)
            mstore(add(freeMemoryPointer, 4), from) // Append the "from" argument.
            mstore(add(freeMemoryPointer, 36), to) // Append the "to" argument.
            mstore(add(freeMemoryPointer, 68), amount) // Append the "amount" argument.

            success := and(
                // Set success to whether the call reverted, if not we check it either
                // returned exactly 1 (can't just be non-zero data), or had no return data.
                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),
                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.
                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.
                // Counterintuitively, this call must be positioned second to the or() call in the
                // surrounding and() call or else returndatasize() will be zero during the computation.
                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)
            )
        }

        require(success, "TRANSFER_FROM_FAILED");
    }

    function safeTransfer(
        ERC20 token,
        address to,
        uint256 amount
    ) internal {
        bool success;

        assembly {
            // Get a pointer to some free memory.
            let freeMemoryPointer := mload(0x40)

            // Write the abi-encoded calldata into memory, beginning with the function selector.
            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)
            mstore(add(freeMemoryPointer, 4), to) // Append the "to" argument.
            mstore(add(freeMemoryPointer, 36), amount) // Append the "amount" argument.

            success := and(
                // Set success to whether the call reverted, if not we check it either
                // returned exactly 1 (can't just be non-zero data), or had no return data.
                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),
                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.
                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.
                // Counterintuitively, this call must be positioned second to the or() call in the
                // surrounding and() call or else returndatasize() will be zero during the computation.
                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)
            )
        }

        require(success, "TRANSFER_FAILED");
    }

    function safeApprove(
        ERC20 token,
        address to,
        uint256 amount
    ) internal {
        bool success;

        assembly {
            // Get a pointer to some free memory.
            let freeMemoryPointer := mload(0x40)

            // Write the abi-encoded calldata into memory, beginning with the function selector.
            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)
            mstore(add(freeMemoryPointer, 4), to) // Append the "to" argument.
            mstore(add(freeMemoryPointer, 36), amount) // Append the "amount" argument.

            success := and(
                // Set success to whether the call reverted, if not we check it either
                // returned exactly 1 (can't just be non-zero data), or had no return data.
                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),
                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.
                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.
                // Counterintuitively, this call must be positioned second to the or() call in the
                // surrounding and() call or else returndatasize() will be zero during the computation.
                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)
            )
        }

        require(success, "APPROVE_FAILED");
    }
}


// File: lib/solmate/src/utils/FixedPointMathLib.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity >=0.8.0;

/// @notice Arithmetic library with operations for fixed-point numbers.
/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)
/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)
library FixedPointMathLib {
    /*//////////////////////////////////////////////////////////////
                    SIMPLIFIED FIXED POINT OPERATIONS
    //////////////////////////////////////////////////////////////*/

    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.

    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {
        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.
    }

    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {
        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.
    }

    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {
        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.
    }

    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {
        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.
    }

    /*//////////////////////////////////////////////////////////////
                    LOW LEVEL FIXED POINT OPERATIONS
    //////////////////////////////////////////////////////////////*/

    function mulDivDown(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 z) {
        assembly {
            // Store x * y in z for now.
            z := mul(x, y)

            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))
            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {
                revert(0, 0)
            }

            // Divide z by the denominator.
            z := div(z, denominator)
        }
    }

    function mulDivUp(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 z) {
        assembly {
            // Store x * y in z for now.
            z := mul(x, y)

            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))
            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {
                revert(0, 0)
            }

            // First, divide z - 1 by the denominator and add 1.
            // We allow z - 1 to underflow if z is 0, because we multiply the
            // end result by 0 if z is zero, ensuring we return 0 if z is zero.
            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))
        }
    }

    function rpow(
        uint256 x,
        uint256 n,
        uint256 scalar
    ) internal pure returns (uint256 z) {
        assembly {
            switch x
            case 0 {
                switch n
                case 0 {
                    // 0 ** 0 = 1
                    z := scalar
                }
                default {
                    // 0 ** n = 0
                    z := 0
                }
            }
            default {
                switch mod(n, 2)
                case 0 {
                    // If n is even, store scalar in z for now.
                    z := scalar
                }
                default {
                    // If n is odd, store x in z for now.
                    z := x
                }

                // Shifting right by 1 is like dividing by 2.
                let half := shr(1, scalar)

                for {
                    // Shift n right by 1 before looping to halve it.
                    n := shr(1, n)
                } n {
                    // Shift n right by 1 each iteration to halve it.
                    n := shr(1, n)
                } {
                    // Revert immediately if x ** 2 would overflow.
                    // Equivalent to iszero(eq(div(xx, x), x)) here.
                    if shr(128, x) {
                        revert(0, 0)
                    }

                    // Store x squared.
                    let xx := mul(x, x)

                    // Round to the nearest number.
                    let xxRound := add(xx, half)

                    // Revert if xx + half overflowed.
                    if lt(xxRound, xx) {
                        revert(0, 0)
                    }

                    // Set x to scaled xxRound.
                    x := div(xxRound, scalar)

                    // If n is even:
                    if mod(n, 2) {
                        // Compute z * x.
                        let zx := mul(z, x)

                        // If z * x overflowed:
                        if iszero(eq(div(zx, x), z)) {
                            // Revert if x is non-zero.
                            if iszero(iszero(x)) {
                                revert(0, 0)
                            }
                        }

                        // Round to the nearest number.
                        let zxRound := add(zx, half)

                        // Revert if zx + half overflowed.
                        if lt(zxRound, zx) {
                            revert(0, 0)
                        }

                        // Return properly scaled zxRound.
                        z := div(zxRound, scalar)
                    }
                }
            }
        }
    }

    /*//////////////////////////////////////////////////////////////
                        GENERAL NUMBER UTILITIES
    //////////////////////////////////////////////////////////////*/

    function sqrt(uint256 x) internal pure returns (uint256 z) {
        assembly {
            // Start off with z at 1.
            z := 1

            // Used below to help find a nearby power of 2.
            let y := x

            // Find the lowest power of 2 that is at least sqrt(x).
            if iszero(lt(y, 0x100000000000000000000000000000000)) {
                y := shr(128, y) // Like dividing by 2 ** 128.
                z := shl(64, z) // Like multiplying by 2 ** 64.
            }
            if iszero(lt(y, 0x10000000000000000)) {
                y := shr(64, y) // Like dividing by 2 ** 64.
                z := shl(32, z) // Like multiplying by 2 ** 32.
            }
            if iszero(lt(y, 0x100000000)) {
                y := shr(32, y) // Like dividing by 2 ** 32.
                z := shl(16, z) // Like multiplying by 2 ** 16.
            }
            if iszero(lt(y, 0x10000)) {
                y := shr(16, y) // Like dividing by 2 ** 16.
                z := shl(8, z) // Like multiplying by 2 ** 8.
            }
            if iszero(lt(y, 0x100)) {
                y := shr(8, y) // Like dividing by 2 ** 8.
                z := shl(4, z) // Like multiplying by 2 ** 4.
            }
            if iszero(lt(y, 0x10)) {
                y := shr(4, y) // Like dividing by 2 ** 4.
                z := shl(2, z) // Like multiplying by 2 ** 2.
            }
            if iszero(lt(y, 0x8)) {
                // Equivalent to 2 ** z.
                z := shl(1, z)
            }

            // Shifting right by 1 is like dividing by 2.
            z := shr(1, add(z, div(x, z)))
            z := shr(1, add(z, div(x, z)))
            z := shr(1, add(z, div(x, z)))
            z := shr(1, add(z, div(x, z)))
            z := shr(1, add(z, div(x, z)))
            z := shr(1, add(z, div(x, z)))
            z := shr(1, add(z, div(x, z)))

            // Compute a rounded down version of z.
            let zRoundDown := div(x, z)

            // If zRoundDown is smaller, use it.
            if lt(zRoundDown, z) {
                z := zRoundDown
            }
        }
    }
}

