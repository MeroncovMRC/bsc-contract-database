{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"AirDrop.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n\r\nimport \"./TimeLock.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\n\r\ncontract AirDrop is Ownable {\r\n    using SafeMath for *;\r\n    using SafeERC20 for IERC20;\r\n    mapping(address =\u003e address[]) public recommend;\r\n\r\n    mapping(address =\u003e bool) public whiteList;\r\n    mapping(address =\u003e address) public upper;\r\n\r\n    mapping(address =\u003e bool) public drawed;\r\n    mapping(address =\u003e bool) public operators;\r\n    address public token;\r\n    uint256 public minHold;\r\n    uint256 public airLimit;\r\n    uint256 public airAmount;\r\n    uint256 public tokenDecimals = 18;\r\n    uint256 public ariNum = 10 * (10 ** tokenDecimals);\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n\r\n    uint256 private _status = _NOT_ENTERED;\r\n\r\n\r\n    address public lockAddress;\r\n    //uint256 public airDropValue = 1000000000000000000;\r\n    TimeLock public lockReward;\r\n    mapping(address =\u003e uint256) public airDropValue;\r\n    mapping(address =\u003e uint256) public airDropDrawed;\r\n    mapping(address =\u003e uint256) public recommendReward;\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender], \"caller is not the operator\");\r\n        _;\r\n    }\r\n      /** from openzeppelin\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    address public  minHoldToken =    0xF1932eC9784B695520258F968b9575724af6eFa8;// minhold token\r\n    constructor(address _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    function setOperator(address[] memory users, bool b) external onlyOwner {\r\n        for (uint256 i = 0; i \u003c users.length; i++) {\r\n            operators[users[i]] = b;\r\n        }\r\n    }\r\n    //change min hold\r\n    function setMinHoldToken(address _token) external onlyOwner {\r\n\r\n        require(_token != address(0), \"address 0\");\r\n        minHoldToken = _token;\r\n    }\r\n    //change min hold\r\n    function setMinHold(uint256 _minHold) external onlyOwner {\r\n        minHold = _minHold;\r\n    }\r\n       //change setAirNum\r\n    function setAirNum(uint256 _ariNum) external onlyOwner {\r\n        ariNum = _ariNum;\r\n\r\n    }\r\n\r\n    function setLockAddress(address _lockAddress) external onlyOwner {\r\n        lockAddress = _lockAddress;\r\n        lockReward = TimeLock(_lockAddress);\r\n    }\r\n\r\n\r\n\r\n    function setUpperReward(uint256 _reward, address _lower) external onlyOperator {\r\n        address one;\r\n        address two;\r\n        address three;\r\n        (one, two, three,) = _getUppers(_lower);\r\n        if (one != address(0)) {\r\n            recommendReward[one] = recommendReward[one].add(_reward);\r\n        }\r\n        if (two != address(0)) {\r\n            recommendReward[two] = recommendReward[two].add(_reward);\r\n        }\r\n\r\n        if (three != address(0)) {\r\n            recommendReward[three] = recommendReward[three].add(_reward);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function claim() external nonReentrant{\r\n        uint256 reward = recommendReward[msg.sender];\r\n        require(reward \u003e 0, \"no reward\");\r\n        IERC20(token).approve(lockAddress, reward);\r\n        lockReward.deposit(msg.sender, token, reward);\r\n        //TransferHelper.safeTransfer(token, lockAddress, reward);\r\n        recommendReward[msg.sender] = 0;\r\n    }\r\n\r\n    function getOneLevelLists(address addr) public view returns (address[] memory){\r\n        return recommend[addr];\r\n    }\r\n\r\n\r\n    function getTwoLevelLists(address addr) public view returns (address[] memory){\r\n        address[] memory ones = recommend[addr];\r\n        //twos = new address[](ones.length);\r\n        uint256 k = 0;\r\n        for (uint256 i = 0; i \u003c ones.length; i++) {\r\n            for (uint256 j = 0; j \u003c recommend[ones[i]].length; j++) {\r\n                k++;\r\n            }\r\n        }\r\n        address[]  memory twos = new address[](k);\r\n        for (uint256 i = 0; i \u003c ones.length; i++) {\r\n            for (uint256 j = 0; j \u003c recommend[ones[i]].length; j++) {\r\n                k--;\r\n                twos[k] = recommend[ones[i]][j];\r\n\r\n            }\r\n        }\r\n        return twos;\r\n    }\r\n\r\n    function getThreeLevelLists(address addr) public view returns (address[] memory){\r\n        address[] memory twos = getTwoLevelLists(addr);\r\n        uint256 k = 0;\r\n        for (uint256 i = 0; i \u003c twos.length; i++) {\r\n            for (uint256 j = 0; j \u003c recommend[twos[i]].length; j++) {\r\n                //threes[k] = recommend[twos[i]][j];\r\n                k++;\r\n            }\r\n        }\r\n        address[] memory threes = new address[](k);\r\n        for (uint256 i = 0; i \u003c twos.length; i++) {\r\n            for (uint256 j = 0; j \u003c recommend[twos[i]].length; j++) {\r\n                k--;\r\n                threes[k] = recommend[twos[i]][j];\r\n\r\n            }\r\n        }\r\n        return threes;\r\n    }\r\n\r\n    function getFourLevelLists(address addr) public view returns (address[] memory){\r\n        address[] memory threes = getThreeLevelLists(addr);\r\n\r\n        uint256 k = 0;\r\n        for (uint256 i = 0; i \u003c threes.length; i++) {\r\n            for (uint256 j = 0; j \u003c recommend[threes[i]].length; j++) {\r\n                //fours[k] = recommend[threes[i]][j];\r\n                k++;\r\n            }\r\n        }\r\n        address[] memory fours = new address[](k);\r\n        for (uint256 i = 0; i \u003c threes.length; i++) {\r\n            for (uint256 j = 0; j \u003c recommend[threes[i]].length; j++) {\r\n                k--;\r\n                fours[k] = recommend[threes[i]][j];\r\n            }\r\n        }\r\n        return fours;\r\n    }\r\n    // add white list\r\n    function addWhiteList(address _whiteList, address _recommend) internal returns (bool) {\r\n        //console.log(\"recommend:\", _recommend);\r\n        if (whiteList[_whiteList] == false \u0026\u0026 _recommend != _whiteList) {\r\n            recommend[_recommend].push(_whiteList);\r\n            whiteList[_whiteList] = true;\r\n            upper[_whiteList] = _recommend;\r\n            whiteList[_recommend] = true;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function _getUppers(address user) internal view returns (address one, address two, address three, address four){\r\n        one = upper[user];\r\n        if (one != address(0)) {\r\n            two = upper[one];\r\n            if (two != address(0)) {\r\n                three = upper[two];\r\n                if (three != address(0)) {\r\n                    four = upper[three];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function getUppers(address user) public view returns (address one, address two, address three, address four){\r\n        one = upper[user];\r\n        if (one != address(0)) {\r\n            two = upper[one];\r\n            if (two != address(0)) {\r\n                three = upper[two];\r\n                if (three != address(0)) {\r\n                    four = upper[three];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function draw(address _recommend) external nonReentrant{\r\n\r\n        require(IERC20(minHoldToken).balanceOf(address(msg.sender))\u003e=minHold , \"less than minHold\");\r\n\r\n        if (_recommend != address(0)) {\r\n            if (whiteList[_recommend] == false \u0026\u0026 msg.sender != _recommend) {\r\n                airDropValue[_recommend] = ariNum;\r\n            }\r\n\r\n            bool b = addWhiteList(msg.sender, _recommend);\r\n            if (b == true) {\r\n                address one;\r\n                address two;\r\n                address three;\r\n                (one, two, three,) = _getUppers(msg.sender);\r\n                if (one != address(0)) {\r\n                    airDropValue[one] = airDropValue[one].add(ariNum);\r\n                }\r\n                if (two != address(0)) {\r\n                    airDropValue[two] = airDropValue[two].add(ariNum);\r\n                }\r\n                if (three != address(0)) {\r\n                    airDropValue[three] = airDropValue[three].add(ariNum);\r\n                }\r\n                airDropValue[msg.sender] = ariNum;\r\n            } else {\r\n                if (whiteList[msg.sender] == false) {\r\n                    airDropValue[msg.sender] = ariNum;\r\n                    whiteList[msg.sender] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (airDropValue[msg.sender] \u003e 0\r\n        \u0026\u0026 IERC20(token).balanceOf(address(this)) \u003e= airDropValue[msg.sender]\r\n        \u0026\u0026 airAmount.add(airDropValue[msg.sender])\u003c=airLimit) {\r\n           // TransferHelper.safeTransfer(token, msg.sender,  airDropValue[msg.sender]);\r\n            IERC20(token).safeTransfer(address(msg.sender), airDropValue[msg.sender]);\r\n            airDropDrawed[msg.sender] = airDropDrawed[msg.sender].add(airDropValue[msg.sender]);\r\n            airAmount = airAmount.add(airDropValue[msg.sender]);\r\n            airDropValue[msg.sender] = 0;\r\n        }\r\n\r\n\r\n    }\r\n    function drawlater(address _recommend) external {\r\n\r\n\r\n        if (_recommend != address(0)) {\r\n            if (whiteList[_recommend] == false \u0026\u0026 msg.sender != _recommend) {\r\n\r\n            }\r\n\r\n            bool b = addWhiteList(msg.sender, _recommend);\r\n            if (b == true) {\r\n                address one;\r\n                address two;\r\n                address three;\r\n                (one, two, three,) = _getUppers(msg.sender);\r\n\r\n            } else {\r\n                if (whiteList[msg.sender] == false) {\r\n\r\n                    whiteList[msg.sender] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function  AirInit(uint256 amount) external onlyOwner {\r\n        IERC20(token).transferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                amount\r\n            );\r\n        airLimit = amount;\r\n        airAmount = 0;\r\n    }\r\n\r\n\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"FairLaunch.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n/*\r\n\r\nH2OFinanceV1\r\n*/\r\nimport \"../AirDrop.sol\";\r\nimport \"../TimeLock.sol\";\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n\r\ninterface IFairLaunch {\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function addPool(\r\n        uint256 _allocPoint,\r\n        address _stakeToken,\r\n        uint256 _lock_day,\r\n        bool _withUpdate\r\n    ) external;\r\n\r\n    function setPool(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        uint256 _lock_time,\r\n        bool _withUpdate\r\n    ) external;\r\n\r\n    function pendingH2O(uint256 _pid, address _user) external view returns (uint256);\r\n\r\n    function updatePool(uint256 _pid) external;\r\n\r\n    function deposit(address _for, uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdraw(address _for, uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdrawAll(address _for, uint256 _pid) external;\r\n\r\n    function harvest(uint256 _pid) external;\r\n}\r\n\r\ninterface IH2O {\r\n    function mint(address recipient_, uint256 amount_) external returns (bool);\r\n}\r\n\r\n// FairLaunch is a smart contract for distributing H2O by asking user to stake the ERC20-based token.\r\ncontract FairLaunch is IFairLaunch, Ownable ,ReentrancyGuard{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    uint256 constant GLO_VAL = 1e12;\r\n    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public constant tokenManualMaxNum =  10**18 *3045*10329; //manual max limit  10.329%\r\n    uint256 public  tokenManual =  0; //manual max limit\r\n    AirDrop public air;\r\n    TimeLock public lockReward;\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many Staking tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 bonusDebt; // Last block that user exec something to the pool.\r\n        address fundedBy; // Funded by who?\r\n        uint256 start_timestamp;\r\n        uint256 end_timestamp;\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of H2Os\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accH2OPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws Staking tokens to a pool. Here\u0027s what happens:\r\n        //   1. The pool\u0027s `accH2OPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User\u0027s `amount` gets updated.\r\n        //   4. User\u0027s `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        address stakeToken; // Address of Staking token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. H2Os to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that H2Os distribution occurs.\r\n        uint256 accH2OPerShare; // Accumulated H2Os per share, times 1e12. See below.\r\n        uint256 accH2OPerShareTilBonusEnd; // Accumated H2Os per share until Bonus End.\r\n        uint256 lock_time;\r\n    }\r\n\r\n    // The H2O TOKEN!\r\n    address public H2O;\r\n    // Dev address.\r\n    address public devaddr;\r\n    // H2O tokens created per block.\r\n    uint256 public H2OPerBlock;\r\n    // Bonus muliplier for early H2O makers.\r\n    uint256 public bonusMultiplier;\r\n    // Block number when bonus H2O period ends.\r\n    uint256 public bonusEndBlock;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes Staking tokens.\r\n\r\n    mapping(uint256 =\u003e mapping(address =\u003e UserInfo)) public userInfo;\r\n    mapping(address =\u003e uint256[]) public pidList;\r\n    mapping(uint256 =\u003e uint256) public pidBalance;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n    // The block number when H2O mining starts.\r\n    uint256 public startBlock;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event SetDevAddress(address indexed devAddr);\r\n    event SetH2OPerBlock(uint256 indexed H2OPerBlock);\r\n    event ManualMint(address indexed to, uint256 indexed amount);\r\n\r\n        constructor(\r\n            address _H2O,\r\n            address _devaddr,\r\n            uint256 _H2OPerBlock,\r\n            uint256 _startBlock,\r\n            uint256 _bonusEndBlock,\r\n            address _lockAddress,\r\n            address _air\r\n\r\n        ) public {\r\n            bonusMultiplier = 0;\r\n            totalAllocPoint = 0;\r\n            H2O = _H2O;\r\n            devaddr = _devaddr;\r\n            H2OPerBlock = _H2OPerBlock;\r\n            bonusEndBlock = _bonusEndBlock;\r\n            startBlock = _startBlock;\r\n            air = AirDrop(_air);\r\n            lockReward = TimeLock(_lockAddress);\r\n        }\r\n\r\n    // Update dev address by the previous dev.\r\n    function setDev(address _devaddr) public onlyOwner {\r\n        require(_devaddr != address(0));\r\n        devaddr = _devaddr;\r\n        emit SetDevAddress(_devaddr);\r\n    }\r\n\r\n    function setH2OPerBlock(uint256 _H2OPerBlock) public onlyOwner {\r\n        H2OPerBlock = _H2OPerBlock;\r\n        emit SetH2OPerBlock(_H2OPerBlock);\r\n    }\r\n\r\n    // Set Bonus params. bonus will start to accu on the next block that this function executed\r\n    // See the calculation and counting in test file.\r\n    function setBonus(\r\n        uint256 _bonusMultiplier,\r\n        uint256 _bonusEndBlock\r\n    ) public onlyOwner {\r\n        require(_bonusEndBlock \u003e block.number, \"setBonus: bad bonusEndBlock\");\r\n        require(_bonusMultiplier \u003e 1, \"setBonus: bad bonusMultiplier\");\r\n        bonusMultiplier = _bonusMultiplier;\r\n        bonusEndBlock = _bonusEndBlock;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    function addPool(\r\n        uint256 _allocPoint,\r\n        address _stakeToken,\r\n        uint256 _lock_day,\r\n        bool _withUpdate\r\n    ) public override onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        require(_stakeToken != address(0), \"add: not stakeToken addr\");\r\n        require(!isDuplicatedPool(_stakeToken, _lock_day), \"add: stakeToken dup\");\r\n        uint256 lastRewardBlock = block.number \u003e startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n        stakeToken : _stakeToken,\r\n        allocPoint : _allocPoint,\r\n        lastRewardBlock : lastRewardBlock,\r\n        accH2OPerShare : 0,\r\n        lock_time : _lock_day,\r\n        accH2OPerShareTilBonusEnd : 0\r\n        })\r\n        );\r\n    }\r\n\r\n    // Update the given pool\u0027s H2O allocation point. Can only be called by the owner.\r\n    function setPool(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        uint256 _lock_time,\r\n        bool _withUpdate\r\n    ) public override onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].lock_time = _lock_time;\r\n    }\r\n\r\n    function isDuplicatedPool(address _stakeToken, uint256 _lock_time) public view returns (bool) {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 _pid = 0; _pid \u003c length; _pid++) {\r\n            if (poolInfo[_pid].stakeToken == _stakeToken \u0026\u0026 poolInfo[_pid].lock_time == _lock_time) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function poolLength() external override view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function getPidList(address _account) external view returns (uint256[] memory) {\r\n        uint256[] memory lst = pidList[_account];\r\n        return lst;\r\n    }\r\n\r\n\r\n\r\n\r\n    function getBalanceByPid(uint256 pid, address _account) external view returns (uint256, uint256) {\r\n\r\n        UserInfo memory user = userInfo[pid][_account];\r\n        return (user.amount, user.rewardDebt);\r\n    }\r\n\r\n\r\n  //  function getUserInfoByPid(uint256 pid, address _account) external view returns (UserInfo memory) {\r\n   //     UserInfo memory user = userInfo[pid][_account];\r\n   //     return user;\r\n   // }\r\n\r\n    function manualMint(address _to, uint256 _amount) public onlyOwner {\r\n\r\n        if(tokenManual\u003e=tokenManualMaxNum)//manual max limit\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(tokenManual.add(_amount)\u003etokenManualMaxNum \u0026\u0026 tokenManual\u003ctokenManualMaxNum)\r\n        {\r\n            _amount = tokenManualMaxNum.sub(tokenManual);\r\n        }//max limit\r\n        tokenManual = tokenManual.add(_amount);//manual max limit--\r\n\r\n        IH2O(address(H2O)).mint(_to, _amount);\r\n        emit ManualMint(_to, _amount);\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _lastRewardBlock, uint256 _currentBlock) public view returns (uint256) {\r\n        require(_lastRewardBlock \u003c= _currentBlock, \"Block range exceeded！\");\r\n        if (_currentBlock \u003c= bonusEndBlock) {\r\n            return _currentBlock.sub(_lastRewardBlock).mul(bonusMultiplier);\r\n        }\r\n        if (_lastRewardBlock \u003e= bonusEndBlock) {\r\n            return _currentBlock.sub(_lastRewardBlock);\r\n        }\r\n        // This is the case where bonusEndBlock is in the middle of _lastRewardBlock and _currentBlock block.\r\n        return bonusEndBlock.sub(_lastRewardBlock).mul(bonusMultiplier).add(_currentBlock.sub(bonusEndBlock));\r\n    }\r\n\r\n    // View function to see pending H2Os on frontend.\r\n    function pendingH2O(uint256 _pid, address _user) external override view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accH2OPerShare = pool.accH2OPerShare;\r\n        uint256 lpSupply = IERC20(pool.stakeToken).balanceOf(address(this));\r\n        if (block.number \u003e pool.lastRewardBlock \u0026\u0026 lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 H2OReward = multiplier.mul(H2OPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accH2OPerShare = accH2OPerShare.add(H2OReward.mul(GLO_VAL).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accH2OPerShare).div(GLO_VAL).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public override {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number \u003c= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = IERC20(pool.stakeToken).balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n\r\n        uint256 H2OReward = multiplier.mul(H2OPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        IH2O(H2O).mint(devaddr, H2OReward.mul(125).div(1000));\r\n        IH2O(H2O).mint(address(this), H2OReward);\r\n        pool.accH2OPerShare = pool.accH2OPerShare.add(H2OReward.mul(GLO_VAL).div(lpSupply));\r\n\r\n        // update accH2OPerShareTilBonusEnd\r\n        if (block.number \u003c= bonusEndBlock) {\r\n            pool.accH2OPerShareTilBonusEnd = pool.accH2OPerShare;\r\n        }\r\n        if (block.number \u003e bonusEndBlock \u0026\u0026 pool.lastRewardBlock \u003c bonusEndBlock) {\r\n            uint256 H2OBonusPortion = bonusEndBlock.sub(pool.lastRewardBlock).mul(bonusMultiplier).mul(H2OPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            pool.accH2OPerShareTilBonusEnd = pool.accH2OPerShareTilBonusEnd.add(H2OBonusPortion.mul(GLO_VAL).div(lpSupply));\r\n        }\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n\r\n    // Deposit Staking tokens to FairLaunchToken for H2O allocation.\r\n    function deposit(address _for, uint256 _pid, uint256 _amount) nonReentrant public override {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_for];\r\n        if (user.fundedBy != address(0)) require(user.fundedBy == msg.sender, \"bad sof\");\r\n        require(pool.stakeToken != address(0), \"deposit: not accept deposit\");\r\n        updatePool(_pid);\r\n        if (user.amount \u003e 0) _harvest(_for, _pid);\r\n        if (user.fundedBy == address(0)) user.fundedBy = msg.sender;\r\n        IERC20(pool.stakeToken).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        pidList[_for].push(_pid);\r\n        pidBalance[_pid] = pidBalance[_pid].add(_amount);\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accH2OPerShare).div(GLO_VAL);\r\n        user.bonusDebt = user.amount.mul(pool.accH2OPerShareTilBonusEnd).div(GLO_VAL);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n\r\n    function withdrawAmount(address _for, uint256 _pid) public view returns (uint256) {\r\n        if (_for == address(0)) {\r\n            _for = msg.sender;\r\n        }\r\n        //PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_for];\r\n\r\n        return user.amount;\r\n    }\r\n\r\n    // Withdraw Staking tokens from FairLaunchToken.\r\n    function withdraw(address _for, uint256 _pid, uint256 _amount) nonReentrant public override {\r\n        _withdraw(_for, _pid, _amount);\r\n    }\r\n\r\n    function withdrawAll(address _for, uint256 _pid) nonReentrant public override {\r\n      _withdraw(_for, _pid, userInfo[_pid][_for].amount);\r\n    }\r\n\r\n    function _withdraw(address _for, uint256 _pid, uint256 _amount) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_for];\r\n        require(user.fundedBy == msg.sender, \"only funder\");\r\n        require(user.amount \u003e= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        _harvest(_for, _pid);\r\n        user.amount = user.amount.sub(_amount);\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accH2OPerShare).div(GLO_VAL);\r\n        user.bonusDebt = user.amount.mul(pool.accH2OPerShareTilBonusEnd).div(GLO_VAL);\r\n        if (pool.stakeToken != address(0)) {\r\n            IERC20(pool.stakeToken).safeTransfer(address(msg.sender), _amount);\r\n            pidBalance[_pid] = pidBalance[_pid].sub(_amount);\r\n\r\n        }\r\n        emit Withdraw(msg.sender, _pid, user.amount);\r\n    }\r\n\r\n    // Harvest H2Os earn from the pool.\r\n    function harvest(uint256 _pid) nonReentrant public override {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        _harvest(msg.sender, _pid);\r\n        user.rewardDebt = user.amount.mul(pool.accH2OPerShare).div(GLO_VAL);\r\n        user.bonusDebt = user.amount.mul(pool.accH2OPerShareTilBonusEnd).div(GLO_VAL);\r\n    }\r\n\r\n\r\n\r\n    function harvestStake(uint256 _pid) nonReentrant public {\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        _harvest(msg.sender, _pid);\r\n        user.rewardDebt = user.amount.mul(pool.accH2OPerShare).div(GLO_VAL);\r\n        user.bonusDebt = user.amount.mul(pool.accH2OPerShareTilBonusEnd).div(GLO_VAL);\r\n    }\r\n\r\n    function _harvest(address _to, uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_to];\r\n        require(user.amount \u003e 0, \"nothing to harvest\");\r\n        uint256 pending = user.amount.mul(pool.accH2OPerShare).div(GLO_VAL).sub(user.rewardDebt);\r\n\r\n        uint256 bal = IERC20(H2O).balanceOf(address(this));\r\n        if(bal\u003cpending)\r\n             pending = bal;\r\n        if(pending == 0) return;\r\n\r\n       // require(pending \u003c= IERC20(H2O).balanceOf(address(this)), \"wtf not enough H2O\");\r\n        // safeH2OTransfer(_to, pending);\r\n        address one;\r\n        address two;\r\n        address three;\r\n        uint256 transAmount = pending.mul(30).div(100);\r\n        (one, two, three,) = air.getUppers(_to);\r\n        if (one == address(0)) {//burn\r\n            transAmount = transAmount.sub(pending.mul(10).div(100));\r\n            IERC20(H2O).transfer(burnAddress, pending.mul(10).div(100));\r\n        }\r\n        if (two == address(0)) {//burn\r\n            transAmount = transAmount.sub(pending.mul(10).div(100));\r\n            IERC20(H2O).transfer(burnAddress, pending.mul(10).div(100));\r\n        }\r\n        if (three == address(0)) {//burn\r\n            transAmount = transAmount.sub(pending.mul(10).div(100));\r\n            IERC20(H2O).transfer(burnAddress, pending.mul(10).div(100));\r\n        }\r\n        if (transAmount \u003e 0) {\r\n            IERC20(H2O).transfer(address(air), transAmount);\r\n            air.setUpperReward(pending.mul(10).div(100), _to);\r\n        }\r\n        safeH2OTransfer(_to, pending.mul(70).div(100));\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n  function emergencyWithdraw(uint256 _pid) nonReentrant public {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][msg.sender];\r\n    uint256 amount = user.amount;\r\n    user.amount = 0;\r\n    user.rewardDebt = 0;\r\n    IERC20(pool.stakeToken).safeTransfer(address(msg.sender), amount);\r\n    emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n  }\r\n\r\n    // Safe H2O transfer function, just in case if rounding error causes pool to not have enough H2Os.\r\n    function safeH2OTransfer(address _to, uint256 _amount) internal {\r\n        uint256 H2OBal = IERC20(H2O).balanceOf(address(this));\r\n        if (_amount \u003e H2OBal) {\r\n            //IERC20(H2O).transfer(_to, H2OBal);\r\n            IERC20(H2O).approve(address(lockReward), H2OBal);\r\n            lockReward.deposit(_to, H2O, H2OBal);\r\n        } else {\r\n            //IERC20(H2O).transfer(_to, _amount);\r\n            IERC20(H2O).approve(address(lockReward), _amount);\r\n            lockReward.deposit(_to, H2O, _amount);\r\n        }\r\n    }\r\n\r\n    function getBlock() view external returns (uint256){\r\n        return block.number;\r\n    }\r\n}\r\n\r\n\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"TimeLock.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n/*\r\n\r\nH2OFinanceV1\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {cs := extcodesize(self)}\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./SafeERC20.sol\";\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n\r\n\r\ncontract TimeLock is ERC20UpgradeSafe, OwnableUpgradeSafe {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    uint256 public Time_24H;\r\n    uint256 public Lock_Day;\r\n    mapping(address =\u003e UserInfo[]) public Holders;\r\n    address public  H2O;//H2OAddr\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; //\r\n        uint256 startTime; //\r\n        uint256 withdrawAmount;\r\n        address fundedBy; //\r\n    }\r\n\r\n    function initialize(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _h2o\r\n    ) public initializer {\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n        ERC20UpgradeSafe.__ERC20_init(_name, _symbol);\r\n        Time_24H = 60 * 60 * 24;\r\n        Lock_Day = 210;\r\n        H2O = _h2o;\r\n         _status = _NOT_ENTERED;\r\n    }\r\n      /** from openzeppelin\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    event Deposit(address user, uint256 amount);\r\n\r\n    function setParam(uint256 _lock_day, uint256 _time_24H) public onlyOwner {\r\n        uint256 oneday = 60 * 60 * 24;\r\n        require(_lock_day \u003c= 365, \"too long\");\r\n        require(_time_24H \u003c= oneday, \"too long\");\r\n        Lock_Day = _lock_day;\r\n        Time_24H = _time_24H;\r\n    }\r\n\r\n    function deposit(address _for, address token, uint256 _amount) public {\r\n        require(token == H2O, \"not H2O\");\r\n        UserInfo[] storage users = Holders[_for];\r\n        if (users.length == 0) {\r\n            users.push(UserInfo({\r\n            amount : _amount,\r\n            startTime : block.timestamp,\r\n            withdrawAmount : 0,\r\n            fundedBy : address(msg.sender)\r\n            }));\r\n        } else {\r\n            UserInfo storage user = users[users.length - 1];\r\n            if (user.startTime.add(Time_24H) \u003e block.timestamp) {\r\n                //console.log(user.startTime, Time_24H);\r\n                user.amount = user.amount.add(_amount);\r\n               // console.log(\"add\", block.timestamp);\r\n            } else {\r\n                users.push(UserInfo({\r\n                amount : _amount,\r\n                startTime : block.timestamp,\r\n                withdrawAmount : 0,\r\n                fundedBy : address(msg.sender)\r\n                }));\r\n               // console.log(\"push\",block.timestamp);\r\n            }\r\n        }\r\n       // TransferHelper.safeTransferFrom(token, address(msg.sender), address(this), _amount);\r\n        IERC20(token).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        emit Deposit(_for, _amount);\r\n    }\r\n\r\n    function WaitingAmount(address _user) public view returns (uint256){\r\n        UserInfo[] memory users = Holders[_user];\r\n        if (users.length == 0) {\r\n            return 0;\r\n        }\r\n        uint256 Amount;\r\n        uint256 Total;\r\n        for (uint256 i = 0; i \u003c users.length; i++) {\r\n            Amount = Amount.add(users[i].withdrawAmount);\r\n            Total = Total.add(users[i].amount);\r\n        }\r\n        uint256 canDrawAmount = CanWithdrawAmount(_user);\r\n        return Total.sub(canDrawAmount).sub(Amount);\r\n    }\r\n\r\n\r\n    function VestingAmount(address _user) public view returns (uint256){\r\n        UserInfo[] memory users = Holders[_user];\r\n        if (users.length == 0) {\r\n            return 0;\r\n        }\r\n        uint256 Amount;\r\n        for (uint256 i = 0; i \u003c users.length; i++) {\r\n            Amount = Amount.add(users[i].amount);\r\n        }\r\n        return Amount;\r\n    }\r\n\r\n    function CanWithdrawAmount(address _user) public view returns (uint256){\r\n        UserInfo[] memory users = Holders[_user];\r\n        if (users.length == 0) {\r\n            return 0;\r\n        }\r\n        uint256 withdrawAmount;\r\n        for (uint256 i = 0; i \u003c users.length; i++) {\r\n            uint256 curTime = block.timestamp;\r\n           // console.log(\"curTime:\",curTime,users.length);\r\n            if (users[i].amount == users[i].withdrawAmount) {\r\n                continue;\r\n            }\r\n            uint256 eclipsedDay = (curTime.sub(users[i].startTime)).div(Time_24H);\r\n            if (eclipsedDay \u003e Lock_Day) {\r\n                eclipsedDay = Lock_Day;\r\n            }\r\n            uint256 eclipsedAmount = users[i].amount.div(Lock_Day).mul(eclipsedDay);\r\n            uint256 canDrawAmount = eclipsedAmount.sub(users[i].withdrawAmount);\r\n            withdrawAmount = withdrawAmount.add(canDrawAmount);\r\n            // users[i].withdrawAmount = eclipsedAmount;\r\n        }\r\n        return withdrawAmount;\r\n    }\r\n\r\n    function withdraw(address token) public nonReentrant{\r\n        require(token == H2O, \"not H2O\");\r\n        UserInfo[] storage users = Holders[address(msg.sender)];\r\n        require(users.length \u003e 0, \"need deposit\");\r\n        uint256 withdrawAmount;\r\n        uint256 curTime = block.timestamp;\r\n        uint256[] memory delArray;\r\n        for (uint256 i = 0; i \u003c users.length; i++) {\r\n            if (users[i].amount == users[i].withdrawAmount) {\r\n                delArray[delArray.length] = i;\r\n                continue;\r\n            }\r\n            uint256 eclipsedDay = (curTime.sub(users[i].startTime)).div(Time_24H);\r\n            if (eclipsedDay \u003e Lock_Day) {\r\n                eclipsedDay = Lock_Day;\r\n            }\r\n            uint256 eclipsedAmount = users[i].amount.div(Lock_Day).mul(eclipsedDay);\r\n            uint256 canDrawAmount = eclipsedAmount.sub(users[i].withdrawAmount);\r\n            withdrawAmount = withdrawAmount.add(canDrawAmount);\r\n            users[i].withdrawAmount = eclipsedAmount;\r\n        }\r\n        uint256 userlen =  users.length;\r\n        for (uint256 j = 0; j \u003c delArray.length; j++) {\r\n         //delete users[delArray[j]];\r\n         users[delArray[j]] = users[userlen-1-j];\r\n         users.pop();\r\n        }\r\n        if (withdrawAmount \u003e 0) {\r\n            //TransferHelper.safeTransfer(token, address(msg.sender), withdrawAmount);\r\n            IERC20(token).safeTransfer(address(msg.sender), withdrawAmount);\r\n        }\r\n\r\n    }\r\n}"}}