{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"JcmLocked.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\nstruct JcmHold {\r\n    uint256 totalHold;\r\n    uint256 claimed;\r\n}\r\n\r\ncontract JcmLocked is Ownable{ \r\n\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    uint256 public currentJcmLocked;\r\n    uint256 public currentJcmClaimed;\r\n    uint256 public jcmForBusdRate = 40;\r\n    uint256 public minBusdForBuy = 10 * (10**18);\r\n\r\n    IERC20 public jcmContract;\r\n    IERC20 public busdContract;\r\n\r\n    event NewLockedJcm(address, uint256);\r\n    event StartLock(uint256, uint256);\r\n    event ClaimReward(address, uint256);\r\n\r\n    mapping(address =\u003e JcmHold) public holds;\r\n\r\n    constructor(address jcmAddress, address busdAddress)  {\r\n        jcmContract = IERC20(jcmAddress);\r\n        busdContract = IERC20(busdAddress);\r\n    }\r\n\r\n    // ***view function***\r\n\r\n    function getCurrentUnclaimRewardFrom(address from) public view returns(uint256) {\r\n        if (startTime == 0) {\r\n            return 0;\r\n        }\r\n        return holds[from].totalHold * percentToClaim(block.timestamp) / 1000000  - holds[from].claimed;\r\n    }\r\n\r\n    function getTimeToEnd() public view returns(uint256) {\r\n\r\n        uint256 time = block.timestamp;\r\n\r\n        if (time \u003c startTime || time \u003e endTime) {\r\n            return 0;\r\n        }\r\n\r\n        return endTime - time;\r\n    }\r\n\r\n    // ***Logic function***\r\n\r\n    function buyJcm(uint256 busd) external {\r\n        \r\n        require(startTime == 0, \"The pool has started yet\");\r\n        require(busd \u003e= minBusdForBuy, \"Need minimum 10 BUSD\");\r\n\r\n        uint256 requestJcm = (busd * jcmForBusdRate) / (10**(18 - 3));\r\n        checkBalance(requestJcm);\r\n\r\n        bool success = busdContract.transferFrom(msg.sender, address(this), busd-1);\r\n\r\n        require(success, \"Failed transfer BUSD\");\r\n\r\n        addJcmToApply(msg.sender, requestJcm);\r\n    }\r\n\r\n    function addJcmTo(address to, uint256 amount) public onlyOwner {\r\n\r\n        require(startTime == 0, \"The pool has started yet\");\r\n\r\n        checkBalance(amount);\r\n\r\n        addJcmToApply(to,amount);\r\n    }\r\n\r\n    function claimReward() external {\r\n\r\n        require(startTime != 0, \"The pool hasn\u0027t started yet\");\r\n\r\n        uint256 claim = getCurrentUnclaimRewardFrom(msg.sender);\r\n\r\n        require(claim != 0, \"You dont have rewards\");\r\n\r\n        claimJcmApply(msg.sender, claim);\r\n\r\n        bool success = jcmContract.approve(msg.sender, claim);\r\n\r\n        require(success, \"contract dont approve JCM transaction\");\r\n\r\n        success = jcmContract.transfer(msg.sender, claim);\r\n\r\n        require(success, \"contract dont transfer JCM\");\r\n    }\r\n\r\n    function startLockPeriod(uint256 time) external onlyOwner {\r\n\r\n        require(startTime == 0, \"The pool has started yet\");\r\n\r\n        startTime = block.timestamp;\r\n        endTime = startTime + time;\r\n\r\n        emit StartLock(startTime, endTime);\r\n    }\r\n\r\n    // the output of JCM, which no one took away after the deadline (14 days after end)\r\n    function endCotract() external onlyOwner{\r\n\r\n        require(block.timestamp \u003e endTime + 14 days, \"Time to claim is not end\");\r\n\r\n        uint256 amount = jcmContract.balanceOf(address(this));\r\n\r\n        bool success = jcmContract.approve(owner, amount);\r\n\r\n        require(success, \"contract dont approve JCM transaction\");\r\n\r\n        success = jcmContract.transfer(owner, amount);\r\n\r\n        require(success, \"contract dont transfer JCM\");\r\n\r\n        emit ClaimReward(owner, amount);\r\n    }\r\n\r\n    \r\n    function claimBusd() external onlyOwner{\r\n        uint256 busd = busdContract.balanceOf(address(this));\r\n        claimBusdCount(busd);\r\n    }\r\n\r\n    function claimBusdCount(uint256 amount) public onlyOwner{\r\n\r\n        bool success = busdContract.approve(owner, amount);\r\n\r\n        require(success, \"contract dont approve BUSD transaction\");\r\n\r\n        success = busdContract.transfer(owner, amount);\r\n\r\n        require(success, \"contract dont transfer BUSD\");\r\n    }\r\n\r\n    // ***Internal function***\r\n\r\n    function claimJcmApply(address to, uint256 amount) private {\r\n        \r\n        JcmHold memory hold = holds[to];\r\n        hold.claimed += amount;\r\n        holds[to] = hold;\r\n\r\n        currentJcmClaimed += amount;\r\n\r\n        emit ClaimReward(to, amount);\r\n    }\r\n\r\n    function percentToClaim(uint256 timeNow) private view returns (uint256) {\r\n\r\n        if (timeNow \u003c= startTime) {\r\n            return 0;\r\n        }\r\n\r\n        if (timeNow \u003e= endTime) {\r\n            return 1000000;\r\n        }\r\n\r\n        return ((timeNow-startTime) * 1000000) / (endTime-startTime);\r\n    }\r\n\r\n    function checkBalance(uint256 requestJcm) private view{\r\n\r\n        uint256 balanceJcm = jcmContract.balanceOf(address(this));\r\n        require(balanceJcm \u003e= (currentJcmLocked + requestJcm), \"Not enough JCM on the contract balance\");\r\n    }\r\n\r\n    function addJcmToApply(address to, uint256 amount) private {\r\n\r\n        JcmHold memory hold = holds[to];\r\n        hold.totalHold += amount;\r\n        holds[to] = hold;\r\n        \r\n        currentJcmLocked += amount;\r\n\r\n        emit NewLockedJcm(to, amount);\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  } \r\n}\r\n"}}