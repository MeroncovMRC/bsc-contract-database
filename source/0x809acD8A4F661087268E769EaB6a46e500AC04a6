
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/Rewards.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";

// Interface for the token contract
interface IGeckoFinance {
    function transferFrom(address _from, address _to, uint256 _amount) external;

    function decimals() external view returns (uint256);

    function balanceOf(address _user) external view returns (uint256);
}

contract Rewards is Ownable {
    IGeckoFinance public token;

    // Rewards wallet address
    address public rewardsWallet;

    // Initial rewards for fresh wallets
    uint256 public initialReward = 2 ether; // $2 amount

    // Rewards thresholds and claim amount
    uint256 public claimThreshold = 50 ether; // $50 balance
    uint256 public claimThreshold1 = 200 ether; // $200 balance
    uint256 public claimThreshold2 = 1000 ether; // $1000 balance
    uint256 public claimThreshold3 = 2000 ether; // $2000 balance

    uint256 public rewardTire = 2 ether; // Reward amount for balances above claimThreshold
    uint256 public rewardTire1 = 5 ether; // Reward amount for balances between claimThreshold and claimThreshold1
    uint256 public rewardTire2 = 50 ether; // Reward amount for balances between claimThreshold1 and claimThreshold2
    uint256 public rewardTire3 = 50 ether; // Reward amount for balances above claimThreshold2

    // Claim threshold time after the instant rewards
    uint256 public claimPeriod = 12 * 30 days; // 12 months

    // Claim threshold time after the first airdrop
    uint256 public instantClaimPeriod = 7 days;

    // Initial timestamp for the first claim
    uint256 public initialTimestamp;

    struct Claim {
        uint256 timestamp;
        uint256 amount;
    }

    struct UserClaim {
        bool isAirdropClaimed;
        bool isInstantRewardsClaimed;
        uint256 totalRewardsClaimed;
        uint256 lastClaimTimestamp;
        Claim[] claims;
    }

    mapping(string => bool) public ipAddressClaimed; // Mapping to track claimed IP addresses
    mapping(address => UserClaim) claimHistory;
    mapping(string => UserClaim) claimHistoryFromIp;

    event RewardClaimed(address indexed user, uint256 amount);

    constructor(IGeckoFinance _token, address _rewardsWallet) {
        rewardsWallet = _rewardsWallet;
        token = _token;
        initialTimestamp = block.timestamp;
    }

    // Function to set the claim period
    function setClaimPeriod(uint256 _claimPeriod) external onlyOwner {
        claimPeriod = _claimPeriod;
    }

    // Function to set the reward tiers
    function setRewardTires(
        uint256 _rewardTire,
        uint256 _rewardTire1,
        uint256 _rewardTire2,
        uint256 _rewardTire3
    ) external onlyOwner {
        rewardTire = _rewardTire;
        rewardTire1 = _rewardTire1;
        rewardTire2 = _rewardTire2;
        rewardTire3 = _rewardTire3;
    }

    // Function to set the claim thresholds
    function setClaimThresholds(
        uint256 _claimThreshold,
        uint256 _claimThreshold1,
        uint256 _claimThreshold2,
        uint256 _claimThreshold3
    ) external onlyOwner {
        claimThreshold = _claimThreshold;
        claimThreshold1 = _claimThreshold1;
        claimThreshold2 = _claimThreshold2;
        claimThreshold3 = _claimThreshold3;
    }

    // Function to claim rewards
    function claimRewards(
        string memory ipAddress,
        uint256 tokenPrice
    ) external {
        require(
            canClaimFromIpAddress(ipAddress),
            "Cannot claim from this IP address yet"
        );

        uint256 claimAmount = getClaimAmount(msg.sender, ipAddress, tokenPrice);
        require(claimAmount > 0, "No rewards available to claim");
        require(
            token.balanceOf(rewardsWallet) >= claimAmount,
            "Insufficient Balance in the rewards wallet, please try again later."
        );

        ipAddressClaimed[ipAddress] = true;

        // Update user claim history
        UserClaim storage userClaim = claimHistory[msg.sender];
        UserClaim storage userClaimFromIp = claimHistoryFromIp[ipAddress];
        uint256 userBalance = token.balanceOf(msg.sender);

        // Don't have claim history from this Ip
        if (userClaimFromIp.lastClaimTimestamp == 0) {
            if (userBalance == 0) {
                userClaimFromIp.isAirdropClaimed = true;
            } else {
                userClaimFromIp.isInstantRewardsClaimed = true;
            }
        }

        // The user don't have claim history
        if (userClaim.lastClaimTimestamp == 0) {
            if (userBalance == 0) {
                userClaim.isAirdropClaimed = true;
            } else {
                userClaim.isInstantRewardsClaimed = true;
            }
        }

        // Update claims
        userClaim.claims.push(Claim(block.timestamp, claimAmount));
        userClaimFromIp.claims.push(Claim(block.timestamp, claimAmount));

        // Update total rewards claimed
        userClaim.totalRewardsClaimed += claimAmount;
        userClaimFromIp.totalRewardsClaimed += claimAmount;

        // Update last claim timestamp
        userClaim.lastClaimTimestamp = block.timestamp;
        userClaimFromIp.lastClaimTimestamp = block.timestamp;

        // Transfer the calculated token amount from the rewards contract to the user
        token.transferFrom(rewardsWallet, msg.sender, claimAmount);

        emit RewardClaimed(msg.sender, claimAmount);
    }

    // Function to calculate the claim amount for a user
    function getClaimAmount(
        address user,
        string memory ipAddress,
        uint256 tokenPrice
    ) public view returns (uint256) {
        // The user claimed rewards, but didn't pass the time threshold, no rewards availabe
        if (!canClaimFromIpAddress(ipAddress)) {
            return 0;
        }

        uint256 userBalance = token.balanceOf(user);
        UserClaim memory userClaim = claimHistory[user];

        // Check if the user can claim from other IP address
        if (!ipAddressClaimed[ipAddress]) {
            if (userClaim.isInstantRewardsClaimed) {
                // User claimed instant rewards, should pass claimPeriod
                if (
                    userClaim.lastClaimTimestamp + claimPeriod > block.timestamp
                ) {
                    return 0;
                }
            } else if (userClaim.isAirdropClaimed) {
                // User claimed airdrop but didn't claim instant rewards, should pass instant period
                if (
                    userClaim.lastClaimTimestamp + instantClaimPeriod >
                    block.timestamp
                ) {
                    return 0;
                }
            } else if (userBalance == 0) {
                // User didn't claim yet, and have a fresh wallet, can claim airdrop
                return (initialReward * 10 ** token.decimals()) / tokenPrice;
            } else if (
                initialTimestamp + instantClaimPeriod > block.timestamp
            ) {
                // User didn't claim but have some balance, should pass instant period
                return 0;
            }
        }
        // Check if the user can claim again from the claimed Ip
        else {
            if (userClaim.isInstantRewardsClaimed) {
                // The user claimed instant rewards, should pass claimPeriod
                if (
                    userClaim.lastClaimTimestamp + claimPeriod > block.timestamp
                ) {
                    return 0;
                }
            } else {
                // The user didn't claim instant reward, but did airdrop, should pass instant period
                if (
                    userClaim.lastClaimTimestamp + instantClaimPeriod >
                    block.timestamp
                ) {
                    return 0;
                }
            }
        }

        uint256 claimAmount = getRewardClaimable(userBalance, tokenPrice);

        // Convert the claim amount to token decimals
        return (claimAmount * 10 ** token.decimals()) / tokenPrice;
    }

    // Function to calculate additional rewards based on user balance
    function getRewardClaimable(
        uint256 userBalance,
        uint256 tokenPrice
    ) internal view returns (uint256) {
        if (
            userBalance * tokenPrice >=
            (claimThreshold3 * 10 ** token.decimals())
        ) {
            return rewardTire3; // Update the reward amount for token amounts above claimThreshold2
        } else if (
            userBalance * tokenPrice >=
            (claimThreshold2 * 10 ** token.decimals())
        ) {
            return rewardTire2; // Update the reward amount for token amounts between claimThreshold1 and claimThreshold2
        } else if (
            userBalance * tokenPrice >=
            (claimThreshold1 * 10 ** token.decimals())
        ) {
            return rewardTire1; // Update the reward amount for token amounts between claimThreshold and claimThreshold1
        } else if (
            userBalance * tokenPrice >=
            (claimThreshold * 10 ** token.decimals())
        ) {
            return rewardTire; // Update the reward amount for token amounts above claimThreshold
        }

        return 0; // No additional reward for token amounts below the claim threshold
    }

    // Function to check if a user can claim from a given IP address
    function canClaimFromIpAddress(
        string memory ipAddress
    ) internal view returns (bool) {
        if (!ipAddressClaimed[ipAddress]) {
            return true;
        } else {
            UserClaim memory claim = claimHistoryFromIp[ipAddress];

            // Should pass the claim period from the last claim
            if (claim.isInstantRewardsClaimed) {
                return
                    claim.lastClaimTimestamp + claimPeriod <= block.timestamp;
            } else {
                return
                    claim.lastClaimTimestamp + instantClaimPeriod <=
                    block.timestamp;
            }
        }
    }

    // Getter for claim history
    function getClaimHistory(
        address _user
    ) public view returns (UserClaim memory) {
        return claimHistory[_user];
    }

    function getClaimHistoryFromIp(
        string memory _ipAddress
    ) public view returns (UserClaim memory) {
        return claimHistoryFromIp[_ipAddress];
    }
}

