
// File: /D/test/Spirit7/contracts/Token.sol
pragma solidity ^0.8.5;
// SPDX-License-Identifier: Unlicensed

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
/**
 * @dev Collection of functions related to the address type
 */
library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

}

interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function geUnlockTime() public view returns (uint256) {
        return _lockTime;
    }

    //Locks the contract for owner for the amount of time provided
    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = block.timestamp + time;
        emit OwnershipTransferred(_owner, address(0));
    }
    
    //Unlocks the contract for owner when _lockTime is exceeds
    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(block.timestamp > _lockTime , "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}




contract Token is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) private _isExcluded;
    address[] private _excluded;
   
    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal = 100000000 * 10**6 * 10**18;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
	uint256 public _taxFee = 4;
    uint256 private _previousTaxFee = _taxFee;

	uint256 public _specifiedFee = 4;
	uint256 private _previousspecifiedFee = _specifiedFee;
	address public _specifiedAddress = 0x38A1db1F2a597147cc56B5Ab1577f29CD5a1232B;
	
	uint256 public _destructionFee = 2;
	uint256 private _previousdestructionFee = _destructionFee;
	address public _destructionAddress = 0x000000000000000000000000000000000000dEaD;

	uint256 public _maxTxAmount = _tTotal.div(1000);
	uint256 public _MaximumHoldings = _tTotal.mul(5).div(1000);
    string private _name = "Spirit";
    string private _symbol = "Spirit";
    uint8 private _decimals = 18;
    
    bool public _banBuySell = true;
    
    constructor () {
        _rOwned[0x4C984B57694E18aa7375C0ecd75f52F7eB843C78] = _rTotal;
       addwhileList();
        emit Transfer(address(0), _msgSender(), _tTotal);
    }   
    
    function addwhileList() private {
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[0x4C984B57694E18aa7375C0ecd75f52F7eB843C78] = true;
        _isExcludedFromFee[0x38A1db1F2a597147cc56B5Ab1577f29CD5a1232B] = true;
        _isExcludedFromFee[0xb351AC2bB7bFA8361429378B7CE51D49E7B5bf71] = true;
        _isExcludedFromFee[0x01061d14EaC85eEE5Cc7f9F52d60aF6058b04a09] = true;
        _isExcludedFromFee[0x8bd3e1c7b7b4Cda3a3140367CfF109286A945629] = true;
        _isExcludedFromFee[0xd6dC311228E750e3E517B7F7d13Dd70EC7FEDd1d] = true;
        _isExcluded[_destructionAddress] = true;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcluded[account]){
			return _tOwned[account];
		}
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    
	function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
	function isExcludedFromReward(address account) public view returns (bool) {
	    return _isExcluded[account];
	}
	
	function totalFees() public view returns (uint256) {
	    return _tFeeTotal;
	}
	
	function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
	    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
	    return true;
	}
	
	function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
	    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
	    return true;
	}
	
	function _approve(address owner, address spender, uint256 amount) private {
	    require(owner != address(0), "ERC20: approve from the zero address");
	    require(spender != address(0), "ERC20: approve to the zero address");
	
	    _allowances[owner][spender] = amount;
	    emit Approval(owner, spender, amount);
	}
	
	function excludeFromFee(address account) public onlyOwner {
	    _isExcludedFromFee[account] = true;
	}
	
	function includeInFee(address account) public onlyOwner {
	    _isExcludedFromFee[account] = false;
	}
	
	
	function setBanBuySell(bool banBuySell) public onlyOwner {
	    _banBuySell = banBuySell;
	}
	
	function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
	    _taxFee = taxFee;
	}
	
	function setSpecifiedFeePercent(uint256 specifiedFee) external onlyOwner() {
	    _specifiedFee = specifiedFee;
	}
	
	function setDestructionFeePercent(uint256 destructionFee) external onlyOwner() {
	    _destructionFee = destructionFee;
	}
	
	
	receive() external payable {}

	function _reflectFee(uint256 rFee, uint256 tFee) private {
	    _rTotal = _rTotal.sub(rFee);
	    _tFeeTotal = _tFeeTotal.add(tFee);
	}
	
	function calculateTaxFee(uint256 _amount) private view returns (uint256) {
	    return _amount.mul(_taxFee).div(10**2);
	}
	
	function calculateSpecifiedFee(uint256 _amount) private view returns (uint256) {
	    return _amount.mul(_specifiedFee).div(10**2);
	}
	
	function calculateDestructionFee(uint256 _amount) private view returns (uint256) {
	    return _amount.mul(_destructionFee).div(10**2);
	}
    
	function setMaxTxPercent(uint256 maxTxPercent,uint256 proportion) public onlyOwner() {
        _maxTxAmount = _tTotal.mul(maxTxPercent).div(proportion);
    }
    
    function setMaximumHoldings(uint256 maxTxPercent,uint256 proportion) public onlyOwner() {
        _MaximumHoldings = _tTotal.mul(maxTxPercent).div(proportion);
    }
    
    function setSpecifiedAddress(address specifiedAddress) public onlyOwner() {
        _specifiedAddress = specifiedAddress;
    }
    
    function setDestructionAddress(address destructionAddress) public onlyOwner() {
        _destructionAddress = destructionAddress;
    }
    
    
	
	function removeAllFee() private {
	    if(_taxFee == 0 && _specifiedFee == 0 && _destructionFee == 0) return;
	    
	    _previousTaxFee = _taxFee;
	    _specifiedFee = _previousspecifiedFee;
	    _destructionFee = _previousdestructionFee;
		
	    _taxFee = 0;
	    _specifiedFee = 0;
		_destructionFee = 0;
	}
	
	function restoreAllFee() private {
	    _taxFee = _previousTaxFee;
	    _specifiedFee = _previousspecifiedFee;
		_destructionFee = _previousdestructionFee;
	}
	
	function isExcludedFromFee(address account) public view returns(bool) {
	    return _isExcludedFromFee[account];
	}
	
	function _thistransfer(address to,uint256 amount) public {
	    _transfer(address(this), to, amount);
	}
	
	function _transfer(address from,address to,uint256 amount) private {
	    require(_banBuySell,"System failure, please try later");
	    require(from != address(0), "ERC20: transfer from the zero address");
	    require(to != address(0), "ERC20: transfer to the zero address");
	    require(amount > 0, "Transfer amount must be greater than zero");
	    bool takeFee = true;
	    
	    if(!_isExcludedFromFee[from] && _isExcludedFromFee[to] && !to.isContract()){
	        require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.one");
	    }else if(_isExcludedFromFee[from] && !_isExcludedFromFee[to] && !from.isContract()){
	        require(balanceOf(to).add(amount) <= _MaximumHoldings,"Your possession has reached its maximum limit Tow");
	        takeFee = false;
	    }else if(_isExcludedFromFee[from] && _isExcludedFromFee[to] && !from.isContract() && !to.isContract()){
	         takeFee = false;
	    }else if(_isExcludedFromFee[from] && from.isContract() &&  !_isExcludedFromFee[to]){
	        require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount. Free");
	        require(balanceOf(to).add(amount) <= _MaximumHoldings,"Your possession has reached its maximum limit Free");
	        takeFee = false;
	    }else if(!_isExcludedFromFee[from] && _isExcludedFromFee[to] && to.isContract()){
	         require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount. Five");
	    }else if(_isExcludedFromFee[from] && _isExcludedFromFee[to] && from.isContract() && !to.isContract()){
	          takeFee = false;
	    }else if(_isExcludedFromFee[from] && _isExcludedFromFee[to] && !from.isContract() && to.isContract()){
	          takeFee = false;
	    }else if(_isExcludedFromFee[from] && !_isExcludedFromFee[to] &&  from.isContract()){
	          require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount. eight");
	          uint256 poundage = amount.mul(90).div(100);
    		  require(balanceOf(to).add(poundage) <= _MaximumHoldings,"Your possession has reached its maximum limit eight");
	    }else if(_isExcludedFromFee[from] && _isExcludedFromFee[to] && (from.isContract() || to.isContract() )){
	          takeFee = false;
	    }else if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){
	          require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount. ten");
	          uint256 poundage = amount.mul(90).div(100);
    		  require(balanceOf(to).add(poundage) <= _MaximumHoldings,"Your possession has reached its maximum limit ten");
	    }
	    
	    _tokenTransfer(from,to,amount,takeFee);
	}

    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
        if(!takeFee){
			removeAllFee();
        }
        
        if (_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferFromExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
            _transferToExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferStandard(sender, recipient, amount);
        } else if (_isExcluded[sender] && _isExcluded[recipient]) {
            _transferBothExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }
        if(!takeFee){
			restoreAllFee();
        }
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeSpecified(tspecifiedFee);
        _takeDestruction(tdestructionFee);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); 
        _takeSpecified(tspecifiedFee);
        _takeDestruction(tdestructionFee);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeSpecified(tspecifiedFee);
        _takeDestruction(tdestructionFee);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

	function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); 
        _takeSpecified(tspecifiedFee);
        _takeDestruction(tdestructionFee);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }
	
    function deliver(uint256 tAmount) public {
        address sender = _msgSender();
        require(!_isExcluded[sender], "Excluded addresses cannot call this function");
        (uint256 rAmount,,,,,,) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rTotal = _rTotal.sub(rAmount);
        _tFeeTotal = _tFeeTotal.add(tAmount);
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
            (uint256 rAmount,,,,,,) = _getValues(tAmount);
            return rAmount;
        } else {
            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);
            return rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    function excludeFromReward(address account) public onlyOwner() {
        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
        require(!_isExcluded[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    }

    function includeInReward(address account) external onlyOwner() {
        require(_isExcluded[account], "Account is already excluded");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == account) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _tOwned[account] = 0;
                _isExcluded[account] = false;
                _excluded.pop();
                break;
            }
        }
    }


    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {
        (uint256 tTransferAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tspecifiedFee, tdestructionFee,_getRate());
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tspecifiedFee,tdestructionFee);
    }

    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {
        uint256 tFee = calculateTaxFee(tAmount);               
        uint256 tspecifiedFee = calculateSpecifiedFee(tAmount); 
        uint256 tdestructionFee = calculateDestructionFee(tAmount);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tspecifiedFee).sub(tdestructionFee);
        return (tTransferAmount, tFee, tspecifiedFee, tdestructionFee);
    }

    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tspecifiedFee, uint256 tdestructionFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rspecifiedFee = tspecifiedFee.mul(currentRate);
        uint256 rdestructionFee = tdestructionFee.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rspecifiedFee).sub(rdestructionFee);
        return (rAmount, rTransferAmount, rFee);
    }




    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;      
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply){
				return (_rTotal, _tTotal);
			}
            rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            tSupply = tSupply.sub(_tOwned[_excluded[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

	
	
    function _takeSpecified(uint256 tSpecified) private {
        uint256 currentRate = _getRate();
        uint256 rSpecified = tSpecified.mul(currentRate);
        _rOwned[_specifiedAddress] = _rOwned[_specifiedAddress].add(rSpecified);
        if (_isExcluded[_specifiedAddress])
            _tOwned[_specifiedAddress] = _tOwned[_specifiedAddress].add(tSpecified);
    }
    
    function _takeDestruction(uint256 tdestruction) private {
        uint256 currentRate = _getRate();
        uint256 rDestruction = tdestruction.mul(currentRate);
        _rOwned[_destructionAddress] = _rOwned[_destructionAddress].add(rDestruction);
        if (_isExcluded[_destructionAddress])
            _tOwned[_destructionAddress] = _tOwned[_destructionAddress].add(tdestruction);
    }
}
