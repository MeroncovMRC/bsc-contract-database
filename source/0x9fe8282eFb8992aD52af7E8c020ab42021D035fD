// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.19;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                // Solidity will revert if denominator == 0, unlike the div opcode on its own.
                // The surrounding unchecked block does not change this fact.
                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1, "Math: mulDiv overflow");

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);
        }
    }
}

/**
 * @dev Standard signed math utilities missing in the Solidity language.
 */
library SignedMath {
    /**
     * @dev Returns the largest of two signed numbers.
     */
    function max(int256 a, int256 b) internal pure returns (int256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two signed numbers.
     */
    function min(int256 a, int256 b) internal pure returns (int256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two signed numbers without overflow.
     * The result is rounded towards zero.
     */
    function average(int256 a, int256 b) internal pure returns (int256) {
        // Formula from the book "Hacker's Delight"
        int256 x = (a & b) + ((a ^ b) >> 1);
        return x + (int256(uint256(x) >> 255) & (a ^ b));
    }

    /**
     * @dev Returns the absolute unsigned value of a signed value.
     */
    function abs(int256 n) internal pure returns (uint256) {
        unchecked {
            // must be unchecked in order to support `n = type(int256).min`
            return uint256(n >= 0 ? n : -n);
        }
    }
}

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `int256` to its ASCII `string` decimal representation.
     */
    function toString(int256 value) internal pure returns (string memory) {
        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }

    /**
     * @dev Returns true if the two strings are equal.
     */
    function equal(string memory a, string memory b) internal pure returns (bool) {
        return keccak256(bytes(a)) == keccak256(bytes(b));
    }
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }
    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }
    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }
    
}

library Address {
    
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }
    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }
    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }
    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }
    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }


    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }
    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                 assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);
    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);
    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);
    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);
    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;
    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract Context {

    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; 
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    // Set initial owner
    constructor () {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    // Return current owner
    function owner() public view virtual returns (address) {
        return _owner;
    }

    // Restrict function to contract owner only 
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: Caller is not the owner!");
        _;
    }

    // Renounce ownership of the contract 
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    // Transfer the contract to to a new owner
    function transferOwnership(address newOwner) public virtual onlyOwner {
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract VIRAL is Context, IBEP20, Ownable { 
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _holdersList;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) public _isExcludedFromFee; 
    mapping (address => bool) public _isBlacklisted;
   
    address payable private _feeWallet = payable(0x1755847E848E61f2f1A63c690d4D566b5ffBc4C2);
    address payable private _burnWallet = payable(0x0000000000000000000000000000000000000000); 
    address private _iUniswapV2Router02Address = 0x10ED43C718714eb63d5aA57B78B54704E256024E; 

    // Token settings
    string private _name = "VIRAL"; 
    string private _symbol = "VIRAL";  
    uint8 private _decimals = 18;
    uint256 private _totalTokenSupply = 2000000 * 10 ** _decimals;

    // Trading variabiles declarations
    bool public _tradingActive = false;

    // Tranfer fees, bots protection variabiles declarations
    bool public _blacklistActive = true;
    bool public _noFeeToTransfer = true;
    uint256 public _blockForPenaltyEnd = 0;
    uint256 public _botsCaught = 0;
    mapping (address => bool) public _boughtEarly;
    mapping(address => uint256) public _lastBought;
    uint256 public _earlySellerPeriod = 3;

    // Counter for liquify trigger
    bool private _swapTrigger = false; 
    uint256 public _swapTokensAtAmount = 1000 * 10 ** _decimals;

    // This is the max fee that the contract will accept, it is hard-coded to protect buyers, is the sum of buy AND the sell fees
    uint256 private _maximumPossibleFee = 10; 

    // Setting the initial fees
    uint256 public _totalFee = 5;
    uint256 public _buyFee = 5;
    uint256 public _sellFee = 5;
    uint256 public _penalityFee = 99;

    // Previous fees are used to keep track of fee settings when removing and restoring fees at runtime
    uint256 private _previousTotalFee = _totalFee; 
    uint256 private _previousBuyFee = _buyFee; 
    uint256 private _previousSellFee = _sellFee; 

    // Wallets limits - added +1 for tolerance
    uint256 public _maxWalletToken = 50001 * 10 ** _decimals;
    uint256 public _maxTransactionAmount = 50001 * 10 ** _decimals; 
                                
    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;

    bool public _inSwapAndLiquify;
    bool public _swapAndLiquifyEnabled = true;
    
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event BlacklistFilterStatusUpdated(bool enabled);
    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);
    event EnabledTrading();
    event CaughtEarlyBuyer(address sniper);
    event CaughtEarlySeller(address sniper);
    event OwnerForcedSwapBack(uint256 timestamp);
    
    // Prevent processing while already processing! 
    modifier lockTheSwap {
        _inSwapAndLiquify = true;
        _;
        _inSwapAndLiquify = false;
    }

    constructor () {
        // Initially, assign all tokens to owner address
        _holdersList[owner()] = _totalTokenSupply;

        // Create pair address for PancakeSwap
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_iUniswapV2Router02Address); 
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;

        // Exclude owner, contract and fee wallet addresses from paying fees
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_feeWallet] = true;
        
        emit Transfer(address(0), owner(), _totalTokenSupply);
    }

    // Standard token compliance functions set

    function getOwner() external view returns (address) {
        return owner();
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalTokenSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _holdersList[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "Viral: Transfer amount exceeds allowance!"));
        return true;
    }
     
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "Viral: Decreased allowance below zero!"));
        return true;
    }

    // This function is required so that the contract can receive USDT from pancakeswap
    receive() external payable {}
    fallback() external payable {}

    // Check if token transfer needs to process fees
    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
        if (!takeFee) {
            // If no fee apply, remove temporarily the fees
            _removeAllFee();
        }
        
        // Proceed transfering tokens
        _transferTokens(sender, recipient, amount);
        
        if (!takeFee) {
            // Restore the fees to initial values
            restoreAllFee();
        }  
    }

    // Redistributing tokens and transfering the fee to the contract address
    function _transferTokens(address sender, address recipient, uint256 transferAmount) private {
        // Retrieve fee amount based on current transaction conditions
        (uint256 transferFeeAmount, uint256 feeAmount) = _getValues(transferAmount);
        address contractAddress = address(this);

        _holdersList[sender] = _holdersList[sender].sub(transferAmount);
        _holdersList[recipient] = _holdersList[recipient].add(transferFeeAmount);
        emit Transfer(sender, recipient, transferFeeAmount);

        if(feeAmount > 0){
             _holdersList[contractAddress] = _holdersList[contractAddress].add(feeAmount); 
            emit Transfer(recipient, contractAddress, feeAmount);
        }
    }

    // Calculating the fees in tokens amount
    function _getValues(uint256 transferAmount) private view returns (uint256, uint256) {
        uint256 feeAmount = 0;
        uint256 transferFeeAmount = transferAmount;

        if (_totalFee > 0) {
            feeAmount = transferAmount.mul(_totalFee).div(100);
            transferFeeAmount = transferAmount.sub(feeAmount);
        }
       
        return (transferFeeAmount, feeAmount);
    }

    // Remove all fees
    function _removeAllFee() private {
        if (_totalFee == 0 && _buyFee == 0 && _sellFee == 0) {
            return;
        } 

        _previousBuyFee = _buyFee; 
        _previousSellFee = _sellFee; 
        _previousTotalFee = _totalFee;
        _buyFee = 0;
        _sellFee = 0;
        _totalFee = 0;
    }
    
    // Restore all fees
    function restoreAllFee() private {
        _totalFee = _previousTotalFee;
        _buyFee = _previousBuyFee; 
        _sellFee = _previousSellFee; 
    }

    // Approve a wallet to sell tokens
    function _approve(address owner, address spender, uint256 amount) private {
        // Block transaction from zero address
        require(owner != address(0) && spender != address(0), "Viral: Using zero as address!");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);

    }

    // Standard transfer function
    function _transfer(address from, address to, uint256 amount) private {
        // Check if trading is active
        if (!_tradingActive) {
            require(_isExcludedFromFee[from] || _isExcludedFromFee[to], "Viral: Trading is not active!");
        }

        // Limit the wallet tokens total amount
        if (to != owner() && to != _feeWallet && to != address(this) && to != uniswapV2Pair && to != _burnWallet && from != owner()) {
            uint256 heldTokens = balanceOf(to);
            require((heldTokens.add(amount)) <= _maxWalletToken, "Viral: The receiver wallet has reached the maximum token holding limit!");
        }

        // Limit the maximum number of tokens that can be bought or sold in one transaction
        if (from != owner() && to != owner()) {
            require(amount <= _maxTransactionAmount, "Viral: Maximum token amount per transaction reached!");
        }
            
        // Block the transaction if the wallet is in the blocked wallet list
        if (_blacklistActive) {
            require(!_isBlacklisted[from], "Viral: The addres you are using is blacklisted!");
            require(!_isBlacklisted[to], "Viral: This address you are sending to is blacklisted!");
        }

        // Block transaction from zero address
        require(from != address(0) && to != address(0), "Viral: Using zero as address!");

        // Block transaction if token amount is equal or less than zero
        require(amount > 0, "Viral: Transfer token value must be higher than zero!");

        // Swap and liquify if contract has at least the amount of tokens setted for automatic swap 
        uint256 contractTokenBalance = balanceOf(address(this));
        _swapTrigger = contractTokenBalance >= _swapTokensAtAmount;
        
        if (_swapTrigger && !_inSwapAndLiquify && from != uniswapV2Pair && _swapAndLiquifyEnabled) { 
            if (contractTokenBalance > _maxTransactionAmount) {
                contractTokenBalance = _maxTransactionAmount;
            }
            if (contractTokenBalance > 0){
                swapAndLiquify(_swapTokensAtAmount);
            }
        }

        bool takeFee = true; 

        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || (_noFeeToTransfer && from != uniswapV2Pair && to != uniswapV2Pair)) {
            // Exclude regular transfers from fee
            takeFee = false;
        } else if (from == uniswapV2Pair) {
            // If 'from' is the pair address, manage the BUY case
            _lastBought[to]=block.number;
            if (IsEarlyBuyPenaltyInEffect()) {
                if (!_boughtEarly[to]) {
                    _boughtEarly[to] = true;
                    _botsCaught = _botsCaught.add(1);
                }
                _totalFee = _penalityFee;
                emit CaughtEarlyBuyer(to);
            } else {
                _totalFee = _buyFee;
            }  
        } else if (to == uniswapV2Pair) {
            // If 'to' is the pair address, manage the SELL case
            if (_isSellingEarly(from)) {
                // If is an early sell, apply penality
                _totalFee = _penalityFee;

                if (_blacklistActive) {
                    // Blacklist wallet for next transfers
                    _isBlacklisted[from] = true;
                }
                emit CaughtEarlySeller(from);
            } else {
                // Else set the regular sell fee
                _totalFee = _sellFee;
            }
        }
        
        // Call token transfer internal method
        _tokenTransfer(from, to, amount, takeFee);
        
    }
    
    // Check if is an early sell
    function _isSellingEarly(address from) private view returns(bool) {
        if(_earlySellerPeriod == 0){
            return(false);
        } else {
            if (block.number <= _lastBought[from] + _earlySellerPeriod) {
                return(true);
            } else {
                return(false);
            }
        }
    }

    // Send BNB to external wallet
    function _sendToWallet(address payable wallet, uint256 amount) private {
        //Transfer BNB to wallet address
        wallet.transfer(amount);
    }

    // Processing tokens swap from contract balance
    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        // Swap tokens for BNB
        _swapTokensForBNB(contractTokenBalance);
        uint256 contractBNB = address(this).balance;
        // Send BNB amount to fee wallet
        _sendToWallet(_feeWallet, contractBNB);
    }

    // Swapping tokens for BNB using PancakeSwap 
    function _swapTokensForBNB(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, 
            path,
            address(this),
            block.timestamp
        );
    }

    // Check is early buy penality in effect
    function IsEarlyBuyPenaltyInEffect() public view returns (bool) {
        return block.number < _blockForPenaltyEnd;
    }

    // Insert or update the status on wallets for early buy checks
    function SetBoughtEarlyStatusMassive(address[] memory wallets, bool flag) public onlyOwner {
        for(uint256 i = 0; i < wallets.length; i++){
            _boughtEarly[wallets[i]] = flag;
        }
    }

    // Manual token process trigger, enter the number of tokens to process
    function SwapTokensManually(uint256 numberOfTokens) public onlyOwner {
        uint256 tokenAmountConverted = numberOfTokens * 10 ** _decimals;
        // Do not trigger if already in swap
        require(!_inSwapAndLiquify, "Viral: Swap already triggerd, try later!"); 

        // Check if contract has enoght tokens to swap
        require(balanceOf(address(this)) >= tokenAmountConverted, "Viral: Not enought tokens on contract to process!"); 

        // Swap and liquify tokens
        swapAndLiquify(tokenAmountConverted);
        emit OwnerForcedSwapBack(block.timestamp);
    }

    // Update block period for early selling penality
    function UpdateEarlySellerPeriod(uint256 newPeriod) external onlyOwner {
        _earlySellerPeriod = newPeriod;
    }

    // Enable trading function
    function EnableTrading(uint256 blocksNumber) external onlyOwner {
        // Check if trading is already enabled
        require(!_tradingActive, "Viral: Trading already active");

        // Enable trading
        _tradingActive = true;
        _swapAndLiquifyEnabled = true;
        _blockForPenaltyEnd = block.number.add(blocksNumber);
        emit EnabledTrading();
    }

    // Update fee wallet
    function UpdateFeeWallet(address payable wallet) public onlyOwner() {
        _feeWallet = wallet;
        _isExcludedFromFee[_feeWallet] = true;
    }
    
    // Change BNB swap and liquify functionality status
    function SetSwapLiquifyEnabled(bool status) public onlyOwner {
        _swapAndLiquifyEnabled = status;

        emit SwapAndLiquifyEnabledUpdated(status);
    }

    // Change blacklisting funcionality status
    function ChangeBlacklistFilterStatus(bool status) public onlyOwner {
        _blacklistActive = status;
         emit BlacklistFilterStatusUpdated(status);
    } 

    // Set fees for buy and sell
    function SetFees(uint256 buyFee, uint256 sellFee) external onlyOwner() {
        require((buyFee + sellFee) <= _maximumPossibleFee, string.concat("Viral: Fee is too high, the sum of sell and buy fee must be maximum ", Strings.toString(_maximumPossibleFee), "%!"));
        _sellFee = sellFee;
        _buyFee = buyFee;
    }

    // Option to enable/disable fee for standard transfer calls
    function SetTransfersFeesStatus(bool status) external onlyOwner {
        _noFeeToTransfer = status;
    }

    // Set the amount at which the automatic swap will occur
    function SetSwapTokensAtAmount(uint256 newAmount) public onlyOwner {
        uint256 newAmountConverted = newAmount.mul(10 ** _decimals);
        require(newAmountConverted >= _maxTransactionAmount, "Viral: Atuomatic swap amount cannot be equal or over maximum transaction amount!");
  	    _swapTokensAtAmount = newAmountConverted;
    }
    
    // Add wallets list to blacklist, comma separated
    function AddWalletsToBlacklist(address[] calldata addresses) external onlyOwner {
        uint256 startGas;
        uint256 gasUsed;

        for (uint256 i; i < addresses.length; ++i) {
            if(gasUsed < gasleft()) {
                startGas = gasleft();
                if(!_isBlacklisted[addresses[i]]){
                    _isBlacklisted[addresses[i]] = true;
                }
                gasUsed = startGas - gasleft();
            }
        }
    }

    // Remove wallets list from blacklist, comma separated
    function RemoveWalletsFromBlacklist(address[] calldata addresses) external onlyOwner {
        uint256 startGas;
        uint256 gasUsed;

        for (uint256 i; i < addresses.length; ++i) {
            if(gasUsed < gasleft()) {
                startGas = gasleft();
                if(_isBlacklisted[addresses[i]]){
                    _isBlacklisted[addresses[i]] = false;
                }
                gasUsed = startGas - gasleft();
            }
        }
    }

    // Withdraw BNB if stuck or someone sends it to the contract address
    function WithdrawStuckBNB() external onlyOwner {
        bool success;
        (success,) = address(msg.sender).call{value: address(this).balance}("");
    }

    // Set the maximum tokens amount for each transaction
    function SetMaxTransactionAmount(uint256 maximumAmount) external onlyOwner() {
        _maxTransactionAmount =  maximumAmount.mul(10 ** _decimals);
    } 

    // Remove random tokens from the contract
    function RemoveRandomTokens(address randomTokenAddress, address wallet, uint256 tokensNumber) public onlyOwner returns(bool _sent) {
        require(randomTokenAddress != address(this), "Viral: Can't remove native token!");
        uint256 randomBalance = IBEP20(randomTokenAddress).balanceOf(address(this));
        if (tokensNumber > randomBalance) {
            tokensNumber = randomBalance;
        }
        _sent = IBEP20(randomTokenAddress).transfer(wallet, tokensNumber);
    }
}