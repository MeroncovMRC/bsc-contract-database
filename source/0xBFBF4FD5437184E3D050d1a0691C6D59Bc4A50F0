{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"},"ERC20Token.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.6;\r\n\r\nimport { ERC20 } from \"./ERC20.sol\";\r\nimport { TransactionThrottler } from \"./TransactionThrottler.sol\";\r\n\r\ncontract ERC20Token is ERC20, TransactionThrottler {\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals_,\r\n        uint256 supply\r\n    ) ERC20(name, symbol) {\r\n        _decimals = decimals_;\r\n        _mint(msg.sender, supply);\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override transactionThrottler(sender, recipient, amount) {\r\n        super._transfer(sender, recipient, amount);\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.6;\r\n\r\ncontract OwnableData {\r\n    address public owner;\r\n    address public pendingOwner;\r\n}\r\n\r\ncontract Ownable is OwnableData {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev `owner` defaults to msg.sender on construction.\r\n     */\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\r\n     *      Can only be invoked by the current `owner`.\r\n     * @param _newOwner Address of the new owner.\r\n     * @param _direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\r\n     */\r\n    function transferOwnership(address _newOwner, bool _direct) external onlyOwner {\r\n        if (_direct) {\r\n            require(_newOwner != address(0), \"zero address\");\r\n\r\n            emit OwnershipTransferred(owner, _newOwner);\r\n            owner = _newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            pendingOwner = _newOwner;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Needs to be called by `pendingOwner` to claim ownership.\r\n     */\r\n    function claimOwnership() external {\r\n        address _pendingOwner = pendingOwner;\r\n        require(msg.sender == _pendingOwner, \"caller != pending owner\");\r\n\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the Owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"TransactionThrottler.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.6;\r\n\r\nimport { Ownable } from \"./Ownable.sol\";\r\n\r\ncontract TransactionThrottler is Ownable {\r\n    bool private _initlialized;\r\n    bool private _restrictionActive;\r\n    uint256 private _tradingStart;\r\n    uint256 private _maxTransferAmount;\r\n    uint256 private constant _delayBetweenTx = 10;\r\n    mapping(address =\u003e bool) private _isWhitelisted;\r\n    mapping(address =\u003e bool) private _isUnthrottled;\r\n    mapping(address =\u003e uint256) private _previousTx;\r\n\r\n    event TradingTimeChanged(uint256 tradingTime);\r\n    event RestrictionActiveChanged(bool active);\r\n    event MaxTransferAmountChanged(uint256 maxTransferAmount);\r\n    event MarkedWhitelisted(address indexed account, bool isWhitelisted);\r\n    event MarkedUnthrottled(address indexed account, bool isUnthrottled);\r\n\r\n    function initAntibot() external onlyOwner() {\r\n        require(!_initlialized, \"Protection: Already initialized\");\r\n        _initlialized = true;\r\n        _isUnthrottled[owner] = true;\r\n        _tradingStart = 1646152748;\r\n        _maxTransferAmount = 50_000 * 10**18;\r\n        _restrictionActive = true;\r\n    }\r\n\r\n    function setTradingStart(uint256 _time) external onlyOwner() {\r\n        require(_tradingStart \u003e block.timestamp, \"Protection: To late\");\r\n        _tradingStart = _time;\r\n        emit TradingTimeChanged(_tradingStart);\r\n    }\r\n\r\n    function setMaxTransferAmount(uint256 _amount) external onlyOwner() {\r\n        _maxTransferAmount = _amount;\r\n        emit MaxTransferAmountChanged(_maxTransferAmount);\r\n    }\r\n\r\n    function setRestrictionActive(bool _active) external onlyOwner() {\r\n        _restrictionActive = _active;\r\n        emit RestrictionActiveChanged(_restrictionActive);\r\n    }\r\n\r\n    function unthrottleAccount(address _account, bool _unthrottled) external onlyOwner() {\r\n        require(_account != address(0), \"Zero address\");\r\n        _isUnthrottled[_account] = _unthrottled;\r\n        emit MarkedUnthrottled(_account, _unthrottled);\r\n    }\r\n\r\n    function isUnthrottled(address account) external view returns (bool) {\r\n        return _isUnthrottled[account];\r\n    }\r\n\r\n    function whitelistAccount(address _account, bool _whitelisted) external onlyOwner() {\r\n        require(_account != address(0), \"Zero address\");\r\n        _isWhitelisted[_account] = _whitelisted;\r\n        emit MarkedWhitelisted(_account, _whitelisted);\r\n    }\r\n\r\n    function isWhitelisted(address account) external view returns (bool) {\r\n        return _isWhitelisted[account];\r\n    }\r\n\r\n    modifier transactionThrottler(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) {\r\n        if (_restrictionActive \u0026\u0026 !_isUnthrottled[recipient] \u0026\u0026 !_isUnthrottled[sender]) {\r\n            require(block.timestamp \u003e= _tradingStart, \"Protection: Transfers disabled\");\r\n\r\n            if (_maxTransferAmount \u003e 0) {\r\n                require(amount \u003c= _maxTransferAmount, \"Protection: Limit exceeded\");\r\n            }\r\n\r\n            if (!_isWhitelisted[recipient]) {\r\n                require(_previousTx[recipient] + _delayBetweenTx \u003c= block.timestamp, \"Protection: 30 sec/tx allowed\");\r\n                _previousTx[recipient] = block.timestamp;\r\n            }\r\n\r\n            if (!_isWhitelisted[sender]) {\r\n                require(_previousTx[sender] + _delayBetweenTx \u003c= block.timestamp, \"Protection: 30 sec/tx allowed\");\r\n                _previousTx[sender] = block.timestamp;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n}"}}