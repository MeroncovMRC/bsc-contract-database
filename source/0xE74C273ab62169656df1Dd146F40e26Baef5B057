{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./SafeMath.sol\";\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata{\r\n    mapping (address =\u003e uint256) private _balances;\r\n\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /* MiRAI ADDS START */\r\n    \r\n    uint256 internal _nonce = 0; // variabile che determina il nonce dell\u0027operazione PRIVATE\r\n    \r\n    uint256 internal _p = 0; // variabile dove vengono accumulate le rewards da distribuire agli hodlers PRIVATE\r\n    \r\n    uint256 internal _b = 0; // variabile che tiene conto solo degli importi relativi al calcolo dei rewards PRIVATE\r\n    \r\n    mapping (uint256 =\u003e Values) internal _listHistory; // lista che tiene in memoria tutti i balances per ogni nonce \r\n    \r\n    mapping (address =\u003e uint256) internal _du; // L\u0027ultimo nonce dell\u0027utente o nel caso di un nuovo utente sarà il nonce i registrazione\r\n    \r\n    uint256 internal _maxRedeemRecords = 1000; \r\n    \r\n    //uint256 public _lastRedeemBalance = 0; // somma dei total reward da memorizzare nella variabile dei nonce\r\n    \r\n    //mapping (uint256 =\u003e Values) public _status; // mapping con memorizzata tutta la storia delle transazioni legate al _nonce come Chiave PRIVATE\r\n    \r\n    // // mapping contenente l\u0027ultimo nonce con il quale l\u0027indirizzo ha operato PRIVATE\r\n    \r\n    mapping (address =\u003e bool) internal _noTransferFee; // mapping che non paga fee del 10% e non riceve rewards \r\n    \r\n    address internal _developers; // indirizzo degli sviluppatori\r\n    \r\n    address internal _swappingContractAddress; // indirizzo di contratto di swap e liquidity\r\n    \r\n    struct Values{\r\n        uint256 P;\r\n        uint256 B;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    function _claim(address owner) internal returns (uint256){ // return del balance effettivo dell\u0027utente una volta fatto l\u0027update\r\n        // operazione di claim deve:\r\n        // - togliere da totalRewardsAmount\r\n        // - accreditare a _balances[owner]\r\n        // - accreditare a _totalBalancesForRewardCalc\r\n        // - atribuire l\u0027ultimo nonce all\u0027 owner \r\n        \r\n        if(_noTransferFee[owner]) // se è un indirizzo zero fee deve aggiornare l\u0027ultimo nonce\r\n        {\r\n            _du[owner] = _nonce;\r\n            return _balances[owner];\r\n        }\r\n        \r\n        if(_du[owner] == 0) {\r\n            _du[owner] = _nonce;\r\n            return _balances[owner];\r\n        }\r\n        \r\n        if(_du[owner] \u003c _nonce){\r\n            uint256 rw = _rewards(owner);\r\n            if(rw\u003e0){\r\n                _balances[owner] += rw;\r\n                _b += rw;\r\n                _du[owner] = _nonce;\r\n            }\r\n        }\r\n        \r\n        return _balances[owner];\r\n    }\r\n    \r\n    function manualClaim() payable public returns (uint256){ // return del balance effettivo dell\u0027utente una volta fatto l\u0027update\r\n        // operazione di claim deve:\r\n        // - togliere da totalRewardsAmount\r\n        // - accreditare a _balances[owner]\r\n        // - accreditare a _totalBalancesForRewardCalc\r\n        // - atribuire l\u0027ultimo nonce all\u0027 owner \r\n        require(msg.value \u003e= 0.005 ether, \"Require 0.005 or more\");\r\n        address owner = msg.sender;\r\n        if(_noTransferFee[owner]) // se è un indirizzo zero fee deve aggiornare l\u0027ultimo nonce\r\n        {\r\n            _du[owner] = _nonce;\r\n            return _balances[owner];\r\n        }\r\n        \r\n        if(_du[owner] == 0) {\r\n            _du[owner] = _nonce;\r\n            return _balances[owner];\r\n        }\r\n        \r\n        if(_du[owner] \u003c _nonce){\r\n            uint256 rw = _rewards(owner);\r\n            if(rw\u003e0){\r\n                _balances[owner] += rw;\r\n                _b += rw;\r\n                _du[owner] = _nonce;\r\n            }\r\n        }\r\n        \r\n        return _balances[owner];\r\n    }\r\n    \r\n    function _rewards(address owner) internal view returns (uint256){ // PRIVATE\r\n        if(_du[owner] == 0) return 0; // se l\u0027indirizzo è con nonce zero è un indirizzo che non ha fatto operazioni\r\n        if(_noTransferFee[owner]) return 0; // se l\u0027indirizzo è quello di un no fee le rewards sono zero\r\n        \r\n        uint256 _ownerRewards = 0;\r\n        uint256 lastRedeem = _du[owner];\r\n        if(_nonce.sub(lastRedeem) \u003e _maxRedeemRecords){\r\n            lastRedeem = _nonce.sub(_maxRedeemRecords);\r\n        }\r\n        \r\n        for(uint256 i = (lastRedeem.add(1)); i\u003c=_nonce; i++){\r\n            if(_listHistory[i].B \u003e 0){\r\n                uint256 x = _balances[owner].mul(_listHistory[i].P).div(_listHistory[i].B);\r\n                _ownerRewards += x;\r\n            }\r\n        }\r\n        return _ownerRewards;\r\n    }\r\n    \r\n    function _updateListHistory(uint256 totalBalance, uint256 thisReward) internal {\r\n        _nonce += 1;\r\n        \r\n        Values memory nV;\r\n        nV.P = thisReward;\r\n        nV.B = totalBalance;\r\n        \r\n        _listHistory[_nonce] = nV;\r\n    }\r\n    \r\n    /* MiRAI ADDS END */\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account].add(_rewards(account));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual{ // Mod. Add Modifier\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        \r\n        _claim(sender); // faccio il claim delle Rewards del sender\r\n        _claim(recipient); // faccio il claim delle Rewards del ricevente\r\n        _claim(_developers); // faccio il claim dell account dei developers\r\n        _claim(_swappingContractAddress); //faccio il claim dello swap\r\n        \r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] -= amount;\r\n        \r\n        \r\n        if(_noTransferFee[sender]){\r\n            _balances[recipient] += amount;\r\n            if(!_noTransferFee[recipient]) {\r\n                _b += amount; \r\n            }\r\n        }\r\n        else{\r\n            /* \r\n            Percentuali di distribuzione:\r\n            Pagamento fee Totale = 10%, distribuite in:\r\n            - 2% Fee Holders\r\n            - 1.5% wallet di sviluppo\r\n            - 2.5% burn\r\n            - 4% Swap del 2% in BNB e aggiunta di liquidity su Pancake (address della coppia di swap)\r\n            */\r\n            _b -= amount; // tolgo l\u0027ammontare della variabile totale delle fee\r\n            \r\n            uint256 recipientAmount = amount.mul(90000000).div(100000000);\r\n            uint256 developersAmount = amount.mul(1500000).div(100000000);\r\n            _p = amount.mul(2000000).div(100000000); // reward che va nella lista\r\n            uint256 swap = amount.mul(4000000).div(100000000);\r\n            \r\n            _balances[recipient] += recipientAmount; // amount al ricevente\r\n            _balances[_developers] += developersAmount; // amount al ricevente\r\n            _balances[_swappingContractAddress] += swap; // amount al contract address che verrà utilizzato per spostare le rewards\r\n            \r\n            uint256 newAdd = recipientAmount.add(developersAmount);\r\n            _b += newAdd; // aggiungo ai balances totali\r\n            \r\n            _updateListHistory( _b, _p); // aggiornamento della lista\r\n            \r\n            // BURN\r\n            uint256 burn = amount.sub(recipientAmount).sub(developersAmount).sub(_p).sub(swap);\r\n            _totalSupply -= burn;\r\n            \r\n        }\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"Mirai.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.0;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./MultiManager.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract Mirai is ERC20, Multimanager{\r\n    /* \r\n        Percentuali di distribuzione:\r\n        Pagamento fee Totale = 10%, distribuite in:\r\n        - 2% Fee Holders\r\n        - 1.5% wallet di sviluppo\r\n        - 2.5% burn\r\n        - 4% Swap del 2% in BNB e aggiunta di liquidity su Pancake (address della coppia di swap)\r\n    */\r\n    \r\n    using SafeMath for uint256;\r\n    bool private isBurned = false; // autorizza un solo burn per la chiamata alla funzione BURN da 300 kkk\r\n    uint256 private _deployTimeStamp = 0; // serve a memorizzare la data di deploy per autorizzare il burn a un giorno di differenza\r\n\r\n    constructor(address developers) ERC20(\"Mirai\", \"MIRAI\" ) {\r\n        _updateListHistory(_b,_p);\r\n        _swappingContractAddress = address(this);\r\n        \r\n        _claim(address(this));\r\n        _noTransferFee[address(this)]=true;\r\n        _mint(address(this), 300000000000 * (10 ** uint256(decimals())));\r\n        \r\n        _claim(msg.sender);\r\n        _noTransferFee[msg.sender]=true; // l\u0027indirizzo contratto non paga e non riceve le fee del 10%\r\n        _mint(msg.sender, 700000000000 * (10 ** uint256(decimals())));\r\n        \r\n        _developers = developers;\r\n        _claim(_developers);\r\n        _deployTimeStamp = block.timestamp;\r\n        \r\n    } \r\n    \r\n    /* FUNZIONE PUBBLICA DI BURN DI 300 KKK DI TOKENS ATTIVABILE SOLO DOPO 1 GIORNO DAL DEPLOY */\r\n    function burn() external {\r\n        require(block.timestamp \u003e= (_deployTimeStamp + 1 days), \"Burn date not reached\"); // prod\r\n        //require(block.timestamp \u003e= (_deployTimeStamp + 60), \"Burn date not reached\"); // dev\r\n        require(!isBurned, \"Amount already burned\");\r\n        _burn(address(this), 300000000000 * (10 ** uint256(decimals())));\r\n        isBurned = true;\r\n    }\r\n    \r\n    /* FUNZIONE PUBBLICA CHE RESTITUISCE L\u0027ATTUALE VALORE DEL NONCE */\r\n    function returnNonce() public view returns(uint256){\r\n        return _nonce;\r\n    }\r\n    \r\n    /* FUNZIONE PUBBLICA CHE RESTITUISCE DA QUANTO NON VIENE ESEGUITO UN CLAIM */\r\n    function historyClaimDifference(address owner) public view returns(uint256){\r\n        if (_du[owner]==0) return 0;\r\n        return _nonce.sub(_du[owner]); \r\n    }\r\n    \r\n    /* INSERISCE O RIMUOVE UN INDIRIZZO DAL PAGAMENTO DELLA TRANSFER FEE */\r\n    function _addInNoTransferFee(address owner)external onlyManager{\r\n        require(!_noTransferFee[owner]);\r\n        _claim(owner);\r\n        _noTransferFee[owner]=true;\r\n    }\r\n    function _removeInNoTransferFee(address owner)external onlyManager{\r\n        require(_noTransferFee[owner]);\r\n        _claim(owner);\r\n        _noTransferFee[owner]=false;\r\n    }\r\n    \r\n    function _claimContract() external onlyManager returns(bool){\r\n        _claim(address(this));\r\n        return true;\r\n    }\r\n    \r\n    /* MODIFICA IL NUMERO MASSIMO DI RECORDS CHE VERRANNO ESAMINATI PER IL CLAIM - SIA AUTOMATICO CHE MANUALE - */\r\n    function _changeRewardsMaxRecords(uint256 maxRecords) external onlyManager returns(uint256){\r\n        require(maxRecords \u003e 10, \"Required over 10\");\r\n        _maxRedeemRecords = maxRecords;\r\n        return _maxRedeemRecords;\r\n    }\r\n    \r\n    /* FUNZIONI DI TRASFERIMENTO DAL CONTRATTO STESSO VERSO ALTRI INDIRIZZI DI BNB, MIRAI E TUTTI GLI ALTRI TOKENS ERC20 */\r\n    function _transferBNB(address payable _to, uint256 amount) public onlyManager{\r\n        _to.transfer(amount);\r\n    }\r\n    function _transferMIRAIToken(address payable _to, uint256 amount) public onlyManager{\r\n        ERC20(address(this)).transfer(_to, amount);\r\n    }\r\n    function _transferAllTokensContracts(ERC20 _token, address payable _to, uint256 amount) public onlyManager{\r\n        _token.transfer(_to, amount);\r\n    }\r\n    \r\n}\r\n"},"MultiManager.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.0;\r\n\r\ncontract Multimanager {\r\n    \r\n    ////////////////////////////////////////\r\n    // MANAGER VARIABLES //\r\n    mapping(address =\u003e bool) internal managers; \r\n    address[] internal managersArray; \r\n    address public deployer;\r\n    string[] internal messagesArray;\r\n    \r\n    ////////////////////////////////////////                               \r\n    // CONSTRUCTOR //  \r\n    constructor() {\r\n        managers[msg.sender] = true;\r\n        managersArray.push(msg.sender);\r\n        deployer = msg.sender;\r\n    }\r\n    \r\n    function addManagers(address newManagerAddress) public virtual onlyManager{ // Funzione per aggiungere owners\r\n        require(!managers[newManagerAddress]); \r\n        \r\n        managers[newManagerAddress] = true;\r\n        managersArray.push(newManagerAddress);\r\n    }\r\n    \r\n    function deleteManager(address managerAddress) public virtual onlyManager{ // rimuovere un manager da un array\r\n        if(managerAddress == deployer)\r\n        {\r\n            revert();\r\n        }\r\n        \r\n        require(managers[managerAddress], \"Not deleted! Manager not present\");\r\n        require(managersArray.length\u003e1, \"The contract requires at least one manager\"); \r\n        \r\n        \r\n        delete managers[managerAddress]; // lo elimina dalla maps\r\n        \r\n        //remove from array\r\n        for(uint i = 0; i \u003c managersArray.length; i++)\r\n        {\r\n            if(managersArray[i] == managerAddress)\r\n            {\r\n                delete managersArray[i];\r\n                //managersArray.length--;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function viewManagers() public view virtual returns(address[] memory){\r\n        return managersArray;\r\n    }\r\n    \r\n    modifier onlyManager() { // permette operazione solo ai managers\r\n        require(managers[msg.sender], \"this is not manager\");\r\n        _;\r\n    }\r\n    \r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\n\r\nlibrary SafeMath\r\n{\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c \u003e= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b \u003c= a, errorMessage);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tif (a == 0) return 0;\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b \u003e 0, errorMessage);\r\n\t\treturn a / b;\r\n\t}\r\n\t\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\t\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}"}}