{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"HyperDeFi.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.8.10;\r\n\r\nimport \"./HyperDeFiToken.sol\";\r\n\r\n\r\ncontract HyperDeFi is HyperDeFiToken {\r\n    function getMetadata() public view\r\n        returns (\r\n            string[3]   memory tokenNames,\r\n            string[3]   memory tokenSymbols,\r\n            uint8[3]    memory tokenDecimals,\r\n            uint256[3]  memory tokenPrices,\r\n            uint256[9]  memory supplies,\r\n            address[10] memory accounts,\r\n\r\n            uint256 holders,\r\n            uint256 usernames\r\n        )\r\n    {\r\n        tokenNames[0]     = _name;\r\n        tokenSymbols[0]   = _symbol;\r\n        tokenDecimals[0]  = _decimals;\r\n\r\n        (tokenNames[1], tokenSymbols[1], tokenDecimals[1]) = BUFFER.metaWRAP();\r\n        (tokenNames[2], tokenSymbols[2], tokenDecimals[2]) = BUFFER.metaUSD();\r\n\r\n        tokenPrices[0] = BUFFER.priceWRAP2USD(); // WRAP      =\u003e USD\r\n        tokenPrices[1] = _priceToken2WRAP();     // HyperDeFi =\u003e WRAP\r\n        tokenPrices[2] = _priceToken2USD();      // HyperDeFi =\u003e USD\r\n\r\n        // supplies\r\n        supplies[0] = TOTAL_SUPPLY_CAP;                // cap\r\n        supplies[1] = TOTAL_SUPPLY_CAP - _totalSupply; // gate\r\n\r\n        supplies[2] = _totalSupply;                 // totalSupply\r\n        supplies[3] = _totalFarm;                   // totalTax\r\n        supplies[4] = balanceOf(address(DEX_PAIR)); // liquidity\r\n        supplies[5] = balanceOf(address(BUFFER));   // buffer\r\n        supplies[6] = balanceOf(FARM);              // farm\r\n        supplies[7] = balanceOf(FOMO);              // fomo\r\n        supplies[8] = balanceOf(BLACK_HOLE);        // dead\r\n\r\n        // accounts\r\n        accounts[0] = address(DEX);      // DEX\r\n        accounts[1] = address(WRAP);     // WRAP\r\n        accounts[2] = BUFFER.USD();      // USD\r\n        accounts[3] = address(DEX_PAIR); // pair\r\n        accounts[4] = address(BUFFER);   // BUFFER\r\n        accounts[5] = address(IDO);      // IDO\r\n        accounts[6] = FARM;              // farm\r\n        accounts[7] = FOMO;              // fomo\r\n        accounts[8] = owner();           // fund\r\n        accounts[9] = BLACK_HOLE;        // burn\r\n\r\n        //\r\n        holders = _holders.length;\r\n        usernames = _totalUsername;\r\n    }\r\n\r\n    function getGlobal() public view\r\n        returns (\r\n            address fomoNext,\r\n\r\n            uint16[10]  memory uint16s,\r\n            uint256[19] memory uint256s,\r\n\r\n            uint8[6] memory takerTax,\r\n            uint8[6] memory makerTax,\r\n            uint8[6] memory whaleTax,\r\n            uint8[6] memory robberTax,\r\n            \r\n            address[] memory flats,\r\n            address[] memory slots\r\n        )\r\n    {\r\n        fomoNext   = _fomoNextAccount;\r\n\r\n        uint16s[0] = WHALE_NUMERATOR;\r\n        uint16s[1] = WHALE_DENOMINATOR;\r\n        uint16s[2] = ROBBER_PERCENTAGE;\r\n        uint16s[3] = AUTO_SWAP_NUMERATOR_MIN; // autoSwapNumeratorMin\r\n        uint16s[4] = AUTO_SWAP_NUMERATOR_MAX; // autoSwapNumeratorMax\r\n        uint16s[5] = AUTO_SWAP_DENOMINATOR;   // autoSwapDenominator\r\n        uint16s[6] = FOMO_PERCENTAGE;         // fomoPercentage\r\n\r\n        uint16s[7] = BONUS[0]; // BONUS Lv.0\r\n        uint16s[8] = BONUS[1]; // BONUS Lv.1\r\n        uint16s[9] = BONUS[2]; // BONUS Lv.2\r\n\r\n        uint256s[0] = TIMESTAMP_LAUNCH; // launch timestamp\r\n        uint256s[1] = INIT_LIQUIDITY;   // init   liquidity\r\n        uint256s[2] = DIST_AMOUNT;      // dist   amount\r\n\r\n        uint256s[3] = AIRDROP_THRESHOLD;     // airdrop threshold\r\n        uint256s[4] = _getWhaleThreshold();  // whale   threshold\r\n        uint256s[5] = _getRobberThreshold(); // robber  threshold\r\n\r\n        uint256s[6] = _getAutoSwapAmountMin();  // autoSwapAmountMin\r\n        uint256s[7] = _getAutoSwapAmountMax();  // autoSwapAmountMax\r\n\r\n        uint256s[8] = _getFomoAmount();     // fomo amount\r\n        uint256s[9] = _fomoTimestamp;       // fomo timestamp\r\n        uint256s[10] = FOMO_TIMESTAMP_STEP; // fomo timestampStep\r\n\r\n\r\n        takerTax[0] = TAKER_TAX.farm;\r\n        takerTax[1] = TAKER_TAX.airdrop;\r\n        takerTax[2] = TAKER_TAX.fomo;\r\n        takerTax[3] = TAKER_TAX.liquidity;\r\n        takerTax[4] = TAKER_TAX.fund;\r\n        takerTax[5] = TAKER_TAX.destroy;\r\n\r\n        makerTax[0] = MAKER_TAX.farm;\r\n        makerTax[1] = MAKER_TAX.airdrop;\r\n        makerTax[2] = MAKER_TAX.fomo;\r\n        makerTax[3] = MAKER_TAX.liquidity;\r\n        makerTax[4] = MAKER_TAX.fund;\r\n        makerTax[5] = MAKER_TAX.destroy;\r\n\r\n        whaleTax[0] = WHALE_TAX.farm;\r\n        whaleTax[1] = WHALE_TAX.airdrop;\r\n        whaleTax[2] = WHALE_TAX.fomo;\r\n        whaleTax[3] = WHALE_TAX.liquidity;\r\n        whaleTax[4] = WHALE_TAX.fund;\r\n        whaleTax[5] = WHALE_TAX.destroy;\r\n        \r\n        robberTax[0] = ROBBER_TAX.farm;\r\n        robberTax[1] = ROBBER_TAX.airdrop;\r\n        robberTax[2] = ROBBER_TAX.fomo;\r\n        robberTax[3] = ROBBER_TAX.liquidity;\r\n        robberTax[4] = ROBBER_TAX.fund;\r\n        robberTax[5] = ROBBER_TAX.destroy;\r\n\r\n        flats = _flats;\r\n        slots = _slots;\r\n\r\n        uint256s[11] = IDO_DEPOSIT_MAX;\r\n        uint256s[12] = IDO_DEPOSIT_CAP;\r\n        uint256s[13] = IDO_TIMESTAMP_FROM;\r\n        uint256s[14] = IDO_TIMESTAMP_TO;\r\n        uint256s[15] = INIT_LIQUIDITY;\r\n        uint256s[16] = _timestampLiquidityCreated;\r\n        uint256s[17] = balanceOf(address(IDO));\r\n        uint256s[18] = IDO.getDepositTotal();\r\n    }\r\n\r\n    function getAccount(address account) public view\r\n        returns (\r\n            string memory username,\r\n            bool[5] memory bools,\r\n            uint256[10] memory uint256s\r\n        )\r\n    {\r\n        username = _username[account];\r\n\r\n        bools[0] = _isHolder[account];                        // isHolder\r\n        bools[1] = balanceOf(account) \u003e _getWhaleThreshold(); // isWhale\r\n        bools[2] = _isFlat[account];                          // isFlat\r\n        bools[3] = _isSlot[account];                          // isSlot\r\n\r\n        uint256s[0] = balanceOf(account);      // balance\r\n        uint256s[1] = harvestOf(account);      // harvest\r\n        uint256s[2] = _totalHarvest[account];  // totalHarvest\r\n        uint256s[3] = _totalFarmSnap[account]; // totalTaxSnap\r\n\r\n        uint256s[4] = _couponUsed[account]; // coupon used\r\n        uint256s[5] = _coupon[account];     // coupon\r\n        uint256s[6] = _visitors[account];   // visitors\r\n        uint256s[7] = account.balance;      // BNB balance\r\n        \r\n        // amountBNB, amountToken, redeemed\r\n        (uint256s[8], uint256s[9], bools[4]) = IDO.getAccount(account);\r\n    }\r\n\r\n    function getCoupon(uint256 coupon) public view\r\n        returns (\r\n            bool valid,\r\n            uint256 visitors\r\n        )\r\n    {\r\n        address inviter = _inviter[coupon];\r\n        \r\n        valid = inviter != address(0);\r\n        if (valid) {\r\n            visitors = _visitors[inviter];\r\n        }\r\n    }\r\n\r\n    function getAccountByUsername(string calldata value) public view\r\n        returns (\r\n            address account,\r\n            bool[5] memory bools,\r\n            uint256[10] memory uint256s\r\n        )\r\n    {\r\n        account = _username2address[value];\r\n\r\n        bools[0] = _isHolder[account];                        // isHolder\r\n        bools[1] = balanceOf(account) \u003e _getWhaleThreshold(); // isWhale\r\n        bools[2] = _isFlat[account];                          // isFlat\r\n        bools[3] = _isSlot[account];                          // isSlot\r\n\r\n        uint256s[0] = balanceOf(account);     // balance\r\n        uint256s[1] = harvestOf(account);     // harvest\r\n        uint256s[2] = _totalHarvest[account]; // totalHarvest\r\n        uint256s[3] = _totalFarmSnap[account]; // totalTaxSnap\r\n\r\n        uint256s[4] = _couponUsed[account]; // coupon used\r\n        uint256s[5] = _coupon[account];     // coupon\r\n        uint256s[6] = _visitors[account];   // visitors\r\n        uint256s[7] = account.balance;      // BNB balance\r\n        \r\n        // amountBNB, amountToken, redeemed\r\n        (uint256s[8], uint256s[9], bools[4]) = IDO.getAccount(account);\r\n    }\r\n\r\n    function getHolders(uint256 offset) public view\r\n        returns (\r\n            uint256[250] memory ids,\r\n            address[250] memory holders,\r\n            string[250]  memory usernames,\r\n            uint256[250] memory balances,\r\n            bool[250]    memory isWhales\r\n        )\r\n    {\r\n        uint8 counter;\r\n        for (uint256 i = offset; i \u003c _holders.length; i++) {\r\n            counter++;\r\n            if (counter \u003e 250) break;\r\n            ids[i] = i;\r\n            holders[i] = _holders[i];\r\n            usernames[i] = _username[_holders[i]];\r\n            balances[i] = balanceOf(holders[i]);\r\n            isWhales[i] = balanceOf(holders[i]) \u003e _getWhaleThreshold();\r\n        }\r\n    }\r\n}\r\n"},"HyperDeFiBuffer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.8.10;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2Pair.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./IHyperDeFi.sol\";\r\nimport \"./IHyperDeFiBuffer.sol\";\r\n\r\n\r\ncontract HyperDeFiBuffer is Context, IHyperDeFiBuffer {\r\n    address            private constant  _BLACK_HOLE = address(0xdead);\r\n    IHyperDeFi         private constant  _TOKEN      = IHyperDeFi(0x99999999f678F56beF0Da5EB96F4c1300Cf8D69a);\r\n    IUniswapV2Router02 private immutable _DEX;\r\n    IERC20             private immutable _USD;\r\n    IERC20             private immutable _WRAP;\r\n    uint8              private           _decimals;\r\n\r\n\r\n    constructor () {\r\n        _decimals = _TOKEN.decimals();\r\n\r\n        address dex;\r\n        address usd;\r\n\r\n        (dex, usd) = _TOKEN.getBufferConfigs();\r\n        \r\n        _DEX          = IUniswapV2Router02(dex);\r\n        _USD          = IERC20(usd);\r\n        _WRAP         = IERC20(_DEX.WETH());\r\n    }\r\n\r\n    function USD() public view returns (address) {\r\n        return address(_WRAP);\r\n    }\r\n\r\n    function metaUSD() public view returns (string memory name, string memory symbol, uint8 decimals) {\r\n        name = _USD.name();\r\n        symbol = _USD.symbol();\r\n        decimals = _USD.decimals();\r\n    }\r\n\r\n    function metaWRAP() public view returns (string memory name, string memory symbol, uint8 decimals) {\r\n        name = _WRAP.name();\r\n        symbol = _WRAP.symbol();\r\n        decimals = _WRAP.decimals();\r\n    }\r\n\r\n    function priceToken2WRAP() public view returns (uint256 price) {\r\n        address[] memory path = new address[](2);\r\n        \r\n        path[0] = address(_TOKEN);\r\n        path[1] = address(_WRAP);\r\n        \r\n        price = _DEX.getAmountsOut(10 ** _decimals, path)[1];\r\n    }\r\n\r\n    function priceToken2USD() public view returns (uint256 price) {\r\n        address[] memory path = new address[](3);\r\n        \r\n        path[0] = address(_TOKEN);\r\n        path[1] = address(_WRAP);\r\n        path[2] = address(_USD);\r\n\r\n        price = _DEX.getAmountsOut(10 ** _decimals, path)[2];\r\n    }\r\n\r\n    function priceWRAP2USD() public view returns (uint256 price) {\r\n        address[] memory path = new address[](2);\r\n        \r\n        path[0] = address(_WRAP);\r\n        path[1] = address(_USD);\r\n\r\n        price = _DEX.getAmountsOut(1e18, path)[1];\r\n    }\r\n    \r\n    function swapIntoLiquidity(uint256 amount) external override {\r\n        require(_msgSender() == address(_TOKEN), \"Buffer: caller is not the `HyperDeFi` contract\");\r\n\r\n        // path\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(_TOKEN);\r\n        path[1] = address(_WRAP);\r\n\r\n        // swap half amount to WRAP\r\n        uint256 half = amount / 2;\r\n        _DEX.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            half,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        // add liquidity\r\n        uint256 WRAPBalance = _WRAP.balanceOf(address(this));\r\n        _WRAP.approve(address(_DEX), WRAPBalance);\r\n        _DEX.addLiquidity(\r\n            address(_TOKEN),\r\n            address(_WRAP),\r\n            _TOKEN.balanceOf(address(this)),\r\n            WRAPBalance,\r\n            0,\r\n            0,\r\n            _BLACK_HOLE,\r\n            block.timestamp\r\n        );\r\n\r\n        // swap remaining WRAP to HyperDeFi, then send to black-hole\r\n        uint256 WRAP0 = _WRAP.balanceOf(address(this));\r\n        if (0 \u003c WRAP0) {\r\n            path[0] = address(_WRAP);\r\n            path[1] = address(_TOKEN);\r\n            \r\n            uint256 amountSwap = _DEX.getAmountsOut(WRAP0, path)[1];\r\n            if (0 \u003c amountSwap) {\r\n                _DEX.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    WRAP0,\r\n                    0,\r\n                    path,\r\n                    _BLACK_HOLE,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"HyperDeFiIDO.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.8.10;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IHyperDeFi.sol\";\r\nimport \"./IHyperDeFiBuffer.sol\";\r\nimport \"./IHyperDeFiIDO.sol\";\r\n\r\n\r\ncontract HyperDeFiIDO is Context, IHyperDeFiIDO {\r\n    uint256 private immutable _AMOUNT_TOTAL;\r\n    uint256 private immutable _DEPOSIT_CAP;\r\n    uint256 private immutable _DEPOSIT_MAX;\r\n    uint32  private immutable _TIMESTAMP_FROM;\r\n    uint32  private immutable _TIMESTAMP_TO;\r\n\r\n    address            private immutable _BLACK_HOLE = address(0xdead);\r\n    IHyperDeFi         private immutable _TOKEN      = IHyperDeFi(0x99999999f678F56beF0Da5EB96F4c1300Cf8D69a);\r\n    IHyperDeFiBuffer   private immutable _BUFFER;\r\n    address[]          private           _founders;\r\n    uint8              private           _decimals;\r\n\r\n\r\n    uint256 private _depositTotal;\r\n\r\n    mapping (address =\u003e uint256) private _deposits;\r\n    mapping (address =\u003e bool)    private _redeemed;\r\n\r\n    event Deposit(address indexed account, uint256 amount);\r\n\r\n\r\n    constructor () {\r\n        _decimals = _TOKEN.decimals();\r\n\r\n        address buffer;\r\n        (_AMOUNT_TOTAL, _DEPOSIT_CAP, _DEPOSIT_MAX, _TIMESTAMP_FROM, _TIMESTAMP_TO, buffer) = _TOKEN.getIDOConfigs();\r\n\r\n        _BUFFER = IHyperDeFiBuffer(buffer);\r\n    }\r\n\r\n    // receive() external payable {\r\n    //     _deposit();\r\n    // }\r\n\r\n    // fallback() external payable {\r\n    //     _deposit();\r\n    // }\r\n\r\n    function depositBNB() external payable {\r\n        _deposit();\r\n    }\r\n\r\n    function redeem() external {\r\n        _redeem();\r\n    }\r\n\r\n    // price in WRAP\r\n    function priceToken2WRAP() public view returns (uint256 price) {\r\n        price = _depositTotal * 10 ** _decimals / _AMOUNT_TOTAL;\r\n    }\r\n\r\n    // price in USD\r\n    function priceToken2USD() public view returns (uint256 price) {\r\n        return priceToken2WRAP() * _BUFFER.priceWRAP2USD() / 1e18;\r\n    }\r\n\r\n    // founder\r\n    function isFounder(address account) public view returns (bool) {\r\n        return 0 \u003c _deposits[account];\r\n    }\r\n\r\n    // read\r\n    function getAccount(address account) public view \r\n        returns (\r\n            uint256 amountWRAP,\r\n            uint256 amountToken,\r\n            bool redeemed\r\n        )\r\n    {\r\n        amountWRAP  = _deposits[account];\r\n        amountToken = _getAmount(account);\r\n        redeemed    = _redeemed[account];\r\n    }\r\n\r\n    function getDepositTotal() public view returns (uint256) {\r\n        return _depositTotal;\r\n    }\r\n\r\n    // founders\r\n    function getFounders(uint256 offset) public view\r\n        returns (\r\n            uint256[250] memory ids,\r\n            address[250] memory founders,\r\n            uint256[250] memory wrapAmounts,\r\n            uint256[250] memory tokenAmounts\r\n        )\r\n    {\r\n        uint8 counter;\r\n        for (uint256 i = offset; i \u003c _founders.length; i++) {\r\n            counter++;\r\n            if (counter \u003e 250) break;\r\n            ids[i] = i;\r\n            founders[i] = _founders[i];\r\n            wrapAmounts[i] = _deposits[_founders[i]];\r\n            tokenAmounts[i] = _getAmount(_founders[i]);\r\n        }\r\n    }\r\n\r\n    // deposit\r\n    function _deposit() private {\r\n        require(0 \u003c msg.value, \"HyperDeFi IDO: deposit zero\");\r\n        require(block.timestamp \u003e _TIMESTAMP_FROM, \"HyperDeFi IDO: not started\");\r\n        require(!_TOKEN.isInitialLiquidityCreated(), \"HyperDeFi IDO: initial liquidity has already been created\");\r\n        require(_DEPOSIT_MAX \u003e _deposits[_msgSender()], \"HyperDeFi IDO: deposit max reached for the sender\");\r\n\r\n        uint256 amount = msg.value;\r\n\r\n        // DEPOSIT_MAX\r\n        if (_DEPOSIT_MAX \u003c amount + _deposits[_msgSender()]) {\r\n            amount = _DEPOSIT_MAX -_deposits[_msgSender()];\r\n            payable(_msgSender()).transfer(msg.value - amount);\r\n        }\r\n\r\n        // DEPOSIT_CAP\r\n        if (_DEPOSIT_CAP \u003c address(this).balance) {\r\n            amount = address(this).balance - _DEPOSIT_CAP;\r\n            payable(_msgSender()).transfer(address(this).balance - _DEPOSIT_CAP);\r\n        }\r\n\r\n        // deposit\r\n        _depositTotal += amount;\r\n        _deposits[_msgSender()] += amount;\r\n        emit Deposit(_msgSender(), amount);\r\n\r\n        if (_DEPOSIT_CAP \u003c= address(this).balance || _TIMESTAMP_TO \u003c block.timestamp) {\r\n            _TOKEN.createInitLiquidity{value: address(this).balance}();\r\n        }\r\n    }\r\n\r\n    // redeem\r\n    function _redeem() private {\r\n        require(_TOKEN.isInitialLiquidityCreated(), \"HyperDeFi IDO: initial liquidity not created\");\r\n        require(!_redeemed[_msgSender()], \"HyperDeFi IDO: caller has already redeemed\");\r\n        \r\n        _TOKEN.transfer(_msgSender(), _getAmount(_msgSender()));\r\n        \r\n        _redeemed[_msgSender()] = true;\r\n    }\r\n\r\n    // portion\r\n    function _getAmount(address account) private view returns (uint256) {\r\n        if (0 \u003c _depositTotal) {\r\n            return _AMOUNT_TOTAL * _deposits[account] / _depositTotal;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n"},"HyperDeFiToken.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.8.10;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2Pair.sol\";\r\nimport \"./IHyperDeFi.sol\";\r\nimport \"./IHyperDeFiBuffer.sol\";\r\nimport \"./IHyperDeFiIDO.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Math.sol\";\r\nimport \"./HyperDeFiTokenMetadata.sol\";\r\n\r\n\r\n/**\r\n * @dev DeFi Token\r\n */\r\ncontract HyperDeFiToken is Ownable, IHyperDeFi, HyperDeFiTokenMetadata {\r\n    using Math for uint256;\r\n\r\n    struct Percentage {\r\n        uint8 farm;\r\n        uint8 airdrop;\r\n        uint8 fomo;\r\n        uint8 liquidity;\r\n        uint8 fund;\r\n        uint8 destroy;\r\n    }\r\n\r\n    struct Snap {\r\n        uint256 totalSupply;\r\n        uint256 totalTax;\r\n    }\r\n\r\n    bool    private  _swapLock;\r\n    uint256 internal _totalSupply;\r\n    uint256 internal _distributed;\r\n    uint256 internal _totalFarm;\r\n    uint256 internal _totalUsername;\r\n    uint256 internal _fomoTimestamp;\r\n\r\n    address[] internal _flats;\r\n    address[] internal _slots;\r\n    address[] internal _funds;\r\n    address[] internal _holders;\r\n\r\n    // Resources\r\n    IHyperDeFiIDO      internal constant  IDO    = IHyperDeFiIDO(ADDRESS_IDO);\r\n    IHyperDeFiBuffer   internal constant  BUFFER = IHyperDeFiBuffer(ADDRESS_BUFFER);\r\n    IUniswapV2Router02 internal constant  DEX    = IUniswapV2Router02(ADDRESS_DEX);\r\n    IUniswapV2Factory  internal immutable DEX_FACTORY;\r\n    IUniswapV2Pair     internal immutable DEX_PAIR;\r\n    IERC20             internal immutable WRAP;\r\n\r\n    //\r\n    uint256 internal _initPrice;\r\n    uint256 internal _timestampLiquidityCreated;\r\n    address internal _fomoNextAccount;\r\n\r\n    // tax\r\n    Percentage internal TAKER_TAX  = Percentage(3, 1, 2, 5, 1, 3);\r\n    Percentage internal MAKER_TAX  = Percentage(3, 1, 1, 4, 1, 0);\r\n    Percentage internal WHALE_TAX  = Percentage(3, 1, 1, 5, 1, 19);\r\n    Percentage internal ROBBER_TAX = Percentage(3, 1, 1, 5, 1, 74);\r\n\r\n    mapping (address =\u003e uint256) internal _balance;\r\n    mapping (address =\u003e uint256) internal _totalHarvest;\r\n    mapping (address =\u003e uint256) internal _totalFarmSnap;\r\n    mapping (address =\u003e string)  internal _username;\r\n    mapping (address =\u003e bool)    internal _usernamed;\r\n    mapping (string  =\u003e address) internal _username2address;\r\n\r\n    mapping (address =\u003e uint256) internal _coupon;\r\n    mapping (uint256 =\u003e address) internal _inviter;\r\n    mapping (address =\u003e uint256) internal _couponUsed;\r\n    mapping (address =\u003e uint256) internal _visitors;\r\n\r\n    mapping (address =\u003e bool)    internal _isFlat;\r\n    mapping (address =\u003e bool)    internal _isSlot;\r\n    mapping (address =\u003e bool)    internal _isFund;\r\n    mapping (address =\u003e bool)    internal _isHolder;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) internal _allowances;\r\n\r\n    // enum\r\n    enum TX_TYPE {MINT, HARVEST, FLAT, TAKER, MAKER, WHALE, ROBBER}\r\n\r\n    // events\r\n    event TX(uint8 indexed txType, address indexed sender, address indexed recipient, uint256 amount, uint256 txAmount);\r\n    event SlotRegistered(address account);\r\n    event UsernameSet(address indexed account, string username);\r\n    event CouponVisitor(address inviter, address visitor);\r\n    event Airdrop(address indexed account, uint256 amount);\r\n    event Bonus(address indexed account, uint256 amount);\r\n    event Fund(address indexed account, uint256 amount);\r\n\r\n    //\r\n    modifier withSwapLock {\r\n        _swapLock = true;\r\n        _;\r\n        _swapLock = false;\r\n    }\r\n\r\n    //\r\n    constructor () {\r\n        WRAP        = IERC20(DEX.WETH());\r\n        DEX_FACTORY = IUniswapV2Factory(DEX.factory());\r\n        DEX_PAIR    = IUniswapV2Pair(DEX_FACTORY.createPair(address(WRAP), address(this)));\r\n        _registerFund(FOMO);\r\n        _registerFund(BLACK_HOLE);\r\n        _registerFund(address(BUFFER));\r\n        _registerFund(address(IDO));\r\n        _registerFund(address(this));\r\n        _registerFund(_msgSender());\r\n        _mint(BLACK_HOLE, BURN_AMOUNT);\r\n        _mint(address(IDO), IDO_AMOUNT);\r\n        _isHolder[owner()] = true;\r\n        _holders.push(owner());\r\n    }\r\n\r\n    function getIDOConfigs() public pure returns\r\n    (\r\n        uint256 IDOAmount,\r\n        uint256 IDODepositCap,\r\n        uint256 IDODepositMax,\r\n        uint32  IDOTimestampFrom,\r\n        uint32  IDOTimestampTo,\r\n\r\n        address buffer\r\n    ) {\r\n        IDOAmount = IDO_AMOUNT;\r\n        IDODepositCap = IDO_DEPOSIT_CAP;\r\n        IDODepositMax = IDO_DEPOSIT_MAX;\r\n        IDOTimestampFrom = IDO_TIMESTAMP_FROM;\r\n        IDOTimestampTo = IDO_TIMESTAMP_TO;\r\n\r\n        buffer = ADDRESS_BUFFER;\r\n    }\r\n\r\n    function getBufferConfigs() public pure returns\r\n    (\r\n        address dex,\r\n        address usd\r\n    ) {\r\n        dex = ADDRESS_DEX;\r\n        usd = ADDRESS_USD;\r\n    }\r\n\r\n    function isInitialLiquidityCreated() public view returns (bool) {\r\n        return 0 \u003c _timestampLiquidityCreated;\r\n    }\r\n\r\n    /**\r\n     * @dev Set username for `_msgSender()`\r\n     */\r\n    function setUsername(string calldata value) external {\r\n        require(0 \u003c balanceOf(_msgSender()) || IDO.isFounder(_msgSender()), \"HyperDeFi: balance is zero\");\r\n        require(address(0) == _username2address[value], \"HyperDeFi: username is already benn taken\");\r\n        require(!_usernamed[_msgSender()], \"HyperDeFi: username cannot be changed\");\r\n\r\n        _username[_msgSender()] = value;\r\n        _usernamed[_msgSender()] = true;\r\n        _username2address[value] = _msgSender();\r\n        _totalUsername++;\r\n        \r\n        emit UsernameSet(_msgSender(), value);\r\n        \r\n        _mayAutoSwapIntoLiquidity();\r\n    }\r\n\r\n    /**\r\n     * @dev Generate coupon for `_msgSender()`\r\n     */\r\n    function genConpon() external {\r\n        require(0 \u003c balanceOf(_msgSender()) || IDO.isFounder(_msgSender()), \"HyperDeFi Conpon: balance is zero\");\r\n        require(_coupon[_msgSender()] == 0, \"HyperDeFi Conpon: already generated\");\r\n\r\n        uint256 coupon = uint256(keccak256(abi.encode(blockhash(block.number - 1), _msgSender()))) % type(uint32).max;\r\n        require(0 \u003c coupon, \"HyperDeFi Conpon: invalid code, please retry\");\r\n\r\n        _coupon[_msgSender()] = coupon;\r\n        _inviter[coupon] = _msgSender();\r\n        \r\n        _mayAutoSwapIntoLiquidity();\r\n    }\r\n\r\n    /**\r\n     * @dev Set coupon for `_msgSender()`\r\n     */\r\n    function useCoupon(uint256 coupon) external {\r\n        address inviter = _inviter[coupon];\r\n        require(isValidCouponForAccount(coupon, _msgSender()), \"HyperDeFi Coupon: invalid\");\r\n\r\n        _couponUsed[_msgSender()] = coupon;\r\n        _visitors[inviter]++;\r\n\r\n        emit CouponVisitor(inviter, _msgSender());\r\n        \r\n        _mayAutoSwapIntoLiquidity();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `coupon` is valid for `account`\r\n     */\r\n    function isValidCouponForAccount(uint256 coupon, address account) public view returns (bool) {\r\n        address inviter = _inviter[coupon];\r\n        if (inviter == address(0)) return false;\r\n \r\n        for (uint8 i = 1; i \u003c BONUS.length; i++) {\r\n            if (inviter == account) return false;\r\n\r\n            inviter = _inviter[_couponUsed[inviter]];\r\n            if (inviter == address(0)) return true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Pay TAX\r\n     */\r\n    function payFee(uint256 farm, uint256 airdrop, uint256 fomo, uint256 liquidity, uint256 fund, uint256 destroy) public returns (bool) {\r\n        uint256 amount = farm + airdrop + fomo + liquidity + fund + destroy;\r\n        require(amount \u003e 0, \"HyperDeFi: fee amount is zero\");\r\n        require(amount \u003c= balanceOf(_msgSender()), \"HyperDeFi: fee amount exceeds balance\");\r\n        unchecked {\r\n            _balance[_msgSender()] -= amount;\r\n        }\r\n\r\n        if (0 \u003c farm)      _payFarm(     _msgSender(), farm);\r\n\t    if (0 \u003c airdrop)   _payAirdrop(  _msgSender(), airdrop, _generateRandom(tx.origin));\r\n        if (0 \u003c fomo)      _payFomo(     _msgSender(), fomo);\r\n\t    if (0 \u003c liquidity) _payLiquidity(_msgSender(), liquidity);\r\n\t    if (0 \u003c fund)      _payFund(     _msgSender(), fund);\r\n\t    if (0 \u003c destroy)   _payDestroy(  _msgSender(), destroy);\r\n\t    \r\n\t    _mayAutoSwapIntoLiquidity();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Pay TAX from `sender`\r\n     */\r\n    function payFeeFrom(address sender, uint256 farm, uint256 airdrop, uint256 fomo, uint256 liquidity, uint256 fund, uint256 destroy) public returns (bool) {\r\n        uint256 amount = farm + airdrop + fomo + liquidity + fund + destroy;\r\n        require(amount \u003e 0, \"HyperDeFi: fee amount is zero\");\r\n        require(amount \u003c= balanceOf(sender), \"HyperDeFi: fee amount exceeds balance\");\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"HyperDeFi: fee amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n            _balance[sender] -= amount;\r\n        }\r\n\r\n        if (0 \u003c farm)      _payFarm(     sender, farm);\r\n\t    if (0 \u003c airdrop)   _payAirdrop(  sender, airdrop, _generateRandom(tx.origin));\r\n        if (0 \u003c fomo)      _payFomo(     sender, fomo);\r\n\t    if (0 \u003c liquidity) _payLiquidity(sender, liquidity);\r\n\t    if (0 \u003c fund)      _payFund(     sender, fund);\r\n\t    if (0 \u003c destroy)   _payDestroy(  sender, destroy);\r\n\t    \r\n\t    _mayAutoSwapIntoLiquidity();\r\n        return true;\r\n    }\r\n\r\n    function harvestOf(address account) public view returns (uint256) {\r\n        if (_totalFarm \u003c= _totalFarmSnap[account]) return 0; // never happens\r\n\r\n        uint256 harvest = _balance[account] * (_totalFarm - _totalFarmSnap[account]) / _totalSupply;\r\n        return harvest.min(balanceOf(FARM));\r\n    }\r\n\r\n    function takeHarvest() public returns (bool) {\r\n        _takeHarvest(_msgSender());\r\n        \r\n        _mayAutoSwapIntoLiquidity();\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev Register a slot for DApp\r\n     */\r\n    function registerSlot(address account) public onlyOwner {\r\n        require(!_isSlot[account], \"The slot is already exist\");\r\n        require(!_isHolder[account], \"The holder is already exist\");\r\n        \r\n        _isSlot[account] = true;\r\n        _isFlat[account] = true;\r\n        _slots.push(account);\r\n        _flats.push(account);\r\n        emit SlotRegistered(account);\r\n        \r\n        _mayAutoSwapIntoLiquidity();\r\n    }\r\n\r\n\r\n\r\n\r\n    // --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- ERC20\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        if (BLACK_HOLE == recipient || address(this) == recipient) {\r\n            _burn(_msgSender(), amount);\r\n            return true;\r\n        }\r\n        \r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Create initial liquidity\r\n     */\r\n    function createInitLiquidity() public payable returns (bool) {\r\n        require(_msgSender() == address(IDO), \"HyperDeFi: caller is not the IDO contract\");\r\n        require(0 == _timestampLiquidityCreated, \"HyperDeFi: initial liquidity has been created\");\r\n\r\n        _initPrice = address(this).balance * 10 ** _decimals / INIT_LIQUIDITY;\r\n        _mint(address(this), INIT_LIQUIDITY);\r\n        _approve(address(this), ADDRESS_DEX, type(uint256).max);\r\n\r\n        DEX.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            INIT_LIQUIDITY,\r\n            0,\r\n            0,\r\n            BLACK_HOLE,\r\n            block.timestamp\r\n        );\r\n\r\n        _timestampLiquidityCreated = block.timestamp;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn\r\n     */\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n\r\n        _mayAutoSwapIntoLiquidity();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        _mayAutoSwapIntoLiquidity();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn from `sender`\r\n     */\r\n    function burnFrom(address sender,  uint256 amount) public returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: burn amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        \r\n        _burn(sender, amount);\r\n        _mayAutoSwapIntoLiquidity();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\r\n        _mayAutoSwapIntoLiquidity();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        _mayAutoSwapIntoLiquidity();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) private {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        require(TOTAL_SUPPLY_CAP \u003e= _totalSupply + amount, \"ERC20: cap exceeded\");\r\n\r\n        _totalSupply += amount;\r\n        _balance[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        emit TX(uint8(TX_TYPE.MINT), address(0), account, amount, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account` to black-hole.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        require(_totalSupply \u003e= amount, \"ERC20: burn amount exceeds total supply\");\r\n        require(_balance[account] \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balance[account] -= amount;\r\n            _balance[BLACK_HOLE] += amount;\r\n        }\r\n\r\n        emit Transfer(account, BLACK_HOLE, amount);\r\n    }\r\n    // --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- ERC20 \u003cEND\u003e\r\n\r\n    function _priceToken2WRAP() internal view returns (uint256 price) {\r\n        uint256 pairTokenAmount = balanceOf(address(DEX_PAIR));\r\n        if (0 \u003c pairTokenAmount) {\r\n            return BUFFER.priceToken2WRAP();\r\n        }\r\n        else {\r\n            return IDO.priceToken2WRAP();\r\n        }\r\n    }\r\n\r\n    function _priceToken2USD() internal view returns (uint256 price) {\r\n        uint256 pairTokenAmount = balanceOf(address(DEX_PAIR));\r\n        if (0 \u003c pairTokenAmount) {\r\n            return BUFFER.priceToken2USD();\r\n        }\r\n        else {\r\n            return IDO.priceToken2USD();\r\n        }\r\n    }\r\n\r\n    function _takeHarvest(address account) internal {\r\n        uint256 amount = harvestOf(account);\r\n        if (0 == amount) return;\r\n\r\n        _totalFarmSnap[account] = _totalFarm;\r\n        if (0 == amount) return;\r\n\r\n        if (_balance[FARM] \u003c amount) return;\r\n        unchecked {\r\n            _balance[FARM] -= amount;\r\n        }\r\n\r\n        _balance[account] += amount;\r\n        _totalHarvest[account] += amount;\r\n        emit Transfer(FARM, account, amount);\r\n        emit TX(uint8(TX_TYPE.HARVEST), FARM, account, amount, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Register a fund for this DeFi token\r\n     */    \r\n    function _registerFund(address account) internal {\r\n        require(!_isFund[account], \"The fund is already exist\");\r\n        require(!_isHolder[account], \"The holder is already exist\");\r\n\r\n        _isFund[account] = true;\r\n        _isFlat[account] = true;\r\n\r\n        _funds.push(account);\r\n        _flats.push(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Add Holder\r\n     */\r\n\tfunction _addHolder(address account) internal {\r\n        if (_isHolder[account] || _isSlot[account] || _isFund[account]) return;\r\n        if (account == ADDRESS_DEX || account == address(DEX_PAIR)) return;\r\n\r\n        _isHolder[account] = true;\r\n        _holders.push(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Auto-swap amount\r\n     */\r\n    function _getAutoSwapAmountMin() internal view returns (uint256) {\r\n        uint256 pairBalance = balanceOf(address(DEX_PAIR));\r\n        if (0 \u003c pairBalance) return pairBalance * AUTO_SWAP_NUMERATOR_MIN / AUTO_SWAP_DENOMINATOR;\r\n        return INIT_LIQUIDITY * AUTO_SWAP_NUMERATOR_MIN / AUTO_SWAP_DENOMINATOR;\r\n    }\r\n    function _getAutoSwapAmountMax() internal view returns (uint256) {\r\n        uint256 pairBalance = balanceOf(address(DEX_PAIR));\r\n        if (0 \u003c pairBalance)  return pairBalance * AUTO_SWAP_NUMERATOR_MAX / AUTO_SWAP_DENOMINATOR;\r\n        return INIT_LIQUIDITY * AUTO_SWAP_NUMERATOR_MAX / AUTO_SWAP_DENOMINATOR;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whale balance amount\r\n     */\r\n    function _getWhaleThreshold() internal view returns (uint256 amount) {\r\n        uint256 pairBalance = balanceOf(address(DEX_PAIR));\r\n        if (0 \u003c pairBalance) return pairBalance * WHALE_NUMERATOR / WHALE_DENOMINATOR;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns robber balance amount\r\n     */\r\n    function _getRobberThreshold() internal view returns (uint256 amount) {\r\n        uint256 pairBalance = balanceOf(address(DEX_PAIR));\r\n        if (0 \u003c pairBalance) return pairBalance * ROBBER_PERCENTAGE / 100;\r\n    }\r\n\r\n    /**\r\n     * @dev FOMO amount\r\n     */\r\n    function _getFomoAmount() internal view returns (uint256) {\r\n        return balanceOf(FOMO) * FOMO_PERCENTAGE / 100;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev May auto-swap into liquidity - from the `_BUFFER` contract\r\n     */\r\n    function _mayAutoSwapIntoLiquidity() internal withSwapLock {\r\n        // may mint to `_BUFFER`\r\n        _mayMintToBuffer();\r\n\r\n        // may swap\r\n        uint256 amount = balanceOf(address(BUFFER));\r\n        if (0 == amount) return;\r\n        if (amount \u003c _getAutoSwapAmountMin()) return;\r\n\r\n        _approve(address(BUFFER), address(DEX), balanceOf(address(BUFFER)));\r\n        BUFFER.swapIntoLiquidity(amount.min(_getAutoSwapAmountMax()));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"ERC20: transfer amount is zero\");\r\n        require(amount \u003c= balanceOf(sender), \"ERC20: transfer amount exceeds the balance\");\r\n\r\n        // may transfer fomo\r\n        _mayMoveFomo();\r\n\r\n        // get harvest for recipient\r\n        if (recipient != address(DEX_PAIR)) _takeHarvest(recipient);\r\n\r\n        // may auto-swap into liquidity\r\n        if (sender != address(DEX_PAIR) \u0026\u0026 recipient != address(DEX_PAIR) \u0026\u0026 !_swapLock) _mayAutoSwapIntoLiquidity();\r\n\r\n        // tx type\r\n        uint256 coupon = sender == address(DEX_PAIR) ? _couponUsed[recipient] : _couponUsed[sender];\r\n\r\n        TX_TYPE txType = TX_TYPE.TAKER;\r\n        if (_isFlat[sender] || _isFlat[recipient]) txType = TX_TYPE.FLAT;\r\n        else if (sender == address(DEX_PAIR)) txType = TX_TYPE.MAKER;\r\n\r\n        // whale or robber\r\n        if (txType != TX_TYPE.FLAT) {\r\n            require(block.timestamp \u003e TIMESTAMP_LAUNCH, \"HyperDeFi: transfer before the `LAUNCH_TIMESTAMP`\");\r\n\r\n            uint256 whaleThreshold = _getWhaleThreshold();\r\n            uint256 txAmountIfWhale = amount * (100 - WHALE_TAX.farm - WHALE_TAX.airdrop - WHALE_TAX.fomo - WHALE_TAX.liquidity - WHALE_TAX.fund - WHALE_TAX.destroy) / 100;\r\n\r\n            // buy as/to a whale\r\n            if (sender    == address(DEX_PAIR) \u0026\u0026 whaleThreshold \u003c balanceOf(recipient) + txAmountIfWhale) txType = TX_TYPE.WHALE;\r\n            \r\n            // sell as a whale\r\n            else if (recipient == address(DEX_PAIR) \u0026\u0026 whaleThreshold \u003c balanceOf(sender)) txType = TX_TYPE.WHALE;\r\n            \r\n            // send from a whale\r\n            else if (sender != address(DEX_PAIR) \u0026\u0026 recipient != address(DEX_PAIR) \u0026\u0026 whaleThreshold \u003c balanceOf(sender)) txType = TX_TYPE.WHALE;\r\n\r\n            // // send to a whale            \r\n            // else if (sender != DEX_PAIR \u0026\u0026 recipient != DEX_PAIR \u0026\u0026 whaleThreshold \u003c balanceOf(recipient)) txType = TX_TYPE.WHALE;\r\n\r\n            // buy/sell as a robber\r\n            if ((sender == address(DEX_PAIR) || recipient == address(DEX_PAIR)) \u0026\u0026 _getRobberThreshold() \u003c amount) txType = TX_TYPE.ROBBER;\r\n        }\r\n\r\n        // tx\r\n        uint256 rand = _generateRandom(tx.origin);\r\n        (uint256 farm, uint256 airdrop, uint256 fomo, uint256 liquidity, uint256 fund, uint256 destroy, uint256 txAmount) = _txData(amount, txType, coupon);\r\n\r\n        _balance[sender] -= amount;\r\n        _balance[recipient] += txAmount;\r\n        emit Transfer(sender, recipient, txAmount);\r\n\r\n        // buy from liquidity, non-slot\r\n\t    if (sender == address(DEX_PAIR) \u0026\u0026 !_isFlat[recipient] \u0026\u0026 !_isSlot[recipient] \u0026\u0026 txType != TX_TYPE.ROBBER) {\r\n\t        // fomo\r\n            _fomoNextAccount = recipient;\r\n            _fomoTimestamp = block.timestamp + FOMO_TIMESTAMP_STEP;\r\n\t    }\r\n\r\n        // fee\r\n        if (0 \u003c farm)      _payFarm(     sender, farm);\r\n\t    if (0 \u003c airdrop)   _payAirdrop(  sender, airdrop, rand);\r\n        if (0 \u003c fomo)      _payFomo(     sender, fomo);\r\n\t    if (0 \u003c liquidity) _payLiquidity(sender, liquidity);\r\n\t    if (0 \u003c fund)      _payFund(     sender, fund);\r\n\t    if (0 \u003c destroy)   _payDestroy(  sender, destroy);\r\n\r\n        // Tx event\r\n        emit TX(uint8(txType), sender, recipient, amount, txAmount);\r\n\r\n        // // may mint to `_BUFFER`\r\n        // if (!_isFlat[sender] \u0026\u0026 !_isFlat[recipient]) _mayMintToBuffer();\r\n\r\n        // add holder\r\n        _addHolder(sender);\r\n        _addHolder(recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Generate random from account\r\n     */\r\n    function _generateRandom(address account) private view returns (uint256) {\r\n        return uint256(keccak256(abi.encode(blockhash(block.number - 1), account)));\r\n    }\r\n\r\n    /**\r\n     * @dev TxData\r\n     */\r\n    function _txData(uint256 amount, TX_TYPE txType, uint256 coupon) private view\r\n        returns (\r\n            uint256 farm,\r\n            uint256 airdrop,\r\n            uint256 fomo,\r\n            uint256 liquidity,\r\n            uint256 fund,\r\n            uint256 destroy,\r\n            uint256 txAmount\r\n        )\r\n    {\r\n        (farm, airdrop, fomo, liquidity, fund, destroy) = _txDataWithoutTxAmount(amount, txType, coupon);\r\n        \r\n        txAmount = amount - farm - airdrop - fomo - liquidity - fund - destroy;\r\n\r\n        return (farm, airdrop, fomo, liquidity, fund, destroy, txAmount);\r\n    }\r\n    function _txDataWithoutTxAmount(uint256 amount, TX_TYPE txType, uint256 coupon) private view\r\n        returns (\r\n            uint256 farm,\r\n            uint256 airdrop,\r\n            uint256 fomo,\r\n            uint256 liquidity,\r\n            uint256 fund,\r\n            uint256 destroy\r\n        )\r\n    {\r\n        if (txType == TX_TYPE.FLAT) return (0, 0, 0, 0, 0, 0);\r\n\r\n        Percentage memory percentage;\r\n        if      (txType == TX_TYPE.MAKER)  percentage = MAKER_TAX;\r\n        else if (txType == TX_TYPE.WHALE)  percentage = WHALE_TAX;\r\n        else if (txType == TX_TYPE.ROBBER) percentage = ROBBER_TAX;\r\n        else                               percentage = TAKER_TAX;\r\n\r\n\t\tif (0 \u003c percentage.farm)      farm    = amount * percentage.farm / 100;\r\n        if (0 \u003c percentage.airdrop)   airdrop = amount * percentage.airdrop / 100;\r\n        if (0 \u003c percentage.fomo)      fomo    = amount * percentage.fomo / 100;\r\n        if (0 \u003c percentage.liquidity) {\r\n            if (coupon == 0 || txType == TX_TYPE.ROBBER) {\r\n                liquidity = amount * percentage.liquidity / 100;\r\n            } else {\r\n                liquidity = amount * (percentage.liquidity - 1) / 100;\r\n            }\r\n        }\r\n        if (0 \u003c percentage.fund)      fund    = amount * percentage.fund / 100;\r\n        if (0 \u003c percentage.destroy)   destroy = amount * percentage.destroy / 100;\r\n        \r\n        return (farm, airdrop, fomo, liquidity, fund, destroy);\r\n    }\r\n\r\n    /**\r\n     * @dev Pay FARM\r\n     */\r\n    function _payFarm(address account, uint256 amount) private {\r\n        _totalFarm += amount;\r\n        _balance[FARM] += amount;\r\n        emit Transfer(account, FARM, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Pay AIRDROP\r\n     */\r\n    function _payAirdrop(address account, uint256 amount, uint256 rand) private {\r\n        uint256 destroy;\r\n        uint256 airdrop = amount;\r\n        address accountAirdrop = _holders[rand % _holders.length];\r\n\r\n        address accountLoop = accountAirdrop;\r\n        for (uint8 i; i \u003c BONUS.length; i++) {\r\n            address inviter = _inviter[_couponUsed[accountLoop]];\r\n            \r\n            if (inviter == address(0)) {\r\n                break;\r\n            }\r\n\r\n            uint256 bonus = amount * BONUS[i] / 100;\r\n            \r\n            airdrop -= bonus;\r\n            \r\n            if (balanceOf(inviter) \u003c AIRDROP_THRESHOLD) {\r\n                destroy += bonus;\r\n            } else {\r\n                _balance[inviter] += bonus;\r\n                emit Transfer(account, inviter, bonus);\r\n                emit Bonus(inviter, bonus);\r\n            }\r\n            \r\n            accountLoop = inviter;\r\n        }\r\n\r\n        if (balanceOf(accountAirdrop) \u003c AIRDROP_THRESHOLD) {\r\n            destroy += airdrop;\r\n            airdrop = 0;\r\n        }\r\n        \r\n        if (0 \u003c destroy) {\r\n            _payDestroy(account, destroy);\r\n        }\r\n\r\n        if (0 \u003c airdrop) {\r\n            _balance[accountAirdrop] += airdrop;\r\n            emit Transfer(account, accountAirdrop, airdrop);\r\n            emit Airdrop(accountAirdrop, airdrop);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Pay FOMO to `_fomo`\r\n     */\r\n    function _payFomo(address account, uint256 amount) private {\r\n        _balance[FOMO] += amount;\r\n        emit Transfer(account, FOMO, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Pay LIQUIDITY\r\n     */\r\n    function _payLiquidity(address account, uint256 amount) private {\r\n        _balance[address(BUFFER)] += amount;\r\n        emit Transfer(account, address(BUFFER), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Pay FUND\r\n     */\r\n    function _payFund(address account, uint256 amount) private {\r\n        _balance[owner()] += amount;\r\n        emit Transfer(account, owner(), amount);\r\n        emit Fund(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev pay DESTROY\r\n     */\r\n    function _payDestroy(address account, uint256 amount) internal {\r\n        _balance[BLACK_HOLE] += amount;\r\n        emit Transfer(account, BLACK_HOLE, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev May move FOMO amount\r\n     */\r\n    function _mayMoveFomo() private {\r\n        if (_fomoNextAccount == address(0) || block.timestamp \u003c _fomoTimestamp) return;\r\n        \r\n        uint256 amount = _getFomoAmount();\r\n\r\n        _balance[FOMO] -= amount;\r\n        _balance[_fomoNextAccount] += amount;\r\n        emit Transfer(FOMO, _fomoNextAccount, amount);\r\n        \r\n        _fomoNextAccount = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev May mint to `_BUFFER`\r\n     */\r\n    function _mayMintToBuffer() private {\r\n        if (0 == _initPrice) return;\r\n        if (0 == balanceOf(address(DEX_PAIR))) return;\r\n\r\n        uint256 amount = DIST_AMOUNT * BUFFER.priceToken2WRAP() / _initPrice / 1024;\r\n\r\n        if (amount \u003e= DIST_AMOUNT) return;\r\n        if (_distributed \u003e= amount) return;\r\n        amount -= _distributed;\r\n\r\n        _distributed += amount;\r\n        _mint(address(BUFFER), amount);\r\n    }\r\n}\r\n"},"HyperDeFiTokenMetadata.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20Metadata.sol\";\r\n\r\ncontract HyperDeFiTokenMetadata is IERC20Metadata {\r\n    string internal constant _name   = \"HyperDeFi\";\r\n    string internal constant _symbol = \"HDEFI\";\r\n    uint8  internal constant _decimals = 2;\r\n\r\n    uint8   internal constant FOMO_PERCENTAGE     = 60;\r\n    uint256 internal constant FOMO_TIMESTAMP_STEP = 15 minutes;\r\n\r\n    uint256 internal constant TOTAL_SUPPLY_CAP   = 1_000_000_000_000e2;\r\n    uint256 internal constant BURN_AMOUNT        = TOTAL_SUPPLY_CAP / 2;\r\n    uint256 internal constant DIST_AMOUNT        = TOTAL_SUPPLY_CAP * 48 / 100;\r\n    uint256 internal constant INIT_LIQUIDITY     = TOTAL_SUPPLY_CAP / 100;\r\n    uint256 internal constant IDO_AMOUNT         = TOTAL_SUPPLY_CAP / 100;\r\n    uint256 internal constant IDO_DEPOSIT_CAP    = 50e18;\r\n    uint256 internal constant IDO_DEPOSIT_MAX    = 0.1e18;\r\n    uint32  internal constant IDO_TIMESTAMP_FROM = 1639137600;\r\n    uint32  internal constant IDO_TIMESTAMP_TO   = IDO_TIMESTAMP_FROM + 7 days;\r\n    uint32  internal constant TIMESTAMP_LAUNCH   = IDO_TIMESTAMP_TO + 1 days;\r\n\r\n    address internal constant ADDRESS_BUFFER = address(0xbbbbbbb1908049D19544205F61D6D42aBDE9952F);\r\n    address internal constant ADDRESS_IDO    = address(0x00000000E00A2E5B43460D40BcdF82E6e054CD3D);\r\n    address internal constant ADDRESS_DEX    = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address internal constant ADDRESS_USD    = address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n\r\n    uint16  internal constant AUTO_SWAP_NUMERATOR_MIN = 1;\r\n    uint16  internal constant AUTO_SWAP_NUMERATOR_MAX = 10;\r\n    uint16  internal constant AUTO_SWAP_DENOMINATOR   = 1_000;\r\n    uint256 internal constant AIRDROP_THRESHOLD       = 1_000_000e2;\r\n\r\n    uint16  internal WHALE_NUMERATOR   = 5;\r\n    uint16  internal WHALE_DENOMINATOR = 1_000;\r\n    uint8   internal ROBBER_PERCENTAGE = 15;\r\n    uint8[] internal BONUS             = [10, 20, 20];\r\n\r\n    address internal constant FARM       = address(0x1);\r\n    address internal constant FOMO       = address(0xf);\r\n    address internal constant BLACK_HOLE = address(0xdead);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20Metadata.sol\";\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 is IERC20Metadata{\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol (removed: IERC20)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"IHyperDeFi.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IHyperDeFi is IERC20 {\r\n    function getIDOConfigs() external view returns (\r\n        uint256 IDOAmount,\r\n        uint256 IDODepositCap,\r\n        uint256 IDODepositMax,\r\n        uint32  IDOTimestampFrom,\r\n        uint32  IDOTimestampTo,\r\n\r\n        address buffer\r\n    );\r\n    function getBufferConfigs() external pure returns (address dex, address usd);\r\n\r\n    function isInitialLiquidityCreated() external view returns (bool);\r\n    function createInitLiquidity() external payable returns (bool);\r\n}\r\n"},"IHyperDeFiBuffer.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IHyperDeFiBuffer {\r\n    function USD() external view returns (address);\r\n    function metaWRAP() external view returns (string memory name, string memory symbol, uint8 decimals);\r\n    function metaUSD() external view returns (string memory name, string memory symbol, uint8 decimals);\r\n\r\n    function priceToken2WRAP() external view returns (uint256);\r\n    function priceToken2USD() external view returns (uint256);\r\n    function priceWRAP2USD() external view returns (uint256);\r\n    function swapIntoLiquidity(uint256 amount) external;\r\n}\r\n"},"IHyperDeFiIDO.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IHyperDeFiIDO {\r\n    function isFounder(address account) external view returns (bool);\r\n    function priceToken2WRAP() external view returns (uint256 price);\r\n    function priceToken2USD() external view returns (uint256 price);\r\n    \r\n    function getDepositTotal() external view returns (uint256);\r\n    function getAccount(address account) external view returns (\r\n        uint256 amountWRAP,\r\n        uint256 amountToken,\r\n        bool redeemed\r\n    );\r\n}\r\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"},"IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol \r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \u0027./IUniswapV2Router01.sol\u0027;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003e= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n    \r\n    // ...\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // /**\r\n    //  * @dev Leaves the contract without owner. It will not be possible to call\r\n    //  * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    //  *\r\n    //  * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    //  * thereby removing any functionality that is only available to the owner.\r\n    //  */\r\n    // function renounceOwnership() public virtual onlyOwner {\r\n    //     emit OwnershipTransferred(_owner, address(0));\r\n    //     _owner = address(0);\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"}}