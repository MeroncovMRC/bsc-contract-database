
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/finance/PaymentSplitter.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/utils/SafeERC20.sol";
import "../utils/Address.sol";
import "../utils/Context.sol";

/**
 * @title PaymentSplitter
 * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware
 * that the Ether will be split in this way, since it is handled transparently by the contract.
 *
 * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each
 * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim
 * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the
 * time of contract deployment and can't be updated thereafter.
 *
 * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the
 * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}
 * function.
 *
 * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and
 * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you
 * to run tests before sending real value to this contract.
 */
contract PaymentSplitter is Context {
    event PayeeAdded(address account, uint256 shares);
    event PaymentReleased(address to, uint256 amount);
    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);
    event PaymentReceived(address from, uint256 amount);

    uint256 private _totalShares;
    uint256 private _totalReleased;

    mapping(address => uint256) private _shares;
    mapping(address => uint256) private _released;
    address[] private _payees;

    mapping(IERC20 => uint256) private _erc20TotalReleased;
    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;

    /**
     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at
     * the matching position in the `shares` array.
     *
     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no
     * duplicates in `payees`.
     */
    constructor(address[] memory payees, uint256[] memory shares_) payable {
        require(payees.length == shares_.length, "PaymentSplitter: payees and shares length mismatch");
        require(payees.length > 0, "PaymentSplitter: no payees");

        for (uint256 i = 0; i < payees.length; i++) {
            _addPayee(payees[i], shares_[i]);
        }
    }

    /**
     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully
     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the
     * reliability of the events, and not the actual splitting of Ether.
     *
     * To learn more about this see the Solidity documentation for
     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback
     * functions].
     */
    receive() external payable virtual {
        emit PaymentReceived(_msgSender(), msg.value);
    }

    /**
     * @dev Getter for the total shares held by payees.
     */
    function totalShares() public view returns (uint256) {
        return _totalShares;
    }

    /**
     * @dev Getter for the total amount of Ether already released.
     */
    function totalReleased() public view returns (uint256) {
        return _totalReleased;
    }

    /**
     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20
     * contract.
     */
    function totalReleased(IERC20 token) public view returns (uint256) {
        return _erc20TotalReleased[token];
    }

    /**
     * @dev Getter for the amount of shares held by an account.
     */
    function shares(address account) public view returns (uint256) {
        return _shares[account];
    }

    /**
     * @dev Getter for the amount of Ether already released to a payee.
     */
    function released(address account) public view returns (uint256) {
        return _released[account];
    }

    /**
     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an
     * IERC20 contract.
     */
    function released(IERC20 token, address account) public view returns (uint256) {
        return _erc20Released[token][account];
    }

    /**
     * @dev Getter for the address of the payee number `index`.
     */
    function payee(uint256 index) public view returns (address) {
        return _payees[index];
    }

    /**
     * @dev Getter for the amount of payee's releasable Ether.
     */
    function releasable(address account) public view returns (uint256) {
        uint256 totalReceived = address(this).balance + totalReleased();
        return _pendingPayment(account, totalReceived, released(account));
    }

    /**
     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an
     * IERC20 contract.
     */
    function releasable(IERC20 token, address account) public view returns (uint256) {
        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);
        return _pendingPayment(account, totalReceived, released(token, account));
    }

    /**
     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the
     * total shares and their previous withdrawals.
     */
    function release(address payable account) public virtual {
        require(_shares[account] > 0, "PaymentSplitter: account has no shares");

        uint256 payment = releasable(account);

        require(payment != 0, "PaymentSplitter: account is not due payment");

        // _totalReleased is the sum of all values in _released.
        // If "_totalReleased += payment" does not overflow, then "_released[account] += payment" cannot overflow.
        _totalReleased += payment;
        unchecked {
            _released[account] += payment;
        }

        Address.sendValue(account, payment);
        emit PaymentReleased(account, payment);
    }

    /**
     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their
     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20
     * contract.
     */
    function release(IERC20 token, address account) public virtual {
        require(_shares[account] > 0, "PaymentSplitter: account has no shares");

        uint256 payment = releasable(token, account);

        require(payment != 0, "PaymentSplitter: account is not due payment");

        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].
        // If "_erc20TotalReleased[token] += payment" does not overflow, then "_erc20Released[token][account] += payment"
        // cannot overflow.
        _erc20TotalReleased[token] += payment;
        unchecked {
            _erc20Released[token][account] += payment;
        }

        SafeERC20.safeTransfer(token, account, payment);
        emit ERC20PaymentReleased(token, account, payment);
    }

    /**
     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and
     * already released amounts.
     */
    function _pendingPayment(
        address account,
        uint256 totalReceived,
        uint256 alreadyReleased
    ) private view returns (uint256) {
        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;
    }

    /**
     * @dev Add a new payee to the contract.
     * @param account The address of the payee to add.
     * @param shares_ The number of shares owned by the payee.
     */
    function _addPayee(address account, uint256 shares_) private {
        require(account != address(0), "PaymentSplitter: account is the zero address");
        require(shares_ > 0, "PaymentSplitter: shares are 0");
        require(_shares[account] == 0, "PaymentSplitter: account already has shares");

        _payees.push(account);
        _shares[account] = shares_;
        _totalShares = _totalShares + shares_;
        emit PayeeAdded(account, shares_);
    }
}


// File: @openzeppelin/contracts/interfaces/IERC2981.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)

pragma solidity ^0.8.0;

import "../utils/introspection/IERC165.sol";

/**
 * @dev Interface for the NFT Royalty Standard.
 *
 * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal
 * support for royalty payments across all NFT marketplaces and ecosystem participants.
 *
 * _Available since v4.5._
 */
interface IERC2981 is IERC165 {
    /**
     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of
     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.
     */
    function royaltyInfo(uint256 tokenId, uint256 salePrice)
        external
        view
        returns (address receiver, uint256 royaltyAmount);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1);

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator,
        Rounding rounding
    ) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10**64) {
                value /= 10**64;
                result += 64;
            }
            if (value >= 10**32) {
                value /= 10**32;
                result += 32;
            }
            if (value >= 10**16) {
                value /= 10**16;
                result += 16;
            }
            if (value >= 10**8) {
                value /= 10**8;
                result += 8;
            }
            if (value >= 10**4) {
                value /= 10**4;
                result += 4;
            }
            if (value >= 10**2) {
                value /= 10**2;
                result += 2;
            }
            if (value >= 10**1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
        }
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

import "./math/Math.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: contracts/minter/MyInkMinter.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "../token/MyInk.sol";
import "../nft/MyNft.sol";


interface BurnMintToken {
    function burn(uint256 amount) external;
    function mint(address to, uint256 amount) external;
}

/**
 * @title The magical InkMinter contract.
 */
contract InkMinter is Context, Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

	MyInk public myINK;
    MyInk public myFreeINK;

    uint256 public fixAmount;
    uint256 public myShareDenominator;
    uint256 public relativeDivisor;
	uint256 public restTreasury;
    uint256 public stakePerPixel;

	uint256 public currentStakes;
    uint256 public RATIO_DENOMINATOR = 100;
    uint256 public migrationRatioNominator = 50;

    uint256 public eventAmountPerWallet;
    uint256 public eventStartTime;
    uint256 public eventEndTime;
	
	address public myShareAddr;
    address public myNFTAddr;
    address private signer;

	bool public firstMintHappend;
    bool public isActive;

    mapping(uint256 => uint256) public startStakeForId;
    mapping(address => uint256) voteDenominator;
	mapping(address => uint256) public eventLastMint;


    event SetMyInk(address oldContractAddress, address newContractAddr);
    event SetMyFreeInk(address oldContractAddress, address newContractAddr);
    event SetMyFreeInkEvent(uint start, uint end, uint amountPerWallet);
    event SetMintAmount(uint oldFixAmount, uint newFixAmount, uint oldRelativeDivisor, uint newRelativeDivisor);
    event SetSigner(address oldSignerAddress, address newSignerAddress);
    event SetNFT(address oldNftAddress, address newNftAddress);
    event ToggleActivity(bool oldState, bool newState);
    event SetMigrationRatio(uint oldMigrationRatioNominator, uint newMigrationRatioNominator);
    event Migrate(uint nftId);
    event Withdraw(address to, address token, uint amount);

	/**
     * Creates the minter.
	 * Also deploy two customized ERC20 Token, which can be used for minting the nfts.
	 *
     * @param myShareAddr_ myShare token address
     * @param myNFTAddr_ myNFT token address
	 * @param signer_ signer address
     */
    constructor(address myShareAddr_, address myNFTAddr_, address signer_) {
        require(myShareAddr_ != address(0), "MyInkMinter: myShareAddr_ can't be the zero address.");
        require(myNFTAddr_ != address(0), "MyInkMinter: myNFTAddr_ can't be the zero address.");
        require(signer_ != address(0), "MyInkMinter: signer_ can't be the zero address.");
        
        myShareAddr = myShareAddr_;

        myINK = new MyInk(address(this), "Magic Yearn Ink", "MyINK");
        myINK.transferOwnership(msg.sender);

        myFreeINK = new MyInk(address(this), "Magic Yearn Free Ink", "MyFINK");
        myFreeINK.transferOwnership(msg.sender);

        myNFTAddr = myNFTAddr_;

        fixAmount = IERC20(myShareAddr).totalSupply() / 125e6;
        myShareDenominator = 125e6;

        isActive = true;

        signer = signer_;
    }

    /**
     * Funds the claimable rewards for burning nfts.
     *
     * @notice This function should ONLY be called by a token contract or a contract which can manipulate the balance of this contract.
     *         Because the increase of "currentStakes" happens here without a balance check, it can lead to a fatal misbehavior if not done properly.
     *         Also no burn is included here.
     *
     * @param amount the amount which should be added to the staking calculation
     */
    function fundByMyShare(uint256 amount) external {
        require(msg.sender == myShareAddr, "MyInkMinter: Only the MyS contract can call this function.");

        if (firstMintHappend) {
            currentStakes += amount;

            uint256 totalAmount = amount + restTreasury;

            stakePerPixel += totalAmount / myINK.usedForMint();
            restTreasury = totalAmount % myINK.usedForMint();
        } else {
            restTreasury += amount;
        }
    }

    // ---- MY INK ----

    /**
     * Changes the MyS amount which is needed to mint MyInk.
     *
     * @param fixAmount_ total amount of MyS tokens
     * @param relativeDenominator_ divisor that cannot be zero
     */
    function setMintAmount(uint256 fixAmount_, uint256 relativeDenominator_) external onlyOwner {
        require(relativeDenominator_ != 0, "MyInkMinter: The relativeDenominator_ can't be zero.");

        uint oldFixAmount = fixAmount;
        uint oldMyShareDenominator = myShareDenominator;

        fixAmount = fixAmount_;
        myShareDenominator = relativeDenominator_;

        emit SetMintAmount(oldFixAmount, fixAmount, oldMyShareDenominator, myShareDenominator);
    }

    /**
     * Gives back the current wrapping ratio MyS => MyInk.
	 *
	 * @return uint256 token amount
     */
    function getTokenAmountForNFT() public view returns (uint256) {
        return fixAmount + (IERC20(myShareAddr).totalSupply() / myShareDenominator);
    }

	/**
     * Calculates the stake to burn ratio.
	 *
	 * @return toBurn burn amount
	 * @return toStake stake amount
     */
    function calcRatio(uint256 balance) public view returns (uint256 toBurn, uint256 toStake) {
        uint256 supply = IERC20(myShareAddr).totalSupply() / 20;

        uint256 factor = supply / balance;

        factor = factor > 9 ? 9 : factor;
        factor = factor < 1 ? 1 : factor;

        toBurn = 100 - factor * 10;
        toStake = factor * 10;
    }

    /**
     * Wraps MyS to MyInk.
     *
     * @param myInkAmount MyInk amount
     */
    function mintMyInk(uint256 myInkAmount) external {
        uint256 myShareAmount = myInkAmount * getTokenAmountForNFT();

        uint256 balanceBefore = IERC20(myShareAddr).balanceOf(address(this));

        IERC20(myShareAddr).safeTransferFrom(msg.sender, address(this),myShareAmount);

        uint256 balanceAfter = IERC20(myShareAddr).balanceOf(address(this));
        uint256 amount = balanceAfter - balanceBefore;
        uint256 fragment = amount / 100;
        uint256 rest = amount % 100;

        (uint256 burnMultiplier, uint256 stakeMultiplier) = calcRatio(balanceAfter);

        uint256 toBurn = burnMultiplier * fragment;
        uint256 toStake = stakeMultiplier * fragment;

        if (firstMintHappend) {
            uint256 totalAmount = toStake + restTreasury;

            currentStakes += toStake;
            stakePerPixel += totalAmount / myINK.usedForMint();
            restTreasury = totalAmount % myINK.usedForMint();

            BurnMintToken(myShareAddr).burn(rest + toBurn);
        } else {
            restTreasury += toStake;
            currentStakes += toStake;

            BurnMintToken(myShareAddr).burn(rest + toBurn);
        }

        myINK.mint(msg.sender, myInkAmount);
    }

    // ---- MY FREE INK ----

	/**
     * Sets the MyFreeInk event.
     *
     * @param amountPerWallet amount per wallet
     * @param startTime start time
     * @param deltaTime delta time
     */
    function setMyFreeInkEvent(uint256 amountPerWallet, uint256 startTime, uint256 deltaTime) external onlyOwner {
        require(startTime >= block.timestamp || startTime == 0, "MyInkMinter: startTime must be zero or grater than or equal to the current block.timestamp.");
        eventAmountPerWallet = amountPerWallet;

        startTime = startTime == 0 ? block.timestamp : startTime;
        eventStartTime = startTime;

        eventEndTime = startTime + deltaTime;

        emit SetMyFreeInkEvent(eventStartTime, eventEndTime, eventAmountPerWallet);
    }

	/**
     * Mint event.
     */
    function eventMint() external {
        require(eventLastMint[msg.sender] < eventStartTime, "MyInkMinter: Sorry you already minted.");
        require(block.timestamp >= eventStartTime && block.timestamp <= eventEndTime, "MyInkMinter: Event expired.");

        eventLastMint[msg.sender] = block.timestamp;
        myFreeINK.mint(msg.sender, eventAmountPerWallet);
    }

	/**
     * Mints MyFreeInk tokens.
     *
     * @param users user addresses
     * @param amounts token amounts
     */
    function mintFreeInk(address[] memory users, uint256[] memory amounts) external onlyOwner {
        require(users.length == amounts.length, "MyInkMinter: Different array sizes.");

        for (uint256 i = 0; i < users.length; i++) {
            require(users[i] != address(0), "MyInkMinter: Can't mint to zero address.");

            myFreeINK.mint(users[i], amounts[i]);
        }
    }

	/**
     * Mints MyFreeInk tokens with the same amount for all users.
     *
     * @param users user addresses
     * @param amount token amounts
     */
    function mintFreeInkSingleAmount(address[] memory users, uint256 amount) external onlyOwner {
        for (uint256 i = 0; i < users.length; i++) {
            require(users[i] != address(0), "MyInkMinter: Can't mint to zero address.");

            myFreeINK.mint(users[i], amount);
        }
    }

	/**
     * Mints a MyFreeInk token.
     *
     * @param amount MyFreeInk token amount
     */
    function mintAsOwner(uint256 amount) external onlyOwner {
        myFreeINK.mint(msg.sender, amount);
    }

    // ---- MY NFT ----

	/**
     * Adds MyS tokens and calculates the rewards for burning.
     *
     * @param myShareAmount MyShare token amount
     */
    function addMyShare(uint256 myShareAmount) external {
        uint256 balanceBefore = IERC20(myShareAddr).balanceOf(address(this));

        IERC20(myShareAddr).safeTransferFrom(msg.sender, address(this), myShareAmount);

        uint256 balanceAfter = IERC20(myShareAddr).balanceOf(address(this));
        uint256 amount = balanceAfter - balanceBefore;
        uint256 totalAmount = amount + restTreasury;

        stakePerPixel += totalAmount / myINK.usedForMint();
        restTreasury = totalAmount % myINK.usedForMint();
        currentStakes += amount;
    }

	/**
     * Sets a new signer address.
     *
     * @param newSigner new signer address
     */
    function setSigner(address newSigner) external onlyOwner {
        require(newSigner != address(0), "MyInkMinter: newSigner can't be zero address.");

        address oldSigner = signer;

        signer = newSigner;

        emit SetSigner(oldSigner, signer);
    }

    /**
     * Sets the nft address that should be minted.
	 * 
     * @param newNFT_ new nft contract address
	 * @return address nft contract address
     */
    function setNFT(address newNFT_) external onlyOwner returns (address) {
        require(newNFT_ != address(0), "MyInkMinter: newNFT_ can't be zero address.");

        address oldAddr = myNFTAddr;

        myNFTAddr = newNFT_;

        emit SetNFT(oldAddr, myNFTAddr);

        return address(myNFTAddr);
    }

    /**
     * Sets the MyInk token that can be used to pay the mint.
	 *
     * @param newToken new token address
	 * @return address MyInk address
     */
    function setMyInk(address newToken) external onlyOwner returns (address) {
        require(newToken != address(0), "MyInkMinter: newToken can't be zero address.");

        address oldAddr = address(myINK);

        myINK = MyInk(newToken);

        emit SetMyInk(oldAddr, newToken);

        return address(myINK);
    }

    /**
     * Sets the MyFreeInk token that can be used to pay the mint.
    	 *
     * @param newToken address of the new token contract
	 * @return address MyFreeInk address
     */
    function setMyFreeInk(address newToken) external onlyOwner returns (address) {
        require(newToken != address(0), "MyInkMinter: newToken can't be zero address.");

        address oldAddr = address(myFreeINK);

        myFreeINK = MyInk(newToken);

        emit SetMyFreeInk(oldAddr, newToken);

        return address(myFreeINK);
    }

    /**
     * Toggles the possibility to mint nfts.
	 *
     * @return bool isActive
     */
    function toggleActivity() external onlyOwner returns (bool) {
        isActive = !isActive;

        emit ToggleActivity(!isActive, isActive);

        return isActive;
    }

	/**
     * Checks signature parameters.
	 *
     * @param amount ink amount
     * @param picHash picture hash
     * @param message signature message
     */
    function checkParameters(uint256 amount, string memory picHash, bytes32 message) internal pure {
        bytes32 msg0 = keccak256(abi.encode(amount, picHash));
        bytes32 prefixed = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", msg0));

        require(message == prefixed, "checkParameters: Wrong myINK amount or picHash");
    }

	/**
     * Checks the signature.
	 *
     * @param message signature message
     * @param sig signature
     */
    function checkSignature(bytes32 message, bytes memory sig) internal view {
        require(sig.length == 65, "checkSignature: Wrong signutre length.");

        bytes32 r;
        bytes32 s;
        uint8 v;

        assembly {
            // first 32 bytes, after the length prefix
            r := mload(add(sig, 32))
            // second 32 bytes
            s := mload(add(sig, 64))
            // final byte (first byte of the next 32 bytes)
            v := byte(0, mload(add(sig, 96)))
        }

        address actualSigner = ecrecover(message, v, r, s);

        require(actualSigner == signer, "checkSignature: You are not allowed to sign");
    }

    /**
     * Mints a nft.
	 *
     * @param myInkAmount amount of MyInk tokens.
     * @param picHash picture hash
     * @param collectionName name of the collection of the nft
     * @param royaltyNominator royalty nominator
     * @param payees_ receiver of the royalty (set to this.address if not set)
     * @param shares_ shares of the payees (set to 100% if not set)
     * @param message signature message
     * @param sig signature
	 * @return newId nft id
     */
    function mintNft(
        uint256 myInkAmount,
        string memory picHash,
        string memory collectionName,
        uint256 royaltyNominator,
        address[] memory payees_,
        uint256[] memory shares_,
        bytes32 message,
        bytes memory sig
    ) external nonReentrant returns (uint256 newId) {
        require(isActive, "mintNft: The minting function is not activated");

        checkParameters(myInkAmount, picHash, message);
        checkSignature(message, sig);

        IERC20(address(myINK)).safeTransferFrom(msg.sender, address(this), myInkAmount);

        myINK.burn(myInkAmount);
        myINK.addUsedForMint(myInkAmount);

        MyNft.mintParameters memory temp;
        temp.to = msg.sender;
        temp.picHash = picHash;
        temp.collectionName = collectionName;
        temp.royaltyNominator = royaltyNominator;
        temp.payees = payees_;
        temp.shares = shares_;
        temp.pixels = myInkAmount;
        temp.actualStakePerPixel = stakePerPixel;
        temp.nftCreator = msg.sender;

        newId = MyNft(myNFTAddr).mint(temp);

        if (firstMintHappend == false) {
            firstMintHappend = true;
        }
    }

	/**
     * Mints a MyFreeInk nft.
	 *
     * @param myInkAmount amount of MyInk tokens.
     * @param picHash picture hash
     * @param collectionName name of the collection of the nft
     * @param royaltyNominator royalty nominator
     * @param payees_ receiver of the royalty (set to this.address if not set)
     * @param shares_ shares of the payees (set to 100% if not set)
     * @param message signature message
     * @param sig signature
	 * @return newId nft id
     */
    function mintNftFreeINK(
        uint256 myInkAmount,
        string memory picHash,
        string memory collectionName,
        uint256 royaltyNominator,
        address[] memory payees_,
        uint256[] memory shares_,
        bytes32 message,
        bytes memory sig
    ) external nonReentrant returns (uint256 newId) {
        require(isActive, "mintNftFreeINK: The minting function is not activated");

        checkParameters(myInkAmount, picHash, message);
        checkSignature(message, sig);

        IERC20(address(myFreeINK)).safeTransferFrom(msg.sender, address(this), myInkAmount);

        myFreeINK.burn(myInkAmount);

        MyNft.mintParameters memory temp;
        temp.to = msg.sender;
        temp.picHash = picHash;
        temp.collectionName = collectionName;
        temp.royaltyNominator = royaltyNominator;
        temp.payees = payees_;
        temp.shares = shares_;
        temp.pixels = myInkAmount;
        temp.nftCreator = msg.sender;

        newId = MyNft(myNFTAddr).mintFree(temp);
    }

	/**
     * Sets the migration ratio.
	 *
     * @param newRatio new ratio
     */
    function setMigrationRatio(uint256 newRatio) external onlyOwner {
        require(newRatio <= RATIO_DENOMINATOR, "MyInkMinter setMigrationRatio: newRatio have to be <= 100");

        uint oldRatio = migrationRatioNominator;

        migrationRatioNominator = newRatio;

        emit SetMigrationRatio(oldRatio, migrationRatioNominator);
    }

	/**
     * Returns the migration ratio for migrating the MyFreeInk nfts to MyInk nfts.
	 *
     * @param amount pixel amount of nft
     */
    function migrationRatio(uint256 amount) public view returns (uint256) {
        uint256 toSpend = (amount * migrationRatioNominator) / RATIO_DENOMINATOR;

        if (toSpend == 0) {
            return amount;
        }

        return toSpend;
    }

	/**
     * Migrates a MyFreeInk nft to a MyInk nft.
	 *
     * @param tokenId nft id
     */
    function migrate(uint256 tokenId) external {
        require(MyNft(myNFTAddr).isApprovedOrOwner(msg.sender, tokenId), "MyInkMinter Migrate: You are not approved or the owner of this NFT-Id.");

        uint256 pixelsOfId = MyNft(myNFTAddr).pixelForId(tokenId);
        uint256 toSpend = migrationRatio(pixelsOfId);

        myINK.transferFrom(msg.sender, address(this), toSpend);
        myINK.burn(toSpend);
        myINK.addUsedForMint(pixelsOfId);

        MyNft(myNFTAddr).migrate(tokenId, stakePerPixel);

        emit Migrate(tokenId);
    }

	/**
     * Burns a nft.
	 *
     * @param tokenId nft id
     */
    function burnNFT(uint256 tokenId) external {
        require(!MyNft(myNFTAddr).isFree(tokenId), "MyInkMinter: NFT's created from MyFreeInk can't get burned.");
        myINK.subUsedForMint(MyNft(myNFTAddr).pixelForId(tokenId));

        uint256 toSendMyS = claimableAtBurn(tokenId);

        MyNft(myNFTAddr).burn(tokenId);
        IERC20(myShareAddr).safeTransfer(msg.sender, toSendMyS);

        currentStakes -= toSendMyS;
    }

	/**
     * Returns the claimable MyS amount after burning the nft.
	 *
     * @param id nft id
	 * @return uint256 claimable amount
     */
    function claimableAtBurn(uint256 id) public view returns (uint256) {
        if (MyNft(myNFTAddr).isFree(id)) {
            return 0;
        } else {
            return MyNft(myNFTAddr).pixelForId(id) * (stakePerPixel - MyNft(myNFTAddr).startShareForId(id));
        }
    }

    /**
     * Withdraws funds of this contract.
	 *
     * @param to_ address where to send the tokens to
     * @param tokenAddress_ address of the tokens that should be sent
     * @return bool isActive after toggle
     */
    function withdraw(address to_, address tokenAddress_) external onlyOwner returns (bool) {
        require(to_ != address(0), "MyInkMinter: Can't withdraw to zero address.");

        IERC20 tempToken = IERC20(tokenAddress_);

        if (tokenAddress_ == myShareAddr) {
            uint balance = tempToken.balanceOf(address(this)) - currentStakes;
            tempToken.safeTransfer(to_, balance);
            emit Withdraw(to_, tokenAddress_, balance);
        } else {
            uint balance = tempToken.balanceOf(address(this));
            tempToken.safeTransfer(to_, balance);
            emit Withdraw(to_, tokenAddress_, balance);

        }

        return true;
    }
}

// File: contracts/nft/MyNft.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.3.2 (token/ERC721/ERC721.sol)
pragma solidity >=0.8.0;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/interfaces/IERC2981.sol";

import "../utils/RoyaltyReceiverFactory.sol";


/**
 * @title The magical MyNFT contract.
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract MyNft is Context, ERC165, IERC721, IERC721Metadata, Ownable, IERC2981 {
    using Address for address;
    using Strings for uint256;

    // ---- OWN VARIABLES ----

    address public minter;

    string private _baseURI = "https://backend.magicyearn.io/nfts/BSC/";
    string private _suffix = ".json";

	uint256 public idCount = 1;
    uint256 public totalSupply;
	
    mapping(uint256 => address) public royaltyReceiver;
    mapping(uint256 => uint256) public royaltyNominator;

    uint256 public constant ROYALTY_DENOMINATOR = 10000;

    mapping(uint256 => string) public idDNA;
    mapping(string => uint256) public dnaID;

    struct NftStakes {
        uint256 pixels;
        uint256 startStakePerPixel;
        bool isFree;
    }

    mapping(uint256 => NftStakes) public nftStakes;

    struct Collection {
        address creator;
        uint256[] nftIds;
        bool exists;
    }

    struct mintParameters {
        address to;
        string picHash;
        string collectionName;
        uint256 royaltyNominator;
        address[] payees;
        uint256[] shares;
        uint256 pixels;
        uint256 actualStakePerPixel;
        address nftCreator;
    }

    mapping(string => Collection) public collectionInfo;
    mapping(uint256 => string) public collectionOfNft;
    mapping(address => string[]) private _collectionsOfUser;

    address public RoyaltyReceiverFactoryAddr;

    // ---- ERC VARIABLES ----

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    event SetUpRoyalty(uint nftId, address royaltyReceiver, uint royaltyNominator);
    event SetBaseURI(string newURI);
    event SetURISuffix(string newURISuffix);
    event SetMinter(address newMinter);

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_, address RoyaltyReceiverFactory_) {
        require(RoyaltyReceiverFactory_ != address(0), "MyNFT: RoyaltyReceiverFactory can't be the zero address.");
        _name = name_;
        _symbol = symbol_;
        RoyaltyReceiverFactoryAddr = RoyaltyReceiverFactory_;
    }

    // ---- OWN FUNCTIONS ----

    function _addCollection(string memory collectionName, uint256 nftId, address nftCreator) internal {
        require(
            (collectionInfo[collectionName].exists &&
                nftCreator == collectionInfo[collectionName].creator) ||
                !collectionInfo[collectionName].exists ||
                keccak256(abi.encode(collectionName)) ==
                keccak256(abi.encode("Magic Yearn Users Collection")),
            "myNFT: This Collection already exists and you are not the the Collection-Creator."
        );

        if (!collectionInfo[collectionName].exists) {
            collectionInfo[collectionName].creator = nftCreator;
            collectionInfo[collectionName].exists = true;
            _collectionsOfUser[nftCreator].push(collectionName);
        }

        collectionInfo[collectionName].nftIds.push(nftId);
        collectionOfNft[nftId] = collectionName;
    }

    function getNFTIdsOfCollection(string memory collectionName) external view returns (uint256[] memory) {
        return collectionInfo[collectionName].nftIds;
    }

    function collectionsOfUser(address user) external view returns (string[] memory) {
        uint256 totalLength = _collectionsOfUser[user].length;

        string[] memory toReturn = new string[](totalLength);

        for (uint256 i = 0; i < _collectionsOfUser[user].length; i++) {
            toReturn[i] = _collectionsOfUser[user][i];
        }

        return toReturn;
    }

    /**
     * Mints new ERC721 for a user in exchange of tokens.
	 *
     * @param tokenId id of the nft
     * @param nominator Nominator to calculate the roaylties
     * @param payees_ array of royalty receiver addresses (addresses that can claim on the payment splitter contract)
     * @param shares_ array of royalty shares (the sum of all entries are the total shares or denominator, one entrie represent the nominator of the one)
     */

    function _setUpRoyalty(uint256 tokenId, uint256 nominator, address[] memory payees_, uint256[] memory shares_) internal {
        require(nominator <= ROYALTY_DENOMINATOR, "MyNFT: Royalty nominator can't be bigger than the denominator of 10000.");

        if (payees_.length != 0) {
            royaltyReceiver[tokenId] = RoyaltyReceiverFactory(RoyaltyReceiverFactoryAddr).createRoyaltyReceiver(payees_, shares_);
            royaltyNominator[tokenId] = nominator;
            emit SetUpRoyalty(tokenId, address(royaltyReceiver[tokenId]), royaltyNominator[tokenId]);
        }
    }

	/**
     * Sets royalty receiver factory contract.
	 *
     * @param newAdr royalty receiver factory address
     */
    function changeRoyaltyReceiverFactory(address newAdr) external onlyOwner {
        require(newAdr != address(0), "MyNFT: RoyaltyReceiverFactory can't be the zero address.");
        RoyaltyReceiverFactoryAddr = newAdr;
    }

	/**
     * Returns pixel amount.
	 *
	 * @param tokenId nft id
     * @return uint256 pixels
     */
    function pixelForId(uint256 tokenId) external view returns (uint256) {
        return nftStakes[tokenId].pixels;
    }

	/**
     * Returns isFree status.
	 *
	 * @param tokenId nft id
     * @return bool isFree
     */
    function isFree(uint256 tokenId) external view returns (bool) {
        return nftStakes[tokenId].isFree;
    }

	/**
     * Returns pixel amount.
	 *
	 * @param tokenId nft id
     * @return uint256 start stake per pixel
     */
    function startShareForId(uint256 tokenId) external view returns (uint256) {
        return nftStakes[tokenId].startStakePerPixel;
    }

    /**
     * Sets the new base uri.
	 *
     * @param newURI_ new uri
     */
    function setBaseURI(string memory newURI_) external onlyOwner {
        _baseURI = newURI_;

        emit SetBaseURI(_baseURI);
    }

    /**
     * Sets the new suffix for the uri.
	 *
     * @param newSuffix_ new uri suffix
     */
    function setURISuffix(string memory newSuffix_) external onlyOwner {
        _suffix = newSuffix_;

        emit SetURISuffix(_suffix);
    }

    /**
     * Sets the new minter contract address.
	 *
     * @param newMinter_ new minter contract address
	 * @return address minter address
     */
    function setMinter(address newMinter_) external onlyOwner returns (address) {
        minter = newMinter_;

        emit SetMinter(minter);

        return minter;
    }

    /**
     * Mints new ERC721 MyInk nft for a user in exchange for tokens.
	 *
     * @param param mint parameters
     * @return newId nft id
     */
    function mint(mintParameters memory param) external returns (uint256 newId) {
        require(msg.sender == minter, "mint: You are not the minter()");

        _setUpRoyalty(idCount, param.royaltyNominator, param.payees, param.shares);
        _mint(param.to, idCount, param.picHash, param.pixels, param.actualStakePerPixel, false);

        param.collectionName = keccak256(abi.encode(param.collectionName)) ==
            keccak256(abi.encode(""))
            ? "Magic Yearn Users Collection"
            : param.collectionName;

        _addCollection(param.collectionName, idCount, param.nftCreator);

        newId = idCount;

        idCount += 1;
    }

    /**
     * Mints new ERC721 MyFreeInk nft for a user in exchange for tokens.
	 *
     * @param param mint parameters
     * @return newId nft id
     */
    function mintFree(mintParameters memory param) external returns (uint256 newId) {
        require(msg.sender == minter, "mintByMinter: You are not the minter()");

        _setUpRoyalty(idCount, param.royaltyNominator, param.payees, param.shares);
        _mint(param.to, idCount, param.picHash, param.pixels, 0, true);

        param.collectionName = keccak256(abi.encode(param.collectionName)) ==
            keccak256(abi.encode(""))
            ? "Magic Yearn Users Collection"
            : param.collectionName;

        _addCollection(param.collectionName, idCount, param.nftCreator);

        newId = idCount;

        idCount += 1;
    }

    /**
     * Burns a nft.
	 *
     * @param tokenId nft ids
     * @return bool true if burnt
     */
    function burn(uint256 tokenId) external returns (bool) {
        require(_msgSender() == minter, "burn: You are not allowed to burn the nft. (Use the Minter)");
        require(_isApprovedOrOwner(_msgSender(), tokenId), "burn: NFT not approved");

        _burn(tokenId);

        return true;
    }

    /**
     * Calls {IERC721-safeTransferFrom} in a loop.
	 *
     * @param from_ address of the sender
     * @param to_ address of recipient
     * @param ids_ ids of the nfts
     */
    function safeBulkTransfer(address from_, address to_, uint256[] memory ids_) public {
        safeBulkTransfer(from_, to_, ids_, "");
    }

	/**
     * Calls {IERC721-safeTransferFrom} in a loop.
	 *
     * @param from_ address of the sender
     * @param to_ address of recipient
     * @param ids_ ids of the nfts
	 * @param data_ data
     */
    function safeBulkTransfer(address from_, address to_, uint256[] memory ids_, bytes memory data_) public {
        require(to_ != address(0), "safeBulkTransfer: transfer to the zero address");

        uint256 tokenId;

        for (uint256 i = 0; i < ids_.length; i++) {
            tokenId = ids_[i];
            safeTransferFrom(from_, to_, tokenId, data_);
        }
    }

    // ---- ERC FUNCTIONS ----

    /**
     * @dev See {IERC2981-supportsInterface}.
     */
    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view override returns (address receiver, uint256 royaltyAmount){
        receiver = royaltyReceiver[tokenId];
        royaltyAmount = salePrice * royaltyNominator[tokenId] / ROYALTY_DENOMINATOR;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            interfaceId == type(IERC2981).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner_) public view virtual override returns (uint256) {
        require(owner_ != address(0), "ERC721: balance query for the zero address");
        return _balances[owner_];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner_ = _owners[tokenId];
        require(owner_ != address(0), "ERC721: owner query for nonexistent token");
        return owner_;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI;
        string memory suffix = _suffix;
        string memory tempString0 = string(abi.encodePacked(baseURI, tokenId.toString()));
        string memory tempString1 = string(abi.encodePacked(tempString0, suffix));
        return bytes(baseURI).length > 0 ? tempString1 : "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner_ = MyNft.ownerOf(tokenId);
        require(to != owner_, "ERC721: approval to current owner");

        require(
            _msgSender() == owner_ || isApprovedForAll(owner_, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner_, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner_][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    function isApprovedOrOwner(address spender, uint256 tokenId) external view virtual returns (bool) {
        return _isApprovedOrOwner(spender, tokenId);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner_ = MyNft.ownerOf(tokenId);
        return (spender == owner_ || getApproved(tokenId) == spender || isApprovedForAll(owner_, spender));
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId, string memory picHash, uint pixels_, uint actualStakePerPixel, bool isFree_) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");
        require(dnaID[picHash] == 0, "MyNFT: hash already in use");

        _beforeTokenTransfer(address(0), to, tokenId);

        idDNA[tokenId] = picHash;
        dnaID[picHash] = tokenId;

        nftStakes[tokenId].pixels = pixels_;
        nftStakes[tokenId].startStakePerPixel = actualStakePerPixel;
        nftStakes[tokenId].isFree = isFree_;

        _balances[to] += 1;
        _owners[tokenId] = to;
        totalSupply += 1;

        emit Transfer(address(0), to, tokenId);
    }

    function migrate(uint tokenId, uint actualStakePerPixel) external {
        require(_isApprovedOrOwner(_msgSender(), tokenId),"MyNFT migrate: NFT not approved");
        require(_msgSender() == minter, "MyNFT migrate: You are not allowed to migrate the nft. (Use the Minter)");
        require(nftStakes[tokenId].isFree, "MyNFT migrate: NFT is already migrated.");

        nftStakes[tokenId].isFree = false;
        nftStakes[tokenId].startStakePerPixel = actualStakePerPixel;        
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner_ = MyNft.ownerOf(tokenId);

        _beforeTokenTransfer(owner_, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner_] -= 1;
        delete _owners[tokenId];
        totalSupply -= 1;
        nftStakes[tokenId].pixels = 0;

        emit Transfer(owner_, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(MyNft.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(MyNft.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits a {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner_,
        address operator,
        bool approved
    ) internal virtual {
        require(owner_ != operator, "ERC721: approve to caller");
        _operatorApprovals[owner_][operator] = approved;
        emit ApprovalForAll(owner_, operator, approved);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// File: contracts/token/MyInk.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


/**
 * @title The magical MyInk and MyFreeInk token contract.
 * @dev Simple ERC20 token which counts for MyInk how many tokens are already used for nfts.
 */
contract MyInk is Context, ERC20, Ownable {
    // Only one address is allowed to mint MyInk and MyFreeInk tokens.
    address public minter;

    // Counter which holds the used amount for minting MyInk nfts.
    // The counter is used to calculate the current rewards for burning an MyInk nft.
    uint256 public usedForMint;

    event ChangeMinter(address oldMinterAddress, address newMinterAddress);
    event AddUsedForMint(uint amount, uint usedAfterAdd);
    event SubUsedForMint(uint amount, uint usedAfterSub);


    /**
     * Creates the MyInk token.
     *
     * @param minterAdr address of the minter contract.
     * @param name name of the MyInk tokens. Magic Yearn Free Ink, Magic Yearn Ink -> Set by the minter.
     * @param symbol Ticker/Symbol of the Tokens -> MyFreeInk, MyInk.
     */
    constructor(address minterAdr, string memory name, string memory symbol) ERC20(name, symbol) {
        require(minterAdr != address(0), "MyInk: Minter can't be the zero address.");
        minter = minterAdr;
    }

    /**
     * Increments the "used for mint amount".
	 * This amount can be different to the actual amount used.
     * Because of the MyFreeInk nft to MyInk nft migration.
     *
     * @notice See /minter/MyInkMinter.sol
     *
     * @param amount amount to increment the counter
     */
    function addUsedForMint(uint amount) external { 
        require(msg.sender == minter, "MyInk addUsedForMint: You are not allowed to add tokens");

        usedForMint += amount;

        emit AddUsedForMint(amount, usedForMint);
    }

    /**
     * Decrements the "used for mint amount".
	 * This amount can be different to the actual amount used.
     * Because of the MyFreeInk nft to MyInk nft migration.
     *
     * @notice See /minter/MyInkMinter.sol
     *
     * @param amount Amount to decrease the counter.
     */
    function subUsedForMint(uint amount) external {
        require(msg.sender == minter, "MyInk subUsedForMint: You are not allowed to sub tokens");
        require(amount <= usedForMint, "MyInk subUsedForMint: Substraction overflow.");
        
        usedForMint -= amount;

        emit SubUsedForMint(amount, usedForMint);
    }

    /**
     * Changing the contract address which is allowed to mint MyInk or MyFreeInk.
     *
     * @dev If this function is used, you need to make sure the "old" minting contract passes/calls all important values/functions
     *      and token to the new one.
     *
     * @notice See /minter/MyInkMinter.sol.
     *
     * @param newMinter new minter contract address
     */
    function changeMinter(address newMinter) external onlyOwner {
        require(newMinter != address(0), "MyInk: Minter can't be the zero address.");

        address oldMinter = minter;

        minter = newMinter;
        emit ChangeMinter(oldMinter, minter);
    }

    /**
     * Mints new tokens.
     *
     * @notice See /minter/MyInkMinter.sol.
     *
     * @param to address of receiver
     * @param amount number representing the receive amount
     */
    function mint(address to, uint256 amount) external {
        require(msg.sender == minter, "MyInk mint: You are not allowed to mint tokens");

        _mint(to, amount);
    }

    /**
     * Burns tokens.
     *
     * @notice See /minter/MyInkMinter.sol.
     *
     * @param amount number representing the receive amount
     */
    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }

    /**
     * Decimals are set to 0.
	 * Because there is no need to split the tokens. 1 token = 1 pixel to draw.
     *
     * @notice See: /minter/MyInkMinter.sol, /nft/MyNft.sol
	 * @return uint8 decimals
     */
    function decimals() public pure override returns (uint8) {
        return 0;
    }
}

// File: contracts/utils/RoyaltyReceiver.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "@openzeppelin/contracts/finance/PaymentSplitter.sol";


contract RoyaltyReceiver is PaymentSplitter {
    constructor(address[] memory payees, uint256[] memory shares_) payable PaymentSplitter(payees, shares_) {}
}


// File: contracts/utils/RoyaltyReceiverFactory.sol

// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "./RoyaltyReceiver.sol";
import "@openzeppelin/contracts/access/Ownable.sol";


contract RoyaltyReceiverFactory is Ownable {
    constructor() {}

    mapping(address => address[]) private _royaltyReceiverOfUsers;

    event CreateRoyaltyReceiver(address royaltyReceiverAddress, address userAddress);

    function createRoyaltyReceiver(address[] memory payees_, uint256[] memory shares_) external returns (address) {
        RoyaltyReceiver temp = new RoyaltyReceiver(payees_, shares_);

        for (uint i = 0; i < payees_.length; i++) {
            _royaltyReceiverOfUsers[payees_[i]].push(address(temp));
            emit CreateRoyaltyReceiver(address(temp), payees_[i]);
        }

        return address(temp);
    }

    function royaltyReceiverOfUsers(address user) external view returns (address[] memory) {
        uint256 totalLength = _royaltyReceiverOfUsers[user].length;

        address[] memory toReturn = new address[](totalLength);

        for (uint256 i = 0; i < _royaltyReceiverOfUsers[user].length; i++) {
            toReturn[i] = _royaltyReceiverOfUsers[user][i];
        }

        return toReturn;
    }
}
