{"IDEALBase.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IPancakeswapV2Pair.sol\";\r\nimport \"./ISwapRouter.sol\";\r\nimport \"./ISwapFactory.sol\";\r\nimport \"./TokenDistributor.sol\";\r\n\r\nabstract contract IDEALBase is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    address private teamAddress;\r\n    address private fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private minPeriod = 10 minutes;\r\n    uint256 private distributorGas = 300000;\r\n\r\n    uint256 private teamFee = 100;\r\n    uint256 private directFee = 200;\r\n    uint256 private nodesFee = 100;\r\n    uint256 private lpFee = 100;\r\n    uint256 private burnFee = 100;\r\n\r\n    address public mainPair;\r\n\r\n    mapping(address =\u003e bool) private _feeWhiteList;\r\n    mapping(address =\u003e address) private _leader;\r\n    mapping(address =\u003e address[]) private _directPush;\r\n    mapping(address =\u003e bool) private _isNode;\r\n\r\n\r\n    address[] private shareholders;\r\n    uint256 private currentIndex;\r\n    mapping(address =\u003e bool) private _updated;\r\n    mapping(address =\u003e uint256) private shareholderIndexes;\r\n\r\n\r\n    uint256 public LPRewardLastSendTime = block.timestamp;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 public destroyTotal;\r\n\r\n    ISwapRouter private _swapRouter;\r\n    bool private inSwap;\r\n    uint256 private numTokensSellToFund;\r\n\r\n    TokenDistributor public _tokenDistributor;\r\n    address private usdt;\r\n\r\n    uint256 private startTradeBlock;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply, address TeamAddress, address FundAddress){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n        mainPair = ISwapFactory(_swapRouter.factory()).createPair(address(this), usdt);\r\n\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n        IERC20(usdt).approve(address(_swapRouter), MAX);\r\n\r\n\r\n        _tTotal = Supply * 10 ** _decimals;\r\n\r\n        _balances[FundAddress] = _tTotal;\r\n        emit Transfer(address(0), FundAddress, _tTotal);\r\n\r\n\r\n        teamAddress = TeamAddress;\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[fundAddress] = true;\r\n        _feeWhiteList[teamAddress] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"approve from the zero address\");\r\n        require(spender != address(0), \"approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private returns (bool) {\r\n        require(from != address(0), \"Transfer from the zero address\");\r\n        require(to != address(0), \"Transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (inSwap) {\r\n            return _takeTransfer(from, to, amount);\r\n        } else {\r\n            _beforeTokenTransfer(from, to, amount);\r\n\r\n\r\n            if(from != mainPair \u0026\u0026 to != mainPair) {\r\n                return _takeTransfer(from, to, amount);\r\n            }\r\n\r\n            _tokenTransfer(from, to, amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (\r\n            getLeader(to) == address(0) \u0026\u0026\r\n            amount \u003e= 1 \u0026\u0026\r\n            from != to \u0026\u0026\r\n            from != address(this) \u0026\u0026\r\n            to != address(this) \u0026\u0026\r\n            from != address(0) \u0026\u0026\r\n            to != address(0) \u0026\u0026\r\n            !_feeWhiteList[address(from)] \u0026\u0026\r\n            !_feeWhiteList[address(to)]\r\n        ) {\r\n            if (mainPair != from \u0026\u0026 mainPair != to) {\r\n                bool verify_leader_valid = _verify_leader_valid(to, from);\r\n                if (verify_leader_valid) {\r\n                    _directPush[from].push(to);\r\n                    _leader[to] = from;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private returns (bool) {\r\n        uint256 feeAmount = 0;\r\n        bool takeFree = false;\r\n\r\n        // sell\r\n        if(recipient == mainPair) {\r\n            if(_feeWhiteList[sender]) {\r\n                return _takeTransfer(sender, recipient, tAmount);\r\n            } else {\r\n                takeFree = true;\r\n                feeAmount = tAmount * (directFee + lpFee + teamFee + nodesFee) / 10000;\r\n                if(feeAmount \u003e 0) {\r\n                    _takeTransfer(sender, address(this), feeAmount);\r\n\r\n                    numTokensSellToFund = feeAmount;\r\n\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if(contractTokenBalance \u003e 0) {\r\n                        if (numTokensSellToFund \u003e contractTokenBalance) {\r\n                            numTokensSellToFund = contractTokenBalance;\r\n                        }\r\n                        swapTokenForFund(numTokensSellToFund, sender, false);\r\n\r\n                        if (LPRewardLastSendTime.add(minPeriod) \u003c= block.timestamp) {\r\n                            process(distributorGas, false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if(sender == mainPair) {\r\n            if(_feeWhiteList[recipient]) {\r\n                return _takeTransfer(sender, recipient, tAmount);\r\n            } else {\r\n                takeFree = true;\r\n                feeAmount = tAmount * (directFee + lpFee + teamFee + nodesFee) / 10000;\r\n                if(feeAmount \u003e 0) {\r\n                    _takeTransfer(sender, address(this), feeAmount);\r\n\r\n                    numTokensSellToFund = feeAmount;\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if(contractTokenBalance \u003e 0) {\r\n                        if (numTokensSellToFund \u003e contractTokenBalance) {\r\n                            numTokensSellToFund = contractTokenBalance;\r\n                        }\r\n\r\n                        swapTokenForFund(numTokensSellToFund, recipient, true);\r\n\r\n                        if (LPRewardLastSendTime.add(minPeriod) \u003c= block.timestamp ) {\r\n                            process(distributorGas, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(takeFree) {\r\n            uint256 burnAmount = tAmount * (burnFee) / 10000;\r\n            if(burnAmount \u003e 0) {\r\n                destroyTotal = destroyTotal.add(burnAmount);\r\n                _takeTransfer(sender, DEAD, burnAmount);\r\n            }\r\n\r\n            feeAmount = feeAmount + burnAmount;\r\n        }\r\n\r\n        return _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, address account, bool autos) private lockTheSwap {\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 newBalance = 0;\r\n        if(autos) {\r\n            newBalance = tokenAmount;\r\n            if(newBalance \u003e 0) {\r\n                address from = address(this);\r\n                uint256 nowTeamFee = 1;\r\n\r\n                address _leaderAddress = getLeader(account);\r\n                if(_leaderAddress == address(0)) {\r\n                    nowTeamFee = nowTeamFee + 2;\r\n                } else {\r\n                    uint256 _leaderAmount = newBalance / 5 * 2;\r\n                    if(_leaderAmount \u003e 0) {\r\n                        _takeTransfer(from, _leaderAddress, _leaderAmount);\r\n                    }\r\n                }\r\n\r\n                address _nodeAddress = getNoder(account);\r\n                if(_nodeAddress == address(0)) {\r\n                    nowTeamFee = nowTeamFee + 1;\r\n                } else {\r\n                    uint256 _nodeAmount = newBalance / 5 * 1;\r\n                    if(_nodeAmount \u003e 0) {\r\n                        _takeTransfer(from, _nodeAddress, _nodeAmount);\r\n                    }\r\n                }\r\n\r\n                uint256 _teamAmount = newBalance / 5 * nowTeamFee;\r\n                if(_teamAmount \u003e 0) {\r\n                    _takeTransfer(from, teamAddress, _teamAmount);\r\n                }\r\n\r\n            }\r\n        } else {\r\n            swapTokensForUsdt(tokenAmount);\r\n            address tokenDistributor = address(_tokenDistributor);\r\n\r\n            newBalance = USDT.balanceOf(tokenDistributor);\r\n            if(newBalance \u003e 0) {\r\n                USDT.transferFrom(tokenDistributor, address(this), newBalance);\r\n                //uint256 totalUsdtFee = directFee + lpFee + teamFee + nodesFee;\r\n                uint256 nowTeamFee = 1;\r\n\r\n                address _leaderAddress = getLeader(account);\r\n                if(_leaderAddress == address(0)) {\r\n                    nowTeamFee = nowTeamFee + 2;\r\n                } else {\r\n                    uint256 _leaderAmount = newBalance / 5 * 2;\r\n                    if(_leaderAmount \u003e 0) {\r\n                        USDT.transfer(_leaderAddress, _leaderAmount);\r\n                    }\r\n                }\r\n\r\n                address _nodeAddress = getNoder(account);\r\n                if(_nodeAddress == address(0)) {\r\n                    nowTeamFee = nowTeamFee + 1;\r\n                } else {\r\n                    uint256 _nodeAmount = newBalance / 5 * 1;\r\n                    if(_nodeAmount \u003e 0) {\r\n                        USDT.transfer(_nodeAddress, _nodeAmount);\r\n                    }\r\n                }\r\n\r\n                uint256 _teamAmount = newBalance / 5 * nowTeamFee;\r\n                if(_teamAmount \u003e 0) {\r\n                    USDT.transfer(teamAddress, _teamAmount);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        setShare(account);\r\n\r\n    }\r\n\r\n\r\n    function swapTokensForUsdt(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function process(uint256 gas, bool autos) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        uint256 tokenBalance = 0;\r\n        IERC20 USDT = IERC20(usdt);\r\n\r\n        if(!autos) {\r\n            tokenBalance = USDT.balanceOf(address(this));\r\n        } else {\r\n            tokenBalance = balanceOf(address(this));\r\n        }\r\n\r\n        if (0 == tokenBalance) {\r\n            return;\r\n        }\r\n\r\n        IERC20 mainpairs = IERC20(mainPair);\r\n        uint totalPair = mainpairs.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        while (gasUsed \u003c gas \u0026\u0026 iterations \u003c shareholderCount) {\r\n            if (currentIndex \u003e= shareholderCount) {\r\n                currentIndex = 0;\r\n                return;\r\n            }\r\n\r\n            shareHolder = shareholders[currentIndex];\r\n            pairBalance = mainpairs.balanceOf(shareHolder);\r\n\r\n            if (pairBalance \u003e 0) {\r\n                amount = tokenBalance * pairBalance / totalPair;\r\n                if (amount \u003e 0) {\r\n                    if(!autos) {\r\n                        USDT.transfer(shareHolder, amount);\r\n                    } else {\r\n                        _takeTransfer(address(this), shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        LPRewardLastSendTime = block.timestamp;\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            tAmount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function isFeeWhiteList(address addr) external view returns (bool){\r\n        return _feeWhiteList[addr];\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function setMinPeriod(uint256 number) external onlyOwner {\r\n        minPeriod = number;\r\n    }\r\n\r\n    function getTokenDistributor() view external onlyOwner returns (address) {\r\n        return address(_tokenDistributor);\r\n    }\r\n\r\n    function claimBalance() external onlyOwner {\r\n        require(address(this).balance \u003e 0, \"Insufficient balance\");\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address _token, uint256 amount) external onlyOwner {\r\n        require(IERC20(_token).balanceOf(address(this)) \u003e 0, \"Insufficient contract balance\");\r\n        IERC20(_token).transfer(fundAddress, amount);\r\n    }\r\n\r\n    function claimTokenfrom(uint256 amount) external onlyOwner {\r\n        IERC20 USDT = IERC20(usdt);\r\n        require(USDT.balanceOf(address(_tokenDistributor)) \u003e 0, \"Insufficient contract balance\");\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), amount);\r\n    }\r\n\r\n    function updateDistributorGas(uint256 newValue) external onlyOwner {\r\n        require(\r\n            newValue \u003e= 100000 \u0026\u0026 newValue \u003c= 500000,\r\n            \"distributorGas must be between 200,000 and 500,000\"\r\n        );\r\n        require(\r\n            newValue != distributorGas,\r\n            \"Cannot update distributorGas to same value\"\r\n        );\r\n        distributorGas = newValue;\r\n    }\r\n\r\n    function getReserves() public view returns (uint112 reserve0, uint112 reserve1)\r\n    {\r\n        (reserve0, reserve1, ) = IPancakeswapV2Pair(mainPair).getReserves();\r\n    }\r\n\r\n    function getLeader(address account) public view returns (address) {\r\n        if(_leader[account] != address(0)) return address(_leader[account]);\r\n        return address(0);\r\n    }\r\n\r\n    function get_direct_push(address account) public view returns (address[] memory)\r\n    {\r\n        return _directPush[account];\r\n    }\r\n\r\n    function isNoder(address addr) external view returns (bool){\r\n        return _isNode[addr];\r\n    }\r\n\r\n    function setNoder(address addr, bool isNode) external onlyOwner {\r\n        _isNode[addr] = isNode;\r\n    }\r\n\r\n    function setTeamAddr(address addr) external onlyOwner {\r\n        teamAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFundAddr(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setLeader(\r\n        address from,\r\n        address to\r\n    ) external onlyOwner {\r\n        bool verify_leader_valid = _verify_leader_valid(to, from);\r\n        if (verify_leader_valid) {\r\n            _directPush[from].push(to);\r\n            _leader[to] = from;\r\n        }\r\n    }\r\n\r\n    function _verify_leader_valid(address from, address to) internal view returns (bool)\r\n    {\r\n        address to_leader = getLeader(to);\r\n        if (to_leader == address(0)) {\r\n            return true;\r\n        }\r\n        if (to_leader == from) {\r\n            return false;\r\n        }\r\n        return _verify_leader_valid(from, to_leader);\r\n    }\r\n\r\n    function getNoder(address account) public view returns (address)\r\n    {\r\n        address to_leader = getLeader(account);\r\n\r\n        if (to_leader == address(0)) {\r\n            return address(0);\r\n        }\r\n\r\n        if (to_leader == account) {\r\n            return address(0);\r\n        }\r\n\r\n        if (_isNode[to_leader]) {\r\n            return address(to_leader);\r\n        }\r\n\r\n        return getNoder(to_leader);\r\n    }\r\n\r\n\r\n    function resetLPRewardLastSendTime() external onlyOwner  {\r\n        LPRewardLastSendTime = 0;\r\n    }\r\n\r\n    function set_lp(address lpaddr) external onlyOwner returns(bool) {\r\n        return setShare(lpaddr);\r\n    }\r\n\r\n    function setShare(address shareholder) private returns(bool){\r\n        if (_updated[shareholder]) {\r\n            if (IERC20(mainPair).balanceOf(shareholder) == 0) {\r\n                quitShare(shareholder);\r\n                return false;\r\n            }\r\n        }\r\n        if (IERC20(mainPair).balanceOf(shareholder) == 0) return false;\r\n        addShareholder(shareholder);\r\n        _updated[shareholder] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) private {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n        shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n        shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function getLpHolder(uint256 index) view external onlyOwner() returns(address, uint256) {\r\n        if(shareholders.length \u003e 0) {\r\n            return (shareholders[index], shareholders.length);\r\n        }\r\n\r\n        return (address(0), 0);\r\n    }\r\n}\r\n"},"IDEALToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./IDEALBase.sol\";\r\n\r\n\r\ncontract IDEALToken is IDEALBase {\r\n    constructor(address TeamAddress, address FundAddress) IDEALBase(\r\n        \"IDEAL Token\",\r\n        \"DEA\",\r\n        18,\r\n        10000,\r\n        address(TeamAddress),\r\n        address(FundAddress)\r\n    ) {}\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IPancakeswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IPancakeswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"},"ISwapFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ISwapFactory {\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n"},"ISwapRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ISwapRouter {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership(bool ship) public virtual onlyOwner {\r\n        if(ship == true) {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c \u003c a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b \u003e a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n\r\n\r\n\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b \u003c= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b \u003e 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b \u003e 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n"},"TokenDistributor.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ncontract TokenDistributor {\r\n\r\n    constructor (address token) {\r\n\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n"}}