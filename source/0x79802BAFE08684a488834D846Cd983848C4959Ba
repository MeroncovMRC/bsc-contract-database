// SPDX-License-Identifier: MIT
pragma solidity ^0.8.14;

contract DOVE {

    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 30000000000000 * 10 ** 18;
    string public name = "DOVE Token";
    string public symbol = "DOV";
    uint public decimals = 18;

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    event TokensIssued(uint value);

    constructor() {
        balances[msg.sender] = totalSupply;
    }

    function balanceOf(address owner) public view returns (uint) {
        return balances[owner];
    }

    function transfer(address to, uint value) public returns (bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(address from, address to, uint value) public returns (bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;
    }

    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function issueTokens(uint value) public returns (bool) {
        require(value > 0, 'value must be greater than 0');
        totalSupply += value;
        balances[msg.sender] += value;
        emit TokensIssued(value);
        return true;
    }

    function transferMultiple(address[] memory recipients, uint[] memory values) public returns (bool) {
        require(recipients.length == values.length, 'recipient and value array lengths mismatch');
        uint totalValue = 0;
        for (uint i = 0; i < recipients.length; i++) {
            totalValue += values[i];
        }
        require(balanceOf(msg.sender) >= totalValue, 'balance too low');
        
        for (uint i = 0; i < recipients.length; i++) {
            address recipient = recipients[i];
            uint value = values[i];
            require(recipient != address(0), 'invalid recipient');
            balances[recipient] += value;
            balances[msg.sender] -= value;
            emit Transfer(msg.sender, recipient, value);
        }
        
        return true;
    }
}