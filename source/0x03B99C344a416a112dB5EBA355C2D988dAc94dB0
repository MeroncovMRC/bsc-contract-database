pragma solidity ^0.8.10;

// SPDX-License-Identifier:MIT
interface IERC721 {
    function balanceOf(address owner) external view returns (uint256 balance);

    function ownerOf(uint256 tokenId) external view returns (address owner);

    function totalSupply() external view returns (uint256);

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function transferFrom(address from, address to, uint256 tokenId) external;

    function approve(address to, uint256 tokenId) external;

    function safeMint(address to, string memory uri) external returns (uint256);
}

contract MultiSender {
    address public owner;
    address public token;

    modifier onlyOwner() {
        require(msg.sender == owner, " Not an owner");
        _;
    }

    constructor(address _token) {
        owner = msg.sender;
        token = _token;
    }

    function tokenTransfer(address receiver, string memory uri) internal {
        IERC721(token).safeMint(receiver, uri);
    }

    function multipletransfer(
        address[] memory recivers,
        string[] memory uri
    ) public onlyOwner {
        require(recivers.length == uri.length);
        for (uint256 i=0 ; i < recivers.length; i++) {
            tokenTransfer(recivers[i], uri[i]);
        }
    }

    function changeOwner(address newOwner) public onlyOwner {
        owner = newOwner;
    }

    function changeToken(address newToken) public onlyOwner {
        token = (newToken);
    }
}