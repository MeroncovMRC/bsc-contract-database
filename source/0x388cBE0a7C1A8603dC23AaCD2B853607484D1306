// SPDX-License-Identifier: UNLICENSED
// File: @openzeppelin/contracts@4.8.1/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: IPancakeRouter01.sol


pragma solidity >=0.6.2;

interface IPancakeRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
}

// File: IPancakeRouter02.sol


pragma solidity >=0.6.2;


interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

// File: Swapper.sol


pragma solidity ^0.8.0;



contract Swapper {
    IPancakeRouter02 public pancakeRouter;
    uint256 public scalingFactor;
    
    event SomethingHappened(uint256 amount, string message);

    constructor(address _pancakeRouter, uint256 _scalingFactor) {
        pancakeRouter = IPancakeRouter02(_pancakeRouter);
        scalingFactor = _scalingFactor;
    }

    function setScalingFactor(uint256 _scalingFactor) external {
        scalingFactor = _scalingFactor;
    }

    function swap(
        address _token1,
        address _token2,
        address _token3,
        uint256 token1Amount,
        uint256 minPercentageGain,
        uint256 deadline
    ) external {
        
        // Transfer token1 from user to this contract
        require(IERC20(_token1).transferFrom(msg.sender, address(this), token1Amount), "Transfer of token1 failed");
        emit SomethingHappened(1, "require(IERC20(_token1).transferFrom(msg.sender, address(this), token1Amount), Transfer of token1 failed);");
        // Approve PancakeSwap Router to spend token1
        require(IERC20(_token1).approve(address(pancakeRouter), token1Amount), "Approval of token1 failed");
        emit SomethingHappened(2, "require(IERC20(_token1).approve(address(pancakeRouter), token1Amount), Approval of token1 failed);");
        // Swap token1 for token2
        address[] memory path1 = new address[](2);
        path1[0] = _token1;
        path1[1] = _token2;

        uint256[] memory amounts1 = pancakeRouter.swapExactTokensForTokens(
            token1Amount,
            0,
            path1,
            address(this),
            deadline
        );
        emit SomethingHappened(3, "uint256[] memory amounts1 = pancakeRouter.swapExactTokensForTokens(token1Amount, 0, path1, address(this), deadline);");

        // Get the received amount of token2
        uint256 token2Amount = amounts1[1];
        require(token2Amount > 0, "Token2 amount is zero");
        emit SomethingHappened(4, "require(token2Amount > 0, Token2 amount is zero);");
        // Approve PancakeSwap Router to spend token2
        require(IERC20(_token2).approve(address(pancakeRouter), token2Amount), "Approval of token2 failed");
        emit SomethingHappened(5, "require(IERC20(_token2).approve(address(pancakeRouter), token2Amount), Approval of token2 failed);");
        // Swap token2 for token3
        address[] memory path2 = new address[](2);
        path2[0] = _token2;
        path2[1] = _token3;

        uint256[] memory amounts2 = pancakeRouter.swapExactTokensForTokens(
            token2Amount,
            0,
            path2,
            address(this),
            deadline
        );
        emit SomethingHappened(6, "uint256[] memory amounts2 = pancakeRouter.swapExactTokensForTokens(token2Amount, 0, path2, address(this), deadline);");
        // Get the received amount of token3
        uint256 token3Amount = amounts2[1];
        require(token3Amount > 0, "Token3 amount is zero");
        emit SomethingHappened(7, "require(token3Amount > 0, Token3 amount is zero);");
        // Approve PancakeSwap Router to spend token3
        require(IERC20(_token3).approve(address(pancakeRouter), token3Amount), "Approval of token3 failed");
        emit SomethingHappened(8, "require(IERC20(_token3).approve(address(pancakeRouter), token3Amount), Approval of token3 failed);");
        // Calculate the minimum acceptable amount of token1 to receive
        uint256 minFinalToken1Amount = token1Amount / scalingFactor * minPercentageGain;
        emit SomethingHappened(9, "uint256 minFinalToken1Amount = token1Amount / scalingFactor * minPercentageGain;");
        // Swap token3 for token1
        address[] memory path3 = new address[](2);
        path3[0] = _token3;
        path3[1] = _token1;

        uint256[] memory amounts3 = pancakeRouter.swapExactTokensForTokens(
            token3Amount,
            minFinalToken1Amount,
            path3,
            msg.sender,
            deadline
        );
        emit SomethingHappened(10, "uint256[] memory amounts3 = pancakeRouter.swapExactTokensForTokens(token3Amount, minFinalToken1Amount, path3, msg.sender, deadline);");
        // Transfer the remaining token1 to the user
        uint256 remainingToken1Amount = token1Amount - amounts3[0];
        emit SomethingHappened(11, "uint256 remainingToken1Amount = token1Amount - amounts3[0];");
        if (remainingToken1Amount > 0) {
            emit SomethingHappened(12, "if (remainingToken1Amount > 0) {");
            require(IERC20(_token1).transfer(msg.sender, remainingToken1Amount), "Transfer of remaining token1 failed");
            emit SomethingHappened(13, "require(IERC20(_token1).transfer(msg.sender, remainingToken1Amount), Transfer of remaining token1 failed);");
        }
        
        emit SomethingHappened(14, "emit SomethingHappened(14, ");
        
    }

}