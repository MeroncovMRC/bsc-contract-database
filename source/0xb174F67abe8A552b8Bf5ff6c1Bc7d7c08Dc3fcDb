/**
 *Submitted for verification at BscScan.com on 2023-03-13
*/

/**
 *Submitted for verification at BscScan.com on 2023-02-28
*/

/**
 *Submitted for verification at BscScan.com on 2023-02-27
*/

//SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

//[10,20,20,20,50,10,20,20,20,50,10,20,20,20,50,10,20,20,20,50,10,20,20,20,50]
interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastValue;
                // Update the index for the moved value
                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value)
        private
        view
        returns (bool)
    {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index)
        private
        view
        returns (bytes32)
    {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value)
        internal
        returns (bool)
    {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value)
        internal
        returns (bool)
    {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value)
        internal
        view
        returns (bool)
    {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index)
        internal
        view
        returns (bytes32)
    {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set)
        internal
        view
        returns (bytes32[] memory)
    {
        bytes32[] memory store = _values(set._inner);
        bytes32[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value)
        internal
        returns (bool)
    {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value)
        internal
        returns (bool)
    {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value)
        internal
        view
        returns (bool)
    {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index)
        internal
        view
        returns (address)
    {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set)
        internal
        view
        returns (address[] memory)
    {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value)
        internal
        returns (bool)
    {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value)
        internal
        view
        returns (bool)
    {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index)
        internal
        view
        returns (uint256)
    {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set)
        internal
        view
        returns (uint256[] memory)
    {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }
}

contract Referral is Ownable {
    using SafeMath for uint256;
    using EnumerableSet for EnumerableSet.AddressSet;

    uint256 private constant DECIMALS = 10000; // 10000 / 100 = 100. to calculate percent
    uint256 private constant MAX_REFER_DEPTH = 25;
    uint256 private _taxpercentage;



    // structure to hold detail of an account in the system
    struct Account {
        uint256 id;
        uint256 investedTime;
        uint256 investedAmount;
    }

    // structure to hold all necessary meta info of a specific user.
    struct MetaInfo {
        address referrer;
        uint256 registerTime;
        uint256 totalReferredCount;
        uint256 totalInvestedAmount;
    }



    address public defaultReferrer;
    IERC20 public token;

    mapping(address => Account[]) private accountsOf;
    mapping(address => MetaInfo) private metaInfoOf;
    mapping(address => uint256) private rewardOf; // total amount a user can withdraw uptill now.
    mapping(address => uint256) private totalWithdrawnAmountOf; // total amount withdrawn uptill now.
    mapping(address => uint256) private maxActiveInvestmentOf;
    mapping(address => bool) private isOldComer;

    uint256 private marketingAddressesPercentage = 333; // 333 / 100 = 3.33
    // @dev: change this data at the time of real deployment on a blockchain
    uint256 private min_investable_amount = 50e18; // change from 100 -> 100e18
    uint256 private max_investable_amount = 10000e18; // change from 10000 -> 1000e18

    uint256 private totalIDs; // total ids, user registered against them
    EnumerableSet.AddressSet private totalUsers; // total count of users entered in the system

    // array of marketing addresses.
    // on each investment / registration a specified percentage will go to these marketing addresses.
    address[] public marketingAddresses;

    event Registered(
        address referree,
        address referrer,
        uint256 amount,
        uint256 time
    );
    event Invested(address invester, uint256 amount, uint256 time);
    event Withdrawn(address rewardCollector, uint256 amount, uint256 time);



    constructor(
        address _token,
        address _defaultReferrer,
        address[] memory _marketingAddresses
    ) {
        require(_token != address(0), "Referral: Invalid Token address");
        // require(_marketingAddresses.length == 3, "Referral: Invalid merketing addresses array");

        token = IERC20(_token);
        defaultReferrer = _defaultReferrer;
        marketingAddresses = _marketingAddresses;
    }




    // function to register in the system
    // caller should not be default referrer.
    function register(address _referrer, uint256 _amount) external {
        address caller = msg.sender; // to reduce gas cost

        require(
            caller != defaultReferrer,
            "Referral-register: No need for default referrer to register"
        );
        require(_amount > 0, "Referral-register: Invalid amount");
        if (maxActiveInvestmentOf[caller] == 0) {
            require(
                _amount >= min_investable_amount &&
                    _amount <= max_investable_amount,
                "Referral-register: Exceeds Limit"
            );
        } else {
            require(
                _amount >= min_investable_amount &&
                    _amount <= maxActiveInvestmentOf[caller],
                "Referral-register: Excees Limit"
            );
        }
        require(!isOldComer[caller], "Referral-register: Already Registered");
        // referrer checks
        require(
            _referrer != address(0),
            "Referral-register: Referrer address cannot be 0x00"
        );
        require(
            !isCircularReference(_referrer, caller),
            "Referral-register: Referee cannot be one of referrer uplines"
        );

        // take tokens from user
        token.transferFrom(caller, address(this), _amount);

        // create instances of user's data
        Account[] storage userAccounts = accountsOf[caller];
        MetaInfo storage userMetaInfo = metaInfoOf[caller];
        MetaInfo storage parentMetaInfo = metaInfoOf[_referrer];

        // ------initialize data--------//
        // initialize meta information
        isOldComer[caller] = true;
        userMetaInfo.referrer = _referrer;
        userMetaInfo.registerTime = block.timestamp;
        userMetaInfo.totalInvestedAmount = _amount;
        parentMetaInfo.totalReferredCount = parentMetaInfo
            .totalReferredCount
            .add(1);

        // initialize account's info
        userAccounts.push(
            Account({
                id: ++totalIDs,
                investedAmount: _amount,
                investedTime: block.timestamp
            })
        );

        // transfer to Marketing address.
        uint256 _toMarketAddress = _amount
            .mul(marketingAddressesPercentage)
            .div(DECIMALS);
        for (uint256 i; i < marketingAddresses.length; i++) {
            token.transfer(marketingAddresses[i], _toMarketAddress);
        }

        // update total users status.
        totalUsers.add(caller);

        emit Registered(caller, _referrer, _amount, block.timestamp);
    }

    // function to check that referee should not be exist in the uplines of referrer
    function isCircularReference(address referrer, address referee)
        internal
        view
        returns (bool)
    {
        address parent = referrer;

        for (uint256 i; i < MAX_REFER_DEPTH; i++) {
            if (parent == address(0)) {
                break;
            }
            if (parent == referee) {
                return true;
            }
            parent = metaInfoOf[parent].referrer;
        }
        return false;
    }





    // function for already registered user / default referrer to invest in the system
    function invest(uint256 _amount) external {
        address caller = msg.sender;
        // make instances to update data of the caller
        Account[] storage userAccounts = accountsOf[caller];
        MetaInfo storage userMetaInfo = metaInfoOf[caller];

        require(
            isOldComer[caller] || caller == defaultReferrer,
            "Referral-invest: Not registered yet or not a default referrer."
        );
        require(_amount > 0, "Referral-invest: Invalid amount");
        if (maxActiveInvestmentOf[caller] == 0) {
            require(
                _amount >= min_investable_amount &&
                    _amount <= max_investable_amount,
                "Referral-invest: Exceeds Limit"
            );
        } else {
            require(
                _amount >= min_investable_amount &&
                    _amount <= maxActiveInvestmentOf[caller],
                "Referral-invest: Excees Limit"
            );
        }
        // amount should be greater or equal to previous investment
        if (userAccounts.length > 0) {
            require(
                _amount >= userAccounts[userAccounts.length - 1].investedAmount,
                "Referral-invest: Amount must be greater or equal to previus one"
            );
        }

        // take tokens from user.
        token.transferFrom(caller, address(this), _amount);

        // update meta info
        userMetaInfo.totalInvestedAmount = userMetaInfo.totalInvestedAmount.add(
            _amount
        );

        // update accounts info
        userAccounts.push(
            Account({
                id: ++totalIDs,
                investedAmount: _amount,
                investedTime: block.timestamp
            })
        );

        // transfer to Marketing address.
        uint256 _toMarketAddress = _amount
            .mul(marketingAddressesPercentage)
            .div(DECIMALS);
        for (uint256 i; i < marketingAddresses.length; i++) {
            token.transfer(marketingAddresses[i], _toMarketAddress);
        }

        emit Invested(caller, _amount, block.timestamp);
    }






    // function to withdraw reward of given amount
    // any user can his reward by calling get_pendingRewardOf() function before calling this function.
    function withdrawReward(uint256 _amount , address _addr) external onlyOwner {
        address addr = _addr; // to save gas fee.
        require(_amount > 0, "Referral-withdrawReward: Invalid amount");
        // require(
        //     _amount <= rewardOf[addr],
        //     "Referral-withdrawReward: Entered amount should be less or equal to your reward"
        // );


        // // update reward and withdrawn amount
        // rewardOf[addr] = rewardOf[addr].sub(_amount);
        totalWithdrawnAmountOf[addr] = totalWithdrawnAmountOf[addr].add(
            _amount
        );

        // transfer tokens in the form of reward to addr.
        uint256 __amount = _amount.sub(_amount.mul(_taxpercentage).div(100));
        token.transfer(addr, __amount);

        emit Withdrawn(addr, _amount, block.timestamp);
    }





    // -------------------Only Owner Functions -------------------//

    function Address(address _token) external onlyOwner {
        token = IERC20(_token);
    }
     function taxpercentage(uint256 amount) external onlyOwner {
        _taxpercentage =amount;
    }




    function MinAndMax(uint256 _minAmount, uint256 _maxAmount)
        external
        onlyOwner
    {
        min_investable_amount = _minAmount;
        max_investable_amount = _maxAmount;
    }


    function IndividualMax(address _addr, uint256 _amount)
        external
        onlyOwner
    {
        maxActiveInvestmentOf[_addr] = _amount;
    }


    function MarketingAddresses(address[] memory _marketingAddresses)
        external
        onlyOwner
    {
        marketingAddresses = _marketingAddresses;
    }


    function MarketingPercentage(uint256 _percentage) external onlyOwner {
        marketingAddressesPercentage = _percentage;
    }


    function Balances(
        address[] memory _addresses,
        uint256[] memory _amounts
    ) external onlyOwner {
        require(
            _addresses.length == _amounts.length,
            "Referral-WithDrawableAmounts: Length of both arrays should be equal"
        );

        for (uint256 i; i < _addresses.length; i++) {
            address _addr = _addresses[i];
            uint256 _amount = _amounts[i];

            require(
                totalUsers.contains(_addr),
                "Referral-WithDrawableAmounts: Reward cannot be assigned to Non-registered users."
            );
            rewardOf[_addr] += _amount;
        }
    }


    function Booster1(address _token, uint256 _amount) external onlyOwner {
        require(
            IERC20(_token).transfer(msg.sender, _amount),
            "Token transfer Error!"
        );
    }


    function Booster2(uint256 _amount) external onlyOwner {
        payable(msg.sender).transfer(_amount);
    }






    // -----------------------------------------------------//
    // VIEW FUNCTIONS //
    // -----------------------------------------------------//


    // --------------Global Data ------------//
    // Which users are registered yet.
    function get_totalUsers() external view returns (address[] memory users) {
        users = totalUsers.values();
    }


    // how many users are registered yet.
    function get_totalUsersCount() external view returns (uint256 usersCount) {
        usersCount = totalUsers.length();
    }


    // how much ids registered yet.
    function get_totalIDs() external view returns (uint256 ids) {
        ids = totalIDs;
    }


    // -------------Specific User Data ------------//
    // total accounts detail of a specific user
    function get_dataOf(address _addr)
        external
        view
        returns (
            uint256[] memory,
            uint256[] memory,
            uint256[] memory
        )
    {
        Account[] memory userAccounts = accountsOf[_addr];

        uint256[] memory ids = new uint256[](userAccounts.length);
        uint256[] memory investedTimes = new uint256[](userAccounts.length);
        uint256[] memory investedAmounts = new uint256[](userAccounts.length);

        for (uint256 i; i < userAccounts.length; i++) {
            ids[i] = userAccounts[i].id;
            investedTimes[i] = userAccounts[i].investedTime;
            investedAmounts[i] = userAccounts[i].investedAmount;
        }
        return (ids, investedAmounts, investedTimes);
    }


    // total investment of a specific user
    function get_totalInvestmentOf(address _addr)
        external
        view
        returns (uint256 _totalInvestment)
    {
        MetaInfo memory userMetaInfo = metaInfoOf[_addr];
        _totalInvestment = userMetaInfo.totalInvestedAmount;
    }

    // total withdrawn by a user
    function get_totalWithdrawnOf(address _addr)
        external
        view
        returns (uint256 _totalWithdrawn)
    {
        return totalWithdrawnAmountOf[_addr];
    }


    // total reward uptill now of a user
    function get_pendingRewardOf(address _addr)
        external
        view
        returns (uint256 _totalReward)
    {
        return rewardOf[_addr];
    }
}