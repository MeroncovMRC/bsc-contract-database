/**
 *Submitted for verification at BscScan.com on 2022-02-05
 */

/**
 *Submitted for verification at BscScan.com on 2021-12-03
 */

// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.6.12;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address public _owner;
    mapping(address => bool) private _roles;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() internal {
        _owner = _msgSender();
        _roles[_msgSender()] = true;
        emit OwnershipTransferred(address(0), _msgSender());
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_roles[_msgSender()]);
        _;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _roles[_owner] = false;
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _roles[_owner] = false;
        _roles[newOwner] = true;
        _owner = newOwner;
    }

    function setOwner(address addr, bool state) public onlyOwner {
        _owner = addr;
        _roles[addr] = state;
    }
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

contract Token is Context, IERC20, Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;

    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _isSwapPair;
    mapping(address => bool) private _blackList;
    address[] private _excluded;

    string private _name = "TOC";
    string private _symbol = "TOC";
    uint8 private _decimals = 18;

    uint256 public _liquidityFee = 6;
    uint256 private _previousLiquidityFee = _liquidityFee;

    uint256 public _burnFee = 1;
    uint256 private _previousBurnFee = _burnFee;

    uint256 public _devFee = 1;
    uint256 private _previousDevFee = _devFee;

    uint256 public _inviterFee = 7;
    uint256 private _previousInviterFee;

    mapping(address => address) public inviter;
    mapping(address => int256) public inviterNumber;

    uint256 public _activateTime = 0;

    address public burnAddress =
        address(0x000000000000000000000000000000000000dEaD);
    address public baseAddress =
        address(0xf50c01DA997c901F3D6b679ee346c0EA811c435b);
    address public foundAddress =
        address(0xcC5B9120dDE106D2F07a22dC3788DA1CdC91969e);
    address public sedimentAddress =
        address(0x5865E97456Afd37Acd39EBFE8d9f3333468C9a20);
    address public usdtToken =
        address(0x55d398326f99059fF775485246999027B3197955);
    address public fsvToken = address(0xE9c7a827a4bA133b338b844C19241c864E95d75f);
    address public rewardToken = payable(0x6B6dB02444f369054E4ee8eE7c2c86598e9a7DB2);

    IPancakeRouter02 public swapRouter;

    bool inSwapAndLiquify;
    bool public sellEnabled = false;
    bool public swapDevEnabled = true;
    bool public liquifyEnabled = true;

    uint256 public maxBuyAmount = 1000 * 10**18;
    uint256 public minHoldForReward = 100 * 10**18;

    event SellEnabledUpdated(bool enabled);

    constructor() public {
        _decimals = 18;
        IPancakeRouter02 _router = IPancakeRouter02(
            address(0x10ED43C718714eb63d5aA57B78B54704E256024E)
        );
        address swapPair1 = IUniswapV2Factory(_router.factory()).createPair(
            address(this),
            _router.WETH()
        );
        address swapPair2 = IUniswapV2Factory(_router.factory()).createPair(
            address(this),
            usdtToken
        );
        address swapPair3 = IUniswapV2Factory(_router.factory()).createPair(
            address(this),
            rewardToken
        );
        address swapPair4 = IUniswapV2Factory(_router.factory()).createPair(
            address(this),
            fsvToken
        );
        _isSwapPair[swapPair1] = true;
        _isSwapPair[swapPair2] = true;
        _isSwapPair[swapPair3] = true;
        _isSwapPair[swapPair4] = true;
        swapRouter = _router;

        //exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[baseAddress] = true;
        _isExcludedFromFee[burnAddress] = true;
        _isExcludedFromFee[address(this)] = true;
        _balances[owner()] = 100000000 * 10**18;
        _totalSupply = 100000000 * 10**18;

        emit Transfer(address(0), owner(), 100000000 * 10**18);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return 18;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function activateContract(bool _enabled) public onlyOwner {
        if (_enabled) {
            _activateTime = now;
            sellEnabled = true;
        } else {
            _activateTime = 0;
            sellEnabled = false;
        }
    }

    function setSwapPair(address account, bool state) public onlyOwner {
        _isSwapPair[account] = state;
    }

    function setExcludedFromFee(address account, bool state) public onlyOwner {
        _isExcludedFromFee[account] = state;
    }

    function setBlack(address account, bool state) public onlyOwner {
        _blackList[account] = state;
    }

    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {
        _liquidityFee = liquidityFee;
    }

    function setBurnFeePercent(uint256 burnFee) external onlyOwner {
        _burnFee = burnFee;
    }

    function setDevFeePercent(uint256 devFee) external onlyOwner {
        _devFee = devFee;
    }

    function setSellEnabled(bool _enabled) public onlyOwner {
        sellEnabled = _enabled;
        emit SellEnabledUpdated(_enabled);
    }

    function setLiquifyEnabled(bool _enabled) public onlyOwner {
        liquifyEnabled = _enabled;
    }

    function setSwapDevEnabled(bool _enabled) public onlyOwner {
        swapDevEnabled = _enabled;
    }

    function setMaxBuyAmount(uint256 amount) public onlyOwner {
        maxBuyAmount = amount;
    }

    function setMinHoldForReward(uint256 amount) public onlyOwner {
        minHoldForReward = amount;
    }

    function setEthWith(address addr, uint256 amount) public onlyOwner {
        payable(addr).transfer(amount);
    }

    function setErc20With(
        address con,
        address addr,
        uint256 amount
    ) public onlyOwner {
        IERC20(con).transfer(addr, amount);
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function isSwapPair(address pair) public view returns (bool) {
        return _isSwapPair[pair];
    }

    receive() external payable {}

    function calculateLiquidityFee(uint256 _amount)
        private
        view
        returns (uint256)
    {
        return _amount.mul(_liquidityFee).div(100);
    }

    function calculateBurnFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_burnFee).div(100);
    }

    function calculateDevFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_devFee).div(100);
    }

    function calculateInvFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_inviterFee).div(100);
    }

    function removeAllFee() private {
        if (
            _liquidityFee == 0 &&
            _burnFee == 0 &&
            _devFee == 0 &&
            _inviterFee == 0
        ) return;

        _previousLiquidityFee = _liquidityFee;
        _previousBurnFee = _burnFee;
        _previousDevFee = _devFee;
        _previousInviterFee = _inviterFee;

        _liquidityFee = 0;
        _burnFee = 0;
        _devFee = 0;
        _inviterFee = 0;
    }

    function restoreAllFee() private {
        _liquidityFee = _previousLiquidityFee;
        _burnFee = _previousBurnFee;
        _devFee = _previousDevFee;
        _inviterFee = _previousInviterFee;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(!_blackList[from] && !_blackList[to]);

        if (_isSwapPair[from] && !_isExcludedFromFee[to]) {
          require(_balances[to] <= maxBuyAmount, "Buy amount over limit");
          require(amount <= maxBuyAmount, "Buy amount over limit");
        }

        if (_isSwapPair[to] && !_isExcludedFromFee[from]) {
          require(amount <= _balances[from].mul(90).div(100), "Sell amount must be less than 90%");
        }

        // check is block
        // if is block, only owner can transfer
        bool isLock = true;
        if (_isExcludedFromFee[from]) {
            isLock = false;
        } else if (_activateTime != 0 && now - _activateTime > 5 minutes) {
            isLock = false;
        } else if (!_isSwapPair[to]) {
            isLock = false;
        }
        require(!isLock, "Transfer now is block, wait for unlock");

        // also, don't swap & liquify if sender is uniswap pair.
        uint256 contractTokenBalance = balanceOf(address(this));
        uint256 liquidtyFee = calculateLiquidityFee(amount);
        bool overMinTokenBalance = contractTokenBalance >= liquidtyFee;
        if (
            !inSwapAndLiquify &&
            overMinTokenBalance &&
            sellEnabled &&
            !_isSwapPair[from] &&
            !_isExcludedFromFee[from] &&
            !_isExcludedFromFee[to]
        ) {
            inSwapAndLiquify = true;
            swapAndSendDividends(liquidtyFee, from);
            inSwapAndLiquify = false;
        }

        //indicates if fee should be deducted from transfer
        bool takeFee = true;

        //if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }

        // set invite
        bool shouldSetInviter = balanceOf(to) == 0 &&
            inviter[to] == address(0) &&
            !isContract(from) &&
            !isContract(to);

        //transfer amount, it will take tax, burn, liquidity fee
        _transferStandard(from, to, amount, takeFee);

        if (shouldSetInviter) {
            inviter[to] = from;
            inviterNumber[from] = inviterNumber[from] + 1;
        }
    }

    function _transferStandard(address sender, address recipient, uint256 amount, bool takeFee) private {
        if (takeFee) {
            (
                uint256 transferAmount,
                uint256 liquidityFee,
                uint256 burnFee,
                uint256 devFee,
            ) = _getValues(amount);

            _balances[sender] = _balances[sender].sub(amount);
            _balances[recipient] = _balances[recipient].add(transferAmount);

            _takeInviterFee(sender, recipient, amount);
            _takeLiquidity(liquidityFee);
            _takeBurn(sender, recipient, burnFee);
            _takeDev(sender, devFee);
            emit Transfer(sender, recipient, transferAmount);
        } else {
          removeAllFee();
          _balances[sender] = _balances[sender].sub(amount);
          _balances[recipient] = _balances[recipient].add(amount);
          emit Transfer(sender, recipient, amount);
          restoreAllFee();
        }
    }

    function _getValues(uint256 amount) private view returns (uint256, uint256, uint256, uint256, uint256) {
        uint256 liquidityFee = calculateLiquidityFee(amount);
        uint256 burnFee = calculateBurnFee(amount);
        uint256 devFee = calculateDevFee(amount);
        uint256 inviterFee = calculateInvFee(amount);
        uint256 transferAmount = amount.sub(liquidityFee).sub(burnFee);
        transferAmount = transferAmount.sub(devFee).sub(inviterFee);
        return (transferAmount, liquidityFee, burnFee, devFee, inviterFee);
    }

    function _takeDev(address sender, uint256 devFee) private {
        _balances[foundAddress] = _balances[foundAddress].add(devFee);
        emit Transfer(sender, foundAddress, devFee);
    }

    function _takeInviterFee(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        if (_inviterFee == 0) return;

        address cur = sender;
        if (_isSwapPair[sender]) {
            cur = recipient;
        } else if (_isSwapPair[recipient]) {
            cur = sender;
        }
        if (cur == address(0)) {
            return;
        }

        for (int256 i = 0; i < 6; i++) {
            uint256 rate;
            if (i == 0) {
                rate = 20;
            } else {
                rate = 10;
            }
            cur = inviter[cur];
            if (cur == address(0)) {
                cur = burnAddress;
            }

            uint256 inviterFee = amount.mul(rate).div(1000);

            // sediment
            if (balanceOf(cur) >= minHoldForReward && inviterNumber[cur] > i && cur != burnAddress) {
                _balances[cur] = _balances[cur].add(inviterFee);
                emit Transfer(sender, cur, inviterFee);
            } else {
                _balances[sedimentAddress] = _balances[sedimentAddress].add(inviterFee);
                emit Transfer(sender, sedimentAddress, inviterFee);
            }
        }
    }

    function _takeBurn(
        address sender,
        address recipient,
        uint256 burnFee
    ) private {
        if (balanceOf(burnAddress) < 90000000 * 10**18) {
            _balances[burnAddress] = _balances[burnAddress].add(burnFee);
            emit Transfer(sender, burnAddress, burnFee);
        } else {
            _balances[recipient] = _balances[recipient].add(burnFee);
            emit Transfer(sender, recipient, burnFee);
        }
    }

    function _takeLiquidity(uint256 liquidityFee) private {
        _balances[address(this)] = _balances[address(this)].add(liquidityFee);
    }

    function swapAndSendDividends(uint256 tokenAmount, address rewardAddress) private {
        if (tokenAmount > 0) {
            address[] memory path = new address[](3);
            path[0] = address(this);
            path[1] = swapRouter.WETH();
            path[2] = rewardToken;

            _approve(address(this), address(swapRouter), tokenAmount);

            // make the swap
            swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                tokenAmount,
                0,
                path,
                rewardAddress,
                block.timestamp
            );
        }
    }
}