{"AirdropClaimer.sol":{"content":"// SPDX-License-Identifier: WISE\r\n\r\n//@author RenevonMangoldt.eth\r\n//@helper vitally.eth\r\n\r\nimport \"./AirdropClaimerToken.sol\";\r\nimport \"./Interfaces.sol\";\r\n\r\npragma solidity ^0.8.17;\r\n\r\nerror ImpossibleMint();\r\nerror ImpossibleClaim();\r\n\r\ncontract AirdropClaimer is AirdropClaimerToken {\r\n\r\n    IToken public immutable BUSD;\r\n    IAirdropRegister public immutable airdropRegister;\r\n\r\n    uint256 public totalBusdClaimed;\r\n    uint256 public totalBusdContributed;\r\n\r\n    mapping(address =\u003e uint256) public sharesClaimed;\r\n\r\n    modifier cleanUp() {\r\n        _cleanUp();\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IToken _busdTokenAddress,\r\n        IAirdropRegister _airdropRegister,\r\n        address[] memory _preSettledAddresses,\r\n        address[] memory _publicContributors,\r\n        uint256[] memory _preSettledAmounts,\r\n        uint256[] memory _publicContributorAmounts,\r\n        string memory _entryName,\r\n        string memory _entrySymbol,\r\n        uint8 _decimalsInput\r\n    )\r\n    {\r\n        _name = _entryName;\r\n        _symbol = _entrySymbol;\r\n        _decimals = _decimalsInput;\r\n\r\n        BUSD = _busdTokenAddress;\r\n        airdropRegister = _airdropRegister;\r\n\r\n        for (uint256 i = 0; i \u003c _preSettledAddresses.length; i++) {\r\n            sharesClaimed[_preSettledAddresses[i]] = _preSettledAmounts[i];\r\n        }\r\n\r\n        for (uint256 i = 0; i \u003c _publicContributors.length; i++) {\r\n            _mint(\r\n                _publicContributors[i],\r\n                _publicContributorAmounts[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function contribute(\r\n        uint256 _amount\r\n    )\r\n        cleanUp\r\n        external\r\n    {\r\n        totalBusdContributed += _amount;\r\n\r\n        BUSD.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function mintShares(\r\n        address _user\r\n    )\r\n        cleanUp\r\n        external\r\n    {\r\n        uint256 shareAmount = sharesClaimable(\r\n            _user\r\n        );\r\n\r\n        if (shareAmount == 0) {\r\n            revert ImpossibleMint();\r\n        }\r\n\r\n        sharesClaimed[_user] += shareAmount;\r\n\r\n        _mint(\r\n            _user,\r\n            shareAmount\r\n        );\r\n    }\r\n\r\n    function burnShares()\r\n        cleanUp\r\n        external\r\n    {\r\n        (\r\n            uint256 claimAmount,\r\n            uint256 userBalance\r\n        ) = airdropValueForUser(\r\n            msg.sender\r\n        );\r\n\r\n        totalBusdClaimed += claimAmount;\r\n\r\n        _burn(\r\n            msg.sender,\r\n            userBalance\r\n        );\r\n\r\n        BUSD.transfer(\r\n            msg.sender,\r\n            claimAmount\r\n        );\r\n    }\r\n\r\n    function _cleanUp()\r\n        internal\r\n    {\r\n        uint256 cleanUpAmount = _cleanUpAmount(\r\n            totalBusdClaimed,\r\n            totalBusdContributed,\r\n            totalClaimable()\r\n        );\r\n\r\n        if (cleanUpAmount == 0) return;\r\n\r\n        totalBusdContributed += cleanUpAmount;\r\n    }\r\n\r\n    function _cleanUpAmount(\r\n        uint256 _totalBusdClaimed,\r\n        uint256 _totalBusdContributed,\r\n        uint256 _balanceContract\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _balanceContract\r\n            + _totalBusdClaimed\r\n            - _totalBusdContributed;\r\n    }\r\n\r\n    function totalClaimable()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return BUSD.balanceOf(\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    function sharesClaimable(\r\n        address _user\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return airdropRegister.userShares(_user)\r\n            - sharesClaimed[_user];\r\n    }\r\n\r\n    function airdropValueForUser(\r\n        address _user\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 userBalance = _balances[\r\n            _user\r\n        ];\r\n\r\n        uint256 claimAmount = totalClaimable()\r\n            * userBalance\r\n            / _totalSupply;\r\n\r\n        if (claimAmount == 0) {\r\n            revert ImpossibleClaim();\r\n        }\r\n\r\n        return (\r\n            claimAmount,\r\n            userBalance\r\n        );\r\n    }\r\n}\r\n"},"AirdropClaimerToken.sol":{"content":"// SPDX-License-Identifier: WISE\r\n\r\nimport \"./Events.sol\";\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract AirdropClaimerToken is Events {\r\n\r\n    string _name;\r\n    string _symbol;\r\n\r\n    uint8 _decimals;\r\n    uint256 _totalSupply;\r\n\r\n    mapping(address =\u003e uint256) _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    address constant ZERO_ADDRESS = address(0);\r\n\r\n    function name()\r\n        external\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n\r\n    function symbol()\r\n        external\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals()\r\n        external\r\n        view\r\n        returns (uint8)\r\n    {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address _account\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _balances[_account];\r\n    }\r\n\r\n    function transfer(\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        _transfer(\r\n            msg.sender,\r\n            _recipient,\r\n            _amount\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            _spender,\r\n            _amount\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (_allowances[_sender][msg.sender] != type(uint256).max) {\r\n            _allowances[_sender][msg.sender] -= _amount;\r\n        }\r\n\r\n        _transfer(\r\n            _sender,\r\n            _recipient,\r\n            _amount\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates balances during transfer\r\n     */\r\n    function _transfer(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n    {\r\n        _balances[_sender] =\r\n        _balances[_sender] - _amount;\r\n\r\n        unchecked {\r\n            _balances[_recipient] =\r\n            _balances[_recipient] + _amount;\r\n        }\r\n\r\n        emit Transfer(\r\n            _sender,\r\n            _recipient,\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function _mint(\r\n        address _user,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n    {\r\n        _totalSupply =\r\n        _totalSupply + _amount;\r\n\r\n        unchecked {\r\n            _balances[_user] =\r\n            _balances[_user] + _amount;\r\n        }\r\n\r\n        emit Transfer(\r\n            ZERO_ADDRESS,\r\n            _user,\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function _burn(\r\n        address _account,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n    {\r\n        _balances[_account] =\r\n        _balances[_account] - _amount;\r\n\r\n        unchecked {\r\n            _totalSupply =\r\n            _totalSupply - _amount;\r\n        }\r\n\r\n        emit Transfer(\r\n            _account,\r\n            ZERO_ADDRESS,\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function _approve(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n    {\r\n        _allowances[_owner][_spender] = _amount;\r\n\r\n        emit Approval(\r\n            _owner,\r\n            _spender,\r\n            _amount\r\n        );\r\n    }\r\n}\r\n"},"Events.sol":{"content":"// SPDX-License-Identifier: WISE\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract Events {\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n}\r\n"},"Interfaces.sol":{"content":"// SPDX-License-Identifier: WISE\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IAirdropRegister {\r\n\r\n    function userShares(\r\n        address _user\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function registerStakeBulk(\r\n        bytes16[] memory _stakeIDs\r\n    )\r\n        external;\r\n\r\n    function registerStake(\r\n        bytes16 _stakeID\r\n    )\r\n        external;\r\n}\r\n\r\ninterface IToken {\r\n\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOf(\r\n        address account\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n}\r\n"}}