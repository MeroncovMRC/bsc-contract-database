// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        if (a == 0) {return 0;}
        c = a * b;
        assert(c / a == b);
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function safeSub(uint a, uint b) internal pure returns (uint) {
        if (b > a) {return 0;} else {return a - b;}
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        assert(c >= a);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}
    function max(uint256 a, uint256 b) internal pure returns (uint256) {return a >= b ? a : b;}
    function min(uint256 a, uint256 b) internal pure returns (uint256) {return a < b ? a : b;}
}

library SafeERC20 {
	using SafeMath for uint256;
	using Address for address;

	function safeTransfer(IERC20 token, address to, uint256 value) internal {
		callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
	}

	function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
		callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
	}

	function safeApprove(IERC20 token, address spender, uint256 value) internal {
		require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance");
		callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
	}
	
	function callOptionalReturn(IERC20 token, bytes memory data) private {
		require(address(token).isContract(), "SafeERC20: call to non-contract");

		// solhint-disable-next-line avoid-low-level-calls
		(bool success, bytes memory returndata) = address(token).call(data);
		require(success, "SafeERC20: low-level call failed");

		if (returndata.length > 0) {
			require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
		}
	}
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract EliteVaultV1 {
    using SafeERC20 for IERC20;
    using SafeMath for uint;

    // Import the BEP20 token interface
    IERC20 public stakingToken;
    
    /////////////////////////////////
    // CONFIGURABLES AND VARIABLES //
    /////////////////////////////////
    
    address public developer;
    
    bool public activated;
    
    // Store the token address and the reserve address
    address public tokenAddress;
    address public reserveAddress;
    
    address payable public bnbReceiver;
    
    uint8 public dripRate;
    
    // Store the number of unique users and total Tx's 
    uint256 public users;
    uint256 public totalTxs;
    
    // Store the starting time & block number and the last payout time
    uint256 public lastPayout;
    uint256 public lastRebaseTime;
    
    uint256 public startBlock;
    
    // Store the details of total deposits & claims
    uint256 public buybacksBalance;
    uint256 public totalBuyBack;
    uint256 public totalClaims;
    uint256 public totalDeposits;

    // Store the total drip pool balance and rate
    uint256 public dripPoolBalance;
    
    // How many portions of the fees does each receiver get?
    uint256 public forPool;
    uint256 public forDivs;
    uint256 public forFees;

    uint8 constant internal divsFee = 10;

    // Rebase and payout frequency
    uint256 constant public rebaseFrequency = 6 hours;
    uint256 constant public payoutFrequency = 2 seconds;
    
    uint256 constant internal magnitude = 2 ** 64;
    
    // Current total tokens staked, and profit per share
    uint256 private currentTotalStaked;
    uint256 private profitPerShare_;
    
    ////////////////////////////////////
    // MODIFIERS                      //
    ////////////////////////////////////

    // Only holders - Caller must have funds in the vault
    modifier onlyHolders {
        require(myTokens() > 0);
        _;
    }
    
    // Only earners - Caller must have some earnings
    modifier onlyEarners {
        require(myEarnings() > 0);
        _;
    }
    
    // Only Don - The boss is the boss, y'know?
    modifier onlyDon {
        require(msg.sender == developer, "YOU_ARE_NOT_DON");
        _;
    }
    
    // Require starting block unless whitelisted
    modifier checkBlock() {
        if (activated == false) {
            require(_whitelisted[msg.sender] == true || msg.sender == developer, 'NOT_READY_YET');
        }
        _;
    }

    ////////////////////////////////////
    // ACCOUNT STRUCT                 //
    ////////////////////////////////////

    struct Account {
        uint deposited;
        uint withdrawn;
        uint compounded;
        uint rewarded;
        uint contributed;
        uint transferredShares;
        uint receivedShares;
        
        uint xInvested;
        uint xCompounded;
        uint xRewarded;
        uint xContributed;
        uint xWithdrawn;
        uint xTransferredShares;
        uint xReceivedShares;
    }

    ////////////////////////////////////
    // MAPPINGS                       //
    ////////////////////////////////////

    mapping(address =>  int256) payoutsOf_;
    mapping(address => uint256) balanceOf_;
    mapping(address => Account) accountOf_;
    
    mapping(address => bool) _whitelisted;
    
    ////////////////////////////////////
    // EVENTS                         //
    ////////////////////////////////////
    
    event onDeposit( address indexed _user, uint256 _deposited,  uint256 tokensMinted, uint timestamp);
    event onWithdraw(address indexed _user, uint256 _liquidated, uint256 tokensEarned, uint timestamp);
    event onCompound(address indexed _user, uint256 _compounded, uint256 tokensMinted, uint timestamp);
    event onWithdraw(address indexed _user, uint256 _withdrawn,                        uint timestamp);
    
    event onTransfer(address indexed from,  address indexed to,  uint256 tokens,       uint timestamp);
    
    event onUpdate(address indexed _user, uint256 invested, uint256 tokens, uint256 soldTokens, uint timestamp);
    
    event onRebase(uint256 balance, uint256 timestamp);
    
    event onDonate(address indexed from, uint256 amount, uint timestamp);
    event onDonateBNB(address indexed from, uint256 amount, uint timestamp);
    
    event onSetFeeSplit(uint _pool, uint _divs, uint _fees, uint256 timestamp);
    event onSetReserve(address _contract, uint256 timestamp);
    
    event onAddToWhitelist(address indexed caller, address indexed made, uint256 timestamp);
    
    ////////////////////////////////////
    // CONSTRUCTOR                    //
    ////////////////////////////////////

    constructor(address _tokenAddress, address payable _reserveAddress, uint8 _dripRate) public {
        require(_tokenAddress != address(0), "Token and liquidity router must be set");
        
        tokenAddress = _tokenAddress;
        stakingToken = IERC20(_tokenAddress);
        
        reserveAddress = _reserveAddress;
        bnbReceiver = _reserveAddress;
        
        activated = false;
        
        developer = msg.sender;
        
        lastPayout = (block.timestamp);

        // Set Drip Rate and last payout date (first time around)...
        dripRate = _dripRate;
        
        // Fee portions
        forPool = 7;
        forDivs = 2;
        forFees = 1;
    }
    
    ////////////////////////////////////
    // FALLBACK                       //
    ////////////////////////////////////
    
    receive() payable external {
        Address.sendValue(bnbReceiver, msg.value);
        emit onDonateBNB(msg.sender, msg.value, block.timestamp);
    }
    
    ////////////////////////////////////
    // WRITE FUNCTIONS                //
    ////////////////////////////////////
    
    /*** FUNCTIONS FOR ALL USERS ***/
    
    // Sweep
    function sweep() checkBlock() public {
        if (buybacksBalance >  0){
            stakingToken.transfer(reserveAddress, buybacksBalance);
            totalBuyBack = totalBuyBack.add(buybacksBalance);
            buybacksBalance = 0;
        }
    }
    
    // Donate
    function donate(uint _amount) checkBlock() public returns (uint256) {
        
        // Move the tokens from the caller's wallet to this contract.
        require(stakingToken.transferFrom(msg.sender, address(this), _amount));
        
        // Add the tokens to the drip pool balance
        dripPoolBalance += _amount;
        
        // Tell the network, successful function - how much in the pool now?
        emit onDonate(msg.sender, _amount, block.timestamp);
        return dripPoolBalance;
    }

    // Deposit
    function deposit(uint _amount) checkBlock() public returns (uint256)  {
        // Return a call to depositTo...
        return depositTo(msg.sender, _amount);
    }

    // DepositTo
    function depositTo(address _user, uint _amount) checkBlock() public returns (uint256)  {
        
        // Move the tokens from the caller's wallet to this contract.
        require(stakingToken.transferFrom(msg.sender, address(this), _amount));
        
        // Add the deposit to the totalDeposits...
        totalDeposits += _amount;
        
        // Then actually call the deposit method...
        uint amount = _depositTokens(_user, _amount);
        
        // Update the leaderboard...
        emit onUpdate(_user, accountOf_[_user].deposited, balanceOf_[_user], accountOf_[_user].withdrawn, now);
        
        // Then trigger a distribution for everyone, kind soul!
        _distribute();
        
        // Successful function - how many 'shares' (tokens) are the result?
        return amount;
    }

    /*** FUNCTIONS FOR STAKERS ***/

    // Compound
    function compound() onlyEarners checkBlock() public {
         _compoundTokens();
    }
    
    // Harvest
    function harvest() onlyEarners checkBlock() public {
        address _user = msg.sender;
        uint256 _dividends = myEarnings();
        
        // Calculate the payout, add it to the user's total paid out accounting...
        payoutsOf_[_user] += (int256) (_dividends * magnitude);
        
        // Pay the user their tokens to their wallet
        stakingToken.transfer(_user,_dividends);

        // Update accounting for user/total withdrawal stats...
        accountOf_[_user].withdrawn = SafeMath.add(accountOf_[_user].withdrawn, _dividends);
        accountOf_[_user].xWithdrawn += 1;
        
        // Update total Tx's and claims stats
        totalTxs += 1;
        totalClaims += _dividends;

        // Tell the network...
        emit onWithdraw(_user, _dividends, block.timestamp);

        // Trigger a distribution for everyone, kind soul!
        _distribute();
    }
    
    /*** FUNCTIONS FOR HOLDERS ***/

    // Withdraw
    function withdraw(uint256 _amount) onlyHolders checkBlock() public {
        address _user = msg.sender;
        require(_amount <= balanceOf_[_user]);
        
        // Calculate dividends and 'shares' (tokens)
        uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100;
        uint256 _taxedTokens = SafeMath.sub(_amount, _undividedDividends);

        // Subtract amounts from user and totals...
        currentTotalStaked = SafeMath.sub(currentTotalStaked, _amount);
        balanceOf_[_user] = SafeMath.sub(balanceOf_[_user], _amount);

        // Update the payment ratios for the user and everyone else...
        int256 _updatedPayouts = (int256) (profitPerShare_ * _amount + (_taxedTokens * magnitude));
        payoutsOf_[_user] -= _updatedPayouts;

        // Serve dividends between the drip and instant divs (4:1)...
        _allocateFees(_undividedDividends);
        
        // Tell the network, and trigger a distribution
        emit onWithdraw( _user, _amount, _taxedTokens, block.timestamp);
        
        // Update the leaderboard...
        emit onUpdate(_user, accountOf_[_user].deposited, balanceOf_[_user], accountOf_[_user].withdrawn, now);
        
        // Trigger a distribution for everyone, kind soul!
        _distribute();
    }

    // Transfer
    function transfer(address _to, uint256 _amount) onlyHolders checkBlock() external returns (bool) {
        return _transferTokens(_to, _amount);
    }
    
    ////////////////////////////////////
    // VIEW FUNCTIONS                 //
    ////////////////////////////////////

    function myTokens() public view returns (uint256) {return balanceOf(msg.sender);}
    function myEarnings() public view returns (uint256) {return dividendsOf(msg.sender);}

    function balanceOf(address _user) public view returns (uint256) {return balanceOf_[_user];}
    function tokenBalance(address _user) public view returns (uint256) {return _user.balance;}
    function totalBalance() public view returns (uint256) {return stakingToken.balanceOf(address(this));}
    function totalSupply() public view returns (uint256) {return currentTotalStaked;}
    
    function dividendsOf(address _user) public view returns (uint256) {
        return (uint256) ((int256) (profitPerShare_ * balanceOf_[_user]) - payoutsOf_[_user]) / magnitude;
    }
    
    function sellPrice() public pure returns (uint256) {
        uint256 _tokens = 1e18;
        uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100);
        uint256 _taxedTokens = SafeMath.sub(_tokens, _dividends);
        return _taxedTokens;
    }

    function buyPrice() public pure returns (uint256) {
        uint256 _tokens = 1e18;
        uint256 _dividends = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100);
        uint256 _taxedTokens = SafeMath.add(_tokens, _dividends);
        return _taxedTokens;
    }

    function calculateSharesReceived(uint256 _amount) public pure returns (uint256) {
        uint256 _divies = SafeMath.div(SafeMath.mul(_amount, divsFee), 100);
        uint256 _remains = SafeMath.sub(_amount, _divies);
        uint256 _result = _remains;
        return  _result;
    }

    function calculateTokensReceived(uint256 _amount) public view returns (uint256) {
        require(_amount <= currentTotalStaked);
        uint256 _tokens  = _amount;
        uint256 _divies  = SafeMath.div(SafeMath.mul(_tokens, divsFee), 100);
        uint256 _remains = SafeMath.sub(_tokens, _divies);
        return _remains;
    }

    function accountOf(address _user) public view returns (uint256[14] memory) {
        Account memory a = accountOf_[_user];
        uint256[14] memory accountArray = [
            a.deposited, 
            a.withdrawn, 
            a.rewarded, 
            a.compounded,
            a.contributed, 
            a.transferredShares, 
            a.receivedShares, 
            a.xInvested, 
            a.xRewarded, 
            a.xContributed, 
            a.xWithdrawn, 
            a.xTransferredShares, 
            a.xReceivedShares, 
            a.xCompounded
        ];
        return accountArray;
    }

    function dailyEstimate(address _user) public view returns (uint256) {
        uint256 share = dripPoolBalance.mul(dripRate).div(100);
        return (currentTotalStaked > 0) ? share.mul(balanceOf_[_user]).div(currentTotalStaked) : 0;
    }

    function isWhitelisted(address _user) public view returns (bool _status) {
        
        // If the block number is after launch, nobody is whitelisted...
        if (block.number > startBlock) {
            
            // Even if their official status in the code says they are, it has no effect.
            // This function switches it off by a returning 'false' to all checks after launch.
            return false;
        }
        
        // If they get to this point, display their actual whitelist status
        _status = _whitelisted[_user];
    }

    /////////////////////////////////
    // PUBLIC OWNER-ONLY FUNCTIONS //
    /////////////////////////////////
    
    // Set Fee split
    function setFeeSplit(uint256 _pool, uint256 _divs, uint256 _fees) public onlyDon returns (bool _success) {
        require(_pool.add(_divs) == 10 && _fees == 0, "TEN_PORTIONS_REQUIRE_DIVISION");
        
        // Set the new values...
        forPool = _pool;
        forDivs = _divs;
        forFees = _fees;
        
        // Tell the network, successful function!
        emit onSetFeeSplit(_pool, _divs, _fees, block.timestamp);
        return true;
    }

    // Set Reserve Address
    function setReserve(address _reserve) public onlyDon returns (bool _success) {
        require(_reserve != address(0), "INVALID_ADDRESS");
        
        reserveAddress = _reserve;
        
        emit onSetReserve(_reserve, block.timestamp);
        return true;
    }
    
    // Set whitelist status to true or false
    function setWhitelist(address _user, bool _status) public onlyDon() returns (bool _success) {
        
        // The _user must be a valid address...
        require(_user != address(0), "INVALID_ADDRESS"); 
        
        // Set whitelist status to _status;
        _whitelisted[_user] = _status;
        
        // Tell the network, successful function!
        emit onAddToWhitelist(msg.sender, _user, block.timestamp);
        return true;
    }

    // Set contract activation status
    function activate() public onlyDon() returns (bool _success) {
        require(activated == false, "ALREADY_ACTIVE");
        
        activated = true;
        
        return true;
    }

    ////////////////////////////////////
    // PRIVATE / INTERNAL FUNCTIONS   //
    ////////////////////////////////////

    // Allocate fees (private method)
    function _allocateFees(uint fee) private {
        uint256 _onePiece = fee.div(10);
        
        uint256 _forPool = (_onePiece.mul(forPool)); // for the Drip Pool
        uint256 _forDivs = (_onePiece.mul(forDivs)); // for Instant Divs
        uint256 _forFees = (_onePiece.mul(forFees)); // for Gangster Distillery
        
        buybacksBalance = buybacksBalance.add(_forFees);
        dripPoolBalance = dripPoolBalance.add(_forPool);
        
        // If there's more than 0 tokens staked in the vault...
        if (currentTotalStaked > 0) {
            
            // Distribute those instant divs...
            profitPerShare_ = SafeMath.add(profitPerShare_, (_forDivs * magnitude) / currentTotalStaked);
        } else {
            // Otherwise add the divs portion to the drip pool balance.
            dripPoolBalance += _forDivs;
        }
    }
    
    // Distribute (private method)
    function _distribute() private {
        
        uint _currentTimestamp = (block.timestamp);
        
        // Log a rebase, if it's time to do so...
        if (_currentTimestamp.safeSub(lastRebaseTime) > rebaseFrequency) {
            
            // Tell the network...
            emit onRebase(totalBalance(), _currentTimestamp);
            
            // Update the time this was last updated...
            lastRebaseTime = _currentTimestamp;
        }

        // If there's any time difference...
        if (SafeMath.safeSub(_currentTimestamp, lastPayout) > payoutFrequency && currentTotalStaked > 0) {
            
            // Calculate shares and profits...
            uint256 share = dripPoolBalance.mul(dripRate).div(100).div(24 hours);
            uint256 profit = share * _currentTimestamp.safeSub(lastPayout);
            
            // Subtract from drip pool balance and add to all user earnings
            dripPoolBalance = dripPoolBalance.safeSub(profit);
            profitPerShare_ = SafeMath.add(profitPerShare_, (profit * magnitude) / currentTotalStaked);
            
            // Update the last payout timestamp
            lastPayout = _currentTimestamp;
        }
    }
    
    // Deposit Tokens (internal method)
    function _depositTokens(address _recipient, uint256 _amount) internal returns (uint256) {
        
        // If the recipient has zero activity, they're new - COUNT THEM!!!
        if (accountOf_[_recipient].deposited == 0 && accountOf_[_recipient].receivedShares == 0) {
            users += 1;
        }

        // Count this tx...
        totalTxs += 1;

        // Calculate dividends and 'shares' (tokens)
        uint256 _undividedDividends = SafeMath.mul(_amount, divsFee) / 100;
        uint256 _tokens = SafeMath.sub(_amount, _undividedDividends);
        
        // Tell the network...
        emit onDeposit(_recipient, _amount, _tokens, block.timestamp);

        // There needs to be something being added in this call...
        require(_tokens > 0 && SafeMath.add(_tokens, currentTotalStaked) > currentTotalStaked);
        if (currentTotalStaked > 0) {
            currentTotalStaked += _tokens;
        } else {
            currentTotalStaked = _tokens;
        }
        
        // Allocate fees, and balance to the recipient
        _allocateFees(_undividedDividends);
        balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _tokens);
        
        // Updated payouts...
        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens);
        
        // Update stats...
        payoutsOf_[_recipient] += _updatedPayouts;
        accountOf_[_recipient].deposited += _amount;
        accountOf_[_recipient].xInvested += 1;

        // Successful function - how many "shares" generated?
        return _tokens;
    }
    
    // Compound (internal method)
    function _compoundTokens() internal returns (uint256) {
        address _user = msg.sender;
        
        // Quickly roll the caller's earnings into their payouts
        uint256 _dividends = dividendsOf(_user);
        payoutsOf_[_user] += (int256) (_dividends * magnitude);
        
        // Then actually trigger the deposit method
        // (NOTE: No tokens required here, earnings are tokens already within the contract)
        uint256 _tokens = _depositTokens(msg.sender, _dividends);
        
        // Tell the network...
        emit onCompound(_user, _dividends, _tokens, block.timestamp);

        // Then update the stats...
        accountOf_[_user].compounded = SafeMath.add(accountOf_[_user].compounded, _dividends);
        accountOf_[_user].xCompounded += 1;
        
        // Update the leaderboard...
        emit onUpdate(_user, accountOf_[_user].deposited, balanceOf_[_user], accountOf_[_user].withdrawn, now);
        
        // Then trigger a distribution for everyone, you kind soul!
        _distribute();
        
        // Successful function!
        return _tokens;
    }
    
    // Transfer Tokens (internal method)
    function _transferTokens(address _recipient, uint256 _amount) internal returns (bool _success) {
        address _sender = msg.sender;
        require(_amount <= balanceOf_[_sender]);
        
        // Harvest any earnings before transferring, to help with cleaner accounting
        if (myEarnings() > 0) {
            harvest();
        }
        
        // "Move" the tokens...
        balanceOf_[_sender] = SafeMath.sub(balanceOf_[_sender], _amount);
        balanceOf_[_recipient] = SafeMath.add(balanceOf_[_recipient], _amount);

        // Adjust payout ratios to match the new balances...
        payoutsOf_[_sender] -= (int256) (profitPerShare_ * _amount);
        payoutsOf_[_recipient] += (int256) (profitPerShare_ * _amount);

        // If the recipient has zero activity, they're new - COUNT THEM!!!
        if (accountOf_[_recipient].deposited == 0 && accountOf_[_recipient].receivedShares == 0) {
            users += 1;
        }
        
        // Update stats...
        accountOf_[_sender].xTransferredShares += 1;
        accountOf_[_sender].transferredShares += _amount;
        accountOf_[_recipient].receivedShares += _amount;
        accountOf_[_recipient].xReceivedShares += 1;
        
        // Add this to the Tx counter...
        totalTxs += 1;

        // Tell the network, successful function!
        emit onTransfer(_sender, _recipient, _amount, block.timestamp);
        
        // Update the leaderboard for sender...
        emit onUpdate(_sender, accountOf_[_sender].deposited, balanceOf_[_sender], accountOf_[_sender].withdrawn, now);
        
        // Update the leaderboard for recipient...
        emit onUpdate(_recipient, accountOf_[_recipient].deposited, balanceOf_[_recipient], accountOf_[_recipient].withdrawn, now);
        
        return true;
    }
}