
// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/IERC20.sol";


// File: lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)

pragma solidity ^0.8.2;

import "../../utils/Address.sol";

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        require(
            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),
            "Initializable: contract is already initialized"
        );
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        require(!_initializing, "Initializable: contract is initializing");
        if (_initialized < type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: src/FilCatIDO.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "openzeppelin-contracts/contracts/access/Ownable.sol";
import "openzeppelin-contracts/contracts/interfaces/IERC20.sol";
import "openzeppelin-contracts/contracts/proxy/utils/Initializable.sol";

contract FilCatIDO is Ownable,Initializable {

    uint256 constant public amount = 200e18;

    struct User {
        address addr;
        address ref;
        uint256 inviteAmount;
        uint256 catAmount;
        uint256 debtCatAmount;
        bool isCat;
        bool isSet;
    }

    struct Sys {
        address filAddr;
        uint256 usersLen;
        uint256 usersLevel1Len;
        uint256 isCatsLen;
        uint256 balance;
        uint256 catsAmount;
        uint256 totalAmount;
    }

    address public defaultRef;

    address public filRec;

    mapping(address => User) private userRefs;
    address[] public users;

    address[] private userCats;

    address[] private isCats;

    IERC20 private fil;

    uint256 public invitePercent = 15; // /100
    uint256 public catPercent = 10; // /100

    address[] public defaultLevel1;

    function setInvitePercent(uint256 invitePercent_) external onlyOwner {
        invitePercent = invitePercent_;
    }

    function setCatPercent(uint256 catPercent_) external onlyOwner {
        catPercent = catPercent_;
    }

    function initialize(address owner, address default_, address filRec_,address fil_)  public initializer {

        invitePercent = 15; // /100
        catPercent = 10; // /100

        if (address(0) == fil_) {
            fil_ = 0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153;
        }
        fil = IERC20(fil_);

        if (address(0) == default_) {
            default_ = 0x70D837699FCAC5a72E8A544e99520d07C40a6761;
        }
        defaultRef = default_;

        if (address(0) == filRec_) {
            filRec_ =  0xa3C744b47185A5304C62cCc2b5Fa3Badcf2518aA;
        }
        filRec = filRec_;

        if (address(0) == owner) {
            owner = 0x70D837699FCAC5a72E8A544e99520d07C40a6761;
        }

        _transferOwnership(owner);
    }

    function initLine() public {

        //
        address[] memory level1 = new address[](13);
        level1[0] = 0xBb58146545bcDa0Eb18a2f8ddE54D265B9985718;
        level1[1] = 0x9eADb3727a5c17C233C2faef7942a46cD34AD3C7;
        level1[2] = 0x6E6aC68D627c7a7730E3800F783a86683E40C503;
        level1[3] = 0x950D591560a0aAac77fEec5597e261Cfdc990E6a;
        level1[4] = 0xd4F0EB200f74EA14Ac3Ee587E1761D69F4f73346;
        level1[5] = 0xB86Ea10e9754e85b9B0D5F3B009D4CC19882b0d1;
        level1[6] = 0x13412520D5bfED90dad7aa62379dD88Ec2b1b428;
        level1[7] = 0x9d199cCBBAc369D6b7136E2301dD5577A80000A1;
        level1[8] = 0x4769D1f03063A8567215e61Ed62349e5eE25D74B;
        level1[9] = 0x15b3DBB213c464Cc6965C9b5c42A267F6B77E41A;
        level1[10] = 0xB2f5d65980737936a00775ECeC1cA9E3FF5E6ff8;
        level1[11] = 0x78BEa56Fb33506D718d09715e6e29404cD511Ea4;
        level1[12] = 0xd2Fa58962ad53bc30CD01B74D29Ba5b65c78A552;

        _depositX(level1,defaultRef);

        //0xd2Fa58962ad53bc30CD01B74D29Ba5b65c78A552
        address[] memory level21 = new address[](2);
        level21[0] = 0xDC7DA674FEE64c811fDD572C667966D41Cc60e1e;
        level21[1] = 0xEB3DF93623cB3ed9eeEF82D5812eeDB6D265BBff;

        _deposit(level21[0],0xd2Fa58962ad53bc30CD01B74D29Ba5b65c78A552);
        _deposit(level21[1],0xd2Fa58962ad53bc30CD01B74D29Ba5b65c78A552);

        //0xDC7DA674FEE64c811fDD572C667966D41Cc60e1e
        address[] memory level31 = new address[](4);
        level31[0] = 0x43C051B7a6632621371192Ec83e86eeeC84484CA;
        level31[1] = 0x207174593F3E20099AA88c3F0E3EC5c1ECb13668;
        level31[2] = 0x9b33737d00b03c9E0E28c71E869163b8c5F13449;
        level31[3] = 0x3086A1a95B527Bc73081351c5cA865D60723E735;

        _depositX(level31,0xDC7DA674FEE64c811fDD572C667966D41Cc60e1e);


        //0x3086A1a95B527Bc73081351c5cA865D60723E735
        address[] memory level41 = new address[](2);
        level41[0] = 0x11fca7600535938672EF39207c3c84f296d6C5E2;
        level41[1] = 0x5404cED4Af95E0F8Ba444E77f50c57816e505650;

        _deposit(level41[0],0x3086A1a95B527Bc73081351c5cA865D60723E735);
        _deposit(level41[1],0x3086A1a95B527Bc73081351c5cA865D60723E735);

        //0xEB3DF93623cB3ed9eeEF82D5812eeDB6D265BBff
        address[] memory level51 = new address[](4);
        level51[0] = 0xcC9EC86DcCF6109b24d81B415B9be0f8Ae93D3bf;
        level51[1] = 0x78CA4912ffcC94aDcD4d21b0657Ddfc686d39ec0;
        level51[2] = 0x9e5d8B434b7f28F2E2fbf85663beA8f9c645aA59;
        level51[3] = 0xBF70E18A3147CE803aC3BC12eA39202CcaB0B02A;

        _depositX(level51,0xEB3DF93623cB3ed9eeEF82D5812eeDB6D265BBff);

        //0xBF70E18A3147CE803aC3BC12eA39202CcaB0B02A
        address[] memory level61 = new address[](2);
        level61[0] = 0x6b9054D61003881245173CF312FDa9122140A490;
        level61[1] = 0x4700f42AE83Fee99BABF87B5732dd7cf54e30eC2;

        _deposit(level61[0],0xBF70E18A3147CE803aC3BC12eA39202CcaB0B02A);
        _deposit(level61[1],0xBF70E18A3147CE803aC3BC12eA39202CcaB0B02A);

        //0x11fca7600535938672EF39207c3c84f296d6C5E2
        address[] memory level71 = new address[](1);
        level71[0] = 0x04aa86624CE50009591d0747056A9851A1E39dFa;

        _deposit(level71[0],0x11fca7600535938672EF39207c3c84f296d6C5E2);

        _deposit(0x64fd24458C008F600eA6A129586BA21D203d293d,0x04aa86624CE50009591d0747056A9851A1E39dFa);
    }

    function _depositX(address[] memory accounts,address ref_) private {
        address rf = ref_;
        for (uint i =0; i< accounts.length; i++) {
            _deposit(accounts[i],rf);
            rf = accounts[i];
        }
    }

    function _deposit(address account,address ref_) private {
        require(account != defaultRef, "default err");
        require(userRefs[account].ref == address(0),"IDOed err");
        require(userRefs[ref_].ref != address(0) || ref_ == defaultRef, "ref err");

        userRefs[account].addr = account;
        userRefs[account].ref = ref_;
        users.push(account);

        if (ref_ == defaultRef) {
            defaultLevel1.push(account);
        }
    }

    function deposit(address ref_) external {
        require(msg.sender != defaultRef, "default err");
        require(userRefs[msg.sender].ref == address(0),"IDOed err");
        require(userRefs[ref_].ref != address(0) || ref_ == defaultRef, "ref err");

        bool success = fil.transferFrom(msg.sender, address(this), amount);
        require(success,"transferFrom failed");

        userRefs[msg.sender].addr = msg.sender;
        userRefs[msg.sender].ref = ref_;
        users.push(msg.sender);

        uint256 inviteAmount = amount * invitePercent / 100;
        uint256 catAmount = amount * catPercent / 100;

        fil.transfer(ref_,inviteAmount);
        fil.transfer(filRec,amount - inviteAmount - catAmount);

        address catAddr = selectCat(msg.sender);
        if (catAddr == defaultRef) {
            fil.transfer(filRec,catAmount);
        } else {
            userCats.push(catAddr);
            userRefs[catAddr].catAmount = userRefs[catAddr].catAmount + catAmount;
        }

        userRefs[ref_].inviteAmount += inviteAmount;
        if (ref_ == defaultRef) {
            defaultLevel1.push(msg.sender);
        }
    }

    function selectCat(address addr) public view returns(address) {
        address catAdr = addr;
        for (uint i = 0; i<users.length; i++) {
            catAdr = userRefs[catAdr].ref;
            if (catAdr == defaultRef) {
                return catAdr;
            }
            if (userRefs[catAdr].isCat) {
                return catAdr;
            }
        }
        return catAdr;
    }

    function getUser(address addr) external view returns(User memory) {
        return userRefs[addr];
    }

    function setCat(address addr,bool isCat) external onlyOwner{
        userRefs[addr].isCat = isCat;
        if (!userRefs[addr].isSet) {
            isCats.push(addr);
            userRefs[addr].isSet = true;
        }
    }

    function getCats() external view returns(address[] memory) {
        address[] memory cass = isCats;
        for (uint i=0; i<cass.length; i++) {
            if (!userRefs[cass[i]].isCat) {
                cass[i] = address(0);
            }
        }
        return cass;
    }

    function getCatsLen() private view returns(uint256 len) {
        for (uint i=0; i<isCats.length; i++) {
            if (userRefs[isCats[i]].isCat) {
                len++;
            }
        }
        return len;
    }

    function distribute() external onlyOwner {
        for (uint i =0; i < userCats.length; i++) {
            uint256 amountCat = userRefs[userCats[i]].catAmount - userRefs[userCats[i]].debtCatAmount;
            if (amountCat > 0) {
                userRefs[userCats[i]].debtCatAmount = userRefs[userCats[i]].catAmount;
                fil.transfer(userRefs[userCats[i]].addr,amountCat);
            }
        }
        address[] memory userCatNull;
        userCats = userCatNull;
    }

    function getCatsAmount() public view returns (uint256 totalAmount) {
        for (uint i =0; i < userCats.length; i++) {
            uint256 amountCat = userRefs[userCats[i]].catAmount - userRefs[userCats[i]].debtCatAmount;
            totalAmount += amountCat;
        }
        return totalAmount;
    }

    function getDefaultLevel1() external view returns (address[] memory) {
        return defaultLevel1;
    }

    function usersAddr() external view returns(address[] memory) {
        return users;
    }

    function getUserCats() external view returns(address[] memory) {
        return userCats;
    }

    function getSys() external view returns(Sys memory) {
        Sys memory sys = Sys(address(0),0,0,0,0,0,0);
        sys.filAddr = address(fil);
        sys.balance = fil.balanceOf(address(this));
        sys.catsAmount = getCatsAmount();
        sys.usersLen = users.length;
        sys.usersLevel1Len = defaultLevel1.length;
        sys.isCatsLen = getCatsLen();
        sys.totalAmount = users.length * amount;
        return sys;
    }
}

