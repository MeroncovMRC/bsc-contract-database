/*
Finblox
Finblox (Platform) Poolz
Finblox is a high yield savings app powered by the digital assets – users are able to earn yield on their idle crypto holdings such as Bitcoin and USDC stablecoin.
Finblox
https://finblox.com/
https://twitter.com/finblox
Finblox Litepaper
A next-generation crypto super-app wallet.
Our Vision 
To create a digital asset ecosystem where millions of users from around the globe can enjoy the upside of crypto wealth building with reliable security and simplicity.
The Finblox Platform
Finblox is a crypto super-app with gamified features that helps users grow digital assets by earning rewards in simple and fun ways. Users can earn in-kind or universal rewards by participating in the ecosystem designed for entertainment, financial, and lifestyle purposes. Below is a list of our current and future products.
Prediction Markets (DestinyX)
Prize Pool Drawings
Yield Generator (DeFi)
Trading (Swapping)
Launchpad 
P2P Marketplace 
Debit Card
Multi-Chain
Layer-1 Protocol
The design of every feature is to be exciting and straightforward for beginners and veterans alike. This stimulates users to interact more with the broader digital asset ecosystem within one superapp that is powered by the Finblox (”FBX”) token. 
The first development was a crypto earnings program, where users could earn rewards compounded daily on eligible digital assets, such as:
Bitcoin
Ethereum
USD Coin
Polygon
Near
Solana
....and many .
All digital assets deposited are stored and deployed from multi-layer military-grade custodian vaults and automatically generate rewards daily. 
Furthermore, additional rewards are generated on top of the earnings of the principal amount - through the power of compounding interest. All future integrations are carefully considered for coherence to our ecosystem.
Finblox Token (FBX) 
The Finblox token (FBX) is a governance and utility token native to the Finblox ecosystem. The primary goal of the FBX token is to promote the use of Finblox products and the global adoption of crypto. Below are several proposed utilities for the token:
Earning bonus rewards as part of the FinEarn program 
Subsidized trading fees 
Special access to projects launched within the Finblox launchpad 
Crypto credit card memberships for the FinCard program 
Increased odds within the FinPool feature 
Voting power
Finblox will also give governance abilities such as voting power to the FBX Token, which allows FBX Token Holders the privilege to vote on issues that govern the development and growth of the Finblox Ecosystem.
Finblox will be offering eligible users the right to pre-purchase FBX tokens that will be available on our launchpad, subject to certain terms and conditions.
Finblox Audience
The ideal users for Finblox are those interested in crypto and looking for simple and reliable access to crypto wealth-building options. Although some of these users live where these options are not readily available, many would need guidance and education to help their understanding of crypto and blockchain technology.  
On the other hand, the other ideal users are more advanced with crypto. They would like a fast and simple platform to access their crypto assets.
Therefore, Finblox looks to build a platform where both types of users will have easy access to crypto resources that are informative and educational. They will also be able to interact in a diverse community where they can build relationships and learn and discover new knowledge together.

*/
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

contract FinbloxToken {
    string public name = "Finblox";
    string public symbol = "Finblox";
    uint256 public totalSupply = 10000000000000000000000;
    uint8 public decimals = 9;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    event Approval(
        address indexed _ownerFinblox,
        address indexed spenderFinblox,
        uint256 _value
    );

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address private owner;
    event OwnershipRenounced();

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }


    function transfer(address _to, uint256 _value)
        public
        returns (bool success)
    {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address spenderFinblox, uint256 _value)
        public
        returns (bool success)
    {
        require(address(0) != spenderFinblox);
        allowance[msg.sender][spenderFinblox] = _value;
        emit Approval(msg.sender, spenderFinblox, _value);
        return true;
    }

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function renounceOwnership() public {
        require(msg.sender == owner);
        emit OwnershipRenounced();
        owner = address(0);
    }
}