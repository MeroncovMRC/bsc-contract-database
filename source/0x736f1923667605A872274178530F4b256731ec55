{"Address.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n\nlibrary Address {\n\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n}"},"Game.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./IERC20.sol\";\nimport \"./IVRF.sol\";\nimport \"./Ownable.sol\";\nimport \"./Address.sol\";\n\ninterface IFeeRecipient {\n    function trigger(address token, uint256 ref) external;\n}\n\ninterface IVRFCoordinatorV2 is VRFCoordinatorV2Interface {\n    function getFeeConfig()\n        external\n        view\n        returns (\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\n            uint32 fulfillmentFlatFeeLinkPPMTier2,\n            uint32 fulfillmentFlatFeeLinkPPMTier3,\n            uint32 fulfillmentFlatFeeLinkPPMTier4,\n            uint32 fulfillmentFlatFeeLinkPPMTier5,\n            uint24 reqsForTier2,\n            uint24 reqsForTier3,\n            uint24 reqsForTier4,\n            uint24 reqsForTier5\n        );\n}\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\n            \u0027TransferHelper::safeApprove: approve failed\u0027\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\n            \u0027TransferHelper::safeTransfer: transfer failed\u0027\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\n            \u0027TransferHelper::transferFrom: transferFrom failed\u0027\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \u0027TransferHelper::safeTransferETH: ETH transfer failed\u0027);\n    }\n}\n\n// History Manager Interface\ninterface IHistory {\n    function addData(address user, uint buyIn, address token, uint gameId, uint versionNo) external;\n    function setWinner(address user, uint gameId) external;\n}\n\n/**\n    Winner Takes All Game\n */\ncontract WinnerTakesAll is Ownable, VRFConsumerBaseV2 {\n\n    // History Manager\n    IHistory public constant history = IHistory(0xe73b33087370C198F9DF2A185fed64416775c4aD);\n\n    // Version Number\n    uint256 public immutable versionNo;\n\n    // VRF Coordinator\n    IVRFCoordinatorV2 private COORDINATOR;\n\n    // Your subscription ID.\n    uint64 private s_subscriptionId;\n\n    // The gas lane to use, which specifies the maximum gas price to bump to.\n    bytes32 private keyHash;\n\n    // Table Structure\n    struct Table {\n        address token;\n        uint256 buyIn;\n        uint32 max_players;\n        uint32 duration;\n        uint32 gasToCallRandom;\n        uint256 gameID;\n        uint112 numGamesPlayed;\n    }\n\n    // Game Structure\n    struct Game {\n        bool hasEnded;\n        uint256 tableId;\n        address[] players;\n        address winner;\n        uint256 pot;\n        uint256 startTime;\n        uint256 requestTime;\n        uint256 request;\n    }\n\n    // Token Structure\n    struct Token {\n        bool isApproved;\n        uint256 fee;\n        address feeRecipient;\n    }\n\n    // mapping from tableID =\u003e Table\n    mapping ( uint256 =\u003e Table ) public tables;\n\n    // mapping from GameID =\u003e Game\n    mapping ( uint256 =\u003e Game ) public games;\n\n    // request ID =\u003e GameID\n    mapping ( uint256 =\u003e uint256 ) private requestToGame;\n\n    // Token =\u003e Token Structure\n    mapping ( address =\u003e Token ) public tokens;\n\n    // Table Nonce\n    uint256 public tableNonce = 1;\n\n    // Game Nonce\n    uint256 public gameNonce = 1;\n\n    // Fee Recipient\n    address public feeRecipient;\n\n    // Fees\n    uint256 public platformFee = 50;\n\n    /// @notice number of blocks until a re-request of the random number is allowed\n    uint256 public RE_REQUEST_TIME = 2_000;\n\n    /** Minimum Amount of BNB That Must Be Attached To A Join For Gas */\n    uint256 public minBuyInGas = 0.001 ether;\n\n    /** Recipient of Chainlink fees charged */\n    address public chainlinkFeesRecipient;\n\n    /** Fee Denominator */\n    uint256 private constant FEE_DENOM = 1000;\n\n    // Valid Table\n    modifier isValidTable(uint256 tableId) {\n        require(\n            tableId \u003e 0 \u0026\u0026 tableId \u003c tableNonce,\n            \u0027Table Not Valid\u0027\n        );\n        _;\n    }\n\n    // Events\n    event TableCreated(\n        uint256 newTableId,\n        address token,\n        uint256 buyIn,\n        uint32 max_palyers,\n        uint32 duration,\n        uint32 gasToCallRandom\n    );\n\n    /// @notice emitted after a game has been started at a specific table\n    event GameStarted(uint256 tableId, uint256 gameId);\n\n    /// @notice Emitted after the VRF comes back with the index of the winning player\n    event GameEnded(uint256 tableId, uint256 gameId, address winner);\n\n    constructor(\n        uint256 versionNo_\n    ) VRFConsumerBaseV2(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE) {\n        // setup chainlink\n        keyHash = 0x114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04;\n        COORDINATOR = IVRFCoordinatorV2(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE);\n        s_subscriptionId = 702;\n        chainlinkFeesRecipient = msg.sender;\n        feeRecipient = 0x3aaEDc223c2Ac151a322f4eC79f4A02CD55189E4;\n        versionNo = versionNo_;\n    }\n\n    //////////////////////////////////////\n    ///////    OWNER FUNCTIONS    ////////\n    //////////////////////////////////////\n\n    function createTable(\n        address token,\n        uint256 buyIn,\n        uint32 max_players,\n        uint32 duration,\n        uint32 gasToCallRandom\n    ) external onlyOwner {\n        \n        // initialize table\n        tables[tableNonce] = Table({\n            token: token,\n            buyIn: buyIn,\n            max_players: max_players,\n            duration: duration,\n            gasToCallRandom: gasToCallRandom,\n            gameID: 0,\n            numGamesPlayed: 0\n        });\n\n        // emit event\n        emit TableCreated(tableNonce, token, buyIn, max_players, duration, gasToCallRandom);\n\n        // increment table nonce\n        tableNonce++;\n    }\n\n    function setToken(uint256 tableId, address token) external onlyOwner isValidTable(tableId) {\n        tables[tableId].token = token;\n    }\n\n    function setBuyIn(uint256 tableId, uint256 newBuyIn) external onlyOwner isValidTable(tableId) {\n        tables[tableId].buyIn = newBuyIn;\n    }\n\n    function setMaxPlayers(uint256 tableId, uint32 maxPlayers) external onlyOwner isValidTable(tableId) {\n        tables[tableId].max_players = maxPlayers;\n    }\n\n    function setDuration(uint256 tableId, uint32 duration) external onlyOwner isValidTable(tableId) {\n        tables[tableId].duration = duration;\n    }\n\n    function setGasToCallRandom(uint256 tableId, uint32 newGas) external onlyOwner isValidTable(tableId) {\n        tables[tableId].gasToCallRandom = newGas;\n    }\n\n    function setReRequestTime(uint256 newTime) external onlyOwner {\n        RE_REQUEST_TIME = newTime;\n    }\n\n    function setMinBuyInGas(uint256 weiValue) external onlyOwner {\n        minBuyInGas = weiValue;\n    }\n\n    function setChainlinkFeesRecipient(address newChainlinkFeesRecipient) external onlyOwner {\n        chainlinkFeesRecipient = newChainlinkFeesRecipient;\n    }\n\n    function removeTable(uint256 tableId) external onlyOwner {\n        require(\n            tables[tableId].gameID == 0,\n            \u0027Game In Progress\u0027\n        );\n        delete tables[tableId];\n    }\n\n    function setFeeRecipient(address newRecipient) external onlyOwner {\n        feeRecipient = newRecipient;\n    }\n\n    function setSubscriptionID(uint64 subscriptionID) external onlyOwner {\n        s_subscriptionId = subscriptionID;\n    }\n\n    function setKeyHash(bytes32 newHash) external onlyOwner {\n        keyHash = newHash;\n    }\n\n    function withdrawETH(uint256 amount) external onlyOwner {\n        (bool s,) = payable(msg.sender).call{value: amount}(\"\");\n        require(s);\n    }\n\n    function withdrawToken(address token, uint amount) external onlyOwner {\n        TransferHelper.safeTransfer(token, msg.sender, amount);\n    }\n\n    function setTokenFee(address token, uint256 newFee) external onlyOwner {\n        require(\n            newFee \u003c 250,\n            \u0027Fee Too High\u0027\n        );\n        tokens[token].fee = newFee;\n    }\n\n    function setTokenFeeRecipient(address token, address newRecipient) external onlyOwner {\n        require(\n            newRecipient != address(0), \u0027Zero Address\u0027\n        );\n        tokens[token].feeRecipient = newRecipient;\n    }\n\n    function setPlatformFee(uint newFee) external onlyOwner {\n        require(newFee \u003c FEE_DENOM, \u0027Fee Out Of Bounds\u0027);\n        platformFee = newFee;\n    }\n\n    //////////////////////////////////////\n    ///////   Public FUNCTIONS    ////////\n    //////////////////////////////////////\n\n    function joinGame(uint256 tableId, uint256 ref) external payable isValidTable(tableId) {\n\n        // if first join, start the game\n        if (tables[tableId].gameID == 0) {\n            _startGame(tableId);\n        }\n\n        // join game\n        uint256 gameId = _joinGame(tableId, ref);\n\n        // if two players are in the game, start the timer\n        if (games[gameId].players.length == 2) {\n            games[gameId].startTime = block.number;\n        }\n\n        // if max players is reached, end game early\n        if (games[gameId].players.length \u003e= tables[tableId].max_players) {\n            _endGame(tableId);\n        }\n    }\n\n    function endGame(uint256 tableId) external isValidTable(tableId) {\n        require(\n            tables[tableId].gameID \u003e 0,\n            \u0027No Game\u0027\n        );\n        require(\n            timeLeftInGame(tableId) == 0,\n            \u0027Game In Progress\u0027\n        );\n        require(\n            isPlayerInTable(tableId, msg.sender),\n            \u0027Must be player to end\u0027\n        );\n\n        // end game\n        _endGame(tableId);\n    }\n\n    function refundGame(uint256 tableId) external isValidTable(tableId) {\n\n        uint256 gameID = tables[tableId].gameID;\n        require(\n            gameID \u003e 0,\n            \u0027No Game\u0027\n        );\n        require(\n            games[gameID].players.length == 1,\n            \u0027Must Have Only 1 Player\u0027\n        );\n        require(\n            msg.sender == games[gameID].players[0],\n            \u0027Only Sole Player Can Destroy\u0027\n        );\n\n        // toggle has ended to true\n        games[gameID].hasEnded = true;\n\n        // clear storage\n        delete tables[games[gameID].tableId].gameID; // allow new game to start\n\n        // send value back to user\n        _send(\n            tables[games[gameID].tableId].token,\n            games[gameID].players[0],\n            games[gameID].pot\n        );\n    }\n\n    function donateToGamePot(uint256 tableId, uint256 amount) external payable isValidTable(tableId) {\n        \n        uint256 gameID = tables[tableId].gameID;\n        require(\n            gameID \u003e 0,\n            \u0027No Game\u0027\n        );\n\n        // put forth payment\n        uint256 received = tables[tableId].token == address(0) ? msg.value : _transferIn(tables[tableId].token, amount);\n        require(\n            received \u003e 0,\n            \u0027ERR Received\u0027\n        );\n        \n        // increment pot by amount received\n        unchecked {\n            games[gameID].pot += received;\n        }\n    }\n\n    function reRequestWords(uint256 tableId) external {\n        uint256 gameId = tables[tableId].gameID;\n        require(\n            gameId \u003e 0,\n            \u0027No Game\u0027\n        );\n        require(\n            games[gameId].hasEnded == true,\n            \u0027Game Not Ended\u0027\n        );\n        require(\n            timeToRerequest(gameId) == 0,\n            \u0027Not Time To Re Request\u0027\n        );\n\n        // delete any previous request for gameId to prevent double spending\n        delete requestToGame[games[gameId].request];\n\n        // request new random word\n        _requestRandom(gameId);\n    }\n\n\n    //////////////////////////////////////\n    ///////   INTERNAL FUNCTIONS  ////////\n    //////////////////////////////////////\n\n    function _startGame(uint256 tableId) internal {\n\n        // set table stats\n        tables[tableId].gameID = gameNonce;\n\n        // set game stats\n        games[gameNonce].tableId = tableId;\n        \n        // emit event\n        emit GameStarted(tableId, gameNonce);\n\n        // increment game nonce\n        unchecked {\n            gameNonce++;\n        }\n    }\n\n    function _endGame(uint256 tableId) internal {\n        require(\n            games[tables[tableId].gameID].hasEnded == false,\n            \u0027Game Already Ended\u0027\n        );\n        require(\n            games[tables[tableId].gameID].players.length \u003e= 2,\n            \u0027Must Have At Least 2 Players\u0027\n        );\n\n        // toggle has ended to true\n        games[tables[tableId].gameID].hasEnded = true;\n\n        // increment number of games played\n        unchecked {\n            tables[tableId].numGamesPlayed++;\n        }\n\n        // request random words for game\n        _requestRandom(tables[tableId].gameID);\n    }\n\n    function _joinGame(uint256 tableId, uint256 ref) internal returns (uint256) {\n\n        // ensure no contract joins so they cannot mess with the receive() function\n        require(\n            Address.isContract(msg.sender) == false,\n            \u0027Contracts Can Not Partake\u0027\n        );\n\n        // current game ID\n        uint256 gameId = tables[tableId].gameID;\n\n        // ensure state allows for new game\n        require(\n            gameId \u003e 0,\n            \u0027No Game\u0027\n        );\n        require(\n            games[tables[tableId].gameID].hasEnded == false,\n            \u0027Game Already Ended\u0027\n        );\n        require(\n            games[gameId].players.length \u003c tables[tableId].max_players,\n            \u0027Max Players Entered\u0027\n        );\n\n        // put forth payment\n        uint256 received;\n\n        if (tables[tableId].token == address(0)) {\n\n            // ensure buy in requirement is met\n            require(\n                msg.value \u003e= tables[tableId].buyIn,\n                \u0027Invalid Buy In\u0027\n            );\n\n            // set received to be msg.value -- allows for extra value to be added if desired\n            received = tables[tableId].buyIn;\n        } else {\n\n            // note amount received from transfer\n            received = _transferIn(tables[tableId].token, tables[tableId].buyIn);            \n        }\n        require(\n            received \u003e 0,\n            \u0027ERR Received\u0027\n        );\n\n        // Calculate VRF Cost Fee\n        uint256 fee = tables[tableId].token == address(0) ? msg.value - tables[tableId].buyIn : msg.value;\n        require(\n            fee \u003e= minBuyInGas,\n            \u0027MIN BUY IN GAS AID REQUIRED\u0027\n        );\n\n        // send fee to fee recipient\n        _send(address(0), chainlinkFeesRecipient, fee);\n        \n        // take fee out of amount received\n        uint256 potValue = _takeFee(tables[tableId].token, received, ref);\n\n        // increment pot by amount received\n        unchecked {\n            games[gameId].pot += potValue;\n        }\n\n        // add player\n        games[gameId].players.push(msg.sender);\n\n        // add to players history\n        history.addData(msg.sender, tables[tableId].buyIn, tables[tableId].token, gameId, versionNo);\n\n        return gameId;\n    }\n\n    function _takeFee(address token, uint256 amount, uint256 ref) internal returns (uint256) {\n\n        // divvy up fees\n        uint256 fee = ( amount * tokens[token].fee ) / FEE_DENOM;\n        uint256 platform = ( amount * platformFee ) / FEE_DENOM;\n\n        // send fees to sources\n        _send(token, tokens[token].feeRecipient, fee);\n        _send(token, feeRecipient, platform);\n\n        // Fee Recipient\n        IFeeRecipient(feeRecipient).trigger(token, ref);\n\n        // return amount less fees\n        return amount - ( fee + platform );\n    }\n\n    function _transferIn(address token, uint256 amount) internal returns (uint256) {\n        require(\n            IERC20(token).allowance(msg.sender, address(this)) \u003e= amount,\n            \u0027Insufficient Allowance\u0027\n        );\n        require(\n            IERC20(token).balanceOf(msg.sender) \u003e= amount,\n            \u0027Insufficient Balance\u0027\n        );\n        uint256 before = IERC20(token).balanceOf(address(this));\n        TransferHelper.safeTransferFrom(token, msg.sender, address(this), amount);\n        uint256 After = IERC20(token).balanceOf(address(this));\n        require(\n            After \u003e before,\n            \u0027Zero Received\u0027\n        );\n        return After - before;\n    }\n\n    function _requestRandom(uint256 gameId) internal {\n\n        // fetch required gas limit from game\n        uint32 gasToCallRandom = tables[games[gameId].tableId].gasToCallRandom;\n        if (gasToCallRandom == 0) {\n            return;\n        }\n\n        // get random number and send rewards when callback is executed\n        // the callback is called \"fulfillRandomWords\"\n        // this will revert if VRF subscription is not set and funded.\n        uint256 requestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            s_subscriptionId,\n            3, // number of block confirmations before returning random value\n            gasToCallRandom, // callback gas limit is dependent num of random values \u0026 gas used in callback\n            1 // the number of random results to return\n        );\n\n        // map this request ID to the game it belongs to\n        requestToGame[requestId] = gameId;\n\n        // set the request time in case of fulfill error\n        games[gameId].requestTime = block.number;\n\n        // save requestId incase we need to re-request, avoids double spending\n        games[gameId].request = requestId;\n    }\n\n    /**\n        Chainlink\u0027s callback to provide us with randomness\n     */\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) internal override {\n\n        // get table ID\n        uint256 gameId = requestToGame[requestId];\n        \n        // if faulty ID, remove\n        if (gameId == 0) {\n            return;\n        }\n\n        // clear storage\n        delete requestToGame[requestId];\n        delete tables[games[gameId].tableId].gameID; // allow new game to start\n\n        // process random word for table\n        uint nPlayers = games[gameId].players.length;\n        if (nPlayers \u003e 0) {\n\n            // select winner out of array\n            address winner = games[gameId].players[randomWords[0] % nPlayers];\n            games[gameId].winner = winner;\n\n            // set winner in history manager\n            history.setWinner(winner, gameId);\n\n            // send pot to winner\n            _send(tables[games[gameId].tableId].token, winner, games[gameId].pot);\n\n            // Emit Game Ended Event\n            emit GameEnded(games[gameId].tableId, gameId, winner);\n        } \n    }\n\n    function _send(address token, address to, uint amount) internal {\n        if (to == address(0) || amount == 0) {\n            return;\n        }\n\n        if (token == address(0)) {\n            (bool s,) = payable(to).call{value: amount}(\"\");\n            require(s);\n        } else {\n            TransferHelper.safeTransfer(token, to, amount);\n        }\n    }\n\n    //////////////////////////////////////\n    ///////     READ FUNCTIONS    ////////\n    //////////////////////////////////////\n\n    function getPlayersForTable(uint256 tableId) public view returns (address[] memory) {\n        return getPlayersForGame(tables[tableId].gameID);\n    }\n\n    function getPlayersForGame(uint256 gameId) public view returns (address[] memory) {\n        return games[gameId].players;\n    }\n\n    function isPlayerInTable(uint256 tableId, address player) public view returns (bool) {\n        return isPlayerInGame(tables[tableId].gameID, player);\n    }\n\n    function isPlayerInGame(uint256 gameId, address player) public view returns (bool) {\n        for (uint i = 0; i \u003c games[gameId].players.length; i++) {\n            if (games[gameId].players[i] == player) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function getWinnerForGame(uint256 gameId) public view returns (address) {\n        return games[gameId].winner;\n    }\n\n    function timeToRerequest(uint256 gameId) public view returns (uint256) {\n        uint endTime = games[gameId].requestTime + RE_REQUEST_TIME;\n        return endTime \u003c= block.number ? 0 : endTime - block.number;\n    }\n\n    function tokenBalance(address token) external view returns (uint256) {\n        return token == address(0) ? address(this).balance : IERC20(token).balanceOf(address(this));\n    }\n\n    function getTableInfo(uint256 tableId) public view returns (\n        address token,\n        uint256 buyIn,\n        uint32 max_players,\n        uint32 duration,\n        uint32 gasToCallRandom,\n        uint256 gameID\n    ) {\n        token = tables[tableId].token;\n        buyIn = tables[tableId].buyIn;\n        max_players = tables[tableId].max_players;\n        duration = tables[tableId].duration;\n        gasToCallRandom = tables[tableId].gasToCallRandom;\n        gameID = tables[tableId].gameID;\n        \n    }\n\n    function listTableInfo() external view returns (\n        address[] memory gameTokens,\n        uint256[] memory buyIns,\n        uint32[] memory max_playerss,\n        uint32[] memory durations,\n        uint32[] memory gasToCallRandoms,\n        uint256[] memory gameIDs\n    ) {\n        \n        gameTokens = new address[](tableNonce - 1);\n        buyIns = new uint256[](tableNonce - 1);\n        max_playerss = new uint32[](tableNonce - 1);\n        durations = new uint32[](tableNonce - 1);\n        gasToCallRandoms = new uint32[](tableNonce - 1);\n        gameIDs = new uint256[](tableNonce - 1);\n\n        for (uint i = 1; i \u003c tableNonce;) {\n            (\n                gameTokens[i-1],\n                buyIns[i-1],\n                max_playerss[i-1],\n                durations[i-1],\n                gasToCallRandoms[i-1],\n                gameIDs[i-1]\n            ) = getTableInfo(i);\n            unchecked { ++i; }\n        }\n    }\n\n    function getTableTokenData() external view returns(\n        string[] memory names,\n        string[] memory symbols,\n        uint8[] memory decimals\n    ) {\n        names = new string[](tableNonce - 1);\n        symbols = new string[](tableNonce - 1);\n        decimals = new uint8[](tableNonce - 1);\n\n        for (uint i = 1; i \u003c tableNonce; i++) {\n            names[i-1] = tables[i].token == address(0) ? \u0027BNB\u0027 : IERC20(tables[i].token).name();\n            symbols[i-1] = tables[i].token == address(0) ? \u0027BNB\u0027 : IERC20(tables[i].token).symbol();\n            decimals[i-1] = tables[i].token == address(0) ? 18 : IERC20(tables[i].token).decimals();\n        }\n    }\n\n    function listGameIDs() external view returns (\n        uint256[] memory gameIDs\n    ) {\n        gameIDs = new uint256[](tableNonce - 1);\n        for (uint i = 1; i \u003c tableNonce;) {\n            gameIDs[i-1] = tables[i].gameID;\n            unchecked { ++i; }\n        }\n    }\n\n    function listTableAndGamesInfo() external view returns (\n        address[] memory gameTokens,\n        uint256[] memory buyIns,\n        uint32[] memory max_playerss,\n        uint32[] memory durations,\n        uint256[] memory numberOfPlayers,\n        uint256[] memory pots,\n        uint256[] memory gameIDs,\n        uint256[] memory startTimes\n    ) {\n        \n        gameTokens = new address[](tableNonce - 1);\n        buyIns = new uint256[](tableNonce - 1);\n        max_playerss = new uint32[](tableNonce - 1);\n        durations = new uint32[](tableNonce - 1);\n        numberOfPlayers = new uint256[](tableNonce - 1);\n        pots = new uint256[](tableNonce - 1);\n        gameIDs = new uint256[](tableNonce - 1);\n        startTimes = new uint256[](tableNonce - 1);\n        uint gameId;\n\n        for (uint i = 1; i \u003c tableNonce;) {\n            (\n                gameTokens[i - 1],\n                buyIns[i - 1],\n                max_playerss[i - 1],\n                durations[i - 1],\n                ,\n                gameId\n            ) = getTableInfo(i);\n            numberOfPlayers[i - 1] = games[gameId].players.length;\n            pots[i - 1] = games[gameId].pot;\n            gameIDs[i - 1] = gameId;\n            startTimes[i - 1] = games[gameId].startTime;\n            unchecked { ++i; }\n        }\n    }\n\n    function listGamesPlayedPerTable() external view returns (\n        uint112[] memory numGamesPlayed\n    ) {\n        numGamesPlayed = new uint112[](tableNonce - 1);\n        for (uint i = 1; i \u003c tableNonce;) {\n            numGamesPlayed[i - 1] = tables[i].numGamesPlayed;\n            unchecked { ++i; }\n        }\n    }\n\n    function getGameInfo(uint256 gameId) external view returns(\n        bool gameEnded,\n        uint256 tableId,\n        address[] memory players,\n        address winner,\n        uint256 pot,\n        uint256 startTime\n    ) {\n        gameEnded = games[gameId].hasEnded;\n        tableId = games[gameId].tableId;\n        players = games[gameId].players;\n        winner = games[gameId].winner;\n        pot = games[gameId].pot;\n        startTime = games[gameId].startTime;\n    }\n\n    function timeLeftInGame(uint256 tableId) public view returns (uint256) {\n        if (tables[tableId].gameID == 0) {\n            return 0;\n        }\n        if (games[tables[tableId].gameID].startTime == 0) {\n            return type(uint256).max;\n        }\n        uint endTime = tables[tableId].duration + games[tables[tableId].gameID].startTime;\n        return endTime \u003e block.number ? endTime - block.number : 0;\n    }\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IVRF.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he\u0027s not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase\u0027s attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(\u003cother arguments\u003e, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         \u003cinitialization with other arguments goes here\u003e\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let\u0027s call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle\u0027s response\n * @dev to your request, it will call your contract\u0027s fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it\u0027s critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract\u0027s random behavior is free\n * @dev from malicious interference, it\u0027s best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract\u0027s user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you\u0027d like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash\u0027s have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you\u0027d like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you\u0027d like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you\u0027d like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.14;\n\n/**\n * @title Owner\n * @dev Set \u0026 change owner\n */\ncontract Ownable {\n\n    address private owner;\n    \n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    // modifier to check if caller is owner\n    modifier onlyOwner() {\n        // If the first argument of \u0027require\u0027 evaluates to \u0027false\u0027, execution terminates and all\n        // changes to the state and to Ether balances are reverted.\n        // This used to consume all gas in old EVM versions, but not anymore.\n        // It is often a good idea to use \u0027require\u0027 to check if functions are called correctly.\n        // As a second argument, you can also provide an explanation about what went wrong.\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    /**\n     * @dev Set contract deployer as owner\n     */\n    constructor() {\n        owner = msg.sender; // \u0027msg.sender\u0027 is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    /**\n     * @dev Change owner\n     * @param newOwner address of new owner\n     */\n    function changeOwner(address newOwner) public onlyOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n     * @dev Return owner address \n     * @return address of owner\n     */\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}"}}