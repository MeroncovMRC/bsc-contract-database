{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"interfaceIBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"interfaceIUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}"},"interfaceIUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint);\n\n    function price1CumulativeLast() external view returns (uint);\n\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}"},"interfaceIUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"},"interfaceIUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\nimport \"./interfaceIUniswapV2Router01.sol\";\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.15;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n"},"RYS.sol":{"content":"/**\n * Develop by CPTRedHawk\n * @ Esse contrato Foi desenvolvido por https://t.me/redhawknfts\n * Caso queira ter uma plataforma similar, gentileza chamar no Telegram!\n * SPDX-License-Identifier: MIT\n * Entrega teu caminho ao senhor, e tudo ele o fará! Salmos 37\n */\n\npragma solidity ^0.8.17;\n\nimport \"./interfaceIBEP20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./Address.sol\";\nimport \"./interfaceIUniswapV2Factory.sol\";\nimport \"./interfaceIUniswapV2Pair.sol\";\nimport \"./interfaceIUniswapV2Router01.sol\";\nimport \"./interfaceIUniswapV2Router02.sol\";\n\n\n\ncontract RYSToken is IBEP20, Ownable {\n    /*=== SafeMath ===*/\n    using SafeMath for uint256;\n    using Address for address;\n    /*=== Endereços ===*/\n    address private burnAddress = address(0); // Endereço de Queima\n    address private internalOperationAddress; // Distribui as Recompensas para os Holders\n    IUniswapV2Router02 public  uniswapV2Router; // Endereço Router\n    address public  uniswapV2Pair; // Par LGK/BNB\n    /*=== Mapeamento ===*/\n    mapping (address =\u003e uint256) private _balance; // Saldo dos Holders\n    mapping (address =\u003e bool) public _excludeFromFee; // Nao paga Taxas\n    mapping (address =\u003e bool) private automatedMarketMakerPairs; // Automatizado de Trocas\n    mapping (address =\u003e mapping(address =\u003e uint256)) private _allowances; // Subsidio\n    mapping (address =\u003e bool) public isTimelockExempt; // Nao tem Tempo de Espera\n    mapping (address =\u003e uint) public cooldownTimerBuy; // Tempo de Compra\n    mapping (address =\u003e uint) public cooldownTimerSell; // Tempo de Venda\n    /*=== Unitarios ===*/\n    uint8 private _decimals = 18;\n    uint256 public cooldownTimerInterval; // Tempo de espera entre compra e venda\n    uint256 private _decimalFactor = 10**_decimals; // Fator Decimal\n    uint256 private _tSupply = 20000000000 * _decimalFactor; // Supply Legitimik\n    uint256 public buyFee = 13; // Taxa de Compra\n    uint256 private previousBuyFee; // Armazena Taxa de Compra\n    uint256 public sellFee = 13; // Taxa de Venda\n    uint256 private previousSellFee; // Armazena Taxa de Venda\n    uint256 private limitBurn = 200000000 * _decimalFactor;\n    uint256 public liquidityPercent = 20; // Taxa de Liquidez 20%\n    uint256 public maxWalletBalance = 5000000000 * _decimalFactor; // 1% do Supply\n    uint256 public maxBuyAmount = 5000000000 * _decimalFactor; // 1% do Supply\n    uint256 public maxSellAmount = 5000000000 * _decimalFactor; // 1% do Supply\n    uint256 public numberOfTokensToSwapToLiquidity = 500 * _decimalFactor; // 0,05% do Supply\n    /*=== Boolean ===*/\n    bool private inSwapAndLiquify; \n    bool private coolDownUser;\n    bool private swapping;\n    bool private activeDividends = true;\n    bool public buyCooldownEnabled = true;\n    bool public sellCooldownEnabled = true;\n    bool private isSendToken = true;\n    bool private blackEnabled = true;\n    bool private swapAndLiquifyEnabled = true;\n    /*=== Strings ===*/\n    string private _name = \"RYS\";\n    string private _symbol =  \"$RYS\";\n    /*=== Modifiers ===*/\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n    modifier lockCoolDown {\n        coolDownUser = true;\n        _;\n        coolDownUser = false;\n    }    \n    /*=== Construtor ===*/\n    constructor() {\n        //  IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // PancakeSwap Router Testnet\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // PancakeSwap Router Mainnet\n        address pairCreated = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH()); // Gera o Par RYS/BNB\n        uniswapV2Router = _uniswapV2Router; // Armazena Rota\n        uniswapV2Pair = pairCreated; // Armazena Par\n        cooldownTimerInterval = 5;\n        _balance[0x32fE0ba05C9ef96A7C78671E524bEE7732fC744E] = _tSupply; // Define Owner como Detentor dos _Tokens\n        internalOperationAddress = owner(); // Define Endereço de Operações\n        _excludeFromFee[0x32fE0ba05C9ef96A7C78671E524bEE7732fC744E] = true; // Define Owner como True para não pagar Taxas\n        _excludeFromFee[owner()] = true; // Define Owner como True para não pagar Taxas\n        _excludeFromFee[address(this)] = true; // Define Contrato como True para não pagar Taxas\n        _excludeFromFee[internalOperationAddress] = true; // Define internalOperationAddress como True para não pagar Taxas\n        isTimelockExempt[0x32fE0ba05C9ef96A7C78671E524bEE7732fC744E] = true; // Owner Nao tem tempo de espera para compra e venda\n        isTimelockExempt[owner()] = true; // Owner Nao tem tempo de espera para compra e venda\n        isTimelockExempt[address(this)] = true; // Contrato Nao tem tempo de espera para compra e venda\n       _setAutomatedMarketMakerPair(pairCreated, true); // Pair é o Automatizador de Transações\n       _approve(owner(), address(uniswapV2Router), ~uint256(0)); // Aprova Tokens para Add Liquidez\n        emit Transfer(address(0), 0x32fE0ba05C9ef96A7C78671E524bEE7732fC744E, _tSupply); // Emite um Evento de Cunhagem\n    }\n    /*=== Receive ===*/\n    receive() external payable {}\n    /*=== Public View ===*/\n    function name() public view override returns(string memory) { return _name; } // Nome do Token\n    function symbol() public view override returns(string memory) { return _symbol; } // Simbolo do Token\n    function decimals() public view override returns(uint8) { return _decimals; } // Decimais\n    function totalSupply() public view override returns(uint256) { return _tSupply; } // Supply Total\n    function balanceOf(address account) public view override returns(uint256) { return _balance[account]; } // Retorna o Saldo em Carteira\n    function allowance(address owner, address spender) public view override returns(uint256) { return _allowances[owner][spender]; } // Subsidio Restante\n        /*=== Eventos ===*/\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\n    event SwapAndLiquifyEnabledUpdated(bool indexed enabled);\n    event LiquidityAdded(uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity);\n    event SentBNBInternalOperation(address usr, uint256 amount);\n    /*=== Private/Internal ===*/\n    function _setRouterAddress(address router) private {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router); // Router\n        address pairCreated = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH()); // Gera o Par LGK/BNB\n        uniswapV2Router = _uniswapV2Router; // Armazena Rota\n        uniswapV2Pair = pairCreated; // Armazena Par\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true); // Armazena o novo Par como o Automatizador de Trocas\n    }\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        require(automatedMarketMakerPairs[pair] != value, \"O pair de AutomatedMarketMakerPair ja esta definido para esse valor\");\n        automatedMarketMakerPairs[pair] = value; // Booleano\n        emit SetAutomatedMarketMakerPair(pair, value); // Emite um Evento para um Novo Automatizador de Trocas\n    }\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"Owner nao pode ser Address 0\");\n        require(spender != address(0), \"Owner nao pode ser Address 0\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\n        uint256 currentAllowance = allowance(owner, spender);\n        if(currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"subsidio insuficiente\");\n            _approve(owner, spender, currentAllowance - amount);\n        }\n    }\n    function _unlimitedAddress(address account) internal view returns(bool) {\n        if(_excludeFromFee[account]) {\n            return true;\n        }\n        else {return false;}\n    }\n    function buyCoolDown(address to) private lockCoolDown {\n        cooldownTimerBuy[to] = block.timestamp; // Ativa o Tempo de Compra\n    }\n    function sellCoolDown(address from) private lockCoolDown  {\n        cooldownTimerSell[from] = block.timestamp; // Ativa o Tempo de Venda\n    }\n    function lockToBuyOrSellForTime(uint256 lastBuyOrSellTime, uint256 lockTime) private lockCoolDown returns (bool) {\n        uint256 crashTime = lastBuyOrSellTime + lockTime;\n        uint256 currentTime = block.timestamp;\n        if(currentTime \u003e= crashTime) {\n            return true;\n        }\n\n        return false;\n    }\n    function getFromLastPurchaseBuy(address walletBuy) private view returns (uint) {\n        return cooldownTimerBuy[walletBuy];\n    }\n    function getFromLastSell(address walletSell) private view returns (uint) {\n        return cooldownTimerSell[walletSell];\n    }\n    function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual{}\n    function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual{}\n    function _transferTokens(address from, address to, uint256 amount) internal {\n        require(to != from, \"Nao pode enviar para o mesmo Endereco\");\n        require(amount \u003e 0, \"Saldo precisa ser maior do que Zero\");\n        _beforeTokenTransfer(from, to, amount);\n\n\n        \n        uint256 fromBalance = _balance[from];\n        require(fromBalance \u003e= amount, \"Voce nao tem Limite de Saldo\");\n        _balance[from] = fromBalance - amount;\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        if (!automatedMarketMakerPairs[from] \u0026\u0026 automatedMarketMakerPairs[to]) {\n            swapping = true;\n            liquify( contractTokenBalance, from );\n            swapping = false;\n        }\n\n        bool takeFee = true;\n\n        if(_excludeFromFee[from] || _excludeFromFee[to]){\n            takeFee = false;\n        }\n\n        if(!takeFee) removeAllFee(); // Remove todas as Taxa\n\n            uint256 fees; // Taxas de Compra, Vendas e Transferencias!\n\n\n            if(automatedMarketMakerPairs[from]) {\n                fees = amount.mul(buyFee).div(100); // Define taxa de Compra\n                if (amount \u003e maxBuyAmount \u0026\u0026 !_unlimitedAddress(from) \u0026\u0026 !_unlimitedAddress(to)) {\n                    revert(\"Montante de Venda nao pode ultrapassar limite\"); \n                }\n\n                if(buyCooldownEnabled \u0026\u0026 !isTimelockExempt[to] \u0026\u0026 !coolDownUser) {\n                    require(lockToBuyOrSellForTime(getFromLastPurchaseBuy(to), cooldownTimerInterval), \"Por favor, aguarde o cooldown entre as compras\");\n                    buyCoolDown(to);\n                }\n            }\n            else if(automatedMarketMakerPairs[to]) {\n                fees = amount.mul(sellFee).div(100); // Define taxa de Venda\n                if (amount \u003e maxSellAmount \u0026\u0026 !_unlimitedAddress(from) \u0026\u0026 !_unlimitedAddress(to)) {\n                    revert(\"Montante de Venda nao pode ultrapassar limite\"); \n                }\n\n                if(sellCooldownEnabled \u0026\u0026 !isTimelockExempt[from] \u0026\u0026 !coolDownUser) {\n                    require(lockToBuyOrSellForTime(getFromLastSell(from), cooldownTimerInterval), \"Por favor, aguarde o cooldown entre as vendas\");\n                    sellCoolDown(from);\n                }\n            }\n\n            if(maxWalletBalance \u003e 0 \u0026\u0026 !_unlimitedAddress(from) \u0026\u0026 !_unlimitedAddress(to) \u0026\u0026 !automatedMarketMakerPairs[to]) {\n                uint256 recipientBalance = balanceOf(to); // Define o Maximo por Wallet\n                require(recipientBalance.add(amount) \u003c= maxWalletBalance, \"Nao pode Ultrapassar o limite por Wallet\");\n            }\n\n            if(fees != 0) {\n                amount = amount.sub(fees);\n                _balance[address(this)] += fees;\n                emit Transfer(from, address(this), fees); // Emite um Evento de Envio de Taxas\n            }\n\n            _balance[to] += amount;\n\n\n\n            \n            emit Transfer(from, to, amount); // Emite um Evento de Transferencia\n            _afterTokenTransfer(from, to, amount);\n        if(!takeFee) restoreAllFee(); // Retorna todas as Taxa\n    }\n    function removeAllFee() private {\n        previousBuyFee = buyFee; // Armazena Taxa Anterior\n        previousSellFee = sellFee; // Armazena Taxa Anterior\n        buyFee = 0; // Taxa 0\n        sellFee = 0; // Taxa 0\n    }\n    function restoreAllFee() private {\n        buyFee = previousBuyFee; // Restaura Taxas\n        sellFee = previousSellFee; // Restaura Taxas\n    }  \n    function liquify(uint256 contractTokenBalance, address sender) internal {\n        \n        if (contractTokenBalance \u003e= numberOfTokensToSwapToLiquidity) contractTokenBalance = numberOfTokensToSwapToLiquidity; // Define se a Quantidade de Tokens para\n        \n        bool isOverRequiredTokenBalance = ( contractTokenBalance \u003e= numberOfTokensToSwapToLiquidity ); // Booleano\n        \n        if ( isOverRequiredTokenBalance \u0026\u0026 swapAndLiquifyEnabled \u0026\u0026 !inSwapAndLiquify \u0026\u0026 (!automatedMarketMakerPairs[sender]) ) {\n            uint256 tokenLiquidity = contractTokenBalance.mul(liquidityPercent).div(100); // Quantidade de Tokens que vai para Liquidez\n            uint256 toSwapBNB = contractTokenBalance.sub(tokenLiquidity); // Quantidade de Tokens para Venda\n            _swapAndLiquify(tokenLiquidity); // Adiciona Liquidez\n            _sendBNBToContract(toSwapBNB); // Troca Tokens por BNB\n        }\n\n    }\n    function _swapAndLiquify(uint256 amount) private lockTheSwap {\n        uint256 half = amount.div(2); // Divide para Adicionar Liquidez\n        uint256 otherHalf = amount.sub(half); // Divide para Adicionar Liquidez\n        uint256 initialBalance = address(this).balance; // Armazena o Saldo Inicial em BNB\n        _swapTokensForEth(half); // Efetua a troca de Token por BNB\n        uint256 newBalance = address(this).balance.sub(initialBalance); // Saldo atual em BNB - Saldo Antigo\n        _addLiquidity(otherHalf, newBalance); // Adiciona Liquidez\n        emit SwapAndLiquify(half, newBalance, otherHalf); // Emite Evento de Swap\n    }\n    function _sendBNBToContract(uint256 tAmount) private lockTheSwap {\n         _swapTokensForEth(tAmount); // Vende os Tokens por BNB e envia para o Contrato\n        if(isSendToken) {\n            uint256 initialBalance = address(this).balance;\n            if(initialBalance \u003e 0) {\n    \n                (bool sent, ) = internalOperationAddress.call{value: address(this).balance}(\"\");\n                if(sent) {\n                    emit SentBNBInternalOperation(internalOperationAddress, initialBalance);\n                }\n            } \n        }\n    }\n\n    function _swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2); // Path Memory para inicia a venda dos Tokens\n        path[0] = address(this); // Endereço do Contrato\n        path[1] = uniswapV2Router.WETH(); // Par de Troca (BNB)\n        _approve(address(this), address(uniswapV2Router), tokenAmount); // Aprova os Tokens para Troca\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount, // Saldo para Swap\n            0, // Amount BNB\n            path, // Path [address(this), uniswapV2Router.WETH()]\n            address(this), // Endereço de Taxa\n            block.timestamp // Timestamp\n        );\n    }\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        (uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity) = uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount, // Saldo para Liquidez\n            0, // Slippage 0\n            0, // Slippage 0\n            owner(), // Owner Adiciona Liquidez\n            block.timestamp // Timestamp\n        );\n        emit LiquidityAdded(tokenAmountSent, ethAmountSent, liquidity); // Emite Evento de Liquidez\n    }\n\n    /*=== Public/External ===*/\n    function approve(address spender, uint256 amount) public override returns(bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    function transfer(address to, uint256 amount) public override returns(bool){\n        _transferTokens(_msgSender(), to, amount);\n        return true;\n    }\n    function transferFrom(address from, address to, uint256 amount) public override returns(bool) {\n        _spendAllowance(from, _msgSender(), amount);\n         _transferTokens(from, to, amount);\n        return true;\n    }\n\n    /*=== Funções Administrativas ===*/\n\n    function changeAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\n        require(pair != uniswapV2Pair, \"uniswapV2Pair nao pode ser removido de AutomatedMarketMakerPair\");\n        _setAutomatedMarketMakerPair(pair, value); // Define um Novo Automatizador de Trocas\n    }\n    function changeFees(uint256 _buyFee, uint256 _sellFee, uint256 _liquidityPercent) external onlyOwner {\n        require(_buyFee \u003c= 25 \u0026\u0026 _sellFee \u003c= 25, \"A taxa nao pode ser maior do que 25%\");\n        buyFee = _buyFee;\n        sellFee = _sellFee;\n        liquidityPercent = _liquidityPercent;\n    }\n    function changeAddress(address _internalOperationAddress) external onlyOwner {\n        internalOperationAddress = _internalOperationAddress; // Define Endereço de Operações\n    }\n    function removeBNB() external payable onlyOwner {\n        uint256 balance = address(this).balance;\n        if(balance \u003e 0) {\n            (bool success, ) = _msgSender().call{ value: balance }(\"\");\n            require(success, \"Address: unable to send value, recipient may have reverted\");\n        }\n    }\n    function getTokenContract(address account, uint256 amount) external  onlyOwner {\n        _transferTokens(address(this), account, amount);\n    }\n    function setLimitContract(uint256 _maxWalletBalance, uint256 _maxBuyAmount, uint256 _maxSellAmount) external onlyOwner {\n        uint256 limit = _tSupply.div(10000);\n        maxWalletBalance = _maxWalletBalance * _decimalFactor; \n        maxBuyAmount = _maxBuyAmount * _decimalFactor; \n        maxSellAmount = _maxSellAmount * _decimalFactor; \n        require(maxWalletBalance \u003e= limit \u0026\u0026 maxBuyAmount \u003e= limit \u0026\u0026 maxSellAmount \u003e= limit, \"Limite de 0.1%\");\n    }\n    function defineExcluded(address account, bool isTrue) external onlyOwner {\n        _excludeFromFee[account] = isTrue; // Exclui das Taxas e dos Limites\n    }\n    function setRouter(address router) external onlyOwner {\n        _setRouterAddress(router); // Define uma Nova Rota (Caso Pancakeswap migre para a RouterV3 e adiante)\n    }\n    function setIsSwap(bool isTrue) external onlyOwner {\n        swapAndLiquifyEnabled = isTrue; // Ativa e Desativa o Swap\n        emit SwapAndLiquifyEnabledUpdated(swapAndLiquifyEnabled); // Emite Evento de Swap Ativo/Inativo\n    }\n    function setActiveCoolDown(bool _buyCooldownEnabled, bool _sellCooldownEnabled, uint256 _cooldownTimerInterval) external onlyOwner {\n        require(_cooldownTimerInterval \u003c= 3600, \"Limite de Compra e Venda nao pode ser maior do que 1 Hora\");\n        buyCooldownEnabled = _buyCooldownEnabled; // Ativa e Desativa Cooldown Buy\n        sellCooldownEnabled = _sellCooldownEnabled; // Ativa e Desativa Cooldown Sell\n        cooldownTimerInterval = _cooldownTimerInterval; // Define Segundos entre Compra e Venda\n    }\n    function activeSendDividends(bool _isSendToken) external onlyOwner {\n        isSendToken = _isSendToken;\n    }\n    function setBurn(uint256 _limitBurn) external onlyOwner {\n        limitBurn = _limitBurn * _decimalFactor;\n    }\n    function burn(uint256 bAmount) external onlyOwner {\n        require(bAmount \u003c= limitBurn, \"Nao pode queimar mais do que o programado\");\n        _tSupply -= bAmount; \n         _balance[_msgSender()] -= bAmount; \n        emit Transfer(_msgSender(), burnAddress, bAmount);\n    }\n    function setSwapAmount(uint256 tAmount) external onlyOwner {\n        numberOfTokensToSwapToLiquidity = tAmount * _decimalFactor; // Define a quantidade de Tokens que o Contrato vai Vender\n    }\n\n\n\n}\n\n\n\n\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.15;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}