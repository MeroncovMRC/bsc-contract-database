// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(
        address _owner,
        address spender
    ) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor() {}

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

contract BEP20 is IBEP20, Context {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;

    constructor(string memory pairName) {
        _name = pairName;
        _symbol = "LP";
        _decimals = 18;
        _totalSupply = 0;
    }

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the token name.
     */
    function name() external view override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {BEP20-totalSupply}.
     */
    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {BEP20-balanceOf}.
     */
    function balanceOf(
        address account
    ) external view override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {BEP20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(
        address recipient,
        uint256 amount
    ) external override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {BEP20-allowance}.
     */
    function allowance(
        address owner,
        address spender
    ) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {BEP20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(
        address spender,
        uint256 amount
    ) external override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {BEP20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {BEP20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "BEP20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(
        address spender,
        uint256 addedValue
    ) public returns (bool) {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(
        address spender,
        uint256 subtractedValue
    ) public returns (bool) {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "BEP20: decreased allowance below zero"
            )
        );
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(
            amount,
            "BEP20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: burn from the zero address");

        _balances[account] = _balances[account].sub(
            amount,
            "BEP20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: mint from the zero address");

        _balances[account] = _balances[account].add(amount);
        _totalSupply = _totalSupply.add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /*
     @dev function to burn token
     @param _amount uint256
    */
    function burn(address user, uint256 _amount) internal {
        _burn(user, _amount);
    }

    /*
     @dev function to mint token
     @param _amount uint256
    */
    function mint(address user, uint256 _amount) internal {
        _mint(user, _amount);
    }
}


interface IRouter {
  function getPrice(address token) external view returns(uint256);
function getRemoveLiquidityFees() external view returns(uint256);
function getRemoveLiquidityFeesAddress() external view returns(address);
function getRemoveLiquidityMaxTime() external view returns(uint256);
function getMinter() external view returns(address);
function isPaused() external view returns(bool);
}

contract MrmintPool is BEP20 {
  address public _token0;
  address public _token1;
  address public _router;

  struct liquidityInfo {
      uint256 amount0;
      uint256 amount1;
      bool closed;
      uint256 time;
  }
  mapping(address => liquidityInfo) public _liquidityInfo;

  constructor(
    address token0,
    address token1,
    address router,
    string memory pairName
  ) BEP20(pairName) {
    _token0 = token0;
    _token1 = token1;
    _router = router;
  }

  event AddLiquidity(
    address provider,
    uint256 amount0,
    uint256 amount1,
    uint256 price0
  );
  event RemoveLiquidity(
    address provider,
    uint256 amount0,
    uint256 amount1,
    uint256 price0,
    address reciever,
    uint256 firstAmount,
    uint256 secondAmount
  );
 

  event Swap(
    address indexed recipient,
    address fromAddress,
    address toAddress,
    uint256 receivdAmount,
    uint256 price
  );

  modifier OnlyRouterCanCall() {
    require(msg.sender == _router, "Only router can call");
    _;
  }

  function getPrice(address token) public view returns(uint256) {
    return IRouter(_router).getPrice(token);
  }

  function getRemoveLiquidityFees() public view returns(uint256) {
    return IRouter(_router).getRemoveLiquidityFees();
  }

  function getRemoveLiquidityFeesAddress() public view returns(address) {
    return IRouter(_router).getRemoveLiquidityFeesAddress();
  }

  function getRemoveLiquidityMaxTime() public view returns(uint256) {
    return IRouter(_router).getRemoveLiquidityMaxTime();
  }



  function isPaused() public view returns(bool) {
    return IRouter(_router).isPaused();
  }

  function swapFromRouter(
    address recipient,
    uint256 amount,
    address fromAddress
  ) OnlyRouterCanCall external  returns(bool) {
      address toAddress = _token0;
    if (fromAddress == _token0) {
      toAddress = _token1;
    }

      uint256 fromPrice = getPrice(fromAddress);

      uint256 toAmount = (fromPrice * amount) / 1e18;
    require(
      toAmount <= IBEP20(toAddress).balanceOf(address(this)),
      "Insufficient funds for swap"
    );
    IBEP20(toAddress).transfer(recipient, toAmount);
      emit Swap(recipient, fromAddress, toAddress, toAmount, fromPrice);
    return true;
  }


  function getLiquidityByToken(address _token) public view returns(uint256) {
    return IBEP20(_token).balanceOf(address(this));
  }

  function getLiquidity() external view returns(uint256 amount0, uint256 amount1) {
    amount0 = IBEP20(_token0).balanceOf(address(this));
    amount1 = IBEP20(_token1).balanceOf(address(this));
  }

  function addLiquidity(uint256 amount0) external {
    require(!isPaused(), "All transactions are Paused for now");
    require(
      IBEP20(_token0).balanceOf(msg.sender) >= amount0,
      "Insufficient token0 balance"
    );
      uint256 price0 = getPrice(_token0);
      uint256 amount1 = (price0 * amount0) / 1e18;

    require(
      IBEP20(_token1).balanceOf(msg.sender) >= amount1,
      "Insufficient token1 balance"
    );


    IBEP20(_token0).transferFrom(msg.sender, address(this), amount0);
    IBEP20(_token1).transferFrom(msg.sender, address(this), amount1);

    _liquidityInfo[msg.sender].amount0 += amount0;
    _liquidityInfo[msg.sender].amount1 += amount1;
    _liquidityInfo[msg.sender].time = block.timestamp + getRemoveLiquidityMaxTime();
    mint(msg.sender, amount0 * 2);

      emit AddLiquidity(msg.sender, amount0, amount1, price0);
  }




  function removeLiquidity(uint256 amount) external {
    require(
      this.balanceOf(msg.sender) >= amount,
      "Insufficient LP token balance"
    );
    require(
      this.allowance(msg.sender, address(this)) >= amount,
      "Insufficient LP token allowance"
    );
    uint256 fees = 0;
    uint256 finalAmount = amount;
    if (msg.sender != getRemoveLiquidityFeesAddress()) {
      if (_liquidityInfo[msg.sender].time > block.timestamp) {
        fees = amount * getRemoveLiquidityFees() / 100;
        amount = amount - fees;
      }
    }
     
      

      uint256 liquidity0 = getLiquidityByToken(_token0);
      uint256 liquidity1 = getLiquidityByToken(_token1);

      uint256 price0 = getPrice(_token0);
      uint256 liquidity0InUSD = (price0 * liquidity0) / 1e18; // MNT in USDT

      uint256 amountInUSDT = (price0 * amount) / 1e18; // MNT in USDT

      uint256 percent0 = liquidity0InUSD * 10000 / (liquidity1 + liquidity0InUSD);
      uint256 percent1 = liquidity1 * 10000 / (liquidity1 + liquidity0InUSD);
      
      uint256 firstAmount = amount * percent0 / 10000;
     

      uint256 secondAmount = amountInUSDT * percent1 / 10000;

    IBEP20(_token0).transfer(msg.sender, firstAmount);
    IBEP20(_token1).transfer(msg.sender, secondAmount);

    burn(msg.sender, finalAmount);

    if (msg.sender != getRemoveLiquidityFeesAddress()) {
      if (_liquidityInfo[msg.sender].time > block.timestamp) {

        amountInUSDT = (price0 * fees) / 1e18; // MNT in USDT

        firstAmount = fees * percent0 / 10000;

        secondAmount = amountInUSDT * percent1 / 10000;

        IBEP20(_token0).transfer(getRemoveLiquidityFeesAddress(), firstAmount);
        IBEP20(_token1).transfer(getRemoveLiquidityFeesAddress(), secondAmount);
      }
    }
      emit RemoveLiquidity(msg.sender, firstAmount, secondAmount, price0, getRemoveLiquidityFeesAddress(), firstAmount, secondAmount);
  }
}

interface IMrmintPool {
  function swapFromRouter(address recipient, uint256 amount, address fromAddress) external returns(bool);
function getLiquidityByToken(address _token) external view returns(uint256);

}

contract MrmintSwapRouter {
  address public MNT = 0x3e81Aa8d6813Ec9D7E6ddB4e523fb1601a0e86F3;
  uint256 public mtnPrice; // MNT price in USDT

  address public minter = 0x94Bdad1369e6b8B873DEC8F5fA48049a988B1176;
  uint256 public liquidityMaxImpact = 20; // 20% liquidity impact in one swap transaction

  uint256 public swapFees = 2; // 2% Fees
  address public swapFeesAddress = 0x0E26837994CAD7e90cA628388b830b92fDF6a9AE;

  uint256 public RemoveLiquidityFees = 18; // 18% Fees
  address public RemoveLiquidityFeesAddress = 0x0E26837994CAD7e90cA628388b830b92fDF6a9AE;

  uint256 public RemoveLiquidityMaxTime = 18;// 18 Days

  bool public paused;

  mapping(address => mapping(address => address)) public getPool;

  //multi-signature-wallet
  address public multiSigWallet = 0x70488948648d8d1f8CD3b91d76897DdD27384a82;

  modifier onlyMultiSigWallet() {
    require(msg.sender == multiSigWallet, "Unauthorized Access");
    _;
  }

  constructor() {
  }

  event PoolCreate(
    address indexed tokenA,
    address indexed tokenB,
    address pool
  );
  event SwapRouter(address indexed user, address pool, uint256 fromAmount, uint256 fees);

  modifier OnlyMinter() {
    require(msg.sender == minter, "Minter : Only minter can call this");
    _;
  }




  function isPair(address token0, address token1) public view returns(bool) {
    return (getPool[token0][token1] != address(0));
  }

  function getPrice(address token) public view returns(uint256) {
    if (MNT == token) {
      return mtnPrice;
    } else {
      return ((1e18 * 1e18) / mtnPrice);
    }
  }

  function getRemoveLiquidityFees() public view returns(uint256) {
    return RemoveLiquidityFees;
  }
  function getRemoveLiquidityFeesAddress() public view returns(address) {
    return RemoveLiquidityFeesAddress;
  }
  function getRemoveLiquidityMaxTime() public view returns(uint256) {
    return 86400 * RemoveLiquidityMaxTime;
  }

  function getSwapFees() public view returns(uint256) {
    return swapFees;
  }
  function getSwapFeesAddress() public view returns(address) {
    return swapFeesAddress;
  }

  function isPaused() public view returns(bool) {
    return paused;
  }

  function getMinter() public view returns(address) {
    return minter;
  }

  // Set Minter By MultiOwner
  function setMinter(address _newMinter) external onlyMultiSigWallet {
    minter = _newMinter;
  }

  // Set Swap Fees By MultiOwner
  function setSwapFees(
    uint256 _swapFees
  ) external onlyMultiSigWallet {
    require(_swapFees > 0, "Invalid number");
    swapFees = _swapFees;
  }

  // Set Swap Fees reciever's address By MultiOwner
  function setSwapFeesAddress(
    address _swapFeesAddress
  ) external onlyMultiSigWallet {
    require(_swapFeesAddress != address(0), "Invalid address");
    swapFeesAddress = _swapFeesAddress;
  }

  // Set Remove Liquidity Fees By MultiOwner
  function setRemoveLiquidityFees(
    uint256 _removeLiquidityFees
  ) external onlyMultiSigWallet {
    require(_removeLiquidityFees > 0, "Invalid number");
    RemoveLiquidityFees = _removeLiquidityFees;
  }

  // Set Remove Liquidity Fees address By MultiOwner
  function setRemoveLiquidityAddress(
    address _removeLiquiditysAddress
  ) external onlyMultiSigWallet {
    require(_removeLiquiditysAddress != address(0), "Invalid address");
    RemoveLiquidityFeesAddress = _removeLiquiditysAddress;
  }

  // Set Remove Liquidity max time duration By MultiOwner 
  function setRemoveLiquidityMaxTime(
    uint256 _removeLiquiditysMaxTime
  ) external onlyMultiSigWallet {
    require(_removeLiquiditysMaxTime > 0, "Invalid number");
    RemoveLiquidityMaxTime = _removeLiquiditysMaxTime;
  }

  // Set Liquidity max impact By MultiOwner
  function setLiquidityMaxImpact(
    uint256 _liquidityMaxImpact
  ) external onlyMultiSigWallet {
    require(_liquidityMaxImpact > 0, "Invalid number");
    liquidityMaxImpact = _liquidityMaxImpact;
  }

  // Set Paused By Minter
  function setPaused(bool value) external OnlyMinter {
    require(value != paused, "Already Updated");
    paused = value;
  }

  // Set MNT Price By Minter 
  function setMNTprice(uint256 _price) external OnlyMinter {
    mtnPrice = _price;
  }





  function createPool(
    address tokenA,
    address tokenB
  ) external OnlyMinter returns(address pool) {
    require(tokenA != tokenB, "Pool address should be different");

    require(tokenA != address(0), "ZERO Address not allowed");
    require(tokenB != address(0), "ZERO Address not allowed");

    require(getPool[tokenA][tokenB] == address(0), "Pool already created");
      string memory pairName = string(
      abi.encodePacked(
        "LP-",
        IBEP20(tokenA).name(),
        "/",
        IBEP20(tokenB).name()
      )
    );
    pool = address(new MrmintPool(tokenA, tokenB, address(this), pairName));

    getPool[tokenA][tokenB] = pool;
    getPool[tokenB][tokenA] = pool;

      emit PoolCreate(tokenA, tokenB, pool);
  }

  function swap(
    uint256 fromAmount,
    address fromAddress,
    address toAddress
  ) external returns(bool) {
    require(!isPaused(), "All transactions are Paused for now");

    require(isPair(fromAddress, toAddress), "Invalid pair");
    require(fromAmount > 0, "Invalid amount");
    require(
      IBEP20(fromAddress).balanceOf(msg.sender) >= fromAmount,
      "Insufficient token balance"
    );
    require(
      IBEP20(fromAddress).allowance(msg.sender, address(this)) >=
      fromAmount,
      "Insufficient token allowance"
    );
      address pool = getPool[fromAddress][toAddress];
      address feesAddress = getSwapFeesAddress();
      
      uint256 price0 = getPrice(fromAddress);
      uint256 fees = getSwapFees();
    fees = (fromAmount * fees) / 100;
    fromAmount = fromAmount - fees;
      
     
      
       uint256 toAmount = (price0 * fromAmount) / 1e18;

    require((IMrmintPool(pool).getLiquidityByToken(fromAddress) * liquidityMaxImpact / 100) >= fromAmount, "Liquidity impact is too high");
    require((IMrmintPool(pool).getLiquidityByToken(toAddress) * liquidityMaxImpact / 100) >= toAmount, "Liquidity impact is too high");


    IBEP20(fromAddress).transferFrom(msg.sender, pool, fromAmount);
    IBEP20(fromAddress).transferFrom(msg.sender, feesAddress, fees);
    IMrmintPool(pool).swapFromRouter(msg.sender, fromAmount, fromAddress);
    emit SwapRouter(msg.sender, pool, fromAmount, fees);
    return true;
  }


  function getSignatureForSetMinter(
    address _minter
  ) public pure returns(bytes memory) {
    return abi.encodeWithSignature("setMinter(address)", _minter);
  }

  function getSignatureForSetSwapFees(
    uint256 _swapFees
  ) public pure returns(bytes memory) {
    return abi.encodeWithSignature("setSwapFees(uint256)", _swapFees);
  }

  function getSignatureForSetSwapFeesAddress(
    address _swapFeesAddress
  ) public pure returns(bytes memory) {
    return abi.encodeWithSignature("setSwapFeesAddress(address)", _swapFeesAddress);
  }

  function getSignatureForSetRemoveLiquidityFees(
    uint256 _removeLiquidityFees
  ) public pure returns(bytes memory) {
    return abi.encodeWithSignature("setRemoveLiquidityFees(uint256)", _removeLiquidityFees);
  }

  function getSignatureForSetRemoveLiquidityAddress(
    address _removeLiquiditysAddress
  ) public pure returns(bytes memory) {
    return abi.encodeWithSignature("setRemoveLiquidityAddress(address)", _removeLiquiditysAddress);
  }

  function getSignatureForSetRemoveLiquidityMaxTime(
    uint256 _removeLiquiditysMaxTime
  ) public pure returns(bytes memory) {
    return abi.encodeWithSignature("setRemoveLiquidityMaxTime(uint256)", _removeLiquiditysMaxTime);
  }

  function getSignatureForSetLiquidityMaxImpact(
    uint256 _liquidityMaxImpact
  ) public pure returns(bytes memory) {
    return abi.encodeWithSignature("setLiquidityMaxImpact(uint256)", _liquidityMaxImpact);
  }



}