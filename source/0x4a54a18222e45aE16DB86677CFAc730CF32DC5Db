{"Address.sol":{"content":"pragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"},"Context.sol":{"content":"pragma solidity ^0.6.0;\nimport \"./Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n"},"ERC20.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address =\u003e uint256) private _balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n    }\n\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n\n\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    uint256[44] private __gap;\n}\n"},"IDebtToken.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity 0.6.6;\n\ninterface IDebtToken {\n  function setOkHolders(address[] calldata _okHolders, bool _isOk) external;\n\n  function mint(address to, uint256 amount) external;\n\n  function burn(address from, uint256 amount) external;\n}\n"},"IERC20.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IFairLaunch.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity 0.6.6;\n\ninterface IFairLaunch {\n  function poolLength() external view returns (uint256);\n\n  function addPool(\n    uint256 _allocPoint,\n    address _stakeToken,\n    bool _withUpdate\n  ) external;\n\n  function setPool(\n    uint256 _pid,\n    uint256 _allocPoint,\n    bool _withUpdate\n  ) external;\n\n  function pendingAlpaca(uint256 _pid, address _user)\n    external\n    view\n    returns (uint256);\n\n  function updatePool(uint256 _pid) external;\n\n  function deposit(\n    address _for,\n    uint256 _pid,\n    uint256 _amount\n  ) external;\n\n  function withdraw(\n    address _for,\n    uint256 _pid,\n    uint256 _amount\n  ) external;\n\n  function withdrawAll(address _for, uint256 _pid) external;\n\n  function harvest(uint256 _pid) external;\n}\n"},"Initializable.sol":{"content":"pragma solidity \u003e=0.4.24 \u003c0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n"},"IPancakePair.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity 0.6.6;\n\ninterface IPancakePair {\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  function name() external pure returns (string memory);\n\n  function symbol() external pure returns (string memory);\n\n  function decimals() external pure returns (uint8);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address owner) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external\n    view\n    returns (uint256);\n\n  function approve(address spender, uint256 value) external returns (bool);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  function nonces(address owner) external view returns (uint256);\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n  event Burn(\n    address indexed sender,\n    uint256 amount0,\n    uint256 amount1,\n    address indexed to\n  );\n  event Swap(\n    address indexed sender,\n    uint256 amount0In,\n    uint256 amount1In,\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n  function factory() external view returns (address);\n\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function getReserves()\n    external\n    view\n    returns (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    );\n\n  function price0CumulativeLast() external view returns (uint256);\n\n  function price1CumulativeLast() external view returns (uint256);\n\n  function kLast() external view returns (uint256);\n\n  function mint(address to) external returns (uint256 liquidity);\n\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n  function swap(\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address to,\n    bytes calldata data\n  ) external;\n\n  function skim(address to) external;\n\n  function sync() external;\n\n  function initialize(address, address) external;\n}\n"},"IVault.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity 0.6.6;\n\ninterface IVault {\n  /// @notice Return the total ERC20 entitled to the token holders. Be careful of unaccrued interests.\n  function totalToken() external view returns (uint256);\n\n  /// @notice Add more ERC20 to the bank. Hope to get some good returns.\n  function deposit(uint256 amountToken) external payable;\n\n  /// @notice Withdraw ERC20 from the bank by burning the share tokens.\n  function withdraw(uint256 share) external;\n\n  /// @notice Request funds from user through Vault\n  function requestFunds(address targetedToken, uint256 amount) external;\n\n  /// @notice Underlying token address\n  function token() external view returns (address);\n}\n"},"IVaultConfig.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity 0.6.6;\n\ninterface IVaultConfig {\n  /// @dev Return minimum BaseToken debt size per position.\n  function minDebtSize() external view returns (uint256);\n\n  /// @dev Return the interest rate per second, using 1e18 as denom.\n  function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);\n\n  /// @dev Return the address of wrapped native token.\n  function getWrappedNativeAddr() external view returns (address);\n\n  /// @dev Return the address of wNative relayer.\n  function getWNativeRelayer() external view returns (address);\n\n  /// @dev Return the address of fair launch contract.\n  function getFairLaunchAddr() external view returns (address);\n\n  /// @dev Return the bps rate for reserve pool.\n  function getReservePoolBps() external view returns (uint256);\n\n  /// @dev Return the bps rate for Avada Kill caster.\n  function getKillBps() external view returns (uint256);\n\n  /// @dev Return if the caller is whitelisted.\n  function whitelistedCallers(address caller) external returns (bool);\n\n  /// @dev Return if the caller is whitelisted.\n  function whitelistedLiquidators(address caller) external returns (bool);\n\n  /// @dev Return if the given strategy is approved.\n  function approvedAddStrategies(address addStrats) external returns (bool);\n\n  /// @dev Return whether the given address is a worker.\n  function isWorker(address worker) external view returns (bool);\n\n  /// @dev Return whether the given worker accepts more debt. Revert on non-worker.\n  function acceptDebt(address worker) external view returns (bool);\n\n  /// @dev Return the work factor for the worker + BaseToken debt, using 1e4 as denom. Revert on non-worker.\n  function workFactor(address worker, uint256 debt) external view returns (uint256);\n\n  /// @dev Return the work factor for the worker + debt, using 1e4 as denom. Revert on non-worker.\n  /// Also check for boosted leverage from NFT staking\n  function workFactor(\n    address worker,\n    uint256 debt,\n    address positionOwner\n  ) external view returns (uint256);\n\n  /// @dev Return the kill factor for the worker + BaseToken debt, using 1e4 as denom. Revert on non-worker.\n  function killFactor(address worker, uint256 debt) external view returns (uint256);\n\n  /// @dev Return the kill factor for the worker + BaseToken debt, using 1e4 as denom. Revert on non-worker.\n  /// Also check for boosted kill factor from NFT staking\n  function killFactor(\n    address worker,\n    uint256 debt,\n    address positionOwner\n  ) external view returns (uint256);\n\n  /// @dev Return the kill factor for the worker + BaseToken debt without checking isStable, using 1e4 as denom. Revert on non-worker.\n  function rawKillFactor(address worker, uint256 debt) external view returns (uint256);\n\n  /// @dev Return the kill factor for the worker + BaseToken debt without checking isStable, using 1e4 as denom. Revert on non-worker.\n  /// Also check for boosted kill factor from NFT staking\n  function rawKillFactor(\n    address worker,\n    uint256 debt,\n    address positionOwner\n  ) external view returns (uint256);\n\n  /// @dev Return the portion of reward that will be transferred to treasury account after successfully killing a position.\n  function getKillTreasuryBps() external view returns (uint256);\n\n  /// @dev Return the address of treasury account\n  function getTreasuryAddr() external view returns (address);\n\n  /// @dev Return if worker is stable\n  function isWorkerStable(address worker) external view returns (bool);\n\n  /// @dev Return if reserve that worker is working with is consistent\n  function isWorkerReserveConsistent(address worker) external view returns (bool);\n}\n"},"IWETH.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity \u003e=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint256 value) external returns (bool);\n    function withdraw(uint256) external;\n}\n"},"IWNativeRelayer.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity 0.6.6;\n\ninterface IWNativeRelayer {\n  function withdraw(uint256 _amount) external;\n}"},"IWorker.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity 0.6.6;\n\nimport \"./IPancakePair.sol\";\n\ninterface IWorker {\n  /// @dev Work on a (potentially new) position. Optionally send token back to Vault.\n  function work(\n    uint256 id,\n    address user,\n    uint256 debt,\n    bytes calldata data\n  ) external;\n\n  /// @dev Re-invest whatever the worker is working on.\n  function reinvest() external;\n\n  /// @dev Return the amount of wei to get back if we are to liquidate the position.\n  function health(uint256 id) external view returns (uint256);\n\n  /// @dev Liquidate the given position to token. Send all token back to its Vault.\n  function liquidate(uint256 id) external;\n\n  /// @dev SetStretegy that be able to executed by the worker.\n  function setStrategyOk(address[] calldata strats, bool isOk) external;\n\n  /// @dev Set address that can be reinvest\n  function setReinvestorOk(address[] calldata reinvestor, bool isOk) external;\n\n  /// @dev LP token holds by worker\n  function lpToken() external view returns (IPancakePair);\n\n  /// @dev Base Token that worker is working on\n  function baseToken() external view returns (address);\n\n  /// @dev Farming Token that worker is working on\n  function farmingToken() external view returns (address);\n}\n"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n"},"ReentrancyGuard.sol":{"content":"pragma solidity ^0.6.0;\nimport \"./Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuardUpgradeSafe is Initializable {\n    bool private _notEntered;\n\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n\n\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction\u0027s gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n\n    }\n\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n\n    uint256[49] private __gap;\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"SafeToken.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity 0.6.6;\n\ninterface ERC20Interface {\n  function balanceOf(address user) external view returns (uint256);\n}\n\nlibrary SafeToken {\n  function balanceOf(address token, address user) internal view returns (uint256) {\n    return ERC20Interface(token).balanceOf(user);\n  }\n\n  function myBalance(address token) internal view returns (uint256) {\n    return ERC20Interface(token).balanceOf(address(this));\n  }\n\n  function safeTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\n    // solhint-disable-next-line avoid-low-level-calls\n    require(isContract(token), \"!contract\");\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n    require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \"!safeTransfer\");\n  }\n\n  function safeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\n    // solhint-disable-next-line avoid-low-level-calls\n    require(isContract(token), \"!not contract\");\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n    require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \"!safeTransferFrom\");\n  }\n\n  function safeApprove(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\n    require(isContract(token), \"!not contract\");\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n    require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \"!safeApprove\");\n  }\n\n  function safeTransferETH(address to, uint256 value) internal {\n    // solhint-disable-next-line no-call-value\n    (bool success, ) = to.call{ value: value }(new bytes(0));\n    require(success, \"!safeTransferETH\");\n  }\n\n  function isContract(address account) internal view returns (bool) {\n    // This method relies on extcodesize, which returns 0 for contracts in\n    // construction, since the code is only stored at the end of the\n    // constructor execution.\n\n    uint256 size;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      size := extcodesize(account)\n    }\n    return size \u003e 0;\n  }\n}\n"},"Vault.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n  ∩~~~~∩ \n  ξ ･×･ ξ \n  ξ　~　ξ \n  ξ　　 ξ \n  ξ　　 “~～~～〇 \n  ξ　　　　　　 ξ \n  ξ ξ ξ~～~ξ ξ ξ \n　 ξ_ξξ_ξ　ξ_ξξ_ξ\nAlpaca Fin Corporation\n*/\n\npragma solidity 0.6.6;\n\nimport \"./Ownable.sol\";\nimport \"./ERC20.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Math.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./Initializable.sol\";\n\nimport \"./IDebtToken.sol\";\nimport \"./IVaultConfig.sol\";\nimport \"./IWorker.sol\";\nimport \"./IVault.sol\";\nimport \"./IFairLaunch.sol\";\nimport \"./SafeToken.sol\";\nimport \"./IWETH.sol\";\nimport \"./IWNativeRelayer.sol\";\n\ncontract Vault is IVault, ERC20UpgradeSafe, ReentrancyGuardUpgradeSafe, OwnableUpgradeSafe {\n  /// @notice Libraries\n  using SafeToken for address;\n  using SafeMath for uint256;\n\n  /// @notice Events\n  event AddDebt(uint256 indexed id, uint256 debtShare);\n  event RemoveDebt(uint256 indexed id, uint256 debtShare);\n  event Work(uint256 indexed id, uint256 loan);\n  event Kill(\n    uint256 indexed id,\n    address indexed killer,\n    address owner,\n    uint256 posVal,\n    uint256 debt,\n    uint256 prize,\n    uint256 left\n  );\n  event AddCollateral(uint256 indexed id, uint256 amount, uint256 healthBefore, uint256 healthAfter);\n\n  /// @dev Flags for manage execution scope\n  uint256 private constant _NOT_ENTERED = 1;\n  uint256 private constant _ENTERED = 2;\n  uint256 private constant _NO_ID = uint256(-1);\n  address private constant _NO_ADDRESS = address(1);\n\n  /// @dev Temporay variables to manage execution scope\n  uint256 public _IN_EXEC_LOCK;\n  uint256 public POSITION_ID;\n  address public STRATEGY;\n\n  /// @dev Attributes for Vault\n  /// token - address of the token to be deposited in this pool\n  /// name - name of the ibERC20\n  /// symbol - symbol of ibERC20\n  /// decimals - decimals of ibERC20, this depends on the decimal of the token\n  /// debtToken - just a simple ERC20 token for staking with FairLaunch\n  address public override token;\n  address public debtToken;\n\n  struct Position {\n    address worker;\n    address owner;\n    uint256 debtShare;\n  }\n\n  IVaultConfig public config;\n  mapping(uint256 =\u003e Position) public positions;\n  uint256 public nextPositionID;\n  uint256 public fairLaunchPoolId;\n\n  uint256 public vaultDebtShare;\n  uint256 public vaultDebtVal;\n  uint256 public lastAccrueTime;\n  uint256 public reservePool;\n\n  /// @dev Require that the caller must be an EOA account if not whitelisted.\n  modifier onlyEOAorWhitelisted() {\n    if (!config.whitelistedCallers(msg.sender)) {\n      require(msg.sender == tx.origin, \"not eoa\");\n    }\n    _;\n  }\n\n  /// @dev Require that the caller must be an EOA account if not whitelisted.\n  modifier onlyWhitelistedLiqudators() {\n    require(config.whitelistedLiquidators(msg.sender), \"!whitelisted liquidator\");\n    _;\n  }\n\n  /// @dev Get token from msg.sender\n  modifier transferTokenToVault(uint256 value) {\n    if (msg.value != 0) {\n      require(token == config.getWrappedNativeAddr(), \"baseToken is not wNative\");\n      require(value == msg.value, \"value != msg.value\");\n      IWETH(config.getWrappedNativeAddr()).deposit{ value: msg.value }();\n    } else {\n      SafeToken.safeTransferFrom(token, msg.sender, address(this), value);\n    }\n    _;\n  }\n\n  /// @dev Ensure that the function is called with the execution scope\n  modifier inExec() {\n    require(POSITION_ID != _NO_ID, \"not within execution scope\");\n    require(STRATEGY == msg.sender, \"not from the strategy\");\n    require(_IN_EXEC_LOCK == _NOT_ENTERED, \"in exec lock\");\n    _IN_EXEC_LOCK = _ENTERED;\n    _;\n    _IN_EXEC_LOCK = _NOT_ENTERED;\n  }\n\n  /// @dev Add more debt to the bank debt pool.\n  modifier accrue(uint256 value) {\n    if (now \u003e lastAccrueTime) {\n      uint256 interest = pendingInterest(value);\n      uint256 toReserve = interest.mul(config.getReservePoolBps()).div(10000);\n      reservePool = reservePool.add(toReserve);\n      vaultDebtVal = vaultDebtVal.add(interest);\n      lastAccrueTime = now;\n    }\n    _;\n  }\n\n  function initialize(\n    IVaultConfig _config,\n    address _token,\n    string calldata _name,\n    string calldata _symbol,\n    uint8 _decimals,\n    address _debtToken\n  ) external initializer {\n    OwnableUpgradeSafe.__Ownable_init();\n    ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init();\n    ERC20UpgradeSafe.__ERC20_init(_name, _symbol);\n    _setupDecimals(_decimals);\n\n    nextPositionID = 1;\n    config = _config;\n    lastAccrueTime = now;\n    token = _token;\n\n    fairLaunchPoolId = uint256(-1);\n\n    debtToken = _debtToken;\n\n    SafeToken.safeApprove(debtToken, config.getFairLaunchAddr(), uint256(-1));\n\n    // free-up execution scope\n    _IN_EXEC_LOCK = _NOT_ENTERED;\n    POSITION_ID = _NO_ID;\n    STRATEGY = _NO_ADDRESS;\n  }\n\n  /// @dev Return the pending interest that will be accrued in the next call.\n  /// @param value Balance value to subtract off address(this).balance when called from payable functions.\n  function pendingInterest(uint256 value) public view returns (uint256) {\n    if (now \u003e lastAccrueTime) {\n      uint256 timePast = now.sub(lastAccrueTime);\n      uint256 balance = SafeToken.myBalance(token).sub(value);\n      uint256 ratePerSec = config.getInterestRate(vaultDebtVal, balance);\n      return ratePerSec.mul(vaultDebtVal).mul(timePast).div(1e18);\n    } else {\n      return 0;\n    }\n  }\n\n  /// @dev Return the Token debt value given the debt share. Be careful of unaccrued interests.\n  /// @param debtShare The debt share to be converted.\n  function debtShareToVal(uint256 debtShare) public view returns (uint256) {\n    if (vaultDebtShare == 0) return debtShare; // When there\u0027s no share, 1 share = 1 val.\n    return debtShare.mul(vaultDebtVal).div(vaultDebtShare);\n  }\n\n  /// @dev Return the debt share for the given debt value. Be careful of unaccrued interests.\n  /// @param debtVal The debt value to be converted.\n  function debtValToShare(uint256 debtVal) public view returns (uint256) {\n    if (vaultDebtShare == 0) return debtVal; // When there\u0027s no share, 1 share = 1 val.\n    return debtVal.mul(vaultDebtShare).div(vaultDebtVal);\n  }\n\n  /// @dev Return Token value and debt of the given position. Be careful of unaccrued interests.\n  /// @param id The position ID to query.\n  function positionInfo(uint256 id) external view returns (uint256, uint256) {\n    Position storage pos = positions[id];\n    return (IWorker(pos.worker).health(id), debtShareToVal(pos.debtShare));\n  }\n\n  /// @dev Return the total token entitled to the token holders. Be careful of unaccrued interests.\n  function totalToken() public view override returns (uint256) {\n    return SafeToken.myBalance(token).add(vaultDebtVal).sub(reservePool);\n  }\n\n  /// @dev Add more token to the lending pool. Hope to get some good returns.\n  function deposit(uint256 amountToken)\n    external\n    payable\n    override\n    transferTokenToVault(amountToken)\n    accrue(amountToken)\n    nonReentrant\n  {\n    _deposit(amountToken);\n  }\n\n  function _deposit(uint256 amountToken) internal {\n    uint256 total = totalToken().sub(amountToken);\n    uint256 share = total == 0 ? amountToken : amountToken.mul(totalSupply()).div(total);\n    _mint(msg.sender, share);\n    require(totalSupply() \u003e 10**(uint256(decimals()).sub(1)), \"no tiny shares\");\n  }\n\n  /// @dev Withdraw token from the lending and burning ibToken.\n  function withdraw(uint256 share) external override accrue(0) nonReentrant {\n    uint256 amount = share.mul(totalToken()).div(totalSupply());\n    _burn(msg.sender, share);\n    _safeUnwrap(msg.sender, amount);\n    require(totalSupply() \u003e 10**(uint256(decimals()).sub(1)), \"no tiny shares\");\n  }\n\n  /// @dev Request Funds from user through Vault\n  function requestFunds(address targetedToken, uint256 amount) external override inExec {\n    SafeToken.safeTransferFrom(targetedToken, positions[POSITION_ID].owner, msg.sender, amount);\n  }\n\n  /// @dev Mint \u0026 deposit debtToken on behalf of farmers\n  /// @param id The ID of the position\n  /// @param amount The amount of debt that the position holds\n  function _fairLaunchDeposit(uint256 id, uint256 amount) internal {\n    if (amount \u003e 0) {\n      IDebtToken(debtToken).mint(address(this), amount);\n      IFairLaunch(config.getFairLaunchAddr()).deposit(positions[id].owner, fairLaunchPoolId, amount);\n    }\n  }\n\n  /// @dev Withdraw \u0026 burn debtToken on behalf of farmers\n  /// @param id The ID of the position\n  function _fairLaunchWithdraw(uint256 id) internal {\n    if (positions[id].debtShare \u003e 0) {\n      // Note: Do this way because we don\u0027t want to fail open, close, or kill position\n      // if cannot withdraw from FairLaunch somehow. 0xb5c5f672 is a signature of withdraw(address,uint256,uint256)\n      (bool success, ) = config.getFairLaunchAddr().call(\n        abi.encodeWithSelector(0xb5c5f672, positions[id].owner, fairLaunchPoolId, positions[id].debtShare)\n      );\n      if (success) IDebtToken(debtToken).burn(address(this), positions[id].debtShare);\n    }\n  }\n\n  /// @dev Transfer to \"to\". Automatically unwrap if BTOKEN is WBNB\n  /// @param to The address of the receiver\n  /// @param amount The amount to be withdrawn\n  function _safeUnwrap(address to, uint256 amount) internal {\n    if (token == config.getWrappedNativeAddr()) {\n      SafeToken.safeTransfer(token, config.getWNativeRelayer(), amount);\n      IWNativeRelayer(uint160(config.getWNativeRelayer())).withdraw(amount);\n      SafeToken.safeTransferETH(to, amount);\n    } else {\n      SafeToken.safeTransfer(token, to, amount);\n    }\n  }\n\n  /// @dev addCollateral to the given position.\n  /// @param id The ID of the position to add collaterals.\n  /// @param amount The amount of BTOKEN to be added to the position\n  /// @param goRogue If on skip worker stability check, else only check reserve consistency.\n  /// @param data The calldata to pass along to the worker for more working context.\n  function addCollateral(\n    uint256 id,\n    uint256 amount,\n    bool goRogue,\n    bytes calldata data\n  ) external payable onlyEOAorWhitelisted transferTokenToVault(amount) accrue(amount) nonReentrant {\n    require(fairLaunchPoolId != uint256(-1), \"poolId not set\");\n    require(id != 0, \"no id 0\");\n\n    // 1. Load position from state \u0026 sanity check\n    Position storage pos = positions[id];\n    address worker = pos.worker;\n    uint256 healthBefore = IWorker(worker).health(id);\n    require(id \u003c nextPositionID, \"bad position id\");\n    require(pos.owner == msg.sender, \"!position owner\");\n    require(healthBefore != 0, \"!active position\");\n    // 2. Book execution scope variables. Check if the given strategy is known add strat.\n    POSITION_ID = id;\n    (STRATEGY, ) = abi.decode(data, (address, bytes));\n    require(config.approvedAddStrategies(STRATEGY), \"!approved strat\");\n    // 3. If not goRouge then check worker stability, else only check reserve consistency.\n    if (!goRogue) require(config.isWorkerStable(worker), \"worker !stable\");\n    else require(config.isWorkerReserveConsistent(worker), \"reserve !consistent\");\n    // 4. Getting required info.\n    uint256 debt = debtShareToVal(pos.debtShare);\n    // 5. Perform add collateral according to the strategy.\n    uint256 beforeBEP20 = SafeToken.myBalance(token).sub(amount);\n    SafeToken.safeTransfer(token, worker, amount);\n    IWorker(worker).work(id, msg.sender, debt, data);\n    uint256 healthAfter = IWorker(worker).health(id);\n    uint256 back = SafeToken.myBalance(token).sub(beforeBEP20);\n    // 6. Sanity check states after perform add collaterals\n    // - if not goRouge then check worker stability else only check reserve consistency.\n    // - back must be 0 as it is adding collateral only. No BTOKEN needed to be returned.\n    // - healthAfter must more than before.\n    // - debt ratio must below kill factor - 1%\n    if (!goRogue) require(config.isWorkerStable(worker), \"worker !stable\");\n    else require(config.isWorkerReserveConsistent(worker), \"reserve !consistent\");\n    require(back == 0, \"back !0\");\n    require(healthAfter \u003e healthBefore, \"health !increase\");\n    uint256 killFactor = config.rawKillFactor(pos.worker, debt, pos.owner);\n    require(debt.mul(10000) \u003c= healthAfter.mul(killFactor.sub(100)), \"debtRatio \u003e killFactor margin\");\n    // 7. Release execution scope\n    POSITION_ID = _NO_ID;\n    STRATEGY = _NO_ADDRESS;\n    // 8. Emit event\n    emit AddCollateral(id, amount, healthBefore, healthAfter);\n  }\n\n  /// @dev Create a new farming position to unlock your yield farming potential.\n  /// @param id The ID of the position to unlock the earning. Use ZERO for new position.\n  /// @param worker The address of the authorized worker to work for this position.\n  /// @param principalAmount The anout of Token to supply by user.\n  /// @param borrowAmount The amount of Token to borrow from the pool.\n  /// @param maxReturn The max amount of Token to return to the pool.\n  /// @param data The calldata to pass along to the worker for more working context.\n  function work(\n    uint256 id,\n    address worker,\n    uint256 principalAmount,\n    uint256 borrowAmount,\n    uint256 maxReturn,\n    bytes calldata data\n  ) external payable onlyEOAorWhitelisted transferTokenToVault(principalAmount) accrue(principalAmount) nonReentrant {\n    require(fairLaunchPoolId != uint256(-1), \"poolId not set\");\n    // 1. Sanity check the input position, or add a new position of ID is 0.\n    Position storage pos;\n    if (id == 0) {\n      id = nextPositionID++;\n      pos = positions[id];\n      pos.worker = worker;\n      pos.owner = msg.sender;\n    } else {\n      pos = positions[id];\n      require(id \u003c nextPositionID, \"bad position id\");\n      require(pos.worker == worker, \"bad position worker\");\n      require(pos.owner == msg.sender, \"not position owner\");\n      _fairLaunchWithdraw(id);\n    }\n    emit Work(id, borrowAmount);\n    // Update execution scope variables\n    POSITION_ID = id;\n    (STRATEGY, ) = abi.decode(data, (address, bytes));\n    // 2. Make sure the worker can accept more debt and remove the existing debt.\n    require(config.isWorker(worker), \"not a worker\");\n    require(borrowAmount == 0 || config.acceptDebt(worker), \"worker not accept more debt\");\n    uint256 debt = _removeDebt(id).add(borrowAmount);\n    // 3. Perform the actual work, using a new scope to avoid stack-too-deep errors.\n    uint256 back;\n    {\n      uint256 sendBEP20 = principalAmount.add(borrowAmount);\n      require(sendBEP20 \u003c= SafeToken.myBalance(token), \"insufficient funds in the vault\");\n      uint256 beforeBEP20 = SafeToken.myBalance(token).sub(sendBEP20);\n      SafeToken.safeTransfer(token, worker, sendBEP20);\n      IWorker(worker).work(id, msg.sender, debt, data);\n      back = SafeToken.myBalance(token).sub(beforeBEP20);\n    }\n    // 4. Check and update position debt.\n    uint256 lessDebt = Math.min(debt, Math.min(back, maxReturn));\n    debt = debt.sub(lessDebt);\n    if (debt \u003e 0) {\n      require(debt \u003e= config.minDebtSize(), \"too small debt size\");\n      uint256 health = IWorker(worker).health(id);\n      uint256 workFactor = config.workFactor(worker, debt, msg.sender);\n      require(health.mul(workFactor) \u003e= debt.mul(10000), \"bad work factor\");\n      _addDebt(id, debt);\n      _fairLaunchDeposit(id, pos.debtShare);\n    }\n    // 5. Release execution scope\n    POSITION_ID = _NO_ID;\n    STRATEGY = _NO_ADDRESS;\n    // 6. Return excess token back.\n    if (back \u003e lessDebt) {\n      _safeUnwrap(msg.sender, back.sub(lessDebt));\n    }\n  }\n\n  /// @dev Kill the given to the position. Liquidate it immediately if killFactor condition is met.\n  /// @param id The position ID to be killed.\n  function kill(uint256 id) external onlyWhitelistedLiqudators accrue(0) nonReentrant {\n    require(fairLaunchPoolId != uint256(-1), \"poolId not set\");\n    // 1. Verify that the position is eligible for liquidation.\n    Position storage pos = positions[id];\n    require(pos.debtShare \u003e 0, \"no debt\");\n    // 2. Distribute ALPACAs in FairLaunch to owner\n    _fairLaunchWithdraw(id);\n    uint256 debt = _removeDebt(id);\n    uint256 health = IWorker(pos.worker).health(id);\n    uint256 killFactor = config.killFactor(pos.worker, debt, pos.owner);\n    require(health.mul(killFactor) \u003c debt.mul(10000), \"can\u0027t liquidate\");\n    // 3. Perform liquidation and compute the amount of token received.\n    uint256 beforeToken = SafeToken.myBalance(token);\n    IWorker(pos.worker).liquidate(id);\n    uint256 back = SafeToken.myBalance(token).sub(beforeToken);\n\n    uint256 liquidatorPrize = back.mul(config.getKillBps()).div(10000);\n    uint256 tresauryFees = back.mul(config.getKillTreasuryBps()).div(10000);\n    uint256 prize = liquidatorPrize.add(tresauryFees);\n    uint256 rest = back.sub(prize);\n    // 4. Clear position debt and return funds to liquidator and position owner.\n    if (liquidatorPrize \u003e 0) {\n      _safeUnwrap(msg.sender, liquidatorPrize);\n    }\n\n    if (tresauryFees \u003e 0) {\n      _safeUnwrap(config.getTreasuryAddr(), tresauryFees);\n    }\n\n    uint256 left = rest \u003e debt ? rest - debt : 0;\n    if (left \u003e 0) {\n      _safeUnwrap(pos.owner, left);\n    }\n\n    emit Kill(id, msg.sender, pos.owner, health, debt, prize, left);\n  }\n\n  /// @dev Internal function to add the given debt value to the given position.\n  function _addDebt(uint256 id, uint256 debtVal) internal {\n    Position storage pos = positions[id];\n    uint256 debtShare = debtValToShare(debtVal);\n    pos.debtShare = pos.debtShare.add(debtShare);\n    vaultDebtShare = vaultDebtShare.add(debtShare);\n    vaultDebtVal = vaultDebtVal.add(debtVal);\n    emit AddDebt(id, debtShare);\n  }\n\n  /// @dev Internal function to clear the debt of the given position. Return the debt value.\n  function _removeDebt(uint256 id) internal returns (uint256) {\n    Position storage pos = positions[id];\n    uint256 debtShare = pos.debtShare;\n    if (debtShare \u003e 0) {\n      uint256 debtVal = debtShareToVal(debtShare);\n      pos.debtShare = 0;\n      vaultDebtShare = vaultDebtShare.sub(debtShare);\n      vaultDebtVal = vaultDebtVal.sub(debtVal);\n      emit RemoveDebt(id, debtShare);\n      return debtVal;\n    } else {\n      return 0;\n    }\n  }\n\n  /// @dev Update bank configuration to a new address. Must only be called by owner.\n  /// @param _config The new configurator address.\n  function updateConfig(IVaultConfig _config) external onlyOwner {\n    config = _config;\n  }\n\n  function setFairLaunchPoolId(uint256 _poolId) external onlyOwner {\n    SafeToken.safeApprove(debtToken, config.getFairLaunchAddr(), uint256(-1));\n    fairLaunchPoolId = _poolId;\n  }\n\n  /// @dev Withdraw BaseToken reserve for underwater positions to the given address.\n  /// @param to The address to transfer BaseToken to.\n  /// @param value The number of BaseToken tokens to withdraw. Must not exceed `reservePool`.\n  function withdrawReserve(address to, uint256 value) external onlyOwner nonReentrant {\n    reservePool = reservePool.sub(value);\n    SafeToken.safeTransfer(token, to, value);\n  }\n\n  /// @dev Reduce BaseToken reserve, effectively giving them to the depositors.\n  /// @param value The number of BaseToken reserve to reduce.\n  function reduceReserve(uint256 value) external onlyOwner {\n    reservePool = reservePool.sub(value);\n  }\n\n  /// @dev Fallback function to accept BNB.\n  receive() external payable {}\n}\n"}}