pragma solidity 0.6.12;

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address _to, uint _value) external returns (bool);
    function transferFrom(address _from, address _to, uint _value) external returns (bool);
}

contract Community {

    IERC20 public c_erc20 = IERC20(0x379f29911956052899E09233A3914f4e1eca075C);
   
    address public fundAddress = 0xB898fAad63B6B8D534516A9261B7040848E5018f;
    uint256 public startReleaseTime = block.timestamp;
    uint256 public interval = 30*24*60*60;

    uint256 public totalIntervalNum = 25;
    uint256 public withdrawnAmount;
    uint256 public totalAmount = 250000*10**18;

    function getRelease() external {
        require(block.timestamp > startReleaseTime, "release time error");
        uint256 num = (block.timestamp - startReleaseTime)/interval;
        num++;
        if (num > totalIntervalNum) {
            num = totalIntervalNum;
        }
        num = totalAmount*num/totalIntervalNum;

        require(num > withdrawnAmount, "no release");
        num -= withdrawnAmount;
        c_erc20.transfer(fundAddress, num);
        withdrawnAmount += num;
    }

    function userInfo() external view returns(uint256, uint256) {
        if (block.timestamp <= startReleaseTime) {
            return (0, withdrawnAmount);
        }
        uint256 num = (block.timestamp - startReleaseTime)/interval;
        num++;
        if (num > totalIntervalNum) {
            num = totalIntervalNum;
        }

        num = totalAmount*num/totalIntervalNum;
        num -= withdrawnAmount;
        
        return (num, withdrawnAmount);
    }
}