/**
 *Submitted for verification at BscScan.com on 2022-03-16
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
    external
    returns (bool);

    function allowance(address owner, address spender)
    external
    view
    returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}


library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success,) = recipient.call{value : amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(address target, bytes memory data)
    internal
    returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
        functionCallWithValue(
            target,
            data,
            value,
            "Address: low-level call with value failed"
        );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value : weiValue}(
        data
        );
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function waiveOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Factory {
    function getPair(address tokenA, address tokenB)
    external
    view
    returns (address pair);

    function createPair(address tokenA, address tokenB)
    external
    returns (address pair);
}

interface IUniswapRouter {
    function factory() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

interface IBscPrice {
    function getTokenUsdtPrice(address _token) external view returns (uint256);
}

interface BhcFactory {
    function referers(address user) external returns (address);
}
 

contract BHC is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;

    string private _name = "Bounty Coins";
    string private _symbol = "BHC";
    uint8 private  _decimals = 18;
    
    address public relationFactoryAddress = address(0x6B5D0A5db1A87f5E0f6Ed5dDC373EeF1Fa259c50);
    
    address public shibToken = 0x2859e4544C4bB03966803b044A93563Bd2D0DD4D;
    
    address public bhtToken = 0x155119293F542763735B5d37DF617CA0Ad404Dc2;
    address public usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);


    address public deadAddress = 0x000000000000000000000000000000000000dEaD;
    
    address public daoWalletAddress = 0xea1D317d5360176472817419946911EA1963BB7D;
    
    address public  ecologyAddress = 0x86DEb3365c4151cc34317e0F1D08Bbc1741d91BB;
    
    address public  createTimeAddress = 0x8BF0A45910a8E18Bba6eC2a000F573A63f80E402;
    
    address public  pollAddress = 0x64602F9D7c3592999DEe18D2A9B14AC93e806641;



    address public compensateAddress = 0x7795D50bD4AaAC4B33E354cAaD84B3B2146b2b71;
    
    address public dividendAddress = 0xe6F60b51934fc57b3abFA1E86BeA69cEA921Ce4D;
    
    address public lpRewardAddress = 0xf10e4e8d376dF9539578524eEdD52c45Af6d9818;
    
    address public bhtBonusAddress = 0xd31D49964Df8fF86283Dd952df6F019a976Cb73c;


    mapping(address => uint256) _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
 
    mapping(address => bool) public isTxLimitExempt; 
    mapping(address => bool) public isMarketPair;
 
    uint256 public _destroyFee = 0; 
    uint256 public compensateRate = 200; 
    uint256 public dividendRate = 100; 
    uint256 public lpRate = 100; 
    uint256 public buyBhtRate = 0; 
    uint256 public _totalMarketingShareFee = 0;
 
    uint256 public tradeRate = 400; 
    uint256 public transferRate = 300;
    uint256 public maxRate = 10000;



    uint256[2] public _marketingShares;
    
    uint256 private _totalSupply;
    address public uniswapPair;
    IUniswapRouter uniswapV2Router;
    
    mapping(address => address) public referers;

    mapping(address => bool) public operators;

    constructor() {
        _totalSupply = 10000000000 * 10 ** _decimals;
        emit Transfer(address(0), deadAddress, 9910000000 * 1e18);

        _balances[daoWalletAddress] = 10000000 * 1e18;
        emit Transfer(address(0), daoWalletAddress, _balances[daoWalletAddress]);

        _balances[ecologyAddress] = 10000000 * 1e18;
        emit Transfer(address(0), ecologyAddress, _balances[ecologyAddress]);

        _balances[createTimeAddress] = 10000000 * 1e18;
        emit Transfer(address(0), createTimeAddress, _balances[createTimeAddress]);

        _balances[pollAddress] = 60000000 * 1e18;
        emit Transfer(address(0), pollAddress, _balances[pollAddress]);
 
        isTxLimitExempt[msg.sender] = true;
        isTxLimitExempt[address(this)] = true;
        isTxLimitExempt[daoWalletAddress] = true;
        isTxLimitExempt[ecologyAddress] = true;
        isTxLimitExempt[createTimeAddress] = true;
        isTxLimitExempt[pollAddress] = true;

        isTxLimitExempt[dividendAddress] = true;
        isTxLimitExempt[compensateAddress] = true;
        isTxLimitExempt[lpRewardAddress] = true;

 
        uniswapV2Router = IUniswapRouter(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );
        uniswapPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(
            address(this),
            0x55d398326f99059fF775485246999027B3197955
        );
        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;
        isMarketPair[address(uniswapPair)] = true;

        _marketingShares = [0, 0];
    }

    function initAddress(address _compensateAddress, address _dividendAddress,
        address _lpRewardAddress, address _uniswapPair, address _bhtBonusAddress) public onlyOwner {
        compensateAddress = _compensateAddress;
        dividendAddress = _dividendAddress;
        lpRewardAddress = _lpRewardAddress;
        uniswapPair = _uniswapPair;
        bhtBonusAddress = _bhtBonusAddress;
    }

    function initRate(uint256 _destroyFeeValue, uint256 _compensateRate, uint256 _dividendRate,
        uint256 _lpRate, uint256 _buyBhtRate , uint256 _tradeRate, uint256 _transferRate) public onlyOwner {

        _destroyFee = _destroyFeeValue;
        compensateRate = _compensateRate;
        dividendRate = _dividendRate;
        lpRate = _lpRate;
        buyBhtRate = _buyBhtRate;
        tradeRate = _tradeRate;
        transferRate = _transferRate;
    }

    modifier onlyFactory() {
        require(operators[msg.sender], "BHC: only facotry can operator");
        _;
    }


    function setDaoWalletAddress(address newValue) public onlyOwner {
        daoWalletAddress = payable(newValue);
    }

    //  todo
    function setPancakeTradeFee(uint256 destroyFee) public onlyOwner {
        _destroyFee = destroyFee;
    }

    function setMarketingShares(
        uint256[] memory levelIds,
        uint256[] memory shareFees
    ) public onlyOwner {
        require(levelIds.length == shareFees.length);
        for (uint256 i = 0; i < levelIds.length; i++) {
            _marketingShares[levelIds[i]] = shareFees[i];
        }
        _refreshPancakeTradeFee();
    }

    function _refreshPancakeTradeFee() internal {
        _totalMarketingShareFee = 0;
        for (uint256 i = 0; i < _marketingShares.length; i++) {
            _totalMarketingShareFee = _totalMarketingShareFee.add(
                _marketingShares[i]
            );
        }
    }

    function setTranferDestroyFee(uint256 newValue) public onlyOwner {
        transferRate = newValue;
    }

    event SwapTokensForToken(uint256 amountIn, address[] path);
    event BindRelation(
        address indexed user,
        address indexed leader,
        uint256 timestamp
    );

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function setOperator(address user, bool newValue) public onlyOwner {
        operators[user] = newValue;
    }


    function allowance(address owner, address spender)
    public
    view
    override
    returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function increaseAllowance(address spender, uint256 addedValue)
    public
    virtual
    returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
    public
    virtual
    returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function approve(address spender, uint256 amount)
    public
    override
    returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
 
    function setMarketPairStatus(address account, bool newValue) public onlyOwner {
        isMarketPair[account] = newValue;
    }
 
    function setIsTxLimitExempt(address holder, bool exempt) public onlyOwner {
        isTxLimitExempt[holder] = exempt;
    }

    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(deadAddress));
    }

    function transferToAddressETH(address payable recipient, uint256 amount)
    private
    {
        recipient.transfer(amount);
    }

    function transfer(address recipient, uint256 amount)
    public
    override
    returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        if (isTxLimitExempt[sender] || isTxLimitExempt[recipient]) {
            return _basicTransfer(sender, recipient, amount);
        }

        uint256 finalAmount = takeFee(sender, recipient, amount);
        _balances[sender] = _balances[sender].sub(finalAmount);
        _balances[recipient] = _balances[recipient].add(finalAmount);
        emit Transfer(sender, recipient, finalAmount);
        return true;
    }

    function _basicTransfer( address sender,address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] = _balances[sender].sub( amount,"Insufficient Balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function takeFee(address sender,address recipient,uint256 amount) internal returns (uint256) {
        uint256 feeAmount = 0;
        bool isPancakeTrading = false;
        if (isMarketPair[sender] || isMarketPair[recipient]) {
            isPancakeTrading = true;
            feeAmount = amount.mul(tradeRate).div(maxRate);
        } else {
            feeAmount = amount.mul(transferRate).div(maxRate);
        }
        if (feeAmount > 0) {
            _balances[sender] = _balances[sender].sub(feeAmount);
            _balances[address(this)] = _balances[address(this)].add(feeAmount);
            emit Transfer(sender, address(this), feeAmount);
        }

        if (isPancakeTrading) { 
        
            _destroy(amount, _destroyFee);

            if (isMarketPair[recipient]) {
 
                _swapLpShib(amount);
 
                _swapDividendShib(amount);
 
                _swapCompensateUsdt(amount);
 
                _swapBuyBht(amount);

            } else if (isMarketPair[sender]) {
 
                uint256  compensateTotal   = amount.mul(compensateRate).div(maxRate);
                _balances[compensateAddress] = _balances[compensateAddress].add(compensateTotal);
                _balances[address(this)] = _balances[address(this)].sub(compensateTotal);
                emit Transfer(address(this), compensateAddress, compensateTotal);

                uint256  dividendTotal   = amount.mul(dividendRate).div(maxRate);
                _balances[dividendAddress] = _balances[dividendAddress].add(dividendTotal);
                _balances[address(this)] = _balances[address(this)].sub(dividendTotal);
                emit Transfer(address(this), dividendAddress, dividendTotal);

                uint256  lpTotal   = amount.mul(lpRate).div(maxRate);
                _balances[lpRewardAddress] = _balances[lpRewardAddress].add(lpTotal);
                _balances[address(this)] = _balances[address(this)].sub(lpTotal);
                emit Transfer(address(this), lpRewardAddress, lpTotal);
 
                _distributionShares(recipient, amount);
            }

        } else { 
            _destroy(amount, transferRate);
        }
        return amount.sub(feeAmount);
    }
 
    function _destroy(uint256 amount, uint256 _destroyFeeRate) internal {
        uint256 feeAmount = amount.mul(_destroyFeeRate).div(maxRate);
        if (feeAmount > 0) {
            _balances[deadAddress] = _balances[deadAddress].add(feeAmount);
            _balances[address(this)] = _balances[address(this)].sub(feeAmount);
            emit Transfer(address(this), deadAddress, feeAmount);
        }
    }
 
    function _swapCompensateUsdt(uint256 amount ) internal {
        uint256 feeAmount = amount.mul(compensateRate).div(maxRate);
        if (feeAmount > 0) {

            address[] memory path = new address[](2);
            path[0] = address(this);
            path[1] = usdtAddress;
            swapTokensForToken(feeAmount, compensateAddress, path);
        }
    }
 
    function _swapDividendShib(uint256 amount ) internal {
        uint256 feeAmount = amount.mul(dividendRate).div(maxRate);
        if (feeAmount > 0) {

            address[] memory path = new address[](4);
            path[0] = address(this);
            path[1] = 0x55d398326f99059fF775485246999027B3197955;
            path[2] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
            path[3] = shibToken;
            swapTokensForToken(feeAmount, dividendAddress, path );
        }
    }
 
    function  _swapLpShib (uint256 amount ) internal {
        uint256 feeAmount = amount.mul(lpRate).div(maxRate);
        if (feeAmount > 0) {

            address[] memory path = new address[](4);
            path[0] = address(this);
            path[1] = 0x55d398326f99059fF775485246999027B3197955;
            path[2] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
            path[3] = shibToken;
            swapTokensForToken(feeAmount, lpRewardAddress, path);
        }
    }
 
    function _swapBuyBht(uint256 amount ) internal {
        uint256 feeAmount = amount.mul(buyBhtRate).div(maxRate);
        if (feeAmount > 0) {

            address[] memory path = new address[](3);
            path[0] = address(this);
            path[1] = 0x55d398326f99059fF775485246999027B3197955;
            path[2] = bhtToken;
            swapTokensForToken(feeAmount, bhtBonusAddress,path);
        }
    }


    function swapTokensForToken(uint256 tokenAmount, address to,  address[] memory path) internal {
        _approve(address(this), address(uniswapV2Router), _totalSupply);
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of token
            path,
            to, // The contract
            block.timestamp
        );
        emit SwapTokensForToken(tokenAmount, path);
    }

    function getRefers(address sender, uint256 _high) public returns (address){
        address _leader = sender;
        for (uint256 i = 0; i <= _high; i++) {
            _leader = BhcFactory(relationFactoryAddress).referers(_leader);
            if (_leader == address(0)) {
                break;
            }
        }
        return _leader;
    }
 
    function _distributionShares(address recipient, uint256 amount) internal {
        uint256 feeAmount = amount.mul(_totalMarketingShareFee).div(maxRate);
        if (feeAmount == 0) {
            return;
        }
        _balances[address(this)] = _balances[address(this)].sub(feeAmount);
        bool _leaderExist = true;
        for (uint256 i = 0; i < _marketingShares.length; i++) {
            uint256 _shareRate = _marketingShares[i];
            if (_shareRate == 0) {
                continue;
            }
            uint256 shareFee = amount.mul(_shareRate).div(maxRate);
            address leader = address(0);
            if (_leaderExist) {
                leader = getRefers(recipient, i);
                if (leader == address(0)) {
                    _leaderExist = false;
                }
            }
            if (!_leaderExist) {
                _balances[deadAddress] = _balances[deadAddress].add(shareFee);
                emit Transfer(address(this), deadAddress, shareFee);
            } else {
                _balances[leader] = _balances[leader].add(shareFee);
                emit Transfer(address(this), leader, shareFee);
            }
        }
    }


    function devoteDestroy(address user, uint256 amount) public onlyFactory returns (bool) {
        require(_balances[user] >= amount, "BHC: destroy Insufficient balance");
        _balances[user] = _balances[user].sub(amount);
        _balances[deadAddress] = _balances[deadAddress].add(amount);
        emit Transfer(user, deadAddress, amount);
        return true;
    }

}