// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;


///$$$$       /$$$$$$$$                               /$$   /$$           /$$             /$$$$
//| $$_/      | $$_____/                              | $$  | $$          | $$            |_  $$
//| $$        | $$        /$$$$$$   /$$$$$$  /$$$$$$$ | $$  | $$ /$$   /$$| $$$$$$$         | $$
//| $$        | $$$$$    |____  $$ /$$__  $$| $$__  $$| $$$$$$$$| $$  | $$| $$__  $$        | $$
//| $$        | $$__/     /$$$$$$$| $$  \__/| $$  \ $$| $$__  $$| $$  | $$| $$  \ $$        | $$
//| $$        | $$       /$$__  $$| $$      | $$  | $$| $$  | $$| $$  | $$| $$  | $$        | $$
//| $$$$      | $$$$$$$$|  $$$$$$$| $$      | $$  | $$| $$  | $$|  $$$$$$/| $$$$$$$/       /$$$$
//|____/      |________/ \_______/|__/      |__/  |__/|__/  |__/ \______/ |_______/       |____/
//
//
//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC
//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC
//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC
//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC
//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC
//    JOIN OUR TELEGRAM GROUP > t.me/earnhubBSC
//
//
///$$      /$$ /$$                                           /$$
//| $$  /$ | $$| $$                                          |__/
//| $$ /$$$| $$| $$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$        /$$ /$$$$$$$   /$$$$$$$  /$$$$$$  /$$$$$$/$$$$   /$$$$$$
//| $$/$$ $$ $$| $$__  $$ /$$__  $$ /$$__  $$ /$$__  $$      | $$| $$__  $$ /$$_____/ /$$__  $$| $$_  $$_  $$ /$$__  $$
//| $$$$_  $$$$| $$  \ $$| $$$$$$$$| $$  \__/| $$$$$$$$      | $$| $$  \ $$| $$      | $$  \ $$| $$ \ $$ \ $$| $$$$$$$$
//| $$$/ \  $$$| $$  | $$| $$_____/| $$      | $$_____/      | $$| $$  | $$| $$      | $$  | $$| $$ | $$ | $$| $$_____/
//| $$/   \  $$| $$  | $$|  $$$$$$$| $$      |  $$$$$$$      | $$| $$  | $$|  $$$$$$$|  $$$$$$/| $$ | $$ | $$|  $$$$$$$
//|__/     \__/|__/  |__/ \_______/|__/       \_______/      |__/|__/  |__/ \_______/ \______/ |__/ |__/ |__/ \_______/
//
//
//
///$$                   /$$     /$$                                             /$$
//|__/                  | $$    | $$                                            | $$
///$$  /$$$$$$$       /$$$$$$  | $$$$$$$   /$$$$$$         /$$$$$$  /$$   /$$ /$$$$$$    /$$$$$$$  /$$$$$$  /$$$$$$/$$$$   /$$$$$$
//| $$ /$$_____/      |_  $$_/  | $$__  $$ /$$__  $$       /$$__  $$| $$  | $$|_  $$_/   /$$_____/ /$$__  $$| $$_  $$_  $$ /$$__  $$
//| $$|  $$$$$$         | $$    | $$  \ $$| $$$$$$$$      | $$  \ $$| $$  | $$  | $$    | $$      | $$  \ $$| $$ \ $$ \ $$| $$$$$$$$
//| $$ \____  $$        | $$ /$$| $$  | $$| $$_____/      | $$  | $$| $$  | $$  | $$ /$$| $$      | $$  | $$| $$ | $$ | $$| $$_____/
//| $$ /$$$$$$$/        |  $$$$/| $$  | $$|  $$$$$$$      |  $$$$$$/|  $$$$$$/  |  $$$$/|  $$$$$$$|  $$$$$$/| $$ | $$ | $$|  $$$$$$$
//|__/|_______/          \___/  |__/  |__/ \_______/       \______/  \______/    \___/   \_______/ \______/ |__/ |__/ |__/ \_______/



/**
 * Allows for contract ownership along with multi-address authorization
 */
abstract contract Auth {
    address internal owner;
    mapping (address => bool) internal authorizations;

    constructor(address _owner) {
        owner = _owner;
        authorizations[_owner] = true;
    }

    /**
     * Function modifier to require caller to be contract owner
     */
    modifier onlyOwner() {
        require(isOwner(msg.sender), "!OWNER"); _;
    }

    /**
     * Function modifier to require caller to be authorized
     */
    modifier authorized() {
        require(isAuthorized(msg.sender), "!AUTHORIZED"); _;
    }

    /**
     * Authorize address. Owner only. Calls internal _authorize method
     */
    function authorize(address adr) external onlyOwner {
        _authorize(adr);
    }
    
    function _authorize (address adr) internal {
        authorizations[adr] = true;
    }
    /**
     * Remove address' authorization. Owner only
     */
    function unauthorize(address adr) public onlyOwner {
        authorizations[adr] = false;
    }

    /**
     * Check if address is owner
     */
    function isOwner(address account) public view returns (bool) {
        return account == owner;
    }

    /**
     * Return address' authorization status
     */
    function isAuthorized(address adr) public view returns (bool) {
        return authorizations[adr];
    }

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    function transferOwnership(address payable adr) public onlyOwner {
        owner = adr;
        authorizations[adr] = true;
        emit OwnershipTransferred(adr);
    }

    event OwnershipTransferred(address owner);
}


library EarnHubLib {
    struct User {
        address _address;
        uint256 lastPurchase;
        bool isReferral;
        uint256 referralBuyDiscount;
        uint256 referralSellDiscount;
        uint256 referralCount;
    }

    enum TransferType {
        Sale,
        Purchase,
        Transfer
    }

    struct Transfer {
        User user;
        uint256 amt;
        TransferType transferType;
        address from;
        address to;
    }
}

/**
 * BEP20 standard interface.
 */
interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IDEXRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;


    function swapExactTokensForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface ITransferGateway {
    function removeHookedContract(uint256 _hookedContractId) external;
    function updateHookedContractShares(uint256 _hookedContractId, uint256 _newShares) external;
    function updateHookedContractHandicap(uint256 _hookedContractId, uint256 _newHandicap) external;
    function onTransfer(EarnHubLib.Transfer memory _transfer) external;
    function setBpScale(uint256 _newBpScale) external;
    function setMinGasThreshold(uint256 _newMinGas) external;
    function setMaxGas(uint256 _newMaxGas) external;
    function depositBNB() external payable;
}


interface IDEXFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function getPair(address tokenA, address tokenB) external view returns (address pair);
}


interface IAnyflect {
    function subscribeToReflection(IDEXRouter router, IBEP20 token) external;
    function excludeFromProcess(bool _val) external;
    function setShares(address from, address to, uint256 toBalance, uint256 fromBalance) external;
    function setExcludedFrom(address from, bool val) external;
    function setExcludedTo(address from, bool val) external;
}

interface ILoyaltyTracker {
    function getReferralData(address _addr) external returns(bool, uint256, uint256, uint256); // * gets all of the data below in a single DELEGATECALL
    function getReferralStatus(address _addr) external returns (bool);
    function getBuyDiscount(address _addr) external returns (uint256);
    function getSellDiscount(address _addr) external returns (uint256);
    function getReferralCount(address _addr) external returns (uint256);
}

contract EarnHub is IBEP20, Auth {
    // * Custom Event declarations
    event GenericErrorEvent(string reason);

    address deadAddress = 0x000000000000000000000000000000000000dEaD;

    // Fees
    uint256 public baseSellFee = 1700; //! default floor sale Fee, always taxes higher and decays to this value after N days (see getVariableFee())
    uint256 public currentSellFee = baseSellFee;
    uint256 public maxSellFee = 0;
    uint256 public transferFee = 0;
    uint256 public baseBuyFee = 1200;

    // Variable Fee timestamps
    uint256 public variableFeeStartingTimestamp;
    uint256 public variableFeeEndingTimestamp;

    // Convenience data
    address public pair;
    mapping(address => bool) liquidityPairs;

    mapping(address => bool) isPresale;

    // Token data
    string constant _name = "EarnHub Token";
    string constant _symbol = "EHB";
    uint8 constant _decimals = 9;
    uint256 public _totalSupply = 7e13 * 1e9;
    uint256 public _maxTxAmount = _totalSupply;
    uint256 public _swapThreshold = 1000 * 1e9;

    mapping(address => uint256) _balances;
    mapping(address => mapping(address => uint256)) _allowances;
    mapping (address => bool ) isBasicTransfer;

    mapping(address => bool) public isFeeExempt;
    mapping(address => bool) isTxLimitExempt;

    // User data
    mapping(address => EarnHubLib.User) public users;

    IAnyflect public anyflect;
    mapping(address => bool) public isAnyflectExempt;

    IDEXRouter public router;
    ITransferGateway public transferGateway;
    ILoyaltyTracker public loyaltyTracker;

    // Modifier used to know if our own contract executed a swap and this transfer corresponds to a swap executed by this contract. This is used to prevent circular liquidity issues.
    bool inSwap;
    modifier swapping() {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor (address _dexRouter, ITransferGateway _transferGateway, string memory _name, string memory _symbol) Auth(msg.sender) {
        // Token Variables
        _name = _name;
        _symbol = _symbol;

        transferGateway = _transferGateway;
        _authorize(address(transferGateway));

        isFeeExempt[msg.sender] = true;
        isFeeExempt[_dexRouter] = true;
        isTxLimitExempt[msg.sender] = true;

        // Enabling Dex trading
        router = IDEXRouter(_dexRouter);
        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));
        liquidityPairs[pair] = true;
        _allowances[address(this)][address(router)] = _totalSupply;
        approve(_dexRouter, _totalSupply);
        approve(address(pair), _totalSupply);

        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        if (_allowances[sender][msg.sender] != _totalSupply) {
            _allowances[sender][msg.sender] -= amount;
        }
        return _transferFrom(sender, recipient, amount);
    }

    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
        if (inSwap || sender == address(anyflect) || isBasicTransfer[sender]) {return _basicTransfer(sender, recipient, amount);}


        require(amount <= _maxTxAmount || isTxLimitExempt[sender], "TX Limit Exceeded");

        if (_shouldSwapBack()) { _swapBack(); }
        EarnHubLib.TransferType transferType = _createTransferType(sender, recipient);

        // * Getting referral data for transferType
        bool isReferral;
        uint256 referralBuyDiscount;
        uint256 referralSellDiscount;
        uint256 referralCount;
        if (address(loyaltyTracker) != address(0)) {
            (isReferral, referralBuyDiscount, referralSellDiscount, referralCount) = getReferralData(sender);
            if (referralSellDiscount > baseSellFee) {
                emit GenericErrorEvent("_transferFrom(): referralSellDiscount > baseSellFee");
            }
            if (referralBuyDiscount > baseBuyFee) {
                emit GenericErrorEvent("_transferFrom(): referralBuyDiscount > baseBuyFee");
            }
        }

        uint amountAfterFee = !isFeeExempt[sender] ? _takeFee(sender, recipient, amount, transferType, referralBuyDiscount, referralSellDiscount) : amount;
        _balances[sender] -= amount;
        _balances[recipient] += amountAfterFee;

        EarnHubLib.User memory user = _createOrUpdateUser(address(sender), block.timestamp, isReferral, referralBuyDiscount, referralSellDiscount, referralCount);

        EarnHubLib.Transfer memory transf = _createTransfer(user, amount, transferType, sender, recipient);


        if (address(anyflect) != address(0)) {
            uint256 balancesSender = _balances[sender];
            uint256 balancesRecipient = _balances[recipient];

            try anyflect.setShares(sender, recipient, balancesSender, balancesRecipient) {

            } catch Error (string memory reason) {
                emit GenericErrorEvent("_transferFrom(): anyflect.setShares() Failed");
                emit GenericErrorEvent(reason);
            }
        }


        try transferGateway.onTransfer(transf) {

        } catch Error (string memory reason) {
            emit GenericErrorEvent('_transferFrom(): transferGateway.onTransfer() Failed');
            emit GenericErrorEvent(reason);
        }

        emit Transfer(sender, recipient, amountAfterFee);
        return true;
    }

    function _createOrUpdateUser(address _addr, uint256 _lastPurchase, bool _isReferral, uint256 _referralBuyDiscount, uint256 _referralSellDiscount, uint256 _referralCount) internal returns (EarnHubLib.User memory) {
        EarnHubLib.User memory user = EarnHubLib.User(_addr, _lastPurchase, _isReferral, _referralBuyDiscount, _referralSellDiscount, _referralCount);

        users[_addr] = user;

        return user;
    }

    function _createTransferType(address _from, address _recipient) internal view returns (EarnHubLib.TransferType) {
        if (liquidityPairs[_recipient]) {
            return EarnHubLib.TransferType.Sale;
        } else if (liquidityPairs[_from] || isPresale[_from]) {
            return EarnHubLib.TransferType.Purchase;
        }
        return EarnHubLib.TransferType.Transfer;
    }

    function _createTransfer(EarnHubLib.User memory _address, uint256 _amt, EarnHubLib.TransferType _transferType, address _from, address _to) internal pure returns (EarnHubLib.Transfer memory) {
        EarnHubLib.Transfer memory _transfer = EarnHubLib.Transfer(_address, _amt, _transferType, _from, _to);
        return _transfer;
    }

    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function _takeFee(address _sender, address _receiver, uint256 _amount, EarnHubLib.TransferType _transferType, uint256 _referralBuyDiscount, uint256 _referralSellDiscount) internal returns (uint256) {
        // * Takes the fee and keeps remainder in contract
        uint256 feeAmount = _amount * getTotalFee(_transferType, _referralBuyDiscount, _referralSellDiscount) / 10000;

        if (feeAmount > 0) {
            _balances[address(this)] += feeAmount;
            emit Transfer(_sender, address(this), feeAmount);
        }

        return (_amount - feeAmount);
    }

    function _shouldSwapBack() internal view returns (bool) {
        return ((msg.sender != pair) && (!inSwap) && (_balances[address(this)] >= _swapThreshold));
    }

    function _swapBack() internal swapping {
        uint256 amountToSwap = _swapThreshold;

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();
        uint256 balanceBefore = address(this).balance;

        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amountToSwap,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amountBNB = address(this).balance - balanceBefore;

        try transferGateway.depositBNB{value : amountBNB}() {

        } catch Error(string memory reason) {
            emit GenericErrorEvent("_swapBack(): transferGateway.depositBNB() Failed");
            emit GenericErrorEvent(reason);
        }
    }


    // * Getter (view only) Functions
    function getCirculatingSupply() public view returns (uint256) {
        return (_totalSupply - balanceOf(deadAddress) - balanceOf(address(0)));
    }

    function getLiquidityBacking(uint256 _accuracy) public view returns (uint256) {
        return (_accuracy * (balanceOf(pair) * 2) / getCirculatingSupply());
    }

    function isOverLiquified(uint256 _target, uint256 _accuracy) public view returns (bool) {
        return (getLiquidityBacking(_accuracy) > _target);
    }

    function getTotalFee(EarnHubLib.TransferType _transferType, uint256 _referralBuyDiscount, uint256 _referralSellDiscount) public returns (uint256) {


        if (_transferType == EarnHubLib.TransferType.Sale) {
            uint256 sellFee = maxSellFee > 0 ? getVariableSellFee() : baseSellFee;
            if (_referralSellDiscount > 0) sellFee -= _referralSellDiscount;
            return sellFee;
        }
        if (_transferType == EarnHubLib.TransferType.Transfer) {
            return transferFee;
        }
        else {
            uint256 buyFee = baseBuyFee;
            if (_referralBuyDiscount > 0) buyFee -= _referralBuyDiscount;
            return buyFee;
        }
    }

    function getVariableSellFee() public returns (uint256) {
        // ! starts at maxSellFee then lineally decays to baseSellFee over variableTaxTimeframe

        // * variable sell fee timeframe ended or timeframe hasn't started
        if (variableFeeStartingTimestamp > block.timestamp || variableFeeEndingTimestamp < block.timestamp) {
            if (variableFeeEndingTimestamp < block.timestamp) maxSellFee = 0;

            currentSellFee = baseSellFee;
            return baseSellFee;
        } else if (variableFeeStartingTimestamp <= block.timestamp && block.timestamp <= variableFeeEndingTimestamp) {// * while in variable fee timeframe
            // * how long does variableFee timeframe lasts in seconds
            uint256 variableTaxTimeframe = variableFeeEndingTimestamp - variableFeeStartingTimestamp;
            uint256 sellFee = baseSellFee + ((maxSellFee - baseSellFee) * (variableTaxTimeframe - (block.timestamp - variableFeeStartingTimestamp))) / variableTaxTimeframe;
            currentSellFee = sellFee;
            return sellFee;
        }
        return baseSellFee;
    }

    function getReferralData(address _addr) public returns (bool isReferral, uint256 referralBuyDiscount, uint256 referralSellDiscount, uint256 referralCount) {

        try loyaltyTracker.getReferralData(_addr) returns (bool isReferral, uint256 referralBuyDiscount, uint256 referralSellDiscount, uint256 referralCount){
            isReferral = isReferral;
            referralBuyDiscount = referralBuyDiscount;
            referralSellDiscount = referralSellDiscount;
            referralCount = referralCount;

        } catch Error (string memory reason){
            emit GenericErrorEvent('getReferralData(): loyaltyTracker.getReferralData() Failed');
            emit GenericErrorEvent(reason);

            isReferral = false;
            referralBuyDiscount = 0;
            referralSellDiscount = 0;
            referralCount = 0;
        }

        return (isReferral, referralBuyDiscount, referralSellDiscount, referralCount);

    }


    // * Setter (write only) Functions
    function setVariableSellFeeParams(uint256 _maxSellFee, bool _useCurrentTimestampForStart, uint256 _startingTimestamp, uint256 _endingTimestamp) external authorized {
        require(_endingTimestamp >= _startingTimestamp, "_endingTimestamp should be >= _startingTimestamp");
        require(_maxSellFee >= baseSellFee, "_maxFee should be >= baseSellFee");

        maxSellFee = _maxSellFee;
        variableFeeStartingTimestamp = _useCurrentTimestampForStart ? block.timestamp : _startingTimestamp;
        variableFeeEndingTimestamp = _endingTimestamp;
    }

    function setNewBaseFees(uint256 _newBaseSellFee, uint256 _newTransferFee, uint256 _newBaseBuyFee) external authorized {
        require(_newBaseSellFee <= 10000 && _newTransferFee <= 10000 && _newBaseBuyFee <= 10000, "New fees should be less than 100%");
        baseSellFee = _newBaseSellFee;
        transferFee = _newTransferFee;
        baseBuyFee = _newBaseBuyFee;
    }

    function setTransferGateway(ITransferGateway _transferGateway) external authorized {
        transferGateway = _transferGateway;
        _authorize(address(_transferGateway));
    }

    function setAnyflect(IAnyflect _anyflect) external authorized {
        anyflect = _anyflect;
        anyflect.setExcludedFrom(pair, true);
        anyflect.setExcludedTo(pair, true);
        anyflect.setExcludedFrom(address(this), true);
        anyflect.setExcludedFrom(address(0), true);
        anyflect.setExcludedFrom(0x000000000000000000000000000000000000dEaD, true);
        _authorize(address(anyflect));
    }

    function setDexRouter(IDEXRouter _router) external authorized {
        router = _router;
    }

    function setLoyaltyTracker(ILoyaltyTracker _loyaltyTracker) external authorized {
        loyaltyTracker = _loyaltyTracker;
        _authorize(address(_loyaltyTracker));
    }

    function setTxLimit(uint256 _amount) external authorized {
        _maxTxAmount = _amount;
    }

    function setIsFeeExempt(address _addr, bool _exempt) external authorized {
        isFeeExempt[_addr] = _exempt;
    }

    function setIsTxLimitExempt(address _addr, bool _exempt) external authorized {
        isTxLimitExempt[_addr] = _exempt;
    }

    function setLiquidityPair(address _pair, bool _value) external authorized {
        liquidityPairs[_pair] = _value;
    }

    function setSwapThreshold(uint256 _amount) external authorized {
        _swapThreshold = _amount;
    }

    function setAnyflectExempt(address _addr, bool _value) external authorized {
        isAnyflectExempt[_addr] = _value;
    }

    function setPresaleContract(address _addr, bool _value) external authorized {
        isPresale[_addr] = _value;
    }

    function setBasicTransfer(address _addr, bool _value) external authorized {
        isBasicTransfer[_addr] = _value;
    }

    function rescueSquad(address payable _to) external authorized {
        (bool success,) = _to.call{value : address(this).balance}("");
        require(success, "unable to send value, recipient may have reverted");
    }

    // Grabs any shitcoin someone sends to our contract, converts it to rewards for our holders ♥
    function fuckShitcoins(IBEP20 _shitcoin, address[] memory _path, address _to) external authorized {
        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            _shitcoin.balanceOf(address(this)),
            0,
            _path,
            address(_to),
            block.timestamp
        );
    }

    // * Interface-compliant functions
    receive() external payable {}

    function totalSupply() external view override returns (uint256) {return _totalSupply;}

    function decimals() external pure override returns (uint8) {return _decimals;}

    function symbol() external pure override returns (string memory) {return _symbol;}

    function name() external pure override returns (string memory) {return _name;}

    function getOwner() external view override returns (address) {return owner;}

    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}

    function allowance(address holder, address spender) external view override returns (uint256) {return _allowances[holder][spender];}

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function approveMax(address spender) external returns (bool) {
        return approve(spender, _totalSupply);
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        return _transferFrom(msg.sender, recipient, amount);
    }
}