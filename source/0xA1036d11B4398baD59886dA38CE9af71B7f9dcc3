
// File: contracts/ContributionCollectorFactory.sol
pragma solidity ^0.8.11;

import "@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/IContributionCollectorFactory.sol";
import "./interfaces/IPledgeContributionCollector.sol";
import "./interfaces/IFlashContributionCollector.sol";

error ZeroAddressImplementation();
error ZeroAddressContributionToken();
error InvalidContributionCap();
error InvalidMerkleRoot();
error InvalidTierCaps();

/**
 * @title ContributionCollectorFactory
 * @dev ContributionCollectorFactory contract
 * @author Federico Luzzi - <fedeluzzi00@gmail.com>
 * SPDX-License-Identifier: GPL-3.0
 */
contract ContributionCollectorFactory is
    IContributionCollectorFactory,
    Ownable
{
    address public pledgeContributionImplementation;
    address public flashContributionImplementation;
    mapping(address => bool) public contributionCollectorCreated;

    event PledgeContributionCollectorCreated(address collector);
    event FlashContributionCollectorCreated(address collector);
    event PledgeImplementationUpgraded(address implementation);
    event FlashImplementationUpgraded(address implementation);

    constructor(
        address _initialPledgeImplementation,
        address _initialFlashImplementation
    ) {
        if (_initialPledgeImplementation == address(0))
            revert ZeroAddressImplementation();
        if (_initialFlashImplementation == address(0))
            revert ZeroAddressImplementation();
        pledgeContributionImplementation = _initialPledgeImplementation;
        flashContributionImplementation = _initialFlashImplementation;
    }

    function upgradePledgeImplementation(address _upgradedImplementation)
        external
        onlyOwner
    {
        if (_upgradedImplementation == address(0))
            revert ZeroAddressImplementation();
        pledgeContributionImplementation = _upgradedImplementation;
        emit PledgeImplementationUpgraded(_upgradedImplementation);
    }

    function upgradeFlashImplementation(address _upgradedImplementation)
        external
        onlyOwner
    {
        if (_upgradedImplementation == address(0))
            revert ZeroAddressImplementation();
        flashContributionImplementation = _upgradedImplementation;
        emit FlashImplementationUpgraded(_upgradedImplementation);
    }

    function createPledgeContributionCollector(
        address _token,
        uint256 _contributionCap,
        bytes32 _merkleRoot,
        uint256 _collectionTimeLimit,
        address[] calldata _allowedRecipients
    ) external onlyOwner {
        // all input checks are performed by the contribution collector itself
        IPledgeContributionCollector _collector = IPledgeContributionCollector(
            ClonesUpgradeable.cloneDeterministic(
                pledgeContributionImplementation,
                keccak256(
                    abi.encodePacked(_token, _contributionCap, _merkleRoot)
                )
            )
        );
        _collector.initialize(
            _token,
            _contributionCap,
            _merkleRoot,
            _collectionTimeLimit,
            _allowedRecipients
        );
        _collector.transferOwnership(msg.sender);
        contributionCollectorCreated[address(_collector)] = true;
        emit PledgeContributionCollectorCreated(address(_collector));
    }

    function createFlashContributionCollector(
        address _token,
        uint256[] calldata _tierCaps,
        bytes32 _merkleRoot,
        uint256 _collectionTimeLimit,
        address[] calldata _allowedRecipients
    ) external onlyOwner {
        // all input checks are performed by the contribution collector itself
        IFlashContributionCollector _collector = IFlashContributionCollector(
            ClonesUpgradeable.cloneDeterministic(
                flashContributionImplementation,
                keccak256(abi.encodePacked(_token, _tierCaps, _merkleRoot))
            )
        );
        _collector.initialize(
            _token,
            _merkleRoot,
            _tierCaps,
            _collectionTimeLimit,
            _allowedRecipients
        );
        _collector.transferOwnership(msg.sender);
        contributionCollectorCreated[address(_collector)] = true;
        emit FlashContributionCollectorCreated(address(_collector));
    }
}


// File: @openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for
 * deploying minimal proxy contracts, also known as "clones".
 *
 * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies
 * > a minimal bytecode implementation that delegates all calls to a known, fixed address.
 *
 * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`
 * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the
 * deterministic method.
 *
 * _Available since v3.4._
 */
library ClonesUpgradeable {
    /**
     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.
     *
     * This function uses the create opcode, which should never revert.
     */
    function clone(address implementation) internal returns (address instance) {
        assembly {
            let ptr := mload(0x40)
            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)
            mstore(add(ptr, 0x14), shl(0x60, implementation))
            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)
            instance := create(0, ptr, 0x37)
        }
        require(instance != address(0), "ERC1167: create failed");
    }

    /**
     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.
     *
     * This function uses the create2 opcode and a `salt` to deterministically deploy
     * the clone. Using the same `implementation` and `salt` multiple time will revert, since
     * the clones cannot be deployed twice at the same address.
     */
    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {
        assembly {
            let ptr := mload(0x40)
            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)
            mstore(add(ptr, 0x14), shl(0x60, implementation))
            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)
            instance := create2(0, ptr, 0x37, salt)
        }
        require(instance != address(0), "ERC1167: create2 failed");
    }

    /**
     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.
     */
    function predictDeterministicAddress(
        address implementation,
        bytes32 salt,
        address deployer
    ) internal pure returns (address predicted) {
        assembly {
            let ptr := mload(0x40)
            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)
            mstore(add(ptr, 0x14), shl(0x60, implementation))
            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)
            mstore(add(ptr, 0x38), shl(0x60, deployer))
            mstore(add(ptr, 0x4c), salt)
            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))
            predicted := keccak256(add(ptr, 0x37), 0x55)
        }
    }

    /**
     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.
     */
    function predictDeterministicAddress(address implementation, bytes32 salt)
        internal
        view
        returns (address predicted)
    {
        return predictDeterministicAddress(implementation, salt, address(this));
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: contracts/interfaces/IContributionCollectorFactory.sol
pragma solidity >=0.8.0;

/**
 * @title IContributionCollectorFactory
 * @dev IContributionCollectorFactory interface
 * @author Federico Luzzi - <fedeluzzi00@gmail.com>
 * SPDX-License-Identifier: GPL-3.0
 */
interface IContributionCollectorFactory {
    function contributionCollectorCreated(address _collector)
        external
        view
        returns (bool);

    function upgradePledgeImplementation(address _upgradedImplementation)
        external;

    function upgradeFlashImplementation(address _upgradedImplementation)
        external;

    function createPledgeContributionCollector(
        address _token,
        uint256 _contributionCap,
        bytes32 _merkleRoot,
        uint256 _collectionTimeLimit,
        address[] calldata _allowedRecipients
    ) external;

    function createFlashContributionCollector(
        address _token,
        uint256[] calldata _tierCaps,
        bytes32 _merkleRoot,
        uint256 _collectionTimeLimit,
        address[] calldata _allowedRecipients
    ) external;
}


// File: contracts/interfaces/IPledgeContributionCollector.sol
pragma solidity >=0.8.0;

/**
 * @title IPledgeContributionCollector
 * @dev PledgeContributionCollector interface
 * @author Federico Luzzi - <fedeluzzi00@gmail.com>
 * SPDX-License-Identifier: GPL-3.0
 */
interface IPledgeContributionCollector {
    enum State {
        ACTIVE,
        CANCELED,
        FINALIZED
    }

    struct Contributor {
        uint256 contributed;
        mapping(bytes32 => uint256) contributionWithMerkleRoot;
        bool recovered;
    }

    struct Contribution {
        uint256 cap;
        uint256 amount;
    }

    function state() external view returns (State);

    function merkleRoot() external view returns (bytes32);

    function token() external view returns (address);

    function contributedWithMerkleRoot(address _account, bytes32 _merkleRoot)
        external
        view
        returns (uint256);

    function contributed(address _account) external view returns (uint256);

    function recovered(address _account) external view returns (bool);

    function initialize(
        address _token,
        uint256 _contributionCap,
        bytes32 _merkleRoot,
        uint256 _expirationTimestamp,
        address[] calldata _allowedRecipients
    ) external;

    function transferOwnership(address _owner) external;

    function updateMerkleRoot(bytes32 _merkleRoot) external;

    function cancel() external;

    function finalize(address _recipient) external;

    function updateCap(uint256 _newCap) external;

    function contribute(
        address _account,
        uint256 _amount,
        uint256 _maximumAmount,
        bytes32[] calldata _proof
    ) external;

    function recover() external;
}


// File: contracts/interfaces/IFlashContributionCollector.sol
pragma solidity >=0.8.0;

/**
 * @title IFlashContributionCollector
 * @dev IFlashContributionCollector interface
 * @author Federico Luzzi - <fedeluzzi00@gmail.com>
 * SPDX-License-Identifier: GPL-3.0
 */
interface IFlashContributionCollector {
    enum State {
        ACTIVE,
        CANCELED,
        FINALIZED
    }

    struct Contributor {
        uint256 contributed;
        mapping(bytes32 => uint256) contributionWithMerkleRoot;
        bool recovered;
    }

    struct Contribution {
        uint256[] tierCaps;
        uint256[] amounts;
        uint256 totalAmount;
    }

    function state() external view returns (State);

    function merkleRoot() external view returns (bytes32);

    function token() external view returns (address);

    function contributedWithMerkleRoot(address _account, bytes32 _merkleRoot)
        external
        view
        returns (uint256);

    function contributed(address _account) external view returns (uint256);

    function recovered(address _account) external view returns (bool);

    function initialize(
        address _token,
        bytes32 _merkleRoot,
        uint256[] calldata _tierCaps,
        uint256 _collectionTimeLimit,
        address[] calldata _allowedRecipients
    ) external;

    function transferOwnership(address _owner) external;

    function updateMerkleRoot(bytes32 _merkleRoot) external;

    function cancel() external;

    function finalize(address _recipient) external;

    function updateTierCaps(uint256[] calldata _newTierCaps) external;

    function contribute(
        address _account,
        uint256 _amount,
        uint256 _tier,
        uint256 _maximumAmount,
        bytes32[] calldata _proof
    ) external;

    function recover() external;

    function contributionAmount(uint256 _tier) external view returns (uint256);

    function contributionTierCap(uint256 _tier) external view returns (uint256);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

