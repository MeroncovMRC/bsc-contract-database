
// File: contracts/LendPool.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.4;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";
import { RewardTreasury } from "./RewardTreasury.sol";

/**
 * @dev The LeanPool contract allows users to lend tokens in exchange for rewards.
 * Rewards can be distributed in any token, be it the same token that is being staked
 * or another one.
 *
 * A reward per days of reward tokens is distributed every block.
 * This amount can be updated anytime by the contract owner and the update will
 * be effective from the next block.
 *
 * The amount of reward entitled to each user is calculated based on elapsed block time.

 *
 * The pool opens at a specific start block.
 * After the start block is reached, users will be able to {deposit} stake tokens.
 *
 * When the end block is reached, no more rewards will be distributed and deposits will be disabled.
 * Staked tokens are still withdrawable through the {widthdraw} function.
 *
 * Ones time tokens is deposited , Rewards are automatically sent to users wallet instantly.
 * Can be withdrawn only after the due date.
 * Early withdrawals must return the rewards already received.
 */
contract LendPool is Ownable {
    using SafeERC20 for IERC20;

    /// @dev Info of each user.
    struct UserInfo {
        // How many `stakeTokens` the user has provided.
        uint256 amount;
       
        // Since which is when the stake was made.
        uint256 dueDate;
    
        uint256 rewardDebt;       
         // Whenever a user deposits tokens to the pool:
        //   1. User receives the reward sent to his address.
        //   2. User's `amount` gets updated.
        //   3. User's `dueDate` gets updated.
        //   4. User's `rewardDebt` gets updated.
    }

    /// @dev The token to be staked.
    IERC20 public stakeToken;
    /// @dev The token in which rewards are distributed.
    IERC20 public rewardToken;
    /// @dev The treasury contract that holds the reward tokens to be distributed.
    RewardTreasury public rewardTreasury;
   
    /// @dev The total amount of tokens staked.
    uint256 public totalStakedTokens;
    uint256 public liquidityPoolDept;
    /// @dev The block when reward distribution starts.
    uint256 public startBlock;
    /// @dev The block when reward distribution ends.
    uint256 public endBlock;
    
    /// @dev Reward tokens to be distributed per Year.
    uint256 public maximumStake;
    uint256 public rewardPerYearL1;
    uint256 public rewardPerYearL2;
    uint256 public rewardPerYearL3;
    uint256 public rewardPerYearL4;
    /// @dev Info of each user that stakes tokens.
    mapping (address => UserInfo) public usersInfo;

    /// @dev Emitter when `user` deposits some tokens.
    event Deposit(address indexed user, uint256 amount);
    /// @dev Emitter when `user` withdraws some tokens.
    event Withdraw(address indexed user, uint256 amount);
    /// @dev Emitter when `user` claims the accrues rewards.
    event RewardClaim(address indexed user, uint256 amount);
    

    /**
     * @dev Initializes state variables.
     */
    constructor(
        IERC20 stakeToken_,
        IERC20 rewardToken_,
        uint256 startBlock_,
        uint256 endBlock_,
        uint256 maximumStake_,
        uint256 rewardPerYearL1_,
        uint256 rewardPerYearL2_,
        uint256 rewardPerYearL3_,
        uint256 rewardPerYearL4_
    ) {
        stakeToken = stakeToken_;
        rewardToken = rewardToken_;
        startBlock = startBlock_;
        endBlock = endBlock_;
        maximumStake = maximumStake_;
        rewardPerYearL1 = rewardPerYearL1_;
        rewardPerYearL2 = rewardPerYearL2_;
        rewardPerYearL3 = rewardPerYearL3_;
        rewardPerYearL4 = rewardPerYearL4_;
        rewardTreasury = new RewardTreasury(rewardToken_);
    }

    /**
     * @dev Adds reward tokens to the `rewardTreasury`.
     */
    function addRewardTokens(uint256 amount) external {
        rewardToken.safeTransferFrom(msg.sender, address(rewardTreasury), amount);
    }

     
    /**
     * @dev Removes reward tokens from the `rewardTreasury`.
     *
     * Requirements:
     *
     * - caller must be the owner.
     */
    function removeRewardTokens(uint256 amount) external onlyOwner {
        rewardTreasury.sendReward(msg.sender, amount);
    }

    /**
     * @dev Add Liquidity to Pool.
     */
    function addLiquidityPool(uint256 amount) external onlyOwner {
        require(amount > 0, "Pool: deposit amount is zero");
        liquidityPoolDept -= amount;
        stakeToken.safeTransferFrom(msg.sender, address(this), amount);

        
    }

      /**
     * @dev Take advantage of lending.
     */
    function withdrawLiquidityPool(uint256 amount) external onlyOwner {
        require(amount > 0, "Pool: withdraw amount is zero");
        require(amount <= totalStakedTokens * 70 / 100, "Pool: withdraw amount is more than 70%");
        require(liquidityPoolDept + amount <= totalStakedTokens * 70 / 100, "Pool: liquidityPoolDept amount is more than 70%");
        liquidityPoolDept += amount;
        stakeToken.safeTransfer(msg.sender, amount);
    }

       /**
     * @dev Updates the reward rate.
     *
     * Requirements:
     *
     * - caller must be the owner.
     */
   
    function setrewardPerYearL1(uint256 rewardPerYearL1_) external onlyOwner {
       
        require(rewardPerYearL1_ > 0, "Pool: Reward Per Year must more than 0");
        rewardPerYearL1 = rewardPerYearL1_;
    }
      function setrewardPerYearL2(uint256 rewardPerYearL2_) external onlyOwner {
       
        require(rewardPerYearL2_ > 0, "Pool: Reward Per Year must more than 0");
        rewardPerYearL2 = rewardPerYearL2_;
    }
      function setrewardPerYearL3(uint256 rewardPerYearL3_) external onlyOwner {
       
        require(rewardPerYearL3_ > 0, "Pool: Reward Per Year must more than 0");
        rewardPerYearL3 = rewardPerYearL3_;
    }
      function setrewardPerYearL4(uint256 rewardPerYearL4_) external onlyOwner {
       
        require(rewardPerYearL4_ > 0, "Pool: Reward Per Year must more than 0");
        rewardPerYearL4 = rewardPerYearL4_;
    }

     function setMaximumStake(uint256 maximumStake_) external onlyOwner {
        require(maximumStake_ > 0, "Pool: Maximum Stake must more than 0");

            maximumStake = maximumStake_;
    }

    /**
     * @dev Updates the block when reward distribution ends.
     *
     * Requirements:
     *
     * - caller must be the owner.
     */
    function setEndBlock(uint256 endBlock_) external onlyOwner {
        require(endBlock_ >= block.number, "Pool: new endBlock is in the past");

            endBlock = endBlock_;
    }

    /**
     * @dev Deposits tokens.
     *
     * Reward will be automatically sent to user's wallet at this time.
     */
    function deposit(uint256 amount, uint256 numberOfDays) external {

        UserInfo storage userInfo = usersInfo[msg.sender];
        require(amount > 0, "Pool: deposit amount is zero");
        require(amount <= maximumStake, "Pool: deposit amount is over than Maximum stake");
        require(block.number >= startBlock, "Pool: pool is not open yet");
        require(block.number < endBlock, "Pool: pool is already closed");
        require(userInfo.amount == 0, "Pool: user is already in pool");

        

     
        userInfo.dueDate = block.timestamp + (numberOfDays * 1 days);
     
        userInfo.amount += amount;
        totalStakedTokens += amount;
        uint256 pendingReward = getPendingReward(msg.sender);
        uint256 totalAmount = amount - pendingReward;

        stakeToken.safeTransferFrom(msg.sender, address(this), totalAmount);        
        stakeToken.safeTransferFrom(msg.sender, address(rewardTreasury), pendingReward);
        
        _sendReward(msg.sender);

        emit Deposit(msg.sender, amount);
    }

    /**
     * @dev Withdraws tokens.
     *
     * User can withdraw after dueDate.
     */
    function withdraw() external {
        
     
        UserInfo storage userInfo = usersInfo[msg.sender];
        uint256 dueDate = userInfo.dueDate;
        uint256 amount = userInfo.amount;
        require(block.timestamp >= dueDate, "Pool: not yet due date");
        require(amount > 0, "Pool: withdraw amount is zero");
    
        userInfo.amount = 0;
        userInfo.rewardDebt = 0;
        totalStakedTokens -= amount;
        stakeToken.safeTransfer(msg.sender, amount);

        emit Withdraw(msg.sender, amount);
    }

    
    

    /**
     * @dev Returns the amount of pending reward to be claimed.
     *
     * First calculate how long the stake has been active (TimeDiff)
     * the alghoritm is  days = block.timestamp - stake seconds (due date - block.timestap) / 1 days
     * days is an variable in Solidity names days
     * Reward amount =  TimeDiff * Staked Amount * Reward Rate / RewardInterval
     */
   function getPendingReward(address user) public view returns (uint256) {
        UserInfo storage userInfo = usersInfo[user];
        uint256 rewardLevel;
        uint256 elapsedTime = (userInfo.dueDate - block.timestamp) / 1 days;
        if(elapsedTime >= 360){rewardLevel = rewardPerYearL4;}
        else if(elapsedTime >= 270){rewardLevel = rewardPerYearL3;}
        else if(elapsedTime >= 180){rewardLevel = rewardPerYearL2;}
        else if(elapsedTime >= 90){rewardLevel = rewardPerYearL1;}
        else {rewardLevel = rewardPerYearL1;}
       

        
        return (elapsedTime * userInfo.amount * rewardLevel / 100) /360 ;
        
    }

    /**
     * @dev Internal function to send all the accrued reward to user's wallet.
     *
     */
    function _sendReward(address user) internal {
        uint256 pendingReward = getPendingReward(user);

        if (pendingReward > 0) {
            UserInfo storage userInfo = usersInfo[user];
            userInfo.rewardDebt = pendingReward;  
            rewardTreasury.sendReward(user, pendingReward);
            

            emit RewardClaim(user, pendingReward);
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: contracts/RewardTreasury.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.4;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @dev The RewardTresury contract stores the tokens to be sent as reward
 * for the StakePool.
 */
contract RewardTreasury is Ownable {
    using SafeERC20 for IERC20;

    /// @dev The token in which rewards are distributed
    IERC20 public token;

    /**
     * @dev Initializes state variables.
     */
    constructor(IERC20 token_) {
        token = token_;
    }

    /**
     * @dev Transfers the reward to user's wallet.
     */
    function sendReward(address to, uint256 amount) external onlyOwner {
        token.safeTransfer(to, amount);
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

