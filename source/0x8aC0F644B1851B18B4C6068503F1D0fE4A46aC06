pragma solidity ^0.5.8;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Context {
    constructor() internal {}

    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}

contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;
    uint256 public maxSupply = 500000000000 * 1e18;

    uint256 public startTime = 0;
    address public pairAddress = address(0x0000000000000000000000000000000000000000);
    address public marketingAddress = address(0x3C6c50A1A34ed2D4cC05EdE14c9d376759fA3Ad0);
    address public zero = address(0x0000000000000000000000000000000000000000);
    uint256 private buyTax = 10;
    uint256 private sellTax = 2;
    uint256 private transTax = 2;
    uint256 private PERCENTAGE = 100;
    mapping(address => bool) public blackNames;
    mapping(address => bool) public whiteNames;
    mapping(address => bool) private startBuy;
    struct Bonus {
        bool flag;
        uint256 alreadyBonusAverage;
    }
    mapping(address => Bonus) public bonusUsers;
    uint256 public bonusTotalBalance;
    uint256 public bonusAverage = 0;
    uint256 public enlarge = 1e6;

    function modityBonusUsers(address account) internal {
        uint256 balance = _balances[account];
        if (account == zero || account == pairAddress) {
        } else if (balance >= 500000000 * 1e18) {
            calBonus(account);
            Bonus storage bonus = bonusUsers[account];
            if (bonus.flag == false) {
                bonusTotalBalance = bonusTotalBalance.add(balance);
                bonus.flag = true;
                bonus.alreadyBonusAverage = bonusAverage;
            }
        } else {
            calBonus(account);
            Bonus storage bonus = bonusUsers[account];
            if (bonus.flag == true) {
                bonusTotalBalance = bonusTotalBalance.sub(balance);
                bonus.flag = false;
                bonus.alreadyBonusAverage = 0;
            }
        }
    }

    function transferOutBonus(address account, uint256 amount) internal {
        Bonus storage bonus = bonusUsers[account];
        if (bonus.flag == true) {
            bonusTotalBalance = bonusTotalBalance.sub(amount);
        }
    }

    function calBonus(address account) internal returns (uint256 balance) {
        if (account != zero && account != pairAddress) {
            Bonus storage bonus = bonusUsers[account];
            if (bonus.flag == true) {
                balance = _balances[account].add(_balances[account].mul(bonusAverage.sub(bonus.alreadyBonusAverage)).div(enlarge));
                _balances[account] = balance;
                bonus.alreadyBonusAverage = bonusAverage;
            }
        }
    }

    function addBonus(uint256 amount) internal {
        bonusAverage = bonusAverage.add(amount.mul(enlarge).div(bonusTotalBalance));
        bonusTotalBalance = bonusTotalBalance.add(amount);
    }

    constructor() public {}

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        if (account != zero && account != pairAddress) {
            Bonus memory bonus = bonusUsers[account];
            if (bonus.flag == true) {
                return _balances[account].add(_balances[account].mul(bonusAverage.sub(bonus.alreadyBonusAverage)).div(enlarge));
            }
        }
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance'));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, 'ERC20: decreased allowance below zero'));
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(whiteNames[sender] == true || startTime > 0, 'ERC20: transfer not start');
        require(blackNames[sender] == false, 'ERC20: transfer from the black address');
        require(sender != address(0), 'ERC20: transfer from the zero address');
        require(recipient != address(0), 'ERC20: transfer to the zero address');

        if ((now < startTime + 40 * 60) && sender == pairAddress) {
            require(startBuy[recipient] == false && amount < 500000000 * 1e18, 'ERC20: just can buy once and 5E in 40min after open');
            startBuy[recipient] = true;
        }

        calBonus(sender);
        calBonus(recipient);
        calBonus(marketingAddress);

        bool needBonus = false;
        uint256 nowTax = 0;
        uint256 burnAmount = 0;
        if (whiteNames[sender] == false && whiteNames[recipient] == false && pairAddress != sender && pairAddress != recipient) {
            nowTax = transTax;
            burnAmount = amount.mul(transTax).div(PERCENTAGE);
            _burn(sender, burnAmount);
        }
        else if (whiteNames[sender] == true || whiteNames[recipient] == true) {
            nowTax = 0;
        }
        else if (sender == pairAddress) {
            nowTax = buyTax;
            _balances[marketingAddress] = _balances[marketingAddress].add(amount.mul(5).div(PERCENTAGE));
            needBonus = true;
            burnAmount = amount.mul(2).div(PERCENTAGE);
            _burn(sender, burnAmount);
        }
        else {
            nowTax = sellTax;
            burnAmount = amount.mul(sellTax).div(PERCENTAGE);
            _burn(sender, burnAmount);
        }

        _balances[sender] = _balances[sender].sub(amount.sub(burnAmount), 'ERC20: transfer amount exceeds balance');
        transferOutBonus(sender, amount);

        _balances[recipient] = _balances[recipient].add(amount.sub(amount.mul(nowTax).div(PERCENTAGE)));

        modityBonusUsers(sender);
        modityBonusUsers(recipient);
        modityBonusUsers(marketingAddress);
        if (needBonus == true) {
            addBonus(amount.mul(3).div(PERCENTAGE));
        }
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), 'ERC20: mint to the zero address');
        require(_totalSupply.add(amount) <= maxSupply, 'ERC20: cannot mint over max supply');

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), 'ERC20: burn from the zero address');

        _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), 'ERC20: approve from the zero address');
        require(spender != address(0), 'ERC20: approve to the zero address');

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor(
        string memory name,
        string memory symbol,
        uint8 decimals
    ) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, 'SafeMath: addition overflow');

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, 'SafeMath: subtraction overflow');
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, 'SafeMath: multiplication overflow');

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, 'SafeMath: division by zero');
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;

        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

contract EarnBnbToken is ERC20, ERC20Detailed {
    using Address for address;
    using SafeMath for uint256;

    address public governance;

    constructor() public ERC20Detailed('Earnbnb', 'EBNB', 18) {
        _mint(msg.sender, 500000000000 * 1e18);
        governance = msg.sender;
        whiteNames[msg.sender] = true;
        modityBonusUsers(msg.sender);
    }

    function setGovernance(address _governance) public {
        require(msg.sender == governance, '!governance');
        governance = _governance;
    }

    function setBlackNames(address _addr) public {
        require(msg.sender == governance, '!governance');
        blackNames[_addr] = true;
    }

    function removeBlackNames(address _addr) public {
        require(msg.sender == governance, '!governance');
        blackNames[_addr] = false;
    }

    function setWhiteNames(address _addr) public {
        require(msg.sender == governance, '!governance');
        whiteNames[_addr] = true;
    }

    function removeWhiteNames(address _addr) public {
        require(msg.sender == governance, '!governance');
        whiteNames[_addr] = false;
    }

    function setPairAddress(address _pairAddress) public {
        require(msg.sender == governance, '!governance');
        pairAddress = _pairAddress;
        startTime = now;
    }

    function burn(uint256 amount) external {
        calBonus(msg.sender);
        _burn(msg.sender, amount);
        transferOutBonus(msg.sender, amount);
    }
}