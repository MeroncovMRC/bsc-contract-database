
// File: contracts/DeFix.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/interfaces.sol";

interface IWBNB {
    function deposit() external payable;
    function withdraw(uint wad) external;
    function transfer(address to, uint value) external returns (bool);
    function approve(address spender, uint value) external returns (bool);
    function balanceOf(address owner) external view returns (uint);
}

abstract contract Uniswap is Ownable {

    IWBNB internal WBNB;
    IUniswapV2Router02 internal router;
    address internal pairAddress;
    address internal routerAddress;
//    address USDTAddress = 0x6B175474E89094C44Da98b954EedeAC495271d0F; //eth mainnet DAI
//    address USDTAddress = 0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735; //rinkebay DAI
    address USDTAddress = 0x55d398326f99059fF775485246999027B3197955; //USDT binance peg

    bool inSwap;
    modifier swapping() {
        inSwap = true;
        _;
        inSwap = false;
    }

    modifier pcsInitialized {
        require(routerAddress != address(0), 'Router address has not been set!');
        require(pairAddress != address(0), 'PCS pair not created yet!');
        _;
    }

    receive() external payable {}

    function initDEXRouter(address _router) public onlyOwner {
        routerAddress = _router;
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);
        pairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(
            address(this),
            _uniswapV2Router.WETH()
        );
        router = _uniswapV2Router;
        emit RouterSet(routerAddress, pairAddress);
    }

    function swapTokensForUsdt(address tokenAddress, uint256 tokenAmount) internal swapping pcsInitialized returns (uint256, uint256) {
        uint256 initialUsdtBalance = IERC20(USDTAddress).balanceOf(address(this));
        uint256 initialTokenBalance;
        uint256 tokenSwapped;
        address[] memory path;
        if (tokenAddress == router.WETH()) {
            initialTokenBalance = IERC20(router.WETH()).balanceOf(address(this));
            swapBnbForTokens(USDTAddress, tokenAmount);
            tokenSwapped = initialTokenBalance - IERC20(router.WETH()).balanceOf(address(this));
        } else {
            path = new address[](3);
            path[0] = tokenAddress;
            path[1] = router.WETH();
            path[2] = USDTAddress;
            initialTokenBalance = IERC20(tokenAddress).balanceOf(address(this));
            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                tokenAmount,
                0,
                path,
                address(this),
                block.timestamp
            );
            tokenSwapped = initialTokenBalance - IERC20(tokenAddress).balanceOf(address(this));
        }
        uint256 usdtReceived = IERC20(USDTAddress).balanceOf(address(this)) - initialUsdtBalance;
        return (usdtReceived, tokenSwapped);
    }

    function swapTokensForBnb(address tokenAddress, uint256 bnbAmount) internal swapping pcsInitialized returns (uint256, uint256) {
        if (tokenAddress == router.WETH()) {
            return (bnbAmount, bnbAmount);
        } else {
            uint256 initialWbnbBalance = WBNB.balanceOf(address(this));
            uint256 initialTokenBalance = IERC20(tokenAddress).balanceOf(address(this));

            address[] memory path = new address[](2);
            path[0] = tokenAddress;
            path[1] = router.WETH();

            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                bnbAmount,
                0,
                path,
                address(this),
                block.timestamp
            );

            uint256 tokenSwapped = initialTokenBalance - IERC20(tokenAddress).balanceOf(address(this));
            uint256 bnbReceived = WBNB.balanceOf(address(this)) - initialWbnbBalance;
            return (bnbReceived, tokenSwapped);
        }
    }

    function swapUsdtForTokens(address tokenAddress, uint256 usdtAmount) internal swapping pcsInitialized returns (uint256) {
        uint256 initialBalance = IERC20(tokenAddress).balanceOf(address(this));

        address[] memory path;
        if (tokenAddress == router.WETH()) {
            path = new address[](2);
            path[0] = USDTAddress;
            path[1] = router.WETH();
        } else {
            path = new address[](3);
            path[0] = USDTAddress;
            path[1] = router.WETH();
            path[2] = tokenAddress;
        }

        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            usdtAmount,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 tokenReceived = IERC20(tokenAddress).balanceOf(address(this)) - initialBalance;
        return tokenReceived;
    }

    function swapBnbForTokens(address tokenAddress, uint256 bnbAmount) internal swapping pcsInitialized returns (uint256) {
        if (tokenAddress == router.WETH()) {
            return bnbAmount;
        } else {
            uint256 initialBalance = IERC20(tokenAddress).balanceOf(address(this));

            address[] memory path = new address[](2);
            path[0] = router.WETH();
            path[1] = tokenAddress;

            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                bnbAmount,
                0,
                path,
                address(this),
                block.timestamp
            );

            uint256 tokenReceived = IERC20(tokenAddress).balanceOf(address(this)) - initialBalance;
            return tokenReceived;
        }
    }

    function calculateTokensPriceInUSDT(address tokenAddress, uint256 tokenAmount) internal view returns (uint256) {
        address[] memory path;
        if (tokenAddress == router.WETH()) {
            path = new address[](2);
            path[0] = router.WETH();
            path[1] = USDTAddress;
            return router.getAmountsOut(tokenAmount, path)[1];
        } else {
            path = new address[](3);
            path[0] = tokenAddress;
            path[1] = router.WETH();
            path[2] = USDTAddress;
            return router.getAmountsOut(tokenAmount, path)[2];
        }
    }

    function calculateTokensPriceInBNB(address tokenAddress, uint256 tokenAmount) internal view returns (uint256) {
        address[] memory path;
        if (tokenAddress == router.WETH()) {
            return tokenAmount;
        } else {
            path = new address[](2);
            path[0] = tokenAddress;
            path[1] = router.WETH();
            return router.getAmountsOut(tokenAmount, path)[1];
        }
    }

    event RouterSet(address indexed router, address indexed pair);
}

interface IDeFiX {

    enum Status {
        CREATED, // Initial status.
        ACTIVE, // When status is active index can't be edited. Money can be invested and withdrawn
        PAUSED, // When status is paused money can't be invested but can be withdrawn
        DELETED // When status is deleted index can not be restored. Money can be withdrawn
    }

    struct Share {
        address tokenAddress;
        uint256 point; // token share
        // (for example: token1 - 10 points, token2 - 5 points. Total: 15 pints. share 10/15 and 5/15 respectively)
    }

    struct Project {
        uint256 id;
        Status status;
        uint256 totalPoints;
        string name;
        string description;
        uint256 totalInvestorsAmount;
        uint256 totalInvestedInUSDT;
        uint256 minInvestInUsdt;
        uint256 minInvestInBnb;
        // Always have to be there at the bottom
        Share[] tokens;
    }

    // Return all indexes besides deleted
    function getProjects() external view returns (
        Project[] memory
    );

    function getProject(uint256 _projectId) external view returns (Project memory);

    function createProject(
        address[] calldata _addrList,
        uint256[] calldata _pointList,
        string calldata _name,
        string calldata _description,
        uint256 _minInvestInUsdt
    ) external returns (Project memory);

    function updateProjectInfo(uint256 _projectId, string calldata _name, string calldata _description) external returns (Project memory); // only if status is CREATED
    function addTokensToProject(uint256 _projectId, address[] calldata _addrList, uint256[] calldata _pointList) external returns (Project memory); // only if status is CREATED
    function removeTokensFromProject(uint256 _projectId, address[] calldata _tokenIds) external returns (Project memory); // only if status is CREATED
    function startProject(uint256 _projectId) external returns (Project memory);

    function deleteProject(uint256 _projectId) external;

    function pauseProject(uint256 _projectId) external;

    struct Investor {
        uint256[] investedIds;
        mapping(uint256 => uint256) investedAmountInUSDT;
        mapping(uint256 => bool) invested;
    }

    function getInvested(address _sender) external view returns (uint256[] memory, uint256[] memory);

    function getProjectIdsByAddress(address _owner) external view returns (uint256[] memory);

    function getProjectsByAddress(address _owner) external view returns (Project[] memory);

    function getWithdrawable(uint256 _projectId, address _sender) external view returns (uint256);

    function investInUsdt(uint256 _projectId, uint256 _amount) external returns (uint256); // {from: account, value: value}
    function investInBnb(uint256 _projectId) external payable returns (uint256); // {from: account, value: value}
    function withdrawInUsdt(uint256 _projectId, uint256 _percent) external returns (uint256);

    function withdrawInBnb(uint256 _projectId, uint256 _percent) external returns (uint256);

    function withdrawAccumulatedUsdt() external returns (uint256);

    function withdrawAccumulatedBnb() external returns (uint256);
}

contract DeFix is IDeFiX, Uniswap {

    uint256 public ownerProfitInBnb;
    uint256 public ownerProfitInUsdt;

    // ProjectId => investor => addressToken => amount
    mapping(uint256 => mapping(address => mapping(address => uint256))) public balanceOf;
    mapping(uint256 => Project) projects;
    uint256 projectCount;
    uint256 deletedCount;
    mapping(address => Investor) investors;

    constructor() {
//        initDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //uniswap
        initDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); //pancake
        IERC20(USDTAddress).approve(address(router), type(uint256).max);
        WBNB = IWBNB(router.WETH());
        WBNB.approve(address(router), type(uint256).max);
    }

    function createProject(
        address[] calldata _addrList,
        uint256[] calldata _pointList,
        string calldata _name,
        string calldata _description,
        uint256 _minInvestInUsdt
    ) external override onlyOwner returns (Project memory) {
        projects[projectCount].id = projectCount;
        projects[projectCount].status = Status.CREATED;
        projects[projectCount].name = _name;
        projects[projectCount].description = _description;
        projects[projectCount].minInvestInUsdt = _minInvestInUsdt;
        projects[projectCount].minInvestInBnb = calculateTokensPriceInBNB(USDTAddress, _minInvestInUsdt);

        uint256 totalPoints;
        for (uint256 i = 0; i < _addrList.length; i++) {
            require(_addrList[i] != USDTAddress, 'USDT can not be added to index');
            projects[projectCount].tokens.push(Share(_addrList[i], _pointList[i]));
            IERC20(_addrList[i]).approve(address(router), type(uint256).max);
            totalPoints += _pointList[i];
        }
        projects[projectCount].totalPoints = totalPoints;

        projectCount++;
        return projects[projectCount];
    }

    function getProjects() external view override returns (
        Project[] memory
    ) {
        Project[] memory result = new Project[](projectCount - deletedCount);
        uint256 j;
        for (uint256 i = 0; i < projectCount; i++) {
            if (projects[i].status != Status.DELETED) {
                result[j] = projects[i];
                j++;
            }
        }
        return result;
    }

    function getProject(uint256 _projectId) external view override returns (Project memory) {
        return projects[_projectId];
    }

    function updateProjectInfo(
        uint256 _projectId,
        string calldata _name,
        string calldata _description
    ) external override onlyOwner returns (Project memory) {
        Project storage project = projects[_projectId];
        project.name = _name;
        project.description = _description;
        return project;
    }

    function addTokensToProject(
        uint256 _projectId,
        address[] calldata _addrList,
        uint256[] calldata _pointList
    ) external override onlyOwner returns (Project memory) {
        Project storage project = projects[_projectId];
        for (uint256 i = 0; i < _addrList.length; i++) {
            project.tokens.push(Share(_addrList[i], _pointList[i]));
        }
        return project;
    }

    function removeTokensFromProject(
        uint256 _projectId,
        address[] calldata _addrList
    ) external override onlyOwner returns (Project memory) {
        Project storage project = projects[_projectId];
        for (uint256 i = 0; i < _addrList.length; i++) {
            for (uint256 j = 0; j < project.tokens.length; j++) {
                if (project.tokens[j].tokenAddress == _addrList[i]) {
                    delete project.tokens[j];
                }
            }
        }
        return project;
    }

    function startProject(uint256 _projectId) external override onlyOwner returns (Project memory) {
        Project storage project = projects[_projectId];
        project.status = Status.ACTIVE;
        return project;
    }

    function deleteProject(uint256 _projectId) external override onlyOwner {
        Project storage project = projects[_projectId];
        project.status = Status.DELETED;
        deletedCount++;
    }

    function pauseProject(uint256 _projectId) external override onlyOwner {
        Project storage project = projects[_projectId];
        project.status = Status.PAUSED;
    }

    function getInvested(address _sender) external view override returns (uint256[] memory, uint256[] memory) {
        Investor storage investor = investors[_sender];
        uint256[] memory investedIds = investor.investedIds;
        uint256[] memory investedAmountInUSDT = new uint256[](investedIds.length);
        for (uint256 i = 0; i < investedIds.length; i++) {
            investedAmountInUSDT[i] = investor.investedAmountInUSDT[investedIds[i]];
        }
        return (investedIds, investedAmountInUSDT);
    }

    function getProjectIdsByAddress(address _owner) external view override returns (uint256[] memory) {
        return investors[_owner].investedIds;
    }

    function getProjectsByAddress(address _owner) external view override returns (Project[] memory) {
        uint256[] memory projectIds = investors[_owner].investedIds;
        Project[] memory result = new Project[](projectIds.length);
        for (uint256 i = 0; i < projectIds.length; i++) {
            result[i] = projects[projectIds[i]];
        }
        return result;
    }

    function investInUsdt(uint256 _projectId, uint256 _amount) external override returns (uint256) {
        require(projects[_projectId].status == Status.ACTIVE, 'This index is not active');
        require(_amount >= projects[_projectId].minInvestInUsdt, 'Amount is less than required value');
        IERC20(USDTAddress).transferFrom(msg.sender, address(this), _amount);

        uint256 currentOwnerProfit = _amount / 100;
        ownerProfitInUsdt += currentOwnerProfit;
        uint256 amountToInvest = _amount - currentOwnerProfit;

        Share[] memory shares = projects[_projectId].tokens;
        uint256 investedInUSDT;
        for (uint256 i = 0; i < shares.length; i++) {
            uint256 usdtForSwap = amountToInvest * shares[i].point / projects[_projectId].totalPoints;
            uint256 tokenReceived = swapUsdtForTokens(shares[i].tokenAddress, usdtForSwap);
            balanceOf[_projectId][msg.sender][shares[i].tokenAddress] += tokenReceived;
            investedInUSDT += calculateTokensPriceInUSDT(shares[i].tokenAddress, tokenReceived);
        }

        Investor storage investor = investors[msg.sender];
        if (!investor.invested[_projectId]) {
            investor.investedIds.push(_projectId);
            investor.invested[_projectId] = true;
            projects[_projectId].totalInvestorsAmount += 1;
        }

        investor.investedAmountInUSDT[_projectId] += investedInUSDT;
        projects[_projectId].totalInvestedInUSDT += investedInUSDT;

        return investedInUSDT;
    }

    function investInBnb(uint256 _projectId) external payable override returns (uint256) {
        require(projects[_projectId].status == Status.ACTIVE, 'Index is not active');
        require(
            calculateTokensPriceInUSDT(router.WETH(), msg.value) >= projects[_projectId].minInvestInUsdt,
            'Value is less than minimum required value'
        );
        WBNB.deposit{value : msg.value}();

        uint256 currentOwnerProfit = msg.value / 100;
        ownerProfitInBnb += currentOwnerProfit;
        uint256 amountToInvest = msg.value - currentOwnerProfit;

        Share[] memory shares = projects[_projectId].tokens;
        uint256 investedInUSDT;
        for (uint256 i = 0; i < shares.length; i++) {
            uint256 bnbToSwap = amountToInvest * shares[i].point / projects[_projectId].totalPoints;
            uint256 tokenReceived = swapBnbForTokens(shares[i].tokenAddress, bnbToSwap);
            balanceOf[_projectId][msg.sender][shares[i].tokenAddress] += tokenReceived;
            investedInUSDT += calculateTokensPriceInUSDT(shares[i].tokenAddress, tokenReceived);
        }

        Investor storage investor = investors[msg.sender];
        if (!investor.invested[_projectId]) {
            investor.investedIds.push(_projectId);
            investor.invested[_projectId] = true;
            projects[_projectId].totalInvestorsAmount += 1;
        }

        investor.investedAmountInUSDT[_projectId] += investedInUSDT;
        projects[_projectId].totalInvestedInUSDT += investedInUSDT;

        return investedInUSDT;
    }

    function getWithdrawable(uint256 _projectId, address _sender) external view override returns (uint256) {
        Share[] memory shares = projects[_projectId].tokens;
        uint256 availableToWithdraw;
        for (uint256 i = 0; i < shares.length; i++) {
            uint256 investedAmount = balanceOf[_projectId][_sender][shares[i].tokenAddress];
            if (investedAmount == 0) continue;
            availableToWithdraw += calculateTokensPriceInUSDT(shares[i].tokenAddress, investedAmount);
        }
        return availableToWithdraw;
    }

    function withdrawInUsdt(uint256 _projectId, uint256 _percent) external override returns (uint256) {
        Status status = projects[_projectId].status;
        require(status == Status.ACTIVE || status == Status.PAUSED, 'Withdrawal is unavailable for this index');
        Share[] memory shares = projects[_projectId].tokens;
        uint256 amountToWithdrawInUSDT;
        for (uint256 i = 0; i < shares.length; i++) {
            uint256 tokensToSell = balanceOf[_projectId][msg.sender][shares[i].tokenAddress] * _percent / 100;
            (uint256 usdtReceived, uint256 tokenSwapped) = swapTokensForUsdt(shares[i].tokenAddress, tokensToSell);
            balanceOf[_projectId][msg.sender][shares[i].tokenAddress] -= tokenSwapped;
            amountToWithdrawInUSDT += usdtReceived;
        }

        uint256 investedAmountInUsdt = investors[msg.sender].investedAmountInUSDT[_projectId];
        uint256 investedAmountInUsdtPercentage = investedAmountInUsdt * _percent / 100;

        updateTotalInvestmentData(_projectId, _percent);

        if (amountToWithdrawInUSDT > investedAmountInUsdtPercentage) {
            uint256 ownerProfit = amountToWithdrawInUSDT / 100;
            ownerProfitInUsdt += ownerProfit;
            amountToWithdrawInUSDT = amountToWithdrawInUSDT - ownerProfit;
        }

        IERC20(USDTAddress).transfer(msg.sender, amountToWithdrawInUSDT);
        return amountToWithdrawInUSDT;
    }

    function withdrawInBnb(uint256 _projectId, uint256 _percent) external override returns (uint256) {
        Status status = projects[_projectId].status;
        require(status == Status.ACTIVE || status == Status.PAUSED, 'Withdrawal is unavailable for this index');
        Share[] memory shares = projects[_projectId].tokens;
        uint256 amountToWithdrawInUSDT;
        uint256 amountToWithdrawnInBNB;
        for (uint256 i = 0; i < shares.length; i++) {
            uint256 tokensToSell = balanceOf[_projectId][msg.sender][shares[i].tokenAddress] * _percent / 100;
            (uint256 bnbReceived, uint256 tokenSwapped) = swapTokensForBnb(shares[i].tokenAddress, tokensToSell);
            balanceOf[_projectId][msg.sender][shares[i].tokenAddress] -= tokenSwapped;
            amountToWithdrawInUSDT += calculateTokensPriceInUSDT(shares[i].tokenAddress, tokenSwapped);
            amountToWithdrawnInBNB += bnbReceived;
        }

        uint256 investedAmountInUsdt = investors[msg.sender].investedAmountInUSDT[_projectId];
        uint256 investedAmountInUsdtPercentage = investedAmountInUsdt * _percent / 100;

        updateTotalInvestmentData(_projectId, _percent);

        uint256 amountToWithdraw;
        if (amountToWithdrawInUSDT > investedAmountInUsdtPercentage) {
            uint256 ownerProfit = amountToWithdrawnInBNB / 100;
            ownerProfitInBnb += ownerProfit;
            amountToWithdraw = amountToWithdrawnInBNB - ownerProfit;
        } else {
            amountToWithdraw = amountToWithdrawnInBNB;
        }

        WBNB.withdraw(amountToWithdraw);
        payable(msg.sender).transfer(amountToWithdraw);
        return amountToWithdrawInUSDT;
    }

    function withdrawAccumulatedBnb() external override onlyOwner returns (uint256) {
        WBNB.withdraw(ownerProfitInBnb);
        payable(msg.sender).transfer(ownerProfitInBnb);
        ownerProfitInBnb = 0;
        return ownerProfitInBnb;
    }

    function withdrawAccumulatedUsdt() external override onlyOwner returns (uint256) {
        IERC20(USDTAddress).transfer(msg.sender, ownerProfitInUsdt);
        ownerProfitInUsdt = 0;
        return ownerProfitInUsdt;
    }

    function updateTotalInvestmentData(uint256 _projectId, uint256 _percent) internal {
        Investor storage investor = investors[msg.sender];
        uint256 amountToSubtractFromTotalInvestment;
        if (_percent == 100) {
            amountToSubtractFromTotalInvestment = investor.investedAmountInUSDT[_projectId];
            investor.investedAmountInUSDT[_projectId] = 0;
        } else {
            amountToSubtractFromTotalInvestment = investor.investedAmountInUSDT[_projectId] * _percent / 100;
        }

        if (amountToSubtractFromTotalInvestment > investor.investedAmountInUSDT[_projectId]) {
            investor.investedAmountInUSDT[_projectId] = 0;
        } else {
            investor.investedAmountInUSDT[_projectId] -= amountToSubtractFromTotalInvestment;
        }
        if (amountToSubtractFromTotalInvestment > projects[_projectId].totalInvestedInUSDT) {
            projects[_projectId].totalInvestedInUSDT = 0;
        } else {
            projects[_projectId].totalInvestedInUSDT -= amountToSubtractFromTotalInvestment;
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: contracts/interfaces/interfaces.sol
//SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

