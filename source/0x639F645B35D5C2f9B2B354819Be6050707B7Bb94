// SPDX-License-Identifier: MIT

/*
 ???????? ??????????? ?????? ???? ℂ??????? ??? ???????ℝ? ℂ??????????
 ???????: https://tteb.finance
 ????????: https://t.me/TTEBfinance
 ????????: https://fb.me/TTEBfinance 
 ??????: https://ttebfinance.medium.com
 ???ℍ??: https://github.com/TTEB-finance
*/


pragma solidity ^0.8.13; // solhint-disable-line

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
    * @dev Initializes the contract setting the deployer as the initial owner.
    */
    constructor () {
      address msgSender = _msgSender();
      _owner = msgSender;
      emit OwnershipTransferred(address(0), msgSender);
    }

    /**
    * @dev Returns the address of the current owner.
    */
    function owner() public view returns (address) {
      return _owner;
    }

    
    modifier onlyOwner() {
      require(_owner == _msgSender(), "Ownable: caller is not the owner");
      _;
    }

    function renounceOwnership() public onlyOwner {
      emit OwnershipTransferred(_owner, address(0));
      _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
      _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
      require(newOwner != address(0), "Ownable: new owner is the zero address");
      emit OwnershipTransferred(_owner, newOwner);
      _owner = newOwner;
    }
}


contract LamborghiniDriver is Context, Ownable {
	using SafeMath for uint256;
    
    address LAMBO = 0xd83a832AD7202612FA53E0317DF685A5Df7cA8b8;
    uint256 private INCOME_TO_EARN_1=1440000;
    uint256 private PSN=10000;
    uint256 private PSNH=5000;
    bool private initialized=false;
    address payable private ceoAddress;
    address payable private ceoAddress1;
    address payable private ceoAddress2;
    mapping (address => uint256) private sellIncomeToLAMBO;
    mapping (address => uint256) private claimedIncome;
    mapping (address => uint256) private lastClaim;
    mapping (address => address) private referrals;
    uint256 private marketIncome;
	
    constructor() {
        ceoAddress = payable(msg.sender);
        ceoAddress1 = payable(0xC6AE4a8afF887FeA80e8dB9D7bbb97F164e1Fdf3);
        ceoAddress2 = payable(0xfFe31D2fc0D8452B863743CeeE321E7Cc734E4F2);
    }
	
    function reInvestIncome(address ref) public {
        require(initialized);
        if(ref == msg.sender) {
            ref = address(0);
        }
        if(referrals[msg.sender]==address(0) && referrals[msg.sender]!=msg.sender) {
            referrals[msg.sender]=ref;
        }
        uint256 incomeUsed=getMyIncome(msg.sender);
        uint256 newPrinters=SafeMath.div(incomeUsed,INCOME_TO_EARN_1);
        sellIncomeToLAMBO[msg.sender]=SafeMath.add(sellIncomeToLAMBO[msg.sender],newPrinters);
        claimedIncome[msg.sender]=0;
        lastClaim[msg.sender]=block.timestamp;
		
        //send referral income
        claimedIncome[referrals[msg.sender]]=SafeMath.add(claimedIncome[referrals[msg.sender]],SafeMath.div(incomeUsed,10));
		

        marketIncome=SafeMath.add(marketIncome,SafeMath.div(incomeUsed,5));
    }

receive() external payable {}

    function sellLamborghini() public {
        require(initialized);
        uint256 hasIncome=getMyIncome(msg.sender);
        uint256 incomeValue=calculateMoneyClaim(hasIncome);
        uint256 fee=devFee(incomeValue);
        uint256 fee2=fee/3;
        claimedIncome[msg.sender]=0;
        lastClaim[msg.sender]=block.timestamp;
        marketIncome=SafeMath.add(marketIncome,hasIncome);
        IBEP20(LAMBO).transfer(ceoAddress, fee2);
        IBEP20(LAMBO).transfer(ceoAddress1, fee2);
        IBEP20(LAMBO).transfer(ceoAddress2, fee2);
        IBEP20(LAMBO).transfer(address(msg.sender), SafeMath.sub(incomeValue,fee));
    }
    function buyDriver(address ref, uint256 amount) public {
        require(initialized);
    
        IBEP20(LAMBO).transferFrom(address(msg.sender), address(this), amount);
        
        uint256 balance = IBEP20(LAMBO).balanceOf(address(this));
        uint256 driverBought=calculatePrinterBuy(amount,SafeMath.sub(balance,amount));
        driverBought=SafeMath.sub(driverBought,devFee(driverBought));
        uint256 fee=devFee(amount);
        uint256 fee2=fee/5;
        IBEP20(LAMBO).transfer(ceoAddress, fee2);
        IBEP20(LAMBO).transfer(ceoAddress1, fee2);
        IBEP20(LAMBO).transfer(ceoAddress2, fee2);
        claimedIncome[msg.sender]=SafeMath.add(claimedIncome[msg.sender],driverBought);
        reInvestIncome(ref);
    }
	
    //magic happens here
    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {
        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));
    }
    function calculateMoneyClaim(uint256 income) public view returns(uint256) {
        return calculateTrade(income,marketIncome,IBEP20(LAMBO).balanceOf(address(this)));
    }
    function calculatePrinterBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {
        return calculateTrade(eth,contractBalance,marketIncome);
    }
    function calculatePrinterBuySimple(uint256 eth) public view returns(uint256){
        return calculatePrinterBuy(eth,IBEP20(LAMBO).balanceOf(address(this)));
    }
    function devFee(uint256 amount) public pure returns(uint256){
        return SafeMath.div(SafeMath.mul(amount,5),100);
    }
    function seedMarket(uint256 amount) public onlyOwner {
    
        require(marketIncome==0);
        IBEP20(LAMBO).transferFrom(address(msg.sender), address(this), amount);
        initialized=true;
        marketIncome=144000000000;
    }

    function getBalance() public view returns(uint256) {
        return IBEP20(LAMBO).balanceOf(address(this));
    }

    function getMyDrivers() public view returns(uint256) {
        return sellIncomeToLAMBO[msg.sender];
    }
    function getMyIncome(address adr) public view returns(uint256) {
        return SafeMath.add(claimedIncome[adr],getIncomeSinceLastBuy(msg.sender));
    }
    function getIncomeSinceLastBuy(address adr) public view returns(uint256) {
        uint256 secondsPassed=min(INCOME_TO_EARN_1,SafeMath.sub(block.timestamp,lastClaim[adr]));
        return SafeMath.mul(secondsPassed,sellIncomeToLAMBO[adr]);
    }
    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return a < b ? a : b;
    }
	function withdraw() public onlyOwner {
	    require(msg.sender == ceoAddress, "Only CEO can call this funtion");
         require(address(this).balance > 0, 'Contract has no money');
         address payable wallet = payable(msg.sender);
        wallet.transfer(address(this).balance);    
    }   
    function recoverTokens(IBEP20 tokenAddress)  public onlyOwner {
		require(msg.sender == ceoAddress, "Only CEO can call this funtion");
        IBEP20 tokenBEP = tokenAddress;
        require(tokenAddress != IBEP20(LAMBO), "Cannot withdraw $LAMBO token");
        uint256 tokenAmt = tokenBEP.balanceOf(address(this));
        require(tokenAmt > 0, 'BEP-20 balance is 0');
        address wallet = (msg.sender);
        tokenBEP.transfer(wallet, tokenAmt);
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}