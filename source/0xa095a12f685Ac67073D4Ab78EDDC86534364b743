
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/PRT.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Context.sol";

contract PRT is IERC20, IERC20Metadata, Context, Ownable {
    /**
    * @notice Variables that are needed to operate everything
    */
    uint private _totalSupply = 1000000000000000;
    uint8 private _decimals = 6;
    string private _symbol = "PRT";
    string private _name = "Prata";

    /**
    * @notice _balances is a mapping that contains a address as KEY 
    * and the balance of the address as the value
    */
    mapping (address => uint256) private _balances;

    /**
    * @notice _allowances is used to manage and control allownace
    * An allowance is the right to use another accounts balance, or part of it
    */
    mapping (address => mapping (address => uint256)) private _allowances;

    /**
    * @notice constructor will be triggered when we create the Smart contract
    */
    constructor() {
        // Add all the tokens created to the creator of the token
        _balances[msg.sender] = _totalSupply;

        // Emit an Transfer event to notify the blockchain that an Transfer has occured
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    /**
    * @notice decimals will return the number of decimal precision the Token is deployed with
    */
    function decimals() external view returns (uint8) {
        return _decimals;
    }

    /**
    * @notice symbol will return the Token's symbol 
    */
    function symbol() external view returns (string memory){
        return _symbol;
    }

    /**
    * @notice name will return the Token's symbol 
    */
    function name() external view returns (string memory){
        return _name;
    }

    /**
    * @notice totalSupply will return the tokens total supply of tokens
    */
    function totalSupply() external view returns (uint256){
        return _totalSupply;
    }

    /**
    * @notice balanceOf will return the account balance for the given account
    */
    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    /**
    * @notice _mint will create tokens on the address inputted and then increase the total supply
    *
    * It will also emit an Transfer event, with sender set to zero address (adress(0))
    * 
    * Requires that the address that is recieveing the tokens is not zero address
    */
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "Cannot mint to zero address");

        // Increase total supply
        _totalSupply = _totalSupply + (amount);

        // Add amount to the account balance using the balance mapping
        _balances[account] = _balances[account] + amount;

        // Emit our event to log the action
        emit Transfer(address(0), account, amount);
    }

    /**
    * @notice _burn will destroy tokens from an address inputted and then decrease total supply
    * An Transfer event will emit with receiever set to zero address
    * 
    * Requires 
    * - Account cannot be zero
    * - Account balance has to be bigger or equal to amount
    */
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "Cannot burn from zero address");
        require(_balances[account] >= amount, "Cannot burn more than the account owns");

        // Remove the amount from the account balance
        _balances[account] = _balances[account] - amount;

        // Decrease totalSupply
        _totalSupply = _totalSupply - amount;

        // Emit event, use zero address as reciever
        emit Transfer(account, address(0), amount);
    }

    /**
    * @notice burn is used to destroy tokens on an address
    * 
    * See {_burn}
    * Requires
    *   - msg.sender must be the token owner
    *
    */
    function burn(address account, uint256 amount) public onlyOwner returns(bool) {
        _burn(account, amount);
        return true;
    }

    /**
    * @notice mint is used to create tokens and assign them to msg.sender
    * 
    * See {_mint}
    * Requires
    *   - msg.sender must be the token owner
    *
    */
    function mint(address account, uint256 amount) public onlyOwner returns(bool){
        _mint(account, amount);
        return true;
    }

    /**
    * @notice transfer is used to transfer funds from the sender to the recipient
    * This function is only callable from outside the contract. For internal usage see 
    * _transfer
    *
    * Requires
    * - Caller cannot be zero
    * - Caller must have a balance = or bigger than amount
    *
    */
    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    /**
    * @notice _transfer is used for internal transfers
    * 
    * Events
    * - Transfer
    * 
    * Requires
    *  - Sender cannot be zero
    *  - recipient cannot be zero 
    *  - sender balance most be = or bigger than amount
    */
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from zero address");
        require(recipient != address(0), "Transfer to zero address");
        require(_balances[sender] >= amount, "Canno transfer more than your account holds");

        _balances[sender] = _balances[sender] - amount;
        _balances[recipient] = _balances[recipient] + amount;

        emit Transfer(sender, recipient, amount);
    }

    /**
    * @notice getOwner just calls Ownables owner function. 
    * returns owner of the token
    */
    function getOwner() external view returns (address) {
        return owner();
    }

    /**
    * @notice allowance is used view how much allowance an spender has
    */
    function allowance(address owner, address spender) external view returns(uint256){
        return _allowances[owner][spender];
    }

    /**
    * @notice approve will use the senders address and allow the spender to use X amount of tokens on his behalf
    */
    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    /**
    * @notice _approve is used to add a new Spender to a Owners account
    * 
    * Events
    *   - {Approval}
    * 
    * Requires
    *   - owner and spender cannot be zero address
        */
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve cannot be done from zero address");
        require(spender != address(0), "Approve cannot be to zero address");
        // Set the allowance of the spender address at the Owner mapping over accounts to the amount
        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);
    }

    /**
    * @notice transferFrom is uesd to transfer Tokens from a Accounts allowance
    * Spender address should be the token holder
    *
    * Requires
    *   - The caller must have a allowance = or bigger than the amount spending
     */
    function transferFrom(address spender, address recipient, uint256 amount) external returns(bool){
        // Make sure spender is allowed the amount 
        require(_allowances[spender][msg.sender] >= amount, "Cannot spend that much on this account");
        
        // Transfer first
        _transfer(spender, recipient, amount);
        
        // Reduce current allowance so a user cannot respend
        _approve(spender, msg.sender, _allowances[spender][msg.sender] - amount);

        return true;
    }

    /**
    * @notice increaseAllowance
    * Adds allowance to a account from the function caller address
    */
    function increaseAllowance(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender]+amount);
        return true;
    }

    /**
    * @notice decreaseAllowance
    * Decrease the allowance on the account inputted from the caller address
    */
    function decreaseAllowance(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender]-amount);
        return true;
    }
}




