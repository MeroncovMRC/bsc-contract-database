// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract DrPepe is IBEP20 {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 private _totalSupply;
    uint256 public taxRate;
    address public taxWallet;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    constructor() {
        name = "DrPepe";
        symbol = "DrPep";
        decimals = 18;
        _totalSupply = 10000000000 * 10**uint256(decimals);
        taxRate = 5; // 5% tax rate
        taxWallet = address(0xf079E4F5e2eCEE2D52C1AADA887530eCD18f446F);
        balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        require(amount > 0, "Amount must be greater than zero");
        require(amount <= balances[msg.sender], "Insufficient balance");

        uint256 taxAmount = (amount * taxRate) / 100;
        uint256 transferAmount = amount - taxAmount;

        balances[msg.sender] -= amount;
        balances[recipient] += transferAmount;
        balances[taxWallet] += taxAmount;

        emit Transfer(msg.sender, recipient, transferAmount);
        emit Transfer(msg.sender, taxWallet, taxAmount);

        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
    require(amount > 0, "Amount must be greater than zero");
    require(amount <= balances[sender], "Insufficient balance");
    require(amount <= allowances[sender][msg.sender], "Insufficient allowance");

    uint256 taxAmount = (amount * taxRate) / 100;
    uint256 transferAmount = amount - taxAmount;

    balances[sender] -= amount;
    balances[recipient] += transferAmount;
    balances[taxWallet] += taxAmount;
    allowances[sender][msg.sender] -= amount;

    emit Transfer(sender, recipient, transferAmount);
    emit Transfer(sender, taxWallet, taxAmount);

    return true;
}
}