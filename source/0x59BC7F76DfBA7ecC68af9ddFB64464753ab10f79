// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

/**
 * @dev Implementation of the Kunci staking
 */
contract KunciStake is Context, Ownable {
    mapping(address => uint256) private _amounts;
    mapping(address => uint8) private _periods;

    address private _token;
    address private _refund;

    event Start(address indexed account, uint256 amount, uint8 period);
    event Stop(address indexed account, uint256 amount, uint8 period);

    /**
     * @dev Sets the values for {token} and {refund}.
     */
    constructor(address token, address refund) {
        _token = token;
        _refund = refund;
    }

    /**
     * @dev Set the values for {token}.
     */
    function setToken(address token) public onlyOwner {
        _token = token;
    }

    /**
     * @dev Set the values for {refund}.
     */
    function setRefund(address refund) public onlyOwner {
        _refund = refund;
    }

    /**
     * @dev Withdraw the having token
     */
    function forceWithdraw() public onlyOwner {
        transfer(_refund, balanceOf(address(this)));
    }

    /**
     * @dev Returns the account balance.
     */
    function balanceOf(address account) private view returns (uint256) {
        IERC20 _erc20 = IERC20(_token);
        return _erc20.balanceOf(account);
    }

    /**
     * @dev Returns the staking amount.
     */
    function amountOf(address account) public view returns (uint256) {
        return _amounts[account];
    }

    /**
     * @dev Returns the staking period.
     */
    function periodOf(address account) public view returns (uint8) {
        return _periods[account];
    }

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     */
    function transfer(address recipient, uint256 amount) public onlyOwner returns (bool) {
        IERC20 _erc20 = IERC20(_token);
        return _erc20.transfer(recipient, amount);
    }

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        IERC20 _erc20 = IERC20(_token);
        return _erc20.transferFrom(sender, recipient, amount);
    }

    /**
     * @dev Start staking
     *
     * Emits a {Start} event.
     */
    function start(address account, uint256 amount, uint8 period) public onlyOwner {
        require(amount > 0, "invalid amount");
        require(period > 0, "invalid period");
        require(_amounts[account] == 0, "already started");
        require(balanceOf(address(this)) >= amount, "insufficient balance");

        _amounts[account] = amount;
        _periods[account] = period;

        require(transfer(account, amount), "transfer failed");

        emit Start(account, amount, period);
    }

    /**
     * @dev Stop staking
     *
     * Emits a {Stop} event.
     */
    function stop(address account) public onlyOwner {
        require(_amounts[account] > 0, "already stopped");
        require(account.balance > 0, "insufficient balance");
        require(balanceOf(account) > 0, "insufficient balance");

        uint256 amount = _amounts[account];
        uint8 period = _periods[account];

        _amounts[account] = 0;
        _periods[account] = 0;

        require(transferFrom(account, address(this), amount), "transfer failed");

        emit Stop(account, amount, period);
    }
}