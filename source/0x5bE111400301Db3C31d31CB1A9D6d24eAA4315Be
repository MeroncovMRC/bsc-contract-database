// SPDX-License-Identifier: MIT

pragma solidity ^0.8.1;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        return msg.data;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: weiValue}(
            data
        );
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract ZionConverter is Ownable {
    using Address for address;

    mapping(address => mapping(address => bool)) public isConvertablePair;
    mapping(address => address) public convertPairs;
    bool public isConvertableNow;

    mapping(address => mapping(address => mapping(address => uint256))) public userConvertedAmount;

    constructor() {
        isConvertableNow = false;
    }

    function setConvertablePairStatus(address srcToken, address dstToken, bool status) external onlyOwner {
        require(srcToken != address(0) && dstToken != address(0), "invalid pair");
        isConvertablePair[srcToken][dstToken] = status;
        convertPairs[srcToken] = dstToken;
    }

    function setConvertableStatus(bool status) external onlyOwner {
        isConvertableNow = status;
    }

    function convertToken(address srcToken, address dstToken, uint256 srcAmount) public {
        require(isConvertableNow, "convert not allowed now");
        require(isConvertablePair[srcToken][dstToken], "unavailable pair");
        require(srcAmount > 0, "invalid amount");
        uint256 orgBalance = IERC20(srcToken).balanceOf(address(this));
        IERC20(srcToken).transferFrom(msg.sender, address(this), srcAmount);
        uint256 newBalance = IERC20(srcToken).balanceOf(address(this));
        uint256 dstbalance = IERC20(dstToken).balanceOf(address(this));
        if ((newBalance - orgBalance) > 0) {
            require(dstbalance >= (newBalance - orgBalance), "insufficient dst token balance");
            IERC20(dstToken).transfer(msg.sender, newBalance - orgBalance);
            userConvertedAmount[_msgSender()][srcToken][dstToken] += (newBalance - orgBalance);
        }        
    }

    function withdrawETH(uint256 amountPercentage) external onlyOwner {
        require(amountPercentage <= 100);
        uint256 amountETH = address(this).balance;
        payable(msg.sender).transfer(
            (amountETH * (amountPercentage)) / (100)
        );
    }

    function withdrawToken(address token, address to) external onlyOwner {
        require(token != address(0), "invalid token");
        require(to != address(0), "invalid address");
        uint256 tokenBalance = IERC20(token).balanceOf(address(this));
        if (tokenBalance > 0) {
            IERC20(token).transfer(to, tokenBalance);
        }        
    }
}