
// File: contracts/common/IBEP20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the BEP standard.
 */
interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: contracts/WolfToken.sol
// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "./common/Ownable.sol";
import "./common/IBEP20.sol";
import "./common/IPancakeswapV2Factory.sol";
import "./common/IPancakeswapV2Router02.sol";
import "./IWolfPool.sol";
import "./IWolfTokenGuard.sol";

contract WolfToken is Context, IBEP20, Ownable {
    using SafeMath for uint256;

    uint256 private _tTotal = 100 * 10**6 * 10**18;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) private _isExcludedFromFee;

    IWolfPool public bnbPoolAddress;

    string private _name = "WerewolvesToken";
    string private _symbol = "WOLF";
    uint8 private _decimals = 18;

    uint256 public bnbArenaRewardsPoolFee = 2;
    uint256 private _previousBNBArenaRewardsPoolFee = bnbArenaRewardsPoolFee;

    uint256 public bnbRegularRewardsPoolFee = 10;
    uint256 private _previousBNBRegularRewardsPoolFee = bnbRegularRewardsPoolFee;

    uint256 public _liquidityFee = 1;
    uint256 private _previousLiquidityFee = _liquidityFee;

    uint256 public _teamFee = 2;
    uint256 private _previousTeamFee = _teamFee;

    uint256 public _maxTxAmount = 2 * 10**5 * 10**18;

    uint256 private numTokensToSwap = 3 * 10**3 * 10**18;

    uint256 public swapCoolDownTime = 20;

    uint256 private lastSwapTime;

    address public teamFeePoolAddress;
    address public wolfTokenGuard;

    IPancakeswapV2Router02 public pancakeswapV2Router;
    address public pancakeswapV2Pair;

    bool public swapAndLiquifyEnabled = true;
    bool public presaleEnded = false;

    bool private inSwap;

    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);
    event ExcludedFromFee(address account);
    event IncludedToFee(address account);
    event UpdateFees(uint256 regularFee, uint256 arenaFee, uint256 liquidityFee, uint256 teamFee);
    event UpdatedMaxTxAmount(uint256 maxTxAmount);
    event UpdateNumtokensToSwap(uint256 amount);
    event UpdateBNBPoolAddress(address account);
    event UpdateTeamPoolAddress(address account);
    event SwapAndCharged(uint256 token, uint256 liquidAmount, uint256 teamAmount, uint256 bnbPool, uint256 bnbLiquidity);
    event UpdatedCoolDowntime(uint256 timeForContract);

    modifier lockTheSwap() {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor() {
        // Test Net
        // IPancakeswapV2Router02 _pancakeswapV2Router = IPancakeswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);

        // Mian Net
        IPancakeswapV2Router02 _pancakeswapV2Router = IPancakeswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);

        pancakeswapV2Pair = IPancakeswapV2Factory(_pancakeswapV2Router.factory()).createPair(address(this), _pancakeswapV2Router.WETH());
        pancakeswapV2Router = _pancakeswapV2Router;

        //exclude owner and this contract from fee
        _isExcludedFromFee[_msgSender()] = true;
        _isExcludedFromFee[address(this)] = true;
        _balances[_msgSender()] = _tTotal;
        emit Transfer(address(0), owner(), _tTotal);
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() external view override returns (uint256) {
        return _tTotal;
    }

    function getOwner() external view override returns (address) {
        return owner();
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }

    function setBNBPoolAddress(address account) external onlyOwner {
        bnbPoolAddress = IWolfPool(account);
        emit UpdateBNBPoolAddress(account);
    }

    function setTeamPoolAddress(address account) external onlyOwner {
        require(account != teamFeePoolAddress, "This address was already used");
        teamFeePoolAddress = account;
        _isExcludedFromFee[account] = true;
        emit UpdateTeamPoolAddress(account);
    }

    function setWolfTokenGuard(address account) external onlyOwner {
        wolfTokenGuard = account;
    }

    function setCoolDownTime(uint256 timeForContract) external onlyOwner {
        require(swapCoolDownTime != timeForContract);
        swapCoolDownTime = timeForContract;
        emit UpdatedCoolDowntime(timeForContract);
    }

    function updatePresaleStatus(bool status) external onlyOwner {
        presaleEnded = status;
    }

    function excludeFromFee(address account) external onlyOwner {
        _isExcludedFromFee[account] = true;
        emit ExcludedFromFee(account);
    }

    function includeInFee(address account) external onlyOwner {
        _isExcludedFromFee[account] = false;
        emit IncludedToFee(account);
    }

    function setFees(
        uint256 arenaFee,
        uint256 regularFee,
        uint256 liquidityFee,
        uint256 teamFee
    ) external onlyOwner {
        require(bnbArenaRewardsPoolFee != arenaFee || bnbRegularRewardsPoolFee != regularFee || _liquidityFee != liquidityFee || _teamFee != teamFee);
        bnbArenaRewardsPoolFee = arenaFee;
        bnbRegularRewardsPoolFee = regularFee;
        _liquidityFee = liquidityFee;
        _teamFee = teamFee;
        emit UpdateFees(regularFee, arenaFee, liquidityFee, teamFee);
    }

    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {
        _maxTxAmount = maxTxAmount;
        emit UpdatedMaxTxAmount(maxTxAmount);
    }

    function setNumTokensToSwap(uint256 amount) external onlyOwner {
        require(numTokensToSwap != amount);
        numTokensToSwap = amount;
        emit UpdateNumtokensToSwap(amount);
    }

    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }

    receive() external payable {}

    function removeAllFee() private {
        if (bnbArenaRewardsPoolFee == 0 && _liquidityFee == 0 && _teamFee == 0 && bnbRegularRewardsPoolFee == 0) return;

        _previousBNBRegularRewardsPoolFee = bnbRegularRewardsPoolFee;
        _previousBNBArenaRewardsPoolFee = bnbArenaRewardsPoolFee;
        _previousLiquidityFee = _liquidityFee;
        _previousTeamFee = _teamFee;

        bnbRegularRewardsPoolFee = 0;
        bnbArenaRewardsPoolFee = 0;
        _liquidityFee = 0;
        _teamFee = 0;
    }

    function restoreAllFee() private {
        bnbRegularRewardsPoolFee = _previousBNBRegularRewardsPoolFee;
        bnbArenaRewardsPoolFee = _previousBNBArenaRewardsPoolFee;
        _liquidityFee = _previousLiquidityFee;
        _teamFee = _previousTeamFee;
    }

    function isExcludedFromFee(address account) external view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "BEP20: transfer from the zero address");
        require(to != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        if (wolfTokenGuard != address(0)) {
            IWolfTokenGuard(wolfTokenGuard).protect(from, to, amount);
        }

        if (to == pancakeswapV2Pair && balanceOf(pancakeswapV2Pair) == 0) {
            require(presaleEnded == true, "You are not allowed to add liquidity before presale is ended");
        }

        if (
            (!_isExcludedFromFee[from]) &&
            !_isExcludedFromFee[to] &&
            balanceOf(pancakeswapV2Pair) > 0 &&
            !inSwap &&
            (from != address(pancakeswapV2Router)) &&
            (from == pancakeswapV2Pair || to == pancakeswapV2Pair)
        ) {
            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
        }

        uint256 tokenBalance = balanceOf(address(this));

        if (tokenBalance >= _maxTxAmount) {
            tokenBalance = _maxTxAmount;
        }

        bool overMinTokenBalance = tokenBalance >= numTokensToSwap;

        if (overMinTokenBalance && !inSwap && from != pancakeswapV2Pair && swapAndLiquifyEnabled && block.timestamp >= lastSwapTime + swapCoolDownTime) {
            tokenBalance = numTokensToSwap;
            swapAndCharge(tokenBalance);
            lastSwapTime = block.timestamp;
        }

        bool takeFee = false;
        if (balanceOf(pancakeswapV2Pair) > 0 && (from == pancakeswapV2Pair || to == pancakeswapV2Pair)) {
            takeFee = true;
        }

        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }

        _tokenTransfer(from, to, amount, takeFee);
    }

    function swapAndCharge(uint256 tokenBalance) private lockTheSwap {
        uint256 initialBNBBalance = address(this).balance;

        uint256 totalFee = _liquidityFee + bnbArenaRewardsPoolFee + bnbRegularRewardsPoolFee + _teamFee;

        uint256 tokenForTeam = tokenBalance.mul(_teamFee).div(totalFee);

        _tokenTransfer(address(this), teamFeePoolAddress, tokenForTeam, false);

        uint256 tokenForLiquid = tokenBalance.mul(_liquidityFee).div(totalFee).div(2);

        tokenBalance = tokenBalance.sub(tokenForLiquid).sub(tokenForTeam);

        swapTokensForEth(tokenBalance);

        uint256 newBNBBalance = address(this).balance.sub(initialBNBBalance);

        uint256 bnbForLiquid = newBNBBalance.mul(tokenForLiquid).div(tokenBalance);

        addLiquidity(tokenForLiquid, bnbForLiquid);

        address payable pool = payable(address(bnbPoolAddress));
        (bool success, ) = pool.call{value: address(this).balance}(
            abi.encodeWithSignature("chargeBNB(uint256,uint256,uint256)", address(this).balance, bnbRegularRewardsPoolFee, bnbArenaRewardsPoolFee)
        );
        require(success == true, "Transfer failed.");
        emit SwapAndCharged(tokenBalance, tokenForLiquid, tokenForTeam, address(this).balance, bnbForLiquid);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = pancakeswapV2Router.WETH();

        _approve(address(this), address(pancakeswapV2Router), tokenAmount);

        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(pancakeswapV2Router), tokenAmount);

        pancakeswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner(),
            block.timestamp
        );
    }

    function _getFeeValues(uint256 tAmount) private view returns (uint256) {
        uint256 fee = tAmount.mul(bnbArenaRewardsPoolFee + bnbRegularRewardsPoolFee + _liquidityFee + _teamFee).div(10**2);
        uint256 transferAmount = tAmount.sub(fee);
        return transferAmount;
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 amount,
        bool takeFee
    ) private {
        if (!takeFee) {
            removeAllFee();
        }

        uint256 transferAmount = _getFeeValues(amount);

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(transferAmount);

        uint256 feeAmount = amount.sub(transferAmount);
        if (feeAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(feeAmount);
            emit Transfer(sender, address(this), feeAmount);
        }

        emit Transfer(sender, recipient, transferAmount);

        if (!takeFee) {
            restoreAllFee();
        }
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/common/Ownable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Context.sol";

abstract contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        _previousOwner = _owner;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function getUnlockTime() public view returns (uint256) {
        return _lockTime;
    }

    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = block.timestamp + time;
        emit OwnershipTransferred(_owner, address(0));
    }

    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(block.timestamp > _lockTime, "Contract is locked until 0 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}


// File: contracts/common/IPancakeswapV2Factory.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IPancakeswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}


// File: contracts/common/IPancakeswapV2Router02.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IPancakeswapV2Router01.sol";

interface IPancakeswapV2Router02 is IPancakeswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}


// File: contracts/IWolfPool.sol
// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.0;

interface IWolfPool {
    function refreshRegularSeasonRewardsBNB(uint256 seasonId) external;

    function refreshArenaSeasonRewardsBNB(uint256 seasonId) external;

    function claimRegularBNB(address account, uint256 amount) external;

    function claimArenaBNB(address account, uint256 amount) external;

    function chargeBNB(
        uint256 amount,
        uint256 regularRate,
        uint256 arenaRate
    ) external payable returns (bool);

    function getRegularSeasonRewardsBNB(uint256 seasonId) external view returns (uint256);

    function getArenaSeasonRewardsBNB(uint256 seasonId) external view returns (uint256);

    function getRegularRewardsBNB() external view returns (uint256);

    function getArenaRewardsBNB() external view returns (uint256);
}


// File: contracts/IWolfTokenGuard.sol
// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.0;

interface IWolfTokenGuard {
    function protect(
        address sender,
        address receiver,
        uint256 amount
    ) external view;
}


// File: contracts/common/IPancakeswapV2Router01.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IPancakeswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
}


// File: contracts/WolfPool.sol
// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

import "./common/Ownable.sol";
import "./IWolfPool.sol";
import "./IWolfPoolGuard.sol";

contract WolfPool is Context, IWolfPool, Ownable {
    using SafeMath for uint256;

    string public name;

    uint256 private constant POOL_TYPE_ARENA = 2;
    uint256 private constant POOL_TYPE_REGULAR = 1;

    mapping(address => mapping(uint256 => bool)) private _claimAllowed;

    mapping(uint256 => uint256) private _poolTypeBalances;
    mapping(uint256 => uint256) private _poolTypeSeasonDivides;

    mapping(uint256 => uint256) private _regularPoolSeasonBalances;
    mapping(uint256 => uint256) private _arenaPoolSeasonBalances;

    address public wolfPoolGuard;
    event UpdatedClaimAllower(address account, uint256 poolType, bool status);
    event UpdatedPoolSeasonDivide(uint256 poolType, uint256 divide);

    constructor() {
        name = "WolfPool";
        _poolTypeSeasonDivides[POOL_TYPE_ARENA] = 4;
        _poolTypeSeasonDivides[POOL_TYPE_REGULAR] = 15;
    }

    receive() external payable {}

    function setClaimAllower(
        address account,
        uint256 poolType,
        bool status
    ) external onlyOwner {
        _claimAllowed[account][poolType] = status;
        emit UpdatedClaimAllower(account, poolType, status);
    }

    function setPoolBalancesDivide(uint256 poolType, uint256 divide) external onlyOwner {
        require(divide >= 1, "Divide must be greater than one");
        _poolTypeSeasonDivides[poolType] = divide;
        emit UpdatedPoolSeasonDivide(poolType, divide);
    }

    function setWolfPoolGuard(address account) external onlyOwner {
        wolfPoolGuard = account;
    }

    function claimRegularBNB(address account, uint256 amount) external override {
        _claimBNB(POOL_TYPE_REGULAR, account, amount);
    }

    function claimArenaBNB(address account, uint256 amount) external override {
        _claimBNB(POOL_TYPE_ARENA, account, amount);
    }

    function _claimBNB(
        uint256 poolType,
        address account,
        uint256 amount
    ) internal {
        if (wolfPoolGuard != address(0)) {
            IWolfPoolGuard(wolfPoolGuard).protectClaim(poolType, account, amount);
        }

        require(_claimAllowed[_msgSender()][poolType], "Not allowed");
        require(amount <= _poolTypeBalances[poolType], "Amount is exceeded");
        require(amount <= address(this).balance, "Amount is exceeded");

        _poolTypeBalances[poolType] = _poolTypeBalances[poolType].sub(amount);
        payable(account).transfer(amount);
    }

    function chargeBNB(
        uint256 amount,
        uint256 regularRate,
        uint256 arenaRate
    ) external payable override returns (bool) {
        require(amount == msg.value, "Amount is error");
        uint256 arenaAmount = amount.mul(arenaRate).div(regularRate + arenaRate);
        _poolTypeBalances[POOL_TYPE_ARENA] = _poolTypeBalances[POOL_TYPE_ARENA].add(arenaAmount);

        _poolTypeBalances[POOL_TYPE_REGULAR] = _poolTypeBalances[POOL_TYPE_REGULAR].add(amount.sub(arenaAmount));
        return true;
    }

    function refreshRegularSeasonRewardsBNB(uint256 seasonId) external override {
        require(_claimAllowed[_msgSender()][POOL_TYPE_REGULAR], "Not allowed");
        require(_regularPoolSeasonBalances[seasonId] == 0, "Season refreshed");
        require(_poolTypeBalances[POOL_TYPE_REGULAR] > 0, "Pool balance is zero");

        _regularPoolSeasonBalances[seasonId] = _poolTypeBalances[POOL_TYPE_REGULAR].div(_poolTypeSeasonDivides[POOL_TYPE_REGULAR]);
    }

    function refreshArenaSeasonRewardsBNB(uint256 seasonId) external override {
        require(_claimAllowed[_msgSender()][POOL_TYPE_ARENA], "Not allowed");
        require(_arenaPoolSeasonBalances[seasonId] == 0, "Season refreshed");
        require(_poolTypeBalances[POOL_TYPE_ARENA] > 0, "Pool balance is zero");

        _arenaPoolSeasonBalances[seasonId] = _poolTypeBalances[POOL_TYPE_ARENA].div(_poolTypeSeasonDivides[POOL_TYPE_ARENA]);
    }

    function getRegularRewardsBNB() external view override returns (uint256) {
        return _poolTypeBalances[POOL_TYPE_REGULAR];
    }

    function getRegularSeasonRewardsBNB(uint256 seasonId) external view override returns (uint256) {
        return _regularPoolSeasonBalances[seasonId];
    }

    function getArenaSeasonRewardsBNB(uint256 seasonId) external view override returns (uint256) {
        return _arenaPoolSeasonBalances[seasonId];
    }

    function getArenaRewardsBNB() external view override returns (uint256) {
        return _poolTypeBalances[POOL_TYPE_ARENA];
    }
}


// File: contracts/IWolfPoolGuard.sol
// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.0;

interface IWolfPoolGuard {
    function protectClaim(
        uint256 poolType,
        address receiver,
        uint256 amount
    ) external view;
}

