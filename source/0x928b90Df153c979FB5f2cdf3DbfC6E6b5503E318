// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;


interface IERC20 {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
     event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    }
 
library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

  
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }


    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

 
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// library Address {

//     function isContract(address account) internal view returns (bool) {
//         uint256 size;
//         // solhint-disable-next-line no-inline-assembly
//         assembly { size := extcodesize(account) }
//         return size > 0;
//     }

//     function sendValue(address payable recipient, uint256 amount) internal {
//         require(address(this).balance >= amount, "Address: insufficient balance");

//         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
//         (bool success, ) = recipient.call{ value: amount }("");
//         require(success, "Address: unable to send value, recipient may have reverted");
//     }

//     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
//       return functionCall(target, data, "Address: low-level call failed");
//     }

   
//     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
//         return _functionCallWithValue(target, data, 0, errorMessage);
//     }

    
//     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
//         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
//     }


//     function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
//         require(address(this).balance >= value, "Address: insufficient balance for call");
//         return _functionCallWithValue(target, data, value, errorMessage);
//     }

//     function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
//         require(isContract(target), "Address: call to non-contract");

//         // solhint-disable-next-line avoid-low-level-calls
//         (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
//         if (success) {
//             return returndata;
//         } else {
//             // Look for revert reason and bubble it up if present
//             if (returndata.length > 0) {
//                 // The easiest way to bubble the revert reason is using memory via assembly

//                 // solhint-disable-next-line no-inline-assembly
//                 assembly {
//                     let returndata_size := mload(returndata)
//                     revert(add(32, returndata), returndata_size)
//                 }
//             } else {
//                 revert(errorMessage);
//             }
//         }
//     }
// }

contract Ownable is Context {
    address internal _owner;

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        _owner = newOwner;
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
}

library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}

library EnumerableSet {
   
    struct Set {
        bytes32[] _values;
        mapping (bytes32 => uint256) _indexes;
    }

    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    function _remove(Set storage set, bytes32 value) private returns (bool) {
        
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { // Equivalent to contains(set, value)
            
            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

    
            bytes32 lastvalue = set._values[lastIndex];

            set._values[toDeleteIndex] = lastvalue;
            // Update the index for the moved value
            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based

            set._values.pop();

            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    struct Bytes32Set {
        Set _inner;
    }

    
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }


    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

   
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    struct AddressSet {
        Set _inner;
    }

    
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }


    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

   
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

   
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    struct UintSet {
        Set _inner;
    }

    
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}

library Math {
    function min(uint x, uint y) internal pure returns (uint z) {
        z = x < y ? x : y;
    }

    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
    function sqrt(uint y) internal pure returns (uint z) {
        if (y > 3) {
            z = y;
            uint x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}

interface IUniswapV2Pair {
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function sync() external;
}

interface IKpNode{
    function init(uint num)external;
    function getPoolCount(uint star)external view returns(uint);
    function settlePool(uint star,uint usdtAmount)external;
    function deposit(uint star,address owner) external;
    function withdraw(uint star,address owner) external;
    function draw(uint star,address owner)external returns(uint award);
}

contract KPToken is Context, IERC20, Ownable {
    using SafeMath for uint256;
    //using Address for address;
    using EnumerableSet for EnumerableSet.AddressSet;

    IKpNode public kpNode;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) public _isWhiteList;


    uint8 private _decimals = 9;
    uint256 private _tTotal = 9999 * 10 ** 9;

    string private _name = "KP";
    string private _symbol = "KP";

    uint256 public _mkFee = 100;
    uint public _lpFee = 350;

    uint public _shareFee = 40;
    uint[] internal shareConfig = [25,15];

    uint public _equelLevelFee = 5;
    
    uint public _levelFee = 105;
    uint[] _levelFees = [40,30,20,15];

    uint256 public totalFee = 800;
    uint public levelAward;

    address public marketAddress;
    address public receiver;

    IUniswapV2Router02 public uniswapV2Router;

    mapping(address => bool) public ammPairs;
    
    address public uniswapV2Pair;
    address public usdt;   

    EnumerableSet.AddressSet tokenHolder;
    IERC20  public holdToken;

    struct Interest{
        uint256 index;
        uint256 period;
        uint256 lastSendTime;
        uint award;
        uint sendCount;
    }
    address  fromAddress;
    address  toAddress;
    Interest public lpInterest;

    address constant public rootAddress = address(0x000000000000000000000000000000000000dEaD);
    
    mapping (address => address) public recommerMapping;

    mapping(address => address[]) internal childMapping;

    struct Miner{
        uint hashRate;
        uint hashRateT;         
        uint level;  
        uint lpAward; 
        uint shareAward;
        uint levelAward; 
        uint lpAmount;  
        uint firstChildNum;
        uint teamNum;
    }

    uint public constant MaxLevel = 4;

    mapping(address => Miner) public miners;

    mapping(address => mapping(address => uint)) public provideHashRates;

    uint public constant  MINIMUM_LIQUIDITY = 10**3;

    constructor (
        address _route,
        address _holder,
        address _mkAddress,
        address _usdt,
        address _receiver,
        address _kpNode) public {

        recommerMapping[rootAddress] = address(0xdeaddead);
        miners[rootAddress].hashRate = 1;
        recommerMapping[_holder] = rootAddress;
        
        receiver = _receiver;
        usdt = _usdt;
        marketAddress = _mkAddress;
        _tOwned[_holder] = _tTotal;
        
        _isExcludedFromFee[_holder] = true;
        _isExcludedFromFee[address(this)] = true;

        uniswapV2Router = IUniswapV2Router02(_route);
         
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())
            .createPair(address(this), usdt);
        ammPairs[uniswapV2Pair] = true;

        _owner = msg.sender;

        holdToken = IERC20(uniswapV2Pair);
        lpInterest.lastSendTime = block.timestamp;
        lpInterest.period = 600;
        lpInterest.sendCount = 50;

        kpNode = IKpNode(_kpNode);
        kpNode.init(MaxLevel + 1);
        emit Transfer(address(0), _holder, _tTotal);
    }

    function draw()external returns(uint lpAward,uint shareAward,uint lvAward,uint usdtAmount){
        Miner storage miner = miners[msg.sender];

        uint v = miner.lpAward + miner.shareAward + miner.levelAward;

        if( v > 0 ){
            uint lpa = miner.lpAward;
            uint sa = miner.shareAward;
            uint lva = miner.levelAward;

            miner.lpAward = 0;
            miner.shareAward = 0;
            miner.levelAward = 0;
            uint bal = IERC20(usdt).balanceOf(msg.sender);
            swapTokensToToken(v,msg.sender);
            usdtAmount = IERC20(usdt).balanceOf(msg.sender).sub(bal);

            lpAward = lpa * usdtAmount / v;
            shareAward = sa * usdtAmount / v;
            lvAward = lva * usdtAmount / v;
        }
    }

    function swapTokensToToken(uint256 tokenAmount,address to) private {
        
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdt;

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, 
            path,
            to,
            block.timestamp
        );
    }

    function _addShareHashRate(address owner,uint hashRate)internal{
        address[] memory farthers = getForefathers(owner,20 );
        for( uint i = 0; i < 20; i ++ ){
            address farther = farthers[i];
            if( farther == address(0)) break;
            provideHashRates[owner][farther] += hashRate;
            Miner storage miner = miners[farther];
            miner.hashRateT += hashRate;
            _doCheckStar(miner,farther);
        }
    }

    function _subShareHashRate(address owner,uint hashRate)internal{

        address[] memory farthers = getForefathers(owner,20);
        for( uint i = 0; i < 20; i ++ ){
            address farther = farthers[i];
            if( farther == address(0)) break;
            uint provide = provideHashRates[owner][farther];

            hashRate = provide > hashRate ? hashRate : provide;
            if( hashRate > 0 ){
                provideHashRates[owner][farther] -= hashRate;
                Miner storage miner = miners[farther];
                uint hr = miner.hashRateT > hashRate ? hashRate : miner.hashRateT;
                miner.hashRateT -= hr;
                _doCheckStar(miner,farther);
            }
        }
    }

    function getHashRates(address owner)internal view returns(uint hashRateB,uint hashRateT){
        address[] memory childs = childMapping[owner];

        uint len = childs.length;
        for(uint i = 0; i < len; i++ ){
            address child = childs[i];
            Miner storage miner = miners[child];
            uint hr = miner.hashRateT + miners[child].hashRate;
            hashRateT += hr;
            if( hr  > hashRateB){
                hashRateB = hr;
            }
        }
    }

    function _doCheckStar(Miner storage miner,address owner)internal{
        uint oldStar = miner.level;

        (uint hashRateB,uint hashRateT) = getHashRates(owner);
        
        uint newStar = _getStar(childMapping[owner].length,miner.hashRate, hashRateT,hashRateB);
        if( newStar != oldStar){
            miner.level = newStar;
            if( oldStar > 0){
                kpNode.withdraw(oldStar, owner);
            }
            if( newStar > 0){
                kpNode.deposit(newStar, owner);
            }
        }
    }

    function _getStar(uint num,uint hashRate,uint hashRateT,uint hashRateB)internal pure returns(uint){
        
        if( num >= 5 && hashRate >= 30000e18 && hashRateB >= 800000e18 &&  hashRateT >= 1200000e18){
            return 4;
        }
        if( num >= 5 && hashRate >= 10000e18 && hashRateB >= 200000e18 && hashRateT >= 300000e18){
            return 3;
        }
        if( num >= 5 && hashRate >= 3000e18 && hashRateB >= 100000e18 && hashRateT >= 150000e18){
            return 2;
        }
        if( num >= 5 && hashRate >= 500e18 && hashRateB >= 0 && hashRateT >= 50000e18){
            return 1;
        }
        return 0;
    }

    function setInterset(uint lpP,uint lpsc)external onlyOwner{
        lpInterest.period = lpP;
        lpInterest.sendCount = lpsc;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }


    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function setFromFee(address account,bool isO1,bool is02) public onlyOwner {
        _isExcludedFromFee[account] = isO1;
         _isWhiteList[account] = is02;
    }
    
    receive() external payable {}

    function _take(uint256 tValue,address from,address to) private {
        _tOwned[to] = _tOwned[to].add(tValue);
        emit Transfer(from, to, tValue);
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

     function getForefathers(address owner,uint num) internal view returns(address[] memory fathers){
        fathers = new address[](num);
        address parent  = owner;
        for( uint i = 0; i < num; i++){
            parent = recommerMapping[parent];
            if( parent == rootAddress || parent == address(0) ) break;
            fathers[i] = parent;
        }
    }

     function _takeShare(uint tShare,address from,address user) private {

        uint len = shareConfig.length;
        address[] memory farthers = getForefathers(user,len);

        uint sended = 0;
        for( uint i = 0; i < len; i++ ){
            address parent = farthers[i];
            if( parent == address(0)) break;
            uint tv = tShare * shareConfig[i] / _shareFee;
            //_take(tv,from,parent);

            miners[parent].shareAward += tv;
            sended += tv;
        }  

        if( tShare > sended && tShare - sended > 10000 ){
            uint v = tShare - sended;
            _take(v,from,receiver);
        }
    }

    function _takeEquelLevel(uint tEquelLevel,address from,address user)internal{

        if( miners[user].level == MaxLevel){
            address[] memory farthers = getForefathers(user,20);

            for( uint i = 0; i < 20; i++ ){
                address parent = farthers[i];
                if( parent == address(0)) break;
                if( miners[parent].level != MaxLevel ) continue;

                miners[parent].shareAward += tEquelLevel;
                //_take(tEquelLevel,from,parent);
                return;
            }  
        }
         _take(tEquelLevel,from,receiver);
    }

    struct Param{
        bool takeFee;
        uint tTransferAmount;
        uint tMk;
        uint tLp;
        uint tShare;
        uint tLevel;
        uint tEquelLevel;
        address user;
    }

     function _initParam(uint256 tAmount,Param memory param) private view  {
        uint tFee = 0;
        if( param.takeFee ){
            param.tMk = tAmount * _mkFee / 10000;
            param.tLp = tAmount * _lpFee / 10000;
            param.tShare = tAmount * _shareFee / 10000;
            param.tLevel = tAmount * _levelFee / 10000;
            param.tEquelLevel = tAmount * _equelLevelFee / 10000;
            tFee = tAmount * totalFee / 10000;
        }
        param.tTransferAmount = tAmount.sub(tFee);
    }

    function _takeFee(Param memory param,address from)private {
        if( param.tMk > 0 ){
            _take(param.tMk, from, marketAddress);
        }
        if( param.tLp > 0 ){
            _take(param.tLp, from, address(this));
            lpInterest.award += param.tLp;
        }
        if( param.tShare > 0 ){
            _takeShare(param.tShare, from, param.user);
        }

        if( param.tEquelLevel > 0){
            _takeEquelLevel(param.tEquelLevel,from,param.user);
        }

        if( param.tLevel > 0){
            uint sended = _takeLevel(param.tLevel);

            levelAward += sended;
            _take(sended, from, address(this));
            if( param.tLevel > sended && param.tLevel - sended > 1e3){
                _take(param.tLevel - sended, from, receiver);
            }
        }
    }

    function _takeLevel(uint amount)internal returns(uint sended){
        uint len = _levelFees.length;
        for( uint i = 0; i < len; i++ ){
            uint v = _levelFees[i] * amount / _levelFee;
            if( kpNode.getPoolCount(i + 1) > 0 ){
                kpNode.settlePool(i + 1, v);
                sended += v;
            }
        }
    }

    function _isLiquidity(address from,address to)internal view returns(uint addAmount,uint delAmount){
        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();
        (uint r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();
        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));
        if( ammPairs[to] ){
            if( token0 != address(this) && bal0 > r0 ){
                addAmount = bal0 - r0;
            }
        }
        if( ammPairs[from] ){
            if( token0 != address(this) && bal0 < r0 ){
                delAmount = r0 - bal0; 
            }
        }
    }

    function addRelationEx(address recommer) external {

        require( recommer != msg.sender, "onself");
    
        require(recommerMapping[msg.sender] == address(0) ,"has bind");

        require( recommerMapping[recommer] != address(0x0),"parent not bind");

        require(miners[recommer].hashRate > 0,"not valid parent");

        recommerMapping[msg.sender] = recommer;
        childMapping[recommer].push(msg.sender);

        miners[recommer].firstChildNum += 1;

        address[] memory farthers = getForefathers(msg.sender,10);

        for( uint i = 0; i < 10; i++ ){
            address farther = farthers[i];
            if(farther == address(0)) break;

            miners[farther].teamNum += 1;
        }
    }

    function _sendLevelAward(address user)internal{
        uint level = miners[user].level;
        if( level > 0 ){
            uint award = kpNode.draw(level, user);

            if( award <= levelAward ){
                // _tOwned[address(this)] = _tOwned[address(this)].sub(award);
                //_take(award, address(this), user);
                miners[user].levelAward += award;
                levelAward -= award;
            }
        }
    }

    
    function _settleLpAmount(uint amount0,uint amount1)internal view returns(uint liquidity){
        uint _totalSupply = IERC20(uniswapV2Pair).totalSupply(); 
        if (_totalSupply == 0) {
            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
        } else {
            (uint _reserve0,uint _reserve1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();
            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);
        }
    }

    function _settleSubLpAmount(uint amount0)internal view returns(uint liquidity){
        uint _totalSupply = IERC20(uniswapV2Pair).totalSupply(); 
        (uint _reserve0,,) = IUniswapV2Pair(uniswapV2Pair).getReserves();
        return amount0.mul(_totalSupply) / (_reserve0.sub(amount0));
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint addAmount;
        uint delAmount;
        ( addAmount, delAmount) = _isLiquidity(from,to);
       
        Param memory param;
       
        bool takeFee = false;

        if( ammPairs[from] ){
            _sendLevelAward(to);
            if( !_isExcludedFromFee[to] && delAmount == 0){
                takeFee = true;
                param.user = to;
            }  
        }

        if( ammPairs[to]){
            _sendLevelAward(from);
            if( !_isExcludedFromFee[from] && addAmount == 0 ){
                takeFee = true;
                param.user = from;
            }
        }
        if( addAmount > 0 ){
            Miner storage miner = miners[from];
            miner.lpAmount += _settleLpAmount(addAmount,amount);
            miner.hashRate += addAmount;
            _addShareHashRate(from, addAmount);
            _doCheckStar(miner, from);
        }

        if( delAmount > 0){
            Miner storage miner = miners[to];
            if( !_isWhiteList[to]){
                uint lpAmount = _settleSubLpAmount(delAmount);
                require(miner.lpAmount >= lpAmount,"value lock");
                miner.lpAmount -= lpAmount;
            }
            
            delAmount = miner.hashRate > delAmount ? delAmount: miner.hashRate;

            miner.hashRate -= delAmount;
            _subShareHashRate(to,delAmount);
            _doCheckStar(miner, to);
        }

        param.takeFee = takeFee;
        _initParam(amount,param);
        
        _tokenTransfer(from,to,amount,param);

        if (fromAddress == address(0)) fromAddress = from;
        if (toAddress == address(0)) toAddress = to;
        if ( !ammPairs[fromAddress] ) {
            setEst(fromAddress);
        }
        if ( !ammPairs[toAddress] ) {
            setEst(toAddress);
        }
        fromAddress = from;
        toAddress = to;

        if (
            from != address(this) 
            && lpInterest.lastSendTime + lpInterest.period < block.timestamp 
            && lpInterest.award > 0
            && lpInterest.award <= balanceOf(address(this))
            && holdToken.totalSupply() > 1e5 ) {

            lpInterest.lastSendTime = block.timestamp;
            processEst();
        }
    }

    function _tokenTransfer(address sender, address recipient, uint256 tAmount,Param memory param) private {
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);
         emit Transfer(sender, recipient, param.tTransferAmount);
        if(param.takeFee){
            _takeFee(param,sender);
        }
    }

    function donateDust(address addr, uint256 amount) external onlyOwner {
        TransferHelper.safeTransfer(addr, _msgSender(), amount);
    }

    // function donateEthDust(uint256 amount) external onlyOwner {
    //     TransferHelper.safeTransferETH(_msgSender(), amount);
    // }
    
    function processEst() private {
        uint256 shareholderCount = tokenHolder.length();

        if (shareholderCount == 0) return;

        uint256 nowbanance = lpInterest.award;
        uint256 surplusAmount = nowbanance;
        uint256 iterations = 0;
        uint index = lpInterest.index;
        uint sendedCount = 0;
        uint sendCountLimit = lpInterest.sendCount;

        uint ts = holdToken.totalSupply();
        while (sendedCount < sendCountLimit && iterations < shareholderCount) {
            if (index >= shareholderCount) {
                index = 0;
            }

            address shareholder = tokenHolder.at(index);
            uint holdAmount = holdToken.balanceOf(shareholder);

            uint256 amount = nowbanance.mul(holdAmount).div(ts);
            if ( surplusAmount < amount ) break;
            surplusAmount -= amount;

            //_tOwned[address(this)] = _tOwned[address(this)].sub(amount);
            //_take(amount, address(this), shareholder);
            miners[shareholder].lpAward += amount;
            sendedCount ++;
            iterations++;
            index ++;
        }
        lpInterest.index = index;
        lpInterest.award = surplusAmount;
    }

    function setEst(address owner) private {
       
        if( tokenHolder.contains(owner) ){
            if( holdToken.balanceOf(owner) == 0 ) {
                tokenHolder.remove(owner);
            }
            return;
        }

        if( holdToken.balanceOf(owner) > 0 ){
            tokenHolder.add(owner);
        }
    }
}