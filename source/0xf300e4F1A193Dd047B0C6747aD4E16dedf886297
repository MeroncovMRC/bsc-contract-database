
// File: contracts/GamingStars.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.5.16;

import './BEP20Token.sol';

//                                                     `',''..``.',,~~;!;;;,,'`
//                                              `~;;;~;^*T}S6R&Q@@@@@@@@@@@@@@@@@@QQDwJ=~`
//                                          ~r^^^<T}EDBQQQQQQQWD6w5YJTTL*=?|?i7sywqgQ@@@@@@Qqt;`
//                                     .=***?JyURW#&BgqS}T<!;;;;;~~~__,,,'''..```      `';LyDQQQQWo=.
//                                  ~L|?iJykbDR%qm}\=^r+r^^^!!~==,;},.=j5Y~    ;<!             ~?SW8WR5^`
//                               ;TT\7}SUqqqXyz?=<<<<=^!!5X;wb~6Q6=QLiQ~*yo`  ,QTi; ;UK*`  `        ~tbDbUi'
//                            ~777JfSEXUwyJi?**??\==JQR\=QQYLQLYQ=qQm;bw}Ry.` ;J*Q<  W=  ,b%S  ,,       ~7wayL.
//                          LJJt}ySwESf7i????|??gQRJ=bBbRB}B=XY=5!~*^,,~;,...`.;*!  ~U  }&oES ;Q;}a        `*s7\;
//                       .zttY}yoaajt7???iybbX7|DRbQ6Yg7ts;;_,,,,,,,,,,,,,''''.....````.,  ?y`&yQJ, bta~      .+|*r`
//                     .ttts}jyyy}ti*?T77fQoyKQoXQYiz^~~~~~!^^!!!;;;;;~~~,,,''..```     ``````` X``!;m,          ,^!;`
//                   .7tttY}fj}s7**\tJz77zK#KRRJ?;~~;=?**<==+r^^!!!;;;;;~~~,,,''..```         ```  <iy'             ~~~.
//                  7JJJts}}}s7=*zttttJJz777s=~;;?iiL????***==+r^^!!!;;;;~~~~_,,''..```           ```                 ,,'`
//                +JJJzJtYYt7=*tttttttSXJJ*;;rT77T\\iiL?|??***==+r^^!^^r^^!!;~~,,,''..```            ```  .i            ..`
//               77777zJtt7^=JX%Ettttt}z;;=zz777777T\\iiL|?LzfSkkXXXXXkwwEEkXUXkways|!,.````             ``       ~!.     ``
//             !777777JJz+^7JmQbDgg}ti~;7ttJJJz77777TT\ta66qEys7TTTTT77777777777777YyEqEj|~```             ``   ~%_.?b
//            |77T\7777i;?jRSs5wbRgi_;JtttttttJJz777yqb65J7777777777777zzzzzzzJJJJJJJJJJsoq6}!``             .` ~b;Di!
//           \TT\iT777+;7tRBbg}Eyz~;7ttttttttttJJ}UDX}zzzJJJJJJJJJJJttttttttttttttttttttttttfU6i.`             `` ~!~';\a,
//         .ii\iiiT7\;+7ggky6#8a;~7JtttttttttttyDDyJttttttzi?<=^^=*iztttttttttttttttJtttttttttJoDz.`             ` '=X75m
//        .LLiLLi\T|,?77yB&ggfi,?JJJJttttttttYbgytttttL^~'```````````',~;;!!!!;;~,'...',;^|777777mb;``             `  Q= `?S
//        ??|?|ii\*,|5&WbDQbt!,7zJJtJJJttttt}WXtttJ7;.`````````````````````````````````````.~<77TTtR|```            `  7awW~       `
//       **???Lii=,L\TtEg%o7,!7777zJJJJJJJtf#y777i~                                 ``````````'riii\D?````              +Qziyw,    ```
//      =<**?|L?*'|X8RDDKw7'=7777777zJJJJJtWE777*`                                              ~???LWr..```             ,jS*`      ..`
//     ;+=<??|?*'<|Jb8KgY\'*7777777777zJJJkg\i\?`                                                ;===7W,...```            _r}R}U.   `',
//     ^^+*??**,;i5s}fKDi'=\TT7777777777zzW5||?'                                                 .r^^^Us''..````          'g`<' '    ',~
//    !!!=??*=~'LQmSW&S|,^ii\\TT777777777sQ\**r                                                   ;!;;TR,,,'...```         `., S5=    _~,
//   ';;^*??r^`^*&6Sw&y!~|Liii\\TT7777777}Q*++,                                                   ,;;~^Q!_,,'''..```        iU;g B    ,;^
//   ~;;=*?=!',r+*t5y\*.???|iiii\\TT77777}Q+!!`                                                   `,,,~Q^~~~,,'''..```       *t;       ;r;
//   ~~;*??!; !^^r+==<_;*????|Liii\\TT777tQr;;             `~,,..` `          ```..,,~.            ```,Q!;;~~_,,,''..```               ;=?
//  ,_~^*?+;'.!!!^^r+r'=***????|Liii\\TT77B?~~   ,;;;~;;~;;~!=Li7J^,'',~~~~,,,~?J7i|+!~;~~;;;;;;,     ;g;;;;~~~~,,,''..```             '<|;
//  ,,~=*?!~ ~;;!!^X7~,==<***????|Liii\\\7R7''~|=,````````````````;|=        ??~````````````````_*?,  ?D7*;;;;~~~~,,'''..```  ,\        *ii
//  ,,~*??~~ ~;;;;!!!';r+==<**?????|LiTXm7ma`yi;;;;;;;;;;;;;;;;;;;;;+S~~,,~~X!;;;;;;;;;;;;;;;;;;;;;s= mr`r6<;;;;~~~~,,'''..`  `'      ` ?Tt
//  '';*??,' ~~~;;;;!'!^^r+==<**?????|q7  'WwmiiiiiiiiiiiiiiiiiiiiiiiK     .6iiiiiiiiiiiiiiiiiiiiiiiq7W   ~q!!;;;;;~~~,,,''.` ``      . ?7},
// `'';??<,. _Tt^wm*;'!!!^^r+==<**????g;   bW5JJJJJJJJJJJJJJJJJJJJJJYy      KtJJJJJJJJJJJJJJJJJJJJJJ6qb   `g!!!!;;;;~~~~,,,'. .`._,`  . <Jf;
// ...!??=,``~QjbJqX~';;!!!^^r+==<***?D^   }gk7777777777777777777777q`      ;X7777777777777777777777KK|   _Kr^^!!!;;;;;~~~,,, '?D}Yb? . +sy<
// `..;?|='` ,!7?;7!~,;;;;!!!^^r+==<**mj   *8o=!!!!!!!!!!!!!!!!!!!rkL        |S!!!!!!!!!!!!!!!!!!!!\zg    }y=+r^^!!!;;;;;~~~, ,Xkqryb`'`<}a?
//  ``;?L*'` 'YKbjqf~,~~;;;;!!!^^r+==<i#.  !W.Y'                 ,i;`         fz'                 ~T_L    W|<==+r^^!!!;;;;;~~ ,=zy;7,`'`iyw=
//  ``~?L|.` 'baXQX},,~~~~;;;;!!!^^r++=5k  ,m! !~               !, !          `';;               ;~ Y'   KY?**<==+r^^!!!;;;;~ ~5QXt^,.,`J5k^
//   `'|ii'. .;+!^TS~,,_~~~~;;;;!!!^^r+=D*``_6   _,          ',`  ;            `  ',.         `,,   W   =q|??***<==+r^^!!!;;' !}QS&Q7','fSU~
//    `*ii_` `,TEURy,,_,,_~~~~;;;;!!!^^r7W.`.D`     `,,~;~,'     '              ``    ',~;~,,`     ~j   8ti|?????**==+r^^!!! ,7oT^;~,,,;yEX'``
//     !i\!`  'aXmbRt'~,,,,_~~~~;;;;;!!^^D*`.77                 ;                ;                 j~  !D\\ii|???***<==+r^^! !sqW#Dj~_,?oXY..`
//     'i\i`` `.,..','_,,,,,,_~~~~;;;;;!!iD<~!#                 ; `|t^      =<`  ;                 Q!~ibtTT\\ii|???***<==+r''LWQwJ\+~,;Ym6<''
//      =T7;   ,g}wEkL';'',,,,,_~~~~;;;;;!^T}jq|                      `   `~'`                    ;Rf}z77777T\\iiL????**<=^`rXKRQD7;~~*ykw~,,
//      ,77\`  `7s.`'~',~''',,,,,_~~~~;;;;;!!^<W                                                  UmJJJz77777TT\\ii|????**';ySfstfT;,!soUi~~`
//       =7J!   `,\,Bob;;,'''',,,,,_~~~~;;;;!!!}j                                                 QYtttJJz77777TT\iii|???!~75f5Uby^,;ijmo;;~
//       `7JJ'   !WiQ,k!.;'.'''',,,,,_~~~~;;;;!!b,                               ````            |KttttttJJz777777T\iiiL=_?JEDgqf+;,<Y5k*;;
//        ;ts7`   '!,````.;'..'''',,,,,_~~~~;;;;+b              ``` ``````  `~!!!!;,'`           XfttttttttJJz777777T\i*~LRBBbmy7!,<7fSY!!~
//         =Y}i      `,Js=';'...'''',,,,,_~~~~;;;?f           `   `'~;;!^r*f=!,'.'';!'          ;bYfs}sttttttJJz77777T?;iYaEkDRt<'=\syy=^!
//          i}f?     X<m\Sw`;,`...'''',,,,,_~~~~;;|}                   ````_+;~'`            `.,bJzY?stttttttttJJz777*^t8bUD#z|*'=L7}j*=r
//           ijyL    LK|7DL.,_~``....''',,,,,_~~~~;<y'`                     _;;~.          ,~~=K5^t<!ttttttttttttJJ7=*7jQWXyQj*'+?\JY|*<
//            iy5?    `~;=oQb`';.`....'''',,,,,__~~~=E=__'`                  =;;~.       ,|*?yK}};J=;Jtttttttttttt7=7z77}yE6}=.<*L7JL?*.
//             ?oa7`    a7=g!?f.;_```....''',,,,,_~~~;ja?<*+;,.``````````    '=;~~,        zbwzzt~t+!JJtttttttttJ??SRbYt7777;'?=*i7i|?`
//              ^amy'     bBX*;}^';,``.....'''',,,,_~~~=mwz777T*^;~__,,,,,,,,';=;~~~        \777<|i=tJJJttttttti*7tQ%DRBqzT,~?^=?\\ii
//               ,okk?    ,.^Uw~+S''~,``.....'''',,,,__~~r5UjtttttJ7i|*<===<?|\Y=;~;~`       7Y7tzzzJJJJJJJJJ|*7UU}}5yRRo=.*^;^*i7T?
//                 zXX5,    ^';D85aX`'~,```....'''',,,,_~~~!YEk}77777TTTTT\\\\\\tr;~~;'   `Lf5Y777777zJJJJz??zXYfKQUwUt7,~*~;!=\77;
//                  ;E6q?     t7!,DfE}~,,,.``....''',,,,,,~~~~^z5mosi???******<|tkr;~;;;<'    .z7777777z\**tYqQDttaQKY~'*;,~;?zz7
//                    *6Kq*      5QS,'Qa'',,,.`....'''',,,,,_~~~~;!?Jfjjyyyyyyoyz|7=T^,        y77777|==LEXq&QKQ6J}t~'=;'',^7tJ=
//                     `fDRb*    `'  wSyQm^_~,'''....'''',,,,,_~~~;;;;;!!!^^+===<**}?        .TTTT<r+?tKbDQDsjXRX7~,r;..'~itt7
//                       ,mgWRi     `mmr`'R%tD?`.'''...'''',,,,,_~~~;;;;;!!!^r++==<*iL~,.~^i7Lr!!^?wbDf7UQwWWsz?_,r~```,<JtJ.
//                         ,o8&8s,  `    o7!~Ew ````......'',,,,,__~~~;;;;;!!!^r+===<***r;~;;;=i\\JQ%KR6}KbX7;,~^,  `'rztt,
//                            L8QQ%i. ````*}f*`   ``?L`...`````````.'',,_~~~~~,,''',,,,~;=??Xy|Liii\jDRK7i;~;^_    _?JJ7.
//                              !6QQQb*` ```        `````.,kym\'?L+,',``````,''~|^LwUX}=<***????|Liiiz*;;;^;.   `~LzzL
//                                `|DQQQD7_ `...      ````'amY+'=|Q\iQ*#RJQ=gRoRb*QRa\B}==<**????|*!;;!^;'`  `,=777~
//                                    *UQ@@Qb7;``.'''`  ``*q5#!,LyQ;zQW=yQB~!WXQL;YqyEWir+====^!!!!r!_'.``.~*T77!
//                                       ;sg@@@@WaL;..'',,,,,.`;iz7'?U*,,Uk,_^Eo~;;=i?^!!!!!!^++!;~,,''~!*\\\~
//                                           !}D@@@@@Qby\^~,,,,_~~~~~;;~;;;;;;;;;;;!!!^+=***<+!;;~~;!=?|L*'
//                                               '+YbQ@@@@@@QBDXaft7i?|?**?||i\7JY}jjjjY7TL*=r^^^=<**r.
//                                                     .;<7o6%BQ@@QQQQQQQB&8WgRRDKXo}7i*+^!!!!^^;`
//                                                              `',~;!!+==+^!!;;~~,,_~~~~~'
//                                                                    ```...```
//                              ________               .__                   _________ __
//                              /  _____/_____    _____ |__| ____    ____    /   _____//  |______ _______  ______
//                              /   \  ___\__  \  /     \|  |/    \  / ___\   \_____  \\   __\__  \\_  __ \/  ___/
//                              \    \_\  \/ __ \|  Y Y  \  |   |  \/ /_/  >  /        \|  |  / __ \|  | \/\___ \
//                              \______  (____  /__|_|  /__|___|  /\___  /  /_______  /|__| (____  /__|  /____  >
//                                      \/     \/      \/        \//_____/           \/           \/           \/

contract GamingStars is BEP20Token('Gaming Stars', 'GAMES', 102_000_000 * 1e18) {

}


// File: contracts/BEP20Token.sol
//SPDX-License-Identifier: MIT
pragma solidity 0.5.16;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor() internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, 'SafeMath: addition overflow');

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, 'SafeMath: subtraction overflow');
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, 'SafeMath: multiplication overflow');

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, 'SafeMath: division by zero');
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, 'SafeMath: modulo by zero');
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract BEP20Token is Context, IBEP20, Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;
    string private _symbol;
    string private _name;

    constructor(
        string memory name_,
        string memory symbol_,
        uint256 totalSupply_
    ) public {
        _name = name_;
        _symbol = symbol_;
        _totalSupply = totalSupply_;
        _balances[msg.sender] = totalSupply_;

        emit Transfer(address(0), msg.sender, totalSupply_);
    }

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address) {
        return owner();
    }

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8) {
        return 18;
    }

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory) {
        return _name;
    }

    /**
     * @dev See {BEP20-totalSupply}.
     */
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {BEP20-balanceOf}.
     */
    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {BEP20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {BEP20-allowance}.
     */
    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {BEP20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {BEP20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {BEP20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')
        );
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')
        );
        return true;
    }

    // /**
    //  * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing
    //  * the total supply.
    //  *
    //  * Requirements
    //  *
    //  * - `msg.sender` must be the token owner
    //  */
    // function mint(uint256 amount) public onlyOwner returns (bool) {
    //     _mint(_msgSender(), amount);
    //     return true;
    // }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), 'BEP20: transfer from the zero address');
        require(recipient != address(0), 'BEP20: transfer to the zero address');

        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), 'BEP20: mint to the zero address');

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), 'BEP20: burn from the zero address');

        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), 'BEP20: approve from the zero address');
        require(spender != address(0), 'BEP20: approve to the zero address');

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted
     * from the caller's allowance.
     *
     * See {_burn} and {_approve}.
     */
    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(
            account,
            _msgSender(),
            _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance')
        );
    }
}

