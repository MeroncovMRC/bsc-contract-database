{"Dump.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./ReentrantGuard.sol\";\r\n\r\ninterface XUSDRoyalty {\r\n    function getFeeRecipient() external view returns (address);\r\n}\r\n\r\ninterface IXUSD {\r\n    function sell(uint256 tokenAmount, address desiredToken, address recipient) external returns (address, uint256);\r\n    function getUnderlyingAssets() external view returns(address[] memory);\r\n}\r\n\r\n/**\r\n *  Contract: DUMP Powered by XUSD\r\n *  Appreciating Stable Coin Inheriting The IP Of XUSD by xSurge\r\n *  Visit xsurgecrypto.net to learn more about appreciating stable coins\r\n */\r\ncontract DUMP is IERC20, Ownable, ReentrancyGuard {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    // token data\r\n    string private constant _name = \"DUMP\";\r\n    string private constant _symbol = \"DUMP\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant precision = 10**18;\r\n    \r\n    // 1 initial supply\r\n    uint256 private _totalSupply = 10**18; \r\n    \r\n    // balances\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    // address -\u003e Fee Exemption\r\n    mapping ( address =\u003e bool ) public isTransferFeeExempt;\r\n\r\n    // Token Activation\r\n    bool public tokenActivated;\r\n\r\n    // Dead Wallet\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Royalty Data Fetcher\r\n    XUSDRoyalty private constant royaltyTracker = XUSDRoyalty(0x9127c5847C78926CEB3bF916Ef0868CE3bDc154F);\r\n\r\n    // Fees\r\n    uint256 public mintFee        = 88000;            // 12% mint fee\r\n    uint256 public sellFee        = 88000;            // 12% redeem fee \r\n    uint256 public transferFee    = 88000;            // 12% transfer fee\r\n    uint256 private constant feeDenominator = 10**5;\r\n\r\n    // Fee Distribution\r\n    uint256 public constant royaltyFee   = 25;\r\n    uint256 public constant priceFee     = 525;\r\n    uint256 public constant dumpFee      = 650;\r\n    uint256 private constant FEE_DENOM   = 1200;\r\n    \r\n    // Underlying Asset Is XUSD\r\n    IERC20 public constant underlying = IERC20(0x324E8E649A6A3dF817F97CdDBED2b746b62553dD);\r\n\r\n    // DUMP Fee Recipient Contract\r\n    address public dumpReceiver;\r\n\r\n    // initialize\r\n    constructor() {\r\n        isTransferFeeExempt[msg.sender] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    /** Returns the total number of tokens in existence */\r\n    function totalSupply() external view override returns (uint256) { \r\n        return _totalSupply; \r\n    }\r\n\r\n    /** Returns the number of tokens owned by `account` */\r\n    function balanceOf(address account) public view override returns (uint256) { \r\n        return _balances[account]; \r\n    }\r\n\r\n    /** Returns the number of tokens `spender` can transfer from `holder` */\r\n    function allowance(address holder, address spender) external view override returns (uint256) { \r\n        return _allowances[holder][spender]; \r\n    }\r\n    \r\n    /** Token Name */\r\n    function name() public pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /** Token Ticker Symbol */\r\n    function symbol() public pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /** Tokens decimals */\r\n    function decimals() public pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /** Approves `spender` to transfer `amount` tokens from caller */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n  \r\n    /** Transfer Function */\r\n    function transfer(address recipient, uint256 amount) external override nonReentrant returns (bool) {\r\n        if (recipient == msg.sender) {\r\n            _sell(msg.sender, amount, msg.sender);\r\n            return true;\r\n        } else {\r\n            return _transferFrom(msg.sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    /** Transfer Function */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override nonReentrant returns (bool) {\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \u0027Insufficient Allowance\u0027);\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n    \r\n    /** Internal Transfer */\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        // make standard checks\r\n        require(recipient != address(0) \u0026\u0026 sender != address(0), \"Transfer To Zero\");\r\n        require(amount \u003e 0, \"Transfer Amt Zero\");\r\n        // track price change\r\n        uint256 oldPrice = _calculatePrice();\r\n        // amount to give recipient\r\n        uint256 tAmount = (isTransferFeeExempt[sender] || isTransferFeeExempt[recipient]) ? amount : amount.mul(transferFee).div(feeDenominator);\r\n        // tax taken from transfer\r\n        uint256 tax = amount.sub(tAmount);\r\n        // subtract from sender\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        // give reduced amount to receiver\r\n        _balances[recipient] = _balances[recipient].add(tAmount);\r\n\r\n        // burn the tax\r\n        if (tax \u003e 0) {\r\n            // Take Fee\r\n            _takeFee(tax);\r\n            // Reduce Supply\r\n            _totalSupply = _totalSupply.sub(tax);\r\n            emit Transfer(sender, address(0), tax);\r\n        }\r\n        \r\n        // require price rises\r\n        _requirePriceRises(oldPrice);\r\n        // Transfer Event\r\n        emit Transfer(sender, recipient, tAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        Mint DUMP Tokens With The Native Token ( Smart Chain BNB )\r\n        This will purchase BUSD with BNB received\r\n        It will then mint tokens to `recipient` based on the number of stable coins received\r\n        `minOut` should be set to avoid the Transaction being front runned\r\n\r\n        @param recipient Account to receive minted DUMP Tokens\r\n        @param minOut minimum amount out from BNB -\u003e BUSD - prevents front run attacks\r\n        @return received number of DUMP tokens received\r\n     */\r\n    function mintWithNative(address recipient, uint256 minOut) external payable returns (uint256) {\r\n        _checkGarbageCollector(address(this));\r\n        _checkGarbageCollector(DEAD);\r\n        return _mintWithNative(recipient, minOut);\r\n    }\r\n\r\n\r\n    /** \r\n        Mint DUMP Tokens For `recipient` By Depositing BUSD Into The Contract\r\n            Requirements:\r\n                Approval from the BUSD prior to purchase\r\n        \r\n        @param numTokens number of BUSD tokens to mint DUMP with\r\n        @param recipient Account to receive minted DUMP tokens\r\n        @return tokensMinted number of DUMP tokens minted\r\n    */\r\n    function mintWithBacking(uint256 numTokens, address recipient) external nonReentrant returns (uint256) {\r\n        _checkGarbageCollector(address(this));\r\n        _checkGarbageCollector(DEAD);\r\n        return _mintWithBacking(numTokens, recipient);\r\n    }\r\n\r\n    /** \r\n        Burns Sender\u0027s DUMP Tokens and redeems their value in BUSD\r\n        @param tokenAmount Number of DUMP Tokens To Redeem, Must be greater than 0\r\n    */\r\n    function sell(uint256 tokenAmount) external nonReentrant returns (address, uint256) {\r\n        return _sell(msg.sender, tokenAmount, msg.sender);\r\n    }\r\n    \r\n    /** \r\n        Burns Sender\u0027s DUMP Tokens and redeems their value in BUSD for `recipient`\r\n        @param tokenAmount Number of DUMP Tokens To Redeem, Must be greater than 0\r\n        @param recipient Recipient Of BUSD transfer, Must not be address(0)\r\n    */\r\n    function sell(uint256 tokenAmount, address recipient) external nonReentrant returns (address, uint256) {\r\n        return _sell(msg.sender, tokenAmount, recipient);\r\n    }\r\n    \r\n    /** \r\n        Allows A User To Erase Their Holdings From Supply \r\n        DOES NOT REDEEM UNDERLYING ASSET FOR USER\r\n        @param amount Number of DUMP Tokens To Burn\r\n    */\r\n    function burn(uint256 amount) external nonReentrant {\r\n        // get balance of caller\r\n        uint256 bal = _balances[msg.sender];\r\n        require(bal \u003e= amount \u0026\u0026 bal \u003e 0, \u0027Zero Holdings\u0027);\r\n        // Track Change In Price\r\n        uint256 oldPrice = _calculatePrice();\r\n        // take fee\r\n        _takeFee(amount);\r\n        // burn tokens from sender + supply\r\n        _burn(msg.sender, amount);\r\n        // require price rises\r\n        _requirePriceRises(oldPrice);\r\n        // Emit Call\r\n        emit Burn(msg.sender, amount);\r\n    }\r\n\r\n\r\n    ///////////////////////////////////\r\n    //////  INTERNAL FUNCTIONS  ///////\r\n    ///////////////////////////////////\r\n    \r\n    /** Purchases DUMP Token and Deposits Them in Recipient\u0027s Address */\r\n    function _mintWithNative(address recipient, uint256 minOut) internal nonReentrant returns (uint256) {        \r\n        require(msg.value \u003e 0, \u0027Zero Value\u0027);\r\n        require(recipient != address(0), \u0027Zero Address\u0027);\r\n        require(\r\n            tokenActivated || msg.sender == this.getOwner(),\r\n            \u0027Token Not Activated\u0027\r\n        );\r\n        \r\n        // calculate price change\r\n        uint256 oldPrice = _calculatePrice();\r\n        \r\n        // previous backing\r\n        uint256 previousBacking = underlying.balanceOf(address(this));\r\n        \r\n        // swap BNB for stable\r\n        uint256 received = _purchaseXUSD(minOut);\r\n\r\n        // if this is the first purchase, use new amount\r\n        uint256 relevantBacking = previousBacking == 0 ? underlying.balanceOf(address(this)) : previousBacking;\r\n\r\n        // mint to recipient\r\n        return _mintTo(recipient, received, relevantBacking, oldPrice);\r\n    }\r\n    \r\n    /** Stake Tokens and Deposits DUMP in Sender\u0027s Address, Must Have Prior Approval For BUSD */\r\n    function _mintWithBacking(uint256 numXUSD, address recipient) internal returns (uint256) {\r\n        require(\r\n            tokenActivated || msg.sender == this.getOwner(),\r\n            \u0027Token Not Activated\u0027\r\n        );\r\n        // users token balance\r\n        uint256 userTokenBalance = underlying.balanceOf(msg.sender);\r\n        // ensure user has enough to send\r\n        require(userTokenBalance \u003e 0 \u0026\u0026 numXUSD \u003c= userTokenBalance, \u0027Insufficient Balance\u0027);\r\n\r\n        // calculate price change\r\n        uint256 oldPrice = _calculatePrice();\r\n\r\n        // previous backing\r\n        uint256 previousBacking = underlying.balanceOf(address(this));\r\n\r\n        // transfer in token\r\n        uint256 received = _transferIn(address(underlying), numXUSD);\r\n\r\n        // if this is the first purchase, use new amount\r\n        uint256 relevantBacking = previousBacking == 0 ? underlying.balanceOf(address(this)) : previousBacking;\r\n\r\n        // Handle Minting\r\n        return _mintTo(recipient, received, relevantBacking, oldPrice);\r\n    }\r\n    \r\n    /** Burns DUMP Tokens And Deposits BUSD Tokens into Recipients\u0027s Address */\r\n    function _sell(address seller, uint256 tokenAmount, address recipient) internal returns (address, uint256) {\r\n        require(tokenAmount \u003e 0 \u0026\u0026 _balances[seller] \u003e= tokenAmount);\r\n        require(seller != address(0) \u0026\u0026 recipient != address(0));\r\n        \r\n        // calculate price change\r\n        uint256 oldPrice = _calculatePrice();\r\n        \r\n        // tokens post fee to swap for underlying asset\r\n        uint256 tokensToSwap = isTransferFeeExempt[seller] ? \r\n            tokenAmount.sub(10, \u0027Minimum Exemption\u0027) :\r\n            tokenAmount.mul(sellFee).div(feeDenominator);\r\n\r\n        // value of taxed tokens\r\n        uint256 amountUnderlyingAsset = amountOut(tokensToSwap);\r\n\r\n        // Take Fee\r\n        if (!isTransferFeeExempt[seller]) {\r\n            uint fee = tokenAmount.sub(tokensToSwap);\r\n            _takeFee(fee);\r\n        }\r\n\r\n        // burn from sender + supply \r\n        _burn(seller, tokenAmount);\r\n\r\n        // fetch token to sell for\r\n        address tokenToSell = tokenToSellFor();\r\n\r\n        // send Tokens to Seller\r\n        IXUSD(address(underlying)).sell(amountUnderlyingAsset, tokenToSell, recipient);\r\n\r\n        // require price rises\r\n        _requirePriceRises(oldPrice);\r\n\r\n        // Differentiate Sell\r\n        emit Redeemed(seller, tokenAmount, amountUnderlyingAsset);\r\n\r\n        // return token redeemed and amount underlying\r\n        return (tokenToSell, amountUnderlyingAsset);\r\n    }\r\n\r\n    /** Handles Minting Logic To Create New DUMP */\r\n    function _mintTo(address recipient, uint256 received, uint256 totalBacking, uint256 oldPrice) private returns(uint256) {\r\n        \r\n        // find the number of tokens we should mint to keep up with the current price\r\n        uint256 calculatedSupply = _totalSupply == 0 ? 10**18 : _totalSupply;\r\n        uint256 tokensToMintNoTax = calculatedSupply.mul(received).div(totalBacking);\r\n        \r\n        // apply fee to minted tokens to inflate price relative to total supply\r\n        uint256 tokensToMint = isTransferFeeExempt[msg.sender] ? \r\n                tokensToMintNoTax.sub(10, \u0027Minimum Exemption\u0027) :\r\n                tokensToMintNoTax.mul(mintFee).div(feeDenominator);\r\n        require(tokensToMint \u003e 0, \u0027Zero Amount\u0027);\r\n        \r\n        // mint to Buyer\r\n        _mint(recipient, tokensToMint);\r\n\r\n        // apply fee to tax taken\r\n        if (!isTransferFeeExempt[msg.sender]) {\r\n            uint fee = tokensToMintNoTax.sub(tokensToMint);\r\n            _takeFee(fee);\r\n        }\r\n\r\n        // require price rises\r\n        _requirePriceRises(oldPrice);\r\n\r\n        // differentiate purchase\r\n        emit Minted(recipient, tokensToMint);\r\n        return tokensToMint;\r\n    }\r\n\r\n    /** \r\n        Takes Fee\r\n        @param fee - fee in DUMP\r\n    */\r\n    function _takeFee(uint256 fee) internal {\r\n\r\n        // split up fee\r\n        uint256 forDump = ( fee * dumpFee ) / FEE_DENOM;\r\n        uint256 royalty = ( fee * royaltyFee ) / FEE_DENOM;\r\n\r\n        // take royalty fee\r\n        if (royalty \u003e 0) {\r\n            _takeRoyalty(royalty);\r\n        }\r\n\r\n        // take dump fee\r\n        if (forDump \u003e 0 \u0026\u0026 dumpReceiver != address(0)) {\r\n            _mint(dumpReceiver, forDump);\r\n        }\r\n    }\r\n\r\n    function _takeRoyalty(uint256 amount) internal {\r\n\r\n        // fetch royalty fee recipient\r\n        address feeRecipient = getFeeRecipient();\r\n\r\n        // convert dump amount into XUSD amount\r\n        uint xFee = amountOut(amount);\r\n\r\n        // transfer XUSD to royalty recipient\r\n        if (xFee \u003e 0 \u0026\u0026 feeRecipient != address(0)) {\r\n            underlying.transfer(feeRecipient, xFee);\r\n        }\r\n    } \r\n\r\n    /** Swaps BNB for XUSD */\r\n    function _purchaseXUSD(uint256 minOut) internal returns (uint256) {\r\n\r\n        // previous amount of Tokens before we received any\r\n        uint256 prevTokenAmount = underlying.balanceOf(address(this));\r\n\r\n        // swap BNB For stable of choice\r\n        (bool s,) = payable(address(underlying)).call{value: address(this).balance}(\"\");\r\n        require(s);\r\n\r\n        // amount after swap\r\n        uint256 currentTokenAmount = underlying.balanceOf(address(this));\r\n        require(currentTokenAmount \u003e prevTokenAmount);\r\n        uint256 received = currentTokenAmount - prevTokenAmount;\r\n        require(\r\n            received \u003e= minOut,\r\n            \u0027Min Out Not Received\u0027\r\n        );\r\n        return received;\r\n    }\r\n\r\n    /** Requires The Price Of DUMP To Rise For The Transaction To Conclude */\r\n    function _requirePriceRises(uint256 oldPrice) internal {\r\n        // Calculate Price After Transaction\r\n        uint256 newPrice = _calculatePrice();\r\n        // Require Current Price \u003e= Last Price\r\n        require(newPrice \u003e= oldPrice, \u0027Price Cannot Fall\u0027);\r\n        // Emit The Price Change\r\n        emit PriceChange(oldPrice, newPrice, _totalSupply);\r\n    }\r\n\r\n    /** Transfers `desiredAmount` of `token` in and verifies the transaction success */\r\n    function _transferIn(address token, uint256 desiredAmount) internal returns (uint256) {\r\n        uint256 balBefore = IERC20(token).balanceOf(address(this));\r\n        require(\r\n            IERC20(token).transferFrom(msg.sender, address(this), desiredAmount),\r\n            \u0027Failure Transfer From\u0027\r\n        );\r\n        uint256 balAfter = IERC20(token).balanceOf(address(this));\r\n        require(\r\n            balAfter \u003e balBefore,\r\n            \u0027Zero Received\u0027\r\n        );\r\n        return balAfter - balBefore;\r\n    }\r\n\r\n    /** XUSD Stable With Greatest Supply */\r\n    function tokenToSellFor() public view returns (address) {\r\n\r\n        address[] memory underlyings = IXUSD(address(underlying)).getUnderlyingAssets();\r\n        uint MAX = 0;\r\n        address stable = address(0);\r\n        uint len = underlyings.length;\r\n        for (uint i = 0; i \u003c len;) {\r\n            address potential = underlyings[i];\r\n            if (potential != address(0)) {\r\n                uint bal = IERC20(potential).balanceOf(address(underlying));\r\n                if (bal \u003e MAX) {\r\n                    MAX = bal;\r\n                    stable = potential;\r\n                }\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n        return stable == address(0) ? underlyings[0] : stable;\r\n    }\r\n    \r\n    /** Mints Tokens to the Receivers Address */\r\n    function _mint(address receiver, uint amount) private {\r\n        _balances[receiver] = _balances[receiver].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        emit Transfer(address(0), receiver, amount);\r\n    }\r\n    \r\n    /** Burns `amount` of tokens from `account` */\r\n    function _burn(address account, uint amount) private {\r\n        _balances[account] = _balances[account].sub(amount, \u0027Insufficient Balance\u0027);\r\n        _totalSupply = _totalSupply.sub(amount, \u0027Negative Supply\u0027);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /** Make Sure there\u0027s no Native Tokens in contract */\r\n    function _checkGarbageCollector(address burnLocation) internal {\r\n        uint256 bal = _balances[burnLocation];\r\n        if (bal \u003e 0) {\r\n            // Track Change In Price\r\n            uint256 oldPrice = _calculatePrice();\r\n            // take fee\r\n            _takeFee(bal);\r\n            // burn amount\r\n            _burn(burnLocation, bal);\r\n            // Emit Collection\r\n            emit GarbageCollected(bal);\r\n            // Emit Price Difference\r\n            emit PriceChange(oldPrice, _calculatePrice(), _totalSupply);\r\n        }\r\n    }\r\n    \r\n    ///////////////////////////////////\r\n    //////    READ FUNCTIONS    ///////\r\n    ///////////////////////////////////\r\n    \r\n\r\n    /** Price Of DUMP in BUSD With 18 Points Of Precision */\r\n    function calculatePrice() external view returns (uint256) {\r\n        return _calculatePrice();\r\n    }\r\n    \r\n    /** Returns the Current Price of 1 Token */\r\n    function _calculatePrice() internal view returns (uint256) {\r\n        uint256 totalShares = _totalSupply == 0 ? 1 : _totalSupply;\r\n        uint256 backingValue = underlying.balanceOf(address(this));\r\n        return (backingValue.mul(precision)).div(totalShares);\r\n    }\r\n\r\n    /**\r\n        Amount Of Underlying To Receive For `numTokens` of DUMP\r\n     */\r\n    function amountOut(uint256 numTokens) public view returns (uint256) {\r\n        return _calculatePrice().mul(numTokens).div(precision);\r\n    }\r\n\r\n    /** Returns the value of `holder`\u0027s holdings */\r\n    function getValueOfHoldings(address holder) public view returns(uint256) {\r\n        return amountOut(_balances[holder]);\r\n    }\r\n\r\n    /** Returns Royalty Fee And Fee Recipient For Taxes */\r\n    function getFeeRecipient() public view returns (address) {\r\n        address recipient = royaltyTracker.getFeeRecipient();\r\n        return (recipient);\r\n    }\r\n    \r\n    ///////////////////////////////////\r\n    //////   OWNER FUNCTIONS    ///////\r\n    ///////////////////////////////////\r\n\r\n    function setDumpReceiver(address newReceiver) external onlyOwner {\r\n        require(\r\n            newReceiver != address(0),\r\n            \u0027Zero Address\u0027\r\n        );\r\n        dumpReceiver = newReceiver;\r\n        isTransferFeeExempt[dumpReceiver] = true;\r\n    }\r\n\r\n    /** Activates Token, Enabling Trading For All */\r\n    function activateToken() external onlyOwner {\r\n        tokenActivated = true;\r\n        emit TokenActivated(block.number);\r\n    }\r\n\r\n    /** Withdraws Tokens Incorrectly Sent To DUMP */\r\n    function withdrawForeignToken(IERC20 token) external onlyOwner {\r\n        require(address(token) != address(underlying), \u0027Cannot Withdraw Underlying Asset\u0027);\r\n        require(address(token) != address(0), \u0027Zero Address\u0027);\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    /** \r\n        Sells Tokens On Behalf Of Other User\r\n        Prevents lost funds from continuously appreciating\r\n     */\r\n    function sellDownAccount(address account, uint256 amount) external nonReentrant onlyOwner {\r\n        require(account != address(0), \u0027Zero Address\u0027);\r\n        require(_balances[account] \u003e= amount, \u0027Insufficient Amount\u0027);\r\n\r\n        // make tax exempt\r\n        isTransferFeeExempt[account] = true;\r\n        // sell tokens tax free on behalf of frozen wallet\r\n        _sell(\r\n            account, \r\n            amount,\r\n            account\r\n        );\r\n        // remove tax exemption\r\n        isTransferFeeExempt[account] = false;\r\n    }\r\n\r\n    /** \r\n        Sets Mint, Transfer, Sell Fee\r\n        Must Be Within Bounds ( Between 0% - 2% ) \r\n    */\r\n    function setFees(uint256 _mintFee, uint256 _transferFee, uint256 _sellFee) external onlyOwner {\r\n        require(_mintFee \u003e= 85000);       // capped at 15% fee\r\n        require(_transferFee \u003e= 85000);   // capped at 15% fee\r\n        require(_sellFee \u003e= 85000);       // capped at 15% fee\r\n        \r\n        mintFee = _mintFee;\r\n        transferFee = _transferFee;\r\n        sellFee = _sellFee;\r\n        emit SetFees(_mintFee, _transferFee, _sellFee);\r\n    }\r\n    \r\n    /** Excludes Contract From Transfer Fees */\r\n    function setPermissions(address Contract, bool transferFeeExempt) external onlyOwner {\r\n        require(Contract != address(0), \u0027Zero Address\u0027);\r\n        isTransferFeeExempt[Contract] = transferFeeExempt;\r\n        emit SetPermissions(Contract, transferFeeExempt);\r\n    }\r\n    \r\n    /** Mint Tokens to Buyer */\r\n    receive() external payable {\r\n        _mintWithNative(msg.sender, 0);\r\n        _checkGarbageCollector(address(this));\r\n        _checkGarbageCollector(DEAD);\r\n    }\r\n    \r\n    \r\n    ///////////////////////////////////\r\n    //////        EVENTS        ///////\r\n    ///////////////////////////////////\r\n    \r\n    // Data Tracking\r\n    event PriceChange(uint256 previousPrice, uint256 currentPrice, uint256 totalSupply);\r\n    event TokenActivated(uint blockNo);\r\n\r\n    // Balance Tracking\r\n    event Burn(address from, uint256 amountTokensErased);\r\n    event GarbageCollected(uint256 amountTokensErased);\r\n    event Redeemed(address seller, uint256 amountDUMP, uint256 amountBUSD);\r\n    event Minted(address recipient, uint256 numTokens);\r\n\r\n    // Governance Tracking\r\n    event SetPermissions(address Contract, bool feeExempt);\r\n    event SetFees(uint mintFee, uint transferFee, uint sellFee);\r\n}\r\n"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.14;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set \u0026 change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of \u0027require\u0027 evaluates to \u0027false\u0027, execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use \u0027require\u0027 to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // \u0027msg.sender\u0027 is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}"},"ReentrantGuard.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"}}