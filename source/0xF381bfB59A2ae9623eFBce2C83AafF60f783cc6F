
// File: contracts/CukiesStakePoints.sol
pragma solidity ^0.5.4;

import "./SafeMath.sol";
import "./ITRC721.sol";
import "./ICukie.sol";
import "./ICukiesPoints.sol";
import "./Ownable.sol";

contract CukiesStakePoints is Ownable {
    using SafeMath for uint256;


    mapping(address => uint256[]) public userTokens;
    mapping(uint256 => address) public tokenOwner;
    mapping(uint256 => uint256) public cukiesDate;

    mapping(uint256 => uint256) public pointsToType;
    
    uint256 public maxCukies;

    event Stake(
        address indexed user,
        uint256 tokenId,
        uint256 date
    ); 

    event Unstake(
        address indexed user,
        uint256 tokenId,
        uint256 date,
        uint256 points
    ); 

    ICukie public cukieToken;
    ICukiesPoints public cukiePoints;
    bool pause = false;
    uint256 pause_at;

    constructor() public {
        pause = false;
        maxCukies = 10;
    }

    function changePointsToType(uint256 _type, uint256 _value) public onlyOwner {
        pointsToType[_type] = _value.mul(1e7).div(86400);
    }
    

    function changeMaxCukies(uint256 _maxCukies) public onlyOwner {
        maxCukies = _maxCukies;
    }

    function changeToken(ICukie _cukieToken) public onlyOwner {
        cukieToken = _cukieToken;
    }

    function changePause(bool _pause) public onlyOwner {
        pause = _pause;
        if(pause) {
            pause_at = now;
        } else {
            pause_at = now + 365 days;
        }
    }

    function changePoints(ICukiesPoints _cukiePoints) public onlyOwner {
        cukiePoints = _cukiePoints;
    }

    function ownerCukie(uint256 _tokenId) view public returns(address) {
        return cukieToken.ownerOf(_tokenId);
    }
    // TODO: getTokensOwner
    function getTokensOwner(address _address) view public returns(uint256[] memory) {
        return userTokens[_address];
    }

    function recovery(uint256 _tokenId) public onlyOwner {
        cukieToken.transferFrom(address(this), tokenOwner[_tokenId], _tokenId);
    }

    function stake(uint256 _tokenId) public {
        require(pause == false);
        require(userTokens[msg.sender].length < maxCukies);
        require(cukieToken.ownerOf(_tokenId) == msg.sender);
        ( uint256 generacion1 , , , , , , , , ) = (cukieToken.getCukie(_tokenId));
        require(generacion1 == 1);

        tokenOwner[_tokenId] = msg.sender;
        userTokens[msg.sender].push(_tokenId);
        cukiesDate[_tokenId] = now;

        // Realizamos el transfer del token al contrato
        cukieToken.transferFrom(msg.sender, address(this), _tokenId);

        emit Stake(msg.sender, _tokenId, now);
    }

    function unstake(uint256 _tokenId) public {
        require(tokenOwner[_tokenId] == msg.sender);

        // Devolvemos el cukie
        cukieToken.transferFrom(address(this), tokenOwner[_tokenId], _tokenId);
        
        // asignamos los puntos que le token
        uint256 points = calcPoints(_tokenId);
        cukiePoints.mint(tokenOwner[_tokenId], points);

        delete tokenOwner[_tokenId];
        uint256[] memory newArray = remove(userTokens[msg.sender], _tokenId);
        delete(userTokens[msg.sender]);
        userTokens[msg.sender] = newArray;
        delete cukiesDate[_tokenId];
        
        emit Unstake(msg.sender, _tokenId, now, points);
    }

    function remove(uint256[] memory array, uint _tokenId) private pure returns(uint256[] memory) {
        require(array.length > 0);

        if(array.length-1 == 0) return new uint256[](0);
        
        uint256[] memory newArray = new uint256[](array.length-1);
        uint y = 0;
        for (uint i = 0; i<array.length; i++){
            if(array[i] != _tokenId) {
                newArray[y] = array[i];
                y = y + 1;
            }
        }
        return newArray;
    }

    function calcPoints(uint256 _tokenId) public view returns (uint256) {
        // TODO: poner fecha de cierre si ya se ha acabado el pool
        uint256 ago;
        if(pause) {
            ago = pause_at.sub(cukiesDate[_tokenId]);
        } else {
            ago = now.sub(cukiesDate[_tokenId]);
        }

        return ago.mul(pointsToType[getType(_tokenId)]).div(1e7);
    }

    function getType(uint256 _tokenId) public pure returns (uint256) {
        return (_tokenId/1e12) - ((_tokenId/1e14) * (2));
    }
}

// File: contracts/SafeMath.sol
pragma solidity ^0.5.4;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     *
     * _Available since v2.4.0._
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

// File: contracts/ITRC721.sol
pragma solidity ^0.5.4;

import './ITRC165.sol';

/**
 * @dev Required interface of an TRC721 compliant contract.
 */
contract ITRC721 is ITRC165 {
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of NFTs in `owner`'s account.
     */
    function balanceOf(address owner) public view returns (uint256 balance);

    /**
     * @dev Returns the owner of the NFT specified by `tokenId`.
     */
    function ownerOf(uint256 tokenId) public view returns (address owner);

    /**
     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to
     * another (`to`).
     *
     *
     *
     * Requirements:
     * - `from`, `to` cannot be zero.
     * - `tokenId` must be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this
     * NFT by either {approve} or {setApprovalForAll}.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) public;
    /**
     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to
     * another (`to`).
     *
     * Requirements:
     * - If the caller is not `from`, it must be approved to move this NFT by
     * either {approve} or {setApprovalForAll}.
     */
    function transferFrom(address from, address to, uint256 tokenId) public;
    function approve(address to, uint256 tokenId) public;
    function getApproved(uint256 tokenId) public view returns (address operator);

    function setApprovalForAll(address operator, bool _approved) public;
    function isApprovedForAll(address owner, address operator) public view returns (bool);


    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
}

// File: contracts/ICukie.sol
pragma solidity ^0.5.4;


import './ITRC721.sol';
import './ITRC721Metadata.sol';


/**
 * @title TRC721MetadataMintable
 * @dev TRC721 minting logic with metadata.
 */
contract ICukie is ITRC721, ITRC721Metadata {
    
    function mintWithTokenURI(address to, uint256 typeId, uint256 generation, uint8[6] memory skills, uint8 energy, uint8 health) public returns (bool);
    function mintWithTokenURI(address to, uint256 typeId, uint256 generation, uint8[6] memory skills, uint8 energy, uint8 health, uint256 tokenId) public returns (bool);
    function totalSupply() public view returns (uint256);
    function getType(uint256 _index)  view public returns (uint256 ,  
                                                    uint256 , 
                                                    uint256 , 
                                                    uint256 );

    function addType(uint256 probability, uint256 tokenId) public;
    function burn(uint256 nftId) public;

    function getCukie(uint256 index) view public returns (uint256, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8);

    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);

}


// File: contracts/ICukiesPoints.sol
pragma solidity ^0.5.4;


interface ICukiesPoints {

    function mint(address to, uint256 points) external;

    function burn(address to, uint256 points) external;

    function getPoints(address _address) external view returns(uint256);

    function getTotalPointsEmited() external view returns(uint256);
    
    function getTotalPoints() external view returns(uint256);

}

// File: contracts/Ownable.sol
pragma solidity ^0.5.4;


/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address private _owner;


  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public {
    _owner = msg.sender;
  }

  /**
   * @return the address of the owner.
   */
  function owner() public view returns(address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(isOwner());
    _;
  }

  /**
   * @return true if `msg.sender` is the owner of the contract.
   */
  function isOwner() public view returns(bool) {
    return msg.sender == _owner;
  }

  /**
   * @dev Allows the current owner to relinquish control of the contract.
   * @notice Renouncing to ownership will leave the contract without an owner.
   * It will not be possible to call the functions with the `onlyOwner`
   * modifier anymore.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(_owner);
    _owner = address(0);
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0));
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

// File: contracts/ITRC165.sol
pragma solidity ^0.5.4;

/**
 * @dev Interface of the TRC165 standard.
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({TRC165Checker}).
 *
 * For an implementation, see {TRC165}.
 */
interface ITRC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: contracts/ITRC721Metadata.sol

pragma solidity ^0.5.4;
/**
 * @title TRC-721 Non-Fungible Token Standard, optional metadata extension
 */
import './ITRC721.sol';
 
contract ITRC721Metadata is ITRC721 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function tokenURI(uint256 tokenId) external view returns (string memory);
}
