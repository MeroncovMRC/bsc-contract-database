{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance \u003e= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance \u003e= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"DeuxSpecialSale.sol":{"content":"// SPDX-License-Identifier: MIT\n// DEUX Special Sale and Lock Contract\n// Mens et Manus\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ncontract DeuxSaleLock is Context, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    //Lock needs\n    struct Items {\n        address tokenAddress;\n        address withdrawalAddress;\n        uint256 tokenAmount;\n        uint256 unlockTime;\n        bool withdrawn;\n    }\n\n    uint256 public lockId;\n    uint256[] public allLockIds;\n    mapping(address =\u003e uint256) public totalLockedAmounts;\n\n    mapping(address =\u003e uint256[]) public depositsByWithdrawalAddress;\n    mapping(uint256 =\u003e Items) public lockedToken;\n    mapping(address =\u003e mapping(address =\u003e uint256)) public walletTokenBalance;\n    mapping(bytes32 =\u003e mapping(address =\u003e uint256)) private saleLimits;\n    mapping(address =\u003e mapping(address =\u003e bool)) public bannedAddress;\n    mapping(address =\u003e bool) public tokenClaimStatusList;\n\n    event LogWithdrawal(address SentToAddress, uint256 AmountTransferred);\n\n    // Sale needs\n    struct Pair {\n        address token0;\n        uint256 t0decimal;\n        address token1;\n        uint256 t1decimal;\n        uint256 price;\n        uint256 provision;\n        address receiver;\n        uint256 minCap;\n        uint256 maxCap;\n        uint256[] lockPercentList;\n        uint256[] lockTimestampList;\n        bool active;\n    }\n\n    mapping(address =\u003e bool) public buyLimitStatusList;\n    mapping(address =\u003e bool) public tokenLockStatusList;\n    mapping(address =\u003e bool) public tokenSaleWhitelistingStatusList;\n\n    mapping(address =\u003e mapping(address =\u003e bool)) public tokenSaleWhiteList;\n    mapping(address =\u003e mapping(address =\u003e uint256)) public buyLimitList;\n    mapping(address =\u003e Pair) public tokenPairList;\n\n    // Add one address to Whitelisting List\n    function addSingleAccountToWhitelist(address _token, address _addr)\n        external\n        onlyOwner\n    {\n        tokenSaleWhiteList[_token][_addr] = true;\n    }\n\n    // Remove one address from Whitelisting List\n    function removeSingleAccountFromWhitelist(address _token, address _addr)\n        external\n        onlyOwner\n    {\n        tokenSaleWhiteList[_token][_addr] = false;\n    }\n\n    // Add address to Whitelisting List\n    function addMultipleAccountToWhitelist(\n        address _token,\n        address[] memory _addrs\n    ) external onlyOwner {\n        for (uint256 i = 0; i \u003c _addrs.length; i++) {\n            tokenSaleWhiteList[_token][_addrs[i]] = true;\n        }\n    }\n\n    // Remove address from Whitelisting List\n    function removeMultipleAccountFromWhitelist(\n        address _token,\n        address[] memory _addrs\n    ) external onlyOwner {\n        for (uint256 i = 0; i \u003c _addrs.length; i++) {\n            tokenSaleWhiteList[_token][_addrs[i]] = false;\n        }\n    }\n\n    // Add single address buy limit to list\n    function addSingleAccountToBuyLimitList(\n        address _token,\n        address _addr,\n        uint256 _amount\n    ) external onlyOwner {\n        buyLimitList[_token][_addr] = _amount;\n    }\n\n    // Remove single address buy limit on list\n    function removeSingleAccountFromBuyLimitList(address _token, address _addr)\n        external\n        onlyOwner\n    {\n        buyLimitList[_token][_addr] = 0;\n    }\n\n    // Set multiple address buy limit\n    function addMultipleAccountToBuyLimitList(\n        address _token,\n        address[] memory _addrs,\n        uint256[] memory _amounts\n    ) external onlyOwner {\n        require(\n            _addrs.length == _amounts.length,\n            \"DEUX : address for buy limit amounts length error\"\n        );\n        for (uint256 i = 0; i \u003c _addrs.length; i++) {\n            buyLimitList[_token][_addrs[i]] = _amounts[i];\n        }\n    }\n\n    // Remove multiple address buy limit on list\n    function removeMultipleAccountFromBuyLimitList(\n        address _token,\n        address[] memory _addrs\n    ) external onlyOwner {\n        for (uint256 i = 0; i \u003c _addrs.length; i++) {\n            buyLimitList[_token][_addrs[i]] = 0;\n        }\n    }\n\n    // Get address buy limit amount\n    function getAddressBuyLimit(address _token, address _addr)\n        external\n        view\n        returns (uint256)\n    {\n        return (buyLimitList[_token][_addr]);\n    }\n\n    // Get available buy limit on active pair for an address\n    function getAddressBuyLimitLeft(address _addr, address _token)\n        external\n        view\n        returns (uint256)\n    {\n        Pair memory _pair = _getTokenPair(_token);\n        // Check buy limit\n        if (buyLimitStatusList[_pair.token1]) {\n            return\n                buyLimitList[_pair.token1][_addr] -\n                saleLimits[_getSalePairKey(_pair)][_addr];\n        } else {\n            return _pair.maxCap - saleLimits[_getSalePairKey(_pair)][_addr];\n        }\n    }\n\n    // Get address whitelisting status for a token\n    function getAddressWhiteListStatus(address _token, address _addr)\n        external\n        view\n        returns (bool)\n    {\n        return (tokenSaleWhiteList[_token][_addr]);\n    }\n\n    // Get address ban status\n    function getAddressBanStatus(address _token, address _addr)\n        external\n        view\n        returns (bool)\n    {\n        return (bannedAddress[_token][_addr]);\n    }\n\n    // Add single address buy limit to list\n    function addSingleAccountToBannedList(address _token, address _addr)\n        external\n        onlyOwner\n    {\n        bannedAddress[_token][_addr] = true;\n    }\n\n    // Remove single address banned\n    function removeSingleAccountFromBannedList(address _token, address _addr)\n        external\n        onlyOwner\n    {\n        bannedAddress[_token][_addr] = false;\n    }\n\n    // Set token claim status\n    function setTokenClaimStatus(address _token, bool _status)\n        external\n        onlyOwner\n    {\n        tokenClaimStatusList[_token] = _status;\n    }\n\n    // Contract sale limit for whitelisting is active or passive\n    function setSaleWhitelistingStatus(\n        address _token,\n        bool _saleWhiteListingStatus\n    ) external onlyOwner {\n        tokenSaleWhitelistingStatusList[_token] = _saleWhiteListingStatus;\n    }\n\n    // Contract buy limit status for token via crowedsale active or passive\n    function setBuyLimitStatus(address _token, bool _buyLimitStatus)\n        external\n        onlyOwner\n    {\n        buyLimitStatusList[_token] = _buyLimitStatus;\n    }\n\n    // Contract Lock status for token via crowedsale active or passive\n    function setTokensLockStatus(address _token, bool _lockActive)\n        external\n        onlyOwner\n    {\n        tokenLockStatusList[_token] = _lockActive;\n    }\n\n    // Setting Pairs for sale and Lock\n    function setTokenSalePair(\n        address _token0,\n        uint8 _token0decimal,\n        address _token1,\n        uint8 _token1decimal,\n        uint256 _price,\n        uint256 _provision,\n        address _receiver,\n        uint256 _minCap,\n        uint256 _maxCap,\n        uint256[] memory _lockPercents,\n        uint256[] memory _lockTimestamps\n    ) external onlyOwner {\n        uint256[] memory _lockPercentList = new uint256[](_lockPercents.length);\n        uint256[] memory _lockTimestampList = new uint256[](\n            _lockTimestamps.length\n        );\n\n        // Pair check\n        require(tokenPairList[_token1].active == false, \"Pair already defined\");\n\n        // Set LockPercentList for pair\n        require(\n            _lockPercents.length == _lockTimestamps.length,\n            \"Deux : percent list length check error\"\n        );\n        uint256 totalPercent = 0;\n        for (uint256 i = 0; i \u003c _lockPercents.length; i++) {\n            require(_lockPercents[i] \u003e 0, \"DEUX : percentage can not be zero\");\n            totalPercent += _lockPercents[i];\n        }\n        require(\n            totalPercent == 100,\n            \"DEUX : Total percentage must be equal 100\"\n        );\n\n        for (uint256 i = 0; i \u003c _lockPercents.length; i++) {\n            _lockPercentList[i] = _lockPercents[i];\n        }\n\n        // Set LockTimeStamp List for pair\n        for (uint256 i = 0; i \u003c _lockTimestamps.length; i++) {\n            require(\n                _lockTimestamps[i] \u003e block.timestamp,\n                \"DEUX : unlock timestamp should be higher than current time\"\n            );\n        }\n\n        for (uint256 i = 0; i \u003c _lockTimestamps.length; i++) {\n            _lockTimestampList[i] = _lockTimestamps[i];\n        }\n\n        tokenPairList[_token1].token0 = _token0;\n        tokenPairList[_token1].t0decimal = _token0decimal;\n        tokenPairList[_token1].token1 = _token1;\n        tokenPairList[_token1].t1decimal = _token1decimal;\n        tokenPairList[_token1].price = _price;\n        tokenPairList[_token1].provision = _provision;\n        tokenPairList[_token1].receiver = _receiver;\n        tokenPairList[_token1].minCap = _minCap;\n        tokenPairList[_token1].maxCap = _maxCap;\n        tokenPairList[_token1].lockPercentList = _lockPercentList;\n        tokenPairList[_token1].lockTimestampList = _lockTimestampList;\n        tokenPairList[_token1].active = true;\n\n        // Set default claim status to false\n        tokenClaimStatusList[_token1] = false;\n        // Set default buy limit status to true\n        buyLimitStatusList[_token1] = true;\n        // Set default whitelisting status to true\n        tokenSaleWhitelistingStatusList[_token1] = true;\n        // Set default lock status to true\n        tokenLockStatusList[_token1] = true;\n    }\n\n    function deleteTokenPair(address _token) external onlyOwner {\n        delete tokenPairList[_token];\n    }\n\n    function getTokenPairDetails(address _token)\n        external\n        view\n        returns (Pair memory)\n    {\n        return _getTokenPair(_token);\n    }\n\n    function _getTokenPair(address _token) internal view returns (Pair memory) {\n        return tokenPairList[_token];\n    }\n\n    // Get sale pair key\n    function _getSalePairKey(Pair memory _pair)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_pair.token0, _pair.token1));\n    }\n\n    // Get available sale limit for signer address\n    function _getSignerBuyedAmount(Pair memory _pair)\n        internal\n        view\n        returns (uint256)\n    {\n        return saleLimits[_getSalePairKey(_pair)][_msgSender()];\n    }\n\n    // Here Update sale limit function for call inside\n    function _increaseSignerSaleLimit(uint256 _limit, Pair memory _pair)\n        internal\n    {\n        saleLimits[_getSalePairKey(_pair)][_msgSender()] = saleLimits[\n            _getSalePairKey(_pair)\n        ][_msgSender()].add(_limit);\n    }\n\n    // Here Get Liquidity function for call inside\n    function _getLiquidity(address _token) internal view returns (uint256) {\n        return IERC20(_token).balanceOf(address(this));\n    }\n\n    // Internal total locked token show\n    function _calculateTotalTokenLocked(address _token)\n        internal\n        view\n        returns (uint256)\n    {\n        return totalLockedAmounts[_token];\n    }\n\n    // Multiple lock internal function\n    function _createMultipleLocks(\n        address _tokenAddress,\n        address _withdrawalAddress,\n        uint256[] memory _amounts,\n        uint256[] memory _unlockTimes\n    ) internal returns (uint256 _id) {\n        require(\n            _amounts.length \u003e 0,\n            \"DEUX : amounts array length cannot be zero\"\n        );\n        require(\n            _amounts.length == _unlockTimes.length,\n            \"DEUX : amounts array length and unlock timestamp array length must same\"\n        );\n\n        uint256 i;\n        for (i = 0; i \u003c _amounts.length; i++) {\n            require(_amounts[i] \u003e 0, \"DEUX : amount cannot be zero\");\n            require(\n                _unlockTimes[i] \u003c 10000000000,\n                \"DEUX : timestamp must be smaller then 10000000000\"\n            );\n\n            //update balance in address\n            walletTokenBalance[_tokenAddress][\n                _withdrawalAddress\n            ] = walletTokenBalance[_tokenAddress][_withdrawalAddress].add(\n                _amounts[i]\n            );\n\n            totalLockedAmounts[_tokenAddress] = totalLockedAmounts[\n                _tokenAddress\n            ].add(_amounts[i]);\n\n            _id = ++lockId;\n            lockedToken[_id].tokenAddress = _tokenAddress;\n            lockedToken[_id].withdrawalAddress = _withdrawalAddress;\n            lockedToken[_id].tokenAmount = _amounts[i];\n            lockedToken[_id].unlockTime = _unlockTimes[i];\n            lockedToken[_id].withdrawn = false;\n\n            allLockIds.push(_id);\n            depositsByWithdrawalAddress[_withdrawalAddress].push(_id);\n        }\n    }\n\n    // Calculate time for tokens\n    function _calculateSendAmount(uint256 _amount, Pair memory _pair)\n        internal\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256[] memory\n        )\n    {\n        require(\n            _amount \u003e _pair.price,\n            \"DEUX : given amount should be higher than unit price\"\n        );\n\n        uint256[] memory lockAmounts = new uint256[](\n            _pair.lockPercentList.length\n        );\n        uint256 dustAmount = _amount % _pair.price; // Dust amount for refund\n        uint256 allowAmount = _amount.sub(dustAmount); // Accept amount for sell\n        uint256 ratio = allowAmount.div(_pair.price); // Sell ratio\n        uint256 allTransferSize = _pair.provision.mul(ratio); // Transfer before lock applied\n\n        uint256 signersAlreadyBuyedAmount = _getSignerBuyedAmount(_pair); // Get transfer limit for signer\n\n        // Limit Check\n        if (!buyLimitStatusList[_pair.token1]) {\n            require(\n                allowAmount \u003e= _pair.minCap,\n                \"DEUX : acceptable amount is lower than min cap\"\n            );\n\n            require(\n                allowAmount \u003c= _pair.maxCap,\n                \"DEUX : acceptable amount is higher than max cap\"\n            );\n        }\n\n        uint256 totalBuyedAmountAfterSale = signersAlreadyBuyedAmount.add(\n            allowAmount\n        );\n\n        // Check for limits\n        if (buyLimitStatusList[_pair.token1]) {\n            require(\n                totalBuyedAmountAfterSale \u003c=\n                    buyLimitList[_pair.token1][_msgSender()],\n                \"DEUX : signer buy limit is not enough\"\n            );\n        } else {\n            require(\n                totalBuyedAmountAfterSale \u003c= _pair.maxCap,\n                \"DEUX : total buyed amount will higher than max cap after transfer\"\n            );\n        }\n\n        // Calculate tokens buy lockpercent\n        for (uint256 i = 0; i \u003c _pair.lockPercentList.length; i++) {\n            uint256 lockPercent = _pair.lockPercentList[i];\n            uint256 lockAmount = allTransferSize.div(100).mul(lockPercent);\n            lockAmounts[i] = lockAmount;\n        }\n\n        require(\n            lockAmounts.length \u003e 0,\n            \"DEUX : lock amounts calculation failed\"\n        );\n\n        return (allowAmount, allTransferSize, dustAmount, lockAmounts);\n    }\n\n    // Check for buy\n    function _beforeBuy(uint256 _amount, Pair memory _pair)\n        internal\n        view\n        returns (bool)\n    {\n        require(_pair.active == true, \"DEUX : pair is not active\");\n        require(\n            _pair.receiver != address(0),\n            \"DEUX : receiver is zero address\"\n        );\n        require(\n            _pair.token1 != address(0),\n            \"DEUX : sale contract is not defined\"\n        );\n\n        // Check whitelisting status\n        if (tokenSaleWhitelistingStatusList[_pair.token1]) {\n            require(\n                tokenSaleWhiteList[_pair.token1][_msgSender()],\n                \"DEUX : signer is not in whitelist\"\n            );\n        }\n\n        // Check buy limit\n        if (buyLimitStatusList[_pair.token1]) {\n            require(\n                buyLimitList[_pair.token1][_msgSender()] \u003e= _amount,\n                \"DEUX : signer buy limit is not enough\"\n            );\n        }\n\n        // Check signer allowance for sale\n        uint256 signerAllowance = IERC20(_pair.token0).allowance(\n            _msgSender(),\n            address(this)\n        );\n\n        require(\n            signerAllowance \u003e= _amount,\n            \"DEUX : signer allowance required for pair.token0\"\n        );\n\n        return true;\n    }\n\n    // Buy some tokens and lock them all\n    function buy(uint256 _amount, address _token) external {\n        Pair memory _pair = _getTokenPair(_token);\n        require(\n            _beforeBuy(_amount, _pair) == true,\n            \"DEUX : buy is not allowed currently\"\n        );\n\n        // Calculate allowed amount, transfer size \u0026 dust amount for refund\n        (\n            uint256 _allowAmount,\n            uint256 _allTransferSize,\n            uint256 _dustAmount,\n            uint256[] memory _lockAmounts\n        ) = _calculateSendAmount(_amount, _pair);\n\n        // Check liquidity\n        require(\n            _allTransferSize \u003c= _getLiquidity(_token),\n            \"DEUX : insufficient liquidity for token1\"\n        );\n\n        // Send token0 to current contract\n        SafeERC20.safeTransferFrom(\n            IERC20(_pair.token0),\n            _msgSender(),\n            address(this),\n            _amount\n        );\n\n        // Send allowAmount token0 to receiver\n        SafeERC20.safeTransfer(\n            IERC20(_pair.token0),\n            _pair.receiver,\n            _allowAmount\n        );\n\n        // Send dustAmount to signer if exist\n        if (_dustAmount \u003e 0) {\n            SafeERC20.safeTransfer(\n                IERC20(_pair.token0),\n                _msgSender(),\n                _dustAmount\n            );\n        }\n\n        if (tokenLockStatusList[_pair.token1]) {\n            _increaseSignerSaleLimit(_allowAmount, _pair);\n\n            // Create locks in contract for future\n            uint256 lockSuccess = _createMultipleLocks(\n                _pair.token1,\n                _msgSender(),\n                _lockAmounts,\n                _pair.lockTimestampList\n            );\n\n            require(lockSuccess \u003e 0, \"DEUX : lock call is failed\");\n        } else {\n            _increaseSignerSaleLimit(_allowAmount, _pair);\n\n            // Send token1 to caller\n            SafeERC20.safeTransfer(\n                IERC20(_pair.token1),\n                _msgSender(),\n                _allTransferSize\n            );\n        }\n    }\n\n    // Add some token to contract for sale and lock\n    function addLiquidity(uint256 _amount, address _token) external onlyOwner {\n        Pair memory _pair = _getTokenPair(_token);\n        uint256 allowance = IERC20(_pair.token1).allowance(\n            _msgSender(),\n            address(this)\n        );\n        require(allowance \u003e= _amount, \"DEUX : allowance is not enough\");\n        SafeERC20.safeTransferFrom(\n            IERC20(_pair.token1),\n            _msgSender(),\n            address(this),\n            _amount\n        );\n    }\n\n    // Owner Calls Remove Liquidity from contract\n    function removeLiquidity(\n        address _to,\n        uint256 _amount,\n        address _token\n    ) external onlyOwner {\n        Pair memory _pair = _getTokenPair(_token);\n        require(_to != address(0), \"DEUX : to address is zero address\");\n        require(\n            _getLiquidity(_token) \u003e= _amount,\n            \"DEUX : insufficient liquidity\"\n        );\n\n        require(\n            _calculateTotalTokenLocked(_pair.token1) \u003c=\n                _getLiquidity(_token) - _amount,\n            \"DEUX : there are locked tokens you can not remove locked tokens\"\n        );\n        SafeERC20.safeTransfer(IERC20(_pair.token1), _to, _amount);\n    }\n\n    // Add liquidity with contract address\n    function addLiquidityWithContract(address _contract, uint256 _amount)\n        external\n        onlyOwner\n    {\n        uint256 allowance = IERC20(_contract).allowance(\n            _msgSender(),\n            address(this)\n        );\n        require(allowance \u003e= _amount, \"DEUX : allowance is not enough\");\n        SafeERC20.safeTransferFrom(\n            IERC20(_contract),\n            _msgSender(),\n            address(this),\n            _amount\n        );\n    }\n\n    // Remove liquidity with contract address\n    function removeLiquidityWithContract(\n        address _contract,\n        address _to,\n        uint256 _amount\n    ) external onlyOwner {\n        require(_to != address(0), \"DEUX : to address is zero address\");\n        require(\n            IERC20(_contract).balanceOf(address(this)) \u003e= _amount,\n            \"DEUX : insufficient liquidity\"\n        );\n\n        require(\n            _calculateTotalTokenLocked(_contract) \u003c=\n                IERC20(_contract).balanceOf(address(this)) - _amount,\n            \"DEUX : there are locked tokens, you can not remove locked tokens\"\n        );\n\n        SafeERC20.safeTransfer(IERC20(_contract), _to, _amount);\n    }\n\n    // Transfer owner status for locked tokens\n    function transferLocks(uint256 _id, address _receiverAddress) external {\n        require(!lockedToken[_id].withdrawn, \"DEUX : amount already withdrawn\");\n        require(\n            _msgSender() == lockedToken[_id].withdrawalAddress,\n            \"DEUX : this is not your token dude\"\n        );\n\n        // Senders token balance now decrease\n        walletTokenBalance[lockedToken[_id].tokenAddress][\n            _msgSender()\n        ] = walletTokenBalance[lockedToken[_id].tokenAddress][_msgSender()].sub(\n            lockedToken[_id].tokenAmount\n        );\n\n        // Receivers token balance now increase\n        walletTokenBalance[lockedToken[_id].tokenAddress][\n            _receiverAddress\n        ] = walletTokenBalance[lockedToken[_id].tokenAddress][_receiverAddress]\n            .add(lockedToken[_id].tokenAmount);\n\n        // Remove id from sender address\n        uint256 j;\n        uint256 arrLength = depositsByWithdrawalAddress[\n            lockedToken[_id].withdrawalAddress\n        ].length;\n        for (j = 0; j \u003c arrLength; j++) {\n            if (\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][\n                    j\n                ] == _id\n            ) {\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][\n                    j\n                ] = depositsByWithdrawalAddress[\n                    lockedToken[_id].withdrawalAddress\n                ][arrLength - 1];\n\n                break;\n            }\n        }\n\n        // Assign id to receiver address\n        lockedToken[_id].withdrawalAddress = _receiverAddress;\n        depositsByWithdrawalAddress[_receiverAddress].push(_id);\n    }\n\n    // Ready for withdraw tokens from contract\n    function withdrawTokens(uint256 _id) external {\n        require(\n            !bannedAddress[lockedToken[_id].tokenAddress][_msgSender()],\n            \"DEUX: sender address banned to claim for this token\"\n        );\n        require(\n            tokenClaimStatusList[lockedToken[_id].tokenAddress] == true,\n            \"DEUX : token claim status is not ready\"\n        );\n        require(\n            block.timestamp \u003e= lockedToken[_id].unlockTime,\n            \"DEUX : unlocktime should smaller then block timestamp\"\n        );\n        require(\n            _msgSender() == lockedToken[_id].withdrawalAddress,\n            \"DEUX : this is not your token dude\"\n        );\n        require(!lockedToken[_id].withdrawn, \"DEUX : amount already withdrawn\");\n\n        lockedToken[_id].withdrawn = true;\n\n        // Update balance in address\n        walletTokenBalance[lockedToken[_id].tokenAddress][\n            _msgSender()\n        ] = walletTokenBalance[lockedToken[_id].tokenAddress][_msgSender()].sub(\n            lockedToken[_id].tokenAmount\n        );\n\n        // Amount remove from totalLockList\n        totalLockedAmounts[lockedToken[_id].tokenAddress] = totalLockedAmounts[\n            lockedToken[_id].tokenAddress\n        ].sub(lockedToken[_id].tokenAmount);\n\n        // Remove id from this address\n        uint256 j;\n        uint256 arrLength = depositsByWithdrawalAddress[\n            lockedToken[_id].withdrawalAddress\n        ].length;\n        for (j = 0; j \u003c arrLength; j++) {\n            if (\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][\n                    j\n                ] == _id\n            ) {\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][\n                    j\n                ] = depositsByWithdrawalAddress[\n                    lockedToken[_id].withdrawalAddress\n                ][arrLength - 1];\n\n                break;\n            }\n        }\n\n        // Everything is ok now, transfer tokens to wallet address\n        require(\n            IERC20(lockedToken[_id].tokenAddress).transfer(\n                _msgSender(),\n                lockedToken[_id].tokenAmount\n            ),\n            \"DEUX : error while transfer tokens\"\n        );\n\n        emit LogWithdrawal(_msgSender(), lockedToken[_id].tokenAmount);\n    }\n\n    // Get total token balance in contract of given token address\n    function getContractTotalTokenBalance(address _tokenAddress)\n        external\n        view\n        returns (uint256)\n    {\n        return IERC20(_tokenAddress).balanceOf(address(this));\n    }\n\n    // Get total token balance of wallets given token address\n    function getTokenBalanceByAddress(\n        address _tokenAddress,\n        address _walletAddress\n    ) external view returns (uint256) {\n        return walletTokenBalance[_tokenAddress][_walletAddress];\n    }\n\n    // Get All Lock Ids\n    function getAllLockIds() external view returns (uint256[] memory) {\n        return allLockIds;\n    }\n\n    // Get Lock Details\n    function getLockDetails(uint256 _id)\n        external\n        view\n        returns (\n            address _tokenAddress,\n            address _withdrawalAddress,\n            uint256 _tokenAmount,\n            uint256 _unlockTime,\n            bool _withdrawn\n        )\n    {\n        return (\n            lockedToken[_id].tokenAddress,\n            lockedToken[_id].withdrawalAddress,\n            lockedToken[_id].tokenAmount,\n            lockedToken[_id].unlockTime,\n            lockedToken[_id].withdrawn\n        );\n    }\n\n    // Get Deposits By Withdrawal Address\n    function getDepositsByWithdrawalAddress(address _withdrawalAddress)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return depositsByWithdrawalAddress[_withdrawalAddress];\n    }\n\n    // Creating Multiple Locks for token in contract\n    function createMultipleLocks(\n        address _tokenAddress,\n        address _withdrawalAddress,\n        uint256[] memory _amounts,\n        uint256[] memory _unlockTimes\n    ) external returns (uint256 _id) {\n        return\n            _createMultipleLocks(\n                _tokenAddress,\n                _withdrawalAddress,\n                _amounts,\n                _unlockTimes\n            );\n    }\n}\n\n// Made with love.\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance \u003e= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}