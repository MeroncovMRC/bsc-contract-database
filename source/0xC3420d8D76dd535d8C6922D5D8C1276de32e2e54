// File: contracts/libraries/Roles.sol

pragma solidity ^0.6.2;

/**
 * @title Roles
 * @dev Library for managing addresses assigned to a Role.
 */
library Roles {
    struct Role {
        mapping (address => bool) bearer;
    }

    /**
     * @dev Give an account access to this role.
     */
    function add(Role storage role, address account) internal {
        require(!has(role, account), "Roles: account already has role");
        role.bearer[account] = true;
    }

    /**
     * @dev Remove an account's access to this role.
     */
    function remove(Role storage role, address account) internal {
        require(has(role, account), "Roles: account does not have role");
        role.bearer[account] = false;
    }

    /**
     * @dev Check if an account has this role.
     * @return bool
     */
    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0), "Roles: account is the zero address");
        return role.bearer[account];
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


pragma solidity >=0.6.0 <0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: contracts/EventMirror.sol


pragma solidity ^0.6.2;


contract EventMirror is Ownable {

    using Roles for Roles.Role;

    Roles.Role private managerRole; // token addresses that use mirrors

    address[] public managers;

    event ExchangeLog(
        address indexed token_a,
        address indexed token_b,
        string brand_a,
        string brand_b,
        uint256 amount_a,
        uint256 amount_b
    );

    event RevertExchangeLog(
        address indexed token_a,
        address indexed token_b,
        bytes32 indexed reversed_tx_hash,
        string brand_a,
        string brand_b,
        uint256 amount_a,
        uint256 amount_b
    );

    event EarnLog(
        address indexed token,
        string brand,
        uint256 amount,
        string user_id
    );

    event DebitLog(
        address indexed token,
        string brand,
        uint256 amount,
        string user_id
    );

    modifier onlyManagers() {
        require(Roles.has(managerRole, msg.sender), "Unauthorized");
        _;
    }

    constructor() public Ownable() {
        Roles.add(managerRole, msg.sender);
        managers.push(msg.sender);
    }

    function exchange(
        address token_a,
        address token_b,
        string memory brand_a,
        string memory brand_b,
        uint256 amount_a,
        uint256 amount_b
    ) public onlyManagers {
        emit ExchangeLog(
            token_a,
            token_b,
            brand_a,
            brand_b,
            amount_a,
            amount_b
        );
    }

    function revertExchange(
        address token_a,
        address token_b,
        bytes32 reversed_tx_hash,
        string memory brand_a,
        string memory brand_b,
        uint256 amount_a,
        uint256 amount_b
    ) public onlyManagers {
        emit RevertExchangeLog(
            token_a,
            token_b,
            reversed_tx_hash,
            brand_a,
            brand_b,
            amount_a,
            amount_b
        );
    }

    function earn(address token, string memory brand, uint256 amount, string memory user_id) public onlyManagers {
        emit EarnLog(token, brand, amount, user_id);
    }

    function debit(
        address token,
        string memory brand,
        uint256 amount,
        string memory user_id
    ) public onlyManagers {
        emit DebitLog(token, brand, amount, user_id);
    }


    function addManagerAddress(address addr) external onlyOwner {
        Roles.add(managerRole, addr);
        managers.push(addr);
    }

    function removeManagerAddress(address addr) external onlyOwner {
        Roles.remove(managerRole, addr);
        for(uint16 i = 0; i < managers.length; i++) {
            if(managers[i] == addr) {
                managers[i] = managers[managers.length - 1];
                delete managers[managers.length - 1];
                managers.pop();
                break;
            }
        }
    }

    function selfDestruct() external onlyOwner {
        selfdestruct(msg.sender);
    }
}