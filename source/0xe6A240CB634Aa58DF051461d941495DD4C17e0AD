pragma solidity ^0.8.1;

interface IERC20 {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library Address {
    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(
            data
        );
        return verifyCallResult(success, returndata, errorMessage);
    }

    function functionStaticCall(address target, bytes memory data)
        internal
        view
        returns (bytes memory)
    {
        return
            functionStaticCall(
                target,
                data,
                "Address: low-level static call failed"
            );
    }

    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    function functionDelegateCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return
            functionDelegateCall(
                target,
                data,
                "Address: low-level delegate call failed"
            );
    }

    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

library SafeMath {
    function tryAdd(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract ERC20 is Context, IERC20 {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function transfer(address to, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, _allowances[owner][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        uint256 currentAllowance = _allowances[owner][spender];
        require(
            currentAllowance >= subtractedValue,
            "ERC20: decreased allowance below zero"
        );
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(
            fromBalance >= amount,
            "ERC20: transfer amount exceeds balance"
        );
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(
                currentAllowance >= amount,
                "ERC20: insufficient allowance"
            );
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

interface IPancakePair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IPancakeFactory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );
}

interface IPancakeRouter02 is IPancakeRouter01 {
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

interface IRefer {
    function hasReferer(address account) external view returns (bool);

    function referer(address account) external view returns (address);

    function refereesCount(address account) external view returns (uint256);

    function referees(address account, uint256 index)
        external
        view
        returns (address);
}

contract Refer is IRefer {
    mapping(address => address) private _referers;

    mapping(address => address[]) private _referees;

    event ReferSet(address _referer, address _referee);

    function hasReferer(address account) public view override returns (bool) {
        return _referers[account] != address(0);
    }

    function referer(address account) public view override returns (address) {
        return _referers[account];
    }

    function refereesCount(address account)
        public
        view
        override
        returns (uint256)
    {
        return _referees[account].length;
    }

    function referees(address account, uint256 index)
        public
        view
        override
        returns (address)
    {
        return _referees[account][index];
    }

    function _setReferer(address _referer, address _referee) internal {
        _beforeSetReferer(_referer, _referee);
        _referers[_referee] = _referer;
        _referees[_referer].push(_referee);

        emit ReferSet(_referer, _referee);
    }

    function _beforeSetReferer(address _referer, address _referee)
        internal
        view
        virtual
    {
        require(_referer != address(0), "Refer: Can not set to 0");
        require(_referer != _referee, "Refer: Can not set to self");
        require(
            referer(_referee) == address(0),
            "Refer: Already has a referer"
        );

        require(refereesCount(_referee) == 0, "Refer: Already has referees");
    }
}

contract Distributor {
    constructor(address token) {
        IERC20(token).approve(msg.sender, uint256(~uint256(0)));
    }
}

interface IMoon {
    function getSwapPair() external view returns (address);

    function syncSwapPair() external;
}

contract MWG is ERC20, Ownable, Refer {
    using SafeMath for uint256;
    using Address for address;

    struct FeeSet {
        uint256 liquidityFee;
        uint256 lpRewardFee;
        uint256 marketFee;
        uint256 teamFee;
        uint256 burnFee;
        uint256 inviterOneFee;
        uint256 inviterTwoFee;
        uint256 inviterThreeFee;
    }

    FeeSet private _buyFees =
        FeeSet({
            liquidityFee: 30,
            lpRewardFee: 30,
            marketFee: 15,
            teamFee: 0,
            burnFee: 0,
            inviterOneFee: 5,
            inviterTwoFee: 15,
            inviterThreeFee: 1
        });

    FeeSet private _sellFees =
        FeeSet({
            liquidityFee: 30,
            lpRewardFee: 30,
            marketFee: 15,
            teamFee: 0,
            burnFee: 0,
            inviterOneFee: 5,
            inviterTwoFee: 15,
            inviterThreeFee: 1
        });

    FeeSet private _transFees =
        FeeSet({
            liquidityFee: 0,
            lpRewardFee: 0,
            marketFee: 0,
            teamFee: 15,
            burnFee: 0,
            inviterOneFee: 0,
            inviterTwoFee: 0,
            inviterThreeFee: 0
        });

    mapping(address => bool) public isBlackList;

    mapping(address => bool) public isFeeExempt;

    mapping(address => bool) public isWalletLimitExempt;

    mapping(address => bool) public isSwapLimitExempt;

    mapping(address => bool) public isSwapExempt;

    mapping(address => bool) public isSwapPair;

    mapping(address => uint256) public swapRoundMapsA;
    mapping(address => uint256) public swapRoundMapsB;
    mapping(address => uint256) public swapRoundMapsC;

    mapping(address => bool) public isTokenHold;
    mapping(uint256 => address) private _tokenHolders;

    uint256 private _tokenHoldTotal;

    uint256 public swapRound = 1;

    uint256 public swapRoundMin = 20 * 10**decimals();

    bool public isSwap = false;

    uint256 private _swapMax;

    uint256 private _walletHoldMax = 50 * 10**decimals();

    uint256 private _inviteBindMin;

    uint256 private _inviteRewardMin;

    uint256 private _minTotalSupply;

    uint256 private _autoSwapMin = 30 * 10**decimals();

    uint256 private _priceTime = block.timestamp;

    uint256 private _priceOld;

    uint256 private _burnPoolTime = block.timestamp;

    uint256 private _burnPoolNum = 2;

    address payable public _lpUnionAddress;

    address payable public _lpCommunityAddress;

    address payable public _lpGroupAddress;

    address payable public _lpGoodAddress;

    address payable private _marketAddress;

    address payable private _teamAddress;

    address public _moonAddress;

    address private _usdtAddress;

    address private _uniswapPair;
    IPancakeRouter02 private _uniswapV2Router;

    Distributor private _distributor;

    bool _inSwapAndLiquify;
    modifier lockTheSwap() {
        _inSwapAndLiquify = true;
        _;
        _inSwapAndLiquify = false;
    }

    bool _inSwapBurn;
    modifier lockBurn() {
        _inSwapBurn = true;
        _;
        _inSwapBurn = false;
    }

    receive() external payable {}

    function withdraw() public onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }

    function withdrawToken(IERC20 token) public onlyOwner {
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }

    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    constructor() ERC20("MWG", "MWG") {
        _usdtAddress = 0x55d398326f99059fF775485246999027B3197955;

        IPancakeRouter02 _swapRouter = IPancakeRouter02(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );

        _uniswapPair = IPancakeFactory(_swapRouter.factory()).createPair(
            address(this),
            address(_usdtAddress)
        );

        _uniswapV2Router = _swapRouter;

        isSwapPair[_uniswapPair] = true;

        isSwapExempt[_uniswapPair] = true;
        isSwapExempt[address(this)] = true;
        isSwapExempt[0x545dEA1F93770546673EF8ce8B12086682A92bcE] = true;

        isFeeExempt[owner()] = true;
        isFeeExempt[address(this)] = true;
        isFeeExempt[0x4B4bbBAc750BEc45b2b311275c2Ad847f98268E5] = true;
        isFeeExempt[0x6E8B9C00dBF89cC949A22327AC0e7Af6aEA417C7] = true;
        isFeeExempt[0x545dEA1F93770546673EF8ce8B12086682A92bcE] = true;

        _lpUnionAddress = payable(0xF52285dA708ccf6f92A8C1d76f89F655B9C13af2);
        _lpCommunityAddress = payable(
            0xa46d5A29140F313b2f2DC453Ec6582137CEBbB84
        );
        _lpGroupAddress = payable(0x9E7c57265ee47Ba06CE172d7844d40F0B4504896);
        _lpGoodAddress = payable(0xE9EC5EB399bBf49cE79b05592fD8Bf0Dbb5E3655);

        _minTotalSupply = 2100 * 10**(decimals());

        _marketAddress = payable(0x575C086d78317A886FD0724CB3640E7fbBb3B322);

        _teamAddress = payable(0x575C086d78317A886FD0724CB3640E7fbBb3B322);

        _distributor = new Distributor(_usdtAddress);

        _mint(
            0x4B4bbBAc750BEc45b2b311275c2Ad847f98268E5,
            14700 * 10**decimals()
        );

        _mint(
            0x6E8B9C00dBF89cC949A22327AC0e7Af6aEA417C7,
            6300 * 10**decimals()
        );
    }

    function getBuyFees() public view returns (FeeSet memory) {
        return _buyFees;
    }

    function getSellFees() public view returns (FeeSet memory) {
        return _sellFees;
    }

    function getTransFees() public view returns (FeeSet memory) {
        return _transFees;
    }

    function setFees(
        uint256 liquidityFee,
        uint256 lpRewardFee,
        uint256 marketFee,
        uint256 teamFee,
        uint256 burnFee,
        uint256 inviterOneFee,
        uint256 inviterTwoFee,
        uint256 inviterThreeFee,
        uint256 feeType
    ) external onlyOwner {
        FeeSet memory temp = FeeSet({
            liquidityFee: liquidityFee,
            lpRewardFee: lpRewardFee,
            marketFee: marketFee,
            teamFee: teamFee,
            burnFee: burnFee,
            inviterOneFee: inviterOneFee,
            inviterTwoFee: inviterTwoFee,
            inviterThreeFee: inviterThreeFee
        });
        if (feeType == 0) {
            _buyFees = temp;
        } else if (feeType == 1) {
            _sellFees = temp;
        } else if (feeType == 2) {
            _transFees = temp;
        }
    }

    function setIsBlackList(address account, bool newValue) public onlyOwner {
        isBlackList[account] = newValue;
    }

    function setIsFeeExempt(address account, bool newValue) public onlyOwner {
        isFeeExempt[account] = newValue;
    }

    function setIsWalletLimitExempt(address account, bool newValue)
        public
        onlyOwner
    {
        isWalletLimitExempt[account] = newValue;
    }

    function setIsSwapLimitExempt(address account, bool newValue)
        public
        onlyOwner
    {
        isSwapLimitExempt[account] = newValue;
    }

    function setIsSwapExempt(address account, bool newValue) public onlyOwner {
        isSwapExempt[account] = newValue;
    }

    function setIsSwapExemptBatch(address[] memory accounts, bool newValue)
        public
        onlyOwner
    {
        for (uint256 index = 0; index < accounts.length; index++) {
            address account = accounts[index];
            isSwapExempt[account] = newValue;
        }
    }

    function setIsSwapPair(address pair, bool newValue) public onlyOwner {
        isSwapPair[pair] = newValue;
    }

    function getHolder(uint256 index) public view returns (address) {
        return _tokenHolders[index];
    }

    function getHolderTotal() public view returns (uint256) {
        return _tokenHoldTotal;
    }

    function setIsSwap(bool swap) public onlyOwner {
        isSwap = swap;
    }

    function setSwapRound(uint256 dayNo) public onlyOwner {
        swapRound = dayNo;
    }

    function setSwapRoundMin(uint256 amount) public onlyOwner {
        swapRoundMin = amount;
    }

    function setBurnPoolNum(uint256 amount) public onlyOwner {
        _burnPoolNum = amount;
    }

    function getSwapMax() public view returns (uint256) {
        return _swapMax;
    }

    function setSwapMax(uint256 amount) public onlyOwner {
        _swapMax = amount;
    }

    function getWalletHoldMax() public view returns (uint256) {
        return _walletHoldMax;
    }

    function setWalletHoldMax(uint256 amount) public onlyOwner {
        _walletHoldMax = amount;
    }

    function getInviteBindMin() public view returns (uint256) {
        return _inviteBindMin;
    }

    function setInviteBindMin(uint256 amount) public onlyOwner {
        _inviteBindMin = amount;
    }

    function setInviteRewardMin() public view returns (uint256) {
        return _inviteRewardMin;
    }

    function setInviteRewardMin(uint256 amount) public onlyOwner {
        _inviteRewardMin = amount;
    }

    function getMinTotalSupply() public view returns (uint256) {
        return _minTotalSupply;
    }

    function getAutoSwapMin() public view returns (uint256) {
        return _autoSwapMin;
    }

    function setAutoSwapMin(uint256 amount) public onlyOwner {
        _autoSwapMin = amount;
    }

    function setSwapPair(address pair) public onlyOwner {
        isSwapPair[_uniswapPair] = false;
        _uniswapPair = pair;
        isSwapPair[pair] = true;
    }

    function getMarketAddress() public view returns (address) {
        return _marketAddress;
    }

    function setMarketAddress(address add) public onlyOwner {
        _marketAddress = payable(add);
    }

    function getMoonAddress() public view returns (address) {
        return _moonAddress;
    }

    function setMoonAddress(address add) public onlyOwner {
        _moonAddress = add;
    }

    function getTeamAddress() public view returns (address) {
        return _teamAddress;
    }

    function setTeamAddress(address add) public onlyOwner {
        _teamAddress = payable(add);
    }

    function getUsdtAddress() public view returns (address) {
        return _usdtAddress;
    }

    function getUniSwapPair() public view returns (address) {
        return _uniswapPair;
    }

    function getDistributor() public view returns (address) {
        return address(_distributor);
    }

    function getPriceOld() public view returns (uint256) {
        return _priceOld;
    }

    function setPriceOld(uint256 price) public onlyOwner {
        _priceOld = price;
    }

    function getPriceUSDT() public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = _usdtAddress;
        return _uniswapV2Router.getAmountsOut(1 * 10**decimals(), path)[1];
    }

    function getPriceETH() public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = _uniswapV2Router.WETH();
        return _uniswapV2Router.getAmountsOut(1 * 10**decimals(), path)[1];
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(!isBlackList[sender], "Fail: You're banned");

        if (
            _walletHoldMax > 0 &&
            !isFeeExempt[recipient] &&
            !isSwapPair[recipient]
        )
            require(
                balanceOf(recipient).add(amount) <= _walletHoldMax,
                "Fail: Max Amount"
            );

        if (!isTokenHold[recipient]) {
            isTokenHold[recipient] = true;
            _tokenHolders[_tokenHoldTotal] = recipient;
            _tokenHoldTotal = _tokenHoldTotal.add(1);
        }

        bool isSwapAndLiquify;
        if (
            balanceOf(address(this)) > _autoSwapMin &&
            !isSwapPair[sender] &&
            !_inSwapAndLiquify &&
            !checkPriceDown()
        ) {
            isSwapAndLiquify = swapAndLiquify(
                balanceOf(address(this)).mul(999).div(1000)
            );
        }

        if (_inSwapAndLiquify) {
            super._transfer(sender, recipient, amount);
        } else if (isSwapPair[sender]) {
            require(isSwap || isSwapExempt[recipient], "Fail: NoSwap");

            require(
                _swapMax == 0 ||
                    isSwapLimitExempt[recipient] ||
                    amount <= _swapMax,
                "Fail: OverSwapMax"
            );

            if (swapRound == 1) {
                require(
                    swapRoundMapsA[recipient].add(amount) <= swapRoundMin,
                    "Buy Max"
                );
                swapRoundMapsA[recipient] = swapRoundMapsA[recipient].add(
                    amount
                );
            }
            if (swapRound == 2) {
                require(
                    swapRoundMapsB[recipient].add(amount) <= swapRoundMin,
                    "Fail: Buy Max"
                );
                swapRoundMapsB[recipient] = swapRoundMapsB[recipient].add(
                    amount
                );
            }
            if (swapRound == 3) {
                require(
                    swapRoundMapsC[recipient].add(amount) <= swapRoundMin,
                    "Fail: Buy Max"
                );
                swapRoundMapsC[recipient] = swapRoundMapsC[recipient].add(
                    amount
                );
            }

            uint256 amountFainel = takeFee(sender, recipient, amount, 0);
            if (amountFainel > 0) {
                super._transfer(sender, recipient, amountFainel);
            }
        } else if (isSwapPair[recipient]) {
            require(isSwap || isSwapExempt[sender], "Fail: NoSwap");

            require(amount <= balanceOf(sender).mul(9).div(10), "NotAllSwap");

            if (swapRound == 1 && swapRoundMapsA[sender] >= amount) {
                swapRoundMapsA[sender] = swapRoundMapsA[sender].sub(amount);
            }
            if (swapRound == 2 && swapRoundMapsB[sender] >= amount) {
                swapRoundMapsB[sender] = swapRoundMapsB[sender].sub(amount);
            }
            if (swapRound == 3 && swapRoundMapsC[sender] >= amount) {
                swapRoundMapsC[sender] = swapRoundMapsC[sender].sub(amount);
            }

            uint256 amountFainel = takeFee(sender, recipient, amount, 1);
            if (amountFainel > 0) {
                super._transfer(sender, recipient, amountFainel);
            }
        } else {
            uint256 amountFainel = takeFee(sender, recipient, amount, 2);
            if (amountFainel > 0) {
                super._transfer(sender, recipient, amountFainel);
            }

            if (
                (!hasReferer(recipient)) &&
                (sender != recipient) &&
                (sender != address(0)) &&
                (recipient != address(0)) &&
                (amount > _inviteBindMin) &&
                refereesCount(recipient) == 0
            ) {
                _setReferer(sender, recipient);
            }
            if (!isSwapAndLiquify && !_inSwapBurn) {
                burnSwapPool();
            }
        }
    }

    function checkPriceDown() public view returns (bool) {
        return getPriceUSDT() < _priceOld.mul(85).div(100);
    }

    function takeFee(
        address sender,
        address recipient,
        uint256 amount,
        uint256 feeType
    ) private returns (uint256 amountFainel) {
        if (
            isFeeExempt[sender] ||
            isFeeExempt[recipient] ||
            recipient == address(0)
        ) {
            amountFainel = amount;
        } else {
            FeeSet memory feeSet = feeType == 0
                ? _buyFees
                : (feeType == 1 ? _sellFees : _transFees);

            uint256 amountFee = amount.mul(10).div(100);

            uint256 usdtAmount = IERC20(_usdtAddress).balanceOf(_uniswapPair);

            if (feeType != 2 && usdtAmount >= 500_0000 * 10**18) {
                amountFee = amount.mul(5).div(100);
            } else if (feeType != 2 && usdtAmount >= 200_0000 * 10**18) {
                amountFee = amount.mul(7).div(100);
            } else if (feeType != 2 && usdtAmount >= 100_0000 * 10**18) {
                amountFee = amount.mul(8).div(100);
            } else if (feeType != 2 && usdtAmount >= 50_0000 * 10**18) {
                amountFee = amount.mul(9).div(100);
            }
            uint256 amountPrice;

            if (feeType == 1 && getPriceUSDT() < _priceOld.mul(85).div(100)) {
                amountPrice = amount.mul(30).div(100).sub(amountFee);
            }

            amountFainel = amount.sub(amountFee).sub(amountPrice);

            uint256 amountFeeSupply = amountFee;

            if (amountPrice > 0) {
                super._transfer(sender, _teamAddress, amountPrice);
            }

            {
                uint256 fee = amountFee
                    .mul(
                        feeSet.liquidityFee.add(feeSet.lpRewardFee).add(
                            feeSet.marketFee
                        )
                    )
                    .div(100);
                if (fee > 0 && amountFeeSupply > 0) {
                    super._transfer(sender, address(this), fee);
                    amountFeeSupply = amountFeeSupply.sub(fee);
                }
            }

            {
                uint256 feeTeam = amountFee.mul(feeSet.teamFee).div(100);
                if (feeTeam > 0 && amountFeeSupply > 0) {
                    super._transfer(sender, _teamAddress, feeTeam);
                    amountFeeSupply = amountFeeSupply.sub(feeTeam);
                }
            }

            {
                uint256 feeBurn = amountFee.mul(feeSet.burnFee).div(100);
                if (
                    feeBurn > 0 &&
                    amountFeeSupply > 0 &&
                    totalSupply().sub(feeBurn) >= _minTotalSupply
                ) {
                    super._burn(sender, feeBurn);
                    amountFeeSupply = amountFeeSupply.sub(feeBurn);
                }
            }

            {
                uint256[] memory feeInvites = new uint256[](7);
                feeInvites[0] = amountFee.mul(feeSet.inviterOneFee).div(100);
                feeInvites[1] = amountFee.mul(feeSet.inviterTwoFee).div(100);
                feeInvites[2] = amountFee.mul(feeSet.inviterThreeFee).div(100);
                feeInvites[3] = amountFee.mul(feeSet.inviterThreeFee).div(100);
                feeInvites[4] = amountFee.mul(feeSet.inviterThreeFee).div(100);
                feeInvites[5] = amountFee.mul(feeSet.inviterThreeFee).div(100);
                feeInvites[6] = amountFee.mul(feeSet.inviterThreeFee).div(100);
                address _referer = !isSwapPair[sender] ? sender : recipient;
                uint256 amountInviteBurn;
                for (uint256 i = 0; i < feeInvites.length; i++) {
                    if (feeInvites[i] > 0 && amountFeeSupply > 0) {
                        if (
                            hasReferer(_referer) &&
                            balanceOf(referer(_referer)) >= _inviteRewardMin
                        ) {
                            _referer = referer(_referer);
                            super._transfer(sender, _referer, feeInvites[i]);
                        } else {
                            amountInviteBurn = amountInviteBurn.add(
                                feeInvites[i]
                            );
                        }
                        amountFeeSupply = amountFeeSupply.sub(feeInvites[i]);
                    }
                }
                if (amountInviteBurn > 0) {
                    if (
                        totalSupply().sub(amountInviteBurn) >= _minTotalSupply
                    ) {
                        super._burn(sender, amountInviteBurn);
                    } else {
                        amountFainel = amountFainel.add(amountInviteBurn);
                    }
                }
            }

            if (amountFeeSupply > 0)
                amountFainel = amountFainel.add(amountFeeSupply);

            if (block.timestamp > _priceTime.add(86400)) {
                _priceTime = block.timestamp;
                _priceOld = getPriceUSDT();
            }
        }
    }

    function burnSwapPool() private lockBurn {
        if (block.timestamp > _burnPoolTime.add(86400)) {
            _burnPoolTime = block.timestamp;
            uint256 bn = balanceOf(_uniswapPair).mul(_burnPoolNum).div(1000);

            if (totalSupply().sub(bn) >= _minTotalSupply) {
                super._burn(_uniswapPair, bn);

                IPancakePair(_uniswapPair).sync();
            }
        }
    }

    function swapAndLiquify(uint256 amount) private lockTheSwap returns (bool) {
        swapTokensForTokens(amount);

        uint256 amountUsdt = IERC20(_usdtAddress).balanceOf(
            address(_distributor)
        );
        uint256 every = amountUsdt.div(75);
        IERC20 usdt = IERC20(_usdtAddress);

        usdt.transferFrom(address(_distributor), _lpUnionAddress, every.mul(9));

        usdt.transferFrom(
            address(_distributor),
            _lpCommunityAddress,
            every.mul(9)
        );

        usdt.transferFrom(
            address(_distributor),
            _lpGroupAddress,
            every.mul(75).div(10)
        );

        usdt.transferFrom(
            address(_distributor),
            _lpGoodAddress,
            every.mul(45).div(10)
        );

        usdt.transferFrom(address(_distributor), _marketAddress, every.mul(15));

        usdt.transferFrom(
            address(_distributor),
            IMoon(_moonAddress).getSwapPair(),
            every.mul(30)
        );
        IMoon(_moonAddress).syncSwapPair();
        return true;
    }

    function swapTokensForTokens(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(_usdtAddress);

        _approve(address(this), address(_uniswapV2Router), tokenAmount);

        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(_distributor),
            block.timestamp
        );
        emit SwapTokensForTokens(tokenAmount, path);
    }

    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {
        _approve(address(this), address(_uniswapV2Router), tokenAmount);
        IERC20(_usdtAddress).approve(address(_uniswapV2Router), usdtAmount);
        emit AddLiquidity(tokenAmount, usdtAmount);

        _uniswapV2Router.addLiquidity(
            address(this),
            address(_usdtAddress),
            tokenAmount,
            usdtAmount,
            0,
            0,
            _teamAddress,
            block.timestamp + 1200
        );
    }

    event AddLiquidity(uint256 tokenAmount, uint256 ethAmount);
    event SwapTokensForTokens(uint256 amountIn, address[] path);
}