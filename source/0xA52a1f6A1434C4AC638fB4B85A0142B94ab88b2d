// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function transfer(address to, uint256 value) external returns (bool);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
}

interface IUSDT {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function transfer(address to, uint256 value) external returns (bool);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
}

interface IBUSD {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function transfer(address to, uint256 value) external returns (bool);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
}

contract TokenPresale {

    address public owner = 0x1f27b5b63b2dc9A48C8e8C45aC3c445f6ABf33e7; // Your address
    address public tokenAddress = 0x00f7F8BA0C6922ed58f4DC56af23c21d5eb37288; // Token address
    address public usdtAddress = 0x55d398326f99059fF775485246999027B3197955; // USDT Address Mainnet
    address public busdAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // BUSD Address Mainnet
    uint256 public presaleStartTime;
    uint256 public presaleEndTime;
    bool public buybackStarted;
    bool public buybackEnded;
    uint256 public USDTrewardPercent;
    uint256 public BUSDrewardPercent;
    uint256 public TOKENrewardPercent;

struct Referral {
    address referrer; // address of the referrer
    uint256 timestamp; // time of the referral
}

mapping(address => Referral[]) referrals;


constructor() {
    presaleStartTime = block.timestamp; 
    presaleEndTime = presaleStartTime + 200 days; // Days of the Presale
    USDTrewardPercent = 10; 
    BUSDrewardPercent = 10;
    TOKENrewardPercent = 10;
}

// -------------- REF --------------


function setUSDTRewardPercent(uint256 percent) public {
        require(msg.sender == owner); // Only the owner of the contract can set the reward percentage
        USDTrewardPercent = percent;
    }

    function getUSDTRewardPercent() public view returns (uint256) {
        return USDTrewardPercent;
    }

function setTOKENRewardPercent(uint256 percent) public {
        require(msg.sender == owner); // Only the owner of the contract can set the reward percentage
        TOKENrewardPercent = percent;
    }

    function getTOKENRewardPercent() public view returns (uint256) {
        return TOKENrewardPercent;
    }    

function setBUSDRewardPercent(uint256 percent) public {
        require(msg.sender == owner); // Only the owner of the contract can set the reward percentage
        BUSDrewardPercent = percent;
    }

    function getBUSDRewardPercent() public view returns (uint256) {
        return BUSDrewardPercent;
    }    

    // -------------- USDT --------------

    function buyWith15USDT(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _usdt15 = 15;
        uint256 usdtPrice15 = 200;
        uint256 _usdttokens = _usdt15 * usdtPrice15;
        require(usdt.transferFrom(msg.sender, address(this), _usdt15), "USDT transfer failed");
        require(token.transfer(msg.sender, _usdttokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * USDTrewardPercent / 100; 
        uint256 rewardUSDT = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(usdt.transfer(referrerAddress, rewardUSDT));

        return true;
    }

    function buyWith30USDT(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _usdt15 = 30;
        uint256 usdtPrice15 = 200;
        uint256 _usdttokens = _usdt15 * usdtPrice15;
        require(usdt.transferFrom(msg.sender, address(this), _usdt15), "USDT transfer failed");
        require(token.transfer(msg.sender, _usdttokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * USDTrewardPercent / 100; 
        uint256 rewardUSDT = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(usdt.transfer(referrerAddress, rewardUSDT));

        return true;
    }

    function buyWith100USDT(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _usdt15 = 100;
        uint256 usdtPrice15 = 200;
        uint256 _usdttokens = _usdt15 * usdtPrice15;
        require(usdt.transferFrom(msg.sender, address(this), _usdt15), "USDT transfer failed");
        require(token.transfer(msg.sender, _usdttokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * USDTrewardPercent / 100; 
        uint256 rewardUSDT = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(usdt.transfer(referrerAddress, rewardUSDT));

        return true;
    }

     function buyWith500USDT(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _usdt15 = 500;
        uint256 usdtPrice15 = 200;
        uint256 _usdttokens = _usdt15 * usdtPrice15;
        require(usdt.transferFrom(msg.sender, address(this), _usdt15), "USDT transfer failed");
        require(token.transfer(msg.sender, _usdttokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * USDTrewardPercent / 100; 
        uint256 rewardUSDT = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(usdt.transfer(referrerAddress, rewardUSDT));

        return true;
    }

     function buyWith1000USDT(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _usdt15 = 1000;
        uint256 usdtPrice15 = 200;
        uint256 _usdttokens = _usdt15 * usdtPrice15;
        require(usdt.transferFrom(msg.sender, address(this), _usdt15), "USDT transfer failed");
        require(token.transfer(msg.sender, _usdttokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * USDTrewardPercent / 100; 
        uint256 rewardUSDT = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(usdt.transfer(referrerAddress, rewardUSDT));

        return true;
    }

    // -------------- BUSD --------------

    function buyWith15BUSD(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _busd15 = 15;
        uint256 busdPrice15 = 200;
        uint256 _busdtokens = _busd15 * busdPrice15;
        require(busd.transferFrom(msg.sender, address(this), _busd15), "BUSD transfer failed");
        require(token.transfer(msg.sender, _busdtokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * BUSDrewardPercent / 100; 
        uint256 rewardBUSD = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(busd.transfer(referrerAddress, rewardBUSD));

        return true;
    }

    function buyWith30BUSD(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _busd15 = 30;
        uint256 busdPrice15 = 200;
        uint256 _busdtokens = _busd15 * busdPrice15;
        require(busd.transferFrom(msg.sender, address(this), _busd15), "BUSD transfer failed");
        require(token.transfer(msg.sender, _busdtokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * BUSDrewardPercent / 100; 
        uint256 rewardBUSD = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(busd.transfer(referrerAddress, rewardBUSD));

        return true;
    }

    function buyWith100BUSD(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _busd15 = 100;
        uint256 busdPrice15 = 200;
        uint256 _busdtokens = _busd15 * busdPrice15;
        require(busd.transferFrom(msg.sender, address(this), _busd15), "BUSD transfer failed");
        require(token.transfer(msg.sender, _busdtokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * BUSDrewardPercent / 100; 
        uint256 rewardBUSD = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(busd.transfer(referrerAddress, rewardBUSD));

        return true;
    }

    function buyWith500BUSD(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _busd15 = 500;
        uint256 busdPrice15 = 200;
        uint256 _busdtokens = _busd15 * busdPrice15;
        require(busd.transferFrom(msg.sender, address(this), _busd15), "BUSD transfer failed");
        require(token.transfer(msg.sender, _busdtokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * BUSDrewardPercent / 100; 
        uint256 rewardBUSD = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(busd.transfer(referrerAddress, rewardBUSD));

        return true;
    }

    function buyWith1000BUSD(address referrerAddress) public returns (bool) {
        require(block.timestamp >= presaleStartTime && block.timestamp <= presaleEndTime, "Presale is not open");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _busd15 = 1000;
        uint256 busdPrice15 = 200;
        uint256 _busdtokens = _busd15 * busdPrice15;
        require(busd.transferFrom(msg.sender, address(this), _busd15), "BUSD transfer failed");
        require(token.transfer(msg.sender, _busdtokens), "Token transfer failed");
        // Ref
        uint256 referralCount = referrals[referrerAddress].length;
        uint256 rewardAmount = referralCount * BUSDrewardPercent / 100; 
        uint256 rewardBUSD = referralCount * TOKENrewardPercent / 100; 
        require(token.transfer(referrerAddress, rewardAmount));
        require(busd.transfer(referrerAddress, rewardBUSD));

        return true;
    }

    // -------------- withdraw --------------


    function withdrawBNB(address payable _to) public {
        require(msg.sender == owner, "Only owner can withdraw"); // Just in case:)
        _to.transfer(address(this).balance);
    }

    function withdrawUSDT(uint256 _usdtAmount) public {
        require(msg.sender == owner, "Only owner can withdraw");
        require(_usdtAmount > 0, "Transaction recovery");
        IUSDT usdt = IUSDT(usdtAddress);
        uint256 _usdttokens = _usdtAmount;
        require(usdt.transfer(msg.sender, _usdttokens), "Token transfer failed");
    }

    function withdrawBUSD(uint256 _busdAmount) public {
        require(msg.sender == owner, "Only owner can withdraw");
        require(_busdAmount > 0, "Transaction recovery");
        IBUSD busd = IBUSD(busdAddress);
        uint256 _busdtokens = _busdAmount;
        require(busd.transfer(msg.sender, _busdtokens), "Token transfer failed");
    }

    function withdrawTokens(uint256 _tokenAmount) public {
        require(msg.sender == owner, "Only owner can withdraw");
        require(_tokenAmount > 0, "Transaction recovery");
        IERC20 token = IERC20(tokenAddress);
        uint256 _tokens = _tokenAmount;
        require(token.transfer(msg.sender, _tokens), "Token transfer failed");
    }

    // -------------- BuyBack --------------

    function startBuyback() public {
        require(!buybackStarted, "Buyback has already started");
        buybackStarted = true;
    }

    function endBuyback() public {
        require(buybackStarted, "Buyback has not started yet");
        require(!buybackEnded, "Buyback has already ended");
        buybackEnded = true;
    }

    // -------------- BuyBack USDT --------------

    function buyBack3000DGR_USDT() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 3000;
        uint256 bbprice = 6;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(usdt.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }

    function buyBack6000DGR_USDT() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 6000;
        uint256 bbprice = 12;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(usdt.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }

    function buyBack20000DGR_USDT() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 20000;
        uint256 bbprice = 40;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(usdt.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }

    function buyBack100000DGR_USDT() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 100000;
        uint256 bbprice = 200;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(usdt.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }

    function buyBack200000DGR_USDT() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IUSDT usdt = IUSDT(usdtAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 200000;
        uint256 bbprice = 400;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(usdt.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }

    // -------------- BuyBack BUSD --------------

    function buyBack3000DGR_BUSD() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 3000;
        uint256 bbprice = 6;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(busd.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }

    function buyBack6000DGR_BUSD() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 6000;
        uint256 bbprice = 12;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(busd.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }

    function buyBack20000DGR_BUSD() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 20000;
        uint256 bbprice = 40;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(busd.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }

    function buyBack100000DGR_BUSD() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 100000;
        uint256 bbprice = 200;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(busd.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }

    function buyBack200000DGR_BUSD() public returns (bool) {
        require(buybackStarted, "Buyback has not started yet");
        IBUSD busd = IBUSD(busdAddress);
        IERC20 token = IERC20(tokenAddress);
        uint256 _bbtoken = 200000;
        uint256 bbprice = 400;
        require(token.transferFrom(msg.sender, address(owner), _bbtoken), "BUSD transfer failed");
        require(busd.transfer(msg.sender, bbprice), "Token transfer failed");

        return true;
    }    

}