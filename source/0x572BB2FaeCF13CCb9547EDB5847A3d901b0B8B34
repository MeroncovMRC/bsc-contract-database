{"DexUtils.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Utils.sol\";\r\n\r\ninterface IPancakePair {\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function name() external pure returns (string memory);\r\n\r\n  function symbol() external pure returns (string memory);\r\n\r\n  function decimals() external pure returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n  event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n      uint112 reserve0,\r\n      uint112 reserve1,\r\n      uint32 blockTimestampLast\r\n    );\r\n\r\n  function price0CumulativeLast() external view returns (uint256);\r\n\r\n  function price1CumulativeLast() external view returns (uint256);\r\n\r\n  function kLast() external view returns (uint256);\r\n\r\n  function mint(address to) external returns (uint256 liquidity);\r\n\r\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function skim(address to) external;\r\n\r\n  function sync() external;\r\n\r\n  function initialize(address, address) external;\r\n}\r\n\r\nlibrary PancakeLibrary {\r\n  using SafeMath for uint256;\r\n\r\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n    require(tokenA != tokenB, \"PancakeLibrary: IDENTICAL_ADDRESSES\");\r\n    (token0, token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n    require(token0 != address(0), \"PancakeLibrary: ZERO_ADDRESS\");\r\n  }\r\n\r\n  // calculates the CREATE2 address for a pair without making any external calls\r\n  function pairFor(\r\n    address factory,\r\n    address tokenA,\r\n    address tokenB\r\n  ) internal pure returns (address pair) {\r\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n    pair = address(\r\n      uint160(\r\n        uint256(\r\n          keccak256(\r\n            abi.encodePacked(\r\n              hex\"ff\",\r\n              factory,\r\n              keccak256(abi.encodePacked(token0, token1)),\r\n              hex\"00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\" // init code hash (BSCMainnet)\r\n              // hex\"d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\" // BSC Testnet\r\n              //   hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" //ETH Mainnet\r\n              // hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" //ETH TESTNET\r\n              // hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" //Polygon TESTNET\r\n              // hex\"a77ee1cc0f39570ddde947459e293d7ebc2c30ff4e8fc45860afdcb2c2d3dc17\" //Cronos Main\r\n            )\r\n          )\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  // fetches and sorts the reserves for a pair\r\n  function getReserves(\r\n    address factory,\r\n    address tokenA,\r\n    address tokenB\r\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n    (address token0, ) = sortTokens(tokenA, tokenB);\r\n    pairFor(factory, tokenA, tokenB);\r\n    (uint256 reserve0, uint256 reserve1, ) = IPancakePair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n  }\r\n\r\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n  function quote(\r\n    uint256 amountA,\r\n    uint256 reserveA,\r\n    uint256 reserveB\r\n  ) internal pure returns (uint256 amountB) {\r\n    require(amountA \u003e 0, \"PancakeLibrary: INSUFFICIENT_AMOUNT\");\r\n    require(reserveA \u003e 0 \u0026\u0026 reserveB \u003e 0, \"PancakeLibrary: INSUFFICIENT_LIQUIDITY\");\r\n    amountB = amountA.mul(reserveB) / reserveA;\r\n  }\r\n\r\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n  function getAmountOut(\r\n    uint256 amountIn,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) internal pure returns (uint256 amountOut) {\r\n    require(amountIn \u003e 0, \"PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\");\r\n    require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \"PancakeLibrary: INSUFFICIENT_LIQUIDITY\");\r\n    uint256 amountInWithFee = amountIn.mul(998);\r\n    uint256 numerator = amountInWithFee.mul(reserveOut);\r\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n    amountOut = numerator / denominator;\r\n  }\r\n\r\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n  function getAmountIn(\r\n    uint256 amountOut,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) internal pure returns (uint256 amountIn) {\r\n    require(amountOut \u003e 0, \"PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n    require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \"PancakeLibrary: INSUFFICIENT_LIQUIDITY\");\r\n    uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n    uint256 denominator = reserveOut.sub(amountOut).mul(998);\r\n    amountIn = (numerator / denominator).add(1);\r\n  }\r\n\r\n  // performs chained getAmountOut calculations on any number of pairs\r\n  function getAmountsOut(\r\n    address factory,\r\n    uint256 amountIn,\r\n    address[] memory path\r\n  ) internal view returns (uint256[] memory amounts) {\r\n    require(path.length \u003e= 2, \"PancakeLibrary: INVALID_PATH\");\r\n    amounts = new uint256[](path.length);\r\n    amounts[0] = amountIn;\r\n    for (uint256 i; i \u003c path.length - 1; i++) {\r\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n    }\r\n  }\r\n\r\n  // performs chained getAmountIn calculations on any number of pairs\r\n  function getAmountsIn(\r\n    address factory,\r\n    uint256 amountOut,\r\n    address[] memory path\r\n  ) internal view returns (uint256[] memory amounts) {\r\n    require(path.length \u003e= 2, \"PancakeLibrary: INVALID_PATH\");\r\n    amounts = new uint256[](path.length);\r\n    amounts[amounts.length - 1] = amountOut;\r\n    for (uint256 i = path.length - 1; i \u003e 0; i--) {\r\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n    }\r\n  }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n  function factory() external pure returns (address);\r\n\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETH(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactTokens(\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactETHForTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactETH(\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactTokensForETH(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapETHForExactTokens(\r\n    uint256 amountOut,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function quote(\r\n    uint256 amountA,\r\n    uint256 reserveA,\r\n    uint256 reserveB\r\n  ) external pure returns (uint256 amountB);\r\n\r\n  function getAmountOut(\r\n    uint256 amountIn,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) external pure returns (uint256 amountOut);\r\n\r\n  function getAmountIn(\r\n    uint256 amountOut,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) external pure returns (uint256 amountIn);\r\n\r\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n}\r\n\r\ninterface IAnyswapV4Router {\r\n  function anySwapOutUnderlying(\r\n    address token,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 toChainID\r\n  ) external;\r\n\r\n  function anySwapOut(\r\n    address token,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 toChainID\r\n  ) external;\r\n\r\n  function anySwapOutNative(\r\n    address token,\r\n    address to,\r\n    uint256 toChainID\r\n  ) external payable;\r\n}\r\n"},"SecurityLocker.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./Utils.sol\";\r\n\r\ncontract SecurityLocker is Ownable, ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  struct DurationFeeStruct {\r\n    uint256 durationFee_3M;\r\n    uint256 durationFee_6M;\r\n    uint256 durationFee_9M;\r\n    uint256 durationFee_12M;\r\n    uint256 durationFee_24M;\r\n  }\r\n\r\n  address payable public feeWallet;\r\n  DurationFeeStruct public DurationFee;\r\n\r\n  mapping(address =\u003e mapping(address =\u003e mapping(uint256 =\u003e PersonalLocker))) public personallockers; //wallet-NFT-Id =\u003elocker\r\n  mapping(address =\u003e PersonalLocker[]) public mainAccount; //wallet acccount -\u003e multi-PersonalLocker\r\n  mapping(address =\u003e PersonalLocker[]) public backupAccount; //wallet acccount -\u003e multi-PersonalLocker\r\n\r\n  uint256 public ERC721Fee;\r\n\r\n  // modifier isAuth(address key_address, uint256 key_Id) {\r\n  modifier isAuth(address lockerAddr) {\r\n    // IPersonalLocker locker = IPersonalLocker(lockerAddr);\r\n    // require(address(personallockers[msg.sender][key_address][key_Id]) != address(0), \"no locker\");\r\n    require(checkSender(lockerAddr) == 1, \"sender is not owner\");\r\n    _;\r\n  }\r\n\r\n  // event CreatePersonalLocker(address lockerAddr, string lockerName, address wallet1, address NFT1, uint256 NFT1_Id, address wallet2, address NFT2, uint256 NFT2_Id);\r\n  //to save gas fee, can fetch info with using View Function ,just need timestamp and locker address\r\n  event CreatePErsonalLocker(address lockerAddr);\r\n\r\n  event ERC721feeSet(uint256 newVal);\r\n  event setDurationFee(uint8 mounths, uint256 fee);\r\n  event feeWalletSet(address newAddress);\r\n\r\n  event UserResetDuration(address lockerAddr, address userAddr, uint256 duration, uint256 fee);\r\n  event UserUpdateDuration(address lockerAddr, address userAddr, uint256 duration, uint256 fee);\r\n  event AddBackupAccount(address lockerAddr, address wallet2, address NFT2, uint256 NFT2_Id);\r\n  event AddPersonalLockerWhiteList(address lockerAddr, address receiver, address editor);\r\n  event RemovePersonalLockerWhiteList(address lockerAddr, address receiver, address editor);\r\n\r\n  event DepositERC20ToLocker(address lockerAddr, address userAddr, address token, uint256 amt, uint256 lockerAmt);\r\n  event DepositUtilityToLocker(address lockerAddr, address userAddr, uint256 amt, uint256 lockerAmt);\r\n  event DepositERC721ToLocker(address lockerAddr, address userAddr, address token, uint256 tokenId);\r\n\r\n  event WithdrawERC20FromLocker(address lockerAddr, address userAddr, address token, uint256 amt, uint256 lockerAmt);\r\n  event WithdrawUtilityFromLocker(address lockerAddr, address userAddr, uint256 amt, uint256 lockerAmt);\r\n  event WithdrawERC721FromLocker(address lockerAddr, address userAddr, address token, uint256 tokenId, uint256 fee);\r\n\r\n  constructor() {\r\n    // feeWallet = payable(_feeWallet);\r\n    feeWallet = payable(0xcc4A1aD4a623d5D4a6fCB1b1A581FFFeb8727Dc5);\r\n\r\n    DurationFee.durationFee_3M = 0.001 * 10**18;\r\n    DurationFee.durationFee_6M = 0.002 * 10**18;\r\n    DurationFee.durationFee_9M = 0.003 * 10**18;\r\n    DurationFee.durationFee_12M = 0.005 * 10**18;\r\n    DurationFee.durationFee_24M = 0.01 * 10**18;\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  function createLocker(\r\n    string memory lockerName,\r\n    address key1_address,\r\n    address wallet2,\r\n    address key2_address,\r\n    uint256 key1_Id,\r\n    uint256 key2_Id,\r\n    uint256 verifiedDuration,\r\n    bool hasAccountBackup\r\n  ) external payable nonReentrant {\r\n    require(msg.value \u003e= getDurationFee(verifiedDuration), \"please send correct fee\");\r\n    require(msg.sender != wallet2, \"wallet1 must different from wallet2\");\r\n    require(IERC721(key1_address).ownerOf(key1_Id) == msg.sender, \"the address1 of NTF is not correct\");\r\n    require(address(personallockers[msg.sender][key1_address][key1_Id]) == address(0), \"already created locker\");\r\n    require(!hasAccountBackup || IERC721(key2_address).ownerOf(key2_Id) == wallet2, \"the address2 of NTF is not correct\");\r\n    PersonalLocker locker;\r\n\r\n    locker = new PersonalLocker(lockerName, msg.sender, key1_address, key1_Id, verifiedDuration);\r\n    personallockers[msg.sender][key1_address][key1_Id] = locker;\r\n    mainAccount[msg.sender].push(locker);\r\n    if (hasAccountBackup) {\r\n      locker.addBackupInfo(wallet2, key2_address, key2_Id);\r\n      backupAccount[wallet2].push(locker);\r\n    }\r\n    payable(feeWallet).transfer(msg.value);\r\n    emit CreatePErsonalLocker(address(locker));\r\n    // emitCreateLocker(locker.showInfo());\r\n  }\r\n\r\n  function addBackupInfo(\r\n    address lockerAddr,\r\n    address wallet2,\r\n    address key2_address,\r\n    uint256 key2_Id\r\n  ) external nonReentrant isAuth(lockerAddr) {\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    require(msg.sender != wallet2, \"wallet1 must different from wallet2\");\r\n    require(IERC721(key2_address).ownerOf(key2_Id) == wallet2, \"the address2 of NTF is not correct\");\r\n    locker.addBackupInfo(wallet2, key2_address, key2_Id);\r\n    backupAccount[wallet2].push(locker);\r\n  }\r\n\r\n  function depositERC20(\r\n    address lockerAddr,\r\n    address tokenAddr,\r\n    uint256 amt\r\n  ) external nonReentrant isAuth(lockerAddr) {\r\n    IERC20 token = IERC20(tokenAddr);\r\n    token.safeTransferFrom(msg.sender, lockerAddr, amt);\r\n    emit DepositERC20ToLocker(lockerAddr, msg.sender, tokenAddr, amt, token.balanceOf(lockerAddr));\r\n  }\r\n\r\n  function depositUtility(address lockerAddr) external payable nonReentrant isAuth(lockerAddr) {\r\n    payable(lockerAddr).transfer(msg.value);\r\n    emit DepositUtilityToLocker(lockerAddr, msg.sender, msg.value, payable(lockerAddr).balance);\r\n  }\r\n\r\n  function depositERC721(\r\n    address lockerAddr,\r\n    address tokenAddr,\r\n    uint256[] calldata tokenIds\r\n  ) external payable nonReentrant isAuth(lockerAddr) {\r\n    IERC721 token = IERC721(tokenAddr);\r\n    uint256 tokenId;\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    for (uint256 i = 0; i \u003c tokenIds.length; i++) {\r\n      tokenId = tokenIds[i];\r\n      require(tokenAddr != locker.showInfo().verifiedToken || tokenId != locker.showInfo().verifiedId, \"this NFT is locker\u0027s key\");\r\n      require(tokenAddr != locker.showInfo().backupVerifiedToken || tokenId != locker.showInfo().backupVerifiedId, \"this NFT is locker\u0027s key\");\r\n      require(token.ownerOf(tokenId) == msg.sender, \"not your token\");\r\n      token.transferFrom(msg.sender, lockerAddr, tokenId);\r\n      emit DepositERC721ToLocker(lockerAddr, msg.sender, tokenAddr, tokenId);\r\n    }\r\n    // emit DepositToLocker(lockerAddr, msg.sender, WBNB, msg.value);\r\n  }\r\n\r\n  function withdrawERC20(\r\n    address receiver,\r\n    address lockerAddr,\r\n    address tokenAddr,\r\n    uint256 amt\r\n  ) external nonReentrant isAuth(lockerAddr) {\r\n    IERC20 token = IERC20(tokenAddr);\r\n    uint256 balance = token.balanceOf(lockerAddr);\r\n    require(amt \u003c= balance, \"amt over\");\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    locker.withdrawERC20(tokenAddr, receiver, amt);\r\n    emit WithdrawERC20FromLocker(lockerAddr, receiver, tokenAddr, amt, token.balanceOf(lockerAddr));\r\n  }\r\n\r\n  function withdrawUtility(\r\n    address receiver,\r\n    address lockerAddr,\r\n    uint256 amt\r\n  ) external nonReentrant isAuth(lockerAddr) {\r\n    uint256 balance = payable(lockerAddr).balance;\r\n    require(amt \u003c= balance, \"amt over\");\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    locker.withdrawUtility(receiver, amt);\r\n    emit WithdrawUtilityFromLocker(lockerAddr, receiver, amt, payable(lockerAddr).balance);\r\n  }\r\n\r\n  function withdrawERC721(\r\n    address receiver,\r\n    address lockerAddr,\r\n    address _tokenAddr,\r\n    uint256[] calldata tokenIds\r\n  ) external payable nonReentrant isAuth(lockerAddr) {\r\n    require(msg.value \u003e= ERC721Fee, \"please send correct fee\");\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    uint256 tokenId;\r\n    for (uint256 i = 0; i \u003c tokenIds.length; i++) {\r\n      tokenId = tokenIds[i];\r\n      locker.withdrawERC721(receiver, _tokenAddr, tokenId);\r\n      emit WithdrawERC721FromLocker(lockerAddr, receiver, _tokenAddr, tokenId, msg.value);\r\n    }\r\n    payable(feeWallet).transfer(msg.value);\r\n  }\r\n\r\n  function resetTimer(address lockerAddr) external payable isAuth(lockerAddr) {\r\n    VerifyProps memory info = lockerInfoByLocker(lockerAddr);\r\n    require(msg.value \u003e= getDurationFee(info.verifiedDuration), \"please send correct fee\");\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    locker.restartVerifiedTimer();\r\n    payable(feeWallet).transfer(msg.value);\r\n    emit UserResetDuration(address(locker), msg.sender, info.verifiedDuration, msg.value);\r\n  }\r\n\r\n  function updateDuration(address lockerAddr, uint256 duration) external payable isAuth(lockerAddr) {\r\n    require(msg.value \u003e= getDurationFee(duration), \"please send correct fee\");\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    locker.setupVerifiedDuration(duration);\r\n    payable(feeWallet).transfer(msg.value);\r\n    emit UserUpdateDuration(address(locker), msg.sender, duration, msg.value);\r\n  }\r\n\r\n  function addPersonalLockerWhiteList(address lockerAddr, address receiver) external isAuth(lockerAddr) {\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    locker.addWhiteList(receiver);\r\n    emit AddPersonalLockerWhiteList(lockerAddr, receiver, msg.sender);\r\n  }\r\n\r\n  function removePersonalWhiteList(address lockerAddr, address receiver) external isAuth(lockerAddr) {\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    locker.removeWhiteList(receiver);\r\n    emit RemovePersonalLockerWhiteList(lockerAddr, receiver, msg.sender);\r\n  }\r\n\r\n  /*\r\n   ** Owner functions\r\n   */\r\n  function setFeeWallet(address _newVal) external onlyOwner {\r\n    feeWallet = payable(_newVal);\r\n    emit feeWalletSet(_newVal);\r\n  }\r\n\r\n  function setERC721Fee(uint256 _newVal) external onlyOwner {\r\n    ERC721Fee = _newVal;\r\n    emit ERC721feeSet(_newVal);\r\n  }\r\n\r\n  function setDuration_3M_Fee(uint256 _newVal) external onlyOwner {\r\n    DurationFee.durationFee_3M = _newVal;\r\n    emit setDurationFee(3, _newVal);\r\n  }\r\n\r\n  function setDuration_6M_Fee(uint256 _newVal) external onlyOwner {\r\n    DurationFee.durationFee_6M = _newVal;\r\n    emit setDurationFee(6, _newVal);\r\n  }\r\n\r\n  function setDuration_9M_Fee(uint256 _newVal) external onlyOwner {\r\n    DurationFee.durationFee_9M = _newVal;\r\n    emit setDurationFee(9, _newVal);\r\n  }\r\n\r\n  function setDuration_12M_Fee(uint256 _newVal) external onlyOwner {\r\n    DurationFee.durationFee_12M = _newVal;\r\n    emit setDurationFee(12, _newVal);\r\n  }\r\n\r\n  function setDuration_24M_Fee(uint256 _newVal) external onlyOwner {\r\n    DurationFee.durationFee_24M = _newVal;\r\n    emit setDurationFee(24, _newVal);\r\n  }\r\n\r\n  function withdrawBalance(\r\n    address _token,\r\n    address recipient,\r\n    uint256 amt\r\n  ) external onlyOwner {\r\n    require(amt \u003e 0, \"amt is 0\");\r\n    if (_token == address(0)) {\r\n      require(amt \u003c= payable(address(this)).balance, \"over amt\");\r\n      payable(recipient).transfer(amt);\r\n    } else {\r\n      IERC20 token = IERC20(_token);\r\n      require(amt \u003c= token.balanceOf(address(this)), \"over amt\");\r\n      token.safeTransfer(recipient, amt);\r\n    }\r\n  }\r\n\r\n  /*\r\n   ** internal function\r\n   */\r\n  function checkSender(address lockerAddr) internal view returns (uint8) {\r\n    //0: false 1:success\r\n    // PersonalLocker locker = personallockers[msg.sender][key_address][key_Id];\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    if (locker.showInfo().ownAddress == msg.sender) return 1;\r\n    if (locker.showInfo().backupAddress == msg.sender) return 1;\r\n    return 0;\r\n  }\r\n\r\n  function getDurationFee(uint256 duration) internal view returns (uint256) {\r\n    if (duration \u003c= 90 days) return DurationFee.durationFee_3M;\r\n    if (duration \u003e 90 days \u0026\u0026 duration \u003c= 180 days) return DurationFee.durationFee_6M;\r\n    if (duration \u003e 180 days \u0026\u0026 duration \u003c= 270 days) return DurationFee.durationFee_9M;\r\n    if (duration \u003e 270 days \u0026\u0026 duration \u003c= 365 days) return DurationFee.durationFee_12M;\r\n    return DurationFee.durationFee_24M;\r\n  }\r\n\r\n  /*\r\n  View Function\r\n   */\r\n  function lockerInfoByLocker(address lockerAddr) public view returns (VerifyProps memory) {\r\n    PersonalLocker locker = PersonalLocker(payable(lockerAddr));\r\n    return locker.showInfo();\r\n  }\r\n\r\n  function lockersInfoByWallet(address account, uint8 isMain) public view returns (VerifyProps[] memory) {\r\n    //0:backup 1:main\r\n    uint256 counts = isMain == 1 ? mainAccount[account].length : backupAccount[account].length;\r\n    VerifyProps[] memory info = new VerifyProps[](counts);\r\n    for (uint256 i = 0; i \u003c counts; i++) {\r\n      PersonalLocker locker = isMain == 1 ? mainAccount[account][i] : backupAccount[account][i];\r\n      info[i] = locker.showInfo();\r\n    }\r\n    return info;\r\n  }\r\n\r\n  function mainLockerCounts(address account) public view returns (uint256) {\r\n    return mainAccount[account].length;\r\n  }\r\n\r\n  function backupLockerCounts(address account) public view returns (uint256) {\r\n    return backupAccount[account].length;\r\n  }\r\n}\r\n\r\ncontract PersonalLocker is ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n\r\n  VerifyProps public LockerInfo;\r\n  bool hasBackupAccount; //default: false\r\n  mapping(address =\u003e bool) public isWhiteList;\r\n\r\n  modifier isVerified() {\r\n    require(verifiedCaller() == 1, \"not owner\");\r\n    require(verifiedERC721Account() == 1, \"can not do anything\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    string memory lockerName,\r\n    address _wallet1,\r\n    address key1_address,\r\n    uint256 key1_Id,\r\n    uint256 verifiedDuration\r\n  ) {\r\n    LockerInfo.lockerName = lockerName;\r\n    LockerInfo.lockerAddress = address(this);\r\n    LockerInfo.lockerManager = msg.sender;\r\n    LockerInfo.ownAddress = _wallet1;\r\n    LockerInfo.verifiedToken = key1_address;\r\n    LockerInfo.verifiedId = key1_Id;\r\n    LockerInfo.verifiedDuration = verifiedDuration;\r\n    LockerInfo.lastVerifiedTime = block.timestamp;\r\n    isWhiteList[_wallet1] = true;\r\n    isWhiteList[msg.sender] = true;\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  // Add backup Account\r\n  function addBackupInfo(\r\n    address wallet2,\r\n    address key2_address,\r\n    uint256 key2_Id\r\n  ) external isVerified nonReentrant {\r\n    require(!hasBackupAccount, \"already create a backup account\");\r\n    LockerInfo.backupAddress = wallet2;\r\n    LockerInfo.backupVerifiedToken = key2_address;\r\n    LockerInfo.backupVerifiedId = key2_Id;\r\n    isWhiteList[wallet2] = true;\r\n    hasBackupAccount = true;\r\n  }\r\n\r\n  //withdraw function\r\n  function withdrawUtility(address receiver, uint256 amounts) external payable isVerified nonReentrant {\r\n    require(isWhiteList[receiver] == true, \"not allow\");\r\n    require(amounts \u003c= address(this).balance, \"not enough\");\r\n    payable(receiver).transfer(amounts);\r\n  }\r\n\r\n  function withdrawERC20(\r\n    address _tokenAddr,\r\n    address receiver,\r\n    uint256 amounts\r\n  ) external isVerified nonReentrant {\r\n    require(isWhiteList[receiver] == true, \"not allow\");\r\n    IERC20 token = IERC20(_tokenAddr);\r\n    uint256 balance = token.balanceOf(address(this));\r\n    require(balance - amounts \u003e= 0, \"no funds\");\r\n    token.safeTransfer(receiver, amounts);\r\n  }\r\n\r\n  function withdrawERC721(\r\n    address receiver,\r\n    address _tokenAddr,\r\n    uint256 _tokenID\r\n  ) external isVerified nonReentrant {\r\n    require(isWhiteList[receiver] == true, \"not allow\");\r\n    IERC721 token = IERC721(_tokenAddr);\r\n    token.transferFrom(address(this), receiver, _tokenID);\r\n  }\r\n\r\n  function addWhiteList(address receiver) external isVerified {\r\n    isWhiteList[receiver] = true;\r\n  }\r\n\r\n  function removeWhiteList(address receiver) external isVerified {\r\n    require(receiver != LockerInfo.lockerManager, \"can not remove Manager address\");\r\n    isWhiteList[receiver] = false;\r\n  }\r\n\r\n  function restartVerifiedTimer() external isVerified {\r\n    LockerInfo.lastVerifiedTime = block.timestamp;\r\n  }\r\n\r\n  function setupVerifiedDuration(uint256 duration) external isVerified {\r\n    LockerInfo.verifiedDuration = duration;\r\n    LockerInfo.lastVerifiedTime = block.timestamp;\r\n  }\r\n\r\n  function onERC721Received(\r\n    address,\r\n    address from,\r\n    uint256,\r\n    bytes calldata\r\n  ) external pure returns (bytes4) {\r\n    require(from == address(0x0), \"Cannot send nfts to Vault directly\");\r\n    return IERC721Receiver.onERC721Received.selector;\r\n  }\r\n\r\n  function showInfo() external view returns (VerifyProps memory) {\r\n    return LockerInfo;\r\n  }\r\n\r\n  function verifiedERC721Account() internal view returns (uint8) {\r\n    //0: false 1:success\r\n    if (LockerInfo.lastVerifiedTime + LockerInfo.verifiedDuration \u003c block.timestamp) return 1;\r\n    if (IERC721(LockerInfo.verifiedToken).ownerOf(LockerInfo.verifiedId) == tx.origin) return 1;\r\n    if (IERC721(LockerInfo.backupVerifiedToken).ownerOf(LockerInfo.backupVerifiedId) == tx.origin) return 1;\r\n    return 0;\r\n  }\r\n\r\n  function verifiedCaller() internal view returns (uint8) {\r\n    //0: false 1:success\r\n    if ((msg.sender == LockerInfo.lockerManager) \u0026\u0026 (tx.origin == LockerInfo.ownAddress || tx.origin == LockerInfo.backupAddress || msg.sender == address(this))) return 1;\r\n    if (msg.sender == LockerInfo.ownAddress || msg.sender == LockerInfo.backupAddress || msg.sender == address(this)) return 1;\r\n    return 0;\r\n  }\r\n}\r\n"},"Utils.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\nimport \"./DexUtils.sol\";\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IAnyswapV1ERC20 is IERC20 {\r\n  function underlying() external view returns (address);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n  // Booleans are more expensive than uint256 or any type that takes up a full\r\n  // word because each write operation emits an extra SLOAD to first read the\r\n  // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n  // back. This is the compiler\u0027s defense against contract upgrades and\r\n  // pointer aliasing, and it cannot be disabled.\r\n\r\n  // The values being non-zero value makes deployment a bit more expensive,\r\n  // but in exchange the refund on every call to nonReentrant will be lower in\r\n  // amount. Since refunds are capped to a percentage of the total\r\n  // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n  // increase the likelihood of the full refund coming into effect.\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  constructor() {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _status = _ENTERED;\r\n\r\n    _;\r\n\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b \u003c= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b \u003e 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint256 size;\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size \u003e 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain `call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length \u003e 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Allows for contract can cross-chain swap token\r\n */\r\n\r\nabstract contract TokenManagement is Ownable {\r\n  mapping(uint256 =\u003e mapping(address =\u003e token)) internal tokenList;\r\n  bool isPassed = true;\r\n\r\n  struct token {\r\n    bool isAllow;\r\n    uint256 minAmt;\r\n    uint256 maxAmt;\r\n  }\r\n\r\n  // constructor(address _owner) {\r\n  // \towner = _owner;\r\n  // }\r\n\r\n  /**\r\n   * Function modifier to require caller to be contract owner\r\n   */\r\n  modifier tokenAllowed(uint256 destId, address tokenAddr) {\r\n    require(isAllowed(destId, tokenAddr), \"!tokenAllowed\");\r\n    _;\r\n  }\r\n  modifier isUnderlying(address tokenAddr) {\r\n    require(checkUnderlyingAddress(tokenAddr), \"not allow address\");\r\n    _;\r\n  }\r\n\r\n  function addToken(\r\n    uint256 destId,\r\n    address tokenAddr,\r\n    uint256 minAmt,\r\n    uint256 maxAmt\r\n  ) public onlyOwner {\r\n    tokenList[destId][tokenAddr].isAllow = true;\r\n    tokenList[destId][tokenAddr].minAmt = minAmt;\r\n    tokenList[destId][tokenAddr].maxAmt = maxAmt == 0 ? type(uint256).max : maxAmt;\r\n  }\r\n\r\n  function allowToken(uint256 destId, address tokenAddr) public onlyOwner {\r\n    tokenList[destId][tokenAddr].isAllow = true;\r\n  }\r\n\r\n  function unAllowToken(uint256 destId, address tokenAddr) public onlyOwner {\r\n    tokenList[destId][tokenAddr].isAllow = false;\r\n  }\r\n\r\n  function setPassed(bool _isPassed) public onlyOwner {\r\n    isPassed = _isPassed;\r\n  }\r\n\r\n  function checkUnderlyingAddress(address _tokenAddr) public view returns (bool) {\r\n    address tokenAddr = IAnyswapV1ERC20(_tokenAddr).underlying();\r\n    if (tokenAddr != address(0)) return true;\r\n    else return false;\r\n  }\r\n\r\n  function checkMaxAmount(uint256 destId, address tokenAddr) public view returns (uint256) {\r\n    return tokenList[destId][tokenAddr].maxAmt == 0 ? type(uint256).max : tokenList[destId][tokenAddr].maxAmt;\r\n  }\r\n\r\n  function checkMinAmount(uint256 destId, address tokenAddr) public view returns (uint256) {\r\n    return tokenList[destId][tokenAddr].minAmt;\r\n  }\r\n\r\n  /**\r\n   * Check if token address is allow\r\n   */\r\n  function isAllowed(uint256 destId, address tokenAddr) public view returns (bool) {\r\n    // return (tokenList[tokenAddr].isAllow || isPassed) \u0026\u0026 checkUnderlyingAddress(tokenAddr);\r\n    return tokenList[destId][tokenAddr].isAllow || isPassed;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  /**\r\n   * @dev Deprecated. This function has issues similar to the ones found in\r\n   * {IERC20-approve}, and its usage is discouraged.\r\n   *\r\n   * Whenever possible, use {safeIncreaseAllowance} and\r\n   * {safeDecreaseAllowance} instead.\r\n   */\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    // safeApprove should only be called when setting an initial allowance,\r\n    // or when resetting it to zero. To increase and decrease it, use\r\n    // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n    require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    unchecked {\r\n      uint256 oldAllowance = token.allowance(address(this), spender);\r\n      require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\r\n      uint256 newAllowance = oldAllowance - value;\r\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n    // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n    if (returndata.length \u003e 0) {\r\n      // Return data is optional\r\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n  }\r\n}\r\n\r\ninterface IERC165 {\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30 000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n  /**\r\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n  /**\r\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n   */\r\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n  /**\r\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n   */\r\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n  /**\r\n   * @dev Returns the number of tokens in ``owner``\u0027s account.\r\n   */\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  /**\r\n   * @dev Returns the owner of the `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n   * The approval is cleared when the token is transferred.\r\n   *\r\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The caller must own the token or be an approved operator.\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address to, uint256 tokenId) external;\r\n\r\n  /**\r\n   * @dev Approve or remove `operator` as an operator for the caller.\r\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The `operator` cannot be the caller.\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   */\r\n  function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n  /**\r\n   * @dev Returns the account approved for `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n  /**\r\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n   *\r\n   * See {setApprovalForAll}\r\n   */\r\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n  /**\r\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n   * by `operator` from `from`, this function is called.\r\n   *\r\n   * It must return its Solidity selector to confirm the token transfer.\r\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n   *\r\n   * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n}\r\n\r\ninterface IPersonalLocker {\r\n  function withdrawUitility(address receiver) external payable;\r\n\r\n  function withdrawERC20(\r\n    address _tokenAddr,\r\n    address receiver,\r\n    uint256 amounts\r\n  ) external;\r\n\r\n  function addWhiteList(address receiver) external;\r\n\r\n  function restartVerifiedTimer() external;\r\n\r\n  function setupVerifiedDuration(uint256 duration) external;\r\n\r\n  function showInfo() external view returns (VerifyProps memory);\r\n}\r\n\r\nstruct VerifyProps {\r\n  string lockerName;\r\n  address lockerAddress;\r\n  address lockerManager;\r\n  address ownAddress;\r\n  address verifiedToken; //ERC721\r\n  uint256 verifiedId; //ERC721 tokenId\r\n  address backupAddress;\r\n  address backupVerifiedToken; //ERC721 backup\r\n  uint256 backupVerifiedId; //ERC721 tokenId backup\r\n  uint256 verifiedDuration;\r\n  uint256 lastVerifiedTime;\r\n}\r\n\r\ninterface ISafeAffinity {\r\n  function symbol() external returns (string memory);\r\n\r\n  function decimals() external returns (uint8);\r\n\r\n  function approve(address, uint256) external returns (bool);\r\n\r\n  function approveMax(address) external returns (bool);\r\n\r\n  function transfer(address, uint256) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address,\r\n    address,\r\n    uint256\r\n  ) external returns (bool);\r\n\r\n  function claimVaultDividend() external returns (bool);\r\n\r\n  function claimEarnDividend() external returns (bool);\r\n\r\n  function manuallyDeposit() external returns (bool);\r\n\r\n  function getIsFeeExempt(address) external returns (bool);\r\n\r\n  function getIsDividendExempt(address) external returns (bool);\r\n\r\n  function getIsTxLimitExempt(address) external returns (bool);\r\n\r\n  function getTotalFee(bool) external returns (uint256);\r\n\r\n  function deleteBag(uint256) external returns (bool);\r\n}\r\n"}}