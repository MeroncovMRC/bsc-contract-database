{"1_Storage.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.8.2 \u003c0.9.0;\n\n/**\n * @title Storage\n * @dev Store \u0026 retrieve value in a variable\n * @custom:dev-run-script ./scripts/deploy_with_ethers.ts\n */\ncontract Storage {\n\n    uint256 number;\n\n    /**\n     * @dev Store value in variable\n     * @param num value to store\n     */\n    function store(uint256 num) public {\n        number = num;\n    }\n\n    /**\n     * @dev Return value \n     * @return value of \u0027number\u0027\n     */\n    function retrieve() public view returns (uint256){\n        return number;\n    }\n}"},"dinars_token.sol":{"content":"pragma solidity ^0.8.2;\r\n\r\ncontract Token {\r\n    mapping(address =\u003e uint) public balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint)) public allowance;\r\n    uint public totalSupply = 100000000000 * 10 ** 18;\r\n    string public name = \"DZ Dinars Token\";\r\n    string public symbol = \"DZDT\";\r\n    uint public decimals = 18;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    constructor() {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address owner) public returns(uint) {\r\n        return balances[owner];\r\n    }\r\n    \r\n    function transfer(address to, uint value) public returns(bool) {\r\n        require(balanceOf(msg.sender) \u003e= value, \u0027balance too low\u0027);\r\n        balances[to] += value;\r\n        balances[msg.sender] -= value;\r\n       emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint value) public returns(bool) {\r\n        require(balanceOf(from) \u003e= value, \u0027balance too low\u0027);\r\n        require(allowance[from][msg.sender] \u003e= value, \u0027allowance too low\u0027);\r\n        balances[to] += value;\r\n        balances[from] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;   \r\n    }\r\n    \r\n    function approve(address spender, uint value) public returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;   \r\n    }\r\n}"}}