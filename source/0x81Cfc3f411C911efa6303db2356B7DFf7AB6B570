{"BridgeBase.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\nimport \"./Ownable.sol\";\r\nimport \"./Errors.sol\";\r\nimport \"./TransferHelper.sol\";\r\n\r\n\r\nabstract contract BridgeBase is Ownable {\r\n    address public router;\r\n    address public constant NATIVE_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    \r\n\r\n    constructor(address _router) Ownable() {\r\n        router = _router;\r\n    }\r\n\r\n    event UpdateRouterAddress(address indexed routerAddress);\r\n\r\n    event WithdrawETH(uint256 amount);\r\n\r\n    event Withdraw(address token, uint256 amount);\r\n\r\n    modifier onlyRouter() {\r\n        require(msg.sender == router, Errors.INVALID_SENDER);\r\n        _;\r\n    }\r\n\r\n    function updateRouterAddress(address newRouter) external onlyOwner {\r\n        router = newRouter;\r\n        emit UpdateRouterAddress(newRouter);\r\n    }\r\n\r\n    function bridge(\r\n        address _fromAddress,\r\n        address _fromToken,\r\n        uint256 _amount,\r\n        address _receiverAddress,\r\n        uint256 _toChainId,\r\n        bytes memory _extraData,\r\n        uint256 _channelFee,\r\n        address _feeAddress\r\n    ) external payable virtual;\r\n\r\n\r\n    function withdraw(address _token, address _receiverAddress, uint256 _amount) external onlyOwner {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransfer(_token, _receiverAddress, _amount);\r\n        emit Withdraw(_token, _amount);\r\n    }\r\n\r\n    function withdrawETH(address _receiverAddress, uint256 _amount) external onlyOwner {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransferETH(_receiverAddress, _amount);\r\n        emit WithdrawETH(_amount);\r\n    }\r\n\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary Errors {\n    string internal constant ADDRESS_0_PROVIDED = \"ADDRESS_0_PROVIDED\";\n    string internal constant DEX_NOT_ALLOWED = \"DEX_NOT_ALLOWED\";\n    string internal constant TOKEN_NOT_SUPPORTED = \"TOKEN_NOT_SUPPORTED\";\n    string internal constant SWAP_FAILED = \"SWAP_FAILED\";\n    string internal constant VALUE_SHOULD_BE_ZERO = \"VALUE_SHOULD_BE_ZERO\";\n    string internal constant VALUE_SHOULD_NOT_BE_ZERO = \"VALUE_SHOULD_NOT_BE_ZERO\";\n    string internal constant VALUE_NOT_EQUAL_TO_AMOUNT = \"VALUE_NOT_EQUAL_TO_AMOUNT\";\n\n    string internal constant INVALID_AMT = \"INVALID_AMT\";\n    string internal constant INVALID_ADDRESS = \"INVALID_ADDRESS\";\n    string internal constant INVALID_SENDER = \"INVALID_SENDER\";\n\n    string internal constant UNKNOWN_TRANSFER_ID = \"UNKNOWN_TRANSFER_ID\";\n\n}\n"},"Glue.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./Ownable.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./Errors.sol\";\nimport \"./TransferHelper.sol\";\nimport \"./BridgeBase.sol\";\nimport \"./SwapBase.sol\";\n\t\ncontract Glue is Ownable, ReentrancyGuard {\n    address private constant NATIVE_TOKEN_ADDRESS =\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    mapping(string =\u003e uint256) public fee;\n    address public feeAddress;\n\n    modifier ensure(uint256 deadline) {\n        require(deadline \u003e= block.timestamp, \"Glue: EXPIRED\");\n        _;\n    }\n\n    struct SwapBridgeDex {\n        address dex;\n        bool isEnabled;\n    }\n\n    SwapBridgeDex[] public swapDexs;\n    SwapBridgeDex[] public bridgeDexs;\n\n    constructor() {}\n\n    receive() external payable {}\n\n    event NewSwapDexAdded(address dex, bool isEnabled);\n    event NewBridgeDexAdded(address dex, bool isEnabled);\n    event SwapDexDisabled(uint256 dexID);\n    event BridgeDexDisabled(uint256 dexID);\n    event SetFee(string channel, uint256 fee);\n    event SetFeeAddress(address feeAddress);\n    event WithdrawETH(uint256 amount);\n    event Withdraw(address token, uint256 amount);\n\n    struct SwapBridgeRequest {\n        uint256 id;\n        uint256 nativeAmount;\n        address inputToken;\n        bytes data;\n    }\n\n    // **** USER REQUEST ****\n    struct UserSwapRequest {\n        address receiverAddress;\n        uint256 amount;\n        SwapBridgeRequest swapRequest;\n        string channel;\n        uint256 deadline;\n    }\n\n    struct UserBridgeRequest {\n        address receiverAddress;\n        uint256 toChainId;\n        uint256 amount;\n        SwapBridgeRequest bridgeRequest;\n        string channel;\n        uint256 deadline;\n    }\n\n    struct UserSwapBridgeRequest {\n        address receiverAddress;\n        uint256 toChainId;\n        uint256 amount;\n        SwapBridgeRequest swapRequest;\n        SwapBridgeRequest bridgeRequest;\n        string channel;\n        uint256 deadline;\n    }\n\n    // **** SWAP ****\n    function swap(UserSwapRequest calldata _userRequest)\n        external\n        payable\n        ensure(_userRequest.deadline)\n        nonReentrant\n    {\n        require(\n            _userRequest.receiverAddress != address(0),\n            Errors.ADDRESS_0_PROVIDED\n        );\n        require(_userRequest.amount != 0, Errors.INVALID_AMT);\n        require(\n            _userRequest.swapRequest.inputToken != address(0),\n            Errors.ADDRESS_0_PROVIDED\n        );\n\n        SwapBridgeDex memory swapInfo = swapDexs[_userRequest.swapRequest.id];\n\n        require(\n            swapInfo.dex != address(0) \u0026\u0026 swapInfo.isEnabled,\n            Errors.DEX_NOT_ALLOWED\n        );\n        uint256 nativeSwapAmount = _userRequest.swapRequest.inputToken ==\n            NATIVE_TOKEN_ADDRESS\n            ? _userRequest.amount + _userRequest.swapRequest.nativeAmount\n            : _userRequest.swapRequest.nativeAmount;\n        require(\n            msg.value == nativeSwapAmount,\n            Errors.VALUE_NOT_EQUAL_TO_AMOUNT\n        );\n\n        // fee\n        uint256 _channelFee;\n        if (feeAddress != address(0)) {\n            _channelFee = fee[_userRequest.channel] == 0\n                ? 3000\n                : fee[_userRequest.channel];\n        }\n\n        // swap\n        SwapBase(swapInfo.dex).swap{value: nativeSwapAmount}(\n            msg.sender,\n            _userRequest.swapRequest.inputToken,\n            _userRequest.amount,\n            _userRequest.receiverAddress,\n            _userRequest.swapRequest.data,\n            _channelFee,\n            feeAddress\n        );\n    }\n\n    // **** BRIDGE ****\n    function bridge(UserBridgeRequest calldata _userRequest)\n        external\n        payable\n        ensure(_userRequest.deadline)\n        nonReentrant\n    {\n        require(\n            _userRequest.receiverAddress != address(0),\n            Errors.ADDRESS_0_PROVIDED\n        );\n        require(_userRequest.amount != 0, Errors.INVALID_AMT);\n        require(\n            _userRequest.bridgeRequest.inputToken != address(0),\n            Errors.ADDRESS_0_PROVIDED\n        );\n\n        SwapBridgeDex memory bridgeInfo = bridgeDexs[\n            _userRequest.bridgeRequest.id\n        ];\n\n        require(\n            bridgeInfo.dex != address(0) \u0026\u0026 bridgeInfo.isEnabled,\n            Errors.DEX_NOT_ALLOWED\n        );\n\n        // fee\n        uint256 _channelFee;\n        if (feeAddress != address(0)) {\n            _channelFee = fee[_userRequest.channel] == 0\n                ? 3000\n                : fee[_userRequest.channel];\n        }\n\n        // bridge\n        BridgeBase(bridgeInfo.dex).bridge{value: msg.value}(\n            msg.sender,\n            _userRequest.bridgeRequest.inputToken,\n            _userRequest.amount,\n            _userRequest.receiverAddress,\n            _userRequest.toChainId,\n            _userRequest.bridgeRequest.data,\n            _channelFee,\n            feeAddress\n        );\n    }\n\n    // **** SWAP AND BRIDGE ****\n    function swapAndBridge(UserSwapBridgeRequest calldata _userRequest)\n        external\n        payable\n        ensure(_userRequest.deadline)\n        nonReentrant\n    {\n        require(\n            _userRequest.receiverAddress != address(0),\n            Errors.ADDRESS_0_PROVIDED\n        );\n        require(_userRequest.amount != 0, Errors.INVALID_AMT);\n\n        require(\n            _userRequest.swapRequest.inputToken != address(0),\n            Errors.ADDRESS_0_PROVIDED\n        );\n\n        require(\n            _userRequest.bridgeRequest.inputToken != address(0),\n            Errors.ADDRESS_0_PROVIDED\n        );\n\n        SwapBridgeDex memory swapInfo = swapDexs[_userRequest.swapRequest.id];\n\n        require(\n            swapInfo.dex != address(0) \u0026\u0026 swapInfo.isEnabled,\n            Errors.DEX_NOT_ALLOWED\n        );\n\n        SwapBridgeDex memory bridgeInfo = bridgeDexs[\n            _userRequest.bridgeRequest.id\n        ];\n        require(\n            bridgeInfo.dex != address(0) \u0026\u0026 bridgeInfo.isEnabled,\n            Errors.DEX_NOT_ALLOWED\n        );\n\n        uint256 nativeSwapAmount = _userRequest.swapRequest.inputToken ==\n            NATIVE_TOKEN_ADDRESS\n            ? _userRequest.amount + _userRequest.swapRequest.nativeAmount\n            : _userRequest.swapRequest.nativeAmount;\n        uint256 _amountOut = SwapBase(swapInfo.dex).swap{\n            value: nativeSwapAmount\n        }(\n            msg.sender,\n            _userRequest.swapRequest.inputToken,\n            _userRequest.amount,\n            address(this),\n            _userRequest.swapRequest.data,\n            0,\n            feeAddress\n        );\n\n        uint256 nativeInput = _userRequest.bridgeRequest.nativeAmount;\n\n        if (_userRequest.bridgeRequest.inputToken != NATIVE_TOKEN_ADDRESS) {\n            TransferHelper.safeApprove(\n                _userRequest.bridgeRequest.inputToken,\n                bridgeInfo.dex,\n                _amountOut\n            );\n        } else {\n            nativeInput = _amountOut + _userRequest.bridgeRequest.nativeAmount;\n        }\n\n        // fee\n        uint256 _channelFee;\n        if (feeAddress != address(0)) {\n            _channelFee = fee[_userRequest.channel] == 0\n                ? 3000\n                : fee[_userRequest.channel];\n        }\n\n        BridgeBase(bridgeInfo.dex).bridge{value: nativeInput}(\n            address(this),\n            _userRequest.bridgeRequest.inputToken,\n            _amountOut,\n            _userRequest.receiverAddress,\n            _userRequest.toChainId,\n            _userRequest.bridgeRequest.data,\n            _channelFee,\n            feeAddress\n        );\n    }\n\n    // **** ONLY OWNER ****\n    function addSwapDexs(SwapBridgeDex calldata _dex) external onlyOwner {\n        require(_dex.dex != address(0), Errors.ADDRESS_0_PROVIDED);\n        swapDexs.push(_dex);\n        emit NewSwapDexAdded(_dex.dex, _dex.isEnabled);\n    }\n\n    function addBridgeDexs(SwapBridgeDex calldata _dex) external onlyOwner {\n        require(_dex.dex != address(0), Errors.ADDRESS_0_PROVIDED);\n        bridgeDexs.push(_dex);\n        emit NewBridgeDexAdded(_dex.dex, _dex.isEnabled);\n    }\n\n    function disableSwapDex(uint256 _dexId) external onlyOwner {\n        swapDexs[_dexId].isEnabled = false;\n        emit SwapDexDisabled(_dexId);\n    }\n\n    function disableBridgeDex(uint256 _dexId) external onlyOwner {\n        bridgeDexs[_dexId].isEnabled = false;\n        emit BridgeDexDisabled(_dexId);\n    }\n\n    function setFee(string memory _channel, uint256 _fee) external onlyOwner {\n        fee[_channel] = _fee;\n        emit SetFee(_channel, _fee);\n    }\n\n    function setFeeAddress(address _newFeeAddress) external onlyOwner {\n        feeAddress = _newFeeAddress;\n        emit SetFeeAddress(_newFeeAddress);\n    }\n\n    function withdraw(\n        address _token,\n        address _receiverAddress,\n        uint256 _amount\n    ) external onlyOwner {\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\n        TransferHelper.safeTransfer(_token, _receiverAddress, _amount);\n        emit Withdraw(_token, _amount);\n    }\n\n    function withdrawETH(address _receiverAddress, uint256 _amount)\n        external\n        onlyOwner\n    {\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\n        TransferHelper.safeTransferETH(_receiverAddress, _amount);\n        emit WithdrawETH(_amount);\n    }\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"},"SwapBase.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\nimport \"./Ownable.sol\";\r\nimport \"./Errors.sol\";\r\nimport \"./TransferHelper.sol\";\r\n\r\n\r\nabstract contract SwapBase is Ownable {\r\n    address public immutable router;\r\n\r\n    constructor(address _router) Ownable() {\r\n        router = _router;\r\n    }\r\n\r\n    event WithdrawETH(uint256 amount);\r\n\r\n    event Withdraw(address token, uint256 amount);\r\n\r\n    modifier onlyRouter {\r\n        require(msg.sender == router, Errors.INVALID_SENDER);\r\n        _;\r\n    }\r\n\r\n    function swap(\r\n        address _fromAddress,\r\n        address _fromToken,\r\n        uint256 _amount,\r\n        address _receiverAddress,\r\n        bytes memory _extraData,\r\n        uint256 _channelFee,\r\n        address _feeAddress\r\n    ) external payable virtual returns (uint256);\r\n\r\n    function withdraw(address _token, address _receiverAddress, uint256 _amount) external onlyOwner {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransfer(_token, _receiverAddress, _amount);\r\n        emit Withdraw(_token, _amount);\r\n    }\r\n\r\n    function withdrawETH(address _receiverAddress, uint256 _amount) external onlyOwner {\r\n        require(_receiverAddress != address(0), Errors.ADDRESS_0_PROVIDED);\r\n        TransferHelper.safeTransferETH(_receiverAddress, _amount);\r\n        emit WithdrawETH(_amount);\r\n    }\r\n}\r\n"},"TransferHelper.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: APPROVE_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, \u0027TransferHelper: ETH_TRANSFER_FAILED\u0027);\r\n    }\r\n}\r\n"}}