// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;

interface IERC20 {
    function transfer(address to, uint256 value) external returns (bool);
    function balanceOf(address addr) external returns (uint256);
}

contract CluClaim {
    address private _owner;
    
    mapping (address => uint256) _amounts;
    
    IERC20 private _token;
    
    constructor(address token){
        _owner = msg.sender;
        _token = IERC20(token);
    }
    
    function addClaims(address[] calldata recipients, uint256[] calldata amounts) external {
        require(msg.sender == _owner);
        
        for (uint256 i = 0; i < recipients.length; i++)
            _amounts[recipients[i]] = amounts[i];
    }
    
    function claimCheck(address addr) public view returns (uint256) {
        return _amounts[addr];
    }
    
    function claimAirdrop() external {
        uint256 claimAmount = _amounts[msg.sender];
		_amounts[msg.sender] = 0;
        require(claimAmount > 0 , "Nothing to claim!");
        require(_token.balanceOf(address(this)) >= claimAmount , "Contract balance too low!");
        require(_token.transfer(msg.sender, claimAmount));
    }
    
}