
// File: /contracts/claim_portal/ClaimPortal.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract ClaimPortal is Ownable {
    using SafeMath for uint256;

    event Claimed(address claimer, uint256 claimedAmount);

    constructor(
        IERC20 _dnlContract,
        uint256 _startClaimAt,
        uint256 _endClaimAt,
        uint256 _tgePercent
    ) {
        dnlContract = _dnlContract;
        startClaimAt = _startClaimAt;
        endClaimAt = _endClaimAt;
        tgePercent = _tgePercent;
    }

    IERC20 public dnlContract;
    uint256 public releasePeriod = 24 hours;
    uint256 public startClaimAt;
    uint256 public endClaimAt;
    uint256 public tgePercent;
    uint256 constant DENOMINATOR = 10000;

    mapping(address => ClaimDetail) public userToClaimDetail;
    address[] public claimers;

    struct ClaimDetail {
        uint256 claimableAmount;
        uint256 lastClaimAt;
        uint256 claimedAmount;
        uint256 tgeReleaseAmount;
        bool isTGEClaimed;
    }

    function getTotalClaimers() public view returns (uint256) {
        return claimers.length;
    }

    function setReleasePeriod(uint256 _releasePeriod) external onlyOwner {
        releasePeriod = _releasePeriod;
    }

    function setStartClaimAt(uint256 _startClaimAt) external onlyOwner {
        startClaimAt = _startClaimAt;
    }

    function setEndClaimAt(uint256 _endClaimAt) external onlyOwner {
        endClaimAt = _endClaimAt;
    }

    function setDNLContract(IERC20 _dnlContract) external onlyOwner {
        dnlContract = _dnlContract;
    }

    function setTGEPercent(uint256 _tgePercent) external onlyOwner {
        tgePercent = _tgePercent;
    }

    function resetClaimData(address _receiver) public onlyOwner {
        delete userToClaimDetail[_receiver];
        /// remove receiver from claimers
        for (uint256 i = 0; i < claimers.length; i++) {
            if (claimers[i] == _receiver) {
                claimers[i] = claimers[claimers.length - 1];
                claimers.pop();
            }
        }
    }

    function resetClaimDataBatch(address[] memory _receivers)
        external
        onlyOwner
    {
        for (uint256 i = 0; i < _receivers.length; i++) {
            resetClaimData(_receivers[i]);
        }
    }

    function modifyClaimData(
        address _receiver,
        uint256 _claimableAmount,
        uint256 _lastClaimAt,
        uint256 _claimedAmount,
        uint256 _tgeReleaseAmount,
        bool _isTGEClaimed
    ) public onlyOwner {
        ClaimDetail storage claimDetail = userToClaimDetail[_receiver];
        claimDetail.claimableAmount = _claimableAmount;
        claimDetail.lastClaimAt = _lastClaimAt;
        claimDetail.claimedAmount = _claimedAmount;
        claimDetail.tgeReleaseAmount = _tgeReleaseAmount;
        claimDetail.isTGEClaimed = _isTGEClaimed;
    }

    function setClaimData(address _receiver, uint256 _claimableAmount)
        public
        onlyOwner
    {
        /// if receiver not in claimers, add it to claimers
        if (userToClaimDetail[_receiver].claimableAmount == 0) {
            claimers.push(_receiver);
        }
        uint256 tgeReleaseAmount = _claimableAmount.mul(tgePercent).div(
            DENOMINATOR
        );
        ClaimDetail memory claimDetail = ClaimDetail(
            _claimableAmount.sub(tgeReleaseAmount),
            0,
            0,
            tgeReleaseAmount,
            false
        );

        userToClaimDetail[_receiver] = claimDetail;
    }

    function setClaimDataBatch(
        address[] memory _receivers,
        uint256[] memory _claimableAmounts
    ) public onlyOwner {
        require(
            _receivers.length == _claimableAmounts.length,
            "Not same length"
        );
        for (uint256 i = 0; i < _receivers.length; i++) {
            setClaimData(_receivers[i], _claimableAmounts[i]);
        }
    }

    function getClaimDetail(address _receiver)
        external
        view
        returns (
            uint256 claimableAmount,
            uint256 lastClaimAt,
            uint256 claimedAmount,
            uint256 tgeReleaseAmount,
            bool isTGEClaimed
        )
    {
        ClaimDetail storage claimDetail = userToClaimDetail[_receiver];
        return (
            claimDetail.claimableAmount,
            claimDetail.lastClaimAt,
            claimDetail.claimedAmount,
            claimDetail.tgeReleaseAmount,
            claimDetail.isTGEClaimed
        );
    }

    function getClaimableAmount(address _receiver)
        public
        view
        returns (uint256)
    {
        if (block.timestamp < startClaimAt) return 0;
        ClaimDetail memory claimDetail = userToClaimDetail[_receiver];
        if (block.timestamp >= endClaimAt) {
            return claimDetail.claimableAmount.sub(claimDetail.claimedAmount);
        }
        uint256 releaseAmount = (
            claimDetail
                .claimableAmount
                .mul(block.timestamp.sub(startClaimAt).div(releasePeriod))
                .mul(releasePeriod)
                .div(endClaimAt.sub(startClaimAt))
        ).sub(claimDetail.claimedAmount);
        if (!claimDetail.isTGEClaimed) {
            return releaseAmount.add(claimDetail.tgeReleaseAmount);
        }
        return releaseAmount;
    }

    function claim() external {
        ClaimDetail storage claimDetail = userToClaimDetail[msg.sender];
        require(
            claimDetail.claimableAmount > 0,
            "ClaimPortal: Nothing to claim"
        );
        require(
            block.timestamp > startClaimAt,
            "ClaimPortal: Not claimable yet"
        );
        if (!claimDetail.isTGEClaimed) {
            uint256 releaseAmountWithTGE = getClaimableAmount(msg.sender);
            require(releaseAmountWithTGE > 0, "ClaimPortal: Nothing to claim");
            require(
                dnlContract.transfer(msg.sender, releaseAmountWithTGE),
                "ClaimPortal: Transfer DNL failed"
            );
            claimDetail.isTGEClaimed = true;
            claimDetail.claimedAmount = claimDetail.claimedAmount.add(
                releaseAmountWithTGE.sub(claimDetail.tgeReleaseAmount)
            );
            claimDetail.lastClaimAt = block.timestamp;
            emit Claimed(msg.sender, releaseAmountWithTGE);
            return;
        }
        uint256 releaseAmount = getClaimableAmount(msg.sender);
        require(releaseAmount > 0, "ClaimPortal: Nothing to claim");
        bool success = dnlContract.transfer(msg.sender, releaseAmount);
        require(success, "ClaimPortal: Transfer DNL failed");
        claimDetail.claimedAmount = claimDetail.claimedAmount.add(
            releaseAmount
        );
        claimDetail.lastClaimAt = block.timestamp;
        emit Claimed(msg.sender, releaseAmount);
    }

    function withdrawERC20(address _receiver, uint256 _amount)
        external
        onlyOwner
        returns (bool)
    {
        require(
            _amount > 0,
            "ClaimPortal: Withdraw amount must be greater than 0"
        );
        require(
            dnlContract.transfer(_receiver, _amount),
            "ClaimPortal: Transfer DNL failed"
        );
        return true;
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

