{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"GasSaver.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./PancakeLibrary.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IPancakePair.sol\";\r\n\r\ncontract GasSaver is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    bytes private subContractBytesCode;\r\n    address public factory;\r\n    uint256 totalMinted;\r\n    uint256 totalBurned;\r\n\r\n    constructor(address _factory) {\r\n        bytes4 bytes4Address = bytes4(abi.encodePacked(address(this)));\r\n        bytes memory _subContractBytesCode = abi.encodePacked(hex\"6d3360801c63\", bytes4Address, hex\"18585733ff600052600e6012f3\");\r\n        subContractBytesCode = _subContractBytesCode;\r\n        factory = _factory;\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    modifier gasRefund {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        destroy((gasSpent + 14154) / 41947);\r\n    }\r\n\r\n   function activeSubContractAmount() external view returns (uint256) {\r\n        return totalMinted - totalBurned;\r\n    }\r\n\r\n    function _create(uint256 value) internal {\r\n        uint256 offset = totalMinted;\r\n        bytes memory code = subContractBytesCode;\r\n         assembly {\r\n            let end := add(value, offset)\r\n            for { } lt(offset, end) { offset := add(offset, 1) } {\r\n                let t := create2(0, add(code, 0x20), mload(code), offset)\r\n            }\r\n        } \r\n        totalMinted = offset;\r\n    }\r\n\r\n   function _destroyChildren(uint256 value) internal {\r\n        uint256 offset = totalBurned;\r\n        uint256 _minted = totalMinted;\r\n        uint256 end = offset + value;\r\n        bytes memory code = subContractBytesCode;\r\n        for(uint256 i = offset; i \u003c end; i++) {\r\n            if (i \u003e= _minted) {\r\n                end = i;\r\n                break;\r\n            }\r\n            address k = address(\r\n                uint160(                      // downcast to match the address type.\r\n                    uint256(                    // convert to uint to truncate upper digits.\r\n                        keccak256(                // compute the CREATE2 hash using 4 inputs.\r\n                            abi.encodePacked(       // pack all inputs to the hash together.\r\n                            hex\"ff\",              // start with 0xff to distinguish from RLP.\r\n                            address(this),        // this contract will be the caller.\r\n                            i,                 // pass in the supplied salt value.\r\n                            keccak256(            // pass in the hash of initialization code.\r\n                                abi.encodePacked(\r\n                                    code\r\n                                )\r\n                            )\r\n                            )\r\n                        )\r\n                    )\r\n                )   \r\n            );\r\n            assembly {\r\n                pop(call(gas(), k, 0, 0, 0, 0, 0))\r\n            }\r\n        }\r\n        totalBurned = end;\r\n    }\r\n\r\n    function destroy(uint256 value) public onlyOwner returns (bool) {\r\n        if (value \u003e 0) {\r\n            _destroyChildren(value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function create(uint256 amount) external {\r\n        _create(amount);\r\n    }\r\n\r\n    function computeAddress(uint256 salt) public view returns (address child) {\r\n        bytes memory _code = subContractBytesCode;\r\n        assembly {\r\n            let data := mload(0x40)\r\n            mstore(data,\r\n                add(\r\n                    0xff00000000000000000000000000000000000000000000000000000000000000,\r\n                    shl(0x58, address())\r\n                )\r\n            )\r\n            mstore(add(data, 21), salt)\r\n            mstore(add(data, 53), _code)\r\n            mstore(add(data, 53), keccak256(add(data, 53), 30))\r\n            child := and(keccak256(data, 85), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        }\r\n    }\r\n\r\n    function withDraw(uint256 amount) public onlyOwner {\r\n        if (amount == 0) {\r\n            amount = address(this).balance;\r\n        }\r\n\r\n        address _owner = owner();\r\n\r\n        require(amount != 0);\r\n\r\n        (bool success, ) = _owner.call{value: amount}(\"\");\r\n\r\n        require(success);\r\n    }\r\n\r\n    function withDrawToken(address token, uint256 amount) public onlyOwner {\r\n        IERC20 _token = IERC20(token);\r\n\r\n        if (amount == 0) {\r\n            amount = _token.balanceOf(address(this));\r\n        }\r\n\r\n        require(amount != 0);\r\n\r\n        address _owner = owner();\r\n\r\n        assert(_token.transfer(_owner, amount));\r\n    }\r\n\r\n    function _swap(address[] memory path, address _to) internal {\r\n        for (uint i; i \u003c path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0,) = PancakeLibrary.sortTokens(input, output);\r\n            IPancakePair pair = IPancakePair(PancakeLibrary.pairFor(factory, input, output));\r\n            uint amountInput;\r\n            uint amountOutput;\r\n            { // scope to avoid stack too deep errors\r\n            (uint reserve0, uint reserve1,) = pair.getReserves();\r\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\r\n            amountOutput = PancakeLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\r\n            }\r\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\r\n            address to = i \u003c path.length - 2 ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\r\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n\r\n    function swap(address[] memory path, uint256 amountIn, uint256 amountOutMin) external onlyOwner gasRefund {\r\n        IERC20 inTokenERC = IERC20(path[0]);\r\n        address to = address(this);\r\n        \r\n        address pairAddress = PancakeLibrary.pairFor(factory, path[0], path[1]);\r\n\r\n        assert(inTokenERC.transfer(pairAddress, amountIn));\r\n\r\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\r\n        _swap(path, to);\r\n        require(\r\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) \u003e= amountOutMin,\r\n            \u0027INSUFFICIENT_OUTPUT_AMOUNT\u0027\r\n        );\r\n    }\r\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity \u003e=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}"},"IPancakePair.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity \u003e=0.5.0;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"PancakeLibrary.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity \u003e=0.5.0;\r\n\r\nimport \u0027./IPancakePair.sol\u0027;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary PancakeLibrary {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \u0027PancakeLibrary: IDENTICAL_ADDRESSES\u0027);\r\n        (token0, token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \u0027PancakeLibrary: ZERO_ADDRESS\u0027);\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    //mainnet \u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\u0027\r\n    // init code hash if in testnet \u0027d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\u0027\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex\u0027ff\u0027,\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex\u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\u0027 // init code hash\r\n            )))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        pairFor(factory, tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IPancakePair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_AMOUNT\u0027);\r\n        require(reserveA \u003e 0 \u0026\u0026 reserveB \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint amountInWithFee = amountIn.mul(9975);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(9975);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027PancakeLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i \u003c path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027PancakeLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i \u003e 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity \u003e=0.6.6;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) \u003e= x, \u0027ds-math-add-overflow\u0027);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) \u003c= x, \u0027ds-math-sub-underflow\u0027);\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \u0027ds-math-mul-overflow\u0027);\r\n    }\r\n}"}}