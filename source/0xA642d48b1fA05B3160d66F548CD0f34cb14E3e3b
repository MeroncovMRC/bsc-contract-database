//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract LayerZeroDoge {
    string public name = "LayerZeroDoge";
    string public symbol = "LZDOGE";
    uint256 public totalSupply = 100000000 * 10 ** 18; // 1äº¿
    uint8 public decimals = 18;
    
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    uint256 public buyTax = 100; // 1%
    uint256 public sellTax = 200; // 2%
    
    address public owner;
    bool public isOwnerAllowed = true;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }
    
    function transfer(address _to, uint256 _value) external returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance.");
        _transfer(msg.sender, _to, _value);
        return true;
    }
    
    function approve(address _spender, uint256 _value) external returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {
        require(balanceOf[_from] >= _value, "Insufficient balance.");
        require(allowance[_from][msg.sender] >= _value, "Not enough allowance.");
        _transfer(_from, _to, _value);
        allowance[_from][msg.sender] -= _value;
        return true;
    }
    
    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool success) {
        allowance[msg.sender][_spender] += _addedValue;
        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);
        return true;
    }
    
    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool success) {
        uint256 currentAllowance = allowance[msg.sender][_spender];
        require(currentAllowance >= _subtractedValue, "Decreased allowance below zero.");
        allowance[msg.sender][_spender] = currentAllowance - _subtractedValue;
        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);
        return true;
    }
    
    function burn(uint256 _value) external onlyOwner {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance.");
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        emit Transfer(msg.sender, address(0), _value);
    }
    
    function renounceOwnership() external onlyOwner {
        isOwnerAllowed = false;
    }
    
    function _transfer(address _from, address _to, uint256 _value) internal {
        uint256 tax = msg.sender == owner ? 0 : msg.value * (msg.sender == address(this) ? sellTax : buyTax) / 10000;
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value * (10000 - tax) / 10000;
        balanceOf[address(this)] += _value * tax / 10000;
        emit Transfer(_from, _to, _value * (10000 - tax) / 10000);
        if (tax > 0) {
            emit Transfer(_from, address(this), _value * tax / 10000);
        }
    }
    
    receive() external payable {
        _transfer(address(this), msg.sender, msg.value * 10000 / (10000 + buyTax));
    }
    
    function withdraw() external onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }
    
    function transferOwnership(address _newOwner) external onlyOwner {
        require(isOwnerAllowed, "Owner has renounced ownership.");
        owner = _newOwner;
    }
}