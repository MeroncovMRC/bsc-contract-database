// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function burn(uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract MirthCoin is IBEP20, Ownable {
    string private constant _name = "MirthCoin";
    string private constant _symbol = "MIRTH";
    uint8 private constant _decimals = 18;
    uint256 private _totalSupply;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    // 5% transaction fee
    uint256 private constant _transactionFee = 5;
    
    // Track the total fees collected
    uint256 private _totalFees;
    
    // Track the total amount burned
    uint256 private _totalBurned;
    
    // Store the initial supply (1 billion tokens)
    uint256 private constant _initialSupply = 1_000_000_000 * 10**_decimals;
    
    // Limit for bots not to buy
    uint256 private constant _maxBuyLimit = 10_000 * 10**_decimals;

    constructor() {
        _totalSupply = _initialSupply;
        _balances[msg.sender] = _initialSupply;
        emit Transfer(address(0), msg.sender, _initialSupply);
    }
    
    function name() external pure returns (string memory) {
        return _name;
    }
    
    function symbol() external pure returns (string memory) {
        return _symbol;
    }
    
    function decimals() external pure returns (uint8) {
        return _decimals;
    }
    
    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }
    
    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }
    
    function burn(uint256 amount) external override returns (bool) {
        require(amount > 0, "MirthCoin: Burn amount must be greater than zero");
        require(amount <= _balances[msg.sender], "MirthCoin: Insufficient balance");
        
        _balances[msg.sender] -= amount;
        _totalSupply -= amount;
        _totalBurned += amount;
        
        emit Transfer(msg.sender, address(0), amount);
        return true;
    }
    
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "MirthCoin: Transfer from the zero address");
        require(recipient != address(0), "MirthCoin: Transfer to the zero address");
        require(amount > 0, "MirthCoin: Transfer amount must be greater than zero");
        require(amount <= _balances[sender], "MirthCoin: Insufficient balance");
        
        // Exclude max buy limit for bots
        if (sender != owner() && recipient != owner()) {
            require(amount <= _maxBuyLimit, "MirthCoin: Exceeds max buy limit");
        }
        
        uint256 feeAmount = amount * _transactionFee / 100;
        uint256 transferAmount = amount - feeAmount;
        
        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        
        // Distribute fees among holders
        uint256 holdersFee = feeAmount * _balances[recipient] / _totalSupply;
        _balances[recipient] += holdersFee;
        
        _totalFees += feeAmount;
        
        emit Transfer(sender, recipient, transferAmount);
    }
    
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "MirthCoin: Approve from the zero address");
        require(spender != address(0), "MirthCoin: Approve to the zero address");
        
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }
    
    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }
    
    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        uint256 currentAllowance = _allowances[msg.sender][spender];
        require(currentAllowance >= subtractedValue, "MirthCoin: Decreased allowance below zero");
        _approve(msg.sender, spender, currentAllowance - subtractedValue);
        return true;
    }
}