// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;


interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

contract NeuralChain is ERC20, Ownable {

    struct mintValue{
        uint256 privateSale;
        uint256 launchpad;
        uint256 team ;
        uint256 marketing;
        uint256 reserve;
        uint256 ecosystem ;
        uint256 staking ;
        uint256 seed ;
        bool completed;
    }

    mintValue[] public mintStage;

    uint stageStepDuration = 2 minutes;

    uint256 public maxSupply = toWei(100_000_000_000);
    uint public startDate = 0;
    
    address[] private privateSaleAddressList;
    uint[] private privateSalePercentList;
    address public launchpadAddress;
    address public teamAddress;
    address public marketingAddress;
    address public reserveAddress;
    address public ecosystemAddress;
    address public stakingContractAddress;
    address public seedAddress;


    constructor(
        address[] memory privateSaleAddress,
        uint[] memory privateSalePercent,
        address launchpad,
        address team,
        address marketing,
        address reserve,
        address ecosystem,
        address stakingContract,
        address seed
    ) ERC20("NeuralChain", "NUCH") {
        require(privateSaleAddress.length > 0, "there is no private address");
        require(privateSalePercent.length > 0, "there is no private percent list");
        require(privateSalePercent.length == privateSaleAddress.length, "length of address list and precent list is not same");
        
        uint256 totalPercent = 0;
        
        for (uint i = 0; i < privateSalePercent.length; i++){
            totalPercent += privateSalePercent[i];
        }
        require(totalPercent == toWei(100), "wrong percent list");
        
        require(launchpad != address(0), "launchpad address is required");
        require(team != address(0), "team address is required");
        require(marketing != address(0), "marketing address is required");
        require(reserve != address(0), "reserve address is required");
        require(ecosystem != address(0), "ecosystem address is required");
        require(stakingContract != address(0), "stakingContract address is required");
        require(seed != address(0), "seed address is required");
        

        privateSaleAddressList = privateSaleAddress;
        privateSalePercentList = privateSalePercent;

        launchpadAddress = launchpad;
        teamAddress = team;
        marketingAddress = marketing;
        reserveAddress = reserve;
        ecosystemAddress = ecosystem;
        stakingContractAddress = stakingContract;
        seedAddress = seed;
 
        initStages();
        
        mint(teamAddress ,mintStage[0].team);
        mint(seedAddress ,mintStage[0].seed);
        mintPrivateList(mintStage[0].privateSale);
        
        
        mintStage[0].completed = true;

    }

    

    function mintAvailableStage() public {
        require(startDate != 0, "there is not any available mint stage");
        require(block.timestamp >= startDate, "there is not any available mint stage");
        uint currentStage = ((block.timestamp - startDate) / stageStepDuration) + 1;

        if(currentStage >= mintStage.length){
            currentStage = mintStage.length - 1;
        }    

        for(uint i = 1; i <= currentStage; i++){
            if(mintStage[i].completed == true){
                continue;
            }
            mint(launchpadAddress ,mintStage[i].launchpad);
            mint(teamAddress ,mintStage[i].team);
            mint(marketingAddress ,mintStage[i].marketing);
            mint(reserveAddress ,mintStage[i].reserve);
            mint(ecosystemAddress ,mintStage[i].ecosystem);
            mint(stakingContractAddress ,mintStage[i].staking);
            mintPrivateList(mintStage[i].privateSale);
            mintStage[i].completed = true;
        }
        
    }

    function mintPrivateList(uint256 amount) private {
        uint256 totalMinted = 0;
        for(uint i = 0; i < privateSaleAddressList.length; i++){
            uint256 investorMintAmount;
            if(i == (privateSaleAddressList.length -1 )){
                investorMintAmount = amount - totalMinted;
            }else{
                investorMintAmount = (privateSalePercentList[i] * amount) / toWei(100);
            }
            mint(privateSaleAddressList[i], investorMintAmount);
            totalMinted += investorMintAmount;
        }
    }


    function setStartDate(uint startTimestamp) public onlyOwner returns (bool){
        require(startDate == 0, "can not change start date");
        require(startTimestamp >= block.timestamp, "can not add timestamp in past");
        startDate = startTimestamp;
        return true;
    }


    function transfer(address to, uint256 amount) public override returns (bool){
        require(startDate != 0, "balances unfreeze after start date");
        require(block.timestamp >= startDate, "balances unfreeze after start date");
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }


    function transferFrom(address from, address to, uint256 amount) public override returns (bool){
        require(startDate != 0, "balances unfreeze after start date");
        require(block.timestamp >= startDate, "balances unfreeze after start date");
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }


    function mint(address to, uint256 amount) private {
        require(amount + totalSupply() <= maxSupply, "can not mint more than max supply");
        _mint(to, amount);
    }


    function toWei(uint256 amount) private view returns (uint256){
        return amount * 10 ** decimals();
    }


    function initStages() private{
        //inital stage
        mintStage.push(mintValue({
            privateSale : toWei(5_000_000_000),
            launchpad : 0,
            team : toWei(3_600_000_000),
            marketing : 0,
            reserve : 0,
            ecosystem : 0,
            staking : 0,
            seed : toWei(5_000_000_000),
            completed : false}));

        
        // 1 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : toWei(20_000_000_000),
            team : 0,
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_334),
            seed : 0,
            completed : false}));

        // 2 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_334),
            seed : 0,
            completed : false}));


        // 3 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_334),
            seed : 0,
            completed : false}));


        // 4 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_334),
            seed : 0,
            completed : false}));

        // 5 month after start date
        mintStage.push(mintValue({
            privateSale : toWei(555_555_556),
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_333),
            seed : 0,
            completed : false}));
        // 6 month after start date
        mintStage.push(mintValue({
            privateSale : toWei(555_555_556),
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_333),
            seed : 0,
            completed : false}));
        // 7 month after start date
        mintStage.push(mintValue({
            privateSale : toWei(555_555_556),
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_333),
            seed : 0,
            completed : false}));
        // 8 month after start date
        mintStage.push(mintValue({
            privateSale : toWei(555_555_556),
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_333),
            seed : 0,
            completed : false}));
        // 9 month after start date
        mintStage.push(mintValue({
            privateSale : toWei(555_555_556),
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_333),
            seed : 0,
            completed : false}));
        // 10 month after start date
        mintStage.push(mintValue({
            privateSale : toWei(555_555_555),
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_333),
            seed : 0,
            completed : false}));
        // 11 month after start date
        mintStage.push(mintValue({
            privateSale : toWei(555_555_555),
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_333),
            seed : 0,
            completed : false}));
        // 12 month after start date
        mintStage.push(mintValue({
            privateSale : toWei(555_555_555),
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : 0,
            staking : toWei(233_333_333),
            seed : 0,
            completed : false}));
        // 13 month after start date
        mintStage.push(mintValue({
            privateSale : toWei(555_555_555),
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 14 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 15 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 16 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 17 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 18 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 19 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 20 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 21 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 22 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 23 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 24 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(200_000_000),
            seed : 0,
            completed : false}));
        // 25 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_334),
            seed : 0,
            completed : false}));
        // 26 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_334),
            seed : 0,
            completed : false}));
        // 27 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_334),
            seed : 0,
            completed : false}));
        // 28 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_778),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_334),
            seed : 0,
            completed : false}));
        // 29 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_777),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_333),
            seed : 0,
            completed : false}));
        // 30 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_777),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_333),
            seed : 0,
            completed : false}));
        // 31 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_777),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_333),
            seed : 0,
            completed : false}));
        // 32 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_777),
            reserve : toWei(291_666_667),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_333),
            seed : 0,
            completed : false}));
        // 33 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_777),
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_333),
            seed : 0,
            completed : false}));
        // 34 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_777),
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_333),
            seed : 0,
            completed : false}));
        // 35 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_777),
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_333),
            seed : 0,
            completed : false}));
        // 36 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : toWei(277_777_777),
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_667),
            staking : toWei(133_333_333),
            seed : 0,
            completed : false}));
        // 37 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : toWei(400_000_000),
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 38 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 39 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 40 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 41 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 42 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 43 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 44 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 45 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 46 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 47 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));
        // 48 month after start date
        mintStage.push(mintValue({
            privateSale : 0,
            launchpad : 0,
            team : 0,
            marketing : 0,
            reserve : toWei(291_666_666),
            ecosystem : toWei(416_666_666),
            staking : toWei(100_000_000),
            seed : 0,
            completed : false}));


    }

}