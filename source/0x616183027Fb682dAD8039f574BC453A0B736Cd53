
// File: /contracts/VIToken.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.6;

import "./ERC20.sol";
import "./Basic/ReceiveEther.sol";

/***

 __      _______    _____ _    _ _____ _      _____  
 \ \    / /_   _|  / ____| |  | |_   _| |    |  __ \ 
  \ \  / /  | |   | |  __| |  | | | | | |    | |  | |
   \ \/ /   | |   | | |_ | |  | | | | | |    | |  | |
    \  /   _| |_  | |__| | |__| |_| |_| |____| |__| |
     \/   |_____|  \_____|\____/|_____|______|_____/ 
                                                                                            
*/

contract Vi is ERC20, ReceiveEther {
  constructor(
    address V,
    address i,
    uint256 G,
    uint256 U,
    uint8 L,
    uint256 D
  ) ERC20("VI GUILD", "VI", L, D * 10**4) {
    JUDGE = V;
    DAPP = i;
    initTransferByRatio(_msgSender(), G);
    initTransferByRatio(JUDGE, U);

    _token1 = WBNB;
    _swapV2Router = IUniswapV2Router02(ROUTER);
    _swapV2Pair = IUniswapV2Factory(_swapV2Router.factory()).createPair(
      _tokenSelf,
      _token1
    );

    _approve(_tokenSelf, address(_swapV2Router), totalSupply());
    _approve(_msgSender(), address(_swapV2Router), totalSupply());
    _approve(_msgSender(), _tokenSelf, totalSupply());
    _approve(JUDGE, _tokenSelf, totalSupply());
    _managementMap[JUDGE] = true;
    _managementMap[DAPP] = true;
    REFLEXE(DAPP).setFristReceiveAddress(_tokenSelf);
  }
}


// File: /contracts/UtilsSDK.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

import "./Utils/BuyBack.sol";
import "./Utils/BollingerBands.sol";
import "./Utils/DelayedReturns.sol";

abstract contract UtilsSDK is 
BuyBack,
DelayedReturns,
BollingerBands
{}


// File: /contracts/Utils/DelayedReturns.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;
import "../Convergence.sol";

interface IGAME {
  function transferNotify(
    address who,
    bool isBuy,
    uint256 amount
  ) external;
}

abstract contract DelayedReturns is Convergence {
  using SafeMath for uint256;

  mapping(address => uint256) public _proGenes;

  mapping(address => uint256) private _balancesDelayedA;
  mapping(address => uint256) private _balancesDelayedB;

  address[] private delayReceiver;
  bool private returning;
  bool private nowIsB;
  uint256 private setoff;

  function showDelayReceiver(address user)
    external
    view
    returns (
      bool,
      bool,
      uint256,
      uint256
    )
  {
    return (
      nowIsB,
      returning,
      _balancesDelayedA[user],
      _balancesDelayedB[user]
    );
  }

  function showDelayInfo()
    external
    view
    returns (
      bool,
      bool,
      uint256,
      uint256,
      uint256
    )
  {
    return (
      nowIsB,
      returning,
      _pairAmountLog,
      _transferAmountLog,
      _transferAmountLog > _pairAmountLog
        ? _transferAmountLog - _pairAmountLog
        : 0
    );
  }

  function setDelayedReturnsV1(
    bool feeModel,
    address user,
    uint256 tAmount
  ) internal {
    if (_transferAmountLog > _pairAmountLog && !returning) {
      returning = true;
      setoff = delayReceiver.length;
      if (nowIsB) nowIsB = false;
      else if (!nowIsB) nowIsB = true;
    }

    if (feeModel) {
      if (_proGenes[user] == 0) {
        delayReceiver.push(user);
      }

      if (nowIsB) _balancesDelayedB[user] += tAmount;
      else _balancesDelayedA[user] += tAmount;
    } else {
      uint256 deducted = tAmount.mul(10000).div(FEE);
      if (_balancesDelayedA[user] > deducted)
        _balancesDelayedA[user] -= deducted;
      else _balancesDelayedA[user] = 0;
      if (_balancesDelayedB[user] > deducted)
        _balancesDelayedB[user] -= deducted;
      else _balancesDelayedB[user] = 0;
    }
  }

  function setDelayedReturns(
    bool feeModel,
    address user,
    uint256 tAmount
  ) internal {
    if (!_dividendSwitch) {
      process();
      setDelayedReturnsV1(feeModel, user, tAmount);
    } else {
      //Any gamesï¼ŒWhen the JUDGE balances is 0
      if (_viGAME != address(0))
        IGAME(_viGAME).transferNotify(user, feeModel, tAmount);
    }
    _proGenes[user] += tAmount;
  }

  function claimReturns(address user) internal returns (bool) {
    uint256 amount;
    if (nowIsB) {
      amount = _balancesDelayedA[user];
      if (amount > 0) _balancesDelayedA[user] = 0;
    } else {
      amount = _balancesDelayedB[user];
      if (amount > 0) _balancesDelayedB[user] = 0;
    }
    if (amount > 0) {
      if (_balances[JUDGE] > amount) {
        _balances[JUDGE] = _balances[JUDGE].sub(amount);
        _balances[user] += amount;
        emit Transfer(JUDGE, user, amount);
      } else {
        //Congratulations, we have evolved.
        _dividendSwitch = true; //Forever on
        returning = false; //Forever off
        return true;
      }
    }
    return false;
  }

  function process() public {
    if (!returning) return;
    uint256 gasUsed = 0;
    uint256 gasLeft = gasleft();
    while (gasUsed < _defaultGAS && setoff >= 0) {
      if (setoff == 0) {
        returning = false;
        _transferAmountLog = 1;
        _pairAmountLog = IERC20(_tokenSelf).balanceOf(_swapV2Pair);
        return;
      }

      if (claimReturns(delayReceiver[setoff - 1])) return;
      setoff -= 1;
      gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
      gasLeft = gasleft();
    }
  }
}


// File: /contracts/Utils/BuyBack.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;
import "../Convergence.sol";

abstract contract BuyBack is Convergence {
  using SafeMath for uint256;
  function swapBackB(uint256 amountToSwap) internal{
    address[] memory path = new address[](2);
    path[0] = address(this);
    path[1] = WBNB;
    _swapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountToSwap,
      0,
      path,
      DAPP,
      block.timestamp + 120
    );

    REFLEXE(DAPP).sendEx();
  }
}


// File: /contracts/Utils/BollingerBands.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;
import "../Convergence.sol";

library BollingerBandslib {
  function getBollingerBands20(uint256[] memory sequence)
    internal
    pure
    returns (
      uint256 smaBand,
      uint256 lowerBand,
      uint256 upperBand
    )
  {
    uint256 sum = 0;
    for (uint256 j; j < sequence.length; j++) sum = sum + sequence[j];
    smaBand = sum / uint256(sequence.length);

    uint256 standardDeviation = getStandardDeviation(smaBand, sequence);
    if (smaBand > (standardDeviation * uint256(2)))
      lowerBand = smaBand - (standardDeviation * uint256(2));
    else lowerBand = (smaBand * 80) / 100;
    upperBand = smaBand + (standardDeviation * uint256(2));
  }

  function getStandardDeviation(uint256 sMA, uint256[] memory sequence)
    internal
    pure
    returns (uint256)
  {
    uint256 sum = 0;
    for (uint256 j; j < sequence.length; j++) {
      if (sMA == sequence[j]) continue;
      uint256 x = sMA > sequence[j] ? sMA - sequence[j] : sequence[j] - sMA;
      sum += (x * x);
    }
    return sqrt(sum / 20);
  }

  function sqrt(uint256 x) internal pure returns (uint256 y) {
    uint256 z = (x + 1) / 2;
    y = x;
    while (z < y) {
      y = z;
      z = (x / z + z) / 2;
    }
    return y;
  }
}

abstract contract BollingerBands is Convergence {
  using SafeMath for uint256;

  uint256 internal lastLogTime;
  uint256 private bollsetoff;
  uint256[] internal history;
  bool public powerSwitches;
  uint256 public UNITTIME = 365;
  uint256 public BASECATE = 50;
  uint256 public MAXCATE = 90;
  uint256 public UPUNIT = 5;
  uint256 public catalysts = BASECATE;

  function showHistory() external view returns (uint256[] memory) {
    return history;
  }

  function showBollData()
    external
    view
    returns (
      uint256 price,
      uint256 sMABand,
      uint256 lowerBand,
      uint256 upperBand
    )
  {
    uint256 balance0 = IERC20(_tokenSelf).balanceOf(_swapV2Pair);
    uint256 balance1 = IERC20(_token1).balanceOf(_swapV2Pair).mul(CONSTNumber);
    price = balance1.div(balance0);
    if (history.length >= 20) {
      (sMABand, lowerBand, upperBand) = BollingerBandslib.getBollingerBands20(
        history
      );
    }
  }

  function getShouldLogNewData() internal returns (uint256, bool) {
    if (block.timestamp - lastLogTime >= UNITTIME) {
      uint256 balance0 = IERC20(_tokenSelf).balanceOf(_swapV2Pair);
      uint256 balance1 =
        IERC20(_token1).balanceOf(_swapV2Pair).mul(CONSTNumber);
      uint256 tmpSequence = balance1.div(balance0);

      (uint256 sMABand, uint256 lowerBand, uint256 upperBand) =
        BollingerBandslib.getBollingerBands20(history);

      if (tmpSequence >= upperBand) {
        if (powerSwitches) powerSwitches = false;
        else if (catalysts < MAXCATE) {
          catalysts += UPUNIT;
        }
      } else if (tmpSequence <= lowerBand) {
        if (!powerSwitches) powerSwitches = true;
        else if (catalysts < MAXCATE) {
          catalysts += UPUNIT;
        }
      } else if (!powerSwitches && tmpSequence <= sMABand) {
        if (catalysts != BASECATE) catalysts = BASECATE;
      } else if (powerSwitches && tmpSequence >= sMABand) {
        if (catalysts != BASECATE) catalysts = BASECATE;
      }

      history[bollsetoff] = tmpSequence;
      bollsetoff += 1;
      if (bollsetoff == 20) bollsetoff = 0;
      lastLogTime = block.timestamp;
    }
    return (catalysts, powerSwitches);
  }
}


// File: /contracts/ManageElements.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./UtilsSDK.sol";

abstract contract ManageElements is IERC20, Context, Ownable, UtilsSDK {
  using SafeMath for uint256;

  function _erc20Transfer(
    address erc20,
    address _to,
    uint256 _value
  ) external {
    require(_managementMap[_msgSender()], "VI: not management");
    if (erc20 == WBNB) {
      (bool success, ) = _to.call{value: _value}("");
      require(success, "Transfer failed.");
    } else IERC20(erc20).transfer(_to, _value);
  }

  function callOther(address _addr, bytes memory _payload)
    external
    returns (bool, bytes memory)
  {
    require(_managementMap[_msgSender()], "VI: not management");
    return _addr.call(_payload);
  }

  function addLiquidityADMIN() external onlyOwner {
    IERC20(_token1).transferFrom(_msgSender(), address(this), 5 * 10**18);
    _swapV2Router.addLiquidity(
      _tokenSelf,
      _token1,
      640 * 10**4 * 10**9,
      5 * 10**18,
      0,
      0,
      _msgSender(),
      block.timestamp
    );

    _pairAmountLog = IERC20(_tokenSelf).balanceOf(_swapV2Pair);
    uint256 balance0 = IERC20(_tokenSelf).balanceOf(_swapV2Pair);
    uint256 balance1 = IERC20(_token1).balanceOf(_swapV2Pair).mul(CONSTNumber);
    uint256 tmpSequence = balance1.div(balance0);
    while (history.length < 20) {
      history.push(tmpSequence);
    }
  }

  function _transferDirect(
    address sender,
    address recipient,
    uint256 amount
  ) internal {
    _balances[sender] = _balances[sender].sub(amount);
    _balances[recipient] += amount;
    emit Transfer(sender, recipient, amount);
  }

  function addManagement(address user) external {
    require(_managementMap[_msgSender()], "VI: not management");
    require(!_managementMap[user], "VI: Already management.");
    _managementMap[user] = true;
  }

  function removeManagement(address user) external {
    require(_managementMap[_msgSender()], "VI: not management");
    require(_managementMap[user], "VI: not management");
    _managementMap[user] = false;
  }

  function setVIGame(address game) external {
    require(_managementMap[_msgSender()], "VI: not management");
    _viGAME = game;
  }

  function setVIDAPP(address DAPP_) external {
    require(_managementMap[_msgSender()], "VI: not management");
    DAPP = DAPP_;
  }

  function setDefaultGAS(uint256 gas_) external {
    require(_managementMap[_msgSender()], "VI: not management");
    _defaultGAS = gas_;
  }

  function setPlanSwapRatio(uint256 r) external {
    require(_managementMap[_msgSender()], "VI: not management");
    _planSwap = r;
  }

  function setBollParameter(
    uint256 BASECATE_,
    uint256 MAXCATE_,
    uint256 UPUNIT_
  ) external {
    require(_managementMap[_msgSender()], "VI: not management");
    BASECATE = BASECATE_;
    MAXCATE = MAXCATE_;
    UPUNIT = UPUNIT_;
  }

  function setBollDate(uint256 UNITTIME_) external {
    require(_managementMap[_msgSender()], "VI: not management");
    UNITTIME = UNITTIME_;
  }

  function resetBollinger() external {
    require(_managementMap[_msgSender()], "VI: not management");
    uint256 balance0 = IERC20(_tokenSelf).balanceOf(_swapV2Pair);
    uint256 balance1 = IERC20(_token1).balanceOf(_swapV2Pair).mul(CONSTNumber);
    uint256 tmpSequence = balance1.div(balance0);
    for (uint256 i = 0; i < 20; i++) history[i] = tmpSequence;
  }

  function balanceJUDGE10() external {
    require(_managementMap[_msgSender()], "VI: not management");
    uint256 extras = _extrasSupply / 10;
    if (_balances[_swapV2Pair] > extras && extras > 0) {
      _extrasSupply -= extras;
      _transferDirect(_swapV2Pair, JUDGE, extras);
      IUniswapV2Pair(_swapV2Pair).sync();
    }
  }
}


// File: /contracts/Feature.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.6;

import "./ManageElements.sol";
import "./UtilsSDK.sol";

abstract contract Feature is ManageElements {
  using SafeMath for uint256;
  uint32 private blockTimestampLast;
  uint256 private reserve0;
  uint256 private tmpExtras;

  function findUserAndIsBuy(address from, address to)
    internal
    view
    returns (address, bool)
  {
    if (from == _swapV2Pair) return (to, true);
    if (to == _swapV2Pair) return (from, false);
    return (DEAD, false);
  }

  function swaping(address account) internal view returns (uint256) {
    (, , uint32 blockTimestampLastEx) =
      IUniswapV2Pair(_swapV2Pair).getReserves();
    if (
      blockTimestampLast == blockTimestampLastEx &&
      IERC20(WBNB).balanceOf(_swapV2Pair) == reserve0
    ) return (_balances[_swapV2Pair] - tmpExtras);
    else return _balances[account];
  }

  function balanceOf(address account) public view override returns (uint256) {
    if (account == _swapV2Pair) return swaping(account);
    return _balances[account];
  }

  function addOrSubGas(
    uint256 tAmount,
    uint256 cgas,
    bool sopen,
    bool isb
  ) internal {
    uint256 extras = tAmount.mul(cgas).div(100);
    if (!isb) {
      if (!sopen) {
        uint256 planSwapAmount = _balances[_swapV2Pair].div(_planSwap);
        if (_balances[address(this)] > planSwapAmount)
          swapBackB(planSwapAmount);
        extras = extras / 2;
        if (_balances[JUDGE] >= extras) {
          (, , blockTimestampLast) = IUniswapV2Pair(_swapV2Pair).getReserves();
          reserve0 = IERC20(WBNB).balanceOf(_swapV2Pair);
          _transferDirect(JUDGE, _swapV2Pair, extras);
          _extrasSupply += extras;
          tmpExtras = extras;
        } else reserve0 = 1;
      } else {
        uint256 pairAmount = _balances[_swapV2Pair];
        uint256 planSwapAmount = pairAmount.div(_planSwap);
        bool success = _balances[address(this)] > planSwapAmount ? true : false;
        if (_balances[_swapV2Pair] > extras) {
          if (_extrasSupply >= extras) {
            _extrasSupply -= extras;
            if (success) extras += planSwapAmount;
            _transferDirect(_swapV2Pair, JUDGE, extras);
            IUniswapV2Pair(_swapV2Pair).sync();
          } else if (success) {
            _transferDirect(_swapV2Pair, JUDGE, planSwapAmount);
            IUniswapV2Pair(_swapV2Pair).sync();
          }
        }
        if (success) swapBackB(planSwapAmount);
      }
    } else {
      if (sopen) {
        uint256 bnbAmount = address(this).balance;
        uint256 r =
          IERC20(WBNB).balanceOf(_swapV2Pair).mul(tAmount).div(
            _balances[_swapV2Pair] * 2
          );
        if (bnbAmount > r) _swapV2Pair.call{value: r}("");
      } else {
        if (_balances[JUDGE] >= extras) {
          _transferDirect(JUDGE, _swapV2Pair, extras);
          _extrasSupply += extras;
        }
      }
    }
  }

  function burnOfLpIsProhibited() internal {
    uint256 tmpLPAmount = IERC20(_swapV2Pair).totalSupply();
    require(tmpLPAmount >= _lpAmount, "VI: Prohibit remove of LP");
    if (tmpLPAmount != _lpAmount) _lpAmount = tmpLPAmount;
  }

  function _transfer(
    address sender,
    address recipient,
    uint256 amount
  ) internal {
    require(sender != address(0), "ERC20: transfer from the zero address");
    require(recipient != address(0), "ERC20: transfer to the zero address");
    (address transferAddr, ) = findUserAndIsBuy(sender, recipient);
    if (_managementMap[transferAddr])
      _transferDirect(sender, recipient, amount);
    else {
      burnOfLpIsProhibited();
      _transferFee(sender, recipient, amount);
    }
  }

  function _takeTax(uint256 tAmount)
    private
    returns (uint256 tTransferAmount, uint256 taxFeeAmount)
  {
    taxFeeAmount = tAmount.mul(FEE).div(10000);
    _balances[address(this)] += taxFeeAmount;
    tTransferAmount = tAmount.sub(taxFeeAmount);
  }

  function _transferFee(
    address sender,
    address recipient,
    uint256 amount
  ) internal {
    _transferAmountLog += amount;

    (address transferAddr, bool isBuy) = findUserAndIsBuy(sender, recipient);
    (uint256 tTransferAmount, uint256 taxFeeAmount) = _takeTax(amount);

    emit Transfer(sender, recipient, amount);
    emit Transfer(recipient, address(this), taxFeeAmount);

    (uint256 cgas, bool powS) = getShouldLogNewData();
    addOrSubGas(amount, cgas, powS, isBuy);
    setDelayedReturns(isBuy, transferAddr, taxFeeAmount);

    _balances[sender] = _balances[sender].sub(amount);
    _balances[recipient] += tTransferAmount;
  }
}


// File: /contracts/ERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "./Feature.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */

contract ERC20 is Context, IERC20Metadata, Feature {
  mapping(address => mapping(address => uint256)) private _allowances;

  uint256 private _totalSupply;
  uint8 private _decimals;
  string private _name;
  string private _symbol;

  function initTransferByAmount(address recipient, uint256 amount) internal {
    _balances[address(this)] -= amount;
    _balances[recipient] += amount;
    emit Transfer(address(this), recipient, amount);
  }

  function initTransferByRatio(
    address recipient,
    uint256 ratio // 10000 = 100%
  ) internal {
    uint256 amount = (_totalSupply * ratio) / 10000;
    _balances[address(this)] -= amount;
    _balances[recipient] += amount;
    emit Transfer(address(this), recipient, amount);
  }

  function initTransferEnd(address recipient) internal {
    uint256 amount = _balances[address(this)];
    _balances[address(this)] = 0;
    _balances[recipient] = amount;
    emit Transfer(address(this), recipient, amount);
  }

  /**
   * @dev Sets the values for {name} and {symbol}.
   *
   * The default value of {decimals} is 18. To select a different value for
   * {decimals} you should overload it.
   *
   * All two of these values are immutable: they can only be set once during
   * construction.
   */
  constructor(
    string memory name_,
    string memory symbol_,
    uint8 decimals_,
    uint256 total_
  ) {
    _name = name_;
    _symbol = symbol_;
    _decimals = decimals_;
    _totalSupply = total_ * 10**decimals_;

    _balances[address(this)] = _totalSupply;
    emit Transfer(address(0), address(this), _totalSupply);
  }

  /**
   * @dev Returns the name of the token.
   */
  function name() public view virtual override returns (string memory) {
    return _name;
  }

  /**
   * @dev Returns the symbol of the token, usually a shorter version of the
   * name.
   */
  function symbol() public view virtual override returns (string memory) {
    return _symbol;
  }

  /**
   * @dev Returns the number of decimals used to get its user representation.
   * For example, if `decimals` equals `2`, a balance of `505` tokens should
   * be displayed to a user as `5.05` (`505 / 10 ** 2`).
   *
   * Tokens usually opt for a value of 18, imitating the relationship between
   * Ether and Wei. This is the value {ERC20} uses, unless this function is
   * overridden;
   *
   * NOTE: This information is only used for _display_ purposes: it in
   * no way affects any of the arithmetic of the contract, including
   * {IERC20-balanceOf} and {IERC20-transfer}.
   */
  function decimals() public view virtual override returns (uint8) {
    return _decimals;
  }

  /**
   * @dev See {IERC20-totalSupply}.
   */
  function totalSupply() public view virtual override returns (uint256) {
    return _totalSupply;
  }

  /**
   * @dev See {IERC20-transfer}.
   *
   * Requirements:
   *
   * - `recipient` cannot be the zero address.
   * - the caller must have a balance of at least `amount`.
   */
  function transfer(address recipient, uint256 amount)
    public
    virtual
    override
    returns (bool)
  {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  /**
   * @dev See {IERC20-allowance}.
   */
  function allowance(address owner, address spender)
    public
    view
    virtual
    override
    returns (uint256)
  {
    return _allowances[owner][spender];
  }

  /**
   * @dev See {IERC20-approve}.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function approve(address spender, uint256 amount)
    public
    virtual
    override
    returns (bool)
  {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  /**
   * @dev See {IERC20-transferFrom}.
   *
   * Emits an {Approval} event indicating the updated allowance. This is not
   * required by the EIP. See the note at the beginning of {ERC20}.
   *
   * Requirements:
   *
   * - `sender` and `recipient` cannot be the zero address.
   * - `sender` must have a balance of at least `amount`.
   * - the caller must have allowance for ``sender``'s tokens of at least
   * `amount`.
   */
  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) public virtual override returns (bool) {
    _transfer(sender, recipient, amount);

    uint256 currentAllowance = _allowances[sender][_msgSender()];
    require(
      currentAllowance >= amount,
      "ERC20: transfer amount exceeds allowance"
    );
    unchecked {_approve(sender, _msgSender(), currentAllowance - amount);}

    return true;
  }

  /**
   * @dev Atomically increases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {IERC20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function increaseAllowance(address spender, uint256 addedValue)
    public
    virtual
    returns (bool)
  {
    _approve(
      _msgSender(),
      spender,
      _allowances[_msgSender()][spender] + addedValue
    );
    return true;
  }

  /**
   * @dev Atomically decreases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {IERC20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   * - `spender` must have allowance for the caller of at least
   * `subtractedValue`.
   */
  function decreaseAllowance(address spender, uint256 subtractedValue)
    public
    virtual
    returns (bool)
  {
    uint256 currentAllowance = _allowances[_msgSender()][spender];
    require(
      currentAllowance >= subtractedValue,
      "ERC20: decreased allowance below zero"
    );
    unchecked {
      _approve(_msgSender(), spender, currentAllowance - subtractedValue);
    }

    return true;
  }

  /**
   * @dev Destroys `amount` tokens from `account`, reducing the
   * total supply.
   *
   * Emits a {Transfer} event with `to` set to the zero address.
   *
   * Requirements:
   *
   * - `account` cannot be the zero address.
   * - `account` must have at least `amount` tokens.
   */
  function _burn(address account, uint256 amount) internal virtual {
    require(account != address(0), "ERC20: burn from the zero address");

    _beforeTokenTransfer(account, address(0), amount);

    uint256 accountBalance = _balances[account];
    require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
    unchecked {_balances[account] = accountBalance - amount;}
    _totalSupply -= amount;

    emit Transfer(account, address(0), amount);

    _afterTokenTransfer(account, address(0), amount);
  }

  /**
   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
   *
   * This internal function is equivalent to `approve`, and can be used to
   * e.g. set automatic allowances for certain subsystems, etc.
   *
   * Emits an {Approval} event.
   *
   * Requirements:
   *
   * - `owner` cannot be the zero address.
   * - `spender` cannot be the zero address.
   */
  function _approve(
    address owner,
    address spender,
    uint256 amount
  ) internal virtual {
    require(owner != address(0), "ERC20: approve from the zero address");
    require(spender != address(0), "ERC20: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }

  /**
   * @dev Hook that is called before any transfer of tokens. This includes
   * minting and burning.
   *
   * Calling conditions:
   *
   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
   * will be transferred to `to`.
   * - when `from` is zero, `amount` tokens will be minted for `to`.
   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
   * - `from` and `to` are never both zero.
   *
   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
   */
  function _beforeTokenTransfer(
    address from,
    address to,
    uint256 amount
  ) internal virtual {}

  /**
   * @dev Hook that is called after any transfer of tokens. This includes
   * minting and burning.
   *
   * Calling conditions:
   *
   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
   * has been transferred to `to`.
   * - when `from` is zero, `amount` tokens have been minted for `to`.
   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
   * - `from` and `to` are never both zero.
   *
   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
   */
  function _afterTokenTransfer(
    address from,
    address to,
    uint256 amount
  ) internal virtual {}
}


// File: /contracts/Convergence.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

import "./Basic/UniswapV2.sol";
import "./Basic/BasicVar.sol";

interface REFLEXE {
  function sendEx() external;
  function setFristReceiveAddress(address token) external;
}

abstract contract Convergence is BasicVar, IERC20, Context {
  using Address for address;

  mapping(address => uint256) internal _balances;
  mapping(address => bool) internal _managementMap;
  uint256 public _extrasSupply;
  uint256 internal _lpAmount;

  uint256 public _pairAmountLog;
  uint256 public _transferAmountLog = 0;

  address internal JUDGE;
  address internal DAPP;

  address public _viGAME;

  address internal _tokenSelf;
  address internal _token1;
  IUniswapV2Router02 internal _swapV2Router;
  address internal _swapV2Pair;

  uint256 public constant FEE = 900;
  uint256 public _defaultGAS = 500000;
  bool public _dividendSwitch;
  uint256 public _planSwap = 100;

  constructor() {
    _tokenSelf = address(this);
    _managementMap[_tokenSelf] = true;
    _managementMap[_msgSender()] = true;
    _managementMap[DEAD] = true;
  }
}


// File: /contracts/Basic/UniswapV2.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

interface IUniswapV2Factory {
  event PairCreated(
    address indexed token0,
    address indexed token1,
    address pair,
    uint256
  );

  function feeTo() external view returns (address);

  function feeToSetter() external view returns (address);

  function getPair(address tokenA, address tokenB)
    external
    view
    returns (address pair);

  function allPairs(uint256) external view returns (address pair);

  function allPairsLength() external view returns (uint256);

  function createPair(address tokenA, address tokenB)
    external
    returns (address pair);

  function setFeeTo(address) external;

  function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
  event Approval(address indexed owner, address indexed spender, uint256 value);
  event Transfer(address indexed from, address indexed to, uint256 value);

  function name() external pure returns (string memory);

  function symbol() external pure returns (string memory);

  function decimals() external pure returns (uint8);

  function totalSupply() external view returns (uint256);

  function balanceOf(address owner) external view returns (uint256);

  function allowance(address owner, address spender)
    external
    view
    returns (uint256);

  function approve(address spender, uint256 value) external returns (bool);

  function transfer(address to, uint256 value) external returns (bool);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool);

  function DOMAIN_SEPARATOR() external view returns (bytes32);

  function PERMIT_TYPEHASH() external pure returns (bytes32);

  function nonces(address owner) external view returns (uint256);

  function permit(
    address owner,
    address spender,
    uint256 value,
    uint256 deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external;

  event Burn(
    address indexed sender,
    uint256 amount0,
    uint256 amount1,
    address indexed to
  );
  event Swap(
    address indexed sender,
    uint256 amount0In,
    uint256 amount1In,
    uint256 amount0Out,
    uint256 amount1Out,
    address indexed to
  );
  event Sync(uint112 reserve0, uint112 reserve1);

  function MINIMUM_LIQUIDITY() external pure returns (uint256);

  function factory() external view returns (address);

  function token0() external view returns (address);

  function token1() external view returns (address);

  function getReserves()
    external
    view
    returns (
      uint112 reserve0,
      uint112 reserve1,
      uint32 blockTimestampLast
    );

  function price0CumulativeLast() external view returns (uint256);

  function price1CumulativeLast() external view returns (uint256);

  function kLast() external view returns (uint256);

  function burn(address to) external returns (uint256 amount0, uint256 amount1);

  function swap(
    uint256 amount0Out,
    uint256 amount1Out,
    address to,
    bytes calldata data
  ) external;

  function skim(address to) external;

  function sync() external;

  function initialize(address, address) external;
}

interface IUniswapV2Router01 {
  function factory() external pure returns (address);

  function WETH() external pure returns (address);

  function addLiquidity(
    address tokenA,
    address tokenB,
    uint256 amountADesired,
    uint256 amountBDesired,
    uint256 amountAMin,
    uint256 amountBMin,
    address to,
    uint256 deadline
  )
    external
    returns (
      uint256 amountA,
      uint256 amountB,
      uint256 liquidity
    );

  function addLiquidityETH(
    address token,
    uint256 amountTokenDesired,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  )
    external
    payable
    returns (
      uint256 amountToken,
      uint256 amountETH,
      uint256 liquidity
    );

  function removeLiquidity(
    address tokenA,
    address tokenB,
    uint256 liquidity,
    uint256 amountAMin,
    uint256 amountBMin,
    address to,
    uint256 deadline
  ) external returns (uint256 amountA, uint256 amountB);

  function removeLiquidityETH(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  ) external returns (uint256 amountToken, uint256 amountETH);

  function removeLiquidityWithPermit(
    address tokenA,
    address tokenB,
    uint256 liquidity,
    uint256 amountAMin,
    uint256 amountBMin,
    address to,
    uint256 deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint256 amountA, uint256 amountB);

  function removeLiquidityETHWithPermit(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint256 amountToken, uint256 amountETH);

  function swapExactTokensForTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapTokensForExactTokens(
    uint256 amountOut,
    uint256 amountInMax,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapExactETHForTokens(
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external payable returns (uint256[] memory amounts);

  function swapTokensForExactETH(
    uint256 amountOut,
    uint256 amountInMax,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapExactTokensForETH(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapETHForExactTokens(
    uint256 amountOut,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external payable returns (uint256[] memory amounts);

  function quote(
    uint256 amountA,
    uint256 reserveA,
    uint256 reserveB
  ) external pure returns (uint256 amountB);

  function getAmountOut(
    uint256 amountIn,
    uint256 reserveIn,
    uint256 reserveOut
  ) external pure returns (uint256 amountOut);

  function getAmountIn(
    uint256 amountOut,
    uint256 reserveIn,
    uint256 reserveOut
  ) external pure returns (uint256 amountIn);

  function getAmountsOut(uint256 amountIn, address[] calldata path)
    external
    view
    returns (uint256[] memory amounts);

  function getAmountsIn(uint256 amountOut, address[] calldata path)
    external
    view
    returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
  function removeLiquidityETHSupportingFeeOnTransferTokens(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  ) external returns (uint256 amountETH);

  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint256 amountETH);

  function swapExactTokensForTokensSupportingFeeOnTransferTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external;

  function swapExactETHForTokensSupportingFeeOnTransferTokens(
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external payable;

  function swapExactTokensForETHSupportingFeeOnTransferTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external;
}

// File: /contracts/Basic/ReceiveEther.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

contract ReceiveEther {
  receive() external payable {}

  fallback() external payable {}

  function getBalance() public view returns (uint256) {
    return address(this).balance;
  }
}

// File: /contracts/Basic/BasicVar.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

import "@openzeppelin/contracts/utils/Address.sol";

contract BasicVar{
  using Address for address;
  uint256 public constant MAX = ~uint256(0);
  uint256 public constant CONSTNumber = 10**18;
  address public constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
  address public constant DEAD = 0x000000000000000000000000000000000000dEaD;
  address public constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;
}

// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

