
// File: contracts/BrewlabsFarm.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/access/Ownable.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

// BrewlabsFarm is the master of brews. He can make brews and he is a fair guy.
//
// Note that it's ownable and the owner wields tremendous power. The ownership
// will be transferred to a governance smart contract once brews is sufficiently
// distributed and the community can show to govern itself.
//
// Have fun reading it. Hopefully it's bug-free. God bless.
contract BrewlabsFarm is Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    // Info of each user.
    struct UserInfo {
        uint256 amount;         // How many LP tokens the user has provided.
        uint256 rewardDebt;     // Reward debt. See explanation below.
        uint256 reflectionDebt;     // Reflection debt. See explanation below.
        //
        // We do some fancy math here. Basically, any point in time, the amount of brewss
        // entitled to a user but is pending to be distributed is:
        //
        //   pending reward = (user.amount * pool.accTokenPerShare) - user.rewardDebt
        //
        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:
        //   1. The pool's `accTokenPerShare` (and `lastRewardBlock`) gets updated.
        //   2. User receives the pending reward sent to his/her address.
        //   3. User's `amount` gets updated.
        //   4. User's `rewardDebt` gets updated.
    }

    // Info of each pool.
    struct PoolInfo {
        IERC20 lpToken;           // Address of LP token contract.
        uint256 allocPoint;       // How many allocation points assigned to this pool. brewss to distribute per block.
        uint256 lastRewardBlock;  // Last block number that brewss distribution occurs.
        uint256 accTokenPerShare;   // Accumulated brewss per share, times 1e12. See below.
        uint256 accReflectionPerShare;   // Accumulated brewss per share, times 1e12. See below.
        uint256 lastReflectionPerPoint;
        uint16 depositFee;      // Deposit fee in basis points
        uint16 withdrawFee;      // Deposit fee in basis points
    }

    // The brews TOKEN!
    IERC20 public brews;
    // Reflection Token
    IERC20 public reflectionToken;
    uint256 public accReflectionPerPoint;

    // brews tokens created per block.
    uint256 public rewardPerBlock;
    // Bonus muliplier for early brews makers.
    uint256 public constant BONUS_MULTIPLIER = 1;
    // Deposit Fee address
    address public feeAddress;
    address public buyBackWallet = 0xE1f1dd010BBC2860F81c8F90Ea4E38dB949BB16F;
    uint256 public performanceFee = 0.0005 ether;

    // Info of each pool.
    PoolInfo[] public poolInfo;
    // Info of each user that stakes LP tokens.
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;
    // Total allocation points. Must be the sum of all allocation points in all pools.
    uint256 public totalAllocPoint = 0;
    // The block number when brews mining starts.
    uint256 public startBlock;
    uint256 private totalReflections = 0;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event SetFeeAddress(address indexed user, address indexed newAddress);
    event SetBuyBackWallet(address indexed user, address newAddress);
    event SetPerformanceFee(uint256 fee);
    event UpdateEmissionRate(address indexed user, uint256 rewardPerBlock);

    constructor(IERC20 _brews, IERC20 _reflectionToken, uint256 _rewardPerBlock) {
        brews = _brews;
        reflectionToken = _reflectionToken;
        rewardPerBlock = _rewardPerBlock;

        feeAddress = msg.sender;
        startBlock = block.number.add(30 * 28800); // after 30 days
    }

    mapping(IERC20 => bool) public poolExistence;
    modifier nonDuplicated(IERC20 _lpToken) {
        require(poolExistence[_lpToken] == false, "nonDuplicated: duplicated");
        _;
    }

    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }

    // Add a new lp to the pool. Can only be called by the owner.
    function add(uint256 _allocPoint, IERC20 _lpToken, uint16 _depositFee, uint16 _withdrawFee, bool _withUpdate) external onlyOwner nonDuplicated(_lpToken) {
        require(_depositFee <= 10000, "add: invalid deposit fee basis points");
        require(_withdrawFee <= 10000, "add: invalid withdraw fee basis points");

        if (_withUpdate) {
            massUpdatePools();
        }
        
        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
        totalAllocPoint = totalAllocPoint.add(_allocPoint);
        poolExistence[_lpToken] = true;
        poolInfo.push(PoolInfo({
            lpToken : _lpToken,
            allocPoint : _allocPoint,
            lastRewardBlock : lastRewardBlock,
            accTokenPerShare : 0,
            accReflectionPerShare : 0,
            lastReflectionPerPoint: 0,
            depositFee : _depositFee,
            withdrawFee: _withdrawFee
        }));
    }

    // Update the given pool's brews allocation point and deposit fee. Can only be called by the owner.
    function set(uint256 _pid, uint256 _allocPoint, uint16 _depositFee, uint16 _withdrawFee, bool _withUpdate) external onlyOwner {
        require(_depositFee <= 10000, "set: invalid deposit fee basis points");
        require(_withdrawFee <= 10000, "set: invalid deposit fee basis points");
        if (_withUpdate) {
            massUpdatePools();
        }
        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
        poolInfo[_pid].allocPoint = _allocPoint;
        poolInfo[_pid].depositFee = _depositFee;
        poolInfo[_pid].withdrawFee = _withdrawFee;
    }

    // Return reward multiplier over the given _from to _to block.
    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {
        return _to.sub(_from).mul(BONUS_MULTIPLIER);
    }

    // View function to see pending brews on frontend.
    function pendingRewards(uint256 _pid, address _user) external view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];

        uint256 accTokenPerShare = pool.accTokenPerShare;
        uint256 lpSupply = pool.lpToken.balanceOf(address(this));
        if (block.number > pool.lastRewardBlock && lpSupply != 0) {
            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
            uint256 brewsReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);
            accTokenPerShare = accTokenPerShare.add(brewsReward.mul(1e12).div(lpSupply));
        }
        return user.amount.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);
    }

    function pendingReflections(uint256 _pid, address _user) external view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];

        uint256 accReflectionPerShare = pool.accReflectionPerShare;
        uint256 lpSupply = pool.lpToken.balanceOf(address(this));
        if (block.number > pool.lastRewardBlock && lpSupply != 0) {
            uint256 reflectionAmt = 0;
            if(address(reflectionToken) == address(0x0)) {
                reflectionAmt = address(this).balance;
            } else {
                reflectionAmt = reflectionToken.balanceOf(address(this));
            }
            if(reflectionAmt > totalReflections) {
                reflectionAmt = reflectionAmt.sub(totalReflections);
            } else reflectionAmt = 0;
            
            uint256 _accReflectionPerPoint = accReflectionPerPoint.add(reflectionAmt.mul(1e12).div(totalAllocPoint));
            
            accReflectionPerShare = pool.accReflectionPerShare.add(
                pool.allocPoint.mul(_accReflectionPerPoint.sub(pool.lastReflectionPerPoint)).div(lpSupply)
            );
        }
        return user.amount.mul(accReflectionPerShare).div(1e12).sub(user.reflectionDebt);
    } 

    // Update reward variables for all pools. Be careful of gas spending!
    function massUpdatePools() public {
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; pid++) {
            updatePool(pid);
        }
    }

    // Update reward variables of the given pool to be up-to-date.
    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        uint256 lpSupply = pool.lpToken.balanceOf(address(this));
        if (lpSupply == 0 || pool.allocPoint == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }
        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
        uint256 brewsReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);
        pool.accTokenPerShare = pool.accTokenPerShare.add(brewsReward.mul(1e12).div(lpSupply));

        uint256 reflectionAmt = 0;
        if(address(reflectionToken) == address(0x0)) {
            reflectionAmt = address(this).balance;
        } else {
            reflectionAmt = reflectionToken.balanceOf(address(this));
        }
        if(reflectionAmt > totalReflections) {
            reflectionAmt = reflectionAmt.sub(totalReflections);
        } else reflectionAmt = 0;

        accReflectionPerPoint = accReflectionPerPoint.add(reflectionAmt.mul(1e12).div(totalAllocPoint));
        pool.accReflectionPerShare = pool.accReflectionPerShare.add(
            pool.allocPoint.mul(accReflectionPerPoint.sub(pool.lastReflectionPerPoint)).div(lpSupply)
        );
        pool.lastReflectionPerPoint = accReflectionPerPoint;

        totalReflections = totalReflections.add(reflectionAmt);
        pool.lastRewardBlock = block.number;
    }

    // Deposit LP tokens to BrewlabsFarm for brews allocation.
    function deposit(uint256 _pid, uint256 _amount) external payable nonReentrant {
        if(performanceFee > 0 && _amount == 0) {
            require(msg.value >= performanceFee, 'should pay small gas to harvest');

            payable(buyBackWallet).transfer(performanceFee);
            if(msg.value > performanceFee) {
                payable(msg.sender).transfer(msg.value.sub(performanceFee));
            }
        }

        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];

        updatePool(_pid);

        if (user.amount > 0) {
            uint256 pending = user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);
            if (pending > 0) {
                safeTokenTransfer(msg.sender, pending);
            }

            uint256 pendingReflection = user.amount.mul(pool.accReflectionPerShare).div(1e12).sub(user.reflectionDebt);
            if (pendingReflection > 0) {
                if(address(reflectionToken) == address(0x0)) {
                    payable(msg.sender).transfer(pendingReflection);
                } else {
                    reflectionToken.transfer(msg.sender, pendingReflection);
                }
                totalReflections = totalReflections.sub(pendingReflection);
            }
        }
        if (_amount > 0) {
            uint256 beforeAmt = pool.lpToken.balanceOf(address(this));
            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
            uint256 afterAmt = pool.lpToken.balanceOf(address(this));
            uint256 amount = afterAmt.sub(beforeAmt);

            if (pool.depositFee > 0) {
                uint256 depositFee = amount.mul(pool.depositFee).div(10000);
                pool.lpToken.safeTransfer(feeAddress, depositFee);
                user.amount = user.amount.add(amount).sub(depositFee);
            } else {
                user.amount = user.amount.add(amount);
            }
        }

        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);
        user.reflectionDebt = user.amount.mul(pool.accReflectionPerShare).div(1e12);

        emit Deposit(msg.sender, _pid, _amount);
    }
    
    // Withdraw LP tokens from BrewlabsFarm.
    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {
        require(_amount > 0, "Amount should be greator than 0");

        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= _amount, "withdraw: not good");

        updatePool(_pid);

        uint256 pending = user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);
        if (pending > 0) {
            safeTokenTransfer(msg.sender, pending);
        }
        
        uint256 pendingReflection = user.amount.mul(pool.accReflectionPerShare).div(1e12).sub(user.reflectionDebt);
        if (pendingReflection > 0) {
            if(address(reflectionToken) == address(0x0)) {
                payable(msg.sender).transfer(pendingReflection);
            } else {
                reflectionToken.transfer(msg.sender, pendingReflection);
            }
            totalReflections = totalReflections.sub(pendingReflection);
        }

        if (_amount > 0) {
            user.amount = user.amount.sub(_amount);
            if (pool.withdrawFee > 0) {
                uint256 withdrawFee = _amount.mul(pool.withdrawFee).div(10000);
                pool.lpToken.safeTransfer(feeAddress, withdrawFee);
                pool.lpToken.safeTransfer(address(msg.sender), _amount.sub(withdrawFee));
            } else {
                pool.lpToken.safeTransfer(address(msg.sender), _amount);
            }
        }
        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);
        user.reflectionDebt = user.amount.mul(pool.accReflectionPerShare).div(1e12);

        emit Withdraw(msg.sender, _pid, _amount);
    }

    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _pid) external nonReentrant {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        uint256 amount = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;
        pool.lpToken.safeTransfer(address(msg.sender), amount);
        
        emit EmergencyWithdraw(msg.sender, _pid, amount);
    }

    // Safe brews transfer function, just in case if rounding error causes pool to not have enough brewss.
    function safeTokenTransfer(address _to, uint256 _amount) internal {
        uint256 brewsBal = brews.balanceOf(address(this));
        bool transferSuccess = false;
        if (_amount > brewsBal) {
            transferSuccess = brews.transfer(_to, brewsBal);
        } else {
            transferSuccess = brews.transfer(_to, _amount);
        }
        require(transferSuccess, "safeTokenTransfer: transfer failed");
    }
    function setFeeAddress(address _feeAddress) external onlyOwner {
        feeAddress = _feeAddress;
        emit SetFeeAddress(msg.sender, _feeAddress);
    }

    function setPerformanceFee(uint256 _fee) external {
        require(msg.sender == buyBackWallet, "setPerformanceFee: FORBIDDEN");

        performanceFee = _fee;
        emit SetPerformanceFee(_fee);
    }
    
    function setBuyBackWallet(address _addr) external {
        require(msg.sender == buyBackWallet, "setBuyBackWallet: FORBIDDEN");
        buyBackWallet = _addr;
        emit SetBuyBackWallet(msg.sender, _addr);
    }

    //Pancake has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.
    function updateEmissionRate(uint256 _rewardPerBlock) external onlyOwner {
        massUpdatePools();
        rewardPerBlock = _rewardPerBlock;
        emit UpdateEmissionRate(msg.sender, _rewardPerBlock);
    }

    function updateStartBlock(uint256 _startBlock) external onlyOwner {
        require(startBlock > block.number, "farm is running now");
        require(_startBlock > block.number, "should be greater than current block");

        startBlock = _startBlock;
        for(uint pid = 0; pid < poolInfo.length; pid++) {
            poolInfo[pid].lastRewardBlock = startBlock;
        }

        if(address(reflectionToken) == address(0x0)) {
            uint256 reflectionAmt = address(this).balance;
            payable(msg.sender).transfer(reflectionAmt);
        } else {
            uint256 reflectionAmt = reflectionToken.balanceOf(address(this));
            reflectionToken.transfer(msg.sender, reflectionAmt);
        }
    }
    
    function emergencyWithdrawRewards(uint256 _amount) external onlyOwner {
        if(_amount == 0) {
            uint256 amount = brews.balanceOf(address(this));
            safeTokenTransfer(msg.sender, amount);
        } else {
            safeTokenTransfer(msg.sender, _amount);
        }
    }

    function emergencyWithdrawReflections() external onlyOwner {
        if(address(reflectionToken) == address(0x0)) {
            uint256 amount = address(this).balance;
            payable(address(this)).transfer(amount);
        } else {
            uint256 amount = reflectionToken.balanceOf(address(this));
            reflectionToken.transfer(msg.sender, amount);
        }
    }

    function recoverWrongToken(address _token) external onlyOwner {
        require(_token != address(brews) && _token != address(reflectionToken), "cannot recover reward token or reflection token");
        require(poolExistence[IERC20(_token)] == false, "token is using on pool");

        if(_token == address(0x0)) {
            uint256 amount = address(this).balance;
            payable(address(this)).transfer(amount);
        } else {
            uint256 amount = IERC20(_token).balanceOf(address(this));
            if(amount > 0) {
                IERC20(_token).transfer(msg.sender, amount);
            }
        }
    }

    receive() external payable {}
}

// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: contracts/TokenVesting.sol
 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract TokenVesting is Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    // Whether it is initialized
    bool public isInitialized;
    uint256 public duration = 99 * 365; // 99 years

    // The block number when claim starts.
    uint256 public startBlock;
    // The block number when claim ends.
    uint256 public claimEndBlock;
    // tokens created per block.
    uint256 public claimPerBlock;
    // The block number of the last update
    uint256 public lastClaimBlock;

    // The vested token
    IERC20 public vestedToken;
    // The dividend token of vested token
    address public dividendToken;


    event Claimed(address indexed user, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 amount);
    event AdminTokenRecovered(address tokenRecovered, uint256 amount);

    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);
    event ClaimEndBlockUpdated(uint256 endBlock);
    event NewclaimPerBlock(uint256 claimPerBlock);
    event DurationUpdated(uint256 _duration);

    constructor() {}

    /*
     * @notice Initialize the contract
     * @param _vestedToken: vested token address
     * @param _dividendToken: reflection token address
     * @param _claimPerBlock: claim amount per block (in vestedToken)
     */
    function initialize(
        IERC20 _vestedToken,
        address _dividendToken,
        uint256 _claimPerBlock
    ) external onlyOwner {
        require(!isInitialized, "Already initialized");

        // Make this contract initialized
        isInitialized = true;

        vestedToken = _vestedToken;
        dividendToken = _dividendToken;

        claimPerBlock = _claimPerBlock;
    }

    function claim() external nonReentrant onlyOwner {
        if(startBlock == 0) return;

        uint256 multiplier = _getMultiplier(lastClaimBlock, block.number);
        uint256 amount = multiplier.mul(claimPerBlock);
        if(amount > 0) {
            vestedToken.safeTransfer(msg.sender, amount);
            emit Claimed(msg.sender, amount);
        }

        lastClaimBlock = block.number;
    }

    function harvest() external onlyOwner {      
        uint256 amount = 0;
        if(address(dividendToken) == address(0x0)) {
            amount = address(this).balance;
            if(amount > 0) {
                payable(msg.sender).transfer(amount);
            }
        } else {
            amount = IERC20(dividendToken).balanceOf(address(this));
            if(amount > 0) {
                IERC20(dividendToken).safeTransfer(msg.sender, amount);
            }
        }
    }

    function emergencyWithdraw() external nonReentrant onlyOwner{
        uint256 amount = vestedToken.balanceOf(address(this));
        if(amount > 0) {
            vestedToken.safeTransfer(msg.sender, amount);
        }

        emit EmergencyWithdraw(msg.sender, amount);
    }

    function pendingClaim() external view returns (uint256) {
        if(startBlock == 0) return 0;
        uint256 multiplier = _getMultiplier(lastClaimBlock, block.number);
        uint256 amount = multiplier.mul(claimPerBlock);
        
        return amount;
    }

    function pendingDividends() external view returns (uint256) {
        uint256 amount = 0;
        if(address(dividendToken) == address(0x0)) {
            amount = address(this).balance;
        } else {
            amount = IERC20(dividendToken).balanceOf(address(this));
        }
        
        return amount;
    }


    /**
     * @notice It allows the admin to recover wrong tokens sent to the contract
     * @param _tokenAddress: the address of the token to withdraw
     * @param _tokenAmount: the number of tokens to withdraw
     * @dev This function is only callable by admin.
     */
    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {
        require(
            _tokenAddress != address(vestedToken) && _tokenAddress != address(dividendToken),
            "Cannot be vested or dividend token address"
        );

        if(_tokenAddress == address(0x0)) {
            payable(msg.sender).transfer(_tokenAmount);
        } else {
            IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);
        }

        emit AdminTokenRecovered(_tokenAddress, _tokenAmount);
    }

    function startClaim() external onlyOwner {
        require(startBlock == 0, "Pool was already started");

        startBlock = block.number.add(100);
        claimEndBlock = startBlock.add(duration * 28800);
        lastClaimBlock = startBlock;
        
        emit NewStartAndEndBlocks(startBlock, claimEndBlock);
    }

    function stopClaim() external onlyOwner {
        claimEndBlock = block.number;
    }

    function updateEndBlock(uint256 _endBlock) external onlyOwner {
        require(startBlock > 0, "startBlock is not set");
        require(_endBlock > block.number && _endBlock > startBlock, "Invalid end block");

        claimEndBlock = _endBlock;
        emit ClaimEndBlockUpdated(_endBlock);
    }

    function updateClaimPerBlock(uint256 _claimPerBlock) external onlyOwner {
        // require(block.number < startBlock, "Claim was already started");

        if(startBlock > 0) {
            uint256 multiplier = _getMultiplier(lastClaimBlock, block.number);
            uint256 amount = multiplier.mul(claimPerBlock);
            if(amount > 0) {
                vestedToken.safeTransfer(msg.sender, amount);
                emit Claimed(msg.sender, amount);
            }

            lastClaimBlock = block.number;
        }

        claimPerBlock = _claimPerBlock;
        emit NewclaimPerBlock(_claimPerBlock);
    }

    function setDuration(uint256 _duration) external onlyOwner {
        require(startBlock == 0, "Pool was already started");
        require(_duration >= 30, "lower limit reached");

        duration = _duration;
        emit DurationUpdated(_duration);
    }

    /*
     * @notice Return multiplier over the given _from to _to block.
     * @param _from: block to start
     * @param _to: block to finish
     */
    function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {
        if (_to <= claimEndBlock) {
            return _to.sub(_from);
        } else if (_from >= claimEndBlock) {
            return 0;
        } else {
            return claimEndBlock.sub(_from);
        }
    }

    receive() external payable {}
}

// File: contracts/BrewlabsStakingMulti.sol
 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "./libs/IUniRouter02.sol";
import "./libs/IWETH.sol";
interface IToken {
     /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    function claim() external;
}

contract BrewlabsStakingMulti is Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    // The address of the smart chef factory
    address public POOL_FACTORY;

    // Whether it is initialized
    bool public isInitialized;
    uint256 public duration = 60; // 60 days

    // Whether a limit is set for users
    bool public hasUserLimit;
    // The pool limit (0 if none)
    uint256 public poolLimitPerUser;


    // The block number when staking starts.
    uint256 public startBlock;
    // The block number when staking ends.
    uint256 public bonusEndBlock;
    // tokens created per block.
    uint256 public rewardPerBlock;
    // The block number of the last pool update
    uint256 public lastRewardBlock;


    // swap router and path, slipPage
    uint256 public slippageFactor = 950; // 5% default slippage tolerance
    uint256 public constant slippageFactorUL = 995;

    address public uniRouterAddress;
    address[] public earnedToStakedPath;


    // The deposit & withdraw fee
    uint256 public constant MAX_FEE = 2000;
    uint256 public depositFee;

    uint256 public withdrawFee;
    uint256 public buyBackRate = 7500; // 75%
    uint256 public walletARate = 2500;   // 25%

    address public walletA;
    address public buyBackAddress = 0x000000000000000000000000000000000000dEaD;
    address public buyBackWallet = 0xE1f1dd010BBC2860F81c8F90Ea4E38dB949BB16F;
    uint256 public performanceFee = 0.0005 ether;

    // The precision factor
    uint256 public PRECISION_FACTOR;
    uint256[] public PRECISION_FACTOR_REFLECTION;

    // The staked token
    IERC20 public stakingToken;
    // The earned token
    IERC20 public earnedToken;
    // The dividend token of staking token
    IERC20[] public dividendTokens;

    // Accrued token per share
    uint256 public accTokenPerShare;
    uint256[] public accDividendPerShare;

    uint256 public totalStaked;

    uint256 private totalEarned;
    uint256[] private totalReflections;
    uint256[] private reflectionDebt;

    // Info of each user that stakes tokens (stakingToken)
    mapping(address => UserInfo) public userInfo;

    struct UserInfo {
        uint256 amount; // How many staked tokens the user has provided
        uint256 rewardDebt; // Reward debt
        uint256[] reflectionDebt; // Reflection debt
    }

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 amount);
    event AdminTokenRecovered(address tokenRecovered, uint256 amount);

    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);
    event NewRewardPerBlock(uint256 rewardPerBlock);
    event NewPoolLimit(uint256 poolLimitPerUser);
    event RewardsStop(uint256 blockNumber);

    event ServiceInfoUpadted(address _addr, uint256 _fee);
    event WalletAUpdated(address _addr);
    event BuybackAddressUpadted(address _addr);
    event DurationUpdated(uint256 _duration);

    event SetSettings(
        uint256 _depositFee,
        uint256 _withdrawFee,
        uint256 _walletARate,
        uint256 _slippageFactor,
        address _uniRouter,
        address[] _path0
    );

    constructor() {
        POOL_FACTORY = msg.sender;
    }

    /*
     * @notice Initialize the contract
     * @param _stakingToken: staked token address
     * @param _earnedToken: earned token address
     * @param _dividendTokens: reflection token list
     * @param _rewardPerBlock: reward per block (in earnedToken)
     * @param _depositFee: deposit fee
     * @param _withdrawFee: withdraw fee
     * @param _uniRouter: uniswap router address for swap tokens
     * @param _earnedToStakedPath: swap path to compound (earned -> staking path)
     */
    function initialize(
        IERC20 _stakingToken,
        IERC20 _earnedToken,
        IERC20[] memory _dividendTokens,
        uint256 _rewardPerBlock,
        uint256 _depositFee,
        uint256 _withdrawFee,
        address _uniRouter,
        address[] memory _earnedToStakedPath
    ) external {
        require(!isInitialized, "Already initialized");
        require(msg.sender == POOL_FACTORY, "Not factory");

        // Make this contract initialized
        isInitialized = true;

        stakingToken = _stakingToken;
        earnedToken = _earnedToken;

        uint256 decimalsRewardToken = uint256(IToken(address(earnedToken)).decimals());
        require(decimalsRewardToken < 30, "Must be inferior to 30");
        PRECISION_FACTOR = uint256(10**(uint256(40).sub(decimalsRewardToken)));

        for(uint i = 0; i < _dividendTokens.length; i++) {
            dividendTokens.push(_dividendTokens[i]);
            totalReflections.push(0);
            accDividendPerShare.push(0);
            reflectionDebt.push(0);

            uint256 decimalsdividendToken = 18;
            if(address(dividendTokens[i]) != address(0x0)) {
                decimalsdividendToken = uint256(IToken(address(dividendTokens[i])).decimals());
                require(decimalsdividendToken < 30, "Must be inferior to 30");
            }
            PRECISION_FACTOR_REFLECTION.push(uint256(10**(uint256(40).sub(decimalsdividendToken))));
        }

        rewardPerBlock = _rewardPerBlock;

        require(_depositFee < MAX_FEE, "Invalid deposit fee");
        require(_withdrawFee < MAX_FEE, "Invalid withdraw fee");

        depositFee = _depositFee;
        withdrawFee = _withdrawFee;
        
        walletA = msg.sender;

        uniRouterAddress = _uniRouter;
        earnedToStakedPath = _earnedToStakedPath;

        _resetAllowances();
    }

    /*
     * @notice Deposit staked tokens and collect reward tokens (if any)
     * @param _amount: amount to withdraw (in earnedToken)
     */
    function deposit(uint256 _amount) external nonReentrant {
        require(_amount > 0, "Amount should be greator than 0");

        UserInfo storage user = userInfo[msg.sender];

        if (hasUserLimit) {
            require(
                _amount.add(user.amount) <= poolLimitPerUser,
                "User amount above limit"
            );
        }

        _updatePool();

        if (user.amount > 0) {
            uint256 pending =
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
            if (pending > 0) {
                require(availableRewardTokens() >= pending, "Insufficient reward tokens");
                earnedToken.safeTransfer(address(msg.sender), pending);
                
                if(totalEarned > pending) {
                    totalEarned = totalEarned.sub(pending);
                } else {
                    totalEarned = 0;
                }
            }

            for(uint256 i = 0; i < dividendTokens.length; i++) {
                uint256 pendingReflection = 
                    user.amount.mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]).sub(
                        user.reflectionDebt[i]
                    );
                if (pendingReflection > 0) {
                    if(address(dividendTokens[i]) == address(0x0)) {
                        payable(msg.sender).transfer(pendingReflection);
                    } else {
                        dividendTokens[i].safeTransfer(address(msg.sender), pendingReflection);
                    }
                    totalReflections[i] = totalReflections[i].sub(pendingReflection);
                }
            }
        }

        uint256 beforeAmount = stakingToken.balanceOf(address(this));
        stakingToken.safeTransferFrom(
            address(msg.sender),
            address(this),
            _amount
        );
        uint256 afterAmount = stakingToken.balanceOf(address(this));
        
        uint256 realAmount = afterAmount.sub(beforeAmount);
        if (depositFee > 0) {
            uint256 fee = realAmount.mul(depositFee).div(10000);
            if (fee > 0) {
                stakingToken.safeTransfer(walletA, fee);
                realAmount = realAmount.sub(fee);
            }
        }
        
        user.amount = user.amount.add(realAmount);
        totalStaked = totalStaked.add(realAmount);
        

        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
        if(user.reflectionDebt.length == 0) {
            for(uint i = 0; i < dividendTokens.length; i++) {
                user.reflectionDebt.push(0);
            }
        }
        for(uint i = 0; i < dividendTokens.length; i++) {
            user.reflectionDebt[i] = user.amount.mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]);
        }

        emit Deposit(msg.sender, realAmount);
    }

    /*
     * @notice Withdraw staked tokens and collect reward tokens
     * @param _amount: amount to withdraw (in earnedToken)
     */
    function withdraw(uint256 _amount) external nonReentrant {
        require(_amount > 0, "Amount should be greator than 0");

        UserInfo storage user = userInfo[msg.sender];
        require(user.amount >= _amount, "Amount to withdraw too high");

        _updatePool();

        if(user.amount > 0) {
            uint256 pending =
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
            if (pending > 0) {
                require(availableRewardTokens() >= pending, "Insufficient reward tokens");
                earnedToken.safeTransfer(address(msg.sender), pending);
                
                if(totalEarned > pending) {
                    totalEarned = totalEarned.sub(pending);
                } else {
                    totalEarned = 0;
                }
            }

            for(uint i = 0; i < dividendTokens.length; i++) {
                uint256 pendingReflection = 
                    user.amount.mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]).sub(
                        user.reflectionDebt[i]
                    );
                if (pendingReflection > 0) {
                    if(address(dividendTokens[i]) == address(0x0)) {
                        payable(msg.sender).transfer(pendingReflection);
                    } else {
                        dividendTokens[i].safeTransfer(address(msg.sender), pendingReflection);
                    }
                    totalReflections[i] = totalReflections[i].sub(pendingReflection);
                }
            }
        }


        uint256 realAmount = _amount;

        if (user.amount < _amount) {
            realAmount = user.amount;
        }

        user.amount = user.amount.sub(realAmount);
        totalStaked = totalStaked.sub(realAmount);

        if (withdrawFee > 0) {
            uint256 fee = realAmount.mul(withdrawFee).div(10000);

            uint256 _walletAAmt = fee.mul(walletARate).div(10000);
            if (_walletAAmt > 0) {
                stakingToken.safeTransfer(walletA, _walletAAmt);
                realAmount = realAmount.sub(_walletAAmt);
            }
            uint256 _buybackAmt = fee.mul(buyBackRate).div(10000);
            if (_buybackAmt > 0) {
                stakingToken.safeTransfer(buyBackAddress, _buybackAmt);
                realAmount = realAmount.sub(_buybackAmt);
            }
        }

        stakingToken.safeTransfer(address(msg.sender), realAmount);

        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
        for(uint i = 0; i < dividendTokens.length; i++) {
            user.reflectionDebt[i] = user.amount.mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]);
        }

        emit Withdraw(msg.sender, _amount);
    }

    function claimReward() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pending =
            user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                user.rewardDebt
            );
        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            earnedToken.safeTransfer(address(msg.sender), pending);
            
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }
        }
        
        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
    }

    function claimDividend() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        for(uint i = 0; i < dividendTokens.length; i++) {
            uint256 pendingReflection = 
                user.amount.mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]).sub(
                    user.reflectionDebt[i]
                );
            if (pendingReflection > 0) {
                if(address(dividendTokens[i]) == address(0x0)) {
                    payable(msg.sender).transfer(pendingReflection);
                } else {
                    dividendTokens[i].safeTransfer(address(msg.sender), pendingReflection);
                }
                totalReflections[i] = totalReflections[i].sub(pendingReflection);
            }
            
            user.reflectionDebt[i] = user.amount.mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]);
        }
    }

    function compoundReward() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pending =
            user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                user.rewardDebt
            );
        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }
            
            if(address(stakingToken) != address(earnedToken)) {
                uint256 beforeAmount = stakingToken.balanceOf(address(this));
                _safeSwap(pending, earnedToStakedPath, address(this));
                uint256 afterAmount = stakingToken.balanceOf(address(this));
                pending = afterAmount.sub(beforeAmount);
            }

            if (hasUserLimit) {
                require(
                    pending.add(user.amount) <= poolLimitPerUser,
                    "User amount above limit"
                );
            }

            totalStaked = totalStaked.add(pending);
            user.amount = user.amount.add(pending);
            for(uint i = 0; i < dividendTokens.length; i++) {
                user.reflectionDebt[i] = user.amount.mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]).sub(
                    (user.amount.sub(pending)).mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]).sub(user.reflectionDebt[i])
                );
            }

            emit Deposit(msg.sender, pending);
        }
        
        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
    }

    function compoundDividend() external nonReentrant {
    }

    function _transferPerformanceFee() internal {
        require(msg.value >= performanceFee, 'should pay small gas to compound or harvest');

        payable(buyBackWallet).transfer(performanceFee);
        if(msg.value > performanceFee) {
            payable(msg.sender).transfer(msg.value.sub(performanceFee));
        }
    }
    /*
     * @notice Withdraw staked tokens without caring about rewards
     * @dev Needs to be for emergency.
     */
    function emergencyWithdraw() external nonReentrant {
        UserInfo storage user = userInfo[msg.sender];
        uint256 amountToTransfer = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;
        for(uint i = 0; i < dividendTokens.length; i++) {
            user.reflectionDebt[i] = 0;
        }

        if (amountToTransfer > 0) {
            stakingToken.safeTransfer(address(msg.sender), amountToTransfer);
            totalStaked = totalStaked.sub(amountToTransfer);
        }

        emit EmergencyWithdraw(msg.sender, user.amount);
    }

    /**
     * @notice Available amount of reward token
     */
    function availableRewardTokens() public view returns (uint256) {
        uint256 _amount = earnedToken.balanceOf(address(this));
        if (address(earnedToken) == address(stakingToken)) {
            if (_amount < totalStaked) return 0;
            return _amount.sub(totalStaked);
        }

        return _amount;
    }

    /**
     * @notice Available amount of reflection token
     */
    function availabledividendTokens(uint index) public view returns (uint256) {
        if(address(dividendTokens[index]) == address(0x0)) {
            return address(this).balance;
        }

        uint256 _amount = dividendTokens[index].balanceOf(address(this));
        
        if(address(dividendTokens[index]) == address(earnedToken)) {
            if(_amount < totalEarned) return 0;
            _amount = _amount.sub(totalEarned);
        }

        if(address(dividendTokens[index]) == address(stakingToken)) {
            if(_amount < totalStaked) return 0;
            _amount = _amount.sub(totalStaked);
        }

        return _amount;
    }

    /*
     * @notice View function to see pending reward on frontend.
     * @param _user: user address
     * @return Pending reward for a given user
     */
    function pendingReward(address _user) external view returns (uint256) {
        UserInfo storage user = userInfo[_user];
        
        if (block.number > lastRewardBlock && totalStaked != 0 && lastRewardBlock > 0) {
            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
            uint256 cakeReward = multiplier.mul(rewardPerBlock);
            uint256 adjustedTokenPerShare =
                accTokenPerShare.add(
                    cakeReward.mul(PRECISION_FACTOR).div(totalStaked)
                );
            return
                user
                    .amount
                    .mul(adjustedTokenPerShare)
                    .div(PRECISION_FACTOR)
                    .sub(user.rewardDebt);
        } else {
            return
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
        }
    }

    function pendingDividends(address _user) external view returns (uint256[] memory data) {
        data = new uint256[](dividendTokens.length);
        if(totalStaked == 0) return data;
        
        UserInfo storage user = userInfo[_user];
        for(uint i = 0; i < dividendTokens.length; i++) {
            uint256 reflectionAmount = availabledividendTokens(i);
            uint256 sTokenBal = stakingToken.balanceOf(address(this));

            uint256 adjustedReflectionPerShare = accDividendPerShare[i].add(
                    reflectionAmount.sub(totalReflections[i]).mul(PRECISION_FACTOR_REFLECTION[i]).div(sTokenBal)
                );
            
            uint256 pendingReflection = 
                    user.amount.mul(adjustedReflectionPerShare).div(PRECISION_FACTOR_REFLECTION[i]).sub(
                        user.reflectionDebt[i]
                    );
            
            data[i] = pendingReflection;
        }

        return data;
    }

    /************************
    ** Admin Methods
    *************************/
    function harvest() external onlyOwner {        
        _updatePool();

        uint256 _amount = stakingToken.balanceOf(address(this));
        _amount = _amount.sub(totalStaked);

        for(uint i = 0; i < dividendTokens.length; i++) {
            uint256 pendingReflection = _amount.mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]).sub(reflectionDebt[i]);
            if(pendingReflection > 0) {
                if(address(dividendTokens[i]) == address(0x0)) {
                    payable(walletA).transfer(pendingReflection);
                } else {
                    dividendTokens[i].safeTransfer( walletA, pendingReflection);
                }
                totalReflections[i] = totalReflections[i].sub(pendingReflection);
            }
            
            reflectionDebt[i] = _amount.mul(accDividendPerShare[i]).div(PRECISION_FACTOR_REFLECTION[i]);
        }
    }

    /*
     * @notice Deposit reward token
     * @dev Only call by owner. Needs to be for deposit of reward token when reflection token is same with reward token.
     */
    function depositRewards(uint _amount) external nonReentrant {
        require(_amount > 0);

        uint256 beforeAmt = earnedToken.balanceOf(address(this));
        earnedToken.safeTransferFrom(msg.sender, address(this), _amount);
        uint256 afterAmt = earnedToken.balanceOf(address(this));

        totalEarned = totalEarned.add(afterAmt).sub(beforeAmt);
    }

    /*
     * @notice Withdraw reward token
     * @dev Only callable by owner. Needs to be for emergency.
     */
    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {
        require( block.number > bonusEndBlock, "Pool is running");

        earnedToken.safeTransfer(address(msg.sender), _amount);
        
        if (totalEarned > 0) {
            if (_amount > totalEarned) {
                totalEarned = 0;
            } else {
                totalEarned = totalEarned.sub(_amount);
            }
        }
    }

    /**
     * @notice It allows the admin to recover wrong tokens sent to the contract
     * @param _tokenAddress: the address of the token to withdraw
     * @param _tokenAmount: the number of tokens to withdraw
     * @dev This function is only callable by admin.
     */
    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)
        external
        onlyOwner
    {
        require(
            _tokenAddress != address(earnedToken),
            "Cannot be reward token"
        );

        if(_tokenAddress == address(stakingToken)) {
            uint256 tokenBal = stakingToken.balanceOf(address(this));
            require(_tokenAmount <= tokenBal.sub(totalStaked), "Insufficient balance");
        }

        if(_tokenAddress == address(0x0)) {
            payable(msg.sender).transfer(_tokenAmount);
        } else {
            IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);
        }

        emit AdminTokenRecovered(_tokenAddress, _tokenAmount);
    }

    function startReward() external onlyOwner {
        require(startBlock == 0, "Pool was already started");

        startBlock = block.number.add(100);
        bonusEndBlock = startBlock.add(duration * 28800);
        lastRewardBlock = startBlock;
        
        emit NewStartAndEndBlocks(startBlock, bonusEndBlock);
    }

    function stopReward() external onlyOwner {
        bonusEndBlock = block.number;
    }

    /*
     * @notice Update pool limit per user
     * @dev Only callable by owner.
     * @param _hasUserLimit: whether the limit remains forced
     * @param _poolLimitPerUser: new pool limit per user
     */
    function updatePoolLimitPerUser( bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {
        require(hasUserLimit, "Must be set");
        if (_hasUserLimit) {
            require(
                _poolLimitPerUser > poolLimitPerUser,
                "New limit must be higher"
            );
            poolLimitPerUser = _poolLimitPerUser;
        } else {
            hasUserLimit = _hasUserLimit;
            poolLimitPerUser = 0;
        }
        emit NewPoolLimit(poolLimitPerUser);
    }

    /*
     * @notice Update reward per block
     * @dev Only callable by owner.
     * @param _rewardPerBlock: the reward per block
     */
    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {
        // require(block.number < startBlock, "Pool was already started");

        rewardPerBlock = _rewardPerBlock;
        emit NewRewardPerBlock(_rewardPerBlock);
    }

    function setServiceInfo(address _buyBackWallet, uint256 _fee) external {
        require(msg.sender == buyBackWallet, "setServiceInfo: FORBIDDEN");
        require(_buyBackWallet != address(0x0) || _buyBackWallet != buyBackWallet, "Invalid address");

        buyBackWallet = _buyBackWallet;
        performanceFee = _fee;

        emit ServiceInfoUpadted(_buyBackWallet, _fee);
    }

    function updateWalletA(address _walletA) external onlyOwner {
        require(_walletA != address(0x0) || _walletA != walletA, "Invalid address");

        walletA = _walletA;
        emit WalletAUpdated(_walletA);
    }

    function updateBuybackAddr(address _addr) external onlyOwner {
        require(_addr != address(0x0) || _addr != buyBackAddress, "Invalid address");

        buyBackAddress = _addr;
        emit BuybackAddressUpadted(_addr);
    }

    function setDuration(uint256 _duration) external onlyOwner {
        require(startBlock == 0, "Pool was already started");
        require(_duration >= 30, "lower limit reached");

        duration = _duration;
        emit DurationUpdated(_duration);
    }

    function setSettings(
        uint256 _depositFee,
        uint256 _withdrawFee,
        uint256 _walletARate,
        uint256 _slippageFactor,
        address _uniRouter,
        address[] memory _earnedToStakedPath
    ) external onlyOwner {
        require(_depositFee < MAX_FEE, "Invalid deposit fee");
        require(_withdrawFee < MAX_FEE, "Invalid withdraw fee");
        require(_slippageFactor <= slippageFactorUL, "_slippageFactor too high");

        depositFee = _depositFee;
        withdrawFee = _withdrawFee;
        walletARate = _walletARate;
        buyBackRate = uint256(10000).sub(walletARate);

        slippageFactor = _slippageFactor;
        uniRouterAddress = _uniRouter;
        earnedToStakedPath = _earnedToStakedPath;

        emit SetSettings(_depositFee, _withdrawFee, _walletARate, _slippageFactor, _uniRouter, _earnedToStakedPath);
    }

    function resetAllowances() external onlyOwner {
        _resetAllowances();
    }


    /************************
    ** Internal Methods
    *************************/
    /*
     * @notice Update reward variables of the given pool to be up-to-date.
     */
    function _updatePool() internal {
        // calc reflection rate
        if(totalStaked > 0) {
            for(uint i  = 0; i < dividendTokens.length; i++) {
                uint256 reflectionAmount = availabledividendTokens(i);
                uint256 sTokenBal = stakingToken.balanceOf(address(this));

                accDividendPerShare[i] = accDividendPerShare[i].add(
                        reflectionAmount.sub(totalReflections[i]).mul(PRECISION_FACTOR_REFLECTION[i]).div(sTokenBal)
                    );

                totalReflections[i] = reflectionAmount;
            }
        }

        if (block.number <= lastRewardBlock || lastRewardBlock == 0) {
            return;
        }

        if (totalStaked == 0) {
            lastRewardBlock = block.number;
            return;
        }

        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
        uint256 _reward = multiplier.mul(rewardPerBlock);
        accTokenPerShare = accTokenPerShare.add(
            _reward.mul(PRECISION_FACTOR).div(totalStaked)
        );
        lastRewardBlock = block.number;
    }

    /*
     * @notice Return reward multiplier over the given _from to _to block.
     * @param _from: block to start
     * @param _to: block to finish
     */
    function _getMultiplier(uint256 _from, uint256 _to)
        internal
        view
        returns (uint256)
    {
        if (_to <= bonusEndBlock) {
            return _to.sub(_from);
        } else if (_from >= bonusEndBlock) {
            return 0;
        } else {
            return bonusEndBlock.sub(_from);
        }
    }

    function _safeSwap(
        uint256 _amountIn,
        address[] memory _path,
        address _to
    ) internal {
        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);
        uint256 amountOut = amounts[amounts.length.sub(1)];

        IUniRouter02(uniRouterAddress).swapExactTokensForTokens(
            _amountIn,
            amountOut.mul(slippageFactor).div(1000),
            _path,
            _to,
            block.timestamp.add(600)
        );
    }

    function _resetAllowances() internal {
        earnedToken.safeApprove(uniRouterAddress, uint256(0));
        earnedToken.safeIncreaseAllowance(
            uniRouterAddress,
            type(uint256).max
        );
    }

    receive() external payable {}
}

// File: contracts/libs/IUniRouter02.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IUniRouter01.sol";

interface IUniRouter02 is IUniRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

// File: contracts/libs/IWETH.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.5.0;

interface IWETH {
    function deposit() external payable;
    function transfer(address to, uint value) external returns (bool);
    function withdraw(uint) external;
}

// File: contracts/libs/IUniRouter01.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IUniRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

// File: contracts/BrewlabsStakingClaim.sol
 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "./libs/IUniRouter02.sol";
import "./libs/IWETH.sol";
interface IToken {
     /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    function claim() external;
}

contract BrewlabsStakingClaim is Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    // The address of the smart chef factory
    address public POOL_FACTORY;

    // Whether it is initialized
    bool public isInitialized;
    uint256 public duration = 60; // 60 days

    // Whether a limit is set for users
    bool public hasUserLimit;
    // The pool limit (0 if none)
    uint256 public poolLimitPerUser;


    // The block number when staking starts.
    uint256 public startBlock;
    // The block number when staking ends.
    uint256 public bonusEndBlock;
    // tokens created per block.
    uint256 public rewardPerBlock;
    // The block number of the last pool update
    uint256 public lastRewardBlock;


    // swap router and path, slipPage
    uint256 public slippageFactor = 950; // 5% default slippage tolerance
    uint256 public constant slippageFactorUL = 995;

    address public uniRouterAddress;
    address[] public reflectionToStakedPath;
    address[] public earnedToStakedPath;


    // The deposit & withdraw fee
    uint256 public constant MAX_FEE = 2000;
    uint256 public depositFee;

    uint256 public withdrawFee;
    uint256 public buyBackRate = 7500; // 75%
    uint256 public walletARate = 2500;   // 25%

    address public walletA;
    address public buyBackAddress = 0x000000000000000000000000000000000000dEaD;
    address public buyBackWallet = 0xE1f1dd010BBC2860F81c8F90Ea4E38dB949BB16F;
    uint256 public performanceFee = 0.0005 ether;

    // The precision factor
    uint256 public PRECISION_FACTOR;
    uint256 public PRECISION_FACTOR_REFLECTION;

    // The staked token
    IERC20 public stakingToken;
    // The earned token
    IERC20 public earnedToken;
    // The dividend token of staking token
    IERC20 public dividendToken;

    // Accrued token per share
    uint256 public accTokenPerShare;
    uint256 public accDividendPerShare;

    uint256 public totalStaked;

    uint256 private totalEarned;
    uint256 private totalReflections;
    uint256 private reflectionDebt;

    // Info of each user that stakes tokens (stakingToken)
    mapping(address => UserInfo) public userInfo;

    struct UserInfo {
        uint256 amount; // How many staked tokens the user has provided
        uint256 rewardDebt; // Reward debt
        uint256 reflectionDebt; // Reflection debt
    }

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 amount);
    event AdminTokenRecovered(address tokenRecovered, uint256 amount);

    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);
    event NewRewardPerBlock(uint256 rewardPerBlock);
    event NewPoolLimit(uint256 poolLimitPerUser);
    event RewardsStop(uint256 blockNumber);

    event ServiceInfoUpadted(address _addr, uint256 _fee);
    event WalletAUpdated(address _addr);
    event BuybackAddressUpadted(address _addr);
    event DurationUpdated(uint256 _duration);

    event SetSettings(
        uint256 _depositFee,
        uint256 _withdrawFee,
        uint256 _walletARate,
        uint256 _slippageFactor,
        address _uniRouter,
        address[] _path0,
        address[] _path1
    );

    constructor() {
        POOL_FACTORY = msg.sender;
    }

    /*
     * @notice Initialize the contract
     * @param _stakingToken: staked token address
     * @param _earnedToken: earned token address
     * @param _dividendToken: reflection token address
     * @param _rewardPerBlock: reward per block (in earnedToken)
     * @param _depositFee: deposit fee
     * @param _withdrawFee: withdraw fee
     * @param _uniRouter: uniswap router address for swap tokens
     * @param _earnedToStakedPath: swap path to compound (earned -> staking path)
     * @param _reflectionToStakedPath: swap path to compound (reflection -> staking path)
     */
    function initialize(
        IERC20 _stakingToken,
        IERC20 _earnedToken,
        IERC20 _dividendToken,
        uint256 _rewardPerBlock,
        uint256 _depositFee,
        uint256 _withdrawFee,
        address _uniRouter,
        address[] memory _earnedToStakedPath,
        address[] memory _reflectionToStakedPath
    ) external {
        require(!isInitialized, "Already initialized");
        require(msg.sender == POOL_FACTORY, "Not factory");

        // Make this contract initialized
        isInitialized = true;

        stakingToken = _stakingToken;
        earnedToken = _earnedToken;
        dividendToken = _dividendToken;

        rewardPerBlock = _rewardPerBlock;

        require(_depositFee < MAX_FEE, "Invalid deposit fee");
        require(_withdrawFee < MAX_FEE, "Invalid withdraw fee");

        depositFee = _depositFee;
        withdrawFee = _withdrawFee;
        
        walletA = msg.sender;

        uint256 decimalsRewardToken = uint256(IToken(address(earnedToken)).decimals());
        require(decimalsRewardToken < 30, "Must be inferior to 30");
        PRECISION_FACTOR = uint256(10**(uint256(40).sub(decimalsRewardToken)));

        uint256 decimalsdividendToken = 18;
        if(address(dividendToken) != address(0x0)) {
            decimalsdividendToken = uint256(IToken(address(dividendToken)).decimals());
            require(decimalsdividendToken < 30, "Must be inferior to 30");
        }
        PRECISION_FACTOR_REFLECTION = uint256(10**(uint256(40).sub(decimalsdividendToken)));

        uniRouterAddress = _uniRouter;
        earnedToStakedPath = _earnedToStakedPath;
        reflectionToStakedPath = _reflectionToStakedPath;

        _resetAllowances();
    }

    /*
     * @notice Deposit staked tokens and collect reward tokens (if any)
     * @param _amount: amount to withdraw (in earnedToken)
     */
    function deposit(uint256 _amount) external nonReentrant {
        require(_amount > 0, "Amount should be greator than 0");

        UserInfo storage user = userInfo[msg.sender];

        if (hasUserLimit) {
            require(
                _amount.add(user.amount) <= poolLimitPerUser,
                "User amount above limit"
            );
        }

        _updatePool();

        if (user.amount > 0) {
            uint256 pending =
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
            if (pending > 0) {
                require(availableRewardTokens() >= pending, "Insufficient reward tokens");
                earnedToken.safeTransfer(address(msg.sender), pending);
                
                if(totalEarned > pending) {
                    totalEarned = totalEarned.sub(pending);
                } else {
                    totalEarned = 0;
                }
            }

            uint256 pendingReflection = 
                user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                    user.reflectionDebt
                );
            if (pendingReflection > 0) {
                if(address(dividendToken) == address(0x0)) {
                    payable(msg.sender).transfer(pendingReflection);
                } else {
                    dividendToken.safeTransfer(address(msg.sender), pendingReflection);
                }
                totalReflections = totalReflections.sub(pendingReflection);
            }
        }

        uint256 beforeAmount = stakingToken.balanceOf(address(this));
        stakingToken.safeTransferFrom(
            address(msg.sender),
            address(this),
            _amount
        );
        uint256 afterAmount = stakingToken.balanceOf(address(this));
        
        uint256 realAmount = afterAmount.sub(beforeAmount);
        if (depositFee > 0) {
            uint256 fee = realAmount.mul(depositFee).div(10000);
            if (fee > 0) {
                stakingToken.safeTransfer(walletA, fee);
                realAmount = realAmount.sub(fee);
            }
        }
        
        user.amount = user.amount.add(realAmount);
        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
        user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);

        totalStaked = totalStaked.add(realAmount);
        
        emit Deposit(msg.sender, realAmount);
    }

    /*
     * @notice Withdraw staked tokens and collect reward tokens
     * @param _amount: amount to withdraw (in earnedToken)
     */
    function withdraw(uint256 _amount) external nonReentrant {
        require(_amount > 0, "Amount should be greator than 0");

        UserInfo storage user = userInfo[msg.sender];
        require(user.amount >= _amount, "Amount to withdraw too high");

        _updatePool();

        if(user.amount > 0) {
            uint256 pending =
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
            if (pending > 0) {
                require(availableRewardTokens() >= pending, "Insufficient reward tokens");
                earnedToken.safeTransfer(address(msg.sender), pending);
                
                if(totalEarned > pending) {
                    totalEarned = totalEarned.sub(pending);
                } else {
                    totalEarned = 0;
                }
            }

            uint256 pendingReflection = 
                user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                    user.reflectionDebt
                );
            if (pendingReflection > 0) {
                if(address(dividendToken) == address(0x0)) {
                    payable(msg.sender).transfer(pendingReflection);
                } else {
                    dividendToken.safeTransfer(address(msg.sender), pendingReflection);
                }
                totalReflections = totalReflections.sub(pendingReflection);
            }
        }

        uint256 realAmount = _amount;

        if (user.amount < _amount) {
            realAmount = user.amount;
        }

        user.amount = user.amount.sub(realAmount);
        totalStaked = totalStaked.sub(realAmount);

        if (withdrawFee > 0) {
            uint256 fee = realAmount.mul(withdrawFee).div(10000);

            uint256 _walletAAmt = fee.mul(walletARate).div(10000);
            if (_walletAAmt > 0) {
                stakingToken.safeTransfer(walletA, _walletAAmt);
                realAmount = realAmount.sub(_walletAAmt);
            }
            uint256 _buybackAmt = fee.mul(buyBackRate).div(10000);
            if (_buybackAmt > 0) {
                stakingToken.safeTransfer(buyBackAddress, _buybackAmt);
                realAmount = realAmount.sub(_buybackAmt);
            }
        }

        stakingToken.safeTransfer(address(msg.sender), realAmount);

        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
        user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);

        emit Withdraw(msg.sender, _amount);
    }

    function claimReward() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];
        
        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pending =
            user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                user.rewardDebt
            );
        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            earnedToken.safeTransfer(address(msg.sender), pending);
            
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }
        }
        
        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
    }

    function claimDividend() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pendingReflection = 
            user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                user.reflectionDebt
            );
        if (pendingReflection > 0) {
            if(address(dividendToken) == address(0x0)) {
                payable(msg.sender).transfer(pendingReflection);
            } else {
                dividendToken.safeTransfer(address(msg.sender), pendingReflection);
            }
            totalReflections = totalReflections.sub(pendingReflection);
        }
        
        user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
    }

    function compoundReward() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pending =
            user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                user.rewardDebt
            );
        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }
            
            if(address(stakingToken) != address(earnedToken)) {
                uint256 beforeAmount = stakingToken.balanceOf(address(this));
                _safeSwap(pending, earnedToStakedPath, address(this));
                uint256 afterAmount = stakingToken.balanceOf(address(this));
                pending = afterAmount.sub(beforeAmount);
            }

            if (hasUserLimit) {
                require(
                    pending.add(user.amount) <= poolLimitPerUser,
                    "User amount above limit"
                );
            }

            totalStaked = totalStaked.add(pending);
            user.amount = user.amount.add(pending);
            user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                (user.amount.sub(pending)).mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(user.reflectionDebt)
            );

            emit Deposit(msg.sender, pending);
        }
        
        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
    }

    function compoundDividend() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pending = 
            user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                user.reflectionDebt
            );
        if (pending > 0) {
            totalReflections = totalReflections.sub(pending);

            if(address(stakingToken) != address(dividendToken)) {
                if(address(dividendToken) == address(0x0)) {
                    address wethAddress = IUniRouter02(uniRouterAddress).WETH();
                    IWETH(wethAddress).deposit{ value: pending }();
                }

                uint256 beforeAmount = stakingToken.balanceOf(address(this));
                _safeSwap(pending, reflectionToStakedPath, address(this));
                uint256 afterAmount = stakingToken.balanceOf(address(this));

                pending = afterAmount.sub(beforeAmount);
            }

            if (hasUserLimit) {
                require(
                    pending.add(user.amount) <= poolLimitPerUser,
                    "User amount above limit"
                );
            }

            totalStaked = totalStaked.add(pending);
            user.amount = user.amount.add(pending);
            user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                (user.amount.sub(pending)).mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt)
            );

            emit Deposit(msg.sender, pending);
        }
        
        user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
    }
    
    function _transferPerformanceFee() internal {
        require(msg.value >= performanceFee, 'should pay small gas to compound or harvest');

        payable(buyBackWallet).transfer(performanceFee);
        if(msg.value > performanceFee) {
            payable(msg.sender).transfer(msg.value.sub(performanceFee));
        }
    }

    /*
     * @notice Withdraw staked tokens without caring about rewards
     * @dev Needs to be for emergency.
     */
    function emergencyWithdraw() external nonReentrant {
        UserInfo storage user = userInfo[msg.sender];
        uint256 amountToTransfer = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;
        user.reflectionDebt = 0;

        if (amountToTransfer > 0) {
            stakingToken.safeTransfer(address(msg.sender), amountToTransfer);
            totalStaked = totalStaked.sub(amountToTransfer);
        }

        emit EmergencyWithdraw(msg.sender, user.amount);
    }

    /**
     * @notice Available amount of reward token
     */
    function availableRewardTokens() public view returns (uint256) {
        if(address(earnedToken) == address(dividendToken)) return totalEarned;

        uint256 _amount = earnedToken.balanceOf(address(this));
        if (address(earnedToken) == address(stakingToken)) {
            if (_amount < totalStaked) return 0;
            return _amount.sub(totalStaked);
        }

        return _amount;
    }

    /**
     * @notice Available amount of reflection token
     */
    function availabledividendTokens() public view returns (uint256) {
        if(address(dividendToken) == address(0x0)) {
            return address(this).balance;
        }

        uint256 _amount = dividendToken.balanceOf(address(this));
        
        if(address(dividendToken) == address(earnedToken)) {
            if(_amount < totalEarned) return 0;
            _amount = _amount.sub(totalEarned);
        }

        if(address(dividendToken) == address(stakingToken)) {
            if(_amount < totalStaked) return 0;
            _amount = _amount.sub(totalStaked);
        }

        return _amount;
    }

    /*
     * @notice View function to see pending reward on frontend.
     * @param _user: user address
     * @return Pending reward for a given user
     */
    function pendingReward(address _user) external view returns (uint256) {
        UserInfo storage user = userInfo[_user];
        
        if (block.number > lastRewardBlock && totalStaked != 0 && lastRewardBlock > 0) {
            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
            uint256 cakeReward = multiplier.mul(rewardPerBlock);
            uint256 adjustedTokenPerShare =
                accTokenPerShare.add(
                    cakeReward.mul(PRECISION_FACTOR).div(totalStaked)
                );
            return
                user
                    .amount
                    .mul(adjustedTokenPerShare)
                    .div(PRECISION_FACTOR)
                    .sub(user.rewardDebt);
        } else {
            return
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
        }
    }

    function pendingDividends(address _user) external view returns (uint256) {
        UserInfo storage user = userInfo[_user];

        if(totalStaked == 0) return 0;
        
        uint256 reflectionAmount = availabledividendTokens();
        uint256 sTokenBal = stakingToken.balanceOf(address(this));

        uint256 adjustedReflectionPerShare = accDividendPerShare.add(
                reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)
            );
        
        uint256 pendingReflection = 
                user.amount.mul(adjustedReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                    user.reflectionDebt
                );
        
        return pendingReflection;
    }

    /************************
    ** Admin Methods
    *************************/
    function harvest() external onlyOwner {    
        IToken(address(stakingToken)).claim();
        
        _updatePool();

        uint256 _amount = stakingToken.balanceOf(address(this));
        _amount = _amount.sub(totalStaked);

        uint256 pendingReflection = _amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(reflectionDebt);
        if(pendingReflection > 0) {
            if(address(dividendToken) == address(0x0)) {
                payable(walletA).transfer(pendingReflection);
            } else {
                dividendToken.safeTransfer( walletA, pendingReflection);
            }
            totalReflections = totalReflections.sub(pendingReflection);
        }
        
        reflectionDebt = _amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
    }

    /*
     * @notice Deposit reward token
     * @dev Only call by owner. Needs to be for deposit of reward token when reflection token is same with reward token.
     */
    function depositRewards(uint _amount) external nonReentrant {
        require(_amount > 0);

        uint256 beforeAmt = earnedToken.balanceOf(address(this));
        earnedToken.safeTransferFrom(msg.sender, address(this), _amount);
        uint256 afterAmt = earnedToken.balanceOf(address(this));

        totalEarned = totalEarned.add(afterAmt).sub(beforeAmt);
    }

    /*
     * @notice Withdraw reward token
     * @dev Only callable by owner. Needs to be for emergency.
     */
    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {
        require( block.number > bonusEndBlock, "Pool is running");
        if(address(earnedToken) != address(dividendToken)) {
            require(availableRewardTokens() >= _amount, "Insufficient reward tokens");
        }

        earnedToken.safeTransfer(address(msg.sender), _amount);
        
        if (totalEarned > 0) {
            if (_amount > totalEarned) {
                totalEarned = 0;
            } else {
                totalEarned = totalEarned.sub(_amount);
            }
        }
    }

    /**
     * @notice It allows the admin to recover wrong tokens sent to the contract
     * @param _tokenAddress: the address of the token to withdraw
     * @param _tokenAmount: the number of tokens to withdraw
     * @dev This function is only callable by admin.
     */
    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)
        external
        onlyOwner
    {
        require(
            _tokenAddress != address(earnedToken),
            "Cannot be reward token"
        );

        if(_tokenAddress == address(stakingToken)) {
            uint256 tokenBal = stakingToken.balanceOf(address(this));
            require(_tokenAmount <= tokenBal.sub(totalStaked), "Insufficient balance");
        }

        if(_tokenAddress == address(0x0)) {
            payable(msg.sender).transfer(_tokenAmount);
        } else {
            IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);
        }

        emit AdminTokenRecovered(_tokenAddress, _tokenAmount);
    }

    function startReward() external onlyOwner {
        require(startBlock == 0, "Pool was already started");

        startBlock = block.number.add(100);
        bonusEndBlock = startBlock.add(duration * 28800);
        lastRewardBlock = startBlock;
        
        emit NewStartAndEndBlocks(startBlock, bonusEndBlock);
    }

    function stopReward() external onlyOwner {
        bonusEndBlock = block.number;
    }

    /*
     * @notice Update pool limit per user
     * @dev Only callable by owner.
     * @param _hasUserLimit: whether the limit remains forced
     * @param _poolLimitPerUser: new pool limit per user
     */
    function updatePoolLimitPerUser( bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {
        require(hasUserLimit, "Must be set");
        if (_hasUserLimit) {
            require(
                _poolLimitPerUser > poolLimitPerUser,
                "New limit must be higher"
            );
            poolLimitPerUser = _poolLimitPerUser;
        } else {
            hasUserLimit = _hasUserLimit;
            poolLimitPerUser = 0;
        }
        emit NewPoolLimit(poolLimitPerUser);
    }

    /*
     * @notice Update reward per block
     * @dev Only callable by owner.
     * @param _rewardPerBlock: the reward per block
     */
    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {
        // require(block.number < startBlock, "Pool was already started");

        rewardPerBlock = _rewardPerBlock;
        emit NewRewardPerBlock(_rewardPerBlock);
    }

    function setServiceInfo(address _buyBackWallet, uint256 _fee) external {
        require(msg.sender == buyBackWallet, "setServiceInfo: FORBIDDEN");
        require(_buyBackWallet != address(0x0) || _buyBackWallet != buyBackWallet, "Invalid address");

        buyBackWallet = _buyBackWallet;
        performanceFee = _fee;

        emit ServiceInfoUpadted(_buyBackWallet, _fee);
    }

    function updateWalletA(address _walletA) external onlyOwner {
        require(_walletA != address(0x0) || _walletA != walletA, "Invalid address");

        walletA = _walletA;
        emit WalletAUpdated(_walletA);
    }

    function updateBuybackAddr(address _addr) external onlyOwner {
        require(_addr != address(0x0) || _addr != buyBackAddress, "Invalid address");

        buyBackAddress = _addr;
        emit BuybackAddressUpadted(_addr);
    }

    function setDuration(uint256 _duration) external onlyOwner {
        require(startBlock == 0, "Pool was already started");
        require(_duration >= 30, "lower limit reached");

        duration = _duration;
        emit DurationUpdated(_duration);
    }

    function setSettings(
        uint256 _depositFee,
        uint256 _withdrawFee,
        uint256 _walletARate,
        uint256 _slippageFactor,
        address _uniRouter,
        address[] memory _earnedToStakedPath,
        address[] memory _reflectionToStakedPath
    ) external onlyOwner {
        require(_depositFee < MAX_FEE, "Invalid deposit fee");
        require(_withdrawFee < MAX_FEE, "Invalid withdraw fee");
        require(_slippageFactor <= slippageFactorUL, "_slippageFactor too high");

        depositFee = _depositFee;
        withdrawFee = _withdrawFee;
        walletARate = _walletARate;
        buyBackRate = uint256(10000).sub(walletARate);

        slippageFactor = _slippageFactor;
        uniRouterAddress = _uniRouter;
        reflectionToStakedPath = _reflectionToStakedPath;
        earnedToStakedPath = _earnedToStakedPath;

        emit SetSettings(_depositFee, _withdrawFee, _walletARate, _slippageFactor, _uniRouter, _earnedToStakedPath, _reflectionToStakedPath);
    }

    function resetAllowances() external onlyOwner {
        _resetAllowances();
    }


    /************************
    ** Internal Methods
    *************************/
    /*
     * @notice Update reward variables of the given pool to be up-to-date.
     */
    function _updatePool() internal {
        // calc reflection rate
        if(totalStaked > 0) {
            uint256 reflectionAmount = availabledividendTokens();
            uint256 sTokenBal = stakingToken.balanceOf(address(this));

            accDividendPerShare = accDividendPerShare.add(
                    reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)
                );

            totalReflections = reflectionAmount;
        }

        if (block.number <= lastRewardBlock || lastRewardBlock == 0) {
            return;
        }

        if (totalStaked == 0) {
            lastRewardBlock = block.number;
            return;
        }

        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
        uint256 _reward = multiplier.mul(rewardPerBlock);
        accTokenPerShare = accTokenPerShare.add(
            _reward.mul(PRECISION_FACTOR).div(totalStaked)
        );
        lastRewardBlock = block.number;
    }

    /*
     * @notice Return reward multiplier over the given _from to _to block.
     * @param _from: block to start
     * @param _to: block to finish
     */
    function _getMultiplier(uint256 _from, uint256 _to)
        internal
        view
        returns (uint256)
    {
        if (_to <= bonusEndBlock) {
            return _to.sub(_from);
        } else if (_from >= bonusEndBlock) {
            return 0;
        } else {
            return bonusEndBlock.sub(_from);
        }
    }

    function _safeSwap(
        uint256 _amountIn,
        address[] memory _path,
        address _to
    ) internal {
        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);
        uint256 amountOut = amounts[amounts.length.sub(1)];

        IUniRouter02(uniRouterAddress).swapExactTokensForTokens(
            _amountIn,
            amountOut.mul(slippageFactor).div(1000),
            _path,
            _to,
            block.timestamp.add(600)
        );
    }

    function _resetAllowances() internal {
        earnedToken.safeApprove(uniRouterAddress, uint256(0));
        earnedToken.safeIncreaseAllowance(
            uniRouterAddress,
            type(uint256).max
        );

        if(address(dividendToken) == address(0x0)) {
            address wethAddress = IUniRouter02(uniRouterAddress).WETH();
            IERC20(wethAddress).safeApprove(uniRouterAddress, uint256(0));
            IERC20(wethAddress).safeIncreaseAllowance(
                uniRouterAddress,
                type(uint256).max
            );
        } else {
            dividendToken.safeApprove(uniRouterAddress, uint256(0));
            dividendToken.safeIncreaseAllowance(
                uniRouterAddress,
                type(uint256).max
            );
        }        
    }

    receive() external payable {}
}

// File: contracts/BrewlabsStaking.sol
 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "./libs/IUniRouter02.sol";
import "./libs/IWETH.sol";
interface IToken {
     /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);
}

contract BrewlabsStaking is Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    // The address of the smart chef factory
    address public POOL_FACTORY;

    // Whether it is initialized
    bool public isInitialized;
    uint256 public duration = 90; // 90 days

    // Whether a limit is set for users
    bool public hasUserLimit;
    // The pool limit (0 if none)
    uint256 public poolLimitPerUser;


    // The block number when staking starts.
    uint256 public startBlock;
    // The block number when staking ends.
    uint256 public bonusEndBlock;
    // tokens created per block.
    uint256 public rewardPerBlock;
    // The block number of the last pool update
    uint256 public lastRewardBlock;


    // swap router and path, slipPage
    uint256 public slippageFactor = 950; // 5% default slippage tolerance
    uint256 public constant slippageFactorUL = 995;

    address public uniRouterAddress;
    address[] public reflectionToStakedPath;
    address[] public earnedToStakedPath;


    // The deposit & withdraw fee
    uint256 public constant MAX_FEE = 2000;
    uint256 public depositFee;

    uint256 public withdrawFee;
    uint256 public buyBackRate = 7500; // 75%
    uint256 public walletARate = 2500;   // 25%

    address public walletA;
    address public buyBackAddress = 0x000000000000000000000000000000000000dEaD;
    address public buyBackWallet = 0xE1f1dd010BBC2860F81c8F90Ea4E38dB949BB16F;
    uint256 public performanceFee = 0.0005 ether;

    // The precision factor
    uint256 public PRECISION_FACTOR;
    uint256 public PRECISION_FACTOR_REFLECTION;

    // The staked token
    IERC20 public stakingToken;
    // The earned token
    IERC20 public earnedToken;
    // The dividend token of staking token
    address public dividendToken;

    // Accrued token per share
    uint256 public accTokenPerShare;
    uint256 public accDividendPerShare;

    uint256 public totalStaked;

    uint256 private totalEarned;
    uint256 private totalReflections;
    uint256 private reflectionDebt;

    // Info of each user that stakes tokens (stakingToken)
    mapping(address => UserInfo) public userInfo;

    struct UserInfo {
        uint256 amount; // How many staked tokens the user has provided
        uint256 rewardDebt; // Reward debt
        uint256 reflectionDebt; // Reflection debt
    }

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 amount);
    event AdminTokenRecovered(address tokenRecovered, uint256 amount);

    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);
    event NewRewardPerBlock(uint256 rewardPerBlock);
    event NewPoolLimit(uint256 poolLimitPerUser);
    event RewardsStop(uint256 blockNumber);

    event ServiceInfoUpadted(address _addr, uint256 _fee);
    event WalletAUpdated(address _addr);
    event BuybackAddressUpadted(address _addr);
    event DurationUpdated(uint256 _duration);

    event SetSettings(
        uint256 _depositFee,
        uint256 _withdrawFee,
        uint256 _walletARate,
        uint256 _slippageFactor,
        address _uniRouter,
        address[] _path0,
        address[] _path1
    );

    constructor() {
        POOL_FACTORY = msg.sender;
    }

    /*
     * @notice Initialize the contract
     * @param _stakingToken: staked token address
     * @param _earnedToken: earned token address
     * @param _dividendToken: reflection token address
     * @param _rewardPerBlock: reward per block (in earnedToken)
     * @param _depositFee: deposit fee
     * @param _withdrawFee: withdraw fee
     * @param _uniRouter: uniswap router address for swap tokens
     * @param _earnedToStakedPath: swap path to compound (earned -> staking path)
     * @param _reflectionToStakedPath: swap path to compound (reflection -> staking path)
     */
    function initialize(
        IERC20 _stakingToken,
        IERC20 _earnedToken,
        address _dividendToken,
        uint256 _rewardPerBlock,
        uint256 _depositFee,
        uint256 _withdrawFee,
        address _uniRouter,
        address[] memory _earnedToStakedPath,
        address[] memory _reflectionToStakedPath
    ) external {
        require(!isInitialized, "Already initialized");
        require(msg.sender == POOL_FACTORY, "Not factory");

        // Make this contract initialized
        isInitialized = true;

        stakingToken = _stakingToken;
        earnedToken = _earnedToken;
        dividendToken = _dividendToken;

        rewardPerBlock = _rewardPerBlock;

        require(_depositFee < MAX_FEE, "Invalid deposit fee");
        require(_withdrawFee < MAX_FEE, "Invalid withdraw fee");

        depositFee = _depositFee;
        withdrawFee = _withdrawFee;
        
        walletA = msg.sender;

        uint256 decimalsRewardToken = uint256(IToken(address(earnedToken)).decimals());
        require(decimalsRewardToken < 30, "Must be inferior to 30");
        PRECISION_FACTOR = uint256(10**(uint256(40).sub(decimalsRewardToken)));

        uint256 decimalsdividendToken = 18;
        if(address(dividendToken) != address(0x0)) {
            decimalsdividendToken = uint256(IToken(address(dividendToken)).decimals());
            require(decimalsdividendToken < 30, "Must be inferior to 30");
        }
        PRECISION_FACTOR_REFLECTION = uint256(10**(uint256(40).sub(decimalsdividendToken)));

        uniRouterAddress = _uniRouter;
        earnedToStakedPath = _earnedToStakedPath;
        reflectionToStakedPath = _reflectionToStakedPath;

        _resetAllowances();
    }

    /*
     * @notice Deposit staked tokens and collect reward tokens (if any)
     * @param _amount: amount to withdraw (in earnedToken)
     */
    function deposit(uint256 _amount) external nonReentrant {
        require(_amount > 0, "Amount should be greator than 0");

        UserInfo storage user = userInfo[msg.sender];

        if (hasUserLimit) {
            require(
                _amount.add(user.amount) <= poolLimitPerUser,
                "User amount above limit"
            );
        }

        _updatePool();

        if (user.amount > 0) {
            uint256 pending =
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
            if (pending > 0) {
                require(availableRewardTokens() >= pending, "Insufficient reward tokens");
                earnedToken.safeTransfer(address(msg.sender), pending);
                
                if(totalEarned > pending) {
                    totalEarned = totalEarned.sub(pending);
                } else {
                    totalEarned = 0;
                }
            }

            uint256 pendingReflection = 
                user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                    user.reflectionDebt
                );
            if (pendingReflection > 0) {
                if(address(dividendToken) == address(0x0)) {
                    payable(msg.sender).transfer(pendingReflection);
                } else {
                    IERC20(dividendToken).safeTransfer(address(msg.sender), pendingReflection);
                }
                totalReflections = totalReflections.sub(pendingReflection);
            }
        }

        
        uint256 beforeAmount = stakingToken.balanceOf(address(this));
        stakingToken.safeTransferFrom(
            address(msg.sender),
            address(this),
            _amount
        );
        uint256 afterAmount = stakingToken.balanceOf(address(this));
        
        uint256 realAmount = afterAmount.sub(beforeAmount);
        if (depositFee > 0) {
            uint256 fee = realAmount.mul(depositFee).div(10000);
            if (fee > 0) {
                stakingToken.safeTransfer(walletA, fee);
                realAmount = realAmount.sub(fee);
            }
        }
        
        user.amount = user.amount.add(realAmount);
        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
        user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);

        totalStaked = totalStaked.add(realAmount);
        
        emit Deposit(msg.sender, realAmount);
    }

    /*
     * @notice Withdraw staked tokens and collect reward tokens
     * @param _amount: amount to withdraw (in earnedToken)
     */
    function withdraw(uint256 _amount) external nonReentrant {
        require(_amount > 0, "Amount should be greator than 0");

        UserInfo storage user = userInfo[msg.sender];
        require(user.amount >= _amount, "Amount to withdraw too high");

        _updatePool();

        if(user.amount > 0) {
            uint256 pending =
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
            if (pending > 0) {
                require(availableRewardTokens() >= pending, "Insufficient reward tokens");
                earnedToken.safeTransfer(address(msg.sender), pending);
                
                if(totalEarned > pending) {
                    totalEarned = totalEarned.sub(pending);
                } else {
                    totalEarned = 0;
                }
            }

            uint256 pendingReflection = 
                user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                    user.reflectionDebt
                );
            if (pendingReflection > 0) {
                if(address(dividendToken) == address(0x0)) {
                    payable(msg.sender).transfer(pendingReflection);
                } else {
                    IERC20(dividendToken).safeTransfer(address(msg.sender), pendingReflection);
                }
                totalReflections = totalReflections.sub(pendingReflection);
            }
        }

        uint256 realAmount = _amount;

        if (user.amount < _amount) {
            realAmount = user.amount;
        }

        user.amount = user.amount.sub(realAmount);
        totalStaked = totalStaked.sub(realAmount);

        if (withdrawFee > 0) {
            uint256 fee = realAmount.mul(withdrawFee).div(10000);

            uint256 _walletAAmt = fee.mul(walletARate).div(10000);
            if (_walletAAmt > 0) {
                stakingToken.safeTransfer(walletA, _walletAAmt);
                realAmount = realAmount.sub(_walletAAmt);
            }
            uint256 _buybackAmt = fee.mul(buyBackRate).div(10000);
            if (_buybackAmt > 0) {
                stakingToken.safeTransfer(buyBackAddress, _buybackAmt);
                realAmount = realAmount.sub(_buybackAmt);
            }
        }

        stakingToken.safeTransfer(address(msg.sender), realAmount);

        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
        user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);

        emit Withdraw(msg.sender, _amount);
    }

    function claimReward() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pending =
            user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                user.rewardDebt
            );
        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            earnedToken.safeTransfer(address(msg.sender), pending);
            
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }
        }
        
        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
    }

    function claimDividend() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pendingReflection = 
            user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                user.reflectionDebt
            );
        if (pendingReflection > 0) {
            if(address(dividendToken) == address(0x0)) {
                payable(msg.sender).transfer(pendingReflection);
            } else {
                IERC20(dividendToken).safeTransfer(address(msg.sender), pendingReflection);
            }
            totalReflections = totalReflections.sub(pendingReflection);
        }
        
        user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
    }

    function compoundReward() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pending =
            user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                user.rewardDebt
            );
        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }
            
            if(address(stakingToken) != address(earnedToken)) {
                uint256 beforeAmount = stakingToken.balanceOf(address(this));
                _safeSwap(pending, earnedToStakedPath, address(this));
                uint256 afterAmount = stakingToken.balanceOf(address(this));
                pending = afterAmount.sub(beforeAmount);
            }

            if (hasUserLimit) {
                require(
                    pending.add(user.amount) <= poolLimitPerUser,
                    "User amount above limit"
                );
            }

            totalStaked = totalStaked.add(pending);
            user.amount = user.amount.add(pending);
            user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                (user.amount.sub(pending)).mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(user.reflectionDebt)
            );

            emit Deposit(msg.sender, pending);
        }
        
        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
    }

    function compoundDividend() external payable nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _transferPerformanceFee();
        _updatePool();

        if (user.amount == 0) return;

        uint256 pending = 
            user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                user.reflectionDebt
            );
        if (pending > 0) {
            totalReflections = totalReflections.sub(pending);

            if(address(stakingToken) != address(dividendToken)) {
                if(address(dividendToken) == address(0x0)) {
                    address wethAddress = IUniRouter02(uniRouterAddress).WETH();
                    IWETH(wethAddress).deposit{ value: pending }();
                }

                uint256 beforeAmount = stakingToken.balanceOf(address(this));
                _safeSwap(pending, reflectionToStakedPath, address(this));
                uint256 afterAmount = stakingToken.balanceOf(address(this));

                pending = afterAmount.sub(beforeAmount);
            }

            if (hasUserLimit) {
                require(
                    pending.add(user.amount) <= poolLimitPerUser,
                    "User amount above limit"
                );
            }

            totalStaked = totalStaked.add(pending);
            user.amount = user.amount.add(pending);
            user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                (user.amount.sub(pending)).mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt)
            );

            emit Deposit(msg.sender, pending);
        }
        
        user.reflectionDebt = user.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
    }

    function _transferPerformanceFee() internal {
        require(msg.value >= performanceFee, 'should pay small gas to compound or harvest');

        payable(buyBackWallet).transfer(performanceFee);
        if(msg.value > performanceFee) {
            payable(msg.sender).transfer(msg.value.sub(performanceFee));
        }
    }

    /*
     * @notice Withdraw staked tokens without caring about rewards
     * @dev Needs to be for emergency.
     */
    function emergencyWithdraw() external nonReentrant {
        UserInfo storage user = userInfo[msg.sender];
        uint256 amountToTransfer = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;
        user.reflectionDebt = 0;

        if (amountToTransfer > 0) {
            stakingToken.safeTransfer(address(msg.sender), amountToTransfer);
            totalStaked = totalStaked.sub(amountToTransfer);
        }

        emit EmergencyWithdraw(msg.sender, user.amount);
    }

    /**
     * @notice Available amount of reward token
     */
    function availableRewardTokens() public view returns (uint256) {
        if(address(earnedToken) == address(dividendToken)) return totalEarned;

        uint256 _amount = earnedToken.balanceOf(address(this));
        if (address(earnedToken) == address(stakingToken)) {
            if (_amount < totalStaked) return 0;
            return _amount.sub(totalStaked);
        }

        return _amount;
    }

    /**
     * @notice Available amount of reflection token
     */
    function availabledividendTokens() public view returns (uint256) {
        if(address(dividendToken) == address(0x0)) {
            return address(this).balance;
        }

        uint256 _amount = IERC20(dividendToken).balanceOf(address(this));
        
        if(address(dividendToken) == address(earnedToken)) {
            if(_amount < totalEarned) return 0;
            _amount = _amount.sub(totalEarned);
        }

        if(address(dividendToken) == address(stakingToken)) {
            if(_amount < totalStaked) return 0;
            _amount = _amount.sub(totalStaked);
        }

        return _amount;
    }

    /*
     * @notice View function to see pending reward on frontend.
     * @param _user: user address
     * @return Pending reward for a given user
     */
    function pendingReward(address _user) external view returns (uint256) {
        UserInfo storage user = userInfo[_user];
        
        if (block.number > lastRewardBlock && totalStaked != 0 && lastRewardBlock > 0) {
            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
            uint256 cakeReward = multiplier.mul(rewardPerBlock);
            uint256 adjustedTokenPerShare =
                accTokenPerShare.add(
                    cakeReward.mul(PRECISION_FACTOR).div(totalStaked)
                );
            return
                user
                    .amount
                    .mul(adjustedTokenPerShare)
                    .div(PRECISION_FACTOR)
                    .sub(user.rewardDebt);
        } else {
            return
                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(
                    user.rewardDebt
                );
        }
    }

    function pendingDividends(address _user) external view returns (uint256) {
        UserInfo storage user = userInfo[_user];

        if(totalStaked == 0) return 0;
        
        uint256 reflectionAmount = availabledividendTokens();
        uint256 sTokenBal = stakingToken.balanceOf(address(this));

        uint256 adjustedReflectionPerShare = accDividendPerShare.add(
                reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)
            );
        
        uint256 pendingReflection = 
                user.amount.mul(adjustedReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                    user.reflectionDebt
                );
        
        return pendingReflection;
    }

    /************************
    ** Admin Methods
    *************************/
    function harvest() external onlyOwner {        
        _updatePool();

        uint256 _amount = stakingToken.balanceOf(address(this));
        _amount = _amount.sub(totalStaked);

        uint256 pendingReflection = _amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(reflectionDebt);
        if(pendingReflection > 0) {
            if(address(dividendToken) == address(0x0)) {
                payable(walletA).transfer(pendingReflection);
            } else {
                IERC20(dividendToken).safeTransfer( walletA, pendingReflection);
            }
            totalReflections = totalReflections.sub(pendingReflection);
        }
        
        reflectionDebt = _amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
    }

    /*
     * @notice Deposit reward token
     * @dev Only call by owner. Needs to be for deposit of reward token when reflection token is same with reward token.
     */
    function depositRewards(uint _amount) external nonReentrant {
        require(_amount > 0);

        uint256 beforeAmt = earnedToken.balanceOf(address(this));
        earnedToken.safeTransferFrom(msg.sender, address(this), _amount);
        uint256 afterAmt = earnedToken.balanceOf(address(this));

        totalEarned = totalEarned.add(afterAmt).sub(beforeAmt);
    }

    /*
     * @notice Withdraw reward token
     * @dev Only callable by owner. Needs to be for emergency.
     */
    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {
        require( block.number > bonusEndBlock, "Pool is running");
        if(address(earnedToken) != address(dividendToken)) {
            require(availableRewardTokens() >= _amount, "Insufficient reward tokens");
        }

        earnedToken.safeTransfer(address(msg.sender), _amount);
        
        if (totalEarned > 0) {
            if (_amount > totalEarned) {
                totalEarned = 0;
            } else {
                totalEarned = totalEarned.sub(_amount);
            }
        }
    }

    /**
     * @notice It allows the admin to recover wrong tokens sent to the contract
     * @param _tokenAddress: the address of the token to withdraw
     * @param _tokenAmount: the number of tokens to withdraw
     * @dev This function is only callable by admin.
     */
    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)
        external
        onlyOwner
    {
        require(
            _tokenAddress != address(earnedToken),
            "Cannot be reward token"
        );

        if(_tokenAddress == address(stakingToken)) {
            uint256 tokenBal = stakingToken.balanceOf(address(this));
            require(_tokenAmount <= tokenBal.sub(totalStaked), "Insufficient balance");
        }

        if(_tokenAddress == address(0x0)) {
            payable(msg.sender).transfer(_tokenAmount);
        } else {
            IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);
        }

        emit AdminTokenRecovered(_tokenAddress, _tokenAmount);
    }

    function startReward() external onlyOwner {
        require(startBlock == 0, "Pool was already started");

        startBlock = block.number.add(100);
        bonusEndBlock = startBlock.add(duration * 28800);
        lastRewardBlock = startBlock;
        
        emit NewStartAndEndBlocks(startBlock, bonusEndBlock);
    }

    function stopReward() external onlyOwner {
        bonusEndBlock = block.number;
    }

    /*
     * @notice Update pool limit per user
     * @dev Only callable by owner.
     * @param _hasUserLimit: whether the limit remains forced
     * @param _poolLimitPerUser: new pool limit per user
     */
    function updatePoolLimitPerUser( bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {
        require(hasUserLimit, "Must be set");
        if (_hasUserLimit) {
            require(
                _poolLimitPerUser > poolLimitPerUser,
                "New limit must be higher"
            );
            poolLimitPerUser = _poolLimitPerUser;
        } else {
            hasUserLimit = _hasUserLimit;
            poolLimitPerUser = 0;
        }
        emit NewPoolLimit(poolLimitPerUser);
    }

    /*
     * @notice Update reward per block
     * @dev Only callable by owner.
     * @param _rewardPerBlock: the reward per block
     */
    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {
        // require(block.number < startBlock, "Pool was already started");

        rewardPerBlock = _rewardPerBlock;
        emit NewRewardPerBlock(_rewardPerBlock);
    }


    function setServiceInfo(address _buyBackWallet, uint256 _fee) external {
        require(msg.sender == buyBackWallet, "setServiceInfo: FORBIDDEN");
        require(_buyBackWallet != address(0x0) || _buyBackWallet != buyBackWallet, "Invalid address");

        buyBackWallet = _buyBackWallet;
        performanceFee = _fee;

        emit ServiceInfoUpadted(_buyBackWallet, _fee);
    }

    function updateWalletA(address _walletA) external onlyOwner {
        require(_walletA != address(0x0) || _walletA != walletA, "Invalid address");

        walletA = _walletA;
        emit WalletAUpdated(_walletA);
    }

    function updateBuybackAddr(address _addr) external onlyOwner {
        require(_addr != address(0x0) || _addr != buyBackAddress, "Invalid address");

        buyBackAddress = _addr;
        emit BuybackAddressUpadted(_addr);
    }

    function setDuration(uint256 _duration) external onlyOwner {
        require(startBlock == 0, "Pool was already started");
        require(_duration >= 30, "lower limit reached");

        duration = _duration;
        emit DurationUpdated(_duration);
    }

    function setSettings(
        uint256 _depositFee,
        uint256 _withdrawFee,
        uint256 _walletARate,
        uint256 _slippageFactor,
        address _uniRouter,
        address[] memory _earnedToStakedPath,
        address[] memory _reflectionToStakedPath
    ) external onlyOwner {
        require(_depositFee < MAX_FEE, "Invalid deposit fee");
        require(_withdrawFee < MAX_FEE, "Invalid withdraw fee");
        require(_slippageFactor <= slippageFactorUL, "_slippageFactor too high");

        depositFee = _depositFee;
        withdrawFee = _withdrawFee;
        walletARate = _walletARate;
        buyBackRate = uint256(10000).sub(walletARate);

        slippageFactor = _slippageFactor;
        uniRouterAddress = _uniRouter;
        reflectionToStakedPath = _reflectionToStakedPath;
        earnedToStakedPath = _earnedToStakedPath;

        emit SetSettings(_depositFee, _withdrawFee, _walletARate, _slippageFactor, _uniRouter, _earnedToStakedPath, _reflectionToStakedPath);
    }

    function resetAllowances() external onlyOwner {
        _resetAllowances();
    }


    /************************
    ** Internal Methods
    *************************/
    /*
     * @notice Update reward variables of the given pool to be up-to-date.
     */
    function _updatePool() internal {
        // calc reflection rate
        if(totalStaked > 0) {
            uint256 reflectionAmount = availabledividendTokens();
            uint256 sTokenBal = stakingToken.balanceOf(address(this));

            accDividendPerShare = accDividendPerShare.add(
                    reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)
                );

            totalReflections = reflectionAmount;
        }

        if (block.number <= lastRewardBlock || lastRewardBlock == 0) {
            return;
        }

        if (totalStaked == 0) {
            lastRewardBlock = block.number;
            return;
        }

        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
        uint256 _reward = multiplier.mul(rewardPerBlock);
        accTokenPerShare = accTokenPerShare.add(
            _reward.mul(PRECISION_FACTOR).div(totalStaked)
        );
        lastRewardBlock = block.number;
    }

    /*
     * @notice Return reward multiplier over the given _from to _to block.
     * @param _from: block to start
     * @param _to: block to finish
     */
    function _getMultiplier(uint256 _from, uint256 _to)
        internal
        view
        returns (uint256)
    {
        if (_to <= bonusEndBlock) {
            return _to.sub(_from);
        } else if (_from >= bonusEndBlock) {
            return 0;
        } else {
            return bonusEndBlock.sub(_from);
        }
    }

    function _safeSwap(
        uint256 _amountIn,
        address[] memory _path,
        address _to
    ) internal {
        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);
        uint256 amountOut = amounts[amounts.length.sub(1)];

        IUniRouter02(uniRouterAddress).swapExactTokensForTokens(
            _amountIn,
            amountOut.mul(slippageFactor).div(1000),
            _path,
            _to,
            block.timestamp.add(600)
        );
    }

    function _resetAllowances() internal {
        earnedToken.safeApprove(uniRouterAddress, uint256(0));
        earnedToken.safeIncreaseAllowance(
            uniRouterAddress,
            type(uint256).max
        );

        if(address(dividendToken) == address(0x0)) {
            address wethAddress = IUniRouter02(uniRouterAddress).WETH();
            IERC20(wethAddress).safeApprove(uniRouterAddress, uint256(0));
            IERC20(wethAddress).safeIncreaseAllowance(
                uniRouterAddress,
                type(uint256).max
            );
        } else {
            IERC20(dividendToken).safeApprove(uniRouterAddress, uint256(0));
            IERC20(dividendToken).safeIncreaseAllowance(
                uniRouterAddress,
                type(uint256).max
            );
        }        
    }

    receive() external payable {}
}

// File: contracts/BrewlabsLockup.sol
 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "./libs/IUniRouter02.sol";
import "./libs/IWETH.sol";
interface IToken {
     /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);
}

contract BrewlabsLockup is Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    // The address of the smart chef factory
    address public POOL_FACTORY;

    // Whether it is initialized
    bool public isInitialized;
    uint256 public duration = 365; // 365 days

    // Whether a limit is set for users
    bool public hasUserLimit;
    // The pool limit (0 if none)
    uint256 public poolLimitPerUser;


    // The block number when staking starts.
    uint256 public startBlock;
    // The block number when staking ends.
    uint256 public bonusEndBlock;


    // swap router and path, slipPage
    uint256 public slippageFactor = 950; // 5% default slippage tolerance
    uint256 public constant slippageFactorUL = 995;

    address public uniRouterAddress;
    address[] public reflectionToStakedPath;
    address[] public earnedToStakedPath;

    address public walletA;
    address public buyBackWallet = 0xE1f1dd010BBC2860F81c8F90Ea4E38dB949BB16F;
    uint256 public performanceFee = 0.0005 ether;

    // The precision factor
    uint256 public PRECISION_FACTOR;
    uint256 public PRECISION_FACTOR_REFLECTION;

    // The staked token
    IERC20 public stakingToken;
    // The earned token
    IERC20 public earnedToken;
    // The dividend token of staking token
    IERC20 public dividendToken;

    // Accrued token per share
    uint256 public accDividendPerShare;

    uint256 public totalStaked;

    uint256 private totalEarned;
    uint256 private totalReflections;
    uint256 private reflectionDebt;

    struct Lockup {
        uint8 stakeType;
        uint256 duration;
        uint256 depositFee;
        uint256 withdrawFee;
        uint256 rate;
        uint256 accTokenPerShare;
        uint256 lastRewardBlock;
        uint256 totalStaked;
    }

    struct UserInfo {
        uint256 amount; // How many staked tokens the user has provided
        uint256 locked;
        uint256 available;
    }

    struct Stake {
        uint8   stakeType;
        uint256 amount;     // amount to stake
        uint256 duration;   // the lockup duration of the stake
        uint256 end;        // when does the staking period end
        uint256 rewardDebt; // Reward debt
        uint256 reflectionDebt; // Reflection debt
    }
    uint256 constant MAX_STAKES = 256;

    Lockup[] public lockups;
    mapping(address => Stake[]) public userStakes;
    mapping(address => UserInfo) public userStaked;

    event Deposit(address indexed user, uint256 stakeType, uint256 amount);
    event Withdraw(address indexed user, uint256 stakeType, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 amount);
    event AdminTokenRecovered(address tokenRecovered, uint256 amount);

    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);
    event LockupUpdated(uint8 _type, uint256 _duration, uint256 _fee0, uint256 _fee1, uint256 _rate);
    event NewPoolLimit(uint256 poolLimitPerUser);
    event RewardsStop(uint256 blockNumber);

    event ServiceInfoUpadted(address _addr, uint256 _fee);
    event DurationUpdated(uint256 _duration);

    event SetSettings(
        uint256 _slippageFactor,
        address _uniRouter,
        address[] _path0,
        address[] _path1,
        address _walletA
    );

    constructor() {
        POOL_FACTORY = msg.sender;
    }

    /*
     * @notice Initialize the contract
     * @param _stakingToken: staked token address
     * @param _earnedToken: earned token address
     * @param _dividendToken: reflection token address
     * @param _uniRouter: uniswap router address for swap tokens
     * @param _earnedToStakedPath: swap path to compound (earned -> staking path)
     * @param _reflectionToStakedPath: swap path to compound (reflection -> staking path)
     */
    function initialize(
        IERC20 _stakingToken,
        IERC20 _earnedToken,
        IERC20 _dividendToken,
        address _uniRouter,
        address[] memory _earnedToStakedPath,
        address[] memory _reflectionToStakedPath
    ) external {
        require(!isInitialized, "Already initialized");
        require(msg.sender == POOL_FACTORY, "Not factory");

        // Make this contract initialized
        isInitialized = true;

        stakingToken = _stakingToken;
        earnedToken = _earnedToken;
        dividendToken = _dividendToken;

        walletA = msg.sender;

        uint256 decimalsRewardToken = uint256(IToken(address(earnedToken)).decimals());
        require(decimalsRewardToken < 30, "Must be inferior to 30");
        PRECISION_FACTOR = uint256(10**(uint256(40).sub(decimalsRewardToken)));

        uint256 decimalsdividendToken = 18;
        if(address(dividendToken) != address(0x0)) {
            decimalsdividendToken = uint256(IToken(address(dividendToken)).decimals());
            require(decimalsdividendToken < 30, "Must be inferior to 30");
        }
        PRECISION_FACTOR_REFLECTION = uint256(10**(uint256(40).sub(decimalsdividendToken)));

        uniRouterAddress = _uniRouter;
        earnedToStakedPath = _earnedToStakedPath;
        reflectionToStakedPath = _reflectionToStakedPath;

        lockups.push(Lockup(0, 30, 0, 200, 951293759, 0, 0, 0)); // 1% liquidity
        lockups.push(Lockup(1, 90, 0, 100, 1426940638, 0, 0, 0)); // 1.5% liquidity
        lockups.push(Lockup(2, 180, 0, 0, 1902587518, 0, 0, 0)); // 2% liquidity

        _resetAllowances();
    }

    /*
     * @notice Deposit staked tokens and collect reward tokens (if any)
     * @param _amount: amount to withdraw (in earnedToken)
     */
    function deposit(uint256 _amount, uint8 _stakeType) external nonReentrant {
        require(_amount > 0, "Amount should be greator than 0");
        require(_stakeType < lockups.length, "Invalid stake type");

        _updatePool(_stakeType);

        UserInfo storage user = userStaked[msg.sender];
        Stake[] storage stakes = userStakes[msg.sender];
        Lockup storage lockup = lockups[_stakeType];

        uint256 pending = 0;
        uint256 pendingCompound = 0;
        uint256 pendingReflection = 0;
        uint256 compounded = 0;
        for(uint256 j = 0; j < stakes.length; j++) {
            Stake storage stake = stakes[j];
            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;

            pendingReflection = pendingReflection.add(
                stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt)
            );

            uint256 _pending = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt);
            if(stake.end > block.timestamp) {
                pendingCompound = pendingCompound.add(_pending);

                if(address(stakingToken) != address(earnedToken) && _pending > 0) {
                    uint256 _beforeAmount = stakingToken.balanceOf(address(this));
                    _safeSwap(_pending, earnedToStakedPath, address(this));
                    uint256 _afterAmount = stakingToken.balanceOf(address(this));
                    _pending = _afterAmount.sub(_beforeAmount);
                }
                compounded = compounded.add(_pending);
                stake.amount = stake.amount.add(_pending);
            } else {
                pending = pending.add(_pending);
            }
            stake.rewardDebt = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR);
            stake.reflectionDebt = stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
        }

        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            earnedToken.safeTransfer(address(msg.sender), pending);
            
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }
        }

        if (pendingCompound > 0) {
            require(availableRewardTokens() >= pendingCompound, "Insufficient reward tokens");
            
            if(totalEarned > pendingCompound) {
                totalEarned = totalEarned.sub(pendingCompound);
            } else {
                totalEarned = 0;
            }
        }

        if (pendingReflection > 0) {
            if(address(dividendToken) == address(0x0)) {
                payable(msg.sender).transfer(pendingReflection);
            } else {
                dividendToken.safeTransfer(address(msg.sender), pendingReflection);
            }
            totalReflections = totalReflections.sub(pendingReflection);
        }


        uint256 beforeAmount = stakingToken.balanceOf(address(this));
        stakingToken.safeTransferFrom(
            address(msg.sender),
            address(this),
            _amount
        );
        uint256 afterAmount = stakingToken.balanceOf(address(this));        
        uint256 realAmount = afterAmount.sub(beforeAmount);

        if (hasUserLimit) {
            require(
                realAmount.add(user.amount) <= poolLimitPerUser,
                "User amount above limit"
            );
        }
        if (lockup.depositFee > 0) {
            uint256 fee = realAmount.mul(lockup.depositFee).div(10000);
            if (fee > 0) {
                stakingToken.safeTransfer(walletA, fee);
                realAmount = realAmount.sub(fee);
            }
        }
        
        _addStake(_stakeType, msg.sender, lockup.duration, realAmount);

        user.amount = user.amount.add(realAmount).add(compounded);
        lockup.totalStaked = lockup.totalStaked.add(realAmount).add(compounded);
        totalStaked = totalStaked.add(realAmount).add(compounded);

        emit Deposit(msg.sender, _stakeType, realAmount.add(compounded));
    }

    function _addStake(uint8 _stakeType, address _account, uint256 _duration, uint256 _amount) internal {
        Stake[] storage stakes = userStakes[_account];

        uint256 end = block.timestamp.add(_duration.mul(1 days));
        uint256 i = stakes.length;
        require(i < MAX_STAKES, "Max stakes");

        stakes.push(); // grow the array
        // find the spot where we can insert the current stake
        // this should make an increasing list sorted by end
        while (i != 0 && stakes[i - 1].end > end) {
            // shift it back one
            stakes[i] = stakes[i - 1];
            i -= 1;
        }
        
        Lockup storage lockup = lockups[_stakeType];

        // insert the stake
        Stake storage newStake = stakes[i];
        newStake.stakeType = _stakeType;
        newStake.duration = _duration;
        newStake.end = end;
        newStake.amount = _amount;
        newStake.rewardDebt = newStake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR);
        newStake.reflectionDebt = newStake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
    }

    /*
     * @notice Withdraw staked tokens and collect reward tokens
     * @param _amount: amount to withdraw (in earnedToken)
     */
    function withdraw(uint256 _amount, uint8 _stakeType) external nonReentrant {
        require(_amount > 0, "Amount should be greator than 0");
        require(_stakeType < lockups.length, "Invalid stake type");

        _updatePool(_stakeType);

        UserInfo storage user = userStaked[msg.sender];
        Stake[] storage stakes = userStakes[msg.sender];
        Lockup storage lockup = lockups[_stakeType];
        
        uint256 pending = 0;
        uint256 pendingCompound = 0;
        uint256 pendingReflection = 0;
        uint256 compounded = 0;
        uint256 remained = _amount;
        for(uint256 j = 0; j < stakes.length; j++) {
            Stake storage stake = stakes[j];
            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;
            if(remained == 0) break;

            uint256 _pending = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt);
            uint256 _pendingReflection = stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt);
            pendingReflection = pendingReflection.add(_pendingReflection);

            if(stake.end > block.timestamp) {
                pendingCompound = pendingCompound.add(_pending);

                if(address(stakingToken) != address(earnedToken) && _pending > 0) {
                    uint256 _beforeAmount = stakingToken.balanceOf(address(this));
                    _safeSwap(_pending, earnedToStakedPath, address(this));
                    uint256 _afterAmount = stakingToken.balanceOf(address(this));
                    _pending = _afterAmount.sub(_beforeAmount);
                }
                compounded = compounded.add(_pending);
                stake.amount = stake.amount.add(_pending);
            } else {
                pending = pending.add(_pending);
                if(stake.amount > remained) {
                    stake.amount = stake.amount.sub(remained);
                    remained = 0;
                } else {
                    remained = remained.sub(stake.amount);
                    stake.amount = 0;
                }
            }
            stake.rewardDebt = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR);
            stake.reflectionDebt = stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
        }

        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            earnedToken.safeTransfer(address(msg.sender), pending);
            
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }
        }

        if (pendingCompound > 0) {
            require(availableRewardTokens() >= pendingCompound, "Insufficient reward tokens");
            
            if(totalEarned > pendingCompound) {
                totalEarned = totalEarned.sub(pendingCompound);
            } else {
                totalEarned = 0;
            }
            
            emit Deposit(msg.sender, _stakeType, compounded);
        }

        if (pendingReflection > 0) {
            if(address(dividendToken) == address(0x0)) {
                payable(msg.sender).transfer(pendingReflection);
            } else {
                dividendToken.safeTransfer(address(msg.sender), pendingReflection);
            }
            totalReflections = totalReflections.sub(pendingReflection);
        }

        uint256 realAmount = _amount.sub(remained);
        user.amount = user.amount.sub(realAmount).add(pendingCompound);
        lockup.totalStaked = lockup.totalStaked.sub(realAmount).add(pendingCompound);
        totalStaked = totalStaked.sub(realAmount).add(pendingCompound);

        if(realAmount > 0) {
            if (lockup.withdrawFee > 0) {
                uint256 fee = realAmount.mul(lockup.withdrawFee).div(10000);
                stakingToken.safeTransfer(walletA, fee);
                realAmount = realAmount.sub(fee);
            }

            stakingToken.safeTransfer(address(msg.sender), realAmount);
        }

        emit Withdraw(msg.sender, _stakeType, realAmount);
    }

    function claimReward(uint8 _stakeType) external payable nonReentrant {
        if(_stakeType >= lockups.length) return;
        if(startBlock == 0) return;

        _transferPerformanceFee();
        _updatePool(_stakeType);

        UserInfo storage user = userStaked[msg.sender];
        Stake[] storage stakes = userStakes[msg.sender];
        Lockup storage lockup = lockups[_stakeType];

        uint256 pending = 0;
        uint256 pendingCompound = 0;
        uint256 compounded = 0;
        for(uint256 j = 0; j < stakes.length; j++) {
            Stake storage stake = stakes[j];
            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;

            uint256 _pending = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt);

            if(stake.end > block.timestamp) {
                pendingCompound = pendingCompound.add(_pending);

                if(address(stakingToken) != address(earnedToken) && _pending > 0) {
                    uint256 _beforeAmount = stakingToken.balanceOf(address(this));
                    _safeSwap(_pending, earnedToStakedPath, address(this));
                    uint256 _afterAmount = stakingToken.balanceOf(address(this));
                    _pending = _afterAmount.sub(_beforeAmount);
                }
                compounded = compounded.add(_pending);
                stake.amount = stake.amount.add(_pending);
                stake.reflectionDebt = stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                    (stake.amount.sub(_pending)).mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt)
                );
            } else {
                pending = pending.add(_pending);
            }
            stake.rewardDebt = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR);
        }

        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            earnedToken.safeTransfer(address(msg.sender), pending);
            
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }
        }

        if (pendingCompound > 0) {
            require(availableRewardTokens() >= pendingCompound, "Insufficient reward tokens");
            
            if(totalEarned > pendingCompound) {
                totalEarned = totalEarned.sub(pendingCompound);
            } else {
                totalEarned = 0;
            }

            user.amount = user.amount.add(compounded);
            lockup.totalStaked = lockup.totalStaked.add(compounded);
            totalStaked = totalStaked.add(compounded);

            emit Deposit(msg.sender, _stakeType, compounded);
        }
    }

    function claimDividend(uint8 _stakeType) external payable nonReentrant {
        if(_stakeType >= lockups.length) return;
        if(startBlock == 0) return;

        _transferPerformanceFee();
        _updatePool(_stakeType);

        Stake[] storage stakes = userStakes[msg.sender];

        uint256 pendingReflection = 0;
        for(uint256 j = 0; j < stakes.length; j++) {
            Stake storage stake = stakes[j];
            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;

            uint256 _pendingReflection = stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt);
            pendingReflection = pendingReflection.add(_pendingReflection);

            stake.reflectionDebt = stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
        }

        if (pendingReflection > 0) {
            if(address(dividendToken) == address(0x0)) {
                payable(msg.sender).transfer(pendingReflection);
            } else {
                dividendToken.safeTransfer(address(msg.sender), pendingReflection);
            }
            totalReflections = totalReflections.sub(pendingReflection);
        }
    }

    function compoundReward(uint8 _stakeType) external payable nonReentrant {
        if(_stakeType >= lockups.length) return;
        if(startBlock == 0) return;

        _transferPerformanceFee();
        _updatePool(_stakeType);

        UserInfo storage user = userStaked[msg.sender];
        Stake[] storage stakes = userStakes[msg.sender];
        Lockup storage lockup = lockups[_stakeType];

        uint256 pending = 0;
        uint256 pendingCompound = 0;
        for(uint256 j = 0; j < stakes.length; j++) {
            Stake storage stake = stakes[j];
            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;

            uint256 _pending = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt);
            pending = pending.add(_pending);

            if(address(stakingToken) != address(earnedToken) && _pending > 0) {
                uint256 _beforeAmount = stakingToken.balanceOf(address(this));
                _safeSwap(_pending, earnedToStakedPath, address(this));
                uint256 _afterAmount = stakingToken.balanceOf(address(this));
                _pending = _afterAmount.sub(_beforeAmount);
            }
            pendingCompound = pendingCompound.add(_pending);

            stake.amount = stake.amount.add(_pending);
            stake.rewardDebt = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR);
            stake.reflectionDebt = stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                (stake.amount.sub(_pending)).mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt)
            );
        }

        if (pending > 0) {
            require(availableRewardTokens() >= pending, "Insufficient reward tokens");
            
            if(totalEarned > pending) {
                totalEarned = totalEarned.sub(pending);
            } else {
                totalEarned = 0;
            }

            user.amount = user.amount.add(pendingCompound);
            lockup.totalStaked = lockup.totalStaked.add(pendingCompound);
            totalStaked = totalStaked.add(pendingCompound);

            emit Deposit(msg.sender, _stakeType, pendingCompound);
        }
    }

    function compoundDividend(uint8 _stakeType) external payable nonReentrant {
        if(_stakeType >= lockups.length) return;
        if(startBlock == 0) return;

        _transferPerformanceFee();
        _updatePool(_stakeType);

        UserInfo storage user = userStaked[msg.sender];
        Stake[] storage stakes = userStakes[msg.sender];
        Lockup storage lockup = lockups[_stakeType];

        uint256 pendingReflection = 0;
        uint256 pendingCompound = 0;
        for(uint256 j = 0; j < stakes.length; j++) {
            Stake storage stake = stakes[j];
            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;

            uint256 _pending = stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(stake.reflectionDebt);
            pendingReflection = pendingReflection.add(_pending);

            if(address(stakingToken) != address(dividendToken) && _pending > 0) {
                if(address(dividendToken) == address(0x0)) {
                    address wethAddress = IUniRouter02(uniRouterAddress).WETH();
                    IWETH(wethAddress).deposit{ value: _pending }();
                }

                uint256 _beforeAmount = stakingToken.balanceOf(address(this));
                _safeSwap(_pending, reflectionToStakedPath, address(this));
                uint256 _afterAmount = stakingToken.balanceOf(address(this));

                _pending = _afterAmount.sub(_beforeAmount);
            }
            
            pendingCompound = pendingCompound.add(_pending);
            stake.amount = stake.amount.add(_pending);
            stake.rewardDebt = stake.amount.mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(
                (stake.amount.sub(_pending)).mul(lockup.accTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt)
            );
            stake.reflectionDebt = stake.amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
        }

        totalReflections = totalReflections.sub(pendingReflection);
        if (pendingReflection > 0) {
            user.amount = user.amount.add(pendingCompound);
            lockup.totalStaked = lockup.totalStaked.add(pendingCompound);
            totalStaked = totalStaked.add(pendingCompound);

            emit Deposit(msg.sender, _stakeType, pendingCompound);
        }
    }

    function _transferPerformanceFee() internal {
        require(msg.value >= performanceFee, 'should pay small gas to compound or harvest');

        payable(buyBackWallet).transfer(performanceFee);
        if(msg.value > performanceFee) {
            payable(msg.sender).transfer(msg.value.sub(performanceFee));
        }
    }

    /*
     * @notice Withdraw staked tokens without caring about rewards
     * @dev Needs to be for emergency.
     */
    function emergencyWithdraw(uint8 _stakeType) external nonReentrant {
        if(_stakeType >= lockups.length) return;

        UserInfo storage user = userStaked[msg.sender];
        Stake[] storage stakes = userStakes[msg.sender];
        Lockup storage lockup = lockups[_stakeType];

        uint256 amountToTransfer = 0;
        for(uint256 j = 0; j < stakes.length; j++) {
            Stake storage stake = stakes[j];
            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;

            amountToTransfer = amountToTransfer.add(stake.amount);

            stake.amount = 0;
            stake.rewardDebt = 0;
            stake.reflectionDebt = 0;
        }

        if (amountToTransfer > 0) {
            stakingToken.safeTransfer(address(msg.sender), amountToTransfer);

            user.amount = user.amount.sub(amountToTransfer);
            lockup.totalStaked = lockup.totalStaked.sub(amountToTransfer);
            totalStaked = totalStaked.sub(amountToTransfer);
        }

        emit EmergencyWithdraw(msg.sender, amountToTransfer);
    }

    function rewardPerBlock(uint8 _stakeType) public view returns (uint256) {
        if(_stakeType >= lockups.length) return 0;

        return lockups[_stakeType].rate;
    }

    /**
     * @notice Available amount of reward token
     */
    function availableRewardTokens() public view returns (uint256) {
        if(address(earnedToken) == address(dividendToken)) return totalEarned;

        uint256 _amount = earnedToken.balanceOf(address(this));
        if (address(earnedToken) == address(stakingToken)) {
            if (_amount < totalStaked) return 0;
            return _amount.sub(totalStaked);
        }

        return _amount;
    }

    /**
     * @notice Available amount of reflection token
     */
    function availabledividendTokens() public view returns (uint256) {
        if(address(dividendToken) == address(0x0)) {
            return address(this).balance;
        }

        uint256 _amount = dividendToken.balanceOf(address(this));
        
        if(address(dividendToken) == address(earnedToken)) {
            if(_amount < totalEarned) return 0;
            _amount = _amount.sub(totalEarned);
        }

        if(address(dividendToken) == address(stakingToken)) {
            if(_amount < totalStaked) return 0;
            _amount = _amount.sub(totalStaked);
        }

        return _amount;
    }

    function userInfo(uint8 _stakeType, address _account) public view returns (uint256 amount, uint256 available, uint256 locked) {
        Stake[] storage stakes = userStakes[_account];
        
        for(uint256 i = 0; i < stakes.length; i++) {
            Stake storage stake = stakes[i];

            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;
            
            amount = amount.add(stake.amount);
            if(block.timestamp > stake.end) {
                available = available.add(stake.amount);
            } else {
                locked = locked.add(stake.amount);
            }
        }
    }

    /*
     * @notice View function to see pending reward on frontend.
     * @param _user: user address
     * @return Pending reward for a given user
     */
    function pendingReward(address _account, uint8 _stakeType) external view returns (uint256) {
        if(_stakeType >= lockups.length) return 0;
        if(startBlock == 0) return 0;

        Stake[] storage stakes = userStakes[_account];
        Lockup storage lockup = lockups[_stakeType];

        if(lockup.totalStaked == 0) return 0;
        
        uint256 adjustedTokenPerShare = lockup.accTokenPerShare;
        if (block.number > lockup.lastRewardBlock && lockup.totalStaked != 0 && lockup.lastRewardBlock > 0) {
            uint256 multiplier = _getMultiplier(lockup.lastRewardBlock, block.number);
            uint256 reward = multiplier.mul(lockup.rate);
            adjustedTokenPerShare =
                lockup.accTokenPerShare.add(
                    reward.mul(PRECISION_FACTOR).div(lockup.totalStaked)
                );
        }

        uint256 pending = 0;
        for(uint256 i = 0; i < stakes.length; i++) {
            Stake storage stake = stakes[i];
            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;

            pending = pending.add(
                stake.amount.mul(adjustedTokenPerShare).div(PRECISION_FACTOR).sub(stake.rewardDebt)
            );
        }
        return pending;
    }

    function pendingDividends(address _account, uint8 _stakeType) external view returns (uint256) {
        if(_stakeType >= lockups.length) return 0;
        if(startBlock == 0) return 0;

        Stake[] storage stakes = userStakes[_account];
        
        if(totalStaked == 0) return 0;
        
        
        uint256 reflectionAmount = availabledividendTokens();
        uint256 sTokenBal = stakingToken.balanceOf(address(this));

        uint256 adjustedReflectionPerShare = accDividendPerShare.add(
                reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)
            );
        
        uint256 pendingReflection = 0;
        for(uint256 i = 0; i < stakes.length; i++) {
            Stake storage stake = stakes[i];
            if(stake.stakeType != _stakeType) continue;
            if(stake.amount == 0) continue;

            pendingReflection = pendingReflection.add(
                stake.amount.mul(adjustedReflectionPerShare).div(PRECISION_FACTOR_REFLECTION).sub(
                    stake.reflectionDebt
                )
            );
        }
        return pendingReflection;
    }

    /************************
    ** Admin Methods
    *************************/
    function harvest() external onlyOwner {        
        _updatePool(0);

        uint256 _amount = stakingToken.balanceOf(address(this));
        _amount = _amount.sub(totalStaked);

        uint256 pendingReflection = _amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION).sub(reflectionDebt);
        if(pendingReflection > 0) {
            if(address(dividendToken) == address(0x0)) {
                payable(walletA).transfer(pendingReflection);
            } else {
                dividendToken.safeTransfer( walletA, pendingReflection);
            }
            totalReflections = totalReflections.sub(pendingReflection);
        }
        
        reflectionDebt = _amount.mul(accDividendPerShare).div(PRECISION_FACTOR_REFLECTION);
    }

    /*
     * @notice Deposit reward token
     * @dev Only call by owner. Needs to be for deposit of reward token when reflection token is same with reward token.
     */
    function depositRewards(uint _amount) external nonReentrant {
        require(_amount > 0);

        uint256 beforeAmt = earnedToken.balanceOf(address(this));
        earnedToken.safeTransferFrom(msg.sender, address(this), _amount);
        uint256 afterAmt = earnedToken.balanceOf(address(this));

        totalEarned = totalEarned.add(afterAmt).sub(beforeAmt);
    }

    /*
     * @notice Withdraw reward token
     * @dev Only callable by owner. Needs to be for emergency.
     */
    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {
        require( block.number > bonusEndBlock, "Pool is running");
        if(address(earnedToken) != address(dividendToken)) {
            require(availableRewardTokens() >= _amount, "Insufficient reward tokens");
        }

        earnedToken.safeTransfer(address(msg.sender), _amount);
        
        if (totalEarned > 0) {
            if (_amount > totalEarned) {
                totalEarned = 0;
            } else {
                totalEarned = totalEarned.sub(_amount);
            }
        }
    }

    /**
     * @notice It allows the admin to recover wrong tokens sent to the contract
     * @param _tokenAddress: the address of the token to withdraw
     * @param _tokenAmount: the number of tokens to withdraw
     * @dev This function is only callable by admin.
     */
    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {
        require(
            _tokenAddress != address(earnedToken),
            "Cannot be reward token"
        );

        if(_tokenAddress == address(stakingToken)) {
            uint256 tokenBal = stakingToken.balanceOf(address(this));
            require(_tokenAmount <= tokenBal.sub(totalStaked), "Insufficient balance");
        }

        if(_tokenAddress == address(0x0)) {
            payable(msg.sender).transfer(_tokenAmount);
        } else {
            IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);
        }

        emit AdminTokenRecovered(_tokenAddress, _tokenAmount);
    }

    function startReward() external onlyOwner {
        require(startBlock == 0, "Pool was already started");

        startBlock = block.number.add(100);
        bonusEndBlock = startBlock.add(duration * 28800);
        for(uint256 i = 0; i < lockups.length; i++) {
            lockups[i].lastRewardBlock = startBlock;
        }
        
        emit NewStartAndEndBlocks(startBlock, bonusEndBlock);
    }

    function stopReward() external onlyOwner {
        bonusEndBlock = block.number;
    }

    /*
     * @notice Update pool limit per user
     * @dev Only callable by owner.
     * @param _hasUserLimit: whether the limit remains forced
     * @param _poolLimitPerUser: new pool limit per user
     */
    function updatePoolLimitPerUser( bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {
        require(hasUserLimit, "Must be set");
        if (_hasUserLimit) {
            require(
                _poolLimitPerUser > poolLimitPerUser,
                "New limit must be higher"
            );
            poolLimitPerUser = _poolLimitPerUser;
        } else {
            hasUserLimit = _hasUserLimit;
            poolLimitPerUser = 0;
        }
        emit NewPoolLimit(poolLimitPerUser);
    }

    function updateLockup(uint8 _stakeType, uint256 _duration, uint256 _depositFee, uint256 _withdrawFee, uint256 _rate) external onlyOwner {
        // require(block.number < startBlock, "Pool was already started");
        require(_stakeType < lockups.length, "Lockup Not found");
        require(_depositFee < 2000, "Invalid deposit fee");
        require(_withdrawFee < 2000, "Invalid withdraw fee");

        _updatePool(_stakeType);

        Lockup storage _lockup = lockups[_stakeType];
        _lockup.duration = _duration;
        _lockup.depositFee = _depositFee;
        _lockup.withdrawFee = _withdrawFee;
        _lockup.rate = _rate;
        
        emit LockupUpdated(_stakeType, _duration, _depositFee, _withdrawFee, _rate);
    }

    function addLockup(uint256 _duration, uint256 _depositFee, uint256 _withdrawFee, uint256 _rate) external onlyOwner {
        require(_depositFee < 2000, "Invalid deposit fee");
        require(_withdrawFee < 2000, "Invalid withdraw fee");
        
        lockups.push();
        
        Lockup storage _lockup = lockups[lockups.length - 1];
        _lockup.duration = _duration;
        _lockup.depositFee = _depositFee;
        _lockup.withdrawFee = _withdrawFee;
        _lockup.rate = _rate;
        _lockup.lastRewardBlock = block.number;

        emit LockupUpdated(uint8(lockups.length - 1), _duration, _depositFee, _withdrawFee, _rate);
    }

    function setServiceInfo(address _addr, uint256 _fee) external {
        require(msg.sender == buyBackWallet, "setServiceInfo: FORBIDDEN");
        require(_addr != address(0x0) || _addr != buyBackWallet, "Invalid address");

        buyBackWallet = _addr;
        performanceFee = _fee;

        emit ServiceInfoUpadted(_addr, _fee);
    }
    
    function setDuration(uint256 _duration) external onlyOwner {
        require(startBlock == 0, "Pool was already started");
        require(_duration >= 30, "lower limit reached");

        duration = _duration;
        emit DurationUpdated(_duration);
    }

    function setSettings(
        uint256 _slippageFactor, 
        address _uniRouter, 
        address[] memory _earnedToStakedPath, 
        address[] memory _reflectionToStakedPath,
        address _feeAddr
    ) external onlyOwner {
        require(_slippageFactor <= slippageFactorUL, "_slippageFactor too high");
        require(_feeAddr != address(0x0), "Invalid Address");

        slippageFactor = _slippageFactor;
        uniRouterAddress = _uniRouter;
        reflectionToStakedPath = _reflectionToStakedPath;
        earnedToStakedPath = _earnedToStakedPath;
        walletA = _feeAddr;

        emit SetSettings(_slippageFactor, _uniRouter, _earnedToStakedPath, _reflectionToStakedPath, _feeAddr);
    }

    function resetAllowances() external onlyOwner {
        _resetAllowances();
    }


    /************************
    ** Internal Methods
    *************************/
    /*
     * @notice Update reward variables of the given pool to be up-to-date.
     */
    function _updatePool(uint8 _stakeType) internal {
        // calc reflection rate
        if(totalStaked > 0) {
            uint256 reflectionAmount = availabledividendTokens();
            uint256 sTokenBal = stakingToken.balanceOf(address(this));

            accDividendPerShare = accDividendPerShare.add(
                    reflectionAmount.sub(totalReflections).mul(PRECISION_FACTOR_REFLECTION).div(sTokenBal)
                );

            totalReflections = reflectionAmount;
        }

        Lockup storage lockup = lockups[_stakeType];
        if (block.number <= lockup.lastRewardBlock || lockup.lastRewardBlock == 0) return;

        if (lockup.totalStaked == 0) {
            lockup.lastRewardBlock = block.number;
            return;
        }

        uint256 multiplier = _getMultiplier(lockup.lastRewardBlock, block.number);
        uint256 _reward = multiplier.mul(lockup.rate);
        lockup.accTokenPerShare = lockup.accTokenPerShare.add(
            _reward.mul(PRECISION_FACTOR).div(lockup.totalStaked)
        );
        lockup.lastRewardBlock = block.number;
    }

    /*
     * @notice Return reward multiplier over the given _from to _to block.
     * @param _from: block to start
     * @param _to: block to finish
     */
    function _getMultiplier(uint256 _from, uint256 _to)
        internal
        view
        returns (uint256)
    {
        if (_to <= bonusEndBlock) {
            return _to.sub(_from);
        } else if (_from >= bonusEndBlock) {
            return 0;
        } else {
            return bonusEndBlock.sub(_from);
        }
    }

    function _safeSwap(
        uint256 _amountIn,
        address[] memory _path,
        address _to
    ) internal {
        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);
        uint256 amountOut = amounts[amounts.length.sub(1)];

        IUniRouter02(uniRouterAddress).swapExactTokensForTokens(
            _amountIn,
            amountOut.mul(slippageFactor).div(1000),
            _path,
            _to,
            block.timestamp.add(600)
        );
    }

    function _resetAllowances() internal {
        earnedToken.safeApprove(uniRouterAddress, uint256(0));
        earnedToken.safeIncreaseAllowance(
            uniRouterAddress,
            type(uint256).max
        );

        if(address(dividendToken) == address(0x0)) {
            address wethAddress = IUniRouter02(uniRouterAddress).WETH();
            IERC20(wethAddress).safeApprove(uniRouterAddress, uint256(0));
            IERC20(wethAddress).safeIncreaseAllowance(
                uniRouterAddress,
                type(uint256).max
            );
        } else {
            dividendToken.safeApprove(uniRouterAddress, uint256(0));
            dividendToken.safeIncreaseAllowance(
                uniRouterAddress,
                type(uint256).max
            );
        }        
    }

    receive() external payable {}
}

// File: contracts/BrewlabsLocker.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/access/Ownable.sol';
import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';

contract BrewlabsLocker is Ownable{
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    bool public isActive = false;
    bool private initialized = false;

    IERC20 public brews;

    address public  reflectionToken;
    uint256 private accReflectionPerShare;
    uint256 private allocatedReflections;

    uint256 private PRECISION_FACTOR = 1 ether;

    struct Distribution {
        address distributor;        // distributor address
        uint256 alloc;              // allocation token amount
        uint256 duration;           // distributor can unlock after duration in minutes 
        uint256 unlockRate;         // distributor can unlock amount as much as unlockRate(in wei) per block after duration
        uint256 lastClaimBlock;     // last claimed block number
        uint256 tokenDebt;          // claimed token amount
        uint256 reflectionDebt;     
    }
   
    mapping(address => Distribution) public distributions;
    mapping(address => bool) isDistributor;
    address[] public distributors;

    event AddDistribution(address distributor, uint256 allocation, uint256 duration, uint256 unlockRate);
    event UpdateDistribution(address distributor, uint256 allocation, uint256 duration, uint256 unlockRate);
    event RemoveDistribution(address distributor);
    event Claim(address distributor, uint256 amount);
        
    modifier onlyActive() {
        require(isActive == true, "not active");
        _;
    }

    constructor () {}

    function initialize(IERC20 _token, address _reflectionToken) external onlyOwner {
        require(initialized == false, "already initialized");
        initialized = true;

        brews = _token;
        reflectionToken = _reflectionToken;
    }


    function addDistribution(address distributor, uint256 allocation, uint256 duration, uint256 unlockRate) external onlyOwner {
        require(isDistributor[distributor] == false, "already set");

        isDistributor[distributor] = true;
        distributors.push(distributor);
        
        Distribution storage _distribution = distributions[distributor];        
        _distribution.distributor = distributor;
        _distribution.alloc = allocation;
        _distribution.duration = duration;
        _distribution.unlockRate = unlockRate;
        _distribution.tokenDebt = 0;

        uint256 firstUnlockBlock = block.number.add(duration.mul(20));
        _distribution.lastClaimBlock = firstUnlockBlock;

        _distribution.reflectionDebt = allocation.mul(accReflectionPerShare).div(PRECISION_FACTOR);

        emit AddDistribution(distributor, allocation, duration, unlockRate);
    }

    function removeDistribution(address distributor) external onlyOwner {
        require(isDistributor[distributor] == true, "Not found");

        isDistributor[distributor] = false;
        
        Distribution storage _distribution = distributions[distributor];
        _distribution.distributor = address(0x0);
        _distribution.alloc = 0;
        _distribution.duration = 0;
        _distribution.unlockRate = 0;
        _distribution.lastClaimBlock = 0;
        _distribution.tokenDebt = 0;
        _distribution.reflectionDebt = 0;

        emit RemoveDistribution(distributor);
    }

    function updateDistribution(address distributor, uint256 allocation, uint256 duration, uint256 unlockRate) external onlyOwner {
        require(isDistributor[distributor] == true, "Not found");

        Distribution storage _distribution = distributions[distributor];

        require(_distribution.lastClaimBlock > block.number, "cannot update");

        _distribution.alloc = allocation;
        _distribution.duration = duration;
        _distribution.unlockRate = unlockRate;

        uint256 firstUnlockBlock = block.number.add(duration.mul(20));
        _distribution.lastClaimBlock = firstUnlockBlock;

        _distribution.reflectionDebt = allocation.mul(accReflectionPerShare).div(PRECISION_FACTOR);

        emit UpdateDistribution(distributor, allocation, duration, unlockRate);
    }

    function claim() external onlyActive {
        require(claimable(msg.sender) == true, "not claimable");
        
        harvest();

        Distribution storage _distribution = distributions[msg.sender];
        
        uint256 amount = _distribution.alloc.sub(_distribution.tokenDebt);
        uint256 claimAmt = _distribution.unlockRate.mul(block.number.sub(_distribution.lastClaimBlock));
        if(claimAmt > amount) claimAmt = amount;

        _distribution.tokenDebt = _distribution.tokenDebt.add(claimAmt);
        _distribution.reflectionDebt = (amount.sub(claimAmt)).mul(accReflectionPerShare).div(PRECISION_FACTOR);
        _distribution.lastClaimBlock = block.number;
        
        brews.safeTransfer(_distribution.distributor, claimAmt);

        emit Claim(_distribution.distributor, claimAmt);
    }

    function harvest() public onlyActive {
        if(isDistributor[msg.sender] == false) return;

        _updatePool();

        Distribution storage _distribution = distributions[msg.sender];
        uint256 amount = _distribution.alloc.sub(_distribution.tokenDebt);
        uint256 pending = amount.mul(accReflectionPerShare).div(PRECISION_FACTOR).sub(_distribution.reflectionDebt);

        _distribution.reflectionDebt = amount.mul(accReflectionPerShare).div(PRECISION_FACTOR);

        if(pending > 0) {
            IERC20(reflectionToken).safeTransfer(msg.sender, pending);
            allocatedReflections = allocatedReflections.sub(pending);
        }
    }

    function pendingClaim(address _user) external view returns (uint256) {
        if(isDistributor[_user] == false) return 0;        

        Distribution storage _distribution = distributions[_user];
        if(_distribution.lastClaimBlock >= block.number) return 0;
        
        uint256 amount = _distribution.alloc.sub(_distribution.tokenDebt);
        uint256 claimAmt = _distribution.unlockRate.mul(block.number.sub(_distribution.lastClaimBlock));
        if(claimAmt > amount) claimAmt = amount;

        return amount;
    }

    function pendingReflection(address _user) external view returns (uint256) {
        if(isDistributor[_user] == false) return 0;

        uint256 tokenAmt = brews.balanceOf(address(this));
        if(tokenAmt == 0) return 0;

        Distribution storage _distribution = distributions[_user];
        if(_distribution.lastClaimBlock >= block.number) return 0;

        uint256 reflectionAmt = IERC20(reflectionToken).balanceOf(address(this));
        reflectionAmt = reflectionAmt.sub(allocatedReflections);
        uint256 _accReflectionPerShare = accReflectionPerShare.add(reflectionAmt.mul(PRECISION_FACTOR).div(tokenAmt));
        
        uint256 amount = _distribution.alloc.sub(_distribution.tokenDebt);
        uint256 pending = amount.mul(_accReflectionPerShare).div(PRECISION_FACTOR).sub(_distribution.reflectionDebt);

        return pending;
    }

    function claimable(address _user) public view returns (bool) {
        if(isDistributor[_user] == false) return false;
        if(distributions[_user].lastClaimBlock >= block.number) return false;

        Distribution memory _distribution = distributions[_user];
        uint256 amount = _distribution.alloc.sub(_distribution.tokenDebt);
        if(amount > 0) return true;

        return false;
    }

    function setStatus(bool _isActive) external onlyOwner {
        isActive = _isActive;
    }

    function emergencyWithdraw() external onlyOwner {
        uint256 tokenAmt = brews.balanceOf(address(this));
        if(tokenAmt > 0) {
            brews.transfer(msg.sender, tokenAmt);
        }

        uint256 reflectionAmt = IERC20(reflectionToken).balanceOf(address(this));
        if(reflectionAmt > 0) {
            IERC20(reflectionToken).transfer(msg.sender, reflectionAmt);
        }
    }

    function _updatePool() internal {
        uint256 tokenAmt = brews.balanceOf(address(this));
        if(tokenAmt == 0) return;

        uint256 reflectionAmt = 0;
        reflectionAmt = IERC20(reflectionToken).balanceOf(address(this));
        reflectionAmt = reflectionAmt.sub(allocatedReflections);

        accReflectionPerShare = accReflectionPerShare.add(reflectionAmt.mul(PRECISION_FACTOR).div(tokenAmt));
        allocatedReflections = allocatedReflections.add(reflectionAmt);
    }
}

// File: contracts/BrewlabsLiquidityManager.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "./libs/IUniFactory.sol";
import "./libs/IUniRouter02.sol";
import "./libs/IWETH.sol";

contract BrewlabsLiquidityManager is Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    address public uniRouterAddress;

    uint256 public fee = 100; // 1%
    address public walletA;

    address public wethAddress;
    address[] public wethToBrewsPath;
    uint256 public slippageFactor = 9500; // 5% default slippage tolerance
    uint256 public constant slippageFactorUL = 8000;
    address public constant buyBackAddress = 0x000000000000000000000000000000000000dEaD;
    
    bool public buyBackBurn = false;
    uint256 public buyBackLimit = 1 ether;
    
    event WalletAUpdated(address _addr);
    event FeeUpdated(uint256 _fee);
    event BuyBackStatusChanged(bool _status);
    event BuyBackLimitUpdated(uint256 _limit);
    event AdminTokenRecovered(address tokenRecovered, uint256 amount);

    constructor() {}

    function initialize(
        address _uniRouterAddress,
        address[] memory _wethToBrewsPath
    ) external onlyOwner {
        require(_uniRouterAddress != address(0x0), "Invalid address");
        
        uniRouterAddress = _uniRouterAddress;
        wethToBrewsPath = _wethToBrewsPath;

        wethAddress = IUniRouter02(uniRouterAddress).WETH();
        walletA = msg.sender;
    }

    function addLiquidity(address token0, address token1, uint256 _amount0, uint256 _amount1, uint256 _slipPage) external payable nonReentrant returns (uint256 amountA, uint256 amountB, uint256 liquidity) {
        require(_amount0 > 0 && _amount1 > 0, "amount is zero");
        require(_slipPage < 10000, "slippage cannot exceed 100%");
        require(token0 != token1, "cannot use same token for pair");

        uint256 beforeAmt = IERC20(token0).balanceOf(address(this));
        IERC20(token0).transferFrom(msg.sender, address(this), _amount0);
        uint256 token0Amt = IERC20(token0).balanceOf(address(this)).sub(beforeAmt);

        uint256 feeAmt = token0Amt.mul(fee).div(10000);
        if(feeAmt > 0) {
            IERC20(token0).transfer(walletA, feeAmt);
            token0Amt = token0Amt.sub(feeAmt);
        }

        beforeAmt = IERC20(token1).balanceOf(address(this));
        IERC20(token1).transferFrom(msg.sender, address(this), _amount1);
        uint256 token1Amt = IERC20(token1).balanceOf(address(this)).sub(beforeAmt);

        feeAmt = token1Amt.mul(fee).div(10000);
        if(feeAmt > 0) {
            IERC20(token1).transfer(walletA, feeAmt);
            token1Amt = token1Amt.sub(feeAmt);
        }
        
        (amountA, amountB, liquidity) = _addLiquidity( token0, token1, token0Amt, token1Amt, _slipPage);

        if(token0Amt > amountA) {
            IERC20(token0).transfer(msg.sender, token0Amt.sub(amountA));
        }
        if(token1Amt > amountB) {
            IERC20(token1).transfer(msg.sender, token1Amt.sub(amountB));
        }
    }

    function _addLiquidity(address token0, address token1, uint256 _amount0, uint256 _amount1, uint256 _slipPage) internal returns (uint256, uint256, uint256) {
        IERC20(token0).safeIncreaseAllowance(uniRouterAddress, _amount0);
        IERC20(token1).safeIncreaseAllowance(uniRouterAddress, _amount1);

        return IUniRouter02(uniRouterAddress).addLiquidity(
                token0,
                token1,
                _amount0,
                _amount1,
                _amount0.mul(10000 - _slipPage).div(10000),
                _amount1.mul(10000 - _slipPage).div(10000),
                msg.sender,
                block.timestamp.add(600)
            );
    }

    function addLiquidityETH(address token, uint256 _amount, uint256 _slipPage) external payable nonReentrant returns (uint256 amountToken, uint256 amountETH, uint256 liquidity) {
        require(_amount > 0, "amount is zero");
        require(_slipPage < 10000, "slippage cannot exceed 100%");
        require(msg.value > 0, "amount is zero");

        uint256 beforeAmt = IERC20(token).balanceOf(address(this));
        IERC20(token).transferFrom(msg.sender, address(this), _amount);
        uint256 tokenAmt = IERC20(token).balanceOf(address(this)).sub(beforeAmt);

        uint256 feeAmt = tokenAmt.mul(fee).div(10000);
        if(feeAmt > 0) {
            IERC20(token).transfer(walletA, feeAmt);
            tokenAmt = tokenAmt.sub(feeAmt);
        }

        uint256 ethAmt = msg.value;
        feeAmt = ethAmt.mul(fee).div(10000);
        if(buyBackBurn == false && feeAmt > 0) {
            payable(walletA).transfer(feeAmt);
        }
        ethAmt = ethAmt.sub(feeAmt);
    
        IERC20(token).safeIncreaseAllowance(uniRouterAddress, tokenAmt);        
        (amountToken, amountETH, liquidity) = _addLiquidityETH(token, tokenAmt, ethAmt, _slipPage);

        if(tokenAmt > amountToken) {
            IERC20(token).transfer(msg.sender, tokenAmt.sub(amountToken));
        }
        if(ethAmt > amountETH) {
            payable(msg.sender).transfer(ethAmt.sub(amountETH));
        }

        if(buyBackBurn) buyBack();
    }

    function _addLiquidityETH(address token, uint256 _amount, uint256 _ethAmt, uint256 _slipPage) internal returns (uint256, uint256, uint256) {
        IERC20(token).safeIncreaseAllowance(uniRouterAddress, _amount);        
        
        return IUniRouter02(uniRouterAddress).addLiquidityETH{value: _ethAmt}(
            token,
            _amount,
            _amount.mul(10000 - _slipPage).div(10000),
            _ethAmt.mul(10000 - _slipPage).div(10000),
            msg.sender,
            block.timestamp.add(600)
        );
    }

    function removeLiquidity(address token0, address token1, uint256 _amount) external nonReentrant returns (uint256 amountA, uint256 amountB){
        require(_amount > 0, "amount is zero");
        
        address pair = getPair(token0, token1);
        IERC20(pair).transferFrom(msg.sender, address(this), _amount);
        IERC20(pair).safeIncreaseAllowance(uniRouterAddress, _amount);

        uint256 feeAmt = _amount.mul(fee).div(10000);
        if(feeAmt > 0) {
            (amountA, amountB) = IUniRouter02(uniRouterAddress).removeLiquidity(
                token0,
                token1,
                feeAmt,
                0,
                0,
                walletA,                
                block.timestamp.add(600)
            );
        }
                
        return IUniRouter02(uniRouterAddress).removeLiquidity(
            token0,
            token1,
            _amount.sub(feeAmt),
            0,
            0,
            msg.sender,
            block.timestamp.add(600)
        );
    }

    function removeLiquidityETH(address token, uint256 _amount) external nonReentrant returns (uint256 amountToken, uint256 amountETH){
        require(_amount > 0, "amount is zero");
        
        address pair = getPair(token, wethAddress);
        IERC20(pair).transferFrom(msg.sender, address(this), _amount);
        IERC20(pair).safeIncreaseAllowance(uniRouterAddress, _amount);

        uint256 feeAmt = _amount.mul(fee).div(10000);
        if(feeAmt > 0) {
            (amountToken, amountETH) = IUniRouter02(uniRouterAddress).removeLiquidityETH(
                token,
                feeAmt,
                0,
                0,
                address(this),
                block.timestamp.add(600)
            );

            if(buyBackBurn == false) payable(walletA).transfer(amountETH);
            IERC20(token).transfer(walletA, amountToken);
        }
                
        return IUniRouter02(uniRouterAddress).removeLiquidityETH(
            token,
            _amount.sub(feeAmt),
            0,
            0,
            msg.sender,                
            block.timestamp.add(600)
        );
    }

    function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 _amount) external nonReentrant returns (uint256 amountETH){
        require(_amount > 0, "amount is zero");
        
        address pair = getPair(token, wethAddress);
        IERC20(pair).transferFrom(msg.sender, address(this), _amount);
        IERC20(pair).safeIncreaseAllowance(uniRouterAddress, _amount);

        uint256 feeAmt = _amount.mul(fee).div(10000);
        if(feeAmt > 0) {
            amountETH = IUniRouter02(uniRouterAddress).removeLiquidityETHSupportingFeeOnTransferTokens(
                token,
                feeAmt,
                0,
                0,
                address(this),
                block.timestamp.add(600)
            );

            if(buyBackBurn == false) payable(walletA).transfer(amountETH);

            uint256 amountToken = IERC20(token).balanceOf(address(this));
            IERC20(token).transfer(walletA, amountToken);
        }
                
        return IUniRouter02(uniRouterAddress).removeLiquidityETHSupportingFeeOnTransferTokens(
            token,
            _amount.sub(feeAmt),
            0,
            0,
            msg.sender,                
            block.timestamp.add(600)
        );
    }
   
    /**
     * @notice It allows the admin to recover wrong tokens sent to the contract
     * @param _tokenAddress: the address of the token to withdraw
     * @param _tokenAmount: the number of tokens to withdraw
     * @dev This function is only callable by admin.
     */
    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {
        if(_tokenAddress == address(0x0)) {
            payable(msg.sender).transfer(_tokenAmount);
        } else {
            IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);
        }

        emit AdminTokenRecovered(_tokenAddress, _tokenAmount);
    }

    function updateWalletA(address _walletA) external onlyOwner {
        require(_walletA != address(0x0) || _walletA != walletA, "Invalid address");

        walletA = _walletA;
        emit WalletAUpdated(_walletA);
    }

    function updateFee(uint256 _fee) external onlyOwner {
        require(_fee < 2000, "fee cannot exceed 20%");

        fee = _fee;
        emit FeeUpdated(_fee);
    }

    function setBuyBackStatus(bool _status) external onlyOwner {
        buyBackBurn = _status;

        uint256 ethAmt = address(this).balance;
        if(ethAmt > 0 && _status == false) {
            payable(walletA).transfer(ethAmt);
        }

        emit BuyBackStatusChanged(_status);
    }

    function updateBuyBackLimit(uint256 _limit) external onlyOwner {
        require(_limit > 0, "Invalid amount");

        buyBackLimit = _limit;
        emit BuyBackLimitUpdated(_limit);
    }

    function buyBack() internal {
        uint256 wethAmt = address(this).balance;

        if(wethAmt > buyBackLimit) {
             _safeSwapWeth(
                wethAmt,
                wethToBrewsPath,
                buyBackAddress
            );
        }
    }

    function _safeSwapWeth(
        uint256 _amountIn,
        address[] memory _path,
        address _to
    ) internal {
        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);
        uint256 amountOut = amounts[amounts.length.sub(1)];

        IUniRouter02(uniRouterAddress).swapExactETHForTokens{value: _amountIn}(
            amountOut.mul(slippageFactor).div(10000),
            _path,
            _to,
            block.timestamp.add(600)
        );
    }

    function getPair(address token0, address token1) public view returns (address) {
        address factory = IUniRouter02(uniRouterAddress).factory();
        return IUniV2Factory(factory).getPair(token0, token1);
    }

    receive() external payable {}
}

// File: contracts/libs/IUniFactory.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IUniV2Factory {
    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address);
}
