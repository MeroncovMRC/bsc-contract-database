// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

// pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// Dependency file: @openzeppelin/contracts/utils/math/SafeMath.sol

// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

// pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// Dependency file: contracts/interfaces/IYieldBox.sol

// pragma solidity 0.8.10;

interface IYieldBox {
    /// @dev Keep track account's credit info
    struct CreditAccount {
        // @dev The position credit token
        address creditToken;
        // @dev Total staking token principal deposited
        uint256 principal;
        // @dev Total staking token deposited after do leverage
        uint256 leveraged;
        // @dev Total credit token borrowed
        uint256 credited;
        // @dec The borrow rate at last update
        uint256 borrowRate;
        // @dev The yield balance shares amount
        uint256 shares;
        // @dev Timestamp of last update
        uint256 timestampLU;
    }

    function getLeverageToken() external view returns (address);

    function totalLeverageTokenShares() external view returns (uint256);

    function totalLeverageTokenBalance() external view returns (uint256);

    function totalYieldTokenBalance() external view returns (uint256);

    function getLeverageTokenPerShare() external view returns (uint256);

    function getLeverageTokenPerYieldToken() external view returns (uint256);

    function getAccountCreditInfo(address _creditAccount)
        external
        view
        returns (
            address _creditToken,
            uint256 _principal,
            uint256 _leveraged,
            uint256 _credited,
            uint256 _debts,
            uint256 _borrowRate,
            uint256 _health
        );

    function getAccountYieldInfo(address _creditAccount)
        external
        view
        returns (
            uint256 _principal,
            uint256 _shares,
            uint256 _balance
        );

    function getStrategyIn(
        uint256 _leverageAmount,
        address _creditToken,
        uint256 _multiplier
    )
        external
        view
        returns (
            uint256 _leveraged,
            uint256 _credited,
            uint256 _health
        );

    function getAccountStrategyIn(
        address _creditor,
        uint256 _leverageAmount,
        address _creditToken,
        uint256 _multiplier
    )
        external
        view
        returns (
            uint256 _leveraged,
            uint256 _credited,
            uint256 _health
        );

    function deposit(
        address _creditor, // the creditor of this position
        uint256 _amount, // staking token deposit amount
        uint256 _amountMin, // slippage protection
        address _creditToken,
        uint256 _multiplier
    ) external;

    function withdraw(address _creditor) external;

    function liquidate(address _creditor) external;

    event CreditDeposit(
        address indexed creditor,
        uint256 multiplier,
        address creditToken,
        uint256 credited,
        uint256 principal,
        uint256 leveraged
    );

    // on withdraw, principal is the initial deposit amount
    // the actually received amount is principal - loss OR principal + profit
    // for example: creditor deposited 1 BNB and take profit at 0.1 BNB
    // the principal in this event is still 1 BNB
    // the BNB amount transfer to creditor = 1 + 0.1 (profit) = 1.1 BNB
    // otherwise it's 0.9 BNB on 0.1 BNB loss case
    event CreditWithdraw(
        address indexed creditor,
        address creditToken,
        uint256 credited,
        uint256 principal,
        uint256 leveraged,
        uint256 profit,
        uint256 loss
    );

    event CreditLiquidate(
        address indexed liquidator,
        address indexed creditor,
        address creditToken,
        uint256 health,
        uint256 credited,
        uint256 leveraged,
        uint256 debtsRepaid,
        uint256 profit
    );
}


// Dependency file: contracts/interfaces/external/IWrappedNative.sol

// pragma solidity 0.8.10;

interface IWrappedNative {
    function deposit() external payable;

    function withdraw(uint wad) external;
}


// Root file: contracts/protocol/WethGateway.sol

pragma solidity 0.8.10;

// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
// import "@openzeppelin/contracts/utils/math/SafeMath.sol";

// import "contracts/interfaces/IYieldBox.sol";
// import "contracts/interfaces/external/IWrappedNative.sol";

// Native token deposit helper
contract WethGateway {
    using SafeMath for uint256;

    address public wrappedNative;

    constructor(address _wrappedNative) {
        wrappedNative = _wrappedNative;
    }

    receive() external payable {}

    function deposit(
        address _box,
        uint256 _amountMin,
        address _creditToken,
        uint256 _multiplier
    ) external payable {
        uint256 amount = msg.value;
        require(amount > 0, "msg.value is zero");

        IWrappedNative(wrappedNative).deposit{value: amount}();

        IERC20(wrappedNative).approve(_box, 0);
        IERC20(wrappedNative).approve(_box, amount);
        IYieldBox(_box).deposit(msg.sender, amount, _amountMin, _creditToken, _multiplier);
    }

    function withdraw(address _box) external {
        uint256 balanceBefore = IERC20(wrappedNative).balanceOf(address(this));
        IYieldBox(_box).withdraw(msg.sender);
        uint256 balanceWithdraw = IERC20(wrappedNative).balanceOf(address(this)).sub(balanceBefore);

        IWrappedNative(wrappedNative).withdraw(balanceWithdraw);

        payable(msg.sender).transfer(balanceWithdraw);
    }
}