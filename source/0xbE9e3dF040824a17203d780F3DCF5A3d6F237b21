// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

contract SiopaoToken {
    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowances;
    uint256 public totalSupply = 200000000 * 10 ** 18;
    string public name = "GloriousChance";
    string public symbol = "GLORYS";
    uint8 public decimals = 18;
    address payable public marketingWallet;
    address payable public greenWallet;
    address payable public buyTaxWallet;
    address payable public sellTaxWallet;
    address payable public liquidityWallet;
    
    uint256 public liquidityFee = 3;
    uint256 public buyTaxFee = 3;
    uint256 public sellTaxFee = 5;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor(
        address payable _marketingWallet,
        address payable _greenWallet,
        address payable _buyTaxWallet,
        address payable _sellTaxWallet,
        address payable _liquidityWallet
    ) {
        balances[msg.sender] = totalSupply;
        marketingWallet = _marketingWallet;
        greenWallet = _greenWallet;
        buyTaxWallet = _buyTaxWallet;
        sellTaxWallet = _sellTaxWallet;
        liquidityWallet = _liquidityWallet;
    }
    
    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public returns (bool) {
        uint256 taxAmount = (amount * sellTaxFee) / 100;
        uint256 transferAmount = amount - taxAmount;
        
        require(amount > 0, "Amount must be greater than zero");
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        
        balances[msg.sender] -= amount;
        balances[recipient] += transferAmount;
        
        // Transfer tax amount to the sell tax wallet
        balances[sellTaxWallet] += taxAmount;
        
        emit Transfer(msg.sender, recipient, transferAmount);
        
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        uint256 taxAmount = (amount * buyTaxFee) / 100;
        uint256 transferAmount = amount - taxAmount;
        
        require(amount > 0, "Amount must be greater than zero");
        require(balanceOf(sender) >= amount, "Insufficient balance");
        require(allowances[sender][msg.sender] >= amount, "Insufficient allowance");
        
        balances[sender] -= amount;
        balances[recipient] += transferAmount;
        allowances[sender][msg.sender] -= amount;
        
        // Transfer tax amount to the buy tax wallet
        balances[buyTaxWallet] += taxAmount;
        
        emit Transfer(sender, recipient, transferAmount);
        
        return true;
    }
    
    function approve(address spender, uint256 amount) public returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
}