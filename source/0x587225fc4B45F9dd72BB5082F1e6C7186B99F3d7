// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;


interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);

    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);

    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);

    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () public {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMathUint {
    function toInt256Safe(uint256 a) internal pure returns (int256) {
        int256 b = int256(a);
        require(b >= 0);
        return b;
    }
}

library SafeMathInt {
    int256 private constant MIN_INT256 = int256(1) << 255;
    int256 private constant MAX_INT256 = ~(int256(1) << 255);

    /**
     * @dev Multiplies two int256 variables and fails on overflow.
     */
    function mul(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a * b;

        // Detect overflow when multiplying MIN_INT256 with -1
        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));
        require((b == 0) || (c / b == a));
        return c;
    }

    /**
     * @dev Division of two int256 variables and fails on overflow.
     */
    function div(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when dividing MIN_INT256 by -1
        require(b != - 1 || a != MIN_INT256);

        // Solidity already throws when dividing by 0.
        return a / b;
    }

    /**
     * @dev Subtracts two int256 variables and fails on overflow.
     */
    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a));
        return c;
    }

    /**
     * @dev Adds two int256 variables and fails on overflow.
     */
    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }

    /**
     * @dev Converts to absolute value, and fails on overflow.
     */
    function abs(int256 a) internal pure returns (int256) {
        require(a != MIN_INT256);
        return a < 0 ? - a : a;
    }


    function toUint256Safe(int256 a) internal pure returns (uint256) {
        require(a >= 0);
        return uint256(a);
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint) external view returns (address pair);

    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

contract Epoch {
    uint256 constant public EPOCH_PERIOD = 28800;

    uint256 constant public MULTIPLY = 1000000000;

    uint256 public lastEpoch;
    uint256 public lastEpochBlock;
    uint256 public maxepoch = 60;

    function start() internal {
        lastEpochBlock = block.number;
    }

    function updateEpoch() internal {
        uint256 epochCount = (block.number - lastEpochBlock) / EPOCH_PERIOD;
        lastEpoch += epochCount;
        lastEpochBlock += epochCount * EPOCH_PERIOD;
    }

    function getMultiplyByEpoch(uint256 epoch) public view returns (uint256) {
        if (epoch < maxepoch) {
            return 20000000;
        } else {
            return 0;
        }
    }

    function currentEpoch() public view returns (uint256) {
        uint256 epochCount = (block.number - lastEpochBlock) / EPOCH_PERIOD;
        return lastEpoch + epochCount;
    }

    function currentEpochBlock() public view returns (uint256) {
        uint256 epochCount = (block.number - lastEpochBlock) / EPOCH_PERIOD;
        return lastEpochBlock + epochCount * EPOCH_PERIOD;
    }
}

contract MiningToken is Epoch {
    bool public miningStarted;

    mapping(address => uint256) private _balances;
    mapping(address => bool) internal _mintExclude;

    uint256 private _initialSupply;
    uint256 private _totalSupplyEpoch;
    uint256 private _totalSupplyBlock;

    function initialSupply() public view returns (uint256) {
        return _initialSupply;
    }

    function totalSupply() public view virtual returns (uint256) {
        if (!miningStarted) return _initialSupply;

        uint256 _currentEpoch = currentEpoch();

        uint256 amount = _totalSupplyEpoch;
        for (uint256 i = lastEpoch; i < _currentEpoch; i++) {
            amount += amount * getMultiplyByEpoch(i) / MULTIPLY;
        }

        uint256 epochTotal = amount * getMultiplyByEpoch(_currentEpoch) / MULTIPLY;
        return amount + epochTotal * (block.number - currentEpochBlock()) / EPOCH_PERIOD;
    }

    function balanceOf(address account) public view virtual returns (uint256) {
        if (!miningStarted) return _balances[account];

        if (_mintExclude[account]) return _balances[account];

        return _balances[account] * totalSupply() / _initialSupply;
    }

    function _mint(address account, uint256 amount) internal virtual {
        _initialSupply += amount;
        _totalSupplyEpoch += amount;
        _totalSupplyBlock += amount;
        _balances[account] += amount;
    }

    function _tokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        uint256 initialAmount = amount * _initialSupply / _totalSupplyBlock;

        if (_mintExclude[from]) {
            require(_balances[from] >= amount, "ERC20: transfer amount exceeds balance");
            _balances[from] -= amount;
        } else {
            require(_balances[from] >= initialAmount, "ERC20: transfer amount exceeds balance");
            _balances[from] -= initialAmount;
        }

        if (_mintExclude[to]) {
            _balances[to] += amount;
        } else {
            _balances[to] += initialAmount;
        }
    }

    function updateMining() internal {
        uint256 _currentEpoch = currentEpoch();

        uint256 amount = _totalSupplyEpoch;
        for (uint256 i = lastEpoch; i < _currentEpoch; i++) {
            amount += amount * getMultiplyByEpoch(i) / MULTIPLY;
        }
        _totalSupplyEpoch = amount;
        uint256 epochTotal = amount * getMultiplyByEpoch(_currentEpoch) / MULTIPLY;
        amount += epochTotal * (block.number - currentEpochBlock()) / EPOCH_PERIOD;
        _totalSupplyBlock = amount;

        updateEpoch();
    }
}

contract HTCTokenV3 is IERC20, Ownable, MiningToken {
    using SafeMath for uint256;

    mapping(address => uint) public wards;

    function rely(address usr) external auth {wards[usr] = 1;}

    function deny(address usr) external auth {wards[usr] = 0;}
    modifier auth {
        require(wards[msg.sender] == 1, "HTCTokenV3/not-authorized");
        _;
    }
    address public deadWallet = 0x000000000000000000000000000000000000dEaD;
    address private usdtToken = 0x55d398326f99059fF775485246999027B3197955;
    address public operationAddress = 0x60Ff6Acd28ff70563D0c45B8ed71E00d2E2297F0;
    address public projct = 0x5649646d8C43c9c6586f2E6eCfAC6443Cd8D2162;
    address private uniswapV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    uint256 public fiveMinutesBlockNum = 100;

    //sell & buy genesis fee
    uint256 public buyAndSellGenesisFee = 40;
    uint256 public reduceGenesisFee = 20;

    uint256 public swapTokensAtAmount = 100000 * 1E18;

    uint256 public _buyBurnFee = 5;
    uint256 public _sellBurnFee = 15;

    uint256 public _liquidityFee = 30;

    uint256 public _rewardFee = 20;

    uint256 public _whiteFee = 20;

    uint256 public _burnFeeTotal;

    address[30] public _whiteList;
    address[25] public _topUserList;

    mapping(address => mapping(address => uint256)) private _allowances;

    string private _name = "HunterCoin";
    string private _symbol = "HTC";

    mapping(address => bool) private _isExcludedFromFees;
    mapping(address => bool) public automatedMarketMakerPairs;

    event ExcludeFromFees(address indexed account, bool isExcluded);

    bool inSwapAndLiquify;

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor() public {
        wards[msg.sender] = 1;
        address _uniswapV2Pair = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73).createPair(address(this), usdtToken);
        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);
        excludeFromFees(owner(), true);
        excludeFromFees(operationAddress, true);
        excludeFromFees(address(this), true);
        //        excludeFromFees(projct, true);

        _mintExclude[address(this)] = true;
        _mintExclude[_uniswapV2Pair] = true;

        _mint(projct, 5600000000 * 1e18);

        _whiteList[0] = 0x7F346cf4929257885Ddd5E3C007c07EC5F4CF901;
        _whiteList[1] = 0xf6F2A7A822F2a5A3ee2f3E1d2C38e8b9829031B0;
        _whiteList[2] = 0x48C985d18178dcdc0F60Ff00E7125996a5dbA03B;
        _whiteList[3] = 0xE93e952452EC80124304d9D811FBa46ABF4a4718;
        _whiteList[4] = 0x7cBd33C3cc396E4228828D845D213ce422148438;
        _whiteList[5] = 0x4B06ba6C1Eb3496F757E3cA12454679d89030DFC;
        _whiteList[6] = 0x05D4E11625dAAb482EdbdeEDC001f0c9eD843d11;
        _whiteList[7] = 0xcC12F1cE2bbC909D7F8b181acd7eB09A32a7Ed01;
        _whiteList[8] = 0x22CCa8309F9517084F4C13eb0Ada247b69B5f5c3;
        _whiteList[9] = 0xFBDAFf1902cfb65338977B6E75aC065876d1D64D;
        _whiteList[10] = 0xe3121a102aC3Ca36983663F5247eB4E2400F8309;
        _whiteList[11] = 0x9F230421B1F1803502Ab57e11218ba50cD9e3184;
        _whiteList[12] = 0x4d97A2fF5138C86584754Af0622665A672C5ba17;
        _whiteList[13] = 0x5788aD899b2557A2FCaBF1Eb5cb6Ee97c509104f;
        _whiteList[14] = 0x1902C7f00B63Ca01ac35235cE2573bf834220adc;
        _whiteList[15] = 0xf9Af5f25e50Bd7EbB8db7980972F46c3806778e0;
        _whiteList[16] = 0xD44e83caA8eEC1432E52d162a4956532C1153D79;
        _whiteList[17] = 0xaD4107eE5a617dDB165f5D68652a540c7429B0D0;
        _whiteList[18] = 0xddb1203E869EDB39E2fBe3Fa6D9FF350bE8Bc100;
        _whiteList[19] = 0xe540cf5AD7F1988B2e8D5447fF0609888Ba9202C;
        _whiteList[20] = 0x7DD43E773f9D931bA273c3F6a0b8bE3498CAFF87;
        _whiteList[21] = 0x82Bc053166754B9B95C3c540d67fa2184f98237a;
        _whiteList[22] = 0xb71BB907a9F46df5feE754eBE9FaAab0A80DEb14;
        _whiteList[23] = 0x18b8Ac842DdD2525d630cc17d2c332aFb47B5007;
        _whiteList[24] = 0x9d1B3603054140b12039E04F0Af41c8a66b7B12D;
        _whiteList[25] = 0xEeBBFf7c2873f4703Ee2BbC14303c21444F4786F;
        _whiteList[26] = 0x8B3312a268b5FB62EB5636D879672d8C757076FE;
        _whiteList[27] = 0x8B3312a268b5FB62EB5636D879672d8C757076FE;
        _whiteList[28] = 0x8B3312a268b5FB62EB5636D879672d8C757076FE;
        _whiteList[29] = 0x8B3312a268b5FB62EB5636D879672d8C757076FE;

        _topUserList[0] = 0x622D2C6975E2d2aA4FB40A9f230b7Aa0E8a343cB;
        _topUserList[1] = 0x702c838a589ae47fD2Cf5c11b39a7A8E1A0DC355;
        _topUserList[2] = 0x83cBF803c459F090B0ab025d1a9cDe1BC8179173;
        _topUserList[3] = 0xda9bD403bE011eC019Af39D42A7AFFAd9E9f33A8;
        _topUserList[4] = 0xeD9815bAb5a7e256a5cffdF8820f88Bdd11d626a;
        _topUserList[5] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[6] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[7] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[8] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[9] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[10] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[11] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[12] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[13] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[14] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[15] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[16] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[17] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[18] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[19] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[20] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[21] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[22] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[23] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
        _topUserList[24] = 0xE055bEF0F6c0E3E27FEF2fC8F79c74EA9114ca89;
    }
    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public pure virtual returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override(MiningToken, IERC20) returns (uint256) {
        return MiningToken.totalSupply();
    }

    function balanceOf(address account) public view virtual override(MiningToken, IERC20) returns (uint256) {
        return MiningToken.balanceOf(account);
    }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = msg.sender;
        _transfer(owner, to, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = msg.sender;
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = msg.sender;
        _approve(owner, spender, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function totalBurn() public view returns (uint256) {
        return _burnFeeTotal;
    }

    function setMintExclude(address account, bool state) external auth {
        _mintExclude[account] = state;
    }

    function setOperation(address ust) external auth {
        operationAddress = ust;
    }

    function setSwapTokensAtAmount(uint256 newAmount) external auth {
        swapTokensAtAmount = newAmount;
    }

    function setmaxEpoch(uint256 maxEpoch) external auth {
        maxepoch = maxEpoch;
    }

    function excludeFromFees(address account, bool excluded) public auth {
        require(_isExcludedFromFees[account] != excluded, "HTC: Account is already the value of 'excluded'");
        _isExcludedFromFees[account] = excluded;
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) public auth {
        require(automatedMarketMakerPairs[pair] != value, "HTC: Automated market maker pair is already set to that value");
        automatedMarketMakerPairs[pair] = value;
    }

    function isExcludedFromFees(address account) public view returns (bool) {
        return _isExcludedFromFees[account];
    }

    function topUserReward(uint256 rewardAmount) private {
        uint256 perReward = rewardAmount.div(25);
        for (uint i = 0; i < 25; i++) {
            IERC20(usdtToken).transferFrom(operationAddress, _topUserList[i], perReward);
        }
    }

    function getTopUserList() public view returns (address[25] memory){
        return _topUserList;
    }

    function getWhiteList() public view returns (address[30] memory){
        return _whiteList;
    }

    function setTopUserList(address _addr, uint _sort) public auth {
        _topUserList[_sort] = _addr;
    }

    function setWhiteList(address _addr, uint _sort) public auth {
        _whiteList[_sort] = _addr;
    }

    function whiteListReward(uint256 amount) private {
        uint256 perReward = amount.div(30);
        for (uint i = 0; i < 30; i++) {
            IERC20(usdtToken).transferFrom(operationAddress, _whiteList[i], perReward);
        }
    }

    function getGenesisFee() public view returns (uint256){
        uint256 currentBlockNum = block.number;
        uint256 times = currentBlockNum.sub(lastEpochBlock).div(fiveMinutesBlockNum);
        uint256 genesisFee = times * reduceGenesisFee;
        if (buyAndSellGenesisFee > genesisFee) {
            return buyAndSellGenesisFee.sub(genesisFee);
        } else {
            return 0;
        }
    }

    function _transfer(address from, address to, uint256 amount) internal {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        updateMining();

        uint256 burnAmount;
        bool takeFee = false;

        uint256 contractTokenBalance = balanceOf(address(this));
        bool canSwap = contractTokenBalance >= swapTokensAtAmount;

        if (address(this) != from && address(this) != to) {
            if (canSwap && !automatedMarketMakerPairs[from]) {
                swapAndLiquify(contractTokenBalance);
            }

            if (automatedMarketMakerPairs[from]) {
                //buy
                burnAmount = amount.mul(_buyBurnFee).div(1000);
                takeFee = true;
            } else if (automatedMarketMakerPairs[to]) {
                //sell
                burnAmount = amount.mul(_sellBurnFee).div(1000);
                takeFee = true;
            }

            if (takeFee) {
                uint256 genesisAmount = amount.mul(getGenesisFee()).div(1000);
                _tokenTransfer(from, deadWallet, genesisAmount.add(burnAmount));
                _burnFeeTotal = _burnFeeTotal.add(genesisAmount).add(burnAmount);

                uint256 lpAmount = amount.mul(_liquidityFee).div(1000);
                _tokenTransfer(from, address(this), lpAmount);

                uint256 rewardAmount = amount.mul(_rewardFee).div(1000);
                _tokenTransfer(from, address(this), rewardAmount);

                uint256 whiteAmount = amount.mul(_whiteFee).div(1000);
                _tokenTransfer(from, address(this), whiteAmount);

                uint256 feeAmount = genesisAmount.add(burnAmount);
                feeAmount = feeAmount.add(lpAmount).add(rewardAmount).add(whiteAmount);
                amount = amount > feeAmount ? amount.sub(feeAmount) : 0;
            }
        }
        _tokenTransfer(from, to, amount);
    }

    function init() public {
        IERC20(address(this)).approve(uniswapV2Router, ~uint256(0));
        IERC20(usdtToken).approve(uniswapV2Router, ~uint256(0));
    }

    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        uint256 swapAndLiquidityAmount = contractTokenBalance.mul(3).div(7);
        uint256 half = swapAndLiquidityAmount.div(2);
        uint256 otherHalf = swapAndLiquidityAmount.sub(half);

        uint256 initialBalance = IERC20(usdtToken).balanceOf(address(operationAddress));

        // swap tokens for USDT
        swapTokensForUsdt(contractTokenBalance.sub(otherHalf));

        // how much USDT did we just swap into?
        uint256 newBalance = IERC20(usdtToken).balanceOf(address(operationAddress)).sub(initialBalance);
        uint256 usdtLiquidityBalance = newBalance.mul(3).div(11);
        uint256 usdtTopBalance = newBalance.sub(usdtLiquidityBalance).div(2);
        uint256 usdtWhiteBalance = newBalance.sub(usdtLiquidityBalance).sub(usdtTopBalance);

        // add liquidity to uniswap
        addLiquidity(otherHalf, usdtLiquidityBalance);

        //reward
        topUserReward(usdtTopBalance);
        whiteListReward(usdtWhiteBalance);
    }

    function swapTokensForUsdt(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(usdtToken);

        // make the swap
        IUniswapV2Router(uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            operationAddress,
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {
        IERC20(usdtToken).transferFrom(operationAddress, address(this), usdtAmount);

        // add the liquidity
        IUniswapV2Router(uniswapV2Router).addLiquidity(
            address(this),
            address(usdtToken),
            tokenAmount,
            usdtAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            operationAddress,
            block.timestamp
        );
    }

    function withdraw(address asses, uint256 amount, address ust) public auth {
        IERC20(asses).transfer(ust, amount);
    }


    function _tokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        super._tokenTransfer(from, to, amount);
        emit Transfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal override {
        require(account != address(0), "ERC20: mint to the zero address");
        require(!miningStarted, "already start mining");

        super._mint(account, amount);

        emit Transfer(address(0), account, amount);

        miningStarted = true;
        start();
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            _approve(owner, spender, currentAllowance - amount);
        }
    }
}