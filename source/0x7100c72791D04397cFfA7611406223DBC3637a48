
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/EscrowDatabase.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/access/Ownable.sol";

contract EscrowDatabase is Ownable {
    uint256 public escrowCounter = 0;
    address[] private _factoriesContracts;
    address[] private _allEscrowContracts;
    address[] private _goodsEscrowContracts;
    address[] private _servicesEscrowContracts;
    address[] private _nftEscrowContracts;
    address[] private _sourceCodeContracts;
    address[] private _gamblingContracts;
    mapping(address => address[]) private _escrowsOfUser;

    fallback() external payable {}

    receive() external payable {}

    modifier onlyFactoriesContracts() {
        bool _found = false;

        for (uint256 i = 0; i < _factoriesContracts.length; i++) {
            if (_factoriesContracts[i] == msg.sender) {
                _found = true;
            }
        }

        require(_found, "The call is only available from the factory smart contract");
        _;
    }

    modifier factoriesAndAllContracts() {
        bool _foundInFactoriesContracts = false;
        bool _foundInAllContracts = false;

        for (uint256 i = 0; i < _factoriesContracts.length; i++) {
            if (_factoriesContracts[i] == msg.sender) {
                _foundInFactoriesContracts = true;
            }
        }

        for (uint256 i = 0; i < _allEscrowContracts.length; i++) {
            if (_allEscrowContracts[i] == msg.sender) {
                _foundInAllContracts = true;
            }
        }

        require(_foundInFactoriesContracts || _foundInAllContracts, "The call is only available from the factory or escrow smart contract");
        _;
    }

    function increaseEscrowCounter() public onlyFactoriesContracts {
        escrowCounter += 1;
    }

    function addFactoriesContracts(address _factoryAddress) public onlyOwner {
        _factoriesContracts.push(_factoryAddress);
    }

    function addAllEscrowContracts(address _allContractAddress) public onlyFactoriesContracts {
        _allEscrowContracts.push(_allContractAddress);
    }

    function addGoodsEscrowContracts(address _goodsContractAddress) public onlyFactoriesContracts {
        _goodsEscrowContracts.push(_goodsContractAddress);
    }

    function addServicesEscrowContracts(address _servicesContractAddress) public onlyFactoriesContracts {
        _servicesEscrowContracts.push(_servicesContractAddress);
    }

    function addNftEscrowContracts(address _nftContractAddress) public onlyFactoriesContracts {
        _nftEscrowContracts.push(_nftContractAddress);
    }

    function addSourceCodeEscrowContracts(address _sourceCodeContractAddress) public onlyFactoriesContracts {
        _sourceCodeContracts.push(_sourceCodeContractAddress);
    }

    function addGamblingEscrowContracts(address _gamblingContractAddress) public onlyFactoriesContracts {
        _gamblingContracts.push(_gamblingContractAddress);
    }

    function addEscrowsOfUser(address _address, address _escrowContractAddress) public factoriesAndAllContracts {
        _escrowsOfUser[_address].push(_escrowContractAddress);
    }

    function deleteFromEscrowsOfUser(address _address, address _escrowContractAddress) public factoriesAndAllContracts {
        for (uint256 i = 0; i < _escrowsOfUser[_address].length; i++) {
            if (_escrowsOfUser[_address][i] == _escrowContractAddress) {
                _escrowsOfUser[_address][i] = _escrowsOfUser[_address][_escrowsOfUser[_address].length - 1];
                _escrowsOfUser[_address].pop();
            }
        }
    }

    function getEscrowAddressById(uint256 _id) public view returns (address) {
        return _allEscrowContracts[_id - 1];
    }

    function getFactoriesContracts() public onlyOwner view returns (address[] memory) {
        return _factoriesContracts;
    }

    function getAllEscrowContracts() public view returns (address[] memory) {
        return _allEscrowContracts;
    }

    function getGoodsEscrowContracts() public view returns (address[] memory) {
        return _goodsEscrowContracts;
    }

    function getServicesEscrowContracts() public view returns (address[] memory) {
        return _servicesEscrowContracts;
    }

    function getNftEscrowContracts() public view returns (address[] memory) {
        return _nftEscrowContracts;
    }

    function getSourceCodeEscrowContracts() public view returns (address[] memory) {
        return _sourceCodeContracts;
    }

    function getGamblingEscrowContracts() public view returns (address[] memory) {
        return _gamblingContracts;
    }

    function getEscrowsOfUserByAddress(address _address) public view returns (address[] memory) {
        return _escrowsOfUser[_address];
    }
}
