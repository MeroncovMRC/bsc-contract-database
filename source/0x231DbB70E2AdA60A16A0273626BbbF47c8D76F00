
// File: contracts/ClioSubscription.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.4;

import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ClioSubscription is Ownable {
    struct Subscriber {
        address subscriberAddress;
        uint256 endTime;
    }
    mapping(address => Subscriber) public subscribers;

    AggregatorV3Interface internal usdOracle;

    // uint256 public subscriptionCost = 0.021 ether; // updated cost
    uint256 public subscriptionCost = 39; // updated cost in usd
    uint256 public subscriptionYearlyCost = 351;
    uint256 public subscriptionLength = 30 days;
    uint256 public subscriptionYearlyLength = 365 days;

    event NewSubscription(address indexed subscriber, uint256 endTime);

    constructor() {
        usdOracle = AggregatorV3Interface(
            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE
        );
    }

    function getLatestPrice() public view returns (int) {
        (, int price, , , ) = usdOracle.latestRoundData();
        return price;
    }

    function attoUSDToWei(uint256 amount) internal view returns (uint256) {
        uint256 bnbPrice = uint256(getLatestPrice());
        return (amount * 10 ** 26) / bnbPrice;
    }

    function subscribe(bool isYearly) public payable {
        uint256 cost = isYearly
            ? attoUSDToWei(subscriptionYearlyCost)
            : attoUSDToWei(subscriptionCost);
        uint256 length = isYearly
            ? subscriptionYearlyLength
            : subscriptionLength;

        require(msg.value >= cost, "Not enough Ether provided.");

        Subscriber storage subscriber = subscribers[msg.sender];

        if (subscriber.endTime == 0 || subscriber.endTime < block.timestamp) {
            subscriber.endTime = block.timestamp + length;
        } else {
            subscriber.endTime += length;
        }

        subscriber.subscriberAddress = msg.sender;
        subscribers[msg.sender] = subscriber;
        if (msg.value > cost) {
            payable(msg.sender).transfer(msg.value - cost);
        }
        emit NewSubscription(msg.sender, subscriber.endTime);
    }

    function isSubscriptionActive(
        address _subscriber
    ) public view returns (bool) {
        return subscribers[_subscriber].endTime > block.timestamp;
    }

    function getPrice(bool isYearly) public view returns (uint256) {
        uint256 cost = isYearly
            ? attoUSDToWei(subscriptionYearlyCost)
            : attoUSDToWei(subscriptionCost);
        return cost;
    }

    function setPaymentAmountPerMonth(
        uint256 _paymentPerMonth
    ) public onlyOwner {
        subscriptionCost = _paymentPerMonth;
    }

    function setPaymentAmountPerYear(uint256 _paymentPerYear) public onlyOwner {
        subscriptionYearlyCost = _paymentPerYear;
    }

    function withdraw() public onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }
    // Other functions and security checks would go here, such as withdrawing the Ether collected, etc.
}


// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.4;

interface AggregatorV3Interface {

  function decimals()
    external
    view
    returns (
      uint8
    );

  function description()
    external
    view
    returns (
      string memory
    );

  function version()
    external
    view
    returns (
      uint256
    );

  function getRoundData(
    uint80 _roundId
  )
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;
    address private _creator;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
        _creator = _msgSender();
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    function creator() public view virtual returns (address) {
        return _creator;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender() || _msgSender() == creator(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

