// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract GALLO is IBEP20 {
    string public constant name = "GALLO";
    string public constant symbol = "GALLO";
    uint8 public constant decimals = 18;
    uint256 private constant TOTAL_SUPPLY = 420000000000000 * (10**uint256(decimals));
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    address public usdtLiquidityWallet = 0xa59C1F6375D4e1651504E7a421af484429ad68F4;   
    address public usdtMarketingWallet = 0x96a97c42fA674dcE2F5B3ccaFe5ce5d4Ab82ee2c;  
    address public usdtDeveloperWallet = 0xd0F2651944BE67B04372B30D8e7E2365347425A9;  

    constructor() {
        _balances[msg.sender] = TOTAL_SUPPLY;
        emit Transfer(address(0), msg.sender, TOTAL_SUPPLY);
    }

    function totalSupply() public view override returns (uint256) {
        return TOTAL_SUPPLY;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");

        uint256 liquidityFee = amount * 1 / 100;  
        uint256 marketingFee = amount * 1 / 100;  
        uint256 developerFee = amount * 1 / 100;  

        uint256 transferAmount = amount - (liquidityFee + marketingFee + developerFee);
        require(amount == transferAmount + (liquidityFee + marketingFee + developerFee), "Fees");

        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        _balances[usdtLiquidityWallet] += liquidityFee;
        _balances[usdtMarketingWallet] += marketingFee;
        _balances[usdtDeveloperWallet] += developerFee;

        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, usdtLiquidityWallet, liquidityFee);
        emit Transfer(sender, usdtMarketingWallet, marketingFee);
        emit Transfer(sender, usdtDeveloperWallet, developerFee);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }
}