pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
}

contract StakingContract {
    address public stakeToken;
    address public rewardToken;
    mapping(address => uint256) public stakedAmount;

    constructor() {
        stakeToken=0x70D9e7eA6B71ACCdC1d411F64Daeef053c9CF492;
        rewardToken=0x6E6C522F1E54D1C4fBdc6d2C8b24408FBB8B19Ff;
    }

    function stake(uint256 amount) external {
        require(amount > 0, "Amount must be greater than zero");
        
        // Transfer stake tokens from sender to this contract
        IERC20(stakeToken).transferFrom(msg.sender, address(this), amount);
        
        // Update staked amount for the sender
        stakedAmount[msg.sender] += amount;
    }

    function unstake(uint256 amount) external {
        require(amount <= stakedAmount[msg.sender], "Insufficient staked amount");
        
        // Transfer staked UNI tokens back to the sender
        IERC20(stakeToken).transfer(msg.sender, amount);
        
        // Update staked amount for the sender
        stakedAmount[msg.sender] -= amount;
    }

    function claimReward() external {
        uint256 stakedUni = stakedAmount[msg.sender];
        require(stakedUni > 0, "No staked token found");
        
        // Calculate reward amount based on staked UNI
        uint256 rewardAmount = stakedUni / 10; // Assuming 10% annual reward rate
        
        // Transfer USDT reward tokens from this contract to the sender
        IERC20(rewardToken).transfer(msg.sender, rewardAmount);
    }
}