// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false
library TransferHelper {
    function safeApprove(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSelector(0x095ea7b3, to, value)
        );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TransferHelper: APPROVE_FAILED"
        );
    }

    function safeTransfer(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSelector(0xa9059cbb, to, value)
        );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TransferHelper: TRANSFER_FAILED"
        );
    }

    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSelector(0x23b872dd, from, to, value)
        );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TransferHelper: TRANSFER_FROM_FAILED"
        );
    }

    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}(new bytes(0));
        require(success, "TransferHelper: ETH_TRANSFER_FAILED");
    }
}

abstract contract Ownable {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!o");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "n0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface ISwapPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function token0() external view returns (address);

    function sync() external;

    function totalSupply() external view returns (uint);
}

abstract contract AbsToken is IERC20, Ownable {

    mapping(address => uint256) public _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address public fundAddress;
    address public nftAddress;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    mapping(address => bool) public _feeWhiteList;

    uint256 private _tTotal;

    ISwapRouter public immutable _swapRouter;
    mapping(address => bool) public _swapPairList;

    bool private inSwap;

    uint256 private constant MAX = ~uint256(0);

    uint256 public _buyLPDividendFee = 100; //买入lp分红 ，本币
    uint256 public _buyDestroyFee = 200; //买入销毁，本币
    uint256 public _buyLPFee = 200; //买入回流 ，本币+wbnb

    uint256 public _sellHoldDividendFee = 50; //卖出持币分红，本币
    uint256 public _sellNFTFee = 150; //卖出nft，wbnb
    uint256 public _sellLPFee = 200; //卖出回流,本币+wbnb
    uint256 public _sellFundFee = 100; //卖出基金会，wbnb

    uint256 public startTradeBlock;
    address public immutable _mainPair;
    address public  immutable _weth;

    DividendDistributor public _holderDividend;
    DividendDistributor public _lpDividend;

    address public lastLpProvider;

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor (
        address RouterAddress,
        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,
        address NFTAddress, address FundAddress
    ){
        _name = Name;
        _symbol = Symbol;
        _decimals = Decimals;

        ISwapRouter swapRouter = ISwapRouter(RouterAddress);
        _swapRouter = swapRouter;
        _allowances[address(this)][address(swapRouter)] = MAX;

        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        _weth = swapRouter.WETH();
        address mainPair = swapFactory.createPair(address(this), _weth);
        _swapPairList[mainPair] = true;

        _mainPair = mainPair;

        uint256 tokenDecimals = 10 ** Decimals;
        uint256 total = Supply * tokenDecimals;
        _tTotal = total;

        _balances[msg.sender] = total;
        emit Transfer(address(0), msg.sender, total);

        fundAddress = FundAddress;
        nftAddress = NFTAddress;

        _holderDividend = new DividendDistributor(address(this),address(this));
        _lpDividend = new DividendDistributor(address(this),_mainPair);

        _feeWhiteList[NFTAddress] = true;
        _feeWhiteList[FundAddress] = true;
        _feeWhiteList[nftAddress] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[address(swapRouter)] = true;
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[address(_holderDividend)] = true;
        _feeWhiteList[address(_lpDividend)] = true;

    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        address mainPair = _mainPair;
        bool isAddLP;
        bool takeFee;
        bool isRemoveLP;

        if (_swapPairList[from] || _swapPairList[to]) {
            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
                takeFee = true;
                if (to == _mainPair) {
                    isAddLP = _isAddLiquidity();
                    if (isAddLP) {
                        takeFee = false;
                        lastLpProvider = from;
                    }
                }

                // takeFee = false; //onlyTest
                if(!isAddLP) require(startTradeBlock>0,"not open");
            }
        }

        _tokenTransfer(from, to, amount, takeFee);

        //add to  holder dividend
        if(from != address(this) && !_swapPairList[from] && balanceOf(from)>0 ){
            _holderDividend.addProvider(from);
        }

        if(to != address(this) && !_swapPairList[to] && balanceOf(to)>0 ){
            _holderDividend.addProvider(to);
        }

        //add to lp dividend
        if(lastLpProvider!=address(0)){
            _lpDividend.addProvider(lastLpProvider);
        }

        if (!inSwap && from != address(this)&& !isAddLP && !isRemoveLP) {
            if (to == mainPair) {
                //触发持币分红。
                _holderDividend.process(500000);
            }else if(from == mainPair){
                //触发lp分红
                _lpDividend.process(500000);
            }
        }
    }

    event WatchLiquidityLog(uint256,bool);

    function _isAddLiquidity() internal  returns (bool isAdd){
        isAdd =  address(_swapRouter).balance > 0;
        emit WatchLiquidityLog(address(_swapRouter).balance,isAdd);
    }

    function _funTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount = tAmount * 99 / 100;
        _takeTransfer(
            sender,
            fundAddress,
            feeAmount
        );
        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        bool takeFee
    ) private {
        uint256 senderBalance = _balances[sender];
        senderBalance -= tAmount;
        _balances[sender] = senderBalance;

        uint256 feeAmount;

        if (takeFee) {
            bool isSell;
            uint256 swapFeeAmount;
            uint256 destroyFeeAmount;
            if (_swapPairList[sender]) {//Buy
                //lp分红器
                uint256 _buyLPDividendAmount = tAmount * (_buyLPDividendFee ) / 10000;
                _takeTransfer(sender, address(_lpDividend), _buyLPDividendAmount);

                feeAmount+=_buyLPDividendAmount;
                swapFeeAmount = tAmount * (_buyLPFee ) / 10000;
                destroyFeeAmount = tAmount * _buyDestroyFee / 10000;
            } else if (_swapPairList[recipient]) {//Sell
                isSell = true;
                //持币分红器
                uint256 _sellHoldDividendAmount = tAmount * (_sellHoldDividendFee ) / 10000;
                _takeTransfer(sender, address(_holderDividend), _sellHoldDividendAmount);

                feeAmount+=_sellHoldDividendAmount;
                swapFeeAmount = tAmount * (_sellNFTFee + _sellLPFee + _sellFundFee) / 10000;
            }

            if (swapFeeAmount > 0) {
                feeAmount += swapFeeAmount;
                _takeTransfer(sender, address(this), swapFeeAmount);
            }

            if (destroyFeeAmount > 0) {
                feeAmount += destroyFeeAmount;
                _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyFeeAmount);
            }

            if (isSell && !inSwap) {
                uint256 contractTokenBalance = _balances[address(this)];
                uint256 numToSell = swapFeeAmount * 230 / 100;
                if (numToSell > contractTokenBalance) {
                    numToSell = contractTokenBalance;
                }
                swapTokenForFund(numToSell);
            }
        }

        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function swapTokenForFund(uint256 tokenAmount) public lockTheSwap {
        if (tokenAmount == 0) {
            return;
        }

        uint256 lpFee = _buyLPFee + _sellLPFee;
        uint256 fundFee =  _sellFundFee;
        uint256 NFTFee = _sellLPFee;
        uint256 totalFee = lpFee + fundFee + NFTFee;

        address distributor = address(this);
        uint256 balance = distributor.balance;

        uint256 lpAmount = tokenAmount * (lpFee/2) / totalFee;
        totalFee -= lpFee / 2;

        address weth = _weth;
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = weth;
        _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount - lpAmount,
            0,
            path,
            distributor,
            block.timestamp
        );

        balance = distributor.balance - balance;

        uint256 fundBalance = balance * fundFee / totalFee;
        if (fundBalance > 0) {
            TransferHelper.safeTransferETH(fundAddress,fundBalance);
        }

        uint256 nftBalance = balance * NFTFee / totalFee;
        if (nftBalance > 0) {
           TransferHelper.safeTransferETH(nftAddress,nftBalance);
        }

        uint256 lpBalance = balance * (lpFee / 2)  / totalFee;
        if (lpBalance > 0 && lpAmount > 0) {
            _swapRouter.addLiquidityETH{value : lpBalance}(
                address(this),
                lpAmount,
                0,
                0,
                fundAddress,
                block.timestamp
            );
        }
    }

    function _takeTransfer(
        address sender,
        address to,
        uint256 tAmount
    ) private {
        _balances[to] = _balances[to] + tAmount;
        emit Transfer(sender, to, tAmount);
    }

    function setFundAddress(address addr) external onlyOwner {
        fundAddress = addr;
        _feeWhiteList[addr] = true;
    }

    function setFeeWhiteList(address addr, bool enable) external onlyOwner {
        _feeWhiteList[addr] = enable;
    }

    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {
        for (uint i = 0; i < addr.length; i++) {
            _feeWhiteList[addr[i]] = enable;
        }
    }

    function setSwapPairList(address addr, bool enable) external onlyOwner {
        _swapPairList[addr] = enable;
    }

    function claimBalance(uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            payable(fundAddress).transfer(amount);
        }
    }

    function claimToken(address token, uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            IERC20(token).transfer(fundAddress, amount);
        }
    }

    receive() external payable {}


    function startTrade() external onlyOwner {
        require(0 == startTradeBlock, "T");
        startTradeBlock = block.number;
    }

    function setBuyFee(uint256 lpDividendFee, uint256 destroyFee, uint256 lpFee) external onlyOwner {
        _buyLPDividendFee = lpDividendFee;
        _buyDestroyFee = destroyFee;
        _buyLPFee = lpFee;
    }

    function setSellFee(uint256 holdDividendFee, uint256 destroyFee, uint256 lpFee, uint256 fundFee) external onlyOwner {
        _sellHoldDividendFee = holdDividendFee;
        _sellNFTFee = destroyFee;
        _sellLPFee = lpFee;
        _sellFundFee = fundFee;
    }

    function setLPDividendExclude(address[] calldata addr,bool status) external {
        for (uint i = 0; i < addr.length; i++) {
            _lpDividend.setExclude(addr[i],status);
        }
    }

    function setHolderDividendExclude(address[] calldata addr,bool status) external {
        for (uint i = 0; i < addr.length; i++) {
            _holderDividend.setExclude(addr[i],status);
        }
    }
}

contract SHJ  is AbsToken {
    constructor() AbsToken(
        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),
        "SHJ",
        "SHJ",
        18,
        1000000000000000,
        address(0xA3cF44bCacC45FD23cb93354d299362291Cf24C3), //NFT
        address(0xbE8e9B02983b6A0c9D7AE83Bf133D253Cb282dcA) //Fund
    ){

    }
}

contract DividendDistributor {
    address public _token;

    address public _rewardToken;
    address public _baseToken;

    address[] public providers;
    mapping(address => uint256) public providerIndex;
    mapping(address => bool) public excludeProvider;

    uint256 public currentIndex;
    uint256 public rewardCondition;
    uint256 public progressLPTime;
    uint256 public _progressBlockDebt = 300;

    constructor (address rewardToken,address baseToken) {
        _token = msg.sender;
        _rewardToken = rewardToken;
        _baseToken = baseToken;
    }

    modifier onlyToken() {
        require(msg.sender == _token); _;
    }

    function getLPHolderLength() public view returns (uint256){
        return providers.length;
    }

    function addProvider(address adr) external onlyToken {
        if (0 == providerIndex[adr]) {
            if (0 == providers.length || providers[0] != adr) {
                uint256 size;
                assembly {size := extcodesize(adr)}
                if (size > 0) {
                    return;
                }
                providerIndex[adr] = providers.length;
                providers.push(adr);
            }
        }
    }

    function process(uint256 gas) external {
        uint256 timestamp = block.timestamp;
        if (progressLPTime + _progressBlockDebt > timestamp) {
            return;
        }
        IERC20 baseToken = IERC20(_baseToken);
        uint totalPair = baseToken.totalSupply();
        if (0 == totalPair) {
            return;
        }

        IERC20 token = IERC20(_rewardToken);
        uint256 tokenBalance = token.balanceOf(address(this));
        if (tokenBalance < rewardCondition) {
            return;
        }

        address shareHolder;
        uint256 pairBalance;
        uint256 amount;

        uint256 shareholderCount = providers.length;

        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }
            shareHolder = providers[currentIndex];
            pairBalance = baseToken.balanceOf(shareHolder);
            if (pairBalance > 0 && !excludeProvider[shareHolder]) {
                amount = tokenBalance * pairBalance / totalPair;
                if (amount > 0) {
                    token.transfer(shareHolder, amount);
                }
            }

            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }

        progressLPTime = timestamp;
    }

    function setExclude(address addr, bool enable) external onlyToken {
        excludeProvider[addr] = enable;
    }

    function setRewardCondition(uint256 amount) external onlyToken {
        rewardCondition = amount;
    }
}