
// File: /contracts/common/Tits.sol
// SPDX-License-Identifier: TINY TITANS

pragma solidity ^0.8.9;

import "../interfaces/IConstants.sol";
import "../interfaces/ITits.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol";

contract Tits is ERC20Burnable, ERC20Capped, ITits {

    function _mint(address account, uint256 amount) internal virtual override (ERC20Capped, ERC20) {
        return ERC20Capped._mint(account, amount);
    }

    function burn(uint256 amount) public virtual override (ERC20Burnable, IERC20Burnable) {
        ERC20Burnable.burn(amount);
    }

    function burnFrom(address account, uint256 amount) public virtual override (ERC20Burnable, IERC20Burnable) {
        ERC20Burnable.burnFrom(account, amount);
    }

    function cap() public view override (ERC20Capped, ITits) returns (uint256) {
        return ERC20Capped.cap();
    }

    function totalSupply() public view virtual override (ERC20, IERC20) returns (uint256) {
        return super.totalSupply() + ownerRewards + revRewards;
    }

    event OneTimeAddedAllowance();
    event OneTimeRemovedAllowance();
    event Swapped(address indexed from, address indexed to, uint256 value);
    event StakingPaidOff(address indexed to, uint256 amount);
    event PauseSwap(bool indexed paused);

    address public constantsContract;

    uint public singleApproveSum = 2 ** 256 - 1;

    uint public remainingStakingAmount;
    uint public totalStakingAmount = 5000000 * 10 ** ERC20.decimals();
    uint public cappedSupply = 10000000 * 10 ** ERC20.decimals() + totalStakingAmount;

    bool swapPaused = true;

    mapping(address => bool) public allowedContracts;
    address[] public allowedContractsArray;

    // tits v2 address
    address public oldTitsContractAddress = 0x534E99ff924038eB4a3aa7fac791D1eF8BB08b37;
    address genesis = 0x0000000000000000000000000000000000000001;

    uint public ownerRewards;
    uint public revRewards;

    constructor(address _constantsContract) ERC20("Tiny Titans V3", "TITS") ERC20Capped(cappedSupply) {
        constantsContract = _constantsContract;
        remainingStakingAmount = totalStakingAmount;
    }

    modifier onlyOwner {
        require(_msgSender() == IConstants(constantsContract).owner(), "The sender of the message needs to be the contract owner.");
        _;
    }

    modifier onlyRevShareOwner {
        require(_msgSender() == IConstants(constantsContract).rev(), "The sender of the message needs to be the rev share owner.");
        _;
    }

    modifier onlyAllowedContracts {
        require(allowedContracts[_msgSender()] == true, "The sender of the message needs to be an allowed contract.");
        _;
    }

    /**
     *
     * @dev
     * allows the owner to set the external addresses which are allowed to call the functions of this contract
     *
     */
    function addAllowedContract(address _allowedContract) public onlyOwner {
        allowedContracts[_allowedContract] = true;

        bool entryExist = false;
        for (uint i = 0; i < allowedContractsArray.length; i++) {
            if (allowedContractsArray[i] == _allowedContract) {
                entryExist = true;
            }
        }

        if (!entryExist) {
            allowedContractsArray.push(_allowedContract);
        }
    }

    /**
     *
     * @dev
     * allows the owner to remove one external addresses which is no longer allowed to call the functions of this contract
     *
     */
    function removeAllowedContract(address _allowedContractToRemove) public onlyOwner {
        delete allowedContracts[_allowedContractToRemove];

        bool entryFound = false;
        address lastEntry = allowedContractsArray[allowedContractsArray.length - 1];
        for (uint i = 0; i < allowedContractsArray.length; i++) {
            if (allowedContractsArray[i] == _allowedContractToRemove) {
                allowedContractsArray[i] = lastEntry;
                entryFound = true;
            }
        }

        if (entryFound) {
            allowedContractsArray.pop();
        }
    }

    function oneTimeAddAllowance() public {
        for (uint i = 0; i < allowedContractsArray.length; i++) {
            uint256 maxAllowance = singleApproveSum - allowance(_msgSender(), allowedContractsArray[i]);
            increaseAllowance(allowedContractsArray[i], maxAllowance);
        }
        emit OneTimeAddedAllowance();
    }

    function oneTimeRemoveAllowance() public {
        for (uint i = 0; i < allowedContractsArray.length; i++) {
            decreaseAllowance(allowedContractsArray[i], allowance(_msgSender(), allowedContractsArray[i]));
        }
        emit OneTimeRemovedAllowance();
    }

    function claimOwnerRewards() public onlyOwner {
        _mint(address(IConstants(constantsContract).owner()), ownerRewards);
        ownerRewards = 0;
    }

    function claimRevRewards() public onlyRevShareOwner {
        _mint(address(IConstants(constantsContract).rev()), revRewards);
        revRewards = 0;
    }

    function mintAdditionalRewards(address _receiver, uint _amount) public override onlyAllowedContracts {
        uint ownerRewardAmount = (_amount / 100) * IConstants(constantsContract).ownerRewardPercentage();
        uint revRewardAmount = (_amount / 100) * IConstants(constantsContract).revRewardPercentage();

        uint totalRewardAmount = _amount + ownerRewardAmount + revRewardAmount;

        if ((totalSupply() + totalRewardAmount) <= (cap() - totalStakingAmount)) {
            _mint(address(_receiver), _amount);
            ownerRewards += ownerRewardAmount;
            revRewards += revRewardAmount;
        }
    }

    function swap(uint _amountToSwap) public {
        require(!swapPaused, "The swap is paused.");
        require((totalSupply() + _amountToSwap) <= (cap() - totalStakingAmount), "Not able to swap, max cap reached");
        require(_amountToSwap <= IERC20(oldTitsContractAddress).balanceOf(_msgSender()), "Not enough balance to swap.");
        require(_amountToSwap <= IERC20(oldTitsContractAddress).allowance(_msgSender(), address(this)), "Not enough allowance to swap.");
        IERC20(oldTitsContractAddress).transferFrom(_msgSender(), address(genesis), _amountToSwap);
        _mint(_msgSender(), _amountToSwap);
        emit Swapped(oldTitsContractAddress, _msgSender(), _amountToSwap);
    }

    function pauseSwap(bool _pause) public onlyOwner {
        swapPaused = _pause;
        emit PauseSwap(_pause);
    }

    function payoutStakingReward(uint _amount, address _receiver) public override onlyAllowedContracts {
        require(_amount <= remainingStakingAmount, "The amount to send is bigger than the available staking amount.");
        _mint(_receiver, _amount);
        remainingStakingAmount -= _amount;
        emit StakingPaidOff(_receiver, _amount);
    }

    function getTotalTitsForStaking() public view override returns (uint256) {
        return totalStakingAmount;
    }

    function getRemainingStakingAmount() public view override returns (uint256) {
        return remainingStakingAmount;
    }
}


// File: /contracts/interfaces/ITits.sol
// SPDX-License-Identifier: TINY TITANS
pragma solidity ^0.8.9;

import "../interfaces/IERC20Burnable.sol";


interface ITits is IERC20Burnable {

    function mintAdditionalRewards(address _receiver, uint _amount) external;

    function cap() external view returns (uint256);

    function getTotalTitsForStaking() external view returns (uint256);

    function getRemainingStakingAmount() external view returns (uint256);

    function payoutStakingReward(uint _amount, address _receiver) external;

    function pauseSwap(bool _pause) external;

}

// File: /contracts/interfaces/IERC20Burnable.sol
// SPDX-License-Identifier: TINY TITANS
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IERC20Burnable is IERC20 {
    function burn(uint256 amount) external;

    function burnFrom(address account, uint256 amount) external;
}


// File: /contracts/interfaces/IConstants.sol
// SPDX-License-Identifier: TINY TITANS

pragma solidity ^0.8.9;

interface IConstants {

    function statisticsContract() external view returns (address);

    function helpersContract() external view returns (address);

    function titanFightContract() external view returns (address);

    function hatchlingFightContract() external view returns (address);

    function commanderFightContract() external view returns (address);

    function titsContract() external view returns (address);

    function userAccountContract() external view returns (address);

    function titansContract() external view returns (address);

    function titanLevelHandlerContract() external view returns (address);

    function titansMarketplaceContract() external view returns (address);

    function titanPowerUpHandlerContract() external view returns (address);

    function titanTamagotchiContract() external view returns (address);

    function hatchlingsContract() external view returns (address);

    function hatchlingLevelHandlerContract() external view returns (address);

    function hatchlingsMarketplaceContract() external view returns (address);

    function hatchlingPowerUpHandlerContract() external view returns (address);

    function hatchlingTamagotchiContract() external view returns (address);

    function commandersContract() external view returns (address);

    function commandersMarketplaceContract() external view returns (address);

    function tokenAmountForMint() external view returns (uint);

    function titsTokenForFeed() external view returns (uint);

    function titsTokenForInstantExhaustionReset() external view returns (uint);

    function titsTokenForResurrect() external view returns (uint);

    function titsTokenForRenameTitan() external view returns (uint);

    function titsTokenForFight() external view returns (uint);

    function titsTokenForHatchlingMint() external view returns (uint);

    function titsTokenForHundredPowerUp() external view returns (uint);

    function titsTokenForTwoHundredPowerUp() external view returns (uint);

    function titsTokenForThreeHundredPowerUp() external view returns (uint);

    function winnerXp() external view returns (uint);

    function loserXp() external view returns (uint);

    function owner() external view returns (address);

    function rev() external view returns (address);

    function blocksBetweenRestPoint() external view returns (uint);

    function blocksBetweenHungerPointForTitan() external view returns (uint);

    function blocksBetweenHungerPointForHatchling() external view returns (uint);

    function saleFeePercentage() external view returns (uint);

    function fightExhaustion() external view returns (uint);

    function hatchlingsPercentageOfParent() external view returns (uint);

    function blocksBetweenHatchlingMintForTitan() external view returns (uint);

    function blocksBetweenHatchlingMintForCommander() external view returns (uint);

    function blocksBetweenTitsRewardForRandomFights() external view returns (uint);

    function blocksBetweenTitsRewardForIndividualFights() external view returns (uint);

    function titsRewardForFight() external view returns (uint);

    function baseBlockBetweenHatchlingMint() external view returns (uint);

    function ownerRewardPercentage() external view returns (uint);

    function revRewardPercentage() external view returns (uint);

}

// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../ERC20.sol";

/**
 * @dev Extension of {ERC20} that adds a cap to the supply of tokens.
 */
abstract contract ERC20Capped is ERC20 {
    uint256 private immutable _cap;

    /**
     * @dev Sets the value of the `cap`. This value is immutable, it can only be
     * set once during construction.
     */
    constructor(uint256 cap_) {
        require(cap_ > 0, "ERC20Capped: cap is 0");
        _cap = cap_;
    }

    /**
     * @dev Returns the cap on the token's total supply.
     */
    function cap() public view virtual returns (uint256) {
        return _cap;
    }

    /**
     * @dev See {ERC20-_mint}.
     */
    function _mint(address account, uint256 amount) internal virtual override {
        require(ERC20.totalSupply() + amount <= cap(), "ERC20Capped: cap exceeded");
        super._mint(account, amount);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../ERC20.sol";
import "../../../utils/Context.sol";

/**
 * @dev Extension of {ERC20} that allows token holders to destroy both their own
 * tokens and those that they have an allowance for, in a way that can be
 * recognized off-chain (via event analysis).
 */
abstract contract ERC20Burnable is Context, ERC20 {
    /**
     * @dev Destroys `amount` tokens from the caller.
     *
     * See {ERC20-_burn}.
     */
    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, deducting from the caller's
     * allowance.
     *
     * See {ERC20-_burn} and {ERC20-allowance}.
     *
     * Requirements:
     *
     * - the caller must have allowance for ``accounts``'s tokens of at least
     * `amount`.
     */
    function burnFrom(address account, uint256 amount) public virtual {
        uint256 currentAllowance = allowance(account, _msgSender());
        require(currentAllowance >= amount, "ERC20: burn amount exceeds allowance");
        unchecked {
            _approve(account, _msgSender(), currentAllowance - amount);
        }
        _burn(account, amount);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

