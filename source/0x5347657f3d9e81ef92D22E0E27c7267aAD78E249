
// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/XimbiaLockV3.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract XimbiaLockV3 {
    address public ximbiaWallet;
    address public ximbiaToken;

    uint public ximbiaLockDuration = 30 days;
    uint public ximbiaPercentage = 10;
    uint public ximbiaAmount = 150_000 ether;

    struct Deposit {
        uint amount;
        uint totalInvested;
        uint amountPerCycle;
        uint unlockTime;
        uint lockDuration;
        address token;
    }

    struct DepositShow {
        uint amount;
        uint totalInvested;
        uint amountPerCycle;
        uint unlockTime;
        uint lockDuration;
        uint timeLeft;
        address token;
    }

    struct User {
        Deposit[] deposits;
        bool exists;
    }

    mapping(address => User) public users;

    constructor(address _ximbiaToken, address _ximbiaWallet) {
        ximbiaWallet = _ximbiaWallet;
        ximbiaToken = _ximbiaToken;
    }

    function deposit() external {
        require(
            msg.sender == ximbiaWallet,
            "Only Ximbia or Biotic wallets can deposit"
        );
        require(users[msg.sender].exists == false, "User already exists");
        address token = ximbiaToken;
        uint toTransfer = 0;

        uint amount = ximbiaAmount;
        uint amountPerCycle = (amount * ximbiaPercentage) / 100;
        users[msg.sender].deposits.push(
            Deposit(
                amount,
                amount,
                amountPerCycle,
                block.timestamp + ximbiaLockDuration,
                ximbiaLockDuration,
                token
            )
        );
        toTransfer = amount;

        users[msg.sender].exists = true;
        IERC20(token).transferFrom(msg.sender, address(this), toTransfer);
    }

    function withdraw() external {
        require(users[msg.sender].exists == true, "User does not exist");
        uint totalAmount = 0;
        for (uint i = 0; i < users[msg.sender].deposits.length; i++) {
            if (
                users[msg.sender].deposits[i].amount > 0 &&
                users[msg.sender].deposits[i].unlockTime <= block.timestamp
            ) {
                uint amountCycle = users[msg.sender].deposits[i].amountPerCycle;
                if (users[msg.sender].deposits[i].amount <= amountCycle) {
                    amountCycle = users[msg.sender].deposits[i].amount;
                }
                users[msg.sender].deposits[i].amount -= amountCycle;
                users[msg.sender].deposits[i].unlockTime += users[msg.sender]
                    .deposits[i]
                    .lockDuration;
                totalAmount += amountCycle;
            }
        }
        require(totalAmount > 0, "Nothing to withdraw");
        IERC20(users[msg.sender].deposits[0].token).transfer(
            msg.sender,
            totalAmount
        );
    }

    function getDeposits(
        address user
    ) external view returns (Deposit[] memory) {
        return users[user].deposits;
    }

    function getDepositsShow(
        address user
    ) external view returns (DepositShow[] memory) {
        DepositShow[] memory depositsShow = new DepositShow[](
            users[user].deposits.length
        );
        for (uint i = 0; i < users[user].deposits.length; i++) {
            uint timeLeft = users[user].deposits[i].unlockTime > block.timestamp
                ? users[user].deposits[i].unlockTime - block.timestamp
                : 0;
            depositsShow[i] = DepositShow(
                users[user].deposits[i].amount,
                users[user].deposits[i].totalInvested,
                users[user].deposits[i].amountPerCycle,
                users[user].deposits[i].unlockTime,
                users[user].deposits[i].lockDuration,
                timeLeft,
                users[user].deposits[i].token
            );
        }
        return depositsShow;
    }

    function getDepositsCount(address user) external view returns (uint) {
        return users[user].deposits.length;
    }

    function canWihdraw(address _user) external view returns (bool) {
        if (users[_user].exists == false) {
            return false;
        }
        for (uint i = 0; i < users[_user].deposits.length; i++) {
            if (
                users[_user].deposits[i].unlockTime <= block.timestamp &&
                users[_user].deposits[i].amount > 0
            ) {
                return true;
            }
        }
        return false;
    }
}

