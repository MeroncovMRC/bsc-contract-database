pragma solidity ^0.8.2;

contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 10000 * 10 ** 18;
    string public name = "My Token";
    string public symbol = "TKN";
    uint public decimals = 18;

    uint public sellFeePercentage = 50; // Taxa de vânzare în procente

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);

    constructor() {
        balances[msg.sender] = totalSupply;
    }

    function balanceOf(address owner) public view returns (uint) {
        return balances[owner];
    }

    function transfer(address to, uint value) public returns (bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');

        uint fee = 0;
        uint transferAmount = value;

        if (msg.sender != address(this)) {
            fee = value * sellFeePercentage / 100;
            transferAmount = value - fee;
        }

        balances[to] += transferAmount;
        balances[msg.sender] -= value;
        balances[address(this)] += fee; // Transferați taxa la contract

        emit Transfer(msg.sender, to, transferAmount);
        emit Transfer(msg.sender, address(this), fee);

        return true;
    }

    function transferFrom(address from, address to, uint value) public returns (bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');

        uint fee = 0;
        uint transferAmount = value;

        if (from != address(this)) {
            fee = value * sellFeePercentage / 100;
            transferAmount = value - fee;
        }

        balances[to] += transferAmount;
        balances[from] -= value;
        balances[address(this)] += fee; // Transferați taxa la contract

        emit Transfer(from, to, transferAmount);
        emit Transfer(from, address(this), fee);

        return true;
    }

    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function setSellFeePercentage(uint percentage) external {
        require(percentage <= 100, "Invalid fee percentage");
        sellFeePercentage = percentage;
    }
}