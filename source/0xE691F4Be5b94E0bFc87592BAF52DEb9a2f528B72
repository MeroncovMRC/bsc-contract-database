pragma solidity ^0.8.0;

contract Invitation {

    struct Account {
        address inviter;
        address[] invitees;
    }

    mapping(address => Account) accounts;
    address constant public root = address(1);

    event Bind(address indexed inviter, address indexed invitee);
    constructor(){}

    function bind(address inviter) public {

        require(inviter != address(0), "not zero account");
        require(inviter != msg.sender, "can not be yourself");


        if (accounts[msg.sender].inviter == address(0)) {
            if ((accounts[inviter].inviter == address(0) && accounts[inviter].inviter != root)) {
                _bindRoot(msg.sender);
            } else {
                accounts[msg.sender].inviter = inviter;
                accounts[inviter].invitees.push(msg.sender);
                emit Bind(inviter, msg.sender);
            }
        }

    }

    function _bindRoot(address _msgSender) private {
        accounts[_msgSender].inviter = root;
        accounts[root].invitees.push(_msgSender);
        emit Bind(root, _msgSender);
    }

    function getInviter(address user) external view returns (address inviter) {
        return accounts[user].inviter;
    }

    function getInvitees(address user) external view returns (address[] memory invitees) {
        return accounts[user].invitees;
    }

}