// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    string public name = "WALLY BSC";
    string public symbol = "WLLY";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    uint256 public liquidityFee = 3;
    uint256 public marketingFee = 3;
    uint256 public constant FEE_DIVISOR = 100;
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant TOTAL_SUPPLY = 10**9 * 10**18; // 1 billion tokens
    address public marketingWallet = 0x3c31b4911e0E7e6818EB535625C1940a64526432;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        totalSupply = TOTAL_SUPPLY;
        balanceOf[msg.sender] = TOTAL_SUPPLY;

        emit Transfer(address(0), msg.sender, TOTAL_SUPPLY);
    }

    function transfer(address to, uint256 value) external returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool) {
        _transfer(from, to, value);
        _approve(
            from,
            msg.sender,
            allowance[from][msg.sender] - value
        );
        return true;
    }

    function approve(address spender, uint256 value) external returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 value
    ) private {
        require(from != address(0), "Invalid sender address");
        require(to != address(0), "Invalid recipient address");
        require(value > 0, "Invalid transfer amount");
        require(balanceOf[from] >= value, "Insufficient balance");

        uint256 feeAmount = value * (liquidityFee + marketingFee) / FEE_DIVISOR;
        uint256 transferAmount = value - feeAmount;

        balanceOf[from] -= value;
        balanceOf[to] += transferAmount;

        emit Transfer(from, to, transferAmount);

        // Deduct fees and send to liquidity and marketing wallets
        _takeLiquidity(feeAmount * liquidityFee / (liquidityFee + marketingFee));
        _takeMarketing(feeAmount * marketingFee / (liquidityFee + marketingFee));
    }

    function _takeLiquidity(uint256 amount) private {
        // Add liquidity logic here
        // Example: transfer tokens to the liquidity contract
        // Be sure to handle any necessary approvals

        // liquidityContract.transfer(amount);
    }

    function _takeMarketing(uint256 amount) private {
        balanceOf[marketingWallet] += amount;
        emit Transfer(address(0), marketingWallet, amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 value
    ) private {
        require(owner != address(0), "Invalid owner address");
        require(spender != address(0), "Invalid spender address");

        allowance[owner][spender] = value;
        emit Approval(owner, spender, value);
    }
}