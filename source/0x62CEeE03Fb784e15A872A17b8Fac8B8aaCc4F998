/**
 *Submitted for verification at BscScan.com on 2021-12-11
*/

pragma solidity ^0.5.17;

interface IERC20 {
    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);

    event Approval(address indexed owner, address indexed spender, uint value);
}

contract Context {
    constructor () internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}

contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor (string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }
    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }

    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        assembly {codehash := extcodehash(account)}
        return (codehash != 0x0 && codehash != accountHash);
    }
}

contract Ownable is Context {

    address public _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () public {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeERC20 {
    using SafeMath for uint;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) {// Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);

    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);

    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);

    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeFactory {

    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint) external view returns (address pair);

    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

contract GFSToken is ERC20Detailed, Context, Ownable {

    using SafeERC20 for IERC20;

    using Address for address;

    using SafeMath for uint;

    mapping(address => uint) private _balances;

    mapping(address => mapping(address => uint)) private _allowances;

    uint private _totalSupply = 100000000 * 10 ** 18;

    uint public _botMaxBuyAmount = 1000 * 10 ** 18;

    bool public _isAntiBot = true;

    mapping(address => bool) private _botAddress;

    uint private _botBuyCount = 0;

    uint public _botAntiCount = 20;

    mapping(address => bool) private _whiteList;

    IPancakeRouter01 public PancakeRouter01;

    address public pancakePair;

    uint256 public _intervalMinutesForSwap = 1 * 1 minutes;

    uint256 private _startTimeForSwap;

    uint public _taxFee = 2;

    address public _usdt = 0x55d398326f99059fF775485246999027B3197955;

    address public _burnAddress = 0x000000000000000000000000000000000000dEaD;

    bool public _isBurn = true;

    bool public _isBuyBackBurn = true;

    uint public _min2UsdtAmount = 2000 * 10 ** 18;

    constructor () public ERC20Detailed("GameFiSwap Token", "GFS", 18) {
        address msgSender = _msgSender();
        //mint
        _balances[msgSender] = _balances[msgSender].add(_totalSupply);
        emit Transfer(address(0), msgSender, _totalSupply);
        _setWhiteList(msgSender, true);
        PancakeRouter01 = IPancakeRouter01(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        pancakePair = IPancakeFactory(PancakeRouter01.factory()).createPair(address(this), _usdt);
    }

    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint) {
        return _balances[account];
    }

    function transfer(address recipient, uint amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function _transfer(address sender, address recipient, uint amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        bool isMy = sender == address(this) || recipient == address(this);
        if (_isAntiBot && _botBuyCount < _botAntiCount && sender == pancakePair) {
            if (!_whiteList[recipient] && !isMy) {
                require(amount <= _botMaxBuyAmount && !_botAddress[recipient], "Oh,no~");
                _botAddress[recipient] = true;
            }
            _botBuyCount ++;
        }
        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");

        uint256 needBurn;
        if (_isBurn && !_whiteList[sender] && !_whiteList[recipient] && !isMy) {
            needBurn = amount.mul(_taxFee).div(100);
            address burnAddress = _isBuyBackBurn ? address(this) : _burnAddress;
            _balances[burnAddress] = _balances[burnAddress].add(needBurn);
            emit Transfer(sender, burnAddress, needBurn);
            bool is2Usdt = balanceOf(address(this)) >= _min2UsdtAmount;
            if (recipient == pancakePair && is2Usdt && _startTimeForSwap + _intervalMinutesForSwap <= block.timestamp) {
                _startTimeForSwap = block.timestamp;
                //uniswap swapExactTokensForTokens does not let path1 equal to ,use owner receive token,manual buy back burn
                _swapTokenToToken(address(this), _usdt, _owner);
            }
        }
        amount = amount.sub(needBurn);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);

    }

    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _swapTokenToToken(address p1, address p2, address to) private {
        address[] memory path = new address[](2);
        path[0] = p1;
        path[1] = p2;
        uint tokenBalance = IERC20(p1).balanceOf(address(this));
        IERC20(p1).approve(address(PancakeRouter01), tokenBalance);
        PancakeRouter01.swapExactTokensForTokens(
            tokenBalance,
            0,
            path,
            to,
            block.timestamp
        );
    }

    function _setWhiteList(address add, bool enable) private {
        _whiteList[add] = enable;
    }

    function manualBuyBackBurn() external onlyOwner {
        _swapTokenToToken(_usdt, address(this), _burnAddress);
    }

    function transferForeignToken(address token) external onlyOwner returns (bool _sent){
        require(token != address(this), "Can't let you take all native token");
        uint256 _contractBalance = IERC20(token).balanceOf(address(this));
        _sent = IERC20(token).transfer(_msgSender(), _contractBalance);
    }

    function setWhiteList(address add, bool enable) external onlyOwner {
        _setWhiteList(add, enable);
    }

    function setIsAntBot(bool enable) external onlyOwner {
        _isAntiBot = enable;
    }

    function setBotMaxBuyAmount(uint amount) external onlyOwner {
        _botMaxBuyAmount = amount;
    }

    function setTxFee(uint fee) external onlyOwner {
        _taxFee = fee;
    }

    function setIsBuyBackBurn(bool isBuyBackBurn) external onlyOwner {
        _isBuyBackBurn = isBuyBackBurn;
    }

    function setMin2UsdtAmount(uint min2UsdtAmount) external onlyOwner {
        _min2UsdtAmount = min2UsdtAmount;
    }

    function setIsBurn(bool isBurn) external onlyOwner {
        _isBurn = isBurn;
    }

    function setBotAntiCount(uint count) external onlyOwner {
        _botAntiCount = count;
    }

    function getIsWhiteList(address add) external view onlyOwner returns (bool) {
        return _whiteList[add];
    }
}