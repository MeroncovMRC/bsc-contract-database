
// File: contracts/Strategy.sol
// SPDX-License-Identifier: AGPL-3.0

pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

import { BaseStrategy, StrategyParams } from "./BaseStrategy.sol";
import { IERC20 } from "../interfaces/IERC20.sol";
import { LowGasSafeMath } from "./library/LowGasSafeMath.sol";
import { SafeMath } from "./library/SafeMath.sol";
import { SafeERC20 } from "./library/SafeERC20.sol";
import { Babylonian } from "./library/Babylonian.sol";
import { SafeCast } from "./library/SafeCast.sol";
import { Address } from "./library/Address.sol";
import { ERC20 } from "./library/ERC20.sol";
import { Math } from "./library/Math.sol";

import {
	IAlgebraSwapCallback
} from "../algebra/core/contracts/interfaces/callback/IAlgebraSwapCallback.sol";
import {
	FullMath,
	LiquidityAmounts
} from "../algebra/periphery/contracts/libraries/LiquidityAmounts.sol";
import { IAlgebraPool } from "../algebra/core/contracts/interfaces/IAlgebraPool.sol";
import { TickMath } from "../algebra/core/contracts/libraries/TickMath.sol";
import { ILpDepositor } from "../interfaces/ILpDepositor.sol";
import { IThenaRouter } from "../interfaces/IThenaRouter.sol";
import { IHypervisor } from "../interfaces/IHypervisor.sol";
import { IUniProxy } from "../interfaces/IUniProxy.sol";

interface IUniV3Router {
	struct ExactInputParams {
		bytes path;
		address recipient;
		uint256 deadline;
		uint256 amountIn;
		uint256 amountOutMinimum;
	}

	function exactInput(ExactInputParams calldata params)
		external
		payable
		returns (uint256 amountOut);
}

contract Strategy is BaseStrategy, IAlgebraSwapCallback {
	using SafeERC20 for IERC20;
	using Address for address;
	using SafeMath for uint256;
	using LowGasSafeMath for int256;
	using TickMath for int24;

	struct Ticks {
		int24 lowerTick;
		int24 upperTick;
	}

	struct CallbackData {
		address token0;
		address token1;
		address pool;
	}

	// Needed to avoid error compiler stack too deep
	struct LocalVariablesSwapAndStake {
		IERC20 token0;
		IERC20 token1;
		IHypervisor hypervisor;
		address pool;
		address proxy;
		bool zeroForOne;
		uint256 intermediateAmount0;
		uint256 intermediateAmount1;
		uint256 finalAmount0;
		uint256 finalAmount1;
		uint256[4] minIn;
		bytes data;
	}

	struct LocalVariablesBalanceAmounts {
		uint160 sqrtRatioX96;
		uint16 algebraPoolFee;
		bool zeroForOne;
		int256 amount0Delta;
		int256 amount1Delta;
		uint256 amountSpecified;
	}

	/**
	 * @dev Tokens Used:
	 * {wbnb} - Required for liquidity routing when doing swaps.
	 * {thenaReward} - Token generated by staking our funds, THENA token.
	 * {thenaLp} - LP Token for Thena exchange, in v3 is an Hypervisor token.
	 * {want} - Tokens that the strategy maximizes, in v3 is an Hypervisor token.
	 */
	address internal constant wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c); // WBNB
	address public constant thenaReward = address(0xF4C8E32EaDEC4BFe97E0F595AdD0f4450a863a11); // THENA
	address internal constant busd = address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); // BUSD
	address internal constant usdt = address(0x55d398326f99059fF775485246999027B3197955); // USDT

	address public constant v3Router = address(0x327Dd3208f0bCF590A66110aCB6e5e6941A4EfA0); // AlgebraFinance Router
	address public constant v2Router = address(0x20a304a7d126758dfe6B243D0fc515F83bCA8431); // Thena v2 Router

	ILpDepositor public masterChef; // {masterChef} - Depositor contract for Thena
	IHypervisor public thenaLp; // {thenaLp} - Hypervisor vault token
	IAlgebraPool public algebraPool; // {algebraPool} - UniV3 type pool

	IERC20 public token0;
	IERC20 public token1;

	uint256 public dust;
	uint256 public rewardDust;

	uint256 public maxSlippageIn; // bps
	uint256 public maxSlippageOut; // bps

	uint24 public maxSwapSlippage;

	bool internal abandonRewards;

	uint256 internal constant basisOne = 10000;
	uint256 internal constant basisOnePool = 1000000;
	uint256 internal constant MAX = type(uint256).max;
	uint256 internal constant Q96 = 0x1000000000000000000000000;

	uint256 public minProfit;
	bool internal forceHarvestTriggerOnce;

	address internal constant voterTHE = 0x981B04CBDCEE0C510D331fAdc7D6836a77085030; // We send some extra THE here
	uint256 public keepTHE; // Percentage of THE we re-lock for boost (in basis points)

	constructor(
		address _vault,
		address _masterChef,
		address _thenaLp
	) public BaseStrategy(_vault) {
		require(_thenaLp == address(want), "Wrong lpToken");

		thenaLp = IHypervisor(_thenaLp);

		token0 = thenaLp.token0();
		token1 = thenaLp.token1();

		assert(address(token0) == usdt);

		algebraPool = thenaLp.pool();

		maxSlippageIn = 1;
		maxSlippageOut = 1;

		maxSwapSlippage = 50000; // 5%

		maxReportDelay = 30 days;
		minProfit = 1e21;

		keepTHE = 2000;

		dust = 1e14;
		rewardDust = 10**uint256((ERC20(address(thenaReward)).decimals())); // 1 THENA

		masterChef = ILpDepositor(_masterChef);
		require(masterChef.TOKEN() == address(want), "Wrong masterChef");

		assert(masterChef.rewardToken() == thenaReward);

		_giveAllowances();
	}

	//---------------------------------//
	//       UniV3 callback func       //
	//---------------------------------//

	/// @notice Algebra callback function, called back on pool.swap
	function algebraSwapCallback(
		int256 amount0Delta,
		int256 amount1Delta,
		bytes calldata data
	) external override {
		CallbackData memory info = abi.decode(data, (CallbackData));

		require(msg.sender == info.pool, "callback caller");

		if (amount0Delta > 0) IERC20(info.token0).safeTransfer(msg.sender, uint256(amount0Delta));
		if (amount1Delta > 0) IERC20(info.token1).safeTransfer(msg.sender, uint256(amount1Delta));
	}

	//-------------------------------//
	//       Public View func        //
	//-------------------------------//

	function name() external view override returns (string memory) {
		return string(abi.encodePacked("ThenaStrategy ", "Pool ", ERC20(address(want)).symbol()));
	}

	function estimatedTotalAssets() public view override returns (uint256) {
		return balanceOfWant().add(balanceOfLPInMasterChef());
	}

	function balanceOfWant() public view returns (uint256) {
		return want.balanceOf(address(this));
	}

	function balanceOfLPInMasterChef() public view returns (uint256 _amount) {
		_amount = masterChef.balanceOf(address(this));
	}

	function balanceOfReward() public view returns (uint256 _thenaRewards) {
		_thenaRewards = IERC20(thenaReward).balanceOf(address(this));
	}

	function pendingRewards() public view returns (uint256 _thenaBalance) {
		_thenaBalance = masterChef.earned(address(this));
	}

	function estimatedHarvest() public view returns (uint256 profitInBusd) {
		uint256 thenaBalance = pendingRewards().add(balanceOfReward());

		(uint256 profitInWbnb, ) =
			IThenaRouter(v2Router).getAmountOut(thenaBalance, thenaReward, wbnb);

		(profitInBusd, ) = IThenaRouter(v2Router).getAmountOut(profitInWbnb, wbnb, busd);
	}

	//-------------------------------//
	//      Internal Core func       //
	//-------------------------------//

	function prepareReturn(uint256 _debtOutstanding)
		internal
		override
		returns (
			uint256 _profit,
			uint256 _loss,
			uint256 _debtPayment
		)
	{
		// Claim THENA rewards
		_claimRewards();
		// Send some THENA to voter
		_sendToVoter();
		// Swap THENA for wBNB
		_sellRewards();
		// Swap wBNB for token0 & token1
		_convertToUnderlyingTokens();
		// Convert token0 & token1 into lpToken but only if there are assets
		if (_balanceOfToken(token0) > dust || _balanceOfToken(token1) > dust) {
			_buildLpToken();
		}

		uint256 assets = estimatedTotalAssets();
		uint256 wantBalance = balanceOfWant();
		uint256 debt = vault.strategies(address(this)).totalDebt;

		_debtPayment = _debtOutstanding;
		uint256 amountToFree = _debtPayment.add(_profit);

		if (assets >= debt) {
			_debtPayment = _debtOutstanding;
			_profit = assets.sub(debt);

			amountToFree = _profit.add(_debtPayment);

			if (amountToFree > 0 && wantBalance < amountToFree) {
				liquidatePosition(amountToFree);

				uint256 newLoose = balanceOfWant();

				// If we dont have enough money adjust _debtOutstanding and only change profit if needed
				if (newLoose < amountToFree) {
					if (_profit > newLoose) {
						_profit = newLoose;
						_debtPayment = 0;
					} else {
						_debtPayment = Math.min(newLoose.sub(_profit), _debtPayment);
					}
				}
			}
		} else {
			// Serious loss should never happen but if it does lets record it accurately
			_loss = debt.sub(assets);
		}

		// We're done harvesting, so reset our trigger if we used it
		forceHarvestTriggerOnce = false;
	}

	/**
	 * @notice
	 *  In simple autocompounding adjustPosition only deposits the LpTokens in masterChef.
	 */
	function adjustPosition(uint256 _debtOutstanding) internal override {
		// Lp assets before the operation
		uint256 pooledBefore = balanceOfLPInMasterChef();

		uint256 amountIn = balanceOfWant();
		if (amountIn > dust) {
			// Deposit all LpTokens in Thena masterChef
			_depositLpIntoMasterChef(amountIn);
			_enforceSlippageIn(amountIn, pooledBefore);
		}
	}

	function liquidatePosition(uint256 _amountNeeded)
		internal
		override
		returns (uint256 _liquidatedAmount, uint256 _loss)
	{
		if (estimatedTotalAssets() <= _amountNeeded) {
			_liquidatedAmount = liquidateAllPositions();
			return (_liquidatedAmount, _amountNeeded.sub(_liquidatedAmount));
		}

		uint256 looseAmount = balanceOfWant();
		if (_amountNeeded > looseAmount) {
			uint256 toExitAmount = _amountNeeded.sub(looseAmount);

			_withdrawLpFromMasterChef(toExitAmount);

			_liquidatedAmount = Math.min(balanceOfWant(), _amountNeeded);
			_loss = _amountNeeded.sub(_liquidatedAmount);

			_enforceSlippageOut(toExitAmount, _liquidatedAmount.sub(looseAmount));
		} else {
			_liquidatedAmount = _amountNeeded;
		}
	}

	function liquidateAllPositions() internal override returns (uint256 _liquidated) {
		uint256 eta = estimatedTotalAssets();

		_withdrawLpFromMasterChef(balanceOfLPInMasterChef());

		_liquidated = balanceOfWant();

		_enforceSlippageOut(eta, _liquidated);
	}

	/**
	 * @notice
	 *  This withdraws Lp tokens and transfers them into newStrategy.
	 */
	function prepareMigration(address _newStrategy) internal override {
		_withdrawFromMasterChefAndTransfer(_newStrategy);
	}

	//-------------------------------//
	//      Internal Swap func       //
	//-------------------------------//

	/**
	 * @notice
	 *  Swaps THENA for WBNB.
	 */
	function _sellRewards() internal {
		uint256 thenaRewards = balanceOfReward();

		if (thenaRewards > rewardDust) {
			// THENA to WBNB
			IUniV3Router(v3Router).exactInput(
				IUniV3Router.ExactInputParams({
					path: abi.encodePacked(thenaReward, wbnb),
					recipient: address(this),
					deadline: block.timestamp,
					amountIn: thenaRewards,
					amountOutMinimum: 1
				})
			);
		}
	}

	function _sendToVoter() internal {
		uint256 thenaBalance = balanceOfReward();
		uint256 sendToVoter = thenaBalance.mul(keepTHE).div(basisOne);

		if (sendToVoter > 0) {
			IERC20(thenaReward).safeTransfer(voterTHE, sendToVoter);
		}
	}

	/**
	 * @notice
	 *  Swaps half of the wbnb for token0 and token1 and adds liquidity.
	 */
	function _convertToUnderlyingTokens() internal {
		uint256 wbnbBalance = IERC20(wbnb).balanceOf(address(this));

		if (wbnbBalance > 1e10) {
			IUniV3Router(v3Router).exactInput(
				IUniV3Router.ExactInputParams({
					path: abi.encodePacked(wbnb, usdt),
					recipient: address(this),
					deadline: block.timestamp,
					amountIn: wbnbBalance,
					amountOutMinimum: 1
				})
			);
		}

		uint256 usdtBalance = IERC20(usdt).balanceOf(address(this));

		if (usdtBalance > 1e10) {
			IUniV3Router(v3Router).exactInput(
				IUniV3Router.ExactInputParams({
					path: abi.encodePacked(usdt, address(token1)),
					recipient: address(this),
					deadline: block.timestamp,
					amountIn: usdtBalance.div(2),
					amountOutMinimum: 1
				})
			);
		}
	}

	//-------------------------------//
	//    Internal Liquidity func    //
	//-------------------------------//

	/**
	 * @notice
	 *  Converts token0 and token1 into Hypervisor shares (want).
	 */
	function _buildLpToken() internal {
		LocalVariablesSwapAndStake memory vars;

		vars.hypervisor = thenaLp;

		vars.token0 = token0;
		vars.token1 = token1;
		vars.pool = address(algebraPool);
		vars.proxy = vars.hypervisor.whitelistedAddress();

		vars.data = abi.encode(
			CallbackData({
				token0: address(vars.token0),
				token1: address(vars.token1),
				pool: vars.pool
			})
		);

		uint256 amount0Desired = vars.token0.balanceOf(address(this));
		uint256 amount1Desired = vars.token1.balanceOf(address(this));

		(vars.intermediateAmount0, vars.intermediateAmount1) = _balanceAmounts(
			vars.pool,
			amount0Desired,
			amount1Desired,
			vars.data
		);

		// We check which token is in excess to define final amounts
		vars.zeroForOne = _getSwapDirection(
			address(vars.hypervisor),
			vars.intermediateAmount0,
			vars.intermediateAmount1
		);

		if (vars.zeroForOne) {
			// If token0 is in excess we let all token1 in
			vars.finalAmount1 = vars.intermediateAmount1;
			vars.finalAmount0 = Math.min(
				_getDepositAmountMax(address(vars.hypervisor), vars.proxy, false, vars.finalAmount1),
				vars.intermediateAmount0
			);
		} else {
			// If token1 is in excess we let all token0 in
			vars.finalAmount0 = vars.intermediateAmount0;
			vars.finalAmount1 = Math.min(
				_getDepositAmountMax(address(vars.hypervisor), vars.proxy, true, vars.finalAmount0),
				vars.intermediateAmount1
			);
		}

		IUniProxy(vars.proxy).deposit(
			vars.finalAmount0,
			vars.finalAmount1,
			address(this),
			address(vars.hypervisor),
			vars.minIn
		);
	}

	function _balanceAmounts(
		address pool,
		uint256 amount0Desired,
		uint256 amount1Desired,
		bytes memory data
	) internal returns (uint256 finalAmount0, uint256 finalAmount1) {
		LocalVariablesBalanceAmounts memory vars;

		(vars.sqrtRatioX96, , vars.algebraPoolFee, , , , ) = IAlgebraPool(pool).globalState();

		// Determine the amount to swap, it is not 100% precise but is a very good approximation
		(vars.amountSpecified, vars.zeroForOne) = _getSwapAmount(
			address(thenaLp),
			amount0Desired,
			amount1Desired,
			vars.sqrtRatioX96,
			vars.algebraPoolFee
		);

		if (vars.amountSpecified > 0) {
			(vars.amount0Delta, vars.amount1Delta) = _swap(
				pool,
				vars.amountSpecified,
				vars.zeroForOne,
				data
			);

			finalAmount0 = uint256(SafeCast.toInt256(amount0Desired).sub(vars.amount0Delta));
			finalAmount1 = uint256(SafeCast.toInt256(amount1Desired).sub(vars.amount1Delta));
		} else {
			return (amount0Desired, amount1Desired);
		}
	}

	function _getSwapAmount(
		address hypervisor,
		uint256 amount0,
		uint256 amount1,
		uint160 sqrtRatioX96,
		uint24 swapFee
	) internal view returns (uint256 amountToSwap, bool zeroForOne) {
		(uint256 total0, uint256 total1) = IHypervisor(hypervisor).getTotalAmounts();

		uint256 totalSupply = IHypervisor(hypervisor).totalSupply();

		if (total0 == 0 && total1 > 0) {
			zeroForOne = true;
			amountToSwap = amount0;
		} else if (total1 == 0 && total0 > 0) {
			zeroForOne = false;
			amountToSwap = amount1;
		} else {
			zeroForOne = amount0.mul(total1) > amount1.mul(total0);

			if (zeroForOne) {
				uint256 numerator = (amount0.mul(total1)).sub(amount1.mul(total0));

				uint256 intermediate =
					FullMath.mulDiv(total0.mul(basisOnePool - swapFee), sqrtRatioX96, Q96);

				uint256 denominator =
					(total1.mul(basisOnePool)).add(FullMath.mulDiv(intermediate, sqrtRatioX96, Q96));

				amountToSwap = FullMath.mulDiv(basisOnePool, numerator, denominator);
			} else {
				uint256 intermediate1 =
					FullMath.mulDiv((amount1.mul(total0)).sub(amount0.mul(total1)), sqrtRatioX96, Q96);
				uint256 numerator = FullMath.mulDiv(intermediate1, sqrtRatioX96, Q96);

				uint256 intermediate2 = FullMath.mulDiv(total0.mul(basisOnePool), sqrtRatioX96, Q96);
				uint256 denominator =
					(total1.mul(basisOnePool - swapFee)).add(
						FullMath.mulDiv(intermediate2, sqrtRatioX96, Q96)
					);

				amountToSwap = FullMath.mulDiv(basisOnePool, numerator, denominator);
			}
		}
	}

	function _swap(
		address pool,
		uint256 amountIn,
		bool zeroForOne,
		bytes memory data
	) internal returns (int256, int256) {
		(uint160 _sqrtPriceX96, , , , , , ) = IAlgebraPool(pool).globalState();

		uint256 _slippageSqrt =
			zeroForOne
				? Babylonian.sqrt(basisOnePool - maxSwapSlippage)
				: Babylonian.sqrt(basisOnePool + maxSwapSlippage);

		return
			IAlgebraPool(pool).swap(
				address(this),
				zeroForOne, // Swap direction, true: token0 -> token1, false: token1 -> token0
				SafeCast.toInt256(amountIn),
				uint160(uint256(((_sqrtPriceX96 * _slippageSqrt) / 1000))), // sqrtPriceLimitX96
				data
			);
	}

	function _getSwapDirection(
		address hypervisor,
		uint256 amount0Desired,
		uint256 amount1Desired
	) internal view returns (bool zeroForOne) {
		(uint256 total0, uint256 total1) = IHypervisor(hypervisor).getTotalAmounts();

		zeroForOne = amount0Desired.mul(total1) > amount1Desired.mul(total0);
	}

	//--------------------------------//
	//    Internal MasterChef func    //
	//--------------------------------//

	/**
	 * @notice
	 *  Deposits an amount of LpTokens in masterChef.
	 */
	function _depositLpIntoMasterChef(uint256 amount) internal {
		masterChef.deposit(amount);
	}

	/**
	 * @notice
	 *  Withdraws a certain amount from masterChef.
	 */
	function _withdrawLpFromMasterChef(uint256 amount) internal {
		uint256 toWithdraw = Math.min(amount, balanceOfLPInMasterChef());
		if (toWithdraw > 0) {
			masterChef.withdraw(toWithdraw);
		}
	}

	/**
	 * @notice
	 *  Claim all THENA rewards from masterChef.
	 */
	function _claimRewards() internal {
		masterChef.getReward();
	}

	/**
	 * @notice
	 *  AbandonRewards withdraws lp without rewards.
	 * @dev
	 *  Specify where to withdraw to. Migrate function already has safeTransfer of want.
	 */
	function _withdrawFromMasterChefAndTransfer(address _to) internal {
		if (abandonRewards) {
			_withdrawLpFromMasterChef(balanceOfLPInMasterChef());
		} else {
			_claimRewards();
			_withdrawLpFromMasterChef(balanceOfLPInMasterChef());
			IERC20(thenaReward).safeTransfer(_to, balanceOfReward());
		}
	}

	//-------------------------------//
	//     Internal Helpers func     //
	//-------------------------------//

	function _giveAllowances() internal {
		IERC20(address(thenaLp)).safeApprove(address(masterChef), 0);
		IERC20(address(thenaLp)).safeApprove(address(masterChef), MAX);

		IERC20(wbnb).safeApprove(v3Router, 0);
		IERC20(wbnb).safeApprove(v3Router, MAX);

		IERC20(usdt).safeApprove(v3Router, 0);
		IERC20(usdt).safeApprove(v3Router, MAX);

		IERC20(thenaReward).safeApprove(v3Router, 0);
		IERC20(thenaReward).safeApprove(v3Router, MAX);

		IERC20(token0).safeApprove(address(thenaLp), 0);
		IERC20(token0).safeApprove(address(thenaLp), MAX);

		IERC20(token1).safeApprove(address(thenaLp), 0);
		IERC20(token1).safeApprove(address(thenaLp), MAX);
	}

	/// @notice Get the maximum amount of token to deposit for the given amount of pair token
	/// @param hypervisor Hypervisor Address
	/// @param proxy Uniproxy Address
	/// @param zeroForOne true if deposit token0, false if token1
	/// @param amountIn Amount of token to deposit
	/// @return amountPair Minimum amounts of the pair token to deposit
	function _getDepositAmountMax(
		address hypervisor,
		address proxy,
		bool zeroForOne,
		uint256 amountIn
	) internal view returns (uint256 amountPair) {
		(uint256 total0, uint256 total1) = IHypervisor(hypervisor).getTotalAmounts();

		uint256 depositDelta = IUniProxy(proxy).depositDelta();
		uint256 deltaScale = IUniProxy(proxy).deltaScale();
		uint256 intermediate = FullMath.mulDiv(amountIn, depositDelta, deltaScale);

		if (zeroForOne) {
			amountPair = FullMath.mulDiv(intermediate, total1, total0);
		} else {
			amountPair = FullMath.mulDiv(intermediate, total0, total1);
		}
	}

	/**
	 * @notice
	 *  Revert if slippage out exceeds our requirement.
	 * @dev
	 *  Enforce that amount exited didn't slip beyond our tolerance.
	 *  Check for positive slippage, just in case.
	 */
	function _enforceSlippageOut(uint256 _intended, uint256 _actual) internal view {
		uint256 exitSlipped = _intended > _actual ? _intended.sub(_actual) : 0;
		uint256 maxLoss = _intended.mul(maxSlippageOut).div(basisOne);
		require(exitSlipped <= maxLoss, "Slipped Out!");
	}

	/**
	 * @notice
	 *  Revert if slippage in exceeds our requirement.
	 * @dev
	 *  Enforce that amount exchange from want to LP tokens didn't slip beyond our tolerance.
	 *  Check for positive slippage, just in case.
	 */
	function _enforceSlippageIn(uint256 _amountIn, uint256 _pooledBefore) internal view {
		uint256 pooledDelta = balanceOfLPInMasterChef().sub(_pooledBefore);
		uint256 joinSlipped = _amountIn > pooledDelta ? _amountIn.sub(pooledDelta) : 0;
		uint256 maxLoss = _amountIn.mul(maxSlippageIn).div(basisOne);
		require(joinSlipped <= maxLoss, "Slipped in!");
	}

	function _balanceOfToken(IERC20 token) internal view returns (uint256) {
		return token.balanceOf(address(this));
	}

	function protectedTokens() internal view override returns (address[] memory) {}

	//-----------------------------//
	//    Public Triggers func     //
	//-----------------------------//

	/**
	 * @notice
	 *  Use this to determine when to harvest.
	 */
	function harvestTrigger(uint256 callCostInWei) public view override returns (bool) {
		StrategyParams memory params = vault.strategies(address(this));

		// Should not trigger if strategy is not active (no assets and no debtRatio)
		if (!isActive()) return false;

		// Trigger if profit generated is higher than minProfit
		if (estimatedHarvest() > minProfit) return true;

		// Harvest no matter what once we reach our maxDelay
		if (block.timestamp.sub(params.lastReport) > maxReportDelay) return true;

		// Trigger if we want to manually harvest, but only if our gas price is acceptable
		if (forceHarvestTriggerOnce) return true;

		// Otherwise, we don't harvest
		return false;
	}

	function ethToWant(uint256 _amtInWei) public view override returns (uint256) {}

	function tendTrigger(uint256 callCostInWei) public view override returns (bool) {
		return balanceOfWant() > 0;
	}

	//-------------------------------//
	//    Protected Setters func     //
	//-------------------------------//

	function setMinProfit(uint256 _minAcceptableProfit) external onlyKeepers {
		minProfit = _minAcceptableProfit;
	}

	/**
	 * @notice
	 *  This allows us to manually harvest with our keeper as needed.
	 */
	function setForceHarvestTriggerOnce(bool _forceHarvestTriggerOnce) external onlyKeepers {
		forceHarvestTriggerOnce = _forceHarvestTriggerOnce;
	}

	function setParams(uint256 _maxSlippageIn, uint256 _maxSlippageOut)
		external
		onlyVaultManagers
	{
		require(_maxSlippageIn <= basisOne);
		maxSlippageIn = _maxSlippageIn;

		require(_maxSlippageOut <= basisOne);
		maxSlippageOut = _maxSlippageOut;
	}

	/// @notice maxSwapSlippage in 1e6 scale, e.g 1% 10000, 10% 100000, etc
	function setSwapSlippage(uint24 _maxSwapSlippage) external onlyVaultManagers {
		require(maxSwapSlippage <= basisOne, "Slippage too high");
		maxSwapSlippage = _maxSwapSlippage;
	}

	function setDust(uint256 _dust, uint256 _rewardDust) external onlyVaultManagers {
		dust = _dust;
		rewardDust = _rewardDust;
	}

	function setKeep(uint256 _keepTHE) external onlyVaultManagers {
		require(_keepTHE <= basisOne, "Wrong input");
		keepTHE = _keepTHE;
	}

	/**
	 * @notice
	 *  Manually returns lps in masterChef to the strategy. Used in emergencies.
	 */
	function emergencyWithdrawFromMasterChef() external onlyVaultManagers {
		_withdrawLpFromMasterChef(balanceOfLPInMasterChef());
	}

	/**
	 * @notice
	 *  Manually returns lps in masterChef to the strategy when Thena masterchef is in emergency mode.
	 */
	function emergencyWithdrawFromMasterChefInEmergencyMode() external onlyVaultManagers {
		masterChef.emergencyWithdraw();
	}

	function emergencyWithdrawFromHypervisor(uint256[4] memory minAmounts)
		external
		onlyGovernance
	{
		_withdrawLpFromMasterChef(balanceOfLPInMasterChef());
		// governance is where the underlying tokens are sent, address(this) where the shares are pulled from
		IHypervisor(thenaLp).withdraw(balanceOfWant(), governance(), address(this), minAmounts);
	}

	/**
	 * @notice
	 *  Toggle for whether to abandon rewards or not on emergency withdraws from masterChef.
	 */
	function setAbandonRewards(bool abandon) external onlyVaultManagers {
		abandonRewards = abandon;
	}

	receive() external payable {}
}


// File: contracts/BaseStrategy.sol
pragma experimental ABIEncoderV2;

import { IERC20 } from "../interfaces/IERC20.sol";
import { SafeMath } from "./library/SafeMath.sol";
import { SafeERC20 } from "./library/SafeERC20.sol";

struct StrategyParams {
	uint256 performanceFee;
	uint256 activation;
	uint256 debtRatio;
	uint256 minDebtPerHarvest;
	uint256 maxDebtPerHarvest;
	uint256 lastReport;
	uint256 totalDebt;
	uint256 totalGain;
	uint256 totalLoss;
}

interface VaultAPI is IERC20 {
	function name() external view returns (string calldata);

	function symbol() external view returns (string calldata);

	function decimals() external view returns (uint256);

	function apiVersion() external pure returns (string memory);

	function permit(
		address owner,
		address spender,
		uint256 amount,
		uint256 expiry,
		bytes calldata signature
	) external returns (bool);

	// NOTE: Vyper produces multiple signatures for a given function with "default" args
	function deposit() external returns (uint256);

	function deposit(uint256 amount) external returns (uint256);

	function deposit(uint256 amount, address recipient) external returns (uint256);

	// NOTE: Vyper produces multiple signatures for a given function with "default" args
	function withdraw() external returns (uint256);

	function withdraw(uint256 maxShares) external returns (uint256);

	function withdraw(uint256 maxShares, address recipient) external returns (uint256);

	function token() external view returns (address);

	function strategies(address _strategy) external view returns (StrategyParams memory);

	function pricePerShare() external view returns (uint256);

	function totalAssets() external view returns (uint256);

	function depositLimit() external view returns (uint256);

	function maxAvailableShares() external view returns (uint256);

	/**
	 * View how much the Vault would increase this Strategy's borrow limit,
	 * based on its present performance (since its last report). Can be used to
	 * determine expectedReturn in your Strategy.
	 */
	function creditAvailable() external view returns (uint256);

	/**
	 * View how much the Vault would like to pull back from the Strategy,
	 * based on its present performance (since its last report). Can be used to
	 * determine expectedReturn in your Strategy.
	 */
	function debtOutstanding() external view returns (uint256);

	/**
	 * View how much the Vault expect this Strategy to return at the current
	 * block, based on its present performance (since its last report). Can be
	 * used to determine expectedReturn in your Strategy.
	 */
	function expectedReturn() external view returns (uint256);

	/**
	 * This is the main contact point where the Strategy interacts with the
	 * Vault. It is critical that this call is handled as intended by the
	 * Strategy. Therefore, this function will be called by BaseStrategy to
	 * make sure the integration is correct.
	 */
	function report(
		uint256 _gain,
		uint256 _loss,
		uint256 _debtPayment
	) external returns (uint256);

	/**
	 * This function should only be used in the scenario where the Strategy is
	 * being retired but no migration of the positions are possible, or in the
	 * extreme scenario that the Strategy needs to be put into "Emergency Exit"
	 * mode in order for it to exit as quickly as possible. The latter scenario
	 * could be for any reason that is considered "critical" that the Strategy
	 * exits its position as fast as possible, such as a sudden change in
	 * market conditions leading to losses, or an imminent failure in an
	 * external dependency.
	 */
	function revokeStrategy() external;

	/**
	 * View the governance address of the Vault to assert privileged functions
	 * can only be called by governance. The Strategy serves the Vault, so it
	 * is subject to governance defined by the Vault.
	 */
	function governance() external view returns (address);

	/**
	 * View the management address of the Vault to assert privileged functions
	 * can only be called by management. The Strategy serves the Vault, so it
	 * is subject to management defined by the Vault.
	 */
	function management() external view returns (address);

	/**
	 * View the guardian address of the Vault to assert privileged functions
	 * can only be called by guardian. The Strategy serves the Vault, so it
	 * is subject to guardian defined by the Vault.
	 */
	function guardian() external view returns (address);
}

/**
 * This interface is here for the keeper bot to use.
 */
interface StrategyAPI {
	function name() external view returns (string memory);

	function vault() external view returns (address);

	function want() external view returns (address);

	function apiVersion() external pure returns (string memory);

	function keeper() external view returns (address);

	function isActive() external view returns (bool);

	function delegatedAssets() external view returns (uint256);

	function estimatedTotalAssets() external view returns (uint256);

	function tendTrigger(uint256 callCost) external view returns (bool);

	function tend() external;

	function harvestTrigger(uint256 callCost) external view returns (bool);

	function harvest() external;

	event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);
}

interface HealthCheck {
	function check(
		uint256 profit,
		uint256 loss,
		uint256 debtPayment,
		uint256 debtOutstanding,
		uint256 totalDebt
	) external view returns (bool);
}

/**
 * @title Yearn Base Strategy
 * @author yearn.finance
 * @notice
 *  BaseStrategy implements all of the required functionality to interoperate
 *  closely with the Vault contract. This contract should be inherited and the
 *  abstract methods implemented to adapt the Strategy to the particular needs
 *  it has to create a return.
 *
 *  Of special interest is the relationship between `harvest()` and
 *  `vault.report()'. `harvest()` may be called simply because enough time has
 *  elapsed since the last report, and not because any funds need to be moved
 *  or positions adjusted. This is critical so that the Vault may maintain an
 *  accurate picture of the Strategy's performance. See  `vault.report()`,
 *  `harvest()`, and `harvestTrigger()` for further details.
 */

abstract contract BaseStrategy {
	using SafeMath for uint256;
	using SafeERC20 for IERC20;
	string public metadataURI;

	// health checks
	bool public doHealthCheck;
	address public healthCheck;

	/**
	 * @notice
	 *  Used to track which version of `StrategyAPI` this Strategy
	 *  implements.
	 * @dev The Strategy's version must match the Vault's `API_VERSION`.
	 * @return A string which holds the current API version of this contract.
	 */
	function apiVersion() public pure returns (string memory) {
		return "0.4.3";
	}

	/**
	 * @notice This Strategy's name.
	 * @dev
	 *  You can use this field to manage the "version" of this Strategy, e.g.
	 *  `StrategySomethingOrOtherV1`. However, "API Version" is managed by
	 *  `apiVersion()` function above.
	 * @return This Strategy's name.
	 */
	function name() external view virtual returns (string memory);

	/**
	 * @notice
	 *  The amount (priced in want) of the total assets managed by this strategy should not count
	 *  towards Yearn's TVL calculations.
	 * @dev
	 *  You can override this field to set it to a non-zero value if some of the assets of this
	 *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.
	 *  Note that this value must be strictly less than or equal to the amount provided by
	 *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.
	 *  Also note that this value is used to determine the total assets under management by this
	 *  strategy, for the purposes of computing the management fee in `Vault`
	 * @return
	 *  The amount of assets this strategy manages that should not be included in Yearn's Total Value
	 *  Locked (TVL) calculation across it's ecosystem.
	 */
	function delegatedAssets() external view virtual returns (uint256) {
		return 0;
	}

	VaultAPI public vault;
	address public strategist;
	address public rewards;
	address public keeper;

	IERC20 public want;

	// So indexers can keep track of this
	event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);

	event UpdatedStrategist(address newStrategist);

	event UpdatedKeeper(address newKeeper);

	event UpdatedRewards(address rewards);

	event UpdatedMinReportDelay(uint256 delay);

	event UpdatedMaxReportDelay(uint256 delay);

	event UpdatedProfitFactor(uint256 profitFactor);

	event UpdatedDebtThreshold(uint256 debtThreshold);

	event EmergencyExitEnabled();

	event UpdatedMetadataURI(string metadataURI);

	// The minimum number of seconds between harvest calls. See
	// `setMinReportDelay()` for more details.
	uint256 public minReportDelay;

	// The maximum number of seconds between harvest calls. See
	// `setMaxReportDelay()` for more details.
	uint256 public maxReportDelay;

	// The minimum multiple that `callCost` must be above the credit/profit to
	// be "justifiable". See `setProfitFactor()` for more details.
	uint256 public profitFactor;

	// Use this to adjust the threshold at which running a debt causes a
	// harvest trigger. See `setDebtThreshold()` for more details.
	uint256 public debtThreshold;

	// See note on `setEmergencyExit()`.
	bool public emergencyExit;

	// modifiers
	modifier onlyAuthorized() {
		require(msg.sender == strategist || msg.sender == governance(), "!authorized");
		_;
	}

	modifier onlyEmergencyAuthorized() {
		require(
			msg.sender == strategist ||
				msg.sender == governance() ||
				msg.sender == vault.guardian() ||
				msg.sender == vault.management(),
			"!authorized"
		);
		_;
	}

	modifier onlyStrategist() {
		require(msg.sender == strategist, "!strategist");
		_;
	}

	modifier onlyGovernance() {
		require(msg.sender == governance(), "!authorized");
		_;
	}

	modifier onlyKeepers() {
		require(
			msg.sender == keeper ||
				msg.sender == strategist ||
				msg.sender == governance() ||
				msg.sender == vault.guardian() ||
				msg.sender == vault.management(),
			"!authorized"
		);
		_;
	}

	modifier onlyVaultManagers() {
		require(msg.sender == vault.management() || msg.sender == governance(), "!authorized");
		_;
	}

	constructor(address _vault) public {
		_initialize(_vault, msg.sender, msg.sender, msg.sender);
	}

	/**
	 * @notice
	 *  Initializes the Strategy, this is called only once, when the
	 *  contract is deployed.
	 * @dev `_vault` should implement `VaultAPI`.
	 * @param _vault The address of the Vault responsible for this Strategy.
	 * @param _strategist The address to assign as `strategist`.
	 * The strategist is able to change the reward address
	 * @param _rewards  The address to use for pulling rewards.
	 * @param _keeper The adddress of the _keeper. _keeper
	 * can harvest and tend a strategy.
	 */
	function _initialize(
		address _vault,
		address _strategist,
		address _rewards,
		address _keeper
	) internal {
		require(address(want) == address(0), "Strategy already initialized");

		vault = VaultAPI(_vault);
		want = IERC20(vault.token());
		want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)
		strategist = _strategist;
		rewards = _rewards;
		keeper = _keeper;

		// initialize variables
		minReportDelay = 0;
		maxReportDelay = 86400;
		profitFactor = 100;
		debtThreshold = 0;

		vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled
	}

	function setHealthCheck(address _healthCheck) external onlyVaultManagers {
		healthCheck = _healthCheck;
	}

	function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {
		doHealthCheck = _doHealthCheck;
	}

	/**
	 * @notice
	 *  Used to change `strategist`.
	 *
	 *  This may only be called by governance or the existing strategist.
	 * @param _strategist The new address to assign as `strategist`.
	 */
	function setStrategist(address _strategist) external onlyAuthorized {
		require(_strategist != address(0));
		strategist = _strategist;
		emit UpdatedStrategist(_strategist);
	}

	/**
	 * @notice
	 *  Used to change `keeper`.
	 *
	 *  `keeper` is the only address that may call `tend()` or `harvest()`,
	 *  other than `governance()` or `strategist`. However, unlike
	 *  `governance()` or `strategist`, `keeper` may *only* call `tend()`
	 *  and `harvest()`, and no other authorized functions, following the
	 *  principle of least privilege.
	 *
	 *  This may only be called by governance or the strategist.
	 * @param _keeper The new address to assign as `keeper`.
	 */
	function setKeeper(address _keeper) external onlyAuthorized {
		require(_keeper != address(0));
		keeper = _keeper;
		emit UpdatedKeeper(_keeper);
	}

	/**
	 * @notice
	 *  Used to change `rewards`. EOA or smart contract which has the permission
	 *  to pull rewards from the vault.
	 *
	 *  This may only be called by the strategist.
	 * @param _rewards The address to use for pulling rewards.
	 */
	function setRewards(address _rewards) external onlyStrategist {
		require(_rewards != address(0));
		vault.approve(rewards, 0);
		rewards = _rewards;
		vault.approve(rewards, uint256(-1));
		emit UpdatedRewards(_rewards);
	}

	/**
	 * @notice
	 *  Used to change `minReportDelay`. `minReportDelay` is the minimum number
	 *  of blocks that should pass for `harvest()` to be called.
	 *
	 *  For external keepers (such as the Keep3r network), this is the minimum
	 *  time between jobs to wait. (see `harvestTrigger()`
	 *  for more details.)
	 *
	 *  This may only be called by governance or the strategist.
	 * @param _delay The minimum number of seconds to wait between harvests.
	 */
	function setMinReportDelay(uint256 _delay) external onlyAuthorized {
		minReportDelay = _delay;
		emit UpdatedMinReportDelay(_delay);
	}

	/**
	 * @notice
	 *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number
	 *  of blocks that should pass for `harvest()` to be called.
	 *
	 *  For external keepers (such as the Keep3r network), this is the maximum
	 *  time between jobs to wait. (see `harvestTrigger()`
	 *  for more details.)
	 *
	 *  This may only be called by governance or the strategist.
	 * @param _delay The maximum number of seconds to wait between harvests.
	 */
	function setMaxReportDelay(uint256 _delay) external onlyAuthorized {
		maxReportDelay = _delay;
		emit UpdatedMaxReportDelay(_delay);
	}

	/**
	 * @notice
	 *  Used to change `profitFactor`. `profitFactor` is used to determine
	 *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`
	 *  for more details.)
	 *
	 *  This may only be called by governance or the strategist.
	 * @param _profitFactor A ratio to multiply anticipated
	 * `harvest()` gas cost against.
	 */
	function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {
		profitFactor = _profitFactor;
		emit UpdatedProfitFactor(_profitFactor);
	}

	/**
	 * @notice
	 *  Sets how far the Strategy can go into loss without a harvest and report
	 *  being required.
	 *
	 *  By default this is 0, meaning any losses would cause a harvest which
	 *  will subsequently report the loss to the Vault for tracking. (See
	 *  `harvestTrigger()` for more details.)
	 *
	 *  This may only be called by governance or the strategist.
	 * @param _debtThreshold How big of a loss this Strategy may carry without
	 * being required to report to the Vault.
	 */
	function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {
		debtThreshold = _debtThreshold;
		emit UpdatedDebtThreshold(_debtThreshold);
	}

	/**
	 * @notice
	 *  Used to change `metadataURI`. `metadataURI` is used to store the URI
	 * of the file describing the strategy.
	 *
	 *  This may only be called by governance or the strategist.
	 * @param _metadataURI The URI that describe the strategy.
	 */
	function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {
		metadataURI = _metadataURI;
		emit UpdatedMetadataURI(_metadataURI);
	}

	/**
	 * Resolve governance address from Vault contract, used to make assertions
	 * on protected functions in the Strategy.
	 */
	function governance() internal view returns (address) {
		return vault.governance();
	}

	/**
	 * @notice
	 *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
	 *  to `want` (using the native decimal characteristics of `want`).
	 * @dev
	 *  Care must be taken when working with decimals to assure that the conversion
	 *  is compatible. As an example:
	 *
	 *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
	 *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
	 *
	 * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
	 * @return The amount in `want` of `_amtInEth` converted to `want`
	 **/
	function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);

	/**
	 * @notice
	 *  Provide an accurate estimate for the total amount of assets
	 *  (principle + return) that this Strategy is currently managing,
	 *  denominated in terms of `want` tokens.
	 *
	 *  This total should be "realizable" e.g. the total value that could
	 *  *actually* be obtained from this Strategy if it were to divest its
	 *  entire position based on current on-chain conditions.
	 * @dev
	 *  Care must be taken in using this function, since it relies on external
	 *  systems, which could be manipulated by the attacker to give an inflated
	 *  (or reduced) value produced by this function, based on current on-chain
	 *  conditions (e.g. this function is possible to influence through
	 *  flashloan attacks, oracle manipulations, or other DeFi attack
	 *  mechanisms).
	 *
	 *  It is up to governance to use this function to correctly order this
	 *  Strategy relative to its peers in the withdrawal queue to minimize
	 *  losses for the Vault based on sudden withdrawals. This value should be
	 *  higher than the total debt of the Strategy and higher than its expected
	 *  value to be "safe".
	 * @return The estimated total assets in this Strategy.
	 */
	function estimatedTotalAssets() public view virtual returns (uint256);

	/*
	 * @notice
	 *  Provide an indication of whether this strategy is currently "active"
	 *  in that it is managing an active position, or will manage a position in
	 *  the future. This should correlate to `harvest()` activity, so that Harvest
	 *  events can be tracked externally by indexing agents.
	 * @return True if the strategy is actively managing a position.
	 */
	function isActive() public view returns (bool) {
		return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;
	}

	/**
	 * Perform any Strategy unwinding or other calls necessary to capture the
	 * "free return" this Strategy has generated since the last time its core
	 * position(s) were adjusted. Examples include unwrapping extra rewards.
	 * This call is only used during "normal operation" of a Strategy, and
	 * should be optimized to minimize losses as much as possible.
	 *
	 * This method returns any realized profits and/or realized losses
	 * incurred, and should return the total amounts of profits/losses/debt
	 * payments (in `want` tokens) for the Vault's accounting (e.g.
	 * `want.balanceOf(this) >= _debtPayment + _profit`).
	 *
	 * `_debtOutstanding` will be 0 if the Strategy is not past the configured
	 * debt limit, otherwise its value will be how far past the debt limit
	 * the Strategy is. The Strategy's debt limit is configured in the Vault.
	 *
	 * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.
	 *       It is okay for it to be less than `_debtOutstanding`, as that
	 *       should only used as a guide for how much is left to pay back.
	 *       Payments should be made to minimize loss from slippage, debt,
	 *       withdrawal fees, etc.
	 *
	 * See `vault.debtOutstanding()`.
	 */
	function prepareReturn(uint256 _debtOutstanding)
		internal
		virtual
		returns (
			uint256 _profit,
			uint256 _loss,
			uint256 _debtPayment
		);

	/**
	 * Perform any adjustments to the core position(s) of this Strategy given
	 * what change the Vault made in the "investable capital" available to the
	 * Strategy. Note that all "free capital" in the Strategy after the report
	 * was made is available for reinvestment. Also note that this number
	 * could be 0, and you should handle that scenario accordingly.
	 *
	 * See comments regarding `_debtOutstanding` on `prepareReturn()`.
	 */
	function adjustPosition(uint256 _debtOutstanding) internal virtual;

	/**
	 * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,
	 * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.
	 * This function should return the amount of `want` tokens made available by the
	 * liquidation. If there is a difference between them, `_loss` indicates whether the
	 * difference is due to a realized loss, or if there is some other situation at play
	 * (e.g. locked funds) where the amount made available is less than what is needed.
	 *
	 * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained
	 */
	function liquidatePosition(uint256 _amountNeeded)
		internal
		virtual
		returns (uint256 _liquidatedAmount, uint256 _loss);

	/**
	 * Liquidate everything and returns the amount that got freed.
	 * This function is used during emergency exit instead of `prepareReturn()` to
	 * liquidate all of the Strategy's positions back to the Vault.
	 */

	function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);

	/**
	 * @notice
	 *  Provide a signal to the keeper that `tend()` should be called. The
	 *  keeper will provide the estimated gas cost that they would pay to call
	 *  `tend()`, and this function should use that estimate to make a
	 *  determination if calling it is "worth it" for the keeper. This is not
	 *  the only consideration into issuing this trigger, for example if the
	 *  position would be negatively affected if `tend()` is not called
	 *  shortly, then this can return `true` even if the keeper might be
	 *  "at a loss" (keepers are always reimbursed by Yearn).
	 * @dev
	 *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).
	 *
	 *  This call and `harvestTrigger()` should never return `true` at the same
	 *  time.
	 * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).
	 * @return `true` if `tend()` should be called, `false` otherwise.
	 */
	function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {
		// We usually don't need tend, but if there are positions that need
		// active maintenance, overriding this function is how you would
		// signal for that.
		// If your implementation uses the cost of the call in want, you can
		// use uint256 callCost = ethToWant(callCostInWei);

		return false;
	}

	/**
	 * @notice
	 *  Adjust the Strategy's position. The purpose of tending isn't to
	 *  realize gains, but to maximize yield by reinvesting any returns.
	 *
	 *  See comments on `adjustPosition()`.
	 *
	 *  This may only be called by governance, the strategist, or the keeper.
	 */
	function tend() external onlyKeepers {
		// Don't take profits with this call, but adjust for better gains
		adjustPosition(vault.debtOutstanding());
	}

	/**
	 * @notice
	 *  Provide a signal to the keeper that `harvest()` should be called. The
	 *  keeper will provide the estimated gas cost that they would pay to call
	 *  `harvest()`, and this function should use that estimate to make a
	 *  determination if calling it is "worth it" for the keeper. This is not
	 *  the only consideration into issuing this trigger, for example if the
	 *  position would be negatively affected if `harvest()` is not called
	 *  shortly, then this can return `true` even if the keeper might be "at a
	 *  loss" (keepers are always reimbursed by Yearn).
	 * @dev
	 *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).
	 *
	 *  This call and `tendTrigger` should never return `true` at the
	 *  same time.
	 *
	 *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the
	 *  strategist-controlled parameters that will influence whether this call
	 *  returns `true` or not. These parameters will be used in conjunction
	 *  with the parameters reported to the Vault (see `params`) to determine
	 *  if calling `harvest()` is merited.
	 *
	 *  It is expected that an external system will check `harvestTrigger()`.
	 *  This could be a script run off a desktop or cloud bot (e.g.
	 *  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),
	 *  or via an integration with the Keep3r network (e.g.
	 *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).
	 * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).
	 * @return `true` if `harvest()` should be called, `false` otherwise.
	 */
	function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {
		uint256 callCost = ethToWant(callCostInWei);
		StrategyParams memory params = vault.strategies(address(this));

		// Should not trigger if Strategy is not activated
		if (params.activation == 0) return false;

		// Should not trigger if we haven't waited long enough since previous harvest
		if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;

		// Should trigger if hasn't been called in a while
		if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;

		// If some amount is owed, pay it back
		// NOTE: Since debt is based on deposits, it makes sense to guard against large
		//       changes to the value from triggering a harvest directly through user
		//       behavior. This should ensure reasonable resistance to manipulation
		//       from user-initiated withdrawals as the outstanding debt fluctuates.
		uint256 outstanding = vault.debtOutstanding();
		if (outstanding > debtThreshold) return true;

		// Check for profits and losses
		uint256 total = estimatedTotalAssets();
		// Trigger if we have a loss to report
		if (total.add(debtThreshold) < params.totalDebt) return true;

		uint256 profit = 0;
		if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!

		// Otherwise, only trigger if it "makes sense" economically (gas cost
		// is <N% of value moved)
		uint256 credit = vault.creditAvailable();
		return (profitFactor.mul(callCost) < credit.add(profit));
	}

	/**
	 * @notice
	 *  Harvests the Strategy, recognizing any profits or losses and adjusting
	 *  the Strategy's position.
	 *
	 *  In the rare case the Strategy is in emergency shutdown, this will exit
	 *  the Strategy's position.
	 *
	 *  This may only be called by governance, the strategist, or the keeper.
	 * @dev
	 *  When `harvest()` is called, the Strategy reports to the Vault (via
	 *  `vault.report()`), so in some cases `harvest()` must be called in order
	 *  to take in profits, to borrow newly available funds from the Vault, or
	 *  otherwise adjust its position. In other cases `harvest()` must be
	 *  called to report to the Vault on the Strategy's position, especially if
	 *  any losses have occurred.
	 */
	function harvest() external onlyKeepers {
		uint256 profit = 0;
		uint256 loss = 0;
		uint256 debtOutstanding = vault.debtOutstanding();
		uint256 debtPayment = 0;
		if (emergencyExit) {
			// Free up as much capital as possible
			uint256 amountFreed = liquidateAllPositions();
			if (amountFreed < debtOutstanding) {
				loss = debtOutstanding.sub(amountFreed);
			} else if (amountFreed > debtOutstanding) {
				profit = amountFreed.sub(debtOutstanding);
			}
			debtPayment = debtOutstanding.sub(loss);
		} else {
			// Free up returns for Vault to pull
			(profit, loss, debtPayment) = prepareReturn(debtOutstanding);
		}

		// Allow Vault to take up to the "harvested" balance of this contract,
		// which is the amount it has earned since the last time it reported to
		// the Vault.
		uint256 totalDebt = vault.strategies(address(this)).totalDebt;
		debtOutstanding = vault.report(profit, loss, debtPayment);

		// Check if free returns are left, and re-invest them
		adjustPosition(debtOutstanding);

		// call healthCheck contract
		if (doHealthCheck && healthCheck != address(0)) {
			require(
				HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt),
				"!healthcheck"
			);
		} else {
			doHealthCheck = true;
		}

		emit Harvested(profit, loss, debtPayment, debtOutstanding);
	}

	/**
	 * @notice
	 *  Withdraws `_amountNeeded` to `vault`.
	 *
	 *  This may only be called by the Vault.
	 * @param _amountNeeded How much `want` to withdraw.
	 * @return _loss Any realized losses
	 */
	function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {
		require(msg.sender == address(vault), "!vault");
		// Liquidate as much as possible to `want`, up to `_amountNeeded`
		uint256 amountFreed;
		(amountFreed, _loss) = liquidatePosition(_amountNeeded);
		// Send it directly back (NOTE: Using `msg.sender` saves some gas here)
		want.safeTransfer(msg.sender, amountFreed);
		// NOTE: Reinvest anything leftover on next `tend`/`harvest`
	}

	/**
	 * Do anything necessary to prepare this Strategy for migration, such as
	 * transferring any reserve or LP tokens, CDPs, or other tokens or stores of
	 * value.
	 */
	function prepareMigration(address _newStrategy) internal virtual;

	/**
	 * @notice
	 *  Transfers all `want` from this Strategy to `_newStrategy`.
	 *
	 *  This may only be called by the Vault.
	 * @dev
	 * The new Strategy's Vault must be the same as this Strategy's Vault.
	 *  The migration process should be carefully performed to make sure all
	 * the assets are migrated to the new address, which should have never
	 * interacted with the vault before.
	 * @param _newStrategy The Strategy to migrate to.
	 */
	function migrate(address _newStrategy) external {
		require(msg.sender == address(vault));
		require(BaseStrategy(_newStrategy).vault() == vault);
		prepareMigration(_newStrategy);
		want.safeTransfer(_newStrategy, want.balanceOf(address(this)));
	}

	/**
	 * @notice
	 *  Activates emergency exit. Once activated, the Strategy will exit its
	 *  position upon the next harvest, depositing all funds into the Vault as
	 *  quickly as is reasonable given on-chain conditions.
	 *
	 *  This may only be called by governance or the strategist.
	 * @dev
	 *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.
	 */
	function setEmergencyExit() external onlyEmergencyAuthorized {
		emergencyExit = true;
		vault.revokeStrategy();

		emit EmergencyExitEnabled();
	}

	/**
	 * Override this to add all tokens/tokenized positions this contract
	 * manages on a *persistent* basis (e.g. not just for swapping back to
	 * want ephemerally).
	 *
	 * NOTE: Do *not* include `want`, already included in `sweep` below.
	 *
	 * Example:
	 * ```
	 *    function protectedTokens() internal override view returns (address[] memory) {
	 *      address[] memory protected = new address[](3);
	 *      protected[0] = tokenA;
	 *      protected[1] = tokenB;
	 *      protected[2] = tokenC;
	 *      return protected;
	 *    }
	 * ```
	 */
	function protectedTokens() internal view virtual returns (address[] memory);

	/**
	 * @notice
	 *  Removes tokens from this Strategy that are not the type of tokens
	 *  managed by this Strategy. This may be used in case of accidentally
	 *  sending the wrong kind of token to this Strategy.
	 *
	 *  Tokens will be sent to `governance()`.
	 *
	 *  This will fail if an attempt is made to sweep `want`, or any tokens
	 *  that are protected by this Strategy.
	 *
	 *  This may only be called by governance.
	 * @dev
	 *  Implement `protectedTokens()` to specify any additional tokens that
	 *  should be protected from sweeping in addition to `want`.
	 * @param _token The token to transfer out of this vault.
	 */
	function sweep(address _token) external onlyGovernance {
		require(_token != address(want), "!want");
		require(_token != address(vault), "!shares");

		address[] memory _protectedTokens = protectedTokens();
		for (uint256 i; i < _protectedTokens.length; i++)
			require(_token != _protectedTokens[i], "!protected");

		IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));
	}
}

abstract contract BaseStrategyInitializable is BaseStrategy {
	bool public isOriginal = true;
	event Cloned(address indexed clone);

	constructor(address _vault) public BaseStrategy(_vault) {}

	function initialize(
		address _vault,
		address _strategist,
		address _rewards,
		address _keeper
	) external virtual {
		_initialize(_vault, _strategist, _rewards, _keeper);
	}

	function clone(address _vault) external returns (address) {
		require(isOriginal, "!clone");
		return this.clone(_vault, msg.sender, msg.sender, msg.sender);
	}

	function clone(
		address _vault,
		address _strategist,
		address _rewards,
		address _keeper
	) external returns (address newStrategy) {
		// Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol
		bytes20 addressBytes = bytes20(address(this));

		assembly {
			// EIP-1167 bytecode
			let clone_code := mload(0x40)
			mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)
			mstore(add(clone_code, 0x14), addressBytes)
			mstore(
				add(clone_code, 0x28),
				0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000
			)
			newStrategy := create(0, clone_code, 0x37)
		}

		BaseStrategyInitializable(newStrategy).initialize(_vault, _strategist, _rewards, _keeper);

		emit Cloned(newStrategy);
	}
}


// File: interfaces/IERC20.sol
/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}


// File: contracts/library/LowGasSafeMath.sol
// SPDX-License-Identifier: GPL-2.0-or-later

pragma solidity >=0.6.0;

/// @title Optimized overflow and underflow safe math operations
/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost
library LowGasSafeMath {
	/// @notice Returns x + y, reverts if sum overflows uint256
	/// @param x The augend
	/// @param y The addend
	/// @return z The sum of x and y
	function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
		require((z = x + y) >= x);
	}

	/// @notice Returns x - y, reverts if underflows
	/// @param x The minuend
	/// @param y The subtrahend
	/// @return z The difference of x and y
	function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
		require((z = x - y) <= x);
	}

	/// @notice Returns x * y, reverts if overflows
	/// @param x The multiplicand
	/// @param y The multiplier
	/// @return z The product of x and y
	function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
		require(x == 0 || (z = x * y) / x == y);
	}

	/// @notice Returns x + y, reverts if overflows or underflows
	/// @param x The augend
	/// @param y The addend
	/// @return z The sum of x and y
	function add(int256 x, int256 y) internal pure returns (int256 z) {
		require((z = x + y) >= x == (y >= 0));
	}

	/// @notice Returns x - y, reverts if overflows or underflows
	/// @param x The minuend
	/// @param y The subtrahend
	/// @return z The difference of x and y
	function sub(int256 x, int256 y) internal pure returns (int256 z) {
		require((z = x - y) <= x == (y >= 0));
	}
}


// File: contracts/library/SafeMath.sol
/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


// File: contracts/library/SafeERC20.sol
import {SafeMath} from "./SafeMath.sol";
import {Address} from "./Address.sol";
import {IERC20} from "../../interfaces/IERC20.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transfer.selector, to, value)
        );
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
        );
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.approve.selector, spender, value)
        );
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance =
            token.allowance(address(this), spender).add(value);
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(
                token.approve.selector,
                spender,
                newAllowance
            )
        );
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance =
            token.allowance(address(this), spender).sub(
                value,
                "SafeERC20: decreased allowance below zero"
            );
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(
                token.approve.selector,
                spender,
                newAllowance
            )
        );
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata =
            address(token).functionCall(
                data,
                "SafeERC20: low-level call failed"
            );
        if (returndata.length > 0) {
            // Return data is optional
            // solhint-disable-next-line max-line-length
            require(
                abi.decode(returndata, (bool)),
                "SafeERC20: ERC20 operation did not succeed"
            );
        }
    }
}


// File: contracts/library/Babylonian.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.4.0;

// computes square roots using the babylonian method
// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method
library Babylonian {
	// credit for this implementation goes to
	// https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687
	function sqrt(uint256 x) internal pure returns (uint256) {
		if (x == 0) return 0;
		// this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);
		// however that code costs significantly more gas
		uint256 xx = x;
		uint256 r = 1;
		if (xx >= 0x100000000000000000000000000000000) {
			xx >>= 128;
			r <<= 64;
		}
		if (xx >= 0x10000000000000000) {
			xx >>= 64;
			r <<= 32;
		}
		if (xx >= 0x100000000) {
			xx >>= 32;
			r <<= 16;
		}
		if (xx >= 0x10000) {
			xx >>= 16;
			r <<= 8;
		}
		if (xx >= 0x100) {
			xx >>= 8;
			r <<= 4;
		}
		if (xx >= 0x10) {
			xx >>= 4;
			r <<= 2;
		}
		if (xx >= 0x8) {
			r <<= 1;
		}
		r = (r + x / r) >> 1;
		r = (r + x / r) >> 1;
		r = (r + x / r) >> 1;
		r = (r + x / r) >> 1;
		r = (r + x / r) >> 1;
		r = (r + x / r) >> 1;
		r = (r + x / r) >> 1; // Seven iterations should be enough
		uint256 r1 = x / r;
		return (r < r1 ? r : r1);
	}
}


// File: contracts/library/SafeCast.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
 * checks.
 *
 * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
 * easily result in undesired exploitation or bugs, since developers usually
 * assume that overflows raise errors. `SafeCast` restores this intuition by
 * reverting the transaction when such an operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 *
 * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing
 * all math on `uint256` and `int256` and then downcasting.
 */
library SafeCast {
	/**
	 * @dev Returns the downcasted uint128 from uint256, reverting on
	 * overflow (when the input is greater than largest uint128).
	 *
	 * Counterpart to Solidity's `uint128` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 128 bits
	 */
	function toUint128(uint256 value) internal pure returns (uint128) {
		require(value < 2**128, "SafeCast: value doesn't fit in 128 bits");
		return uint128(value);
	}

	/**
	 * @dev Returns the downcasted uint64 from uint256, reverting on
	 * overflow (when the input is greater than largest uint64).
	 *
	 * Counterpart to Solidity's `uint64` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 64 bits
	 */
	function toUint64(uint256 value) internal pure returns (uint64) {
		require(value < 2**64, "SafeCast: value doesn't fit in 64 bits");
		return uint64(value);
	}

	/**
	 * @dev Returns the downcasted uint32 from uint256, reverting on
	 * overflow (when the input is greater than largest uint32).
	 *
	 * Counterpart to Solidity's `uint32` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 32 bits
	 */
	function toUint32(uint256 value) internal pure returns (uint32) {
		require(value < 2**32, "SafeCast: value doesn't fit in 32 bits");
		return uint32(value);
	}

	/**
	 * @dev Returns the downcasted uint16 from uint256, reverting on
	 * overflow (when the input is greater than largest uint16).
	 *
	 * Counterpart to Solidity's `uint16` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 16 bits
	 */
	function toUint16(uint256 value) internal pure returns (uint16) {
		require(value < 2**16, "SafeCast: value doesn't fit in 16 bits");
		return uint16(value);
	}

	/**
	 * @dev Returns the downcasted uint8 from uint256, reverting on
	 * overflow (when the input is greater than largest uint8).
	 *
	 * Counterpart to Solidity's `uint8` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 8 bits.
	 */
	function toUint8(uint256 value) internal pure returns (uint8) {
		require(value < 2**8, "SafeCast: value doesn't fit in 8 bits");
		return uint8(value);
	}

	/**
	 * @dev Converts a signed int256 into an unsigned uint256.
	 *
	 * Requirements:
	 *
	 * - input must be greater than or equal to 0.
	 */
	function toUint256(int256 value) internal pure returns (uint256) {
		require(value >= 0, "SafeCast: value must be positive");
		return uint256(value);
	}

	/**
	 * @dev Returns the downcasted int128 from int256, reverting on
	 * overflow (when the input is less than smallest int128 or
	 * greater than largest int128).
	 *
	 * Counterpart to Solidity's `int128` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 128 bits
	 *
	 * _Available since v3.1._
	 */
	function toInt128(int256 value) internal pure returns (int128) {
		require(value >= -2**127 && value < 2**127, "SafeCast: value doesn't fit in 128 bits");
		return int128(value);
	}

	/**
	 * @dev Returns the downcasted int64 from int256, reverting on
	 * overflow (when the input is less than smallest int64 or
	 * greater than largest int64).
	 *
	 * Counterpart to Solidity's `int64` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 64 bits
	 *
	 * _Available since v3.1._
	 */
	function toInt64(int256 value) internal pure returns (int64) {
		require(value >= -2**63 && value < 2**63, "SafeCast: value doesn't fit in 64 bits");
		return int64(value);
	}

	/**
	 * @dev Returns the downcasted int32 from int256, reverting on
	 * overflow (when the input is less than smallest int32 or
	 * greater than largest int32).
	 *
	 * Counterpart to Solidity's `int32` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 32 bits
	 *
	 * _Available since v3.1._
	 */
	function toInt32(int256 value) internal pure returns (int32) {
		require(value >= -2**31 && value < 2**31, "SafeCast: value doesn't fit in 32 bits");
		return int32(value);
	}

	/**
	 * @dev Returns the downcasted int16 from int256, reverting on
	 * overflow (when the input is less than smallest int16 or
	 * greater than largest int16).
	 *
	 * Counterpart to Solidity's `int16` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 16 bits
	 *
	 * _Available since v3.1._
	 */
	function toInt16(int256 value) internal pure returns (int16) {
		require(value >= -2**15 && value < 2**15, "SafeCast: value doesn't fit in 16 bits");
		return int16(value);
	}

	/**
	 * @dev Returns the downcasted int8 from int256, reverting on
	 * overflow (when the input is less than smallest int8 or
	 * greater than largest int8).
	 *
	 * Counterpart to Solidity's `int8` operator.
	 *
	 * Requirements:
	 *
	 * - input must fit into 8 bits.
	 *
	 * _Available since v3.1._
	 */
	function toInt8(int256 value) internal pure returns (int8) {
		require(value >= -2**7 && value < 2**7, "SafeCast: value doesn't fit in 8 bits");
		return int8(value);
	}

	/**
	 * @dev Converts an unsigned uint256 into a signed int256.
	 *
	 * Requirements:
	 *
	 * - input must be less than or equal to maxInt256.
	 */
	function toInt256(uint256 value) internal pure returns (int256) {
		require(value < 2**255, "SafeCast: value doesn't fit in an int256");
		return int256(value);
	}
}


// File: contracts/library/Address.sol
/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash =
            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) =
            target.call{value: weiValue}(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: contracts/library/ERC20.sol
import {Context} from "./Context.sol";
import {SafeMath} from "./SafeMath.sol";
import {Address} from "./Address.sol";
import {IERC20} from "../../interfaces/IERC20.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */

contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;
    using Address for address;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    /**
     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with
     * a default value of 18.
     *
     * To select a different value for {decimals}, use {_setupDecimals}.
     *
     * All three of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name, string memory symbol) public {
        _name = name;
        _symbol = symbol;
        _decimals = 18;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is
     * called.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(
            amount,
            "ERC20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(
            amount,
            "ERC20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Sets {decimals} to a value other than the default one of 18.
     *
     * WARNING: This function should only be called from the constructor. Most
     * applications that interact with token contracts will not expect
     * {decimals} to ever change, and may work incorrectly if it does.
     */
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: contracts/library/Math.sol
/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute
        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);
    }
}


// File: algebra/core/contracts/interfaces/callback/IAlgebraSwapCallback.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

/// @title Callback for IAlgebraPoolActions#swap
/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface
/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:
/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces
interface IAlgebraSwapCallback {
	/// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.
	/// @dev In the implementation you must pay the pool tokens owed for the swap.
	/// The caller of this method must be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.
	/// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.
	/// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by
	/// the end of the swap. If positive, the callback must send that amount of token0 to the pool.
	/// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by
	/// the end of the swap. If positive, the callback must send that amount of token1 to the pool.
	/// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call
	function algebraSwapCallback(
		int256 amount0Delta,
		int256 amount1Delta,
		bytes calldata data
	) external;
}


// File: algebra/periphery/contracts/libraries/LiquidityAmounts.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

import "../../../core/contracts/libraries/FullMath.sol";
import "../../../core/contracts/libraries/Constants.sol";

/// @title Liquidity amount functions
/// @notice Provides functions for computing liquidity amounts from token amounts and prices
/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:
/// https://github.com/Uniswap/v3-periphery
library LiquidityAmounts {
	/// @notice Downcasts uint256 to uint128
	/// @param x The uint258 to be downcasted
	/// @return y The passed value, downcasted to uint128
	function toUint128(uint256 x) private pure returns (uint128 y) {
		require((y = uint128(x)) == x);
	}

	/// @notice Computes the amount of liquidity received for a given amount of token0 and price range
	/// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))
	/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
	/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
	/// @param amount0 The amount0 being sent in
	/// @return liquidity The amount of returned liquidity
	function getLiquidityForAmount0(
		uint160 sqrtRatioAX96,
		uint160 sqrtRatioBX96,
		uint256 amount0
	) internal pure returns (uint128 liquidity) {
		if (sqrtRatioAX96 > sqrtRatioBX96)
			(sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
		uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, Constants.Q96);
		return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));
	}

	/// @notice Computes the amount of liquidity received for a given amount of token1 and price range
	/// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).
	/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
	/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
	/// @param amount1 The amount1 being sent in
	/// @return liquidity The amount of returned liquidity
	function getLiquidityForAmount1(
		uint160 sqrtRatioAX96,
		uint160 sqrtRatioBX96,
		uint256 amount1
	) internal pure returns (uint128 liquidity) {
		if (sqrtRatioAX96 > sqrtRatioBX96)
			(sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
		return toUint128(FullMath.mulDiv(amount1, Constants.Q96, sqrtRatioBX96 - sqrtRatioAX96));
	}

	/// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current
	/// pool prices and the prices at the tick boundaries
	/// @param sqrtRatioX96 A sqrt price representing the current pool prices
	/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
	/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
	/// @param amount0 The amount of token0 being sent in
	/// @param amount1 The amount of token1 being sent in
	/// @return liquidity The maximum amount of liquidity received
	function getLiquidityForAmounts(
		uint160 sqrtRatioX96,
		uint160 sqrtRatioAX96,
		uint160 sqrtRatioBX96,
		uint256 amount0,
		uint256 amount1
	) internal pure returns (uint128 liquidity) {
		if (sqrtRatioAX96 > sqrtRatioBX96)
			(sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);

		if (sqrtRatioX96 <= sqrtRatioAX96) {
			liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);
		} else if (sqrtRatioX96 < sqrtRatioBX96) {
			uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);
			uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);

			liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;
		} else {
			liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);
		}
	}

	/// @notice Computes the amount of token0 for a given amount of liquidity and a price range
	/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
	/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
	/// @param liquidity The liquidity being valued
	/// @return amount0 The amount of token0
	function getAmount0ForLiquidity(
		uint160 sqrtRatioAX96,
		uint160 sqrtRatioBX96,
		uint128 liquidity
	) internal pure returns (uint256 amount0) {
		if (sqrtRatioAX96 > sqrtRatioBX96)
			(sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);

		return
			FullMath.mulDiv(
				uint256(liquidity) << Constants.RESOLUTION,
				sqrtRatioBX96 - sqrtRatioAX96,
				sqrtRatioBX96
			) / sqrtRatioAX96;
	}

	/// @notice Computes the amount of token1 for a given amount of liquidity and a price range
	/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
	/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
	/// @param liquidity The liquidity being valued
	/// @return amount1 The amount of token1
	function getAmount1ForLiquidity(
		uint160 sqrtRatioAX96,
		uint160 sqrtRatioBX96,
		uint128 liquidity
	) internal pure returns (uint256 amount1) {
		if (sqrtRatioAX96 > sqrtRatioBX96)
			(sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);

		return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Constants.Q96);
	}

	/// @notice Computes the token0 and token1 value for a given amount of liquidity, the current
	/// pool prices and the prices at the tick boundaries
	/// @param sqrtRatioX96 A sqrt price representing the current pool prices
	/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
	/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
	/// @param liquidity The liquidity being valued
	/// @return amount0 The amount of token0
	/// @return amount1 The amount of token1
	function getAmountsForLiquidity(
		uint160 sqrtRatioX96,
		uint160 sqrtRatioAX96,
		uint160 sqrtRatioBX96,
		uint128 liquidity
	) internal pure returns (uint256 amount0, uint256 amount1) {
		if (sqrtRatioAX96 > sqrtRatioBX96)
			(sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);

		if (sqrtRatioX96 <= sqrtRatioAX96) {
			amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);
		} else if (sqrtRatioX96 < sqrtRatioBX96) {
			amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);
			amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);
		} else {
			amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);
		}
	}
}


// File: algebra/core/contracts/interfaces/IAlgebraPool.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

import "./pool/IAlgebraPoolImmutables.sol";
import "./pool/IAlgebraPoolState.sol";
import "./pool/IAlgebraPoolDerivedState.sol";
import "./pool/IAlgebraPoolActions.sol";
import "./pool/IAlgebraPoolPermissionedActions.sol";
import "./pool/IAlgebraPoolEvents.sol";

/**
 * @title The interface for a Algebra Pool
 * @dev The pool interface is broken up into many smaller pieces.
 * Credit to Uniswap Labs under GPL-2.0-or-later license:
 * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces
 */
interface IAlgebraPool is
	IAlgebraPoolImmutables,
	IAlgebraPoolState,
	IAlgebraPoolDerivedState,
	IAlgebraPoolActions,
	IAlgebraPoolPermissionedActions,
	IAlgebraPoolEvents
{
	// used only for combining interfaces
}


// File: algebra/core/contracts/libraries/TickMath.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

/// @title Math library for computing sqrt prices from ticks and vice versa
/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports
/// prices between 2**-128 and 2**128
/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:
/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries
library TickMath {
	/// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128
	int24 internal constant MIN_TICK = -887272;
	/// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128
	int24 internal constant MAX_TICK = -MIN_TICK;

	/// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)
	uint160 internal constant MIN_SQRT_RATIO = 4295128739;
	/// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)
	uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;

	/// @notice Calculates sqrt(1.0001^tick) * 2^96
	/// @dev Throws if |tick| > max tick
	/// @param tick The input tick for the above formula
	/// @return price A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)
	/// at the given tick
	function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 price) {
		// get abs value
		int24 mask = tick >> (24 - 1);
		uint256 absTick = uint256((tick ^ mask) - mask);
		require(absTick <= uint256(MAX_TICK), "T");

		uint256 ratio =
			absTick & 0x1 != 0
				? 0xfffcb933bd6fad37aa2d162d1a594001
				: 0x100000000000000000000000000000000;
		if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
		if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
		if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
		if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
		if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
		if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
		if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
		if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
		if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
		if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
		if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
		if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
		if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
		if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
		if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
		if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
		if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
		if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
		if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;

		if (tick > 0) ratio = type(uint256).max / ratio;

		// this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.
		// we then downcast because we know the result always fits within 160 bits due to our tick input constraint
		// we round up in the division so getTickAtSqrtRatio of the output price is always consistent
		price = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));
	}

	/// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio
	/// @dev Throws in case price < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may
	/// ever return.
	/// @param price The sqrt ratio for which to compute the tick as a Q64.96
	/// @return tick The greatest tick for which the ratio is less than or equal to the input ratio
	function getTickAtSqrtRatio(uint160 price) internal pure returns (int24 tick) {
		// second inequality must be < because the price can never reach the price at the max tick
		require(price >= MIN_SQRT_RATIO && price < MAX_SQRT_RATIO, "R");
		uint256 ratio = uint256(price) << 32;

		uint256 r = ratio;
		uint256 msb = 0;

		assembly {
			let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))
			msb := or(msb, f)
			r := shr(f, r)
		}
		assembly {
			let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))
			msb := or(msb, f)
			r := shr(f, r)
		}
		assembly {
			let f := shl(5, gt(r, 0xFFFFFFFF))
			msb := or(msb, f)
			r := shr(f, r)
		}
		assembly {
			let f := shl(4, gt(r, 0xFFFF))
			msb := or(msb, f)
			r := shr(f, r)
		}
		assembly {
			let f := shl(3, gt(r, 0xFF))
			msb := or(msb, f)
			r := shr(f, r)
		}
		assembly {
			let f := shl(2, gt(r, 0xF))
			msb := or(msb, f)
			r := shr(f, r)
		}
		assembly {
			let f := shl(1, gt(r, 0x3))
			msb := or(msb, f)
			r := shr(f, r)
		}
		assembly {
			let f := gt(r, 0x1)
			msb := or(msb, f)
		}

		if (msb >= 128) r = ratio >> (msb - 127);
		else r = ratio << (127 - msb);

		int256 log_2 = (int256(msb) - 128) << 64;

		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(63, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(62, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(61, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(60, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(59, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(58, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(57, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(56, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(55, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(54, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(53, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(52, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(51, f))
			r := shr(f, r)
		}
		assembly {
			r := shr(127, mul(r, r))
			let f := shr(128, r)
			log_2 := or(log_2, shl(50, f))
		}

		int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number

		int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);
		int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);

		tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= price
			? tickHi
			: tickLow;
	}
}


// File: interfaces/ILpDepositor.sol
// SPDX-License-Identifier: AGPL-3.0

pragma solidity 0.6.12;

interface ILpDepositor {
	function balanceOf(address account) external view returns (uint256);

	function earned(address account) external view returns (uint256);

	function deposit(uint256 amount) external;

	function withdrawAll() external;

	function withdraw(uint256 amount) external;

	function emergencyWithdraw() external;

	function getReward() external;

	function TOKEN() external view returns (address);

	function rewardToken() external view returns (address);
}


// File: interfaces/IThenaRouter.sol
pragma solidity >=0.6.2;
pragma experimental ABIEncoderV2;

struct route {
	address from;
	address to;
	bool stable;
}

interface IThenaRouter {
	function getAmountOut(
		uint256 amountIn,
		address tokenIn,
		address tokenOut
	) external view returns (uint256 amount, bool stable);

	function quoteAddLiquidity(
		address tokenA,
		address tokenB,
		bool stable,
		uint256 amountADesired,
		uint256 amountBDesired
	)
		external
		view
		returns (
			uint256 amountA,
			uint256 amountB,
			uint256 liquidity
		);

	function quoteRemoveLiquidity(
		address tokenA,
		address tokenB,
		bool stable,
		uint256 liquidity
	) external view returns (uint256 amountA, uint256 amountB);

	function swapExactTokensForTokens(
		uint256 amountIn,
		uint256 amountOutMin,
		route[] calldata routes,
		address to,
		uint256 deadline
	) external returns (uint256[] memory amounts);

	function addLiquidity(
		address tokenA,
		address tokenB,
		bool stable,
		uint256 amountADesired,
		uint256 amountBDesired,
		uint256 amountAMin,
		uint256 amountBMin,
		address to,
		uint256 deadline
	)
		external
		returns (
			uint256 amountA,
			uint256 amountB,
			uint256 liquidity
		);

	function removeLiquidity(
		address tokenA,
		address tokenB,
		bool stable,
		uint256 liquidity,
		uint256 amountAMin,
		uint256 amountBMin,
		address to,
		uint256 deadline
	) external returns (uint256 amountA, uint256 amountB);
}


// File: interfaces/IHypervisor.sol
// SPDX-License-Identifier: GPL-3.0-only
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

import { IERC20 } from "./IERC20.sol";
import "../algebra/core/contracts/interfaces/IAlgebraPool.sol";

interface IHypervisor {
	/// @notice Deposit tokens
	/// @param deposit0 Amount of token0 transfered from sender to Hypervisor
	/// @param deposit1 Amount of token1 transfered from sender to Hypervisor
	/// @param to Address to which liquidity tokens are minted
	/// @param from Address from which asset tokens are transferred
	/// @param inMin min spend for directDeposit is true
	/// @return shares Quantity of liquidity tokens minted as a result of deposit
	function deposit(
		uint256 deposit0,
		uint256 deposit1,
		address to,
		address from,
		uint256[4] memory inMin
	) external returns (uint256 shares);

	/// @param shares Number of liquidity tokens to redeem as pool assets
	/// @param to Address to which redeemed pool assets are sent
	/// @param from Address from which liquidity tokens are sent
	/// @param minAmounts min amount0,1 returned for shares of liq
	/// @return amount0 Amount of token0 redeemed by the submitted liquidity tokens
	/// @return amount1 Amount of token1 redeemed by the submitted liquidity tokens
	function withdraw(
		uint256 shares,
		address to,
		address from,
		uint256[4] memory minAmounts
	) external returns (uint256 amount0, uint256 amount1);

	/// @notice Compound pending fees
	/// @param inMin min spend
	/// @return baseToken0Owed Pending fees of base token0
	/// @return baseToken1Owed Pending fees of base token1
	/// @return limitToken0Owed Pending fees of limit token0
	/// @return limitToken1Owed Pending fees of limit token1
	function compound(uint256[4] memory inMin)
		external
		returns (
			uint128 baseToken0Owed,
			uint128 baseToken1Owed,
			uint128 limitToken0Owed,
			uint128 limitToken1Owed
		);

	/// @param _baseLower The lower tick of the base position
	/// @param _baseUpper The upper tick of the base position
	/// @param _limitLower The lower tick of the limit position
	/// @param _limitUpper The upper tick of the limit position
	/// @param  inMin min spend
	/// @param  outMin min amount0,1 returned for shares of liq
	/// @param _feeRecipient Address of recipient of 10% of earned fees since last rebalance
	function rebalance(
		int24 _baseLower,
		int24 _baseUpper,
		int24 _limitLower,
		int24 _limitUpper,
		address _feeRecipient,
		uint256[4] memory inMin,
		uint256[4] memory outMin
	) external;

	function addBaseLiquidity(
		uint256 amount0,
		uint256 amount1,
		uint256[2] memory minIn
	) external;

	function addLimitLiquidity(
		uint256 amount0,
		uint256 amount1,
		uint256[2] memory minIn
	) external;

	function pullLiquidity(
		int24 tickLower,
		int24 tickUpper,
		uint128 shares,
		uint256[2] memory amountMin
	) external returns (uint256 base0, uint256 base1);

	function pool() external view returns (IAlgebraPool);

	function currentTick() external view returns (int24 tick);

	function tickSpacing() external view returns (int24 spacing);

	function baseLower() external view returns (int24 tick);

	function baseUpper() external view returns (int24 tick);

	function limitLower() external view returns (int24 tick);

	function limitUpper() external view returns (int24 tick);

	function token0() external view returns (IERC20);

	function token1() external view returns (IERC20);

	function deposit0Max() external view returns (uint256);

	function deposit1Max() external view returns (uint256);

	function balanceOf(address) external view returns (uint256);

	function approve(address, uint256) external returns (bool);

	function transferFrom(
		address,
		address,
		uint256
	) external returns (bool);

	function transfer(address, uint256) external returns (bool);

	function getTotalAmounts() external view returns (uint256 total0, uint256 total1);

	function getBasePosition()
		external
		view
		returns (
			uint256 liquidity,
			uint256 total0,
			uint256 total1
		);

	function totalSupply() external view returns (uint256);

	function setWhitelist(address _address) external;

	function setFee(uint8 newFee) external;

	function removeWhitelisted() external;

	function transferOwnership(address newOwner) external;

	function toggleDirectDeposit() external;

	function directDeposit() external view returns (bool);

	function whitelistedAddress() external returns (address);
}


// File: interfaces/IUniProxy.sol
// SPDX-License-Identifier: AGPL-3.0

pragma solidity >=0.5.0;

interface IUniProxy {
	/// @notice Deposit into the given position
	/// @param deposit0 Amount of token0 to deposit
	/// @param deposit1 Amount of token1 to deposit
	/// @param to Address to receive liquidity tokens
	/// @param pos Hypervisor Address
	/// @return shares Amount of liquidity tokens received
	function deposit(
		uint256 deposit0,
		uint256 deposit1,
		address to,
		address pos,
		uint256[4] memory minIn
	) external returns (uint256 shares);

	/// @notice Get the amount of token to deposit for the given amount of pair token
	/// @param pos Hypervisor Address
	/// @param token Address of token to deposit
	/// @param _deposit Amount of token to deposit
	/// @return amountStart Minimum amounts of the pair token to deposit
	/// @return amountEnd Maximum amounts of the pair token to deposit
	function getDepositAmount(
		address pos,
		address token,
		uint256 _deposit
	) external view returns (uint256 amountStart, uint256 amountEnd);

	function depositDelta() external view returns (uint256);

	function deltaScale() external view returns (uint256);

	function addPosition(address pos, uint8 version) external;
}


// File: contracts/library/Context.sol
/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


// File: algebra/core/contracts/libraries/FullMath.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0;

/// @title Contains 512-bit math functions
/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision
/// @dev Handles "phantom overflow" i.e., allows multiplication and division where an intermediate value overflows 256 bits
library FullMath {
	/// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
	/// @param a The multiplicand
	/// @param b The multiplier
	/// @param denominator The divisor
	/// @return result The 256-bit result
	/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv
	function mulDiv(
		uint256 a,
		uint256 b,
		uint256 denominator
	) internal pure returns (uint256 result) {
		// 512-bit multiply [prod1 prod0] = a * b
		// Compute the product mod 2**256 and mod 2**256 - 1
		// then use the Chinese Remainder Theorem to reconstruct
		// the 512 bit result. The result is stored in two 256
		// variables such that product = prod1 * 2**256 + prod0
		uint256 prod0 = a * b; // Least significant 256 bits of the product
		uint256 prod1; // Most significant 256 bits of the product
		assembly {
			let mm := mulmod(a, b, not(0))
			prod1 := sub(sub(mm, prod0), lt(mm, prod0))
		}

		// Make sure the result is less than 2**256.
		// Also prevents denominator == 0
		require(denominator > prod1);

		// Handle non-overflow cases, 256 by 256 division
		if (prod1 == 0) {
			assembly {
				result := div(prod0, denominator)
			}
			return result;
		}

		///////////////////////////////////////////////
		// 512 by 256 division.
		///////////////////////////////////////////////

		// Make division exact by subtracting the remainder from [prod1 prod0]
		// Compute remainder using mulmod
		// Subtract 256 bit remainder from 512 bit number
		assembly {
			let remainder := mulmod(a, b, denominator)
			prod1 := sub(prod1, gt(remainder, prod0))
			prod0 := sub(prod0, remainder)
		}

		// Factor powers of two out of denominator
		// Compute largest power of two divisor of denominator.
		// Always >= 1.
		uint256 twos = -denominator & denominator;
		// Divide denominator by power of two
		assembly {
			denominator := div(denominator, twos)
		}

		// Divide [prod1 prod0] by the factors of two
		assembly {
			prod0 := div(prod0, twos)
		}
		// Shift in bits from prod1 into prod0. For this we need
		// to flip `twos` such that it is 2**256 / twos.
		// If twos is zero, then it becomes one
		assembly {
			twos := add(div(sub(0, twos), twos), 1)
		}
		prod0 |= prod1 * twos;

		// Invert denominator mod 2**256
		// Now that denominator is an odd number, it has an inverse
		// modulo 2**256 such that denominator * inv = 1 mod 2**256.
		// Compute the inverse by starting with a seed that is correct
		// correct for four bits. That is, denominator * inv = 1 mod 2**4
		uint256 inv = (3 * denominator) ^ 2;
		// Now use Newton-Raphson iteration to improve the precision.
		// Thanks to Hensel's lifting lemma, this also works in modular
		// arithmetic, doubling the correct bits in each step.
		inv *= 2 - denominator * inv; // inverse mod 2**8
		inv *= 2 - denominator * inv; // inverse mod 2**16
		inv *= 2 - denominator * inv; // inverse mod 2**32
		inv *= 2 - denominator * inv; // inverse mod 2**64
		inv *= 2 - denominator * inv; // inverse mod 2**128
		inv *= 2 - denominator * inv; // inverse mod 2**256

		// Because the division is now exact we can divide by multiplying
		// with the modular inverse of denominator. This will give us the
		// correct result modulo 2**256. Since the preconditions guarantee
		// that the outcome is less than 2**256, this is the final result.
		// We don't need to compute the high bits of the result and prod1
		// is no longer required.
		result = prod0 * inv;
		return result;
	}

	/// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
	/// @param a The multiplicand
	/// @param b The multiplier
	/// @param denominator The divisor
	/// @return result The 256-bit result
	function mulDivRoundingUp(
		uint256 a,
		uint256 b,
		uint256 denominator
	) internal pure returns (uint256 result) {
		if (a == 0 || ((result = a * b) / a == b)) {
			require(denominator > 0);
			assembly {
				result := add(div(result, denominator), gt(mod(result, denominator), 0))
			}
		} else {
			result = mulDiv(a, b, denominator);
			if (mulmod(a, b, denominator) > 0) {
				require(result < type(uint256).max);
				result++;
			}
		}
	}

	/// @notice Returns ceil(x / y)
	/// @dev division by 0 has unspecified behavior, and must be checked externally
	/// @param x The dividend
	/// @param y The divisor
	/// @return z The quotient, ceil(x / y)
	function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {
		assembly {
			z := add(div(x, y), gt(mod(x, y), 0))
		}
	}
}


// File: algebra/core/contracts/libraries/Constants.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

library Constants {
	uint8 internal constant RESOLUTION = 96;
	uint256 internal constant Q96 = 0x1000000000000000000000000;
	uint256 internal constant Q128 = 0x100000000000000000000000000000000;
	// fee value in hundredths of a bip, i.e. 1e-6
	uint16 internal constant BASE_FEE = 100;
	int24 internal constant TICK_SPACING = 60;

	// max(uint128) / ( (MAX_TICK - MIN_TICK) / TICK_SPACING )
	uint128 internal constant MAX_LIQUIDITY_PER_TICK = 11505743598341114571880798222544994;

	uint32 internal constant MAX_LIQUIDITY_COOLDOWN = 1 days;
	uint8 internal constant MAX_COMMUNITY_FEE = 250;
	uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1000;
}


// File: algebra/core/contracts/interfaces/pool/IAlgebraPoolImmutables.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

/// @title Pool state that never changes
/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:
/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces
interface IAlgebraPoolImmutables {
	/**
	 * @notice The contract that stores all the timepoints and can perform actions with them
	 * @return The operator address
	 */
	function dataStorageOperator() external view returns (address);

	/**
	 * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface
	 * @return The contract address
	 */
	function factory() external view returns (address);

	/**
	 * @notice The first of the two tokens of the pool, sorted by address
	 * @return The token contract address
	 */
	function token0() external view returns (address);

	/**
	 * @notice The second of the two tokens of the pool, sorted by address
	 * @return The token contract address
	 */
	function token1() external view returns (address);

	/**
	 * @notice The pool tick spacing
	 * @dev Ticks can only be used at multiples of this value
	 * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...
	 * This value is an int24 to avoid casting even though it is always positive.
	 * @return The tick spacing
	 */
	function tickSpacing() external view returns (int24);

	/**
	 * @notice The maximum amount of position liquidity that can use any tick in the range
	 * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and
	 * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
	 * @return The max amount of liquidity per tick
	 */
	function maxLiquidityPerTick() external view returns (uint128);
}


// File: algebra/core/contracts/interfaces/pool/IAlgebraPoolState.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

/// @title Pool state that can change
/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:
/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces
interface IAlgebraPoolState {
	/**
	 * @notice The globalState structure in the pool stores many values but requires only one slot
	 * and is exposed as a single method to save gas when accessed externally.
	 * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;
	 * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;
	 * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick
	 * boundary;
	 * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;
	 * Returns timepointIndex The index of the last written timepoint;
	 * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;
	 * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;
	 * Returns unlocked Whether the pool is currently locked to reentrancy;
	 */
	function globalState()
		external
		view
		returns (
			uint160 price,
			int24 tick,
			uint16 fee,
			uint16 timepointIndex,
			uint16 communityFeeToken0,
			uint16 communityFeeToken1,
			bool unlocked
		);

	/**
	 * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool
	 * @dev This value can overflow the uint256
	 */
	function totalFeeGrowth0Token() external view returns (uint256);

	/**
	 * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool
	 * @dev This value can overflow the uint256
	 */
	function totalFeeGrowth1Token() external view returns (uint256);

	/**
	 * @notice The currently in range liquidity available to the pool
	 * @dev This value has no relationship to the total liquidity across all ticks.
	 * Returned value cannot exceed type(uint128).max
	 */
	function liquidity() external view returns (uint128);

	/**
	 * @notice Look up information about a specific tick in the pool
	 * @dev This is a public structure, so the `return` natspec tags are omitted.
	 * @param tick The tick to look up
	 * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or
	 * tick upper;
	 * Returns liquidityDelta how much liquidity changes when the pool price crosses the tick;
	 * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;
	 * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;
	 * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;
	 * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;
	 * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;
	 * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0
	 * otherwise equal to false. Outside values can only be used if the tick is initialized.
	 * In addition, these values are only relative and must be used only in comparison to previous snapshots for
	 * a specific position.
	 */
	function ticks(int24 tick)
		external
		view
		returns (
			uint128 liquidityTotal,
			int128 liquidityDelta,
			uint256 outerFeeGrowth0Token,
			uint256 outerFeeGrowth1Token,
			int56 outerTickCumulative,
			uint160 outerSecondsPerLiquidity,
			uint32 outerSecondsSpent,
			bool initialized
		);

	/** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */
	function tickTable(int16 wordPosition) external view returns (uint256);

	/**
	 * @notice Returns the information about a position by the position's key
	 * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.
	 * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick
	 * @return liquidityAmount The amount of liquidity in the position;
	 * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;
	 * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;
	 * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;
	 * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;
	 * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke
	 */
	function positions(bytes32 key)
		external
		view
		returns (
			uint128 liquidityAmount,
			uint32 lastLiquidityAddTimestamp,
			uint256 innerFeeGrowth0Token,
			uint256 innerFeeGrowth1Token,
			uint128 fees0,
			uint128 fees1
		);

	/**
	 * @notice Returns data about a specific timepoint index
	 * @param index The element of the timepoints array to fetch
	 * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time
	 * ago, rather than at a specific index in the array.
	 * This is a public mapping of structures, so the `return` natspec tags are omitted.
	 * @return initialized whether the timepoint has been initialized and the values are safe to use;
	 * Returns blockTimestamp The timestamp of the timepoint;
	 * Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp;
	 * Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp;
	 * Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp;
	 * Returns averageTick Time-weighted average tick;
	 * Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;
	 */
	function timepoints(uint256 index)
		external
		view
		returns (
			bool initialized,
			uint32 blockTimestamp,
			int56 tickCumulative,
			uint160 secondsPerLiquidityCumulative,
			uint88 volatilityCumulative,
			int24 averageTick,
			uint144 volumePerLiquidityCumulative
		);

	/**
	 * @notice Returns the information about active incentive
	 * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0
	 * @return virtualPool The address of a virtual pool associated with the current active incentive
	 */
	function activeIncentive() external view returns (address virtualPool);

	/**
	 * @notice Returns the lock time for added liquidity
	 */
	function liquidityCooldown() external view returns (uint32 cooldownInSeconds);
}


// File: algebra/core/contracts/interfaces/pool/IAlgebraPoolDerivedState.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

/**
 * @title Pool state that is not stored
 * @notice Contains view functions to provide information about the pool that is computed rather than stored on the
 * blockchain. The functions here may have variable gas costs.
 * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:
 * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces
 */
interface IAlgebraPoolDerivedState {
	/**
	 * @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp
	 * @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing
	 * the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,
	 * you must call it with secondsAgos = [3600, 0].
	 * @dev The time weighted average tick represents the geometric time weighted average price of the pool, in
	 * log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.
	 * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned
	 * @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp
	 * @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`
	 * from the current block timestamp
	 * @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`
	 * @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`
	 */
	function getTimepoints(uint32[] calldata secondsAgos)
		external
		view
		returns (
			int56[] memory tickCumulatives,
			uint160[] memory secondsPerLiquidityCumulatives,
			uint112[] memory volatilityCumulatives,
			uint256[] memory volumePerAvgLiquiditys
		);

	/**
	 * @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range
	 * @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.
	 * I.e., snapshots cannot be compared if a position is not held for the entire period between when the first
	 * snapshot is taken and the second snapshot is taken.
	 * @param bottomTick The lower tick of the range
	 * @param topTick The upper tick of the range
	 * @return innerTickCumulative The snapshot of the tick accumulator for the range
	 * @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range
	 * @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range
	 */
	function getInnerCumulatives(int24 bottomTick, int24 topTick)
		external
		view
		returns (
			int56 innerTickCumulative,
			uint160 innerSecondsSpentPerLiquidity,
			uint32 innerSecondsSpent
		);
}


// File: algebra/core/contracts/interfaces/pool/IAlgebraPoolActions.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

/// @title Permissionless pool actions
/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:
/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces
interface IAlgebraPoolActions {
	/**
	 * @notice Sets the initial price for the pool
	 * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value
	 * @param price the initial sqrt price of the pool as a Q64.96
	 */
	function initialize(uint160 price) external;

	/**
	 * @notice Adds liquidity for the given recipient/bottomTick/topTick position
	 * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback
	 * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends
	 * on bottomTick, topTick, the amount of liquidity, and the current price.
	 * @param sender The address which will receive potential surplus of paid tokens
	 * @param recipient The address for which the liquidity will be created
	 * @param bottomTick The lower tick of the position in which to add liquidity
	 * @param topTick The upper tick of the position in which to add liquidity
	 * @param amount The desired amount of liquidity to mint
	 * @param data Any data that should be passed through to the callback
	 * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback
	 * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback
	 * @return liquidityActual The actual minted amount of liquidity
	 */
	function mint(
		address sender,
		address recipient,
		int24 bottomTick,
		int24 topTick,
		uint128 amount,
		bytes calldata data
	)
		external
		returns (
			uint256 amount0,
			uint256 amount1,
			uint128 liquidityActual
		);

	/**
	 * @notice Collects tokens owed to a position
	 * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.
	 * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or
	 * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the
	 * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.
	 * @param recipient The address which should receive the fees collected
	 * @param bottomTick The lower tick of the position for which to collect fees
	 * @param topTick The upper tick of the position for which to collect fees
	 * @param amount0Requested How much token0 should be withdrawn from the fees owed
	 * @param amount1Requested How much token1 should be withdrawn from the fees owed
	 * @return amount0 The amount of fees collected in token0
	 * @return amount1 The amount of fees collected in token1
	 */
	function collect(
		address recipient,
		int24 bottomTick,
		int24 topTick,
		uint128 amount0Requested,
		uint128 amount1Requested
	) external returns (uint128 amount0, uint128 amount1);

	/**
	 * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position
	 * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0
	 * @dev Fees must be collected separately via a call to #collect
	 * @param bottomTick The lower tick of the position for which to burn liquidity
	 * @param topTick The upper tick of the position for which to burn liquidity
	 * @param amount How much liquidity to burn
	 * @return amount0 The amount of token0 sent to the recipient
	 * @return amount1 The amount of token1 sent to the recipient
	 */
	function burn(
		int24 bottomTick,
		int24 topTick,
		uint128 amount
	) external returns (uint256 amount0, uint256 amount1);

	/**
	 * @notice Swap token0 for token1, or token1 for token0
	 * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback
	 * @param recipient The address to receive the output of the swap
	 * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0
	 * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)
	 * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this
	 * value after the swap. If one for zero, the price cannot be greater than this value after the swap
	 * @param data Any data to be passed through to the callback. If using the Router it should contain
	 * SwapRouter#SwapCallbackData
	 * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive
	 * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive
	 */
	function swap(
		address recipient,
		bool zeroToOne,
		int256 amountSpecified,
		uint160 limitSqrtPrice,
		bytes calldata data
	) external returns (int256 amount0, int256 amount1);

	/**
	 * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)
	 * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback
	 * @param sender The address called this function (Comes from the Router)
	 * @param recipient The address to receive the output of the swap
	 * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0
	 * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)
	 * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this
	 * value after the swap. If one for zero, the price cannot be greater than this value after the swap
	 * @param data Any data to be passed through to the callback. If using the Router it should contain
	 * SwapRouter#SwapCallbackData
	 * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive
	 * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive
	 */
	function swapSupportingFeeOnInputTokens(
		address sender,
		address recipient,
		bool zeroToOne,
		int256 amountSpecified,
		uint160 limitSqrtPrice,
		bytes calldata data
	) external returns (int256 amount0, int256 amount1);

	/**
	 * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback
	 * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback
	 * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used
	 * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending
	 * the donation amount(s) from the callback
	 * @param recipient The address which will receive the token0 and token1 amounts
	 * @param amount0 The amount of token0 to send
	 * @param amount1 The amount of token1 to send
	 * @param data Any data to be passed through to the callback
	 */
	function flash(
		address recipient,
		uint256 amount0,
		uint256 amount1,
		bytes calldata data
	) external;
}


// File: algebra/core/contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

/**
 * @title Permissioned pool actions
 * @notice Contains pool methods that may only be called by the factory owner or tokenomics
 * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:
 * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces
 */
interface IAlgebraPoolPermissionedActions {
	/**
	 * @notice Set the community's % share of the fees. Cannot exceed 25% (250)
	 * @param communityFee0 new community fee percent for token0 of the pool in thousandths (1e-3)
	 * @param communityFee1 new community fee percent for token1 of the pool in thousandths (1e-3)
	 */
	function setCommunityFee(uint8 communityFee0, uint8 communityFee1) external;

	/**
	 * @notice Sets an active incentive
	 * @param virtualPoolAddress The address of a virtual pool associated with the incentive
	 */
	function setIncentive(address virtualPoolAddress) external;

	/**
	 * @notice Sets new lock time for added liquidity
	 * @param newLiquidityCooldown The time in seconds
	 */
	function setLiquidityCooldown(uint32 newLiquidityCooldown) external;
}


// File: algebra/core/contracts/interfaces/pool/IAlgebraPoolEvents.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.5.0;

/// @title Events emitted by a pool
/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:
/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces
interface IAlgebraPoolEvents {
	/**
	 * @notice Emitted exactly once by a pool when #initialize is first called on the pool
	 * @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize
	 * @param price The initial sqrt price of the pool, as a Q64.96
	 * @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool
	 */
	event Initialize(uint160 price, int24 tick);

	/**
	 * @notice Emitted when liquidity is minted for a given position
	 * @param sender The address that minted the liquidity
	 * @param owner The owner of the position and recipient of any minted liquidity
	 * @param bottomTick The lower tick of the position
	 * @param topTick The upper tick of the position
	 * @param liquidityAmount The amount of liquidity minted to the position range
	 * @param amount0 How much token0 was required for the minted liquidity
	 * @param amount1 How much token1 was required for the minted liquidity
	 */
	event Mint(
		address sender,
		address indexed owner,
		int24 indexed bottomTick,
		int24 indexed topTick,
		uint128 liquidityAmount,
		uint256 amount0,
		uint256 amount1
	);

	/**
	 * @notice Emitted when fees are collected by the owner of a position
	 * @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees
	 * @param owner The owner of the position for which fees are collected
	 * @param recipient The address that received fees
	 * @param bottomTick The lower tick of the position
	 * @param topTick The upper tick of the position
	 * @param amount0 The amount of token0 fees collected
	 * @param amount1 The amount of token1 fees collected
	 */
	event Collect(
		address indexed owner,
		address recipient,
		int24 indexed bottomTick,
		int24 indexed topTick,
		uint128 amount0,
		uint128 amount1
	);

	/**
	 * @notice Emitted when a position's liquidity is removed
	 * @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect
	 * @param owner The owner of the position for which liquidity is removed
	 * @param bottomTick The lower tick of the position
	 * @param topTick The upper tick of the position
	 * @param liquidityAmount The amount of liquidity to remove
	 * @param amount0 The amount of token0 withdrawn
	 * @param amount1 The amount of token1 withdrawn
	 */
	event Burn(
		address indexed owner,
		int24 indexed bottomTick,
		int24 indexed topTick,
		uint128 liquidityAmount,
		uint256 amount0,
		uint256 amount1
	);

	/**
	 * @notice Emitted by the pool for any swaps between token0 and token1
	 * @param sender The address that initiated the swap call, and that received the callback
	 * @param recipient The address that received the output of the swap
	 * @param amount0 The delta of the token0 balance of the pool
	 * @param amount1 The delta of the token1 balance of the pool
	 * @param price The sqrt(price) of the pool after the swap, as a Q64.96
	 * @param liquidity The liquidity of the pool after the swap
	 * @param tick The log base 1.0001 of price of the pool after the swap
	 */
	event Swap(
		address indexed sender,
		address indexed recipient,
		int256 amount0,
		int256 amount1,
		uint160 price,
		uint128 liquidity,
		int24 tick
	);

	/**
	 * @notice Emitted by the pool for any flashes of token0/token1
	 * @param sender The address that initiated the swap call, and that received the callback
	 * @param recipient The address that received the tokens from flash
	 * @param amount0 The amount of token0 that was flashed
	 * @param amount1 The amount of token1 that was flashed
	 * @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee
	 * @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee
	 */
	event Flash(
		address indexed sender,
		address indexed recipient,
		uint256 amount0,
		uint256 amount1,
		uint256 paid0,
		uint256 paid1
	);

	/**
	 * @notice Emitted when the community fee is changed by the pool
	 * @param communityFee0New The updated value of the token0 community fee percent
	 * @param communityFee1New The updated value of the token1 community fee percent
	 */
	event CommunityFee(uint8 communityFee0New, uint8 communityFee1New);

	/**
	 * @notice Emitted when new activeIncentive is set
	 * @param virtualPoolAddress The address of a virtual pool associated with the current active incentive
	 */
	event Incentive(address indexed virtualPoolAddress);

	/**
	 * @notice Emitted when the fee changes
	 * @param fee The value of the token fee
	 */
	event Fee(uint16 fee);

	/**
	 * @notice Emitted when the LiquidityCooldown changes
	 * @param liquidityCooldown The value of locktime for added liquidity
	 */
	event LiquidityCooldown(uint32 liquidityCooldown);
}

