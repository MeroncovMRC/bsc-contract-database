/** 
 *  SourceUnit: /home/dos/dev/family/flashLoan1/contracts/ArbSwapV2.sol
*/
            
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}




/** 
 *  SourceUnit: /home/dos/dev/family/flashLoan1/contracts/ArbSwapV2.sol
*/
            
////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}




/** 
 *  SourceUnit: /home/dos/dev/family/flashLoan1/contracts/ArbSwapV2.sol
*/
            
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}




/** 
 *  SourceUnit: /home/dos/dev/family/flashLoan1/contracts/ArbSwapV2.sol
*/
            
pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}




/** 
 *  SourceUnit: /home/dos/dev/family/flashLoan1/contracts/ArbSwapV2.sol
*/
            
pragma solidity >=0.6.2;

////import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


/** 
 *  SourceUnit: /home/dos/dev/family/flashLoan1/contracts/ArbSwapV2.sol
*/

////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT
pragma solidity ^0.8.10;

////import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
////import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol";
////import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
////import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
////import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract ArbSwapV2 {

  address payable owner;
  constructor() {
    owner = payable(msg.sender);
  }

  function _isOwner() internal view {
    require(msg.sender == owner, 'You are not the owner');
  }

  function swap(
    address router,
    address tokenIn,
    address tokenOut,
    uint256 amountIn
  ) private {
    IERC20(tokenIn).approve(router, amountIn);

    address[] memory path;
    path = new address[](2);
    path[0] = tokenIn;
    path[1] = tokenOut;
    uint256 deadline = block.timestamp + 300;

    IUniswapV2Router01(router).swapExactTokensForTokens(
      amountIn,
      1,
      path,
      address(this),
      deadline
    );

  }

  function getAmountOutMin(
    address router, 
    address _tokenIn,
    address _tokenOut,
    uint256 _amount
    ) public view returns (uint256) {
      address[] memory path;
      path = new address[](2);
      path[0] = _tokenIn;
      path[1] = _tokenOut;
      uint256[] memory amountOutMins = IUniswapV2Router01(router).getAmountsOut(_amount, path);
      return amountOutMins[path.length - 1];
  }

  function estimateDualDexTrade(
    address _router1, 
    address _router2, 
    address _token1,
    address _token2,
    uint256 _amount
    ) external view returns (uint256) {
    uint256 amtBack1 = getAmountOutMin(_router1, _token1, _token2, _amount);
    uint256 amtBack2 = getAmountOutMin(_router2, _token2, _token1, amtBack1);
    return amtBack2;
  }

  function dualDexTrade(
    address _router1,
    address _router2,
    address _token1,
    address _token2,
    uint256 _amount
  ) external {
    _isOwner();
    uint256 startBalance = IERC20(_token1).balanceOf(address(this));
    uint256 token2InitialBalance = IERC20(_token2).balanceOf(address(this));
    swap(_router1, _token1, _token2, _amount);
    uint256 token2Balance = IERC20(_token2).balanceOf(address(this));
    uint256 tradeableAmount = token2Balance - token2InitialBalance;
    swap(_router2, _token2, _token1, tradeableAmount);
    uint256 endBalance = IERC20(_token1).balanceOf(address(this));
    require(endBalance > startBalance, "Trade Reverted, No Profit Made");
  }

  function estimateTriDexTrade(
    address _router1,
    address _router2,
    address _router3,
    address _token1,
    address _token2,
    address _token3,
    uint256 _amount
  ) external view returns (uint256) {
    uint256 amtBack1 = getAmountOutMin(_router1, _token1, _token2, _amount);
    uint256 amtBack2 = getAmountOutMin(_router2, _token2, _token3, amtBack1);
    uint256 amtBack3 = getAmountOutMin(_router3, _token3, _token1, amtBack2);
    return amtBack3;
  }

  function triDexTrade(
    address _router1,
    address _router2,
    address _router3,
    address _token1,
    address _token2,
    uint256 _amount
  ) external {
    _isOwner();
    uint256 startBalance = IERC20(_token1).balanceOf(address(this));
    uint256 token2InitialBalance = IERC20(_token2).balanceOf(address(this));
    swap(_router1, _token1, _token2, _amount);
    uint256 token2Balance = IERC20(_token2).balanceOf(address(this));
    uint256 tradeableAmount = token2Balance - token2InitialBalance;
    swap(_router2, _token2, _token1, tradeableAmount);
    uint256 endBalance = IERC20(_token1).balanceOf(address(this));
    
    if (endBalance < startBalance) {
      swap(_router3, _token1, _token2, _amount);
      swap(_router2, _token2, _token1, _amount);
      uint256 newEndBalance = IERC20(_token1).balanceOf(address(this));
      require(newEndBalance > startBalance, "Trade Reverted, No Profit Made");
    }

    require(endBalance > startBalance, "Trade Reverted, No Profit Made");
  }

  function getBalance(address _tokenContractAddress) external view returns (uint256) {
    uint256 balance = IERC20(_tokenContractAddress).balanceOf(address(this));
    return balance;
  }

  function recoverEth() external {
    _isOwner();
    payable(msg.sender).transfer(address(this).balance);
  }

  function recoverTokens(address tokenAddress) external {
    _isOwner();
    IERC20 token = IERC20(tokenAddress);
    token.transfer(msg.sender, token.balanceOf(address(this)));
  }

  receive() external payable {}
}