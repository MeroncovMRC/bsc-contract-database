// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    string public name = "Nehil Flat Earth 5D Token V2";
    string public symbol = "5D";
    uint8 public decimals = 9;
    uint256 public totalSupply = 8000000000 * 10**uint256(decimals);
    address public owner;
    address public admin;
    address public marketer;
    uint256 public burnLimit = totalSupply * 80 / 100;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event Burn(address indexed burner, uint256 value);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin || msg.sender == owner, "Only the owner or admin can call this function.");
        _;
    }

    constructor() {
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
    }

    function transfer(address to, uint256 value) public returns(bool) {
        require(to != address(0), "Invalid recipient address.");
        require(value > 0 && value <= balanceOf[msg.sender], "Invalid transfer amount.");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;

        emit Transfer(msg.sender, to, value);

        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;

        emit Approval(msg.sender, spender, value);

        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(to != address(0), "Invalid recipient address.");
        require(value > 0 && value <= balanceOf[from], "Invalid transfer amount.");
        require(value <= allowance[from][msg.sender], "Insufficient allowance.");

        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;

        emit Transfer(from, to, value);

        return true;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(owner, address(0));
        owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Invalid new owner address.");

        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    function burn(uint256 value) public returns (bool) {
    require(value > 0 && value <= balanceOf[msg.sender], "Invalid burn amount.");
    require(balanceOf[msg.sender] - value >= burnLimit || msg.sender == owner, "Burn limit exceeded.");

    balanceOf[msg.sender] -= value;
    totalSupply -= value;

    emit Burn(msg.sender, value);
    emit Transfer(msg.sender, address(0), value);

    return true;
    }
    function setAdmin(address newAdmin) public onlyOwner {
        require(newAdmin != address(0), "Invalid admin address.");

        admin = newAdmin;
    }

    function setMarketer(address newMarketer) public onlyOwner {
        require(newMarketer != address(0), "Invalid marketer address.");

        marketer = newMarketer;
    }

    function accessMarketerTokens(uint256 value) public returns (bool) {
        require(msg.sender == marketer, "Only the marketer can access these tokens.");
        require(value > 0 && value <= balanceOf[owner] / 100, "Invalid marketer token amount.");

        balanceOf[owner] -= value;
        balanceOf[marketer] += value;

        emit Transfer(owner, marketer, value);

        return true;
    }
}