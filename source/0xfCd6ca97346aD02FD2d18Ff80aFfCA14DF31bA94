// SPDX-License-Identifier: Unlicensed
// File: contracts/Context.sol


pragma solidity ^0.8.4;

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}
// File: contracts/Ownable.sol


pragma solidity ^0.8.4;


/**
 * Basic access control mechanism
 */
contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
    
}
// File: contracts/libraries/Address.sol


pragma solidity ^0.8.4;

/**
 * @dev Collection of functions related to the address type
 */
library Address {

    function isContract(address account) internal view returns (bool) {

        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

 
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
// File: contracts/libraries/SafeMath.sol


pragma solidity ^0.8.4;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
// File: contracts/interfaces/IPancakeBEP20.sol


pragma solidity ^0.8.4;

interface IPancakeBEP20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);
    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);
    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
}
// File: contracts/interfaces/IPancakeFactory.sol


pragma solidity >=0.5.0;

interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;

    function INIT_CODE_PAIR_HASH() external view returns (bytes32);
}
// File: contracts/interfaces/IPancakeRouter01.sol


pragma solidity >=0.6.2;

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}
// File: contracts/interfaces/IPancakeRouter02.sol


pragma solidity >=0.6.2;


interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}
// File: contracts/interfaces/IBEP20.sol


pragma solidity ^0.8.4;

/**
 * BEP20 standard interface
 */
interface IBEP20 {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address account) external view returns (uint256);
  function transfer(address recipient, uint256 amount) external returns (bool);
  function allowance(address _owner, address spender) external view returns (uint256);
  function approve(address spender, uint256 amount) external returns (bool);
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
// File: contracts/Token.sol


pragma solidity ^0.8.4;










/**
    @title Bare-bones Token implementation
    @notice Based on the ERC-20 token standard as defined at
            https://eips.ethereum.org/EIPS/eip-20
 */
contract Token is Context, IBEP20, Ownable {
    using SafeMath for uint256;
    using Address for address;

    // Name and symbol
    string constant _name = "ShillDaCoin";
    string constant _symbol = "SHILL";
    uint8 constant _decimals = 18;

    // Due to solidity not handling decimals we are using this denominator
    uint256 denominator = 10000;

    // Mappings
    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) private _isExcludedFromMaxWallet;
    mapping (address => bool) private _isExcludedFromMaxTx;
    
    mapping (address => bool) private _isExcluded;
    address[] private _excluded;

    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal = 1000000000 * (10 ** _decimals);
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;

    // Max wallet and TX
    uint256 public _maxTxAmount = _tTotal.mul(100).div(denominator); // 1%
    uint256 public _maxWalletAmount = _tTotal.mul(400).div(denominator); // 4%
    bool public maxWalletIsSet = true;

    // Buy Fees
    uint256 public liquidityFeeBuy = 400; // 4%
    uint256 public reflectionFeeBuy = 500; // 5%
    uint256 public daoFeeBuy = 0;
    uint256 public stakingFeeBuy = 0;

    // Sell fees
    uint256 public liquidityFeeSell = 400; // 4%
    uint256 public reflectionFeeSell = 600; // 6%
    uint256 public daoFeeSell = 0;
    uint256 public stakingFeeSell = 0;

    // Fee variables
    uint256 public liquidityFee;
    uint256 public reflectionFee;
    uint256 public daoFee;
    uint256 public stakingFee;
    uint256 private _previousReflectionFee = reflectionFee;
    uint256 private _previousLiquidityFee = liquidityFee;
    uint256 private _previousDaoFee = daoFee;
    uint256 private _previousStakingFee = stakingFee;

    // Pancakeswap variables
    IPancakeRouter02 public router;
    address public pair;
    
    // Important addresses
    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;
    address public pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address public daoAddress;
    address public stakingAddress;

    // Other variables
    uint256 public tradingOpenTime;
    bool public tradingOpen = false;

    // Swap and liquidify variables
    bool public swapAndLiquifyEnabled = false;
    uint256 public minTokensForSwap = _tTotal.mul(50).div(denominator); // 0.5%
    bool inSwap;
    
    modifier swapping() { inSwap = true; _; inSwap = false; }

    /**
     * @dev Throws if called by any account other than the DAO address.
     */
    modifier onlyOwnerOrDAO() {
        require((daoAddress == _msgSender() || owner() == _msgSender()), "DAO: caller is not the dao");
        _;
    }

    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );
    event PancakePairAndRouterUpdated(address router, address pair);

    constructor() {
        _rOwned[_msgSender()] = _rTotal;
        
        // Create pancakeswap pair
        router = IPancakeRouter02(pancakeRouterAddress);
        pair = IPancakeFactory(router.factory()).createPair(router.WETH(), address(this));
        
        //exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[deadAddress] = true;
        
        _isExcludedFromMaxWallet[address(this)] = true;
        _isExcludedFromMaxWallet[owner()] = true;
        _isExcludedFromMaxWallet[deadAddress] = true;
        
        _isExcludedFromMaxTx[address(this)] = true;
        _isExcludedFromMaxTx[owner()] = true;
        _isExcludedFromMaxTx[deadAddress] = true;
        
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    // 
    // BEP20 Overrides
    // 
    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function getOwner() external view override returns (address) {
        return owner();
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    // 
    // Reflection functions
    // 
    function isExcludedFromReward(address account) public view returns (bool) {
        return _isExcluded[account];
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function deliver(uint256 tAmount) public {
        address sender = _msgSender();
        require(!_isExcluded[sender], "Excluded addresses cannot call this function");
        (uint256 rAmount,,,,,) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rTotal = _rTotal.sub(rAmount);
        _tFeeTotal = _tFeeTotal.add(tAmount);
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
            (uint256 rAmount,,,,,) = _getValues(tAmount);
            return rAmount;
        } else {
            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
            return rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    function excludeFromReward(address account) public onlyOwner {
        require(!_isExcluded[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    }

    function includeInReward(address account) external onlyOwner {
        require(_isExcluded[account], "Account is already excluded");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == account) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _tOwned[account] = 0;
                _isExcluded[account] = false;
                _excluded.pop();
                break;
            }
        }
    }
    
     //to recieve BNB from router when swaping
    receive() external payable {}

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
        (uint256 tTransferAmount, uint256 tFee, uint256 tSecondaryFees) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tSecondaryFees, _getRate());
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tSecondaryFees);
    }

    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
        uint256 tFee = calculateTaxFee(tAmount);
        uint256 tLiquidity = calculateLiquidityFee(tAmount);
        uint256 tDAO = calculateDAOFee(tAmount);
        uint256 tStaking = calculateStakingFee(tAmount);
        uint256 tSecondaryFees = tLiquidity + tDAO + tStaking;
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tSecondaryFees);
        return (tTransferAmount, tFee, tSecondaryFees);
    }

    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tSecondaryFees, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rSecondaryFees = tSecondaryFees.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rSecondaryFees);
        return (rAmount, rTransferAmount, rFee);
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }
    
    function _takeSecondaryFees(uint256 tSecondaryFees) private {
        uint256 currentRate =  _getRate();
        uint256 rSecondaryFees = tSecondaryFees.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rSecondaryFees);
        if(_isExcluded[address(this)])
            _tOwned[address(this)] = _tOwned[address(this)].add(rSecondaryFees);
    }
    
    function calculateTaxFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(reflectionFee).div(denominator);
    }

    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(liquidityFee).div(denominator);
    }

    function calculateDAOFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(daoFee).div(denominator);
    }

    function calculateStakingFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(stakingFee).div(denominator);
    }
    
    function removeAllFee() private {
        if(reflectionFee == 0 && liquidityFee == 0) return;
        
        _previousReflectionFee = reflectionFee;
        _previousLiquidityFee = liquidityFee;
        
        reflectionFee = 0;
        liquidityFee = 0;
    }
    
    function restoreAllFee() private {
        reflectionFee = _previousReflectionFee;
        liquidityFee = _previousLiquidityFee;
    }

    function checkMaxWallet(address sender, address recipient, uint256 amount) private view {
        if (tradingOpen && !_isExcludedFromMaxWallet[recipient] && !_isExcludedFromMaxWallet[sender] && recipient != deadAddress && recipient != address(this)) {
            uint256 heldTokens = balanceOf(recipient);
            require((heldTokens + amount) <= _maxWalletAmount, "Can't have that many tokens over max wallet");
        }
    }

    function checkMaxTx(address sender, address recipient, uint256 amount) private view {
        if (tradingOpen && !_isExcludedFromMaxTx[sender] && !_isExcludedFromMaxTx[recipient] && recipient != deadAddress && recipient != address(this)) {
            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
        }
    }
    
    function isExcludedFromFee(address account) public view returns(bool) {
        return _isExcludedFromFee[account];
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        if (from != owner() && to != owner()) {
            require(tradingOpen, "Transfer not allowed until trading is open");
        }

        checkMaxTx(from, to, amount);
        checkMaxWallet(from, to, amount);

        // is the token balance of this contract address over the min number of
        // tokens that we need to initiate a swap + liquidity lock?
        // also, don't get caught in a circular liquidity event.
        // also, don't swap & liquify if sender is uniswap pair.
        uint256 contractTokenBalance = balanceOf(address(this));
        
        if (contractTokenBalance >= _maxTxAmount) {
            contractTokenBalance = _maxTxAmount;
        }

        bool isSell = (from != pair);
        bool isBuy = (to != pair);

        if (isSell) {
            // // Double sell fees for first 48 hours to rek bots/jeets
            // if (block.timestamp < (tradingOpenTime + 2 days)) {
            //     reflectionFee = reflectionFeeSell.mul(2);
            //     liquidityFee = liquidityFeeSell.mul(2);
            // } else {
            reflectionFee = reflectionFeeSell;
            liquidityFee = liquidityFeeSell;
            daoFee = daoFeeSell;
            stakingFee = stakingFeeSell;
            // }
        } else {
            reflectionFee = reflectionFeeBuy;
            liquidityFee = liquidityFeeBuy;
            daoFee = daoFeeBuy;
            stakingFee = stakingFeeBuy;
        }
        
        bool overMinTokenBalance = contractTokenBalance >= minTokensForSwap;
        if (
            overMinTokenBalance &&
            !inSwap &&
            from != pair &&
            swapAndLiquifyEnabled
        ) {
            contractTokenBalance = minTokensForSwap;
            //add liquidity
            swapAndLiquify(contractTokenBalance);
        }
        
        //indicates if fee should be deducted from transfer
        bool takeFee = true;
        
        //if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
            takeFee = false;
        }

        // No taxes on normal transfers
        if(!isBuy && !isSell && takeFee) {
            takeFee = false;
        }
        
        //transfer amount, it will take tax, burn, liquidity fee
        _tokenTransfer(from,to,amount,takeFee);
    }

    function swapAndLiquify(uint256 contractTokenBalance) private swapping {
        // split the contract balance into halves
        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);

        // capture the contract's current BNB balance.
        // this is so that we can capture exactly the amount of BNB that the
        // swap creates, and not make the liquidity event include any BNB that
        // has been manually sent to the contract
        uint256 initialBalance = address(this).balance;

        // swap tokens for BNB
        swapTokensForBNB(half);

        // how much BNB did we just swap into?
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // calculate the percentages
        uint256 totalSwapFees = liquidityFee + daoFee + stakingFee;

        // add liquidity to pancakeswap
        uint256 liquidityBNB = newBalance.mul(liquidityFee).div(totalSwapFees);
        uint256 liquidityTokens = otherHalf.mul(liquidityFee).div(totalSwapFees);
        addLiquidity(liquidityTokens, liquidityBNB);

        // add tokens and BNB to DAO
        uint256 daoBNB = newBalance.mul(daoFee).div(totalSwapFees);
        uint256 daoTokens = otherHalf.mul(daoFee).div(totalSwapFees);
        addDAO(daoTokens, daoBNB);

        // add tokens and BNB to Staking
        uint256 stakingBNB = newBalance.mul(stakingFee).div(totalSwapFees);
        uint256 stakingTokens = otherHalf.mul(stakingFee).div(totalSwapFees);
        addStaking(stakingTokens, stakingBNB);
        
        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function swapTokensForBNB(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();

        _approve(address(this), address(router), tokenAmount);

        // make the swap
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(router), tokenAmount);

        // add the liquidity
        router.addLiquidityETH{value: bnbAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            address(this),//liquidity tokens are locked in the contract
            block.timestamp
        );
    }

    function addDAO(uint256 tokenAmount, uint256 bnbAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(daoAddress), tokenAmount);
        
        _rOwned[address(this)] = _rOwned[address(this)].sub(tokenAmount);
        _rOwned[daoAddress] = _rOwned[daoAddress].add(tokenAmount);

        (bool successDAO, /* bytes memory data */) = payable(daoAddress).call{value: bnbAmount, gas: 30000}("");
        require(successDAO, "DAO receiver rejected BNB transfer");
    }

    function addStaking(uint256 tokenAmount, uint256 bnbAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(stakingAddress), tokenAmount);
        
        _rOwned[address(this)] = _rOwned[address(this)].sub(tokenAmount);
        _rOwned[stakingAddress] = _rOwned[stakingAddress].add(tokenAmount);

        (bool successStaking, /* bytes memory data */) = payable(stakingAddress).call{value: bnbAmount, gas: 30000}("");
        require(successStaking, "Staking receiver rejected BNB transfer");
    }

    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
        if (!takeFee) {
            removeAllFee();
        }
        
        if (_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferFromExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
            _transferToExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferStandard(sender, recipient, amount);
        } else if (_isExcluded[sender] && _isExcluded[recipient]) {
            _transferBothExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }
        
        if(!takeFee)
            restoreAllFee();
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSecondaryFees) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeSecondaryFees(tSecondaryFees);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           
        _takeSecondaryFees(tLiquidity);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSecondaryFees) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   
        _takeSecondaryFees(tSecondaryFees);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }


    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSecondaryFees) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        
        _takeSecondaryFees(tSecondaryFees);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    // 
    // Functions callable by owner
    // 
    // Enable trading (once called trading can't be disabled)
    function openTrading() public onlyOwner {
        tradingOpen = true;
        tradingOpenTime = block.timestamp;
    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    function excludeFromMaxWallet(address account) public onlyOwner {
        _isExcludedFromMaxWallet[account] = true;
    }

    function excludeFromMaxTx(address account) public onlyOwner {
        _isExcludedFromMaxTx[account] = true;
    }
    
    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }

    function includeInMaxWallet(address account) public onlyOwner {
        _isExcludedFromMaxWallet[account] = false;
    }

    function includeInMaxTx(address account) public onlyOwner {
        _isExcludedFromMaxTx[account] = false;
    }
    
    function setLiquidityFeeBuy(uint256 fee) external onlyOwnerOrDAO {
        require(fee <= 600); // can't set fees too high 6% max making total max 12%
        liquidityFeeBuy = fee;
    }

    function setLiquidityFeeSell(uint256 fee) external onlyOwnerOrDAO {
        require(fee <= 600); // can't set fees too high 6% max making total max 12%
        liquidityFeeSell = fee;
    }

    function setReflectionFeeBuy(uint256 fee) external onlyOwnerOrDAO {
        require(fee <= 600); // can't set fees too high 6% max making total max 12%
        reflectionFeeBuy = fee;
    }

    function setreflectionFeeSell(uint256 fee) external onlyOwnerOrDAO {
        require(fee <= 600); // can't set fees too high 6% max making total max 12%
        reflectionFeeSell = fee;
    }

    function setDAOFeeBuy(uint256 fee) external onlyOwnerOrDAO {
        require(fee <= 600); // can't set fees too high 6% max making total max 12%
        daoFeeBuy = fee;
    }

    function setDAOFeeSell(uint256 fee) external onlyOwnerOrDAO {
        require(fee <= 600); // can't set fees too high 6% max making total max 12%
        daoFeeSell = fee;
    }

    function setStakingFeeBuy(uint256 fee) external onlyOwnerOrDAO {
        require(fee <= 600); // can't set fees too high 6% max making total max 12%
        stakingFeeBuy = fee;
    }

    function setstakingFeeSell(uint256 fee) external onlyOwnerOrDAO {
        require(fee <= 600); // can't set fees too high 6% max making total max 12%
        stakingFeeSell = fee;
    }
   
    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwnerOrDAO {
        require(maxTxPercent >= 100); // can't restrict transactions below 1%
        require(maxTxPercent <= _maxWalletAmount); // can't allow transactions over max wallet
        _maxTxAmount = _tTotal.mul(maxTxPercent).div(denominator);
    }

    function setMaxWalletAmount(uint256 maxWalletAmount) external onlyOwnerOrDAO {
        require(maxWalletAmount >= 100); // can't restrict max wallet below 1%
        require(maxWalletAmount <= 500); // can't allow max wallet over 5%
        _maxWalletAmount = _tTotal.mul(maxWalletAmount).div(denominator);
    }

    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwnerOrDAO {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }

    function updatePancakePairAndRouter(address _router, address _pair) public onlyOwner {
        pancakeRouterAddress = _router;
        router = IPancakeRouter02(_router);
        pair = _pair;
        emit PancakePairAndRouterUpdated(_router, _pair);
    }

    function setDAOAddress(address _dao) public onlyOwner {
        daoAddress = _dao;
        
        _isExcludedFromFee[daoAddress] = true;
        _isExcludedFromMaxWallet[daoAddress] = true;
        _isExcludedFromMaxTx[daoAddress] = true;
        _isExcluded[daoAddress] = true;
        _excluded.push(daoAddress);
    }

    function setStakingAddress(address _staking) public onlyOwner {
        stakingAddress = _staking;

        _isExcludedFromFee[stakingAddress] = true;
        _isExcludedFromMaxWallet[stakingAddress] = true;
        _isExcludedFromMaxTx[stakingAddress] = true;
        _isExcluded[stakingAddress] = true;
        _excluded.push(stakingAddress);
    }
}