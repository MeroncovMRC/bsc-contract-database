{"BrandPresale01.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./ReentrancyGuard.sol\";\nimport \"./Ownable.sol\";\nimport \"./IBEP20.sol\";\n\ncontract BrandPresale01  is Ownable, ReentrancyGuard {\n    bool private fundByTokens = true;\n    IBEP20 public fundToken;\n\n    uint256 public startTime;\n    uint256 public duration;\n\n    uint256 public rate;\n    uint256 public cap;\n    uint256 public tokensSold;\n\n    // Max sell per user in currency\n    uint256 public maxSell;\n    // Min contribution per TX in currency\n    uint256 public minSell;\n\n    uint256 public raised;\n    uint256 public participants;\n\n    mapping(address =\u003e uint256) public balances;\n\n    bool public isWhitelistEnabled = false;\n    mapping(address =\u003e bool) public whitelisted;\n\n    event RateChanged(uint256 newRate);\n    event CapChanged(uint256 newCap);\n    event MinChanged(uint256 value);\n    event MaxChanged(uint256 value);\n    event StartChanged(uint256 newStartTime);\n    event DurationChanged(uint256 newDuration);\n    event WhitelistChanged(bool newEnabled);\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    constructor(uint256 _startTime, uint256 _saleDuration, uint256 _rate, uint256 _cap, bool _whitelist, address _fundToken) {\n        startTime = _startTime;\n        duration = _saleDuration;\n        rate = _rate;\n        cap = _cap;\n        isWhitelistEnabled = _whitelist;\n        whitelisted[msg.sender] = true;\n        fundByTokens = _fundToken != address(0);\n        if (fundByTokens) {\n            fundToken = IBEP20(_fundToken);\n        }\n    }\n\n    modifier ongoingSale(){\n        require(isLive(), \"Presale is not live\");\n        _;\n    }\n\n    function isLive() public view returns (bool) {\n        return block.timestamp \u003e startTime \u0026\u0026 block.timestamp \u003c startTime + duration;\n    }\n\n    function getMinMaxLimits() external view returns (uint256, uint256) {\n        return (minSell, maxSell);\n    }\n\n    function setMin(uint256 value) public onlyOwner {\n        require(maxSell == 0 || value \u003c= maxSell, \"Must be smaller than max\");\n        minSell = value;\n        emit MinChanged(value);\n    }\n\n    function setMax(uint256 value) public onlyOwner {\n        require(minSell == 0 || value \u003e= minSell, \"Must be bigger than min\");\n        maxSell = value;\n        emit MaxChanged(value);\n    }\n\n    function setRate(uint256 newRate) public onlyOwner {\n        require(!isLive(), \"Presale is live, rate change not allowed\");\n        rate = newRate;\n        emit RateChanged(rate);\n    }\n    \n    function setCap(uint256 newCap) public onlyOwner {\n        cap = newCap;\n        emit CapChanged(cap);\n    }\n\n    function setStartTime(uint256 newStartTime) public onlyOwner {\n        startTime = newStartTime;\n        emit StartChanged(startTime);\n    }\n\n    function setSaleDuration(uint256 newDuration) public onlyOwner {\n        duration = newDuration;\n        emit DurationChanged(duration);\n    }\n\n    function setWhitelistEnabled(bool enabled) public onlyOwner {\n        isWhitelistEnabled = enabled;\n        emit WhitelistChanged(enabled);\n    }\n\n    function calculatePurchaseAmount(uint purchaseAmountWei) public view returns (uint256) {\n        return purchaseAmountWei * rate;\n    }\n\n    receive() external payable {\n        require(!fundByTokens, \"This presale is funded by tokens, use buyTokens(value)\");\n        buyTokens();\n    }\n\n    function buyTokens() public payable ongoingSale nonReentrant returns (bool) {\n        require(!fundByTokens, \"Sale: presale is funded by tokens but value is missing\");\n        require(!isWhitelistEnabled || whitelisted[msg.sender], \"Sale: not in whitelist\");\n\n        uint256 amount = calculatePurchaseAmount(msg.value);\n        require(minSell == 0 || msg.value \u003e= minSell, \"Sale: amount is too small\");\n        require(amount != 0, \"Sale: amount is 0\");\n        require(tokensSold + amount \u003c= cap, \"Sale: cap reached\");\n\n        address beneficiary = msg.sender;\n\n        tokensSold = tokensSold + amount;\n        balances[beneficiary] = balances[beneficiary] + amount;\n\n        require(maxSell == 0 || (balances[beneficiary] / rate) \u003c= maxSell, \"Sale: amount exceeds max\");\n\n        raised = raised + msg.value;\n        participants = participants + 1;\n\n        emit TokensPurchased(_msgSender(), beneficiary, msg.value, amount);\n        return true;\n    }\n\n    /**\n    * The fund token must be first approved to be transferred by presale contract for the given \"value\".\n    */\n    function buyTokens(uint256 value) public ongoingSale nonReentrant returns (bool) {\n        require(fundByTokens, \"Sale: funding by tokens is not allowed\");\n        require(!isWhitelistEnabled || whitelisted[msg.sender], \"Sale: not whitelisted\");\n        require(fundToken.allowance(msg.sender, address(this)) \u003e= value, \u0027Sale: fund token not approved\u0027);\n\n        uint256 amount = calculatePurchaseAmount(value);\n        require(minSell == 0 || value \u003e= minSell, \"Sale: amount is too small\");\n        require(amount != 0, \"Sale: amount is 0\");\n        require(tokensSold + amount \u003c= cap, \"Sale: cap reached\");\n\n        require(fundToken.transferFrom(msg.sender, address(this), value), \u0027Sale: failed to transfer payment\u0027);\n\n        address beneficiary = msg.sender;\n\n        tokensSold = tokensSold + amount;\n        balances[beneficiary] = balances[beneficiary] + amount;\n\n        require(maxSell == 0 || (balances[beneficiary] / rate) \u003c= maxSell, \"Sale: amount exceeds max\");\n\n        raised = raised + value;\n        participants = participants + 1;\n\n        emit TokensPurchased(_msgSender(), beneficiary, value, amount);\n        return true;\n    }\n\n    function balanceOf(address account) external view returns (uint256) {\n        return balances[account];\n    }\n\n    function withdrawBalance(uint256 amount) external onlyOwner {\n        if (fundByTokens) {\n            fundToken.transfer(owner(), amount);\n        } else {\n            payable(owner()).transfer(amount);\n        }\n    }\n\n    function withdrawAll() external onlyOwner {\n        uint256 balance = address(this).balance;\n        if (balance \u003e 0) {\n            payable(owner()).transfer(balance);\n        }\n\n        if (fundByTokens \u0026\u0026 fundToken.balanceOf(address(this)) \u003e 0) {\n            fundToken.transfer(owner(), fundToken.balanceOf(address(this)));\n        }\n        \n    }\n    \n    function resetPresale() external onlyOwner {\n        rate = 0;\n        raised = 0;\n        tokensSold = 0;\n        participants = 0;\n    }\n\n    function batchAddWhitelisted(address[] calldata addresses) external onlyOwner {\n        for (uint i = 0; i \u003c addresses.length; i++) {\n            whitelisted[addresses[i]] = true;\n        }\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.8.0;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n    * @dev Returns the token name.\n    */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"}}