
// File: contracts/contracts/proxy/GifterV2.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

import "../interfaces/IGifter.sol";
import "../interfaces/OwnableV2.sol";
import "../interfaces/IBEP20.sol";

contract GiftV2 is IGifter, OwnableV2
{
    IGifter controller;
    IBEP20 coin;
    event onGift(address indexed receipt, uint value, bool answer);


    mapping (address => bool) private owners;
    function addOwner(address added) onlyOwner public {
        owners[added] = true;
    }

    constructor()
    { 

    }
    function gift (address to, uint amount) public returns(bool) 
    {
        require(owners[msg.sender], "no way");
        require(coin.balanceOf(address(this)) >= amount, "low tokens");
        bool answer =  controller.gift(to, amount);
        emit onGift(to, amount, answer);
        return answer;
    }
    function setController(address _contr) public onlyOwner {
        controller = IGifter(_contr);
    }
    function setCoin(address _coin) public onlyOwner {
        coin = IBEP20(_coin);
    }

    function backup(uint amount) public onlyOwner {
        coin.transfer(_owner, amount);
    }
}

// File: contracts/contracts/interfaces/IBEP20.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

interface IBEP20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender,address recipient,uint amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

// File: contracts/contracts/interfaces/OwnableV2.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

import "./Context.sol";

abstract contract OwnableV2 is Context
{
    address _owner;
    address public _newOwner;
    constructor()  
    {
        _owner = payable(msg.sender);
    }

    modifier onlyOwner() 
    {
        require(_msgSender() == _owner, "Only owner");
        _;
    }

    function changeOwner(address newOwner) onlyOwner public
    {
        _newOwner = newOwner;
    }
    function confirm() public
    {
        require(_newOwner == msg.sender);
        _owner = _newOwner;
    }
}



// File: contracts/contracts/interfaces/IGifter.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

interface IGifter {
    function gift (address to, uint amount) external returns(bool);
}

// File: contracts/contracts/interfaces/Context.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

abstract contract Context 
{
    function _msgSender() internal view virtual returns (address) 
    {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes calldata) 
    {
        this; 
        return msg.data;
    }
}

