
// File: contracts/others/BlocVestTrickleVault.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @author Brewlabs
 * This contract has been developed by brewlabs.info
 */

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "../libs/IUniRouter02.sol";
import "../libs/IUniswapV2Pair.sol";

interface IBlocVestNft is IERC721 {
  function rarities(uint256 tokenId) external view returns (uint256);
}

contract BlocVestTrickleVault is Ownable, IERC721Receiver, ReentrancyGuard {
  using SafeERC20 for IERC20;
  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

  IERC20 public bvst = IERC20(0x592032513b329a0956b3f14d661119880F2361a6);
  IERC20 public bvstLP = IERC20(0xF9B07b7528FEEb48811794361De37b4BAdE1734f);

  uint256 public claimLimit = 365;
  uint256 public userLimit = 25000 ether;
  uint256 public compoundLimit = 1000;

  address public bvstNft;
  uint256 public defaultApr = 50;
  uint256[4] public cardAprs = [25, 50, 100, 150];

  struct HarvestFee {
    uint256 feeInBNB;
    uint256 feeInToken;
    uint256 fee;
  }
  HarvestFee[3] public harvestFees; // 0 - default, 1 - weekly tax, 2 - whale tax
  uint256 public depositFee = 1000;
  uint256 public compoundFee = 1000;
  uint256 public whaleLimit = 85;

  struct UserInfo {
    uint256 apr;
    uint256 cardType;
    uint256 rewards;
    uint256 totalStaked;
    uint256 totalRewards;
    uint256 lastRewardBlock;
    uint256 lastClaimBlock;
    uint256 totalClaims;
  }
  mapping(address => UserInfo) public userInfo;
  uint256 public totalStaked;

  address public uniRouterAddress;
  address[] public tokenToBnbPath;

  uint256 public autoCompoundFeeInDay = 0.007 ether;
  mapping(address => uint256) public autoCompounds;
  address[] public autoCompounders;

  address public treasury = 0xBd6B80CC1ed8dd3DBB714b2c8AD8b100A7712DA7;
  uint256 public performanceFee = 0.0035 ether;

  bytes32 private airdropMerkleRoot;
  mapping(address => bool) public migrated;

  event Deposit(address indexed user, uint256 amount);
  event Claim(address indexed user, uint256 amount);
  event AutoCompound(address user, uint256 amount);
  event RequestAutoCompound(address user, uint256 times);

  event NftStaked(address indexed user, address nft, uint256 tokenId);

  event SetDepositFee(uint256 percent);
  event SetCompoundFee(uint256 percent);
  event SetAutoCompoundFee(uint256 fee);
  event SetUserDepositLimit(uint256 limit);
  event SetClaimLimit(uint256 count);
  event SetCompoundLimit(uint256 percent);
  event SetDefaultApr(uint256 apr);
  event SetCardAprs(uint256[4] aprs);
  event SetHarvestFees(uint8 feeType, uint256 inBNBToTreasury, uint256 inTokenToTreasury, uint256 toContract);
  event SetWhaleLimit(uint256 percent);
  event SetSnapShot(bytes32 merkleRoot);

  event AdminTokenRecovered(address tokenRecovered, uint256 amount);
  event ServiceInfoUpadted(address addr, uint256 fee);
  event SetSettings(address uniRouter, address[] tokenToBnbPath);

  constructor(
    address _nft,
    address _uniRouter,
    address[] memory _path
  ) {
    bvstNft = _nft;
    uniRouterAddress = _uniRouter;
    tokenToBnbPath = _path;

    harvestFees[0] = HarvestFee(0, 0, 1000);
    harvestFees[1] = HarvestFee(0, 0, 5000);
    harvestFees[2] = HarvestFee(1500, 1500, 2000);
  }

  function migrate(uint256 _amount, bytes32[] memory _merkleProof) external nonReentrant {
    require(airdropMerkleRoot != "", "Migration not enabled");
    require(!migrated[msg.sender], "Already migrated");

    // Verify the merkle proof.
    bytes32 leaf = keccak256(abi.encodePacked(msg.sender, _amount));
    require(MerkleProof.verify(_merkleProof, airdropMerkleRoot, leaf), "Invalid merkle proof.");

    migrated[msg.sender] = true;
    uint256 _pending = pendingRewards(msg.sender);

    UserInfo storage user = userInfo[msg.sender];
    user.rewards += _pending;
    user.lastRewardBlock = block.number;
    user.lastClaimBlock = block.number;
    user.totalStaked = user.totalStaked + _amount;
    totalStaked = totalStaked + _amount;

    emit Deposit(msg.sender, _amount);
  }

  function deposit(uint256 _amount) external payable nonReentrant {
    UserInfo storage user = userInfo[msg.sender];
    require(_amount > 0, "invalid amount");
    require(_amount + user.totalStaked <= userLimit, "cannot exceed maximum limit");

    _transferPerformanceFee();

    uint256 beforeAmount = bvst.balanceOf(address(this));
    bvst.safeTransferFrom(address(msg.sender), address(this), _amount);
    uint256 afterAmount = bvst.balanceOf(address(this));
    uint256 realAmount = afterAmount - beforeAmount;
    realAmount = (realAmount * (10000 - depositFee)) / 10000;

    uint256 _pending = pendingRewards(msg.sender);
    user.rewards += _pending;
    user.lastRewardBlock = block.number;
    user.lastClaimBlock = block.number;
    user.totalStaked = user.totalStaked + realAmount;
    totalStaked = totalStaked + realAmount;

    emit Deposit(msg.sender, realAmount);
  }

  function stakeNft(uint256 _tokenId) external payable nonReentrant {
    _transferPerformanceFee();

    UserInfo storage user = userInfo[msg.sender];
    uint256 _pending = pendingRewards(msg.sender);
    user.totalRewards = user.totalRewards + _pending;

    uint256 tSupply = (bvst.totalSupply() * compoundLimit) / 10000;
    if (_pending > tSupply) _pending = tSupply;
    _pending = (_pending * (10000 - compoundFee)) / 10000;

    user.rewards = 0;
    user.lastRewardBlock = block.number;
    if (_pending > 0) {
      user.totalStaked = user.totalStaked + _pending;
      totalStaked = totalStaked + _pending;
      emit Deposit(msg.sender, _pending);
    }

    IERC721(bvstNft).safeTransferFrom(msg.sender, address(this), _tokenId);

    uint256 rarity = IBlocVestNft(bvstNft).rarities(_tokenId);
    require(user.cardType < rarity + 1, "cannot stake lower level card");

    user.cardType = rarity + 1;
    user.apr = cardAprs[rarity] + defaultApr;

    emit NftStaked(msg.sender, bvstNft, _tokenId);
  }

  function harvest() external payable nonReentrant {
    require(userInfo[msg.sender].totalClaims <= claimLimit, "exceed claim limit");

    _transferPerformanceFee();

    uint256 _pending = _claim(msg.sender);
    if (_pending > 0) {
      bvst.safeTransfer(msg.sender, _pending);
    }

    UserInfo storage user = userInfo[msg.sender];
    user.totalClaims = user.totalClaims + 1;
    user.lastClaimBlock = block.number;
  }

  function compound() external payable nonReentrant {
    _transferPerformanceFee();
    _compound(msg.sender);
  }

  function autoCompound(uint256 _index) external nonReentrant {
    if (_index >= autoCompounders.length) return;

    address _user = autoCompounders[_index];
    if (autoCompounds[_user] == 0) {
      autoCompounders[_index] = autoCompounders[autoCompounders.length - 1];
      autoCompounders.pop();
      return;
    }

    autoCompounds[_user] = autoCompounds[_user] - 1;
    if (autoCompounds[_user] == 0) {
      autoCompounders[_index] = autoCompounders[autoCompounders.length - 1];
      autoCompounders.pop();
    }

    uint256 _pending = _compound(_user);
    emit AutoCompound(_user, _pending);
  }

  function requestAutoCompound(uint256 _times) external payable nonReentrant {
    require(msg.value >= _times * autoCompoundFeeInDay, "insufficient compound fee");

    if (autoCompounds[msg.sender] == 0) {
      autoCompounders.push(msg.sender);
    }
    autoCompounds[msg.sender] = autoCompounds[msg.sender] + _times;
    payable(treasury).transfer(msg.value);

    emit RequestAutoCompound(msg.sender, _times);
  }

  function autoCompounderCount() external view returns (uint256) {
    return autoCompounders.length;
  }

  function autoCompounderInfo(uint256 _index) external view returns (UserInfo memory) {
    if (_index >= autoCompounders.length) return userInfo[address(0x0)];

    address _user = autoCompounders[_index];
    return userInfo[_user];
  }

  function pendingRewards(address _user) public view returns (uint256) {
    UserInfo memory user = userInfo[_user];

    uint256 expiryBlock = user.lastRewardBlock + 28800;
    if (user.lastRewardBlock == 0 || expiryBlock < user.lastRewardBlock) {
      return 0;
    }

    uint256 multiplier = (expiryBlock > block.number ? block.number : expiryBlock) - user.lastRewardBlock;
    uint256 apr = user.apr == 0 ? defaultApr : user.apr;

    return user.rewards + (multiplier * user.totalStaked * apr) / 10000 / 28800;
  }

  function appliedTax(address _user) internal view returns (HarvestFee memory) {
    UserInfo memory user = userInfo[_user];
    if (user.lastRewardBlock == 0) return harvestFees[0];

    uint256 _pending = pendingRewards(_user);

    _pending = ((10000 - 25) * _pending) / 10000; // 0.25%
    (uint112 _reserve0, , ) = IUniswapV2Pair(address(bvstLP)).getReserves();
    uint256 priceImpact = (_pending * 10000) / (uint256(_reserve0) + _pending);
    if (priceImpact >= whaleLimit) return harvestFees[2];

    uint256 passedBlocks = block.number - user.lastClaimBlock;
    if (passedBlocks <= 7 * 28800) return harvestFees[1];
    return harvestFees[0];
  }

  function _claim(address _user) internal returns (uint256) {
    UserInfo storage user = userInfo[_user];
    HarvestFee memory tax = appliedTax(_user);

    uint256 _pending = pendingRewards(_user);
    user.apr = user.cardType == 0 ? 0 : cardAprs[user.cardType - 1];
    user.apr += defaultApr;
    user.rewards = 0;
    user.totalRewards = user.totalRewards + _pending;
    user.lastRewardBlock = block.number;

    if (_pending == 0) return 0;
    uint256 feeInBNB = (_pending * tax.feeInBNB) / 10000;
    if (feeInBNB > 0) {
      _safeSwap(feeInBNB, tokenToBnbPath, treasury);
    }
    uint256 feeInToken = (_pending * tax.feeInToken) / 10000;
    uint256 fee = (_pending * tax.fee) / 10000;

    bvst.safeTransfer(treasury, feeInToken);
    emit Claim(_user, _pending);

    return _pending - feeInBNB - feeInToken - fee;
  }

  function _compound(address _user) internal returns (uint256) {
    UserInfo storage user = userInfo[_user];
    uint256 _pending = pendingRewards(_user);
    user.totalRewards = user.totalRewards + _pending;

    uint256 tSupply = (bvst.totalSupply() * compoundLimit) / 10000;
    if (_pending > tSupply) _pending = tSupply;
    _pending = (_pending * (10000 - compoundFee)) / 10000;

    user.rewards = 0;
    user.lastRewardBlock = block.number;
    user.apr = user.cardType == 0 ? 0 : cardAprs[user.cardType - 1];
    user.apr += defaultApr;

    if (_pending > 0) {
      user.totalStaked = user.totalStaked + _pending;
      totalStaked = totalStaked + _pending;
      emit Deposit(_user, _pending);
    }

    return _pending;
  }

  function _transferPerformanceFee() internal {
    require(msg.value >= performanceFee, "should pay small gas to compound or harvest");

    payable(treasury).transfer(performanceFee);
    if (msg.value > performanceFee) {
      payable(msg.sender).transfer(msg.value - performanceFee);
    }
  }

  function setDepositFee(uint256 _percent) external onlyOwner {
    require(_percent < 10000, "invalid limit");
    depositFee = _percent;
    emit SetDepositFee(_percent);
  }

  function setAutoCompoundFee(uint256 _fee) external onlyOwner {
    autoCompoundFeeInDay = _fee;
    emit SetAutoCompoundFee(_fee);
  }

  function setDepositUserLimit(uint256 _limit) external onlyOwner {
    userLimit = _limit;
    emit SetUserDepositLimit(_limit);
  }

  function setClaimLimit(uint256 _count) external onlyOwner {
    claimLimit = _count;
    emit SetClaimLimit(_count);
  }

  function setDefaultApr(uint256 _apr) external onlyOwner {
    require(_apr < 10000, "invalid apr");
    defaultApr = _apr;
    emit SetDefaultApr(_apr);
  }

  function setCardAprs(uint256[4] memory _aprs) external onlyOwner {
    for (uint256 i = 0; i <= 4; i++) {
      require(_aprs[i] < 10000, "Invalid apr");
    }
    cardAprs = _aprs;
    emit SetCardAprs(_aprs);
  }

  function setHarvestFees(
    uint8 _feeType,
    uint256 _inBNBToTreasury,
    uint256 _inTokenToTreasury,
    uint256 _toContract
  ) external onlyOwner {
    require(_feeType <= 3, "invalid type");
    require(_inBNBToTreasury + _inTokenToTreasury + _toContract < 10000, "invalid base apr");

    HarvestFee storage _fee = harvestFees[_feeType];
    _fee.feeInBNB = _inBNBToTreasury;
    _fee.feeInToken = _inTokenToTreasury;
    _fee.fee = _toContract;

    emit SetHarvestFees(_feeType, _inBNBToTreasury, _inTokenToTreasury, _toContract);
  }

  function setWhaleLimit(uint256 _percent) external onlyOwner {
    require(_percent < 10000, "invalid limit");
    whaleLimit = _percent;
    emit SetWhaleLimit(_percent);
  }

  function setCompoundFee(uint256 _percent) external onlyOwner {
    require(_percent <= 10000, "invalid percent");
    compoundFee = _percent;
    emit SetCompoundFee(_percent);
  }

  function setCompoundLimit(uint256 _percent) external onlyOwner {
    require(_percent < 10000, "invalid percent");
    compoundLimit = _percent;
    emit SetCompoundLimit(_percent);
  }

  function setSnapShotForAirdrop(bytes32 _merkleRoot) external onlyOwner {
    require(_merkleRoot != "cannot set empty data");
    airdropMerkleRoot = _merkleRoot;
    emit SetSnapShot(_merkleRoot);
  }

  function setServiceInfo(address _treasury, uint256 _fee) external {
    require(msg.sender == treasury, "setServiceInfo: FORBIDDEN");
    require(_treasury != address(0x0), "Invalid address");

    treasury = _treasury;
    performanceFee = _fee;

    emit ServiceInfoUpadted(_treasury, _fee);
  }

  function setSettings(address _uniRouter, address[] memory _tokenToBnbPath) external onlyOwner {
    uniRouterAddress = _uniRouter;
    tokenToBnbPath = _tokenToBnbPath;
    emit SetSettings(_uniRouter, _tokenToBnbPath);
  }

  function _safeSwap(
    uint256 _amountIn,
    address[] memory _path,
    address _to
  ) internal {
    bvst.safeApprove(uniRouterAddress, _amountIn);
    IUniRouter02(uniRouterAddress).swapExactTokensForETHSupportingFeeOnTransferTokens(
      _amountIn,
      0,
      _path,
      _to,
      block.timestamp + 600
    );
  }

  /**
   * @notice It allows the admin to recover wrong tokens sent to the contract
   * @param _token: the address of the token to withdraw
   * @param _amount: the number of tokens to withdraw
   * @dev This function is only callable by admin.
   */
  function rescueTokens(address _token, uint256 _amount) external onlyOwner {
    if (_token == address(0x0)) {
      payable(msg.sender).transfer(_amount);
    } else {
      IERC20(_token).safeTransfer(address(msg.sender), _amount);
    }

    emit AdminTokenRecovered(_token, _amount);
  }

  /**
   * onERC721Received(address operator, address from, uint256 tokenId, bytes data) → bytes4
   * It must return its Solidity selector to confirm the token transfer.
   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
   */
  function onERC721Received(
    address,
    address,
    uint256,
    bytes calldata
  ) external view override returns (bytes4) {
    require(msg.sender == bvstNft, "not enabled NFT");
    return _ERC721_RECEIVED;
  }

  receive() external payable {}
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)

pragma solidity ^0.8.0;

/**
 * @dev These functions deal with verification of Merkle Trees proofs.
 *
 * The proofs can be generated using the JavaScript library
 * https://github.com/miguelmota/merkletreejs[merkletreejs].
 * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.
 *
 * See `test/utils/cryptography/MerkleProof.test.js` for some examples.
 */
library MerkleProof {
    /**
     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree
     * defined by `root`. For this, a `proof` must be provided, containing
     * sibling hashes on the branch from the leaf to the root of the tree. Each
     * pair of leaves and each pair of pre-images are assumed to be sorted.
     */
    function verify(
        bytes32[] memory proof,
        bytes32 root,
        bytes32 leaf
    ) internal pure returns (bool) {
        return processProof(proof, leaf) == root;
    }

    /**
     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up
     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt
     * hash matches the root of the tree. When processing the proof, the pairs
     * of leafs & pre-images are assumed to be sorted.
     *
     * _Available since v4.4._
     */
    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            bytes32 proofElement = proof[i];
            if (computedHash <= proofElement) {
                // Hash(current computed hash + current element of the proof)
                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
            } else {
                // Hash(current element of the proof + current computed hash)
                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
            }
        }
        return computedHash;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: contracts/libs/IUniRouter02.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IUniRouter01.sol";

interface IUniRouter02 is IUniRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

// File: contracts/libs/IUniswapV2Pair.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IUniswapV2Pair {
  function token0() external view returns (address);

  function token1() external view returns (address);

  function getReserves()
    external
    view
    returns (
      uint112 _reserve0,
      uint112 _reserve1,
      uint32 _blockTimestampLast
    );

  function price0CumulativeLast() external view returns (uint256);
  function price1CumulativeLast() external view returns (uint256);
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/libs/IUniRouter01.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IUniRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}
