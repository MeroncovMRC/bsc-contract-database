{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.11;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"ChiefFarmer.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./WayaToken.sol\";\r\n\r\n\r\n/// @notice The idea for this ChiefFarmer (CF) contract is to be the owner of a dummy token\r\n/// that is deposited into the TaskMaster (TM) contract.\r\n/// The allocation point for this pool on TM is the total allocation point for all pools that receive incentives.\r\ncontract ChiefFarmer is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for WayaToken;\r\n\r\n    /// @notice Info of each ChiefFarmer user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\r\n    ///\r\n    /// We do some fancy math here. Basically, any point in time, the amount of WAYAs\r\n    /// entitled to a user but is pending to be distributed is:\r\n    ///\r\n    ///   pending reward = (user share * pool.accWayaPerShare) - user.rewardDebt\r\n    ///\r\n    ///   Whenever a user deposits or withdraws LP tokens to a pool. Here\u0027s what happens:\r\n    ///   1. The pool\u0027s `accWayaPerShare` (and `lastRewardBlock`) gets updated.\r\n    ///   2. User receives the pending reward sent to his/her address.\r\n    ///   3. User\u0027s `amount` gets updated. Pool\u0027s `totalBoostedShare` gets updated.\r\n    ///   4. User\u0027s `rewardDebt` gets updated.\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n        uint256 boostMultiplier;\r\n    }\r\n\r\n    /// @notice Info of each ChiefFarmer pool.\r\n    /// `allocPoint` The amount of allocation points assigned to the pool.\r\n    ///     Also known as the amount of \"multipliers\". Combined with `totalXAllocPoint`, it defines the % of\r\n    ///     WAYA rewards each pool gets.\r\n    /// `accWayaPerShare` Accumulated WAYAs per share, times 1e12.\r\n    /// `lastRewardBlock` Last block number that pool update action is executed.\r\n    /// `isRegular` The flag to set pool is regular or special. See below:\r\n    ///     In TaskMaster farms are \"regular pools\". \"special pools\", which use a different sets of\r\n    ///     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\r\n    ///     the WAYA rewards to all the PlexSwap products.\r\n    /// `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\r\n    \r\n   struct PoolInfo {\r\n        uint256 accWayaPerShare;\r\n        uint256 lastRewardBlock;\r\n        uint256 allocPoint;\r\n        uint256 totalBoostedShare;\r\n        bool    isRegular;\r\n    }\r\n\r\n    /// @notice The only address can withdraw all the WAYA Reserves.\r\n    address public financialController;\r\n\r\n    /// @notice The contract handles the share boosts.\r\n    address public boostContract;\r\n\r\n    /// @notice Info of each ChiefFarmer pool.\r\n    PoolInfo[] public poolInfo;\r\n\r\n    /// @notice Address of the LP token for each CF pool.\r\n    IERC20[] public lpToken;\r\n\r\n    /// @notice Info of each pool user.\r\n    mapping(uint256 =\u003e mapping(address =\u003e UserInfo)) public userInfo;\r\n\r\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\r\n    mapping(address =\u003e bool) public whiteList;\r\n\r\n    /// @notice Total regular allocation points. Must be the sum of all regular pools\u0027 allocation points.\r\n    uint256 public totalRegularAllocPoint;\r\n\r\n    /// @notice Total special allocation points. Must be the sum of all special pools\u0027 allocation points.\r\n    uint256 public totalSpecialAllocPoint;\r\n\r\n    uint256 public constant ACC_WAYA_PRECISION = 1e18;\r\n\r\n    /// @notice Basic boost factor, none boosted user\u0027s boost factor\r\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\r\n\r\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\r\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\r\n\r\n    /// @notice total waya rate = toReserve + toRegular + toSpecial\r\n    uint256 public constant WAYA_RATE_TOTAL_PRECISION = 1e12;\r\n\r\n    /// @notice The last block number of WAYA reserve action being executed.\r\n\r\n    /// @notice WAYA distribute % for reserve\r\n    uint256 public wayaRateToReserve = 25750000000;\r\n\r\n    /// @notice WAYA distribute % for regular farm pool\r\n    uint256 public wayaRateToRegularFarm = 175365000000;\r\n\r\n    /// @notice WAYA distribute % for special pools\r\n    uint256 public wayaRateToSpecialFarm = 798885000000;\r\n\r\n    //-------------------------------- The Beginning of Heaven  ---------------------\r\n    // The WAYA TOKEN!\r\n    WayaToken public immutable WAYA;\r\n\r\n    // WAYA tokens created per block.\r\n    uint256 public emissionPerBlock;\r\n\r\n   //------------------------------------------------------------------------------------------\r\n\r\n    uint256 public lastAccruedBlock;\r\n\r\n\r\n    event AddPool(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, bool isRegular);\r\n    event UpdatePoolParams(uint256 indexed pid, uint256 allocPoint, bool isRegular);\r\n    event UpdatePoolReward(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accWayaPerShare);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event UpdateWayaRate(uint256 reserveRate, uint256 regularFarmRate, uint256 specialFarmRate);\r\n    event UpdatefinancialController(address indexed oldAdmin, address indexed newAdmin);\r\n    event UpdateWhiteList(address indexed user, bool isValid);\r\n    event UpdateBoostContract(address indexed boostContract);\r\n    event UpdateBoostMultiplier(address indexed user, uint256 pid, uint256 oldMultiplier, uint256 newMultiplier);\r\n    event EmissionPerBlockUpdated (uint256 oldEmissionPerBlock, uint256 newEmissionPerBlock);\r\n\r\n\r\n    constructor(\r\n        WayaToken _wayaAddress,\r\n        uint256 _emissionPerBlock,\r\n        address _financialController\r\n    ) {\r\n        WAYA = _wayaAddress;\r\n        emissionPerBlock = _emissionPerBlock * (1e18);\r\n        financialController = _financialController;\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if caller is not the boost contract.\r\n     */\r\n    modifier onlyBoostContract() {\r\n        require(boostContract == msg.sender, \"Ownable: caller is not the boost contract\");\r\n        _;\r\n    }\r\n\r\n    function linkedPoolInfo(uint256 _pid) external view returns (IERC20 _lpTokenAddress, PoolInfo memory _poolInfo) {\r\n        _lpTokenAddress     =  lpToken[_pid];\r\n        _poolInfo           =  poolInfo[_pid];\r\n    }\r\n    \r\n    function linkedParams() external view returns (address, address){\r\n        return(address(WAYA), address(boostContract));\r\n    }\r\n    \r\n     /// @notice Updates WAYA emission.\r\n    function updateEmissionPerBlock(uint256 _newEmissionPerBlock) public onlyOwner {\r\n        uint256 _oldWayaPerBlock = emissionPerBlock;\r\n        emissionPerBlock = _newEmissionPerBlock * (1e18);\r\n        emit EmissionPerBlockUpdated(_oldWayaPerBlock, _newEmissionPerBlock);\r\n    }\r\n    /// @notice Returns the number of CF pools.\r\n    function poolLength() public view returns (uint256 pools) {\r\n        pools = poolInfo.length;\r\n    }\r\n\r\n    function isPoolRegistered (IERC20 _newPool) public view returns (bool) {\r\n        for (uint256 i=0; i \u003c poolInfo.length; i++){\r\n            if (lpToken[i] == _newPool) return true;\r\n        }\r\n        return  false;                 \r\n    }\r\n\r\n    /// @notice Add a new pool. Can only be called by the owner.\r\n    /// @param _allocPoint Number of allocation points for the new pool.\r\n    /// @param _lpToken Address of the LP ERC-20 token.\r\n    /// @param _isRegular Whether the pool is regular or special. LP farms are always \"regular\". \"Special\" pools are\r\n    /// only for WAYA distributions within PlexSwap products.\r\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\r\n\r\n    function addPool(\r\n        uint256 _allocPoint,\r\n        IERC20  _lpToken,\r\n        bool    _isRegular,\r\n        bool    _withUpdate\r\n    ) external onlyOwner {\r\n        require( !isPoolRegistered(_lpToken), \"Pool already registered\");\r\n        require(_lpToken.balanceOf(address(this)) \u003e= 0, \"None ERC20 tokens\");\r\n\r\n        // stake WAYA token will cause staked token and reward token mixed up,\r\n        // may cause staked tokens withdraw as reward token,never do it.\r\n        require(_lpToken != WAYA, \"WAYA token can\u0027t be added to farm pools\");\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        if (_isRegular) {\r\n            totalRegularAllocPoint = totalRegularAllocPoint + _allocPoint;\r\n        } else {\r\n            totalSpecialAllocPoint = totalSpecialAllocPoint + _allocPoint;\r\n        }\r\n\r\n        lpToken.push(_lpToken);\r\n\r\n        poolInfo.push(\r\n            PoolInfo({\r\n        allocPoint: _allocPoint,\r\n        lastRewardBlock: block.number,\r\n        accWayaPerShare: 0,\r\n        isRegular: _isRegular,\r\n        totalBoostedShare: 0\r\n        })\r\n        );\r\n        emit AddPool(lpToken.length - 1, _allocPoint, _lpToken, _isRegular);\r\n    }\r\n\r\n    /// @notice  Update the given pool\u0027s WAYA allocation point. Can only be called by the owner.\r\n    /// @param _pid The id of the pool. See `poolInfo`.\r\n    /// @param _allocPoint New number of allocation points for the pool.\r\n    /// @param _isRegular Whether pool is \"regular\" or \"special\".\r\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\r\n    function updatePoolParams(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _isRegular,\r\n        bool _withUpdate\r\n    ) external onlyOwner {\r\n        // No matter _withUpdate is true or false, \r\n       //  it´s necessary  to execute updatePool once before set the pool parameters.\r\n        updatePoolReward(_pid);\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        if (poolInfo[_pid].isRegular) {\r\n            totalRegularAllocPoint = totalRegularAllocPoint - poolInfo[_pid].allocPoint;\r\n        } else {\r\n            totalSpecialAllocPoint = totalSpecialAllocPoint - poolInfo[_pid].allocPoint;\r\n        }\r\n\r\n        if (_isRegular) {\r\n            totalRegularAllocPoint = totalRegularAllocPoint + _allocPoint;\r\n        } else {\r\n            totalSpecialAllocPoint = totalSpecialAllocPoint + _allocPoint;\r\n        }\r\n\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].isRegular  = _isRegular;\r\n\r\n        emit UpdatePoolParams(_pid, _allocPoint, _isRegular);\r\n    }\r\n\r\n    /// @notice View function for checking pending WAYA rewards.\r\n    /// @param _pid The id of the pool. See `poolInfo`.\r\n    /// @param _user Address of the user.\r\n    function pendingWaya(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        UserInfo memory user = userInfo[_pid][_user];\r\n        uint256 accWayaPerShare = pool.accWayaPerShare;\r\n        uint256 lpSupply = pool.totalBoostedShare;\r\n\r\n        if (block.number \u003e pool.lastRewardBlock \u0026\u0026 lpSupply != 0) {\r\n            uint256 multiplier = block.number - pool.lastRewardBlock;\r\n\r\n            uint256 wayaReward = (multiplier * (wayaPerBlock(pool.isRegular)) * (pool.allocPoint)) / (\r\n                (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint)\r\n            );\r\n            accWayaPerShare = accWayaPerShare + ((wayaReward *(ACC_WAYA_PRECISION)) / lpSupply);\r\n        }\r\n\r\n        uint256 boostedAmount = (user.amount * (getBoostMultiplier(_user, _pid))) / BOOST_PRECISION;\r\n        return ((boostedAmount * (accWayaPerShare)) / ACC_WAYA_PRECISION)- user.rewardDebt;\r\n    }\r\n\r\n    /// @notice Update waya reward for all the active pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\r\n            PoolInfo memory pool = poolInfo[pid];\r\n            if (pool.allocPoint != 0) {\r\n                updatePoolReward(pid);\r\n            }\r\n        }\r\n    }\r\n \r\n    /// @notice Calculates and returns the `amount` of WAYA per block, depending on type of Farm.\r\n    /// @param _isRegular If the pool belongs to regular or special.\r\n    function wayaPerBlock(bool _isRegular) public view returns (uint256 amount) {\r\n        if (_isRegular) {\r\n            amount = (emissionPerBlock * wayaRateToRegularFarm) / WAYA_RATE_TOTAL_PRECISION;\r\n        } else {\r\n            amount = (emissionPerBlock * wayaRateToSpecialFarm) / WAYA_RATE_TOTAL_PRECISION;\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates and returns the `amount` of WAYA per block to reserve.\r\n    function wayaPerBlockToReserve() public view returns (uint256 amount) {\r\n        amount = (emissionPerBlock * wayaRateToReserve) / WAYA_RATE_TOTAL_PRECISION;\r\n    }\r\n\r\n    /// @notice UPDATE reward variables for the given pool.\r\n    /// @param _pid The id of the pool. See `poolInfo`.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePoolReward(uint256 _pid) public returns (PoolInfo memory pool) {\r\n        pool = poolInfo[_pid];\r\n        if (block.number \u003e pool.lastRewardBlock) {\r\n            uint256 lpSupply = pool.totalBoostedShare;\r\n            uint256 totalAllocPoint = (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint);\r\n\r\n            if (lpSupply \u003e 0 \u0026\u0026 totalAllocPoint \u003e 0) {\r\n                uint256 multiplier = block.number - pool.lastRewardBlock;\r\n                uint256 wayaReward = (multiplier * wayaPerBlock(pool.isRegular) * pool.allocPoint) /  totalAllocPoint;\r\n                WAYA.mint(address(this), wayaReward);\r\n\t\t\t\tpool.accWayaPerShare = pool.accWayaPerShare + (((wayaReward * ACC_WAYA_PRECISION) / lpSupply));\r\n            }\r\n            pool.lastRewardBlock = block.number;\r\n            poolInfo[_pid] = pool;\r\n            emit UpdatePoolReward(_pid, pool.lastRewardBlock, lpSupply, pool.accWayaPerShare);\r\n        }\r\n    }\r\n\r\n    /// @notice DEPOSIT LP tokens to pool.\r\n    /// @param _pid The id of the pool. See `poolInfo`.\r\n    /// @param _amount Amount of LP tokens to deposit.\r\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\r\n        PoolInfo memory pool = updatePoolReward(_pid);\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        require(\r\n            pool.isRegular || whiteList[msg.sender],\r\n            \"ChiefFarmer: The address is not available to deposit in this pool\"\r\n        );\r\n\r\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\r\n\r\n        if (user.amount \u003e 0) {\r\n            settlePendingWaya(msg.sender, _pid, multiplier);\r\n        }\r\n\r\n        if (_amount \u003e 0) {\r\n            uint256 before = lpToken[_pid].balanceOf(address(this));\r\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\r\n            _amount = lpToken[_pid].balanceOf(address(this)) - before;\r\n            user.amount = user.amount + _amount;\r\n\r\n            // Update total boosted share.\r\n            pool.totalBoostedShare = pool.totalBoostedShare + ((_amount * multiplier) / BOOST_PRECISION);\r\n        }\r\n\r\n        user.rewardDebt = (((user.amount * multiplier) / BOOST_PRECISION) * pool.accWayaPerShare) / \r\n            ACC_WAYA_PRECISION;\r\n\r\n        poolInfo[_pid] = pool;\r\n\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    /// @notice Withdraw LP tokens from pool.\r\n    /// @param _pid The id of the pool. See `poolInfo`.\r\n    /// @param _amount Amount of LP tokens to withdraw.\r\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\r\n        PoolInfo memory pool = updatePoolReward(_pid);\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        require(user.amount \u003e= _amount, \"withdraw: Insufficient Balance\");\r\n\r\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\r\n\r\n        settlePendingWaya(msg.sender, _pid, multiplier);\r\n\r\n        if (_amount \u003e 0) {\r\n            user.amount = user.amount - _amount;\r\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\r\n        }\r\n\r\n        user.rewardDebt = (((user.amount * multiplier) / BOOST_PRECISION) * pool.accWayaPerShare) / ACC_WAYA_PRECISION;\r\n\r\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare - (\r\n            (_amount * multiplier) / BOOST_PRECISION\r\n        );\r\n\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\r\n    /// @param _pid The id of the pool. See `poolInfo`.\r\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        uint256 boostedAmount = (amount * getBoostMultiplier(msg.sender, _pid)) / BOOST_PRECISION;\r\n        pool.totalBoostedShare = pool.totalBoostedShare \u003e boostedAmount ? pool.totalBoostedShare - boostedAmount : 0;\r\n\r\n        // Note: transfer can fail or succeed if `amount` is zero.\r\n        lpToken[_pid].safeTransfer(msg.sender, amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    /// @notice Send WAYA pending for reserve to `financialController`.\r\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\r\n    function reserveWaya(bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 multiplier = block.number - lastAccruedBlock;\r\n        uint256 pendingWayaToReserve = multiplier * wayaPerBlockToReserve();\r\n\r\n        // SafeTransfer WAYA\r\n        _safeWayaTransfer(financialController, pendingWayaToReserve);\r\n        lastAccruedBlock = block.number;\r\n    }\r\n\r\n    /// @notice Update the % of WAYA distributions for reserve, regular pools and special pools.\r\n    /// @param _reserveRate The % of WAYA to reserve each block.\r\n    /// @param _regularFarmRate The % of WAYA to regular pools each block.\r\n    /// @param _specialFarmRate The % of WAYA to special pools each block.\r\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\r\n    function updateWayaRate(\r\n        uint256 _reserveRate,\r\n        uint256 _regularFarmRate,\r\n        uint256 _specialFarmRate,\r\n        bool _withUpdate\r\n    ) external onlyOwner {\r\n        require(\r\n            _reserveRate \u003e 0 \u0026\u0026 _regularFarmRate \u003e 0 \u0026\u0026 _specialFarmRate \u003e 0,\r\n            \"ChiefFarmer: Waya rate must be greater than 0\"\r\n        );\r\n        require(\r\n            _reserveRate + _regularFarmRate + _specialFarmRate == WAYA_RATE_TOTAL_PRECISION,\r\n            \"ChiefFarmer: Total rate must be 1e12\"\r\n        );\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n       \r\n        reserveWaya(false);\r\n\r\n        wayaRateToReserve        = _reserveRate;\r\n        wayaRateToRegularFarm = _regularFarmRate;\r\n        wayaRateToSpecialFarm = _specialFarmRate;\r\n\r\n        emit UpdateWayaRate(_reserveRate, _regularFarmRate, _specialFarmRate);\r\n    }\r\n\r\n    /// @notice Update Financial Controller address.\r\n    /// @param _newFC  The new Financial Controller address.\r\n    function updateFinancialController(address _newFC) external onlyOwner {\r\n        require(_newFC != address(0), \"Financial Controller address must be valid\");\r\n        require(_newFC != financialController,  \"Financial Controller address is the same\");\r\n        address _oldFC = financialController;\r\n        financialController = _newFC;\r\n        emit UpdatefinancialController(_oldFC, _newFC);\r\n    }\r\n\r\n    /// @notice Update whitelisted addresses for special pools.\r\n    /// @param _user The address to be updated.\r\n    /// @param _isValid The flag for valid or invalid.\r\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\r\n        require(_user != address(0), \"ChiefFarmer: The white list address must be valid\");\r\n\r\n        whiteList[_user] = _isValid;\r\n        emit UpdateWhiteList(_user, _isValid);\r\n    }\r\n\r\n    /// @notice Update boost contract address and max boost factor.\r\n    /// @param _newBoostContract The new address for handling all the share boosts.\r\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\r\n        require(\r\n            _newBoostContract != address(0) \u0026\u0026 _newBoostContract != boostContract,\r\n            \"ChiefFarmer: New boost contract address must be valid\"\r\n        );\r\n\r\n        boostContract = _newBoostContract;\r\n        emit UpdateBoostContract(_newBoostContract);\r\n    }\r\n\r\n    /// @notice Update user boost factor.\r\n    /// @param _user The user address for boost factor updates.\r\n    /// @param _pid The pool id for the boost factor updates.\r\n    /// @param _newMultiplier New boost multiplier.\r\n    function updateBoostMultiplier(\r\n        address _user,\r\n        uint256 _pid,\r\n        uint256 _newMultiplier\r\n    ) external onlyBoostContract nonReentrant {\r\n        require(_user != address(0), \"ChiefFarmer: The user address must be valid\");\r\n        require(poolInfo[_pid].isRegular, \"ChiefFarmer: Only regular farm could be boosted\");\r\n        require(\r\n            _newMultiplier \u003e= BOOST_PRECISION \u0026\u0026 _newMultiplier \u003c= MAX_BOOST_PRECISION,\r\n            \"ChiefFarmer: Invalid new boost multiplier\"\r\n        );\r\n\r\n        PoolInfo memory pool = updatePoolReward(_pid);\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n\r\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\r\n        settlePendingWaya(_user, _pid, prevMultiplier);\r\n\r\n        user.rewardDebt = (((user.amount * _newMultiplier) / BOOST_PRECISION) * pool.accWayaPerShare) / \r\n            ACC_WAYA_PRECISION;\r\n\r\n        pool.totalBoostedShare = pool.totalBoostedShare - ((user.amount * prevMultiplier) / BOOST_PRECISION) + (\r\n            (user.amount * _newMultiplier) / BOOST_PRECISION\r\n        );\r\n        poolInfo[_pid] = pool;\r\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\r\n\r\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\r\n    }\r\n\r\n    /// @notice Get user boost multiplier for specific pool id.\r\n    /// @param _user The user address.\r\n    /// @param _pid The pool id.\r\n    function getBoostMultiplier(address _user, uint256 _pid) public view returns (uint256) {\r\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\r\n        return multiplier \u003e BOOST_PRECISION ? multiplier : BOOST_PRECISION;\r\n    }\r\n\r\n    /// @notice Settles, distribute the pending WAYA rewards for given user.\r\n    /// @param _user The user address for settling rewards.\r\n    /// @param _pid The pool id.\r\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\r\n    function settlePendingWaya(\r\n        address _user,\r\n        uint256 _pid,\r\n        uint256 _boostMultiplier\r\n    ) internal {\r\n        UserInfo memory user = userInfo[_pid][_user];\r\n\r\n        uint256 boostedAmount = (user.amount * _boostMultiplier) / BOOST_PRECISION;\r\n        uint256 accWaya = (boostedAmount * poolInfo[_pid].accWayaPerShare) / ACC_WAYA_PRECISION;\r\n        uint256 pending = accWaya - user.rewardDebt;\r\n\r\n        // SafeTransfer WAYA\r\n        _safeWayaTransfer(_user, pending);\r\n    }\r\n\r\n    /// @notice Safe Transfer WAYA.\r\n    /// @param _to The WAYA receiver address.\r\n    /// @param _amount transfer WAYA amounts.\r\n    function _safeWayaTransfer(address _to, uint256 _amount) internal {\r\n        if (_amount \u003e 0) {\r\n           uint256 wayaBalance = WAYA.balanceOf(address(this));\r\n           _amount = (_amount \u003e wayaBalance ? wayaBalance : _amount); \r\n           WAYA.safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.11;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.11;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport \"./IERC20.sol\";\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length \u003e 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"},"WayaToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"./ERC20.sol\";\nimport \"./Ownable.sol\";\n\n// WayaToken with Governance.\ncontract WayaToken is ERC20, Ownable {\n\n    address public chiefFarmer;\n    event chiefFarmerUpdated  (address authorizer, address oldChiefFarmer, address newChiefFarmer);\n\n    constructor (address _chiefFarmer) ERC20(\"PlexSwap Token\", \"WAYA\") {\n           setChiefFarmer(_chiefFarmer);\n    }\n\n    function setChiefFarmer (address _newChiefFarmer) public onlyOwner {\n        require(_newChiefFarmer != address(0), \"Cannot be zero address\");\n        address oldChiefFarmer = chiefFarmer;\n        chiefFarmer = _newChiefFarmer;\n        emit chiefFarmerUpdated (_msgSender(), oldChiefFarmer, chiefFarmer);\n    }\n\n    /// @dev Creates `_amount` token to `_to`. Must only be called by the ChiefFarmer.\n    function mint(address _to, uint256 _amount) public {\n        require(_msgSender() == chiefFarmer, \"Sender not authorized\");\n        _mint(_to, _amount);\n        _moveDelegates(address(0), _delegates[_to], _amount);\n    }\n\n    // Copied and modified from YAM code:\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n    // Which is copied and modified from COMPOUND:\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n\n    /// @dev A record of each accounts delegate\n    mapping(address =\u003e address) internal _delegates;\n\n    /// @dev A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    /// @dev A record of votes checkpoints for each account, by index\n    mapping(address =\u003e mapping(uint32 =\u003e Checkpoint)) public checkpoints;\n\n    /// @dev The number of checkpoints for each account\n    mapping(address =\u003e uint32) public numCheckpoints;\n\n    /// @dev The EIP-712 typehash for the contract\u0027s domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @dev The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @dev A record of states for signing / validating signatures\n    mapping(address =\u003e uint256) public nonces;\n\n    /// @dev An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @dev An event thats emitted when a delegate account\u0027s vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Delegate votes from `msg.sender` to `delegatee`\n     * @param delegator The address to get delegatee for\n     */\n    function delegates(address delegator) external view returns (address) {\n        return _delegates[delegator];\n    }\n\n    /**\n     * @dev Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))\n        );\n\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"WAYA::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"WAYA::delegateBySig: invalid nonce\");\n        require(block.timestamp \u003c= expiry, \"WAYA::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint256) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints \u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @dev Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\n        require(blockNumber \u003c block.number, \"WAYA::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock \u003c= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock \u003e blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper \u003e lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock \u003c blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = _delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying WAYAs (not scaled);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint256 amount\n    ) internal {\n        if (srcRep != dstRep \u0026\u0026 amount \u003e 0) {\n            if (srcRep != address(0)) {\n                // decrease old representative\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum \u003e 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld - amount;\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // increase new representative\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum \u003e 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld + amount;\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    ) internal {\n        uint32 blockNumber = safe32(block.number, \"WAYA::_writeCheckpoint: block number exceeds 32 bits\");\n\n        if (nCheckpoints \u003e 0 \u0026\u0026 checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\n        require(n \u003c 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n}\n"}}