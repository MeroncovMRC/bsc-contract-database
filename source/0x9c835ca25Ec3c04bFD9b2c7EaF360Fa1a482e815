
// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";
import "../utils/Context.sol";
import "../utils/Strings.sol";
import "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `_msgSender()` is missing `role`.
     * Overriding this function changes the behavior of the {onlyRole} modifier.
     *
     * Format of the revert message is described in {_checkRole}.
     *
     * _Available since v4.6._
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(account),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleGranted} event.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleRevoked} event.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     *
     * May emit a {RoleRevoked} event.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * May emit a {RoleGranted} event.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleGranted} event.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleRevoked} event.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Counters.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1);

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator,
        Rounding rounding
    ) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10**64) {
                value /= 10**64;
                result += 64;
            }
            if (value >= 10**32) {
                value /= 10**32;
                result += 32;
            }
            if (value >= 10**16) {
                value /= 10**16;
                result += 16;
            }
            if (value >= 10**8) {
                value /= 10**8;
                result += 8;
            }
            if (value >= 10**4) {
                value /= 10**4;
                result += 4;
            }
            if (value >= 10**2) {
                value /= 10**2;
                result += 2;
            }
            if (value >= 10**1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
        }
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

import "./math/Math.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: contracts/interfaces/IVRFConsumerBase.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness. It ensures 2 things:
 * @dev 1. The fulfillment came from the VRFCoordinator
 * @dev 2. The consumer contract implements fulfillRandomWords.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash). Create subscription, fund it
 * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface
 * @dev subscription management functions).
 * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,
 * @dev callbackGasLimit, numWords),
 * @dev see (VRFCoordinatorInterface for a description of the arguments).
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomWords method.
 *
 * @dev The randomness argument to fulfillRandomWords is a set of random words
 * @dev generated from your requestId and the blockHash of the request.
 *
 * @dev If your contract could have concurrent requests open, you can use the
 * @dev requestId returned from requestRandomWords to track which response is associated
 * @dev with which randomness request.
 * @dev See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ.
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request. It is for this reason that
 * @dev that you can signal to an oracle you'd like them to wait longer before
 * @dev responding to the request (however this is not enforced in the contract
 * @dev and so remains effective only in the case of unmodified oracle software).
 */
abstract contract VRFConsumerBase {
    address private immutable vrfCoordinator;

    /**
     * @param _vrfCoordinator address of VRFCoordinator contract
     */
    constructor(address _vrfCoordinator) {
        vrfCoordinator = _vrfCoordinator;
    }

    /**
     * @notice fulfillRandomness handles the VRF response. Your contract must
     * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
     * @notice principles to keep in mind when implementing your fulfillRandomness
     * @notice method.
     *
     * @dev VRFConsumerBase expects its subcontracts to have a method with this
     * @dev signature, and will call it once it has verified the proof
     * @dev associated with the randomness. (It is triggered via a call to
     * @dev rawFulfillRandomness, below.)
     *
     * @param requestId The Id initially returned by requestRandomness
     * @param randomWords the VRF output expanded to the requested number of words
     */
    function fulfillRandomWords(
        uint256 requestId,
        uint256[] memory randomWords
    ) internal virtual;

    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
    // the origin of the call
    function rawFulfillRandomWords(
        uint256 requestId,
        uint256[] memory randomWords
    ) external {
        if (msg.sender != vrfCoordinator) {
            revert("OnlyCoordinatorCanFulfill");
        }
        fulfillRandomWords(requestId, randomWords);
    }
}


// File: contracts/interfaces/IVRFCoordinator.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface VRFCoordinatorInterface {
    /**
     * @notice Get configuration relevant for making requests
     * @return minimumRequestConfirmations global min for request confirmations
     * @return maxGasLimit global max for request gas limit
     * @return s_provingKeyHashes list of registered key hashes
     */
    function getRequestConfig()
        external
        view
        returns (uint16, uint32, bytes32[] memory);

    /**
     * @notice Request a set of random words.
     * @param keyHash - Corresponds to a particular oracle job which uses
     * that key for generating the VRF proof. Different keyHash's have different gas price
     * ceilings, so you can select a specific one to bound your maximum per request cost.
     * @param subId  - The ID of the VRF subscription. Must be funded
     * with the minimum subscription balance required for the selected keyHash.
     * @param minimumRequestConfirmations - How many blocks you'd like the
     * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS
     * for why you may want to request more. The acceptable range is
     * [minimumRequestBlockConfirmations, 200].
     * @param callbackGasLimit - How much gas you'd like to receive in your
     * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords
     * may be slightly less than this amount because of gas used calling the function
     * (argument decoding etc.), so you may need to request slightly more than you expect
     * to have inside fulfillRandomWords. The acceptable range is
     * [0, maxGasLimit]
     * @param numWords - The number of uint256 random values you'd like to receive
     * in your fulfillRandomWords callback. Note these numbers are expanded in a
     * secure way by the VRFCoordinator from a single random value supplied by the oracle.
     * @return requestId - A unique identifier of the request. Can be used to match
     * a request to a response in fulfillRandomWords.
     */
    function requestRandomWords(
        bytes32 keyHash,
        uint64 subId,
        uint16 minimumRequestConfirmations,
        uint32 callbackGasLimit,
        uint32 numWords
    ) external returns (uint256 requestId);

    /**
     * @notice Create a VRF subscription.
     * @return subId - A unique subscription id.
     * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.
     * @dev Note to fund the subscription, use transferAndCall. For example
     */
    function createSubscription() external returns (uint64 subId);

    /**
     * @notice Get a VRF subscription.
     * @param subId - ID of the subscription
     * @return balance - BNB balance of the subscription in juels.
     * @return reqCount - number of requests for this subscription, determines fee tier.
     * @return owner - owner of the subscription.
     * @return consumers - list of consumer address which are able to use this subscription.
     */
    function getSubscription(
        uint64 subId
    )
        external
        view
        returns (
            uint96 balance,
            uint64 reqCount,
            address owner,
            address[] memory consumers
        );

    /**
     * @notice Request subscription owner transfer.
     * @param subId - ID of the subscription
     * @param newOwner - proposed new owner of the subscription
     */
    function requestSubscriptionOwnerTransfer(
        uint64 subId,
        address newOwner
    ) external;

    /**
     * @notice Request subscription owner transfer.
     * @param subId - ID of the subscription
     * @dev will revert if original owner of subId has
     * not requested that msg.sender become the new owner.
     */
    function acceptSubscriptionOwnerTransfer(uint64 subId) external;

    /**
     * @notice Add a consumer to a VRF subscription.
     * @param subId - ID of the subscription
     * @param consumer - New consumer which can use the subscription
     */
    function addConsumer(uint64 subId, address consumer) external;

    /**
     * @notice Remove a consumer from a VRF subscription.
     * @param subId - ID of the subscription
     * @param consumer - Consumer to remove from the subscription
     */
    function removeConsumer(uint64 subId, address consumer) external;

    /**
     * @notice Cancel a subscription
     * @param subId - ID of the subscription
     * @param to - Where to send the remaining BNB to
     */
    function cancelSubscription(uint64 subId, address to) external;

    /*
     * @notice Check to see if there exists a request commitment consumers
     * for all consumers and keyhashes for a given sub.
     * @param subId - ID of the subscription
     * @return true if there exists at least one unfulfilled request for the subscription, false
     * otherwise.
     */
    function pendingRequestExists(uint64 subId) external view returns (bool);
}


// File: contracts/interfaces/IWKDNFT.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

interface IWKDNFT {
    function mint(address account, uint256 amount) external;

    function burnWinningTokens(address account, uint256 value) external;

    function HATUT_ZERAZ_E() external view returns (uint256);

    function KIMOYO() external view returns (uint256);

    function DORA_MILAJ_E() external view returns (uint256);

    function TAIFA_NAGA_O() external view returns (uint256);

    function NEGUS() external view returns (uint256);
}


// File: contracts/interfaces/IWKDRaffle.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

interface IWKDRaffle {
    function startCycle(uint256 price, uint256 winsPer20) external;
    function isDeprecated(uint256 price, uint256 winsPer20) external view returns(bool);
}


// File: contracts/interfaces/utils.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

interface IRouter {
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function getAmountsOut(
        uint amountIn,
        address[] calldata path
    ) external view returns (uint[] memory amounts);

    function WETH() external pure returns (address);

    function factory() external pure returns (address);
}

interface IFactory {
    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address pair);
}

interface IWKDRaffleTopCadre {
    function totals()
        external
        view
        returns (
            uint256 kimoyo,
            uint256 doramilaje,
            uint256 taifaNagao,
            uint negus
        );

    function getPendingFor(
        address account,
        uint256 tokenId
    ) external view returns (uint256);

    function onTransferHook(address account, uint256[] calldata ids) external;

    // function setDeprecated(bool deprecatedStatus) external;

    function version() external view returns (string memory);

    function claim(uint256 id) external;
}


interface IWKDNFT {
    function totalSupply(uint256) external view returns (uint256);

    function balanceOf(address, uint256) external view returns (uint256);

    function KIMOYO() external view returns (uint256);

    function DORA_MILAJ_E() external view returns (uint256);

    function TAIFA_NAGA_O() external view returns (uint256);

    function NEGUS() external view returns (uint256);
}

interface ITopCadre {
    function onTransferHook(
        address account,
        uint256[] calldata tokenIds
    ) external;
}


// File: contracts/WKDRaffle.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

import {Counters} from "@openzeppelin/contracts/utils/Counters.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";
import {WKDVRFManager} from "./WKDVRFManager.sol";
import {IWKDRaffle} from "./interfaces/IWKDRaffle.sol";
import {IWKDNFT} from "./interfaces/IWKDNFT.sol";
import {IRouter, IFactory} from "./interfaces/utils.sol";

error Winners_Too_Few();
error Too_Many_Winners();
error Cannot_Process_At_This_Time();
error Exceeds_Allowable();
error Insufficient_Payment();
error Refund_Failed();
error Transfer_Failed();
error Invalid_Address_Detected();
error Nothing_To_Claim();
error Too_Early();
error Invalid_Pair();
error Price_Too_Low();
error Amount_Too_High();
error Same_As_Before();
error Withdraw_Pending_Claim();
error Inaccurate_Raffle_State(uint256 expected, uint256 actual);
error Used_RequestId();
error VRF_Funding_Failed();

contract WKDRaffle is AccessControl, ReentrancyGuard {
    using Counters for Counters.Counter;
    Counters.Counter public cycleCounter;
    IWKDNFT public immutable _wkdNFT;
    WKDVRFManager public wkdVRFManager;

    event ClaimReferralBonus(address ref, uint256 amount);
    event ClaimWinPrize(address account, uint256 amount, uint256 tokensBurnt);
    event StartCycle(uint256 cycleId, uint256 price, uint256 winsPer20);
    event JoinedCycle(uint256 cycleId, address account, uint256 entryId);
    event DAOChanged(address from, address to);
    event PlatformChanged(address from, address to);
    event TopCadreChanged(address from, address to);
    event DrawResult(
        uint256 cycleId,
        uint256 currentDraw,
        uint256 targetDrawCount,
        uint256 currentWiners,
        uint256 subId,
        uint256 requestId
    );
    event PostDrawCall(uint256 cycleId, uint256 entries, uint256 winners);
    event BuyBackAndBurn(address router, uint256 bnbAmount, uint256 wkdAmount);
    event ReadyForDraws(
        uint256 cycleId,
        uint256 entries,
        uint256 prize,
        uint256 daoRake,
        uint256 buyBackRake
    );
    event VRFManagerUpdated(address wkdVrfManager, uint64 subscriptionId);
    event OperationFailedWithString(string reasonString);
    event OperationFailedWithData(bytes reasonData);

    address private _dao;
    address private _platform;
    address private _topCadre;

    address public immutable WKD;
    address public constant BURN_ADDRESS =
        0x000000000000000000000000000000000000dEaD;

    uint256 private constant MIN_WINS_PER_20 = 3;
    uint256 private constant MAX_WINS_PER_20 = 5;
    uint256 private constant MAX_SIZE = 2000;
    uint256 private constant MAX_MINT = 200;
    uint256 private constant SAMPLE_SIZE = 20;
    bytes32 public constant RAFFLE_MANAGER = keccak256("RAFFLE_MANAGER");
    bytes32 public constant ADMIN = keccak256("ADMIN"); // multisig2
    uint256 public constant WINNERS_PCT = 50;
    uint256 public constant REF_PCT = 5;
    uint256 private constant VRF_FUNDING_AMOUNT = 0.2 ether;
    uint256 public constant TOP_RANK_PCT = 3;
    uint256 public constant DAO_PCT = 12;
    uint256 public constant BUY_BACK_PCT = 15;
    uint256 public constant PLATFORM_PCT = 15;

    uint256 private _topCadreFund;
    uint256 private _buybackAndBurnFund;
    uint256 private _referralFund;
    uint256 private _platformFund;
    uint256 private _daoFund;
    uint256 public lastBurnAt;
    uint256 public lastRequestId;
    uint256 public lastRequestMadeAt;
    uint64 public subscriptionId;

    mapping(address => address) private _referrals;
    mapping(address => address[]) private _myRefs;
    mapping(address => uint256) private _winnersRake;
    // referral bonus tracker
    mapping(address => uint256) private _refRake;
    mapping(uint256 => Cycle) private _cycles;
    mapping(uint256 => Draw) private _draws;
    // guaranty unique indexes are selected during draws
    mapping(uint256 => mapping(uint256 => bool)) private _drawnIndexForCycle;
    mapping(uint256 => address[]) private _entries;
    mapping(address => bool) private _existing;
    mapping(uint256 => bool) public usedReqIds;
    // tracks number of mints per cycle for each account
    mapping(uint256 => mapping(address => uint256)) private _mints;
    // tracks a winners pending winning cycle
    mapping(address => Win) private _cycleOfPendingRewardFor;

    struct Win {
        bool exists;
        uint256 cycle;
    }
    enum Status {
        CLOSED,
        OPEN,
        DRAWING_WINNERS,
        POST_DRAW
    }
    struct Cycle {
        uint256 price;
        uint256 openedAt;
        uint256 expectedWins;
        uint256 possibleWinsBasedOnEntry;
        uint256 prize;
        uint256 rakePerRef;
    }
    struct Draw {
        uint256 current;
        uint256 target;
        uint256[] winners;
    }

    Status private _status;

    // multisig1
    constructor(
        address multisig,
        address wkdNFT,
        address payable wkdVrfManager,
        address wkdAddress,
        uint64 subId
    ) {
        _grantRole(DEFAULT_ADMIN_ROLE, multisig);
        _setRoleAdmin(ADMIN, DEFAULT_ADMIN_ROLE);
        _setRoleAdmin(RAFFLE_MANAGER, DEFAULT_ADMIN_ROLE);
        _wkdNFT = IWKDNFT(wkdNFT);
        wkdVRFManager = WKDVRFManager(wkdVrfManager);
        WKD = wkdAddress;
        subscriptionId = subId;
        lastBurnAt = block.timestamp + 7 days;
    }

    /// @notice show the current state of the contract circuit
    function status() external view returns (uint256) {
        return uint256(_status);
    }

    /// @notice validation of inputs when creating a new cycle
    function _preStartCheck(uint256 winsPer20) internal view {
        if (winsPer20 < MIN_WINS_PER_20) revert Winners_Too_Few();
        if (winsPer20 > MAX_WINS_PER_20) revert Too_Many_Winners();
        if (_status != Status.CLOSED)
            revert Inaccurate_Raffle_State({
                expected: uint256(Status.CLOSED),
                actual: uint256(_status)
            });
    }

    /// @notice to create a new cycle
    /// @dev contract must be in a CLOSED state, winsPer20 must be from 3 to 5
    function startCycle(
        uint256 price,
        uint256 winsPer20
    ) external onlyRole(RAFFLE_MANAGER) {
        if (price == 0) revert Price_Too_Low();
        _preStartCheck(winsPer20);
        cycleCounter.increment();
        uint256 cycleId = cycleCounter.current();
        _cycles[cycleId].price = price;
        _cycles[cycleId].expectedWins = 100 * winsPer20;
        _cycles[cycleId].openedAt = block.timestamp;
        _status = Status.OPEN;
        emit StartCycle(cycleId, price, winsPer20);
    }

    /// @notice gets the information about a cycle given its id
    function showCycle(uint256 cycleId) external view returns (Cycle memory) {
        return _cycles[cycleId];
    }

    /// @notice lets an account join the current cycle
    /// @dev for easy tracking of pending wins, it is important
    /// for accounts to claim their pending wins before joining again
    /// this can be resolved easily from the client but added check
    /// is provided in case user connects through other interfaces
    /// @param account address of the beneficiary of the minted token
    /// @param referral address of the referee
    /// @param amount number of tokens to be minted, multiples of of the price of minting 1 token in this cycle
    function join(
        address account,
        address referral,
        uint256 amount
    ) external payable nonReentrant {
        (uint256 totalPendingAmount, ) = unclaimedBNB(account);
        if (totalPendingAmount != 0) revert Withdraw_Pending_Claim();
        uint256 cycleId = cycleCounter.current();
        Cycle memory cycle = _cycles[cycleId];
        if (_status != Status.OPEN)
            revert Inaccurate_Raffle_State({
                expected: uint256(Status.OPEN),
                actual: uint256(_status)
            });
        uint256 _value = msg.value;
        (uint256 mintableQty, uint256 refund) = _checkMintableFor(
            account,
            amount,
            _value,
            _entries[cycleId].length,
            cycleId,
            cycle.price
        );
        _joinCycleFor(account, referral, cycleId, mintableQty, refund);
    }

    /// @notice util function to check if an account is not minting more than 10% of the available
    /// @dev when an account is overpaying, this function calculates the refund
    function _checkMintableFor(
        address account,
        uint256 desiredMintAmount,
        uint256 value,
        uint256 entryCount,
        uint256 cycleId,
        uint256 price
    ) internal view returns (uint256 mintableQty, uint256 refund) {
        if (desiredMintAmount > MAX_MINT) revert Amount_Too_High();
        mintableQty = MAX_MINT - _mints[cycleId][account];
        if (mintableQty == 0) revert Exceeds_Allowable();
        if (desiredMintAmount <= mintableQty) {
            mintableQty = desiredMintAmount;
        }
        uint256 possibleTotal = entryCount + mintableQty;
        if (possibleTotal > MAX_SIZE) {
            mintableQty = MAX_SIZE - entryCount;
        }
        uint256 requiredAmount = mintableQty * price;
        if (value < requiredAmount) revert Insufficient_Payment();
        if (value > requiredAmount) {
            refund = value - requiredAmount;
        }
    }

    /// @notice util function to process the minting call
    function _joinCycleFor(
        address account,
        address ref,
        uint256 cycleId,
        uint256 mintableQty,
        uint256 refund
    ) internal {
        _wkdNFT.mint(account, mintableQty);
        if (mintableQty > 0) {
            if (!_existing[account]) {
                _referrals[account] = ref;
                _existing[account] = true;
                _myRefs[ref].push(account);
            }
            for (uint256 i = 0; i < mintableQty; ) {
                // winners are selected based on the index of
                // the entry in the array
                _entries[cycleId].push(account);
                unchecked {
                    i++; // cannot overflow due to loop constraint
                }
            }
            _mints[cycleId][account] += mintableQty;
            emit JoinedCycle(cycleId, account, mintableQty);
        }
        if (refund > 0) {
            (bool ok, ) = _msgSender().call{value: refund}("");
            if (!ok) revert Refund_Failed();
        }
    }

    /// @notice used by the {RAFFLE_MANAGER} to end a cycle in preparation for starting the draws
    /// @dev the function emite {RequiredRandomRequest} that should be used to know how many
    /// requests to the VRFManager will be required to draw all winners
    function processForWinners() external onlyRole(RAFFLE_MANAGER) {
        uint256 cycleId = cycleCounter.current();
        _preDrawCheck(cycleId);
        (
            uint256 prize,
            uint256 prizePerWin,
            uint256 daoRake,
            uint256 platformRake,
            uint256 buyBackRake,
            uint256 refRake,
            uint256 rakePerRef,
            uint256 topCadreRake,
            uint256 possibleWinners
        ) = winningPrize(cycleId);

        _cycles[cycleId].prize = prizePerWin;
        _cycles[cycleId].rakePerRef = rakePerRef;
        _cycles[cycleId].possibleWinsBasedOnEntry = possibleWinners;

        _topCadreFund += topCadreRake;
        _buybackAndBurnFund += buyBackRake;
        _referralFund += refRake;
        _platformFund += platformRake;
        _daoFund += daoRake;

        uint256 drawCount = possibleWinners / 100; // batch of random numbers
        _draws[cycleId].target = drawCount == 0 ? 1 : drawCount; // we need at least 1 draw
        _status = Status.DRAWING_WINNERS;
        emit ReadyForDraws(
            cycleId,
            _entries[cycleId].length,
            prize,
            daoRake,
            buyBackRake
        );
    }

    /// @dev util function to check some parameters are available beofore proceeding to draw winners
    function _preDrawCheck(uint256 cycleId) internal view {
        if (_status != Status.OPEN)
            revert Inaccurate_Raffle_State({
                expected: uint256(Status.OPEN),
                actual: uint256(_status)
            });
        if (_entries[cycleId].length % 20 != 0)
            revert Cannot_Process_At_This_Time();
    }

    function requestRandomWordsForCycle() external onlyRole(RAFFLE_MANAGER) {
        if (_status != Status.DRAWING_WINNERS)
            revert Inaccurate_Raffle_State({
                expected: uint256(Status.DRAWING_WINNERS),
                actual: uint256(_status)
            });
        // will replace the previous one
        // raffle manager must ensure enough time has
        // passed in-between calls and there is no
        if (block.timestamp < (lastRequestMadeAt + 5 minutes))
            revert Too_Early();

        try
            wkdVRFManager.requestRandomWords(
                subscriptionId,
                2500000 /* Use max callback gas limit*/,
                100 /* number of words */,
                3 /* number of confirmations */
            )
        returns (uint256 requestId) {
            lastRequestId = requestId;
            lastRequestMadeAt = block.timestamp;
        } catch Error(string memory revertReason) {
            emit OperationFailedWithString(revertReason);
        } catch (bytes memory returnData) {
            emit OperationFailedWithData(returnData);
        }
    }

    /// @notice shows the available funds in the contract shared to different beneficiaries
    function availableFunds()
        external
        view
        returns (
            uint256 topCadre,
            uint256 buybackAndBurn,
            uint256 referralFund,
            uint256 platform,
            uint256 dao
        )
    {
        return (
            _topCadreFund,
            _buybackAndBurnFund,
            _referralFund,
            _platformFund,
            _daoFund
        );
    }

    /// @notice computes the winning prize of a given cycle
    /// @param cycleId id of the cycle of interest
    function winningPrize(
        uint256 cycleId
    )
        public
        view
        returns (
            uint256 prize,
            uint256 prizePerWin,
            uint256 daoRake,
            uint256 platformRake,
            uint256 buyBackRake,
            uint256 refRake,
            uint256 rakePerRef,
            uint256 topRankersRake,
            uint256 possibleWinners
        )
    {
        Cycle memory cycle = _cycles[cycleId];
        uint256 entryCount = _entries[cycleId].length;
        uint256 totalPay = entryCount * cycle.price;
        uint256 roundToNext20 = entryCount % SAMPLE_SIZE;
        if (roundToNext20 != 0) {
            entryCount = entryCount + (SAMPLE_SIZE - roundToNext20);
        }
        prize = (totalPay * WINNERS_PCT) / 100;
        possibleWinners =
            ((entryCount / SAMPLE_SIZE) * cycle.expectedWins) /
            100;
        prizePerWin = prize / possibleWinners;
        daoRake = (totalPay * DAO_PCT) / 100;
        platformRake = (totalPay * PLATFORM_PCT) / 100;
        buyBackRake = (totalPay * BUY_BACK_PCT) / 100;
        refRake = (totalPay * REF_PCT) / 100;
        rakePerRef = refRake / possibleWinners;
        topRankersRake = (totalPay * TOP_RANK_PCT) / 100;
    }

    /// @notice used by the {RAFFLE_MANAGER} to draw winners from the on-going cycle
    function drawWinners() external onlyRole(RAFFLE_MANAGER) {
        if (_status != Status.DRAWING_WINNERS)
            revert Inaccurate_Raffle_State({
                expected: uint256(Status.DRAWING_WINNERS),
                actual: uint256(_status)
            });
        uint256 cycleId = cycleCounter.current();
        _creditWinnersAndReferrals(cycleId);
    }

    /// @dev uses random words generated from the vrf manager to credit players
    /// it will never choose a winning number more than once
    /// winner is selected based on the index from the _entries[cycleId] array
    /// Can emit {RequiredRandomRequest} in case all winners aren't selected
    /// due to duplicated numbers from VRF call
    function _creditWinnersAndReferrals(uint256 cycleId) internal {
        Cycle memory cycle = _cycles[cycleId];
        uint256 expectedWinners = cycle.possibleWinsBasedOnEntry;
        address[] memory entries = _entries[cycleId];
        if (usedReqIds[lastRequestId]) revert Used_RequestId();
        (bool fulfilled, uint256[] memory randomWords) = wkdVRFManager
            .getRequestStatus(lastRequestId);
        if (fulfilled) {
            uint256 rakePerRef = cycle.rakePerRef;
            uint256 prize = cycle.prize;
            for (uint256 i = 0; i < randomWords.length; ) {
                uint256 n = randomWords[i] % entries.length;
                if (!_drawnIndexForCycle[cycleId][n]) {
                    _drawnIndexForCycle[cycleId][n] = true; // ensures number isn't selected twice
                    address winner = entries[n];
                    // for any unforseen reason
                    if (winner != address(0)) {
                        if (!_cycleOfPendingRewardFor[winner].exists) {
                            _cycleOfPendingRewardFor[winner].cycle = cycleId;
                            _cycleOfPendingRewardFor[winner].exists = true;
                        }
                        address referee = _referrals[winner];
                        if (referee != address(0)) {
                            _referralFund -= rakePerRef;
                            _refRake[referee] += rakePerRef;
                        }
                        _winnersRake[winner] += prize;
                        _draws[cycleId].winners.push(n); // for winner index verification
                    }
                }
                if (_draws[cycleId].winners.length == expectedWinners) {
                    _status = Status.POST_DRAW;
                    break;
                }
                i++;
            }
            if (_status != Status.POST_DRAW) {
                // request for more random numbers
                // if all winners haven't been selected at this point,
                // increase target by one
                _draws[cycleId].target++;
            }
            _draws[cycleId].current++;
            usedReqIds[lastRequestId] = true;
            Draw memory draw = _draws[cycleId];
            emit DrawResult(
                cycleId,
                draw.current,
                draw.target,
                draw.winners.length,
                subscriptionId,
                lastRequestId
            );
        }
        // silently pass without doing anything,
        // try again after some time
    }

    /// @notice used by {RAFFLE_MANAGER} to complete the cycle and close it, transferring funds to
    /// specially configured addreses such as the DAO
    function postDrawCall(
        bool fundVRFManager
    ) external nonReentrant onlyRole(RAFFLE_MANAGER) {
        if (_status != Status.POST_DRAW)
            revert Inaccurate_Raffle_State({
                expected: uint256(Status.POST_DRAW),
                actual: uint256(_status)
            });
        uint256 platformAmount = _platformFund;
        uint256 daoAmount = _daoFund;
        uint256 topCadreAmount = _topCadreFund;
        uint256 referralAmount = _referralFund; // unclaimed funds
        _topCadreFund = 0;
        _referralFund = 0;
        _platformFund = 0;
        _daoFund = 0;
        if (fundVRFManager) {
            if (platformAmount < VRF_FUNDING_AMOUNT)
                revert VRF_Funding_Failed();
            platformAmount -= VRF_FUNDING_AMOUNT;
            _closingCycleFundTransferTo(
                address(wkdVRFManager),
                VRF_FUNDING_AMOUNT
            );
        }
        _closingCycleFundTransferTo(_dao, daoAmount);
        _closingCycleFundTransferTo(_platform, platformAmount);
        _closingCycleFundTransferTo(_topCadre, topCadreAmount + referralAmount); // send unclaimed referral bonus along with top cadre
        _status = Status.CLOSED;
        uint256 cycleId = cycleCounter.current();
        emit PostDrawCall(
            cycleId,
            _entries[cycleId].length,
            _draws[cycleId].winners.length
        );
    }

    function _closingCycleFundTransferTo(
        address account,
        uint256 amount
    ) internal {
        (bool ok, ) = account.call{value: amount}("");
        if (!ok) revert Transfer_Failed();
    }

    /// @notice for {RAFFLE_MANAGER} to  perform buy backoperations
    function buyAndBurn(
        IRouter router
    ) external nonReentrant onlyRole(RAFFLE_MANAGER) {
        uint256 moment = block.timestamp;
        if (moment < lastBurnAt) revert Too_Early();
        uint256 burnAmount = _buybackAndBurnFund;
        _buybackAndBurnFund = 0;
        address factory = router.factory();
        address weth = router.WETH();
        address pair = IFactory(factory).getPair(weth, WKD);
        if (pair == address(0)) revert Invalid_Pair();
        address[] memory path = new address[](2);
        path[0] = weth;
        path[1] = WKD;
        uint256[] memory outs = router.getAmountsOut(burnAmount, path);

        try
            router.swapExactETHForTokensSupportingFeeOnTransferTokens{
                value: burnAmount
            }(outs[1], path, BURN_ADDRESS, moment + 5 minutes)
        {
            lastBurnAt = moment;
            emit BuyBackAndBurn(address(router), outs[0], outs[1]);
        } catch Error(string memory revertReason) {
            emit OperationFailedWithString(revertReason);
        } catch (bytes memory returnData) {
            emit OperationFailedWithData(returnData);
        }
    }

    /// @notice shows the referral bonus for a given address
    function pendingReferralBonus(
        address account
    ) external view returns (uint256) {
        return _refRake[account];
    }

    /// @notice shows the total pending winning amount for an address and the amount of
    /// tokens required to burn for the claim to be withdrawn.
    /// @param account is the address under consideration
    function unclaimedBNB(
        address account
    ) public view returns (uint256 totalPendingAmount, uint256 tokensRequired) {
        totalPendingAmount = _winnersRake[account];
        uint256 winCycle = _cycleOfPendingRewardFor[account].cycle;
        if (winCycle != 0) {
            Cycle memory cycle = _cycles[winCycle];
            tokensRequired = totalPendingAmount / cycle.prize; // should be multiples of the prize won, otherwise, is zero
        }
    }

    /// @notice used to claim the referral bomus available for an address
    function claimReferralBonus() external nonReentrant {
        address to = _msgSender();
        uint256 amount = _refRake[to];
        if (amount == 0) revert Nothing_To_Claim();
        _refRake[to] = 0;
        (bool ok, ) = to.call{value: amount}("");
        if (!ok) revert Transfer_Failed();
        emit ClaimReferralBonus(to, amount);
    }

    /// @notice to claim the price.
    /// @dev cycleId must be provided because the price for each token is differnt in all cycles.
    /// a winning token is burnt during claim
    function claimPrize(address account) external nonReentrant {
        (uint256 totalPendingAmount, uint256 tokensRequired) = unclaimedBNB(
            account
        );
        if (totalPendingAmount != 0) {
            _claimPrize(account, totalPendingAmount, tokensRequired);
        }
    }

    function _claimPrize(
        address account,
        uint256 totalPendingAmount,
        uint256 tokensRequired
    ) internal {
        _wkdNFT.burnWinningTokens(account, tokensRequired);
        // clear storage
        delete _cycleOfPendingRewardFor[account];
        delete _winnersRake[account];
        (bool ok, ) = account.call{value: totalPendingAmount}("");
        if (!ok) revert Transfer_Failed();
        emit ClaimWinPrize(account, totalPendingAmount, tokensRequired);
    }

    /// @notice shows all the entries in a given cycle
    function showEntriesFor(
        uint256 cycleId
    ) external view returns (address[] memory entries) {
        return _entries[cycleId];
    }

    /// @notice get information about the draw on a cycle
    function showDrawFor(uint256 cycleId) external view returns (Draw memory) {
        return _draws[cycleId];
    }

    /// @notice shows the referee of an account
    function showReferralFor(address account) external view returns (address) {
        return _referrals[account];
    }

    /// @notice used to set the DAO address as specified by the {ADMIN}
    function updateDAO(address dao) external onlyRole(ADMIN) {
        if (dao == address(0)) revert Invalid_Address_Detected();
        emit DAOChanged(_dao, dao);
        _dao = dao;
    }

    /// @notice used to set the Platform address as specified by the {ADMIN}
    function updatePlatform(address platform) external onlyRole(ADMIN) {
        if (platform == address(0)) revert Invalid_Address_Detected();
        emit PlatformChanged(_platform, platform);
        _platform = platform;
    }

    /// @notice used to set the Top Cadre (contract) address as specified by the {ADMIN}
    function updateTopCadre(address topCadre) external onlyRole(ADMIN) {
        if (topCadre == address(0)) revert Invalid_Address_Detected();
        emit TopCadreChanged(_topCadre, topCadre);
        _topCadre = topCadre;
    }

    /// @notice used to set the vrf manager as specified by the {ADMIN}
    function updateVRFManager(
        address payable vrfManager,
        uint64 subId
    ) public onlyRole(ADMIN) {
        if (address(wkdVRFManager) == vrfManager && subscriptionId == subId)
            revert Same_As_Before();
        if (vrfManager == address(0)) revert Invalid_Address_Detected();
        emit VRFManagerUpdated(vrfManager, subId);
        wkdVRFManager = WKDVRFManager(vrfManager);
        subscriptionId = subId;
    }

    function showMyReferrals(
        address account
    ) external view returns (address[] memory myReferrals) {
        return _myRefs[account];
    }

    /// @notice shows the DAO wallet and the top cadre contract wallets
    function showManagementWallets()
        external
        view
        returns (address dao, address pplatform, address topcadre)
    {
        return (_dao, _platform, _topCadre);
    }

    /// @notice shows the version number of this contract
    function version() external pure returns (string memory) {
        return "v1";
    }
}


// File: contracts/WKDVRFManager.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

import {VRFConsumerBase} from "./interfaces/IVRFConsumerBase.sol";
import {VRFCoordinatorInterface} from "./interfaces/IVRFCoordinator.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

error Same_As_Before();
error Not_Authorized();
error Funding_Failed();
error Invalid_Request();

contract WKDVRFManager is VRFConsumerBase, Ownable {
    VRFCoordinatorInterface private immutable COORDINATOR;
    mapping(address => bool) public authorized;
    struct RequestStatus {
        bool fulfilled; // whether the request has been successfully fulfilled
        bool exists; // whether a requestId exists
        uint256[] randomWords;
    }
    uint256[] public requestIds;
    uint256 private _lastRequestId;
    uint64 private _subscriptionId;

    mapping(uint256 => RequestStatus) private requests;

    event AuthorizationUpdated(address previousController, bool status);
    event RequestSent(uint256 requestId, uint64 subId, uint32 numWords);
    event RequestFulfilled(uint256 requestId, uint256[] randomWords);
    event SubscriptionIdChanged(uint64 previous, uint64 current);

    bytes32 public immutable keyHash;

    constructor(
        address coordinator,
        bytes32 _keyHash,
        uint64 _subId
    ) VRFConsumerBase(coordinator) {
        COORDINATOR = VRFCoordinatorInterface(coordinator);
        _subscriptionId = _subId;
        keyHash = _keyHash;
    }

    receive() external payable {
        _fund(msg.value);
    }

    function updateAuthAccount(
        address account,
        bool status
    ) external onlyOwner {
        if (authorized[account] == status) revert Same_As_Before();
        authorized[account] = status;
        emit AuthorizationUpdated(account, status);
    }

    function requestRandomWords(
        uint64 subId,
        uint32 callbackGasLimit,
        uint32 numWords,
        uint16 confirmations
    ) external returns (uint256 requestId) {
        if (!authorized[_msgSender()]) revert Not_Authorized();
        requestId = COORDINATOR.requestRandomWords(
            keyHash,
            subId,
            confirmations,
            callbackGasLimit,
            numWords
        );
        requests[requestId] = RequestStatus({
            randomWords: new uint256[](0),
            exists: true,
            fulfilled: false
        });
        requestIds.push(requestId);
        _lastRequestId = requestId;
        emit RequestSent(requestId, subId, numWords);
    }

    function fulfillRandomWords(
        uint256 requestId,
        uint256[] memory randomWords
    ) internal override {
        if (!requests[requestId].exists) revert Invalid_Request();
        requests[requestId].fulfilled = true;
        requests[requestId].randomWords = randomWords;
        emit RequestFulfilled(requestId, randomWords);
    }

    function getRequestStatus(
        uint256 _requestId
    ) external view returns (bool fulfilled, uint256[] memory randomWords) {
        if (!requests[_requestId].exists) revert Invalid_Request();
        RequestStatus memory request = requests[_requestId];
        return (request.fulfilled, request.randomWords);
    }

    function _fund(uint256 amount) internal {
        (bool ok, ) = address(COORDINATOR).call{value: amount}(
            abi.encodeWithSignature("deposit(uint64)", _subscriptionId)
        );
        if (!ok) revert Funding_Failed();
    }

    function updateSubId(uint64 newSubId) external onlyOwner {
        if (_subscriptionId == newSubId) revert Same_As_Before();
        emit SubscriptionIdChanged(_subscriptionId, newSubId);
        _subscriptionId = newSubId;
    }

    function subscriptionId() external view returns (uint64) {
        return _subscriptionId;
    }

    function lastRequestId() external view returns (uint256) {
        return _lastRequestId;
    }
}

// 0x0b43eFa3478b02ADA6783d523b0A89F5a2F81fCb - working condition
// 0xd11a9d04642bE7b1BA6E25A5311b1fE312Cf04c1 - improved conditon

