// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract CSGOToken {
    string public name;
    string public symbol;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => bool) public whitelist;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor() {
        name = "CSGO";
        symbol = "CSGO";
        totalSupply = 100000000 * 10**18; // 1亿 CSGO，18 位小数
        balanceOf[msg.sender] = totalSupply;
        whitelist[msg.sender] = true;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    modifier onlyWhitelist() {
        require(whitelist[msg.sender], "Address not in whitelist");
        _;
    }

    function addToWhitelist(address[] calldata addresses) external {
        for (uint256 i = 0; i < addresses.length; i++) {
            whitelist[addresses[i]] = true;
        }
    }

    function removeFromWhitelist(address[] calldata addresses) external {
        for (uint256 i = 0; i < addresses.length; i++) {
            whitelist[addresses[i]] = false;
        }
    }

    function transfer(address to, uint256 value) external onlyWhitelist returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;

        emit Transfer(msg.sender, to, value);

        return true;
    }
}