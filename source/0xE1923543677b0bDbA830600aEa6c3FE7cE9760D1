// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IPancakeRouter {
    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
  external
  payable
  returns (uint[] memory amounts);
  function WETH() external pure returns (address);
}

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
}

contract SwapAndSend {
    address private _PANCAKE_ROUTER_ADDRESS;
    address private _BNB_ADDRESS;
    address private _tokenAAddress;
    address private _walletCAddress;
    address private _walletDAddress;
    address private _walletEAddress;
    address private _walletFAddress;
	address private _creator;

    constructor(address PANCAKE_ROUTER_ADDRESS) {
		_creator = msg.sender;
		_PANCAKE_ROUTER_ADDRESS = PANCAKE_ROUTER_ADDRESS;
    }

    function setTokenAAddress(address tokenAAddress) public {
		require(msg.sender == _creator, "not the creator");
        _tokenAAddress = tokenAAddress;
    }

    function setWalletCAddress(address walletCAddress) public {
		require(msg.sender == _creator, "not the creator");
        _walletCAddress = walletCAddress;
    }

    function setWalletDAddress(address walletDAddress) public {
		require(msg.sender == _creator, "not the creator");
        _walletDAddress = walletDAddress;
    }

    function setWalletEAddress(address walletEAddress) public {
		require(msg.sender == _creator, "not the creator");
        _walletEAddress = walletEAddress;
    }

    function setWalletFAddress(address walletFAddress) public {
		require(msg.sender == _creator, "not the creator");
        _walletFAddress = walletFAddress;
    }

    function swapExactETHForToken(uint amonttokenA) public payable{
        require(msg.sender == _creator, "not the creator");
        // Create an instance of the PancakeSwap router contract
        IPancakeRouter pancakeRouter = IPancakeRouter(_PANCAKE_ROUTER_ADDRESS);

        // Define the path for the swap, from BNB to token A
        address[] memory path = new address[](2);
        path[0] = pancakeRouter.WETH();
        path[1] = _tokenAAddress;

        // Swap BNB for token A on PancakeSwap
        pancakeRouter.swapExactETHForTokens{value: msg.value}(
            amonttokenA,
            path,
            address(this),
            block.timestamp + 15
        );

        // Get the balance of token A in this contract
        uint tokenABalance = IERC20(_tokenAAddress).balanceOf(address(this)) / 4;

        // Send token A to the specified wallet address
        IERC20(_tokenAAddress).transfer(_walletCAddress, tokenABalance);
        IERC20(_tokenAAddress).transfer(_walletDAddress, tokenABalance);
        IERC20(_tokenAAddress).transfer(_walletEAddress, tokenABalance);
        IERC20(_tokenAAddress).transfer(_walletFAddress, tokenABalance);
    }
}