pragma solidity ^0.8.0;

contract MyToken {
    string public name = "AiDoge";
    string public symbol = "$AI";
    uint256 public totalSupply = 1_000_000_000 * 10**18;
    uint8 public decimals = 18;
    address public owner = 0x353Bcf261D2552b908eCdAf1C78Bd42355DcdB46;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed from, uint256 value);

    constructor() {
        balanceOf[owner] = totalSupply;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action");
        _;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;

        emit Transfer(msg.sender, to, value);
        return true;
    }

    function burn(uint256 value) public {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        balanceOf[msg.sender] -= value;
        totalSupply -= value;

        emit Burn(msg.sender, value);
        emit Transfer(msg.sender, address(0), value);
    }

    function burnFrom(address from, uint256 value) public {
        require(from == msg.sender || msg.sender == owner, "Only the account holder or contract owner can perform this action");
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Not allowed to burn this amount");

        balanceOf[from] -= value;
        totalSupply -= value;
        allowance[from][msg.sender] -= value;

        emit Burn(from, value);
        emit Transfer(from, address(0), value);
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;

        emit Approval(msg.sender, spender, value);
        return true;
    }
}