// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract Token {
    string public name = "ChessTribe";
    string public symbol = "CM8";
	uint public decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    uint256 public marketingRate = 0;
    address public marketingAddress = 0x4B019f79D2eEfc46Fa35B0728C5DFE06f1c9Adf4;
    address public creatorAddress = 0xDa387a0413e8396dc51A93EA6020506cCe1DfC17;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor() {
        totalSupply = 1000000000 * 10**decimals;
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(amount > 0, "Amount must be greater than zero");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");

        uint256 marketingFee = 0;
        if (msg.sender != marketingAddress && msg.sender != creatorAddress) {
            marketingFee = (amount * marketingRate) / 100;
        }

        uint256 transferAmount = amount - marketingFee;

        balanceOf[msg.sender] -= amount;
        balanceOf[recipient] += transferAmount;
        balanceOf[marketingAddress] += marketingFee;

        emit Transfer(msg.sender, recipient, transferAmount);

        return true;
    }
}