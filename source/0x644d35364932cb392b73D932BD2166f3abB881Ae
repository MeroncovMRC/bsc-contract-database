//SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

library SafeMathInt {
    function mul(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when multiplying INT256_MIN with -1
        // https://github.com/RequestNetwork/requestNetwork/issues/43
        require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));

        int256 c = a * b;
        require((b == 0) || (c / b == a));
        return c;
    }

    function div(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when dividing INT256_MIN by -1
        // https://github.com/RequestNetwork/requestNetwork/issues/43
        require(!(a == - 2**255 && b == -1) && (b > 0));

        return a / b;
    }

    function sub(int256 a, int256 b) internal pure returns (int256) {
        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));

        return a - b;
    }

    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }

    function toUint256Safe(int256 a) internal pure returns (uint256) {
        require(a >= 0);
        return uint256(a);
    }
}

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint256);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IInviter {
    function getInviter(address account) external returns(address);
}

contract ShopMarket is Ownable {
    using SafeMath for uint256;
    using Address for address;

    IPancakeRouter02 public pancakeRouter;
    address public pancakePair;

    address public relationAddress;
    address public providerAddress;
    address public marketAddress;
    address public fundAddress;
    address public developAddress;
    address public nodeReceiveAddress;

    IERC20 public usdtToken;
    IERC20 public k8sToken;

    uint256 internal provideFee = 300;
    uint256 internal marketFee = 200;
    uint256 internal liquidityFee = 100;
    uint256 internal fundFee = 150;
    uint256 internal dividentFee = 200;
    uint256 internal developFee = 50;

    uint8 public convertRate = 15; //15%
    uint256 internal nodeRequiredAmount = 1500 * 10 ** 18;
    address[] nodeLists;
    mapping (address => bool) isNode;
    mapping (address => uint256) public accountDividents;

    uint256 public totalComputing;
    uint256[] inviteComputeRatio = [30, 10];
    uint256 internal computeRatio = 100;
    mapping (address => uint256) public accountComputing;

    uint256 public rewardRate = 11574074074074074;
    uint256 public lastUpdateTime;
    uint256 public rewardPerComputingStored;
    mapping(address => uint256) public userRewardPerTokenPaid;
    mapping(address => uint256) public rewards;

    uint256 public layer = 100;
    uint256 internal totalLevelRatio = 21; //21%
    uint256 internal level1RequireAmount = 20000 * 10 ** 18;
    uint256 internal level1Ratio = 5; // 5%
    uint256 internal level1DirectCount = 5;
    uint256 internal level2RequireAmount = 80000 * 10 ** 18;
    uint256 internal level2Ratio = 9; //9%
    uint256 internal level2DirectCount = 10;
    uint256 internal level3RequireAmount = 150000 * 10 ** 18;
    uint256 internal level3Ratio = 13; //13%
    uint256 internal level3DirectCount = 15;
    uint256 internal level4RequireAmount = 300000 * 10 ** 18;
    uint256 internal level4Ratio = 17; //17%
    uint256 internal level4DirectCount = 20;
    uint256 internal level5RequireAmount = 500000 * 10 ** 18;
    uint256 internal level5Ratio = 21; //21%
    uint256 internal level5DirectCount = 25;

    struct InviterMap {
        uint256 directCount;
        uint256 totalTeamAchievement;
    }
    mapping(address => InviterMap) internal accountInvterAchievement;

    event Payment(address indexed  account, uint256 orderId, uint256 amount);
    event BuyNOde(address indexed  account, uint256 amount);
    event GetDivident(address indexed account, uint256 amount);
    event RewardComputingPaid(address indexed  account, uint256 amount);
    event Convert(address indexed  account, uint256 amount, uint256 mappingAmount);

    modifier updateReward(address account) {
        rewardPerComputingStored = rewardPerToken();
        lastUpdateTime = block.timestamp;
        if (account != address(0)) {
            rewards[account] = earned(account);
            userRewardPerTokenPaid[account] = rewardPerComputingStored;
        }
        _;
    } 

    constructor(
        address _relationAddress,
        address _usdtTokenAddress,
        address _k8sTokenAddress,
        address _pancakeRouter,
        address _pancakePair
    ) {
        relationAddress = _relationAddress;
        usdtToken = IERC20(_usdtTokenAddress);
        k8sToken = IERC20(_k8sTokenAddress);

        pancakeRouter = IPancakeRouter02(_pancakeRouter);
        pancakePair = _pancakePair;
    }

    function setLevel5DirectCount(uint256 _level5DirectCount) external onlyOwner {
        level5DirectCount = _level5DirectCount;
    }

    function setLevelRatio(
        uint256 _totalLevelRatio, 
        uint256 _level1Ratio,
        uint256 _level2Ratio,
        uint256 _level3Ratio,
        uint256 _level4Ratio,
        uint256 _level5Ratio
    ) external onlyOwner {
        totalLevelRatio = _totalLevelRatio;
        level1Ratio = _level1Ratio;
        level2Ratio = _level2Ratio;
        level3Ratio = _level3Ratio;
        level4Ratio = _level4Ratio;
        level5Ratio = _level5Ratio;
    }

    function setLevelRequireAmount(
        uint256 _level1RequireAmount,
        uint256 _level2RequireAmount,
        uint256 _level3RequireAmount,
        uint256 _level4RequireAmount,
        uint256 _level5RequireAmount
    ) external onlyOwner {
        level1RequireAmount = _level1RequireAmount;
        level2RequireAmount = _level2RequireAmount;
        level3RequireAmount = _level3RequireAmount;
        level4RequireAmount = _level4RequireAmount;
        level5RequireAmount = _level5RequireAmount;
    }

    function setConfigAddress(
        address _relationAddress,
        address _providerAddress,
        address _marketAddress,
        address _fundAddress,
        address _developAddress,
        address _nodeReceiveAddress
    ) external onlyOwner {
        nodeReceiveAddress = _nodeReceiveAddress;
        developAddress = _developAddress;
        fundAddress = _fundAddress;
        marketAddress = _marketAddress;
        providerAddress = _providerAddress;
        relationAddress = _relationAddress;
    }

    function setConvertRate(uint8 _convertRate) external onlyOwner {
        convertRate = _convertRate;
    }

    function setInviteComputeRatio(uint256[] memory _inviteComputeRatio) external onlyOwner {
        inviteComputeRatio = _inviteComputeRatio;
    }

    function setComputeRatio(uint256 _computeRatio) external onlyOwner {
        computeRatio = _computeRatio;
    }

    function setRewardRate(uint256 _rewardRate) external onlyOwner {
        rewardRate = _rewardRate;
    }

    function setNodeRequiredAmount(uint256 _nodeRequiredAmount) external onlyOwner {
        nodeRequiredAmount = _nodeRequiredAmount;
    }

    function interest(address tokenAddress, address account, uint256 amount) external onlyOwner {
        IERC20(tokenAddress).approve(address(this), amount);
        IERC20(tokenAddress).transferFrom(address(this), account, amount);
    }

    function setConfigFee(
        uint256 _provideFee, 
        uint256 _marketFee,
        uint256 _liquidityFee,
        uint256 _fundFee,
        uint256 _dividentFee,
        uint256 _developFee
    ) external onlyOwner {
        provideFee = _provideFee;
        marketFee = _marketFee;
        liquidityFee = _liquidityFee;
        fundFee = _fundFee;
        dividentFee = _dividentFee;
        developFee = _developFee;
    }

    function convert(uint256 amount) public {
        require(amount > 0, "More than 0");
        uint256 price = getCurPrice(address(k8sToken));
        price += price.mul(convertRate).div(100);
        uint256 mappingTokenAmount = amount.mul(10 ** 18).div(price);
        usdtToken.transferFrom(msg.sender, address(this), amount);
        k8sToken.transfer(msg.sender, mappingTokenAmount);
        emit Convert(msg.sender, amount, mappingTokenAmount);
    }

    function payment(uint256 orderId, uint256 amount) public {
        uint256 provideAmount = amount.mul(provideFee).div(1000);
        usdtToken.transferFrom(msg.sender, providerAddress, provideAmount);
        uint256 marketAmount = amount.mul(marketFee).div(1000);
        usdtToken.transferFrom(msg.sender, marketAddress, marketAmount);
        uint256 fundAmount = amount.mul(fundFee).div(1000);
        usdtToken.transferFrom(msg.sender, fundAddress, fundAmount);
        uint256 developAmount = amount.mul(developFee).div(1000);
        usdtToken.transferFrom(msg.sender, developAddress, developAmount);

        uint256 liquidityAmount = amount.mul(liquidityFee).div(1000);
        usdtToken.transferFrom(msg.sender, address(this), liquidityAmount);
        uint256 berforWaspTokenAmount = k8sToken.balanceOf(address(this));
        uint256 halfAmount = liquidityAmount.div(2);
        swapTokensToToken(halfAmount, address(this));
        uint256 liquidityK8sAmount = k8sToken.balanceOf(address(this)).sub(berforWaspTokenAmount);
        addLiquidity(liquidityK8sAmount, halfAmount);
        uint256 dividentAmount = amount.mul(dividentFee).div(1000);
        usdtToken.transferFrom(msg.sender, address(this), dividentAmount);
        notifyDivident(dividentAmount);
        
        grantStake(msg.sender, amount);
        address invitor = IInviter(relationAddress).getInviter(msg.sender);
        if(invitor != address(0)) {
            invited(invitor, amount);
            differentialDivedent(invitor, amount);
        }
        emit Payment(msg.sender, orderId, amount);
    }

    function differentialDivedent(address inviterAddress, uint256 amount) private {
        uint256 totalRatio;
        uint256 dloop = 0;
        while(inviterAddress != address(0)) {
            uint256 rewardComputingAmount = 0;
            InviterMap storage accInviterMap = accountInvterAchievement[inviterAddress];
            if(
                (accInviterMap.totalTeamAchievement >= level5RequireAmount && accInviterMap.directCount >= level5DirectCount && level5Ratio > totalRatio)
                || isNode[inviterAddress]
            ) {
                rewardComputingAmount = amount.mul(level5Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level5Ratio.sub(totalRatio));
            } else if(
                accInviterMap.totalTeamAchievement > level4RequireAmount 
                && accInviterMap.directCount >= level4DirectCount
                && level4Ratio > totalRatio 
            ) {
                rewardComputingAmount = amount.mul(level4Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level4Ratio.sub(totalRatio));
            } else if(
                accInviterMap.totalTeamAchievement > level3RequireAmount
                && accInviterMap.directCount >= level3DirectCount
                && level3Ratio > totalRatio
            ) {
                rewardComputingAmount = amount.mul(level3Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level3Ratio.sub(totalRatio));
            } else if(
                accInviterMap.totalTeamAchievement > level2RequireAmount
                && accInviterMap.directCount >= level2DirectCount
                && level2Ratio > totalRatio
            ) {
                rewardComputingAmount = amount.mul(level2Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level2Ratio.sub(totalRatio));
            } else if(
                accInviterMap.totalTeamAchievement > level1RequireAmount
                && accInviterMap.directCount >= level1DirectCount
                && level1Ratio > totalRatio
            ) {
                rewardComputingAmount = amount.mul(level1Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level1Ratio.sub(totalRatio));
            }
            if(rewardComputingAmount > 0) {
                increaseAccountComputing(inviterAddress, rewardComputingAmount);
            }
            dloop++;
            if(totalRatio >= totalLevelRatio || dloop >= layer) {
                break;
            }
            inviterAddress = IInviter(relationAddress).getInviter(inviterAddress);
        }
    }

    function invited(address invitor, uint256 amount) private {
        InviterMap storage accInviterMap = accountInvterAchievement[invitor];
        accInviterMap.directCount = accInviterMap.directCount.add(1);
        if (accountComputing[invitor] > 0) {
            accInviterMap.totalTeamAchievement = accInviterMap.totalTeamAchievement.add(amount);
        }   
        //team achievement
        achievement(invitor, amount);
    }

    function achievement(address account, uint256 amount) private {
        address superior = IInviter(relationAddress).getInviter(account);
        uint256 curLoop = 0;
        while(superior != address(0)) {
            if (accountComputing[superior] > 0) {
                InviterMap storage accInviterMap = accountInvterAchievement[superior];
                accInviterMap.totalTeamAchievement = accInviterMap.totalTeamAchievement.add(amount);
            }
            superior = IInviter(relationAddress).getInviter(superior);
            curLoop++;
            if(curLoop >= layer) {
                break;
            }
        }
    }

    function buyNode(uint256 nodeAmount) public  {
        require(nodeRequiredAmount == nodeAmount, "Error amount");
        usdtToken.transferFrom(msg.sender, nodeReceiveAddress, nodeRequiredAmount);
        nodeLists.push(msg.sender);
        isNode[msg.sender] = true;
        emit BuyNOde(msg.sender, nodeAmount);
    }

    function getDivident() public {
        require(isNode[msg.sender], "No reward claim");
        require(accountDividents[msg.sender] > 0, "No reward claim");
        usdtToken.transfer(msg.sender, accountDividents[msg.sender]);
        emit GetDivident(msg.sender, accountDividents[msg.sender]);
        accountDividents[msg.sender] = 0;
    }

    function getComputingReward() public updateReward(msg.sender) {
        uint256 reward = earned(msg.sender);
        require(reward > 0, "No reward");
        require(k8sToken.balanceOf(address(this)) >= reward, "Insufficient rewards");
        rewards[msg.sender] = 0;
        k8sToken.transfer(msg.sender, reward);
        emit RewardComputingPaid(msg.sender, reward);
    }

    function grantStake(address account, uint256 amount) private {
        uint256 computingAmount = amount.mul(computeRatio).div(100);
        address superior = account;
        for(uint8 i = 0; i < 2; i++) {
            address invitor = IInviter(relationAddress).getInviter(superior);
            if(invitor == address(0)) break;
            if(accountComputing[invitor] <= 0) continue;
            uint256 computingReward = computingAmount.mul(inviteComputeRatio[i]).div(100);
            increaseAccountComputing(invitor, computingReward);
            superior = invitor;
        }
        increaseAccountComputing(account, computingAmount);
    }

    function increaseAccountComputing(address account, uint256 computing) private updateReward(account) {
        accountComputing[account] = accountComputing[account].add(computing);
        increaseTotalComputing(computing);
    }

    function increaseTotalComputing(uint256 computing) private {
        totalComputing = totalComputing.add(computing);
    }

    function notifyDivident(uint256 notifyDividentAmount) private {
        uint256 nodes = nodeLists.length;
        if(nodes > 0) {
            uint256 perNodeAmount = notifyDividentAmount.div(nodes);
            for(uint256 i = 0; i < nodes; i++) {
                address master = nodeLists[i];
                accountDividents[master] = accountDividents[master].add(perNodeAmount);
            }
        }
    }

    function swapTokensToToken(uint256 tokenAmount, address to) private {
        address[] memory path = new address[](2);
        path[0] = address(usdtToken);
        path[1] = address(k8sToken);

        usdtToken.approve(address(pancakeRouter), tokenAmount);
        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            to,
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {  
        k8sToken.approve(address(pancakeRouter), tokenAmount);
        usdtToken.approve(address(pancakeRouter), usdtAmount);
        pancakeRouter.addLiquidity(
            address(k8sToken),
            address(usdtToken),
            tokenAmount,
            usdtAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            address(0),
            block.timestamp
        );
    }

    function earned(address account) public view returns (uint256) {
        return
            accountComputing[account]
                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))
                .div(1e18)
                .add(rewards[account]);
    }

    function rewardPerToken() public view returns (uint256) {
        if (totalComputing == 0) {
            return rewardPerComputingStored;
        }
        return
            rewardPerComputingStored.add(
                    block.timestamp
                    .sub(lastUpdateTime)
                    .mul(rewardRate)
                    .mul(1e18)
                    .div(totalComputing)
            );
    }

    function getCurPrice(address _tokenAddress) public view returns(uint _price){
        address t0 = IPancakePair(pancakePair).token0();
        (uint r0,uint r1,) = IPancakePair(pancakePair).getReserves();
        if( r0 > 0 && r1 > 0 ){
             if( t0 == address(_tokenAddress)){
                _price = r1 * 10 ** 18 / r0;
            }else{
                _price = r0 * 10 ** 18 / r1;
            }   
        }
    }

    function getAccountAchievement(address account) public view returns(InviterMap memory inviterMaps) {
        inviterMaps = accountInvterAchievement[account];
    }

    function isBuyNode(address account) public view returns(bool) {
        return isNode[account];
    }
}