// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract COURSERA is IBEP20 {
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 public override totalSupply;
    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    address private feeAddress = 0x6f9f32BF67257d062f7B1e0Ca1C2F924Fd7bA5B3;
    uint256 private feePercentage = 250; // Represents 2.5% fee

    constructor() {
        name = "COURSERA";
        symbol = "CSRA";
        totalSupply = 10000000 * 10**decimals; // Total supply of 10,000,000 tokens
        balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function balanceOf(address account) external view override returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        uint256 feeAmount = (amount * feePercentage) / 10000;
        uint256 transferAmount = amount - feeAmount;

        require(balances[msg.sender] >= amount, "Insufficient balance");
        require(recipient != address(0), "Invalid recipient address");

        balances[msg.sender] -= amount;
        balances[recipient] += transferAmount;
        balances[feeAddress] += feeAmount;

        emit Transfer(msg.sender, recipient, transferAmount);
        emit Transfer(msg.sender, feeAddress, feeAmount);

        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        uint256 feeAmount = (amount * feePercentage) / 10000;
        uint256 transferAmount = amount - feeAmount;

        require(balances[sender] >= amount, "Insufficient balance");
        require(allowances[sender][msg.sender] >= amount, "Not allowed to transfer");

        balances[sender] -= amount;
        balances[recipient] += transferAmount;
        balances[feeAddress] += feeAmount;
        allowances[sender][msg.sender] -= amount;

        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, feeAddress, feeAmount);

        return true;
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        allowances[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);

        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return allowances[owner][spender];
    }
}