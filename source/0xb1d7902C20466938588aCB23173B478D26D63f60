{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue\u0027s index to valueIndex\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"},"Gulag.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"./IBEP20.sol\";\nimport \"./Address.sol\";\nimport \"./Ownable.sol\";\nimport \"./EnumerableSet.sol\";\nimport \"./PancakeRouterV2.sol\";\n\ncontract Gulag is IBEP20, Context, Ownable {\n    using Address for address;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    struct Winner {\n        address winner;\n        uint256 amount;\n        uint256 timestamp;\n    }\n\n    event SwapAutoLiquidity(uint256 tokens, uint256 bnb);\n    event LotteryWinner(Winner winner);\n    event Burn(uint256 amount);\n\n    mapping (address =\u003e uint256) private _prisoners;\n    mapping (address =\u003e uint256) private _balances;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    string private _name = \u0027Gulag Finance\u0027;\n    string private _symbol = \u0027GULAG\u0027;\n    uint8 private _decimals = 8;\n    uint256 private _totalSupply = 18 * 10**6 * 10**8;\n\n    address public pancakePair;\n    IPancakeRouter02 private immutable _pancakeRouter;\n\n    uint256 public lotteryHold;\n    uint256 public nextLotteryDate;\n    Winner[] public lotteryWinners;\n    bool public lotteryEnabled = true;\n    EnumerableSet.AddressSet private _lotteryParticipants;\n\n    uint256 public liquidityHold;\n    uint256 public liquidityReleaseTime;\n    address public liquidityTokenAddress;\n    uint256 public minSwapTokensDivider = 5;\n    \n    uint256 private immutable _balanceLimit = _totalSupply * 5 / 100;\n    uint256 private constant _burnFeePercent = 1;\n    uint256 private constant _liquidityFeePercent = 2;\n    uint256 private constant _lotteryFeePercent = 3;\n\n    bool private _isRunningLottery;\n    modifier lockTheLottery {\n        _isRunningLottery = true;\n        _;\n        _isRunningLottery = false; \n    }\n\n    bool private _isSwappingLiquidity;\n    modifier lockTheSwap {\n        _isSwappingLiquidity = true;\n        _;\n        _isSwappingLiquidity = false;\n    }\n\n    constructor () {\n        _balances[_msgSender()] = _totalSupply;\n        emit Transfer(address(0), _msgSender(), _totalSupply);\n\n        // Pancake Router Address\n        _pancakeRouter = IPancakeRouter02(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);\n\n        nextLotteryDate = block.timestamp + 1 days;\n        liquidityReleaseTime = block.timestamp + 180 days;\n    }\n\n    // IBEP20\n\n    function getOwner() external view override returns (address) {\n        return owner();\n    }\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) external view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address _owner, address spender) external view override returns (uint256) {\n        return _allowances[_owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance \u003e= amount, \"GULAG: transfer amount exceeds allowance\");\n\n        _approve(sender, _msgSender(), currentAllowance - amount);\n        return true;\n    }\n\n    // IBEP20 - Helpers\n\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance \u003e= subtractedValue, \"GULAG: decreased allowance below zero\");\n\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        return true;\n    }\n\n    // Getters\n    \n    function lotteryWinnersLength() public view returns (uint256) {\n        return lotteryWinners.length;\n    }\n\n    function liquidityTokenBalance() public view returns (uint256) {\n        return IPancakeERC20(liquidityTokenAddress).balanceOf(address(this));\n    }\n\n    function bnbBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n    \n    // External\n\n    receive() external payable {}\n    fallback() external payable {}\n\n    // Private\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"GULAG: approve from the zero address\");\n        require(spender != address(0), \"GULAG: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        require(sender != address(0), \"GULAG: transfer from the zero address\");\n        require(recipient != address(0), \"GULAG: transfer to the zero address\");\n\n        bool isInternalTransaction = sender == address(this) || recipient == address(this);\n        bool isLiquidityTransaction = (sender == pancakePair \u0026\u0026 recipient == address(_pancakeRouter)) || (recipient == pancakePair \u0026\u0026 sender == address(_pancakeRouter));\n        bool isMarketingTransaction = sender == owner() || recipient == owner();\n\n        if (amount == 0 || isInternalTransaction || isLiquidityTransaction || isMarketingTransaction) {\n            _executeTransfer(sender, recipient, amount);\n        } else {\n            _gulagTransfer(sender, recipient, amount);\n        }\n    }\n\n    function _gulagTransfer(address sender, address recipient, uint256 amount) private {\n        bool isSellTransaction = recipient == pancakePair || recipient == address(_pancakeRouter);\n        bool isBuyTransaction = sender == pancakePair || sender == address(_pancakeRouter);\n\n        bool transactionsAllowed = pancakePair != address(0) || sender == owner() || recipient == owner();\n        require(transactionsAllowed, \"GULAG: logic disabled\");\n\n        if (isSellTransaction || isBuyTransaction) {\n            if (block.timestamp \u003e= nextLotteryDate \u0026\u0026 lotteryEnabled \u0026\u0026 !_isRunningLottery) {\n                _drawLotteryWinner();\n            }\n\n            uint256 threshold = _balanceLimit / minSwapTokensDivider;\n            if (liquidityHold \u003e threshold \u0026\u0026 !_isSwappingLiquidity) {\n                _swapAutoLiquidity();\n            }\n        }\n\n        if (isSellTransaction) {\n            _sell(sender, recipient, amount);\n        } else if (isBuyTransaction) {\n            _buy(sender, recipient, amount);\n        } else {\n            _executeTransfer(sender, recipient, amount);\n        }\n\n        if (isBuyTransaction) {\n            _prisoners[recipient] = block.timestamp;\n            _lotteryParticipants.add(recipient);\n        }\n    }\n\n    function _executeTransfer(address sender, address recipient, uint256 amount) private {        \n        uint256 senderBalance = _balances[sender];\n        require(senderBalance \u003e= amount, \"GULAG: transfer amount exceeds balance\");\n\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _sell(address sender, address recipient, uint256 amount) private {\n        uint256 freeDate = _prisoners[sender] + 1 days;\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp \u003e= freeDate, \"GULAG: transfer restricted from prisoners\");\n\n        uint256 finalAmount = amount;\n\n        uint256 liquidityTokens = _calculateFee(amount, _liquidityFeePercent);\n        finalAmount -= liquidityTokens;\n\n        uint256 lotteryTokens = _calculateFee(amount, _lotteryFeePercent);\n        finalAmount -= lotteryTokens;\n\n        uint256 senderBalance = _balances[sender];\n        uint256 dumpThreshold = _totalSupply * 4 / 100;\n        if (senderBalance \u003e dumpThreshold) {\n            require(amount \u003c= senderBalance / 2, \"GULAG: whales can sell only 50% of their balance at a time\");\n        }\n\n        require(senderBalance \u003e= amount, \"GULAG: transfer amount exceeds balance\");\n\n        _lotteryParticipants.remove(sender);\n        lotteryHold += lotteryTokens;\n        liquidityHold += liquidityTokens;\n        _balances[address(this)] += liquidityTokens + lotteryTokens;\n\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += finalAmount;\n\n        emit Transfer(sender, recipient, finalAmount);\n    }\n\n    function _buy(address sender, address recipient, uint256 amount) private {\n        uint256 currentBalance = _balances[recipient];\n        require(currentBalance + amount \u003c= _balanceLimit, \"GULAG: transfer restricted from whales. You can\u0027t buy more after holding 5%\");\n\n        uint256 finalAmount = amount;\n        \n        uint256 liquidityTokens = _calculateFee(amount, _liquidityFeePercent);\n        finalAmount -= liquidityTokens;\n\n        uint256 tokensToBeBurnt = _calculateFee(amount, _burnFeePercent);\n        finalAmount -= tokensToBeBurnt;\n        \n        uint256 senderBalance = _balances[sender];\n        require(senderBalance \u003e= amount, \"GULAG: transfer amount exceeds balance\");\n\n        liquidityHold += liquidityTokens;\n        _balances[address(this)] += liquidityTokens;\n\n        _totalSupply -= tokensToBeBurnt;\n        \n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += finalAmount;\n\n        emit Transfer(sender, recipient, finalAmount);\n    }\n\n    function _drawLotteryWinner() private lockTheLottery {\n        require(lotteryHold \u003c= _balances[address(this)], \"GULAG: transfer amount exceeds balance\");\n\n        if (lotteryHold \u003e 0) {\n            uint256 randomIndex = _random(_lotteryParticipants.length());\n            address winnerAddress = _lotteryParticipants.at(randomIndex);\n            _lotteryParticipants.remove(winnerAddress);\n\n            Winner memory lotteryWinner = Winner(winnerAddress, lotteryHold, block.timestamp);\n            lotteryWinners.push(lotteryWinner);\n\n            _balances[winnerAddress] += lotteryHold;\n            _balances[address(this)] -= lotteryHold;\n            lotteryHold = 0;\n            nextLotteryDate = block.timestamp + 1 days;\n\n            emit LotteryWinner(lotteryWinner);\n        }\n    }\n\n    function _swapAutoLiquidity() private lockTheSwap {\n        uint256 half = liquidityHold / 2;\n\n        uint256 initialBNBBalance = address(this).balance;\n        _swapGulagForBNB(half);\n        uint256 newBalance = address(this).balance - initialBNBBalance;\n        \n        uint256 gulagTransferFee = _calculateFee(half, 1);\n        half -= gulagTransferFee;\n        \n        uint256 bnbTransferFee = _calculateFee(newBalance, 1);\n        newBalance -= bnbTransferFee;\n        \n        _addLiquidity(half, newBalance);\n        liquidityHold = 0;\n        emit SwapAutoLiquidity(half, newBalance);\n    }\n\n    function _swapGulagForBNB(uint256 amount) private {\n        _approve(address(this), address(_pancakeRouter), amount);\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = _pancakeRouter.WETH();\n\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function _addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\n        _approve(address(this), address(_pancakeRouter), tokenAmount);\n        \n        _pancakeRouter.addLiquidityETH{value: bnbAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function _calculateFee(uint256 amount, uint256 percent) private pure returns (uint256) {\n        uint256 fee = amount * percent / 100;\n        return fee;\n    }\n\n    function _random(uint256 limit) private view returns (uint256) {\n        uint256 random = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp))) % limit;\n        return random;\n    }\n\n    // Maintenance\n    \n    function setPancakePair(address pair) public onlyOwner {\n        pancakePair = pair;\n    }\n    \n    function runLottery() public onlyOwner {\n        _drawLotteryWinner();\n    }\n    \n    function setLotteryEnabled(bool isEnabled) public onlyOwner {\n        lotteryEnabled = isEnabled;\n    }\n\n    function increaseLotteryPot(uint256 amount) public onlyOwner {\n        lotteryHold += amount;\n    }\n    \n    function addAddressToLotteryParticipants(address account) public onlyOwner {\n        _lotteryParticipants.add(account);\n    }\n\n    function removeAddressFromLotteryParticipants(address account) public onlyOwner {\n        _lotteryParticipants.remove(account);\n    }\n    \n    function swapLiquidityHoldToLiquidity() public onlyOwner {\n        _swapAutoLiquidity();\n    }\n    \n    function setMinSwapTokensDivider(uint256 divider) public onlyOwner {\n        minSwapTokensDivider = divider;\n    }\n    \n    function setLiquidityTokenAddress(address liquidityTokenAddress_) public onlyOwner {\n        liquidityTokenAddress = liquidityTokenAddress_;\n    }\n\n    function setLiquidityReleaseTime(uint256 releaseTime) public onlyOwner {\n        require(releaseTime \u003e liquidityReleaseTime, \"GULAG: release time cannot be decreased\");\n        liquidityReleaseTime = releaseTime;\n    }\n\n    function releaseLiquidityTokens() public onlyOwner {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp \u003e= liquidityReleaseTime, \"GULAG: current time is before release time\");\n\n        IPancakeERC20 liquidityToken = IPancakeERC20(liquidityTokenAddress);\n        uint256 amount = liquidityToken.balanceOf(address(this));\n\n        liquidityToken.transfer(owner(), amount);\n    }\n\n    function releaseGulagTransferFee() public onlyOwner {\n        uint256 amount = _balances[address(this)] - lotteryHold - liquidityHold;\n        _executeTransfer(address(this), owner(), amount);\n    }\n    \n    function releaseBNBTransferFee(uint256 amount) public onlyOwner {\n        (bool sent,) = owner().call{value: amount}(\"\");\n        require(sent, \"GULAG: failed to send BNB\");\n    }\n}\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface IBEP20 {\n  function totalSupply() external view returns (uint256);\n  function decimals() external view returns (uint8);\n  function symbol() external view returns (string memory);\n  function name() external view returns (string memory);\n  function getOwner() external view returns (address);\n  function balanceOf(address account) external view returns (uint256);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n  function allowance(address _owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"PancakeRouterV2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface IPancakeERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n\ninterface IPancakeRouter01 {\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"}}