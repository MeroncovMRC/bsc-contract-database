/*
FAIR LAUNCH - RoboBUSD Coin - Fork of RoboDoge Coin - Ready to MOON hard
Liquidity lock for one year

If you miss RoboDoge Coin then don't miss this chance again.
- Anti dip system
- Anti hard dumping
- Just hold and earn BUSD

NO RUG NO SCAM 
- Contract provide before launch

Total suplly: 1,000,000,000,000
Max wallet: 20,000,000,000 (2%)
Tax Buy: 12%
Tax Sell: 15%

+ Fork of RoboDoge Coin (50ml mc now)
+ Receive 5% BUSD
+ Automatically receive the reward every 3 hours (to reduce the gas)
+ Burn every transaction to make it more value 
+ Anti dump: Can sell maximum 7% of total token everyday
* For the first 3 days after buying, the tax for selling will be 30%, after that tax sell will go back to normal (15%)
+ Lottery everyday. 
* You will not able to join this lottery if you sell token within that day

Telegram: https://t.me/RoboBUSD
Twitter: https://twitter.com/RoboBUSD
Earning Dashboard: Comming Soon

*/

//SPDX-License-Identifier: MIT

pragma solidity ^0.7.6;


library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

/**
 * BEP20 standard interface.
 */
interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * Allows for contract ownership along with multi-address authorization
 */
abstract contract Auth {
    address internal owner;
    mapping (address => bool) internal authorizations;

    constructor(address _owner) {
        owner = _owner;
        authorizations[_owner] = true;
    }

    /**
     * Function modifier to require caller to be contract owner
     */
    modifier onlyOwner() {
        require(isOwner(msg.sender), "!OWNER"); _;
    }

    /**
     * Function modifier to require caller to be authorized
     */
    modifier authorized() {
        require(isAuthorized(msg.sender), "!AUTHORIZED"); _;
    }

    /**
     * Authorize address. Owner only
     */
    function authorize(address adr) public onlyOwner {
        authorizations[adr] = true;
    }

    /**
     * Remove address' authorization. Owner only
     */
    function unauthorize(address adr) public onlyOwner {
        authorizations[adr] = false;
    }

    /**
     * Check if address is owner
     */
    function isOwner(address account) public view returns (bool) {
        return account == owner;
    }

    /**
     * Return address' authorization status
     */
    function isAuthorized(address adr) public view returns (bool) {
        return authorizations[adr];
    }

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    function transferOwnership(address payable adr) public onlyOwner {
        owner = adr;
        authorizations[adr] = true;
        emit OwnershipTransferred(adr);
    }

    event OwnershipTransferred(address owner);
}

interface IDEXFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IDEXRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IDividendDistributor {
    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;
    function setShare(address shareholder, uint256 amount) external;
    function deposit() external payable;
    function process(uint256 gas) external;
}

contract RoboBUSDDistributor is IDividendDistributor{
    using SafeMath for uint256;

    address public _token;

    struct Share {
        uint256 amount;
        uint256 totalExcluded;
        uint256 totalRealised;
    }

    address WBNB;
    IBEP20 BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    IDEXRouter router;

    address[] shareholders;
    mapping (address => uint256) shareholderIndexes;
    mapping (address => uint256) shareholderClaims;

    mapping (address => Share) shares;

    uint256 totalShares;
    uint256 totalDividends;
    uint256 totalDistributed;
    uint256 dividendsPerShare;
    uint256 dividendsPerShareAccuracyFactor = 10 ** 36;

    uint256 minPeriod = 3 hours;
    uint256 minDistribution = 1 * (10 ** 9);

    uint256 currentIndex;

    bool initialized;
    modifier initialization() {
        require(!initialized);
        _;
        initialized = true;
    }

    modifier onlyToken() {
        require(msg.sender == _token); _;
    }

    constructor (address _router) {
        router = IDEXRouter(_router);
        WBNB = router.WETH();
        _token = msg.sender;
    }

    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {
        minPeriod = _minPeriod;
        minDistribution = _minDistribution;
    }

    function setShare(address shareholder, uint256 amount) external override onlyToken {
        if(shares[shareholder].amount > 0){
            distributeDividend(shareholder);
        }

        if(amount > 0 && shares[shareholder].amount == 0){
            addShareholder(shareholder);
        }else if(amount == 0 && shares[shareholder].amount > 0){
            removeShareholder(shareholder);
        }

        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);
        shares[shareholder].amount = amount;
        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
    }

    function deposit() external payable override onlyToken {
        uint256 balanceBefore = BUSD.balanceOf(address(this));

        address[] memory path = new address[](2);
        path[0] = WBNB;
        path[1] = address(BUSD);

        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amount = BUSD.balanceOf(address(this)).sub(balanceBefore);

        totalDividends = totalDividends.add(amount);
        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));
    }

    function process(uint256 gas) external override onlyToken {
        uint256 shareholderCount = shareholders.length;

        if(shareholderCount == 0) { return; }

        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;

        while(gasUsed < gas && iterations < shareholderCount) {
            if(currentIndex >= shareholderCount){
                currentIndex = 0;
            }

            if(shouldDistribute(shareholders[currentIndex])){
                distributeDividend(shareholders[currentIndex]);
            }

            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
    }
    
    function shouldDistribute(address shareholder) internal view returns (bool) {
        return shareholderClaims[shareholder] + minPeriod < block.timestamp
                && getUnpaidEarnings(shareholder) > minDistribution;
    }

    function distributeDividend(address shareholder) internal {
        if(shares[shareholder].amount == 0){ return; }

        uint256 amount = getUnpaidEarnings(shareholder);
        if(amount > 0){
            totalDistributed = totalDistributed.add(amount);
            BUSD.transfer(shareholder, amount);
            shareholderClaims[shareholder] = block.timestamp;
            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);
            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
        }
    }
  
    function claimDividend(address shareholder) external {
        distributeDividend(shareholder);
    }

    function getUnpaidEarnings(address shareholder) public view returns (uint256) {
        if(shares[shareholder].amount == 0){ return 0; }

        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);
        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;

        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }

        return shareholderTotalDividends.sub(shareholderTotalExcluded);
    }

    function getCumulativeDividends(uint256 share) internal view returns (uint256) {
        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);
    }

    function addShareholder(address shareholder) internal {
        shareholderIndexes[shareholder] = shareholders.length;
        shareholders.push(shareholder);
    }

    function removeShareholder(address shareholder) internal {
        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];
        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];
        shareholders.pop();
    }
    
    function totalDividendsDistributed() public view returns(uint256){
        return totalDistributed;    
    }
    
    function getAccount(address _account)
        public view returns (
            address account,
            int256 index,
            int256 iterationsUntilProcessed,
            uint256 withdrawableDividends,
            uint256 totalDividends,
            uint256 lastClaimTime,
            uint256 nextClaimTime,
            uint256 secondsUntilAutoClaimAvailable) {
        account = _account;        

        int256 holderLength = int256(shareholders.length);
        int256 currentIndexRunning = int256(currentIndex);

        index = int256(shareholderIndexes[account]);
        iterationsUntilProcessed = -1;

        if(index >= 0) {
            if(uint256(index) > currentIndex) {
                iterationsUntilProcessed = index - currentIndexRunning;
            }
            else {
                int256 processesUntilEndOfArray = holderLength > currentIndexRunning ?
                                                        holderLength - currentIndexRunning : 0;

                iterationsUntilProcessed = index + processesUntilEndOfArray;
            }
        }

        withdrawableDividends = getUnpaidEarnings(account);
        totalDividends = getCumulativeDividends(shares[account].amount);
        lastClaimTime = shareholderClaims[account];
        nextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(minPeriod) : 0;
        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ? nextClaimTime.sub(block.timestamp) : 0;
    }
}

contract RoboBUSD is IBEP20, Auth {
    using SafeMath for uint256;

	struct FeeSet {
		uint256 reflectionFee;
		uint256 marketingFee;
		uint256 liquidityFee;
		uint256 burnFee;
		uint256 totalFee;
	}
	
    struct UserInfo {
        uint256 firstSellTime;
        uint256 amountSpent;
        uint256 spendLimit;
        uint256 firstBuyTime;
    }

    string constant _name = "RoboBUSD";
    string constant _symbol = "RoboBUSD";
    uint8 constant _decimals = 9;

    uint256 public _totalSupply = 1000000000000 * (10 ** _decimals);
    uint256 public _maxWalletToken = (_totalSupply * 2) / 100; //2% of total supply

    mapping (address => uint256) _balances;
    mapping (address => mapping (address => uint256)) _allowances;

    mapping (address => bool) isFeeExempt;
    mapping (address => bool) isTxLimitExempt;
    mapping (address => bool) isAntiDumpExempt;
    mapping (address => bool) isDividendExempt;
    mapping (address => bool) isBlacklisted;
    mapping (address => uint256) lastAttempt;

    FeeSet buyFees;
	FeeSet sellFees;
    uint256 feeDenominator  = 100;

    address public autoLiquidityReceiver;
    address public marketingFeeReceiver;

    IDEXRouter router;
    address pair;

    bool tradingOpen;
    uint256 launchAt;

    RoboBUSDDistributor public distributor;
    uint256 public distributorGas = 500000;

    bool swapDividendEnabled = true;
    uint256 public swapThreshold = _totalSupply / 3000; // 0.033% of supply
    bool inSwap;

    uint256 public rule = 7; // Can sell maximum 7% everyday
    uint256 public restrictionDuration = 24 hours; // Can sell maximum 7% everyday
    /*
        If you sell your token within the first 3 days, you need to pay extra tax 30% (earlySellingFee)
        After 3 days, your tax for selling will be back to normal (15%)
    */
    uint256 public earlyTimeFrame = 3 days; 
    uint256 public earlySellingFee = 23; // Extra tax if you sell within the first 3 days

    mapping(address => UserInfo) public userInfos;
    bool public forceEop = true;

    address WBNB;
    address DEAD = 0x000000000000000000000000000000000000dEaD;
    address ZERO = 0x0000000000000000000000000000000000000000;
    IBEP20 BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    
    modifier swapping() { inSwap = true; _; inSwap = false; }
    
    constructor () Auth(msg.sender) {
        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        WBNB = router.WETH();
        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));
        _allowances[address(this)][address(router)] = uint256(-1);
        
        distributor = new RoboBUSDDistributor(address(router));

        autoLiquidityReceiver = msg.sender;
        marketingFeeReceiver = msg.sender;
        
        isFeeExempt[autoLiquidityReceiver] = true;
        isFeeExempt[address(this)] = true;
        isFeeExempt[address(distributor)] = true;

        isTxLimitExempt[autoLiquidityReceiver] = true;
        isTxLimitExempt[address(DEAD)] = true;
        isTxLimitExempt[address(this)] = true;
        
        isAntiDumpExempt[address(this)] = true;
        isAntiDumpExempt[autoLiquidityReceiver] = true;
        isAntiDumpExempt[pair] = true;
        
        isDividendExempt[pair] = true;
        isDividendExempt[address(router)] = true;
        isDividendExempt[address(this)] = true;
        isDividendExempt[DEAD] = true;
        isDividendExempt[ZERO] = true;

		setBuyFees(4, 4, 2, 2);
		setSellFees(5, 5, 3, 2);
		
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }
    function _transferFrom(address sender, address recipient, uint256 amount) private returns (bool){
        if(inSwap){ return _basicTransfer(sender, recipient, amount); }
        
        if(!authorizations[sender] && !authorizations[recipient]){
            if(!tradingOpen){
                if(launchAt > 0 && launchAt <= block.timestamp)
                    tradingOpen = true;
                require(tradingOpen);
            }
            
            if (sender == pair){
                uint256 currentBalance = balanceOf(recipient);
                require((currentBalance + amount) <= _maxWalletToken);
            }
            
            else if(forceEop && !isAntiDumpExempt[sender]){
                (bool isAntiDumping, string memory errorMessage) = enforceAntiDumping(sender, amount);
                require(isAntiDumping, errorMessage);
            }
        }

        if(shouldSwapBack()){ swapBack(); }
        
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;
        _balances[recipient] = _balances[recipient].add(amountReceived);

        if(!isDividendExempt[sender]) {
            try distributor.setShare(sender, _balances[sender]) {} catch {}
        }

        if(!isDividendExempt[recipient]) {
            try distributor.setShare(recipient, _balances[recipient]) {} catch {} 
        }

        try distributor.process(distributorGas) {} catch {}

        emit Transfer(sender, recipient, amountReceived);
        return true;
    }
    
    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {
        if(isFeeExempt[sender] || isFeeExempt[recipient])
            return false;
        return true;
    }
    
    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {
    	uint256 finalFee = sender == pair ? buyFees.totalFee : sellFees.totalFee;
        
        if(sender == pair){
            //Anti Sniper Bot, first 2 blocks
            if(block.number - launchAt < 3) {
                finalFee = 99;
            }
            else if(userInfos[recipient].firstBuyTime == 0) {
                userInfos[recipient].firstBuyTime = block.timestamp;
            }
        }
        
        /*
            After you buy RoboBUSD there is a minimum time frame for holding (It is 3 days by default)
            If you decide to sell token within 3 days after you buy, You will need to pay an extra tax 
            It is 30% by default (Check the "earlySellingFee")
            
            After 3 days, Tax will go back to normal
        */
        else if(block.timestamp <= userInfos[sender].firstBuyTime + earlyTimeFrame){
            finalFee = earlySellingFee;
        }
        
        uint256 feeAmount = amount.mul(finalFee).div(feeDenominator);
        
        uint256 burnFee = amount.mul(buyFees.burnFee).div(feeDenominator);
        if(burnFee > 0){
            feeAmount = feeAmount.add(burnFee);
            _totalSupply = _totalSupply.sub(burnFee);
            emit Transfer(sender, DEAD, burnFee);
        }
        
        _balances[address(this)] = _balances[address(this)].add(feeAmount);
        emit Transfer(sender, address(this), feeAmount);
        
        return amount.sub(feeAmount);
    }

    function shouldSwapBack() internal view returns (bool) {
        return msg.sender != pair 
        && !inSwap
        && swapDividendEnabled
        && _balances[address(this)] >= swapThreshold;
    }

    function swapBack() internal swapping {
        uint256 totalFee = buyFees.totalFee;
        uint256 swapAmount = _balances[address(this)];
        
        uint256 dynamicLiquidityFee = buyFees.liquidityFee;
        uint256 amountToLiquify = swapAmount.mul(dynamicLiquidityFee).div(totalFee).div(2);
        uint256 amountToSwap = swapAmount.sub(amountToLiquify);

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = WBNB;

        uint256 balanceBefore = address(this).balance;

        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amountToSwap,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amountBNB = address(this).balance.sub(balanceBefore);
        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));
        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);
        uint256 amountBNBReflection = amountBNB.mul(buyFees.reflectionFee).div(totalBNBFee);
        uint256 amountBNBMarketing = amountBNB.mul(buyFees.marketingFee).div(totalBNBFee);

        try distributor.deposit{value: amountBNBReflection}() {} catch {}
        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}("");

        if(amountToLiquify > 0){
            router.addLiquidityETH{value: amountBNBLiquidity}(
                address(this),
                amountToLiquify,
                0,
                0,
                autoLiquidityReceiver,
                block.timestamp
            );
            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);
        }
    }

    /*
        This is where the Anti-Dump of RoboDoge Coin come in
        You only can sell maximum 7% of your token everyday (Check the "Rule" variable for exact percentage)
        You can't send or sell after you reach that limit
    */
    function enforceAntiDumping(address sender, uint256 amount) private returns (bool, string memory) {
        UserInfo storage userInfo = userInfos[sender];
        uint256 balance = balanceOf(sender);

        if (block.timestamp > userInfo.firstSellTime + restrictionDuration) {
            uint256 spendLimit = balance.mul(rule).div(feeDenominator);
            userInfo.amountSpent = 0;
            userInfo.firstSellTime = block.timestamp;
            userInfo.spendLimit = spendLimit;
        }

        if (userInfo.amountSpent.add(amount) > userInfo.spendLimit) 
                return (false, "Amount exceeds spend limit");
            
        userInfo.amountSpent = userInfo.amountSpent.add(amount);       
        return (true, "");
    }
    
    /*
        This is one of the improvement I said before 
        We will show you exact HOW MUCH you can sell everyday 
        This is what RoboDoge Coin don't have
    */
    function amountCanSell(address sender) public view returns (uint256){
        UserInfo storage userInfo = userInfos[sender];
        return userInfo.spendLimit == 0 ? _balances[sender].mul(rule).div(feeDenominator) : userInfo.spendLimit - userInfo.amountSpent;
    }
    
    function sendBNBBackToMarketing(uint256 amountPercentage) external onlyOwner {
        uint256 amountBNB = address(this).balance;
        payable(marketingFeeReceiver).transfer(amountBNB * amountPercentage / 100);
    }

    function setIsDividendExempt(address holder, bool exempt) external authorized {
        require(holder != address(this) && holder != pair);
        isDividendExempt[holder] = exempt;
        if(exempt){
            distributor.setShare(holder, 0);
        }else{
            distributor.setShare(holder, _balances[holder]);
        }
    }

    function setIsFeeExempt(address holder, bool exempt) external authorized {
        isFeeExempt[holder] = exempt;
    }

    function setIsTxLimitExempt(address holder, bool exempt) external authorized {
        isTxLimitExempt[holder] = exempt;
    }

    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver) external onlyOwner {
        autoLiquidityReceiver = _autoLiquidityReceiver;
        marketingFeeReceiver = _marketingFeeReceiver;
    }

    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {
        swapDividendEnabled = _enabled;
        swapThreshold = _amount;
    }

    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorized {
        distributor.setDistributionCriteria(_minPeriod, _minDistribution);
    }

    function setAntiDumpSetting(uint256 _rule, uint256 _restrictionDuration, uint256 _earlyTimeFrame, uint256 _earlySellingFee) public onlyOwner{
        rule = _rule;
        restrictionDuration = _restrictionDuration;
        earlyTimeFrame = _earlyTimeFrame;
        earlySellingFee = _earlySellingFee;
    }   
    
    function setDistributorSettings(uint256 gas) external authorized {
        require(gas <= 700000);
        distributorGas = gas;
    }

    function updateLaunchTime(uint256 time) external onlyOwner{
        launchAt = time;
    }
    
    function getAccountDividendsInfo(address account)
        external view returns (
            address,
            int256,
            int256,
            uint256,
            uint256,
            uint256,
            uint256,
            uint256) {
        return distributor.getAccount(account);
    }
    
    function getTotalDividendsDistributed() external view returns (uint256) {
        return distributor.totalDividendsDistributed();
    }
    
    function claim() public {
        distributor.claimDividend(msg.sender);
    }
    
    function toggleForceEop() public onlyOwner{
        forceEop = !forceEop;    
    }
    
    function forceDividend() public onlyOwner{
        if(!inSwap){
            swapBack();
            try distributor.process(distributorGas) {} catch {}
        }
    }
    
    function setBuyFees(uint256 _reflectionFee, uint256 _marketingFee, uint256 _liquidityFee, uint256 _burnFee) public authorized {
		buyFees = FeeSet({
			reflectionFee: _reflectionFee,
			marketingFee: _marketingFee,
			liquidityFee: _liquidityFee,
			burnFee: _burnFee,
			totalFee: _reflectionFee + _marketingFee + _liquidityFee
		});
		require(buyFees.totalFee < feeDenominator / 4);
	}

	function setSellFees(uint256 _reflectionFee, uint256 _marketingFee, uint256 _liquidityFee, uint256 _burnFee) public authorized {
		sellFees = FeeSet({
			reflectionFee: _reflectionFee,
			marketingFee: _marketingFee,
			liquidityFee: _liquidityFee,
			burnFee: _burnFee,
			totalFee: _reflectionFee + _marketingFee + _liquidityFee
		});
		require(sellFees.totalFee < feeDenominator / 4);
	}
	
    function airdropWinnerCompetition(address from, address[] calldata addresses, uint256 tokens) external authorized {
        uint256 totalAirdropToken = addresses.length * tokens;
    
        require(balanceOf(from) >= totalAirdropToken, "Not enough tokens to airdrop");
    
        for(uint i=0; i < addresses.length; i++){
            _basicTransfer(from,addresses[i],tokens);
            if(!isDividendExempt[addresses[i]]) {
                try distributor.setShare(addresses[i], _balances[addresses[i]]) {} catch {} 
            }
        }
    
        if(!isDividendExempt[from]) {
            try distributor.setShare(from, _balances[from]) {} catch {}
        }
    }
    
    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);

    receive() external payable { }

    function totalSupply() external view override returns (uint256) { return _totalSupply; }
    function decimals() external pure override returns (uint8) { return _decimals; }
    function symbol() external pure override returns (string memory) { return _symbol; }
    function name() external pure override returns (string memory) { return _name; }
    function getOwner() external view override returns (address) { return owner; }
    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        return _transferFrom(msg.sender, recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        if(_allowances[sender][msg.sender] != uint256(-1)){
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, "Insufficient Allowance");
        }
        return _transferFrom(sender, recipient, amount);
    }
}