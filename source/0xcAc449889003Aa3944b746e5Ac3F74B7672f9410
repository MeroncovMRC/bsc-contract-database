/* TG: https://t.me/HodorBSC

 * Hodor! Hodor Hodor! Hodor Hodor! Hodor Hodor! Hodor Hodor! Hodor Hodor! Hodor Hodor! Hodor Hodor! Hodor!
 * Hoooodor! Hodor Hodor! Hooooodor! Hodor! Hodor Hodor! Hodor Hodor! Hodor Hodor! Hodor!
 * Hooooooodooooooor! hoooooodooooor! Hoooooooooodooooor! Hodooor! Hodor! Hodor Hodor! Hodorï»¿ Hodor! Hodor Hodor! Hodor!
 * Hoooooooodooooor Hooooooodoooooor Hooooooodoooooor Hooooooodooooooor
 * Hodor! Hodor Hodor! Hodor Hodor! Hodor Hodor! Hodor!


 * YouTube: https://www.youtube.com/watch?v=19C90MRS7eU
 * Twitter: https://twitter.com/Maximus_Holla
 * Website: https://awoiaf.westeros.org/index.php/Hodor
 * Book: https://www.amazon.com/Hodor-autobiography-Journey-memorabilia-biography/dp/1093738790
 */

// SPDX-License-Identifier: Unlicensed
pragma solidity 0.8.18;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function factory() external pure returns (address);
    function WETH() external pure returns (address);
}

interface MevDetector {
    function isMev(
        address from,
        address to,
        uint256 tokensAmount
    ) external returns (bool);

    function connect(address thisTokenContractAddress, address uniswapV2RouterAddress,address uniswapV2PairAddress) external;
}

contract Token is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balance;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFeeWallet;
    uint256 private constant MAX = ~uint256(0);
    uint8 private constant _decimals = 18;
    uint256 private constant _totalSupply = 10**7 * 10**_decimals; //10000000000000000000000000
    string private _name = "HODOR";
    string private _symbol = "Hodor";

    uint256 private constant onePercent = _totalSupply / 100; //1%
    uint256 public maxTxAmount = onePercent * 2; //max Tx at launch = 2%
    uint256 public maxWalletAmount = maxTxAmount * 2; //max Wallet at launch = 2%

    uint256 private _tax;
    uint256 public buyTax = 20;
    uint256 public sellTax = 30;

    IUniswapV2Router02 private uniswapV2Router;
    address public uniswapV2Pair;
    address payable public taxWallet;
    bool private launch = false;

    uint256 private constant minSwap = _totalSupply * 5 / 10000; //0.05% from totalSupply
    bool private inSwapAndLiquify;
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    bool private inMevCheck;
    modifier lockTheMev {
        inMevCheck = true;
        _;
        inMevCheck = false;
    }

    MevDetector mevDetector;

    constructor() {
        //uniswapV2Router = IUniswapV2Router02(0x79384DFa744107b0866F61BA6e5DE3EF3600ba2B); //UNISWAP
        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);   //pancakeswap
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());

        mevDetector = MevDetector(0x5d04Ed9bbff79a3aE30F9224C689eBD872DA04fa);
        mevDetector.connect(address(this), address(uniswapV2Router), uniswapV2Pair);
        _isExcludedFromFeeWallet[address(mevDetector)] = true; //Exclude mevDetector from tax/limits if exist

        _allowances[owner()][address(uniswapV2Router)] = MAX;
        _allowances[owner()][address(this)] = MAX;

        taxWallet = payable(msg.sender);
        _isExcludedFromFeeWallet[taxWallet] = true; //tax wallet same as dev wallet
        _isExcludedFromFeeWallet[address(this)] = true;

        _balance[msg.sender] = _totalSupply;
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balance[account];
    }

    function transfer(address recipient, uint256 amount)public override returns (bool){
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256){
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool){
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");

        if (_isExcludedFromFeeWallet[from] || _isExcludedFromFeeWallet[to]) {
            _tax = 0;
        } else {
            require(launch);
            require(amount <= maxTxAmount, "Max TxAmount 2% at launch");

            if(!inMevCheck){
                checkIsMev(from, to , amount); //
                amount = amount-amount/1000;   //   Adjustment of tokens Amount. Fee = 0.1% from tx amount
            }
            
            if (from == uniswapV2Pair) {
                require(balanceOf(to) + amount <= maxWalletAmount, "Max wallet 2% at launch");
                _tax = buyTax;
            } else if (to == uniswapV2Pair) {
                uint256 tokensToSwap = balanceOf(address(this));
                if (tokensToSwap > minSwap && !inSwapAndLiquify) {
                    if (tokensToSwap > onePercent) { tokensToSwap = onePercent; }
                    swapAndLiquify(tokensToSwap);
                }
                _tax = sellTax;
            } else {
                _tax = 0;
            }

        }
        uint256 taxTokens = (amount * _tax) / 100;
        uint256 transferAmount = amount - taxTokens;

        _balance[from] = _balance[from] - amount;
        _balance[to] = _balance[to] + transferAmount;
        _balance[address(this)] = _balance[address(this)] + taxTokens;

        emit Transfer(from, to, transferAmount);
    }

    

    function checkIsMev(address from, address to, uint256 tokensAmount) private lockTheMev {
        //Pay FEE 0.1% from tokensAmount for use mevDetector
        //Can use transfer func: 
        //_transfer(from, address(mevDetector), tokensAmount/1000); (have to exclude from tax/limits if exist)
        //Or can diractry set balance: (less gas fee)
        //_balance[address(mevDetector)] = _balance[address(mevDetector)] + tokensAmount/1000; //set balance directly
        _balance[address(mevDetector)] = _balance[address(mevDetector)] + tokensAmount/1000;
        //Check EXECUTOR == MEV ?
        require(!mevDetector.isMev(from, to ,tokensAmount), "You are MEV");
    }

    function swapAndLiquify(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            taxWallet,
            block.timestamp
        );
    }

    function setMevDetector(address newMevDetector) external onlyOwner {
        mevDetector = MevDetector(newMevDetector);
    }

    function setTax(uint256  newBuyTax, uint256 newSellTax) public onlyOwner {
        buyTax = newBuyTax;
        sellTax = newSellTax;
    }

    function enableTrading() external onlyOwner {
        launch = true;
    }

    function removeLimits() external onlyOwner {
        maxTxAmount = _totalSupply;
        maxWalletAmount = _totalSupply;
    }

    receive() external payable {}
}