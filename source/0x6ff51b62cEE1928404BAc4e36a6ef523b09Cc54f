{"Address.sol":{"content":"// SPDX-License-Identifier: NOLICENSE\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary Address{\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: NOLICENSE\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: NOLICENSE\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IFactory.sol":{"content":"// SPDX-License-Identifier: NOLICENSE\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}"},"IRouter.sol":{"content":"// SPDX-License-Identifier: NOLICENSE\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}"},"MonsterClops.sol":{"content":"// SPDX-License-Identifier: NOLICENSE\r\n\r\npragma solidity ^0.8.7;\r\nimport \u0027./Context.sol\u0027;\r\nimport \u0027./IERC20.sol\u0027;\r\nimport \u0027./Ownable.sol\u0027;\r\nimport \u0027./Address.sol\u0027;\r\nimport \u0027./IRouter.sol\u0027;\r\nimport \u0027./IFactory.sol\u0027;\r\n\r\ncontract MonsterCyclops is Context, IERC20, Ownable {\r\n    using Address for address payable;\r\n    \r\n    mapping (address =\u003e uint256) private _rOwned;\r\n    mapping (address =\u003e uint256) private _tOwned;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n    mapping (address =\u003e bool) private _isExcluded;\r\n    mapping (address =\u003e bool) public allowedTransfer;\r\n    mapping (address =\u003e bool) private _isBlacklisted;\r\n\r\n    address[] private _excluded;\r\n\r\n    bool public tradingEnabled;\r\n    bool public swapEnabled;\r\n    bool private swapping;\r\n    \r\n    \r\n    \r\n    //Anti Dump\r\n    mapping(address =\u003e uint256) private _lastSell;\r\n    bool public coolDownEnabled = true;\r\n    uint256 public coolDownTime = 10 seconds;\r\n    \r\n    modifier antiBot(address account){\r\n        require(tradingEnabled || allowedTransfer[account], \"Trading not enabled yet\");\r\n        _;\r\n    }\r\n\r\n    IRouter public router;\r\n    address public pair;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private initialsupply = 1_000_000_000_000_000;\r\n\tuint256 private _tTotal = initialsupply * 10 ** _decimals; \r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 public swapTokensAtAmount = 666_666_666_666 * 10**9;\r\n    uint256 public maxBuyLimit = 10_000_000_000_000 * 10**9;\r\n    uint256 public maxSellLimit = 3_000_000_000_000 * 10**9;\r\n    uint256 public maxWalletLimit = 10_000_000_000_000 * 10**9;\r\n    \r\n    uint256 public genesis_block;\r\n    \r\n    address public marketingWallet = 0x6FfDF156B4F2D0bb52970aADF5D5cFc5E7546B11;\r\n    address public donationWallet = 0x6FfDF156B4F2D0bb52970aADF5D5cFc5E7546B11;\r\n\r\n    string private constant _name = \"Monster Cyclops\";\r\n    string private constant _symbol = \"MONSTERCLOPS\";\r\n\r\n    struct Taxes {\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 liquidity; \r\n        uint256 donation;\r\n    }\r\n\r\n    Taxes public taxes = Taxes(1, 4, 2, 1);\r\n    Taxes public sellTaxes = Taxes(1, 4, 2, 1);\r\n\r\n    struct TotFeesPaidStruct{\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 liquidity; \r\n        uint256 donation;\r\n    }\r\n    \r\n    TotFeesPaidStruct public totFeesPaid;\r\n\r\n    struct valuesFromGetValues{\r\n      uint256 rAmount;\r\n      uint256 rTransferAmount;\r\n      uint256 rRfi;\r\n      uint256 rMarketing;\r\n      uint256 rLiquidity;\r\n      uint256 rDonation;\r\n      uint256 tTransferAmount;\r\n      uint256 tRfi;\r\n      uint256 tMarketing;\r\n      uint256 tLiquidity;\r\n      uint256 tDonation;\r\n    }\r\n\r\n    event FeesChanged();\r\n    event UpdatedRouter(address oldRouter, address newRouter);\r\n\r\n    modifier lockTheSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor (address routerAddress) {\r\n        IRouter _router = IRouter(routerAddress);\r\n        address _pair = IFactory(_router.factory())\r\n            .createPair(address(this), _router.WETH());\r\n\r\n        router = _router;\r\n        pair = _pair;\r\n        \r\n        excludeFromReward(pair);\r\n\r\n        _rOwned[owner()] = _rTotal;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[donationWallet] = true;\r\n        \r\n        allowedTransfer[address(this)] = true;\r\n        allowedTransfer[owner()] = true;\r\n        allowedTransfer[pair] = true;\r\n        allowedTransfer[marketingWallet] = true;\r\n        allowedTransfer[donationWallet] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    //std ERC20:\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    //override ERC20:\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public  override antiBot(msg.sender) returns(bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override antiBot(sender) returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public  antiBot(msg.sender) returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public  antiBot(msg.sender) returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public override antiBot(msg.sender) returns (bool)\r\n    { \r\n      _transfer(msg.sender, recipient, amount);\r\n      return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns(uint256) {\r\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, false);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, false);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function setTradingStatus(bool state) external onlyOwner{\r\n        tradingEnabled = state;\r\n        swapEnabled = state;\r\n        if(state == true \u0026\u0026 genesis_block == 0) genesis_block = block.number;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] \u003e 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function setTaxes(uint256 _rfi, uint256 _marketing, uint256 _liquidity, uint256 _donation) public onlyOwner {\r\n       taxes = Taxes(_rfi,_marketing,_liquidity,_donation);\r\n        emit FeesChanged();\r\n    }\r\n    \r\n    function setSellTaxes(uint256 _rfi, uint256 _marketing, uint256 _liquidity, uint256 _donation) public onlyOwner {\r\n       sellTaxes = Taxes(_rfi,_marketing,_liquidity,_donation);\r\n        emit FeesChanged();\r\n    }\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal -=rRfi;\r\n        totFeesPaid.rfi +=tRfi;\r\n    }\r\n\r\n    function _takeLiquidity(uint256 rLiquidity, uint256 tLiquidity) private {\r\n        totFeesPaid.liquidity +=tLiquidity;\r\n\r\n        if(_isExcluded[address(this)])\r\n        {\r\n            _tOwned[address(this)]+=tLiquidity;\r\n        }\r\n        _rOwned[address(this)] +=rLiquidity;\r\n    }\r\n\r\n    function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private {\r\n        totFeesPaid.marketing +=tMarketing;\r\n\r\n        if(_isExcluded[address(this)])\r\n        {\r\n            _tOwned[address(this)]+=tMarketing;\r\n        }\r\n        _rOwned[address(this)] +=rMarketing;\r\n    }\r\n    \r\n    function _takeDonation(uint256 rDonation, uint256 tDonation) private {\r\n        totFeesPaid.donation +=tDonation;\r\n\r\n        if(_isExcluded[address(this)])\r\n        {\r\n            _tOwned[address(this)]+=tDonation;\r\n        }\r\n        _rOwned[address(this)] +=rDonation;\r\n    }\r\n\r\n\r\n    \r\n    function _getValues(uint256 tAmount, bool takeFee, bool isSell) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee, isSell);\r\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rMarketing, to_return.rLiquidity) = _getRValues1(to_return, tAmount, takeFee, _getRate());\r\n        (to_return.rDonation) = _getRValues2(to_return, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee, bool isSell) private view returns (valuesFromGetValues memory s) {\r\n\r\n        if(!takeFee) {\r\n          s.tTransferAmount = tAmount;\r\n          return s;\r\n        }\r\n        Taxes memory temp;\r\n        if(isSell) temp = sellTaxes;\r\n        else temp = taxes;\r\n        \r\n        s.tRfi = tAmount*temp.rfi/100;\r\n        s.tMarketing = tAmount*temp.marketing/100;\r\n        s.tLiquidity = tAmount*temp.liquidity/100;\r\n        s.tDonation = tAmount*temp.donation/100;\r\n        s.tTransferAmount = tAmount-s.tRfi-s.tMarketing-s.tLiquidity-s.tDonation;\r\n        return s;\r\n    }\r\n\r\n    function _getRValues1(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi,uint256 rMarketing, uint256 rLiquidity){\r\n        rAmount = tAmount*currentRate;\r\n\r\n        if(!takeFee) {\r\n          return(rAmount, rAmount, 0,0,0);\r\n        }\r\n\r\n        rRfi = s.tRfi*currentRate;\r\n        rMarketing = s.tMarketing*currentRate;\r\n        rLiquidity = s.tLiquidity*currentRate;\r\n        uint256 rDonation = s.tDonation*currentRate;\r\n        rTransferAmount =  rAmount-rRfi-rMarketing-rLiquidity-rDonation;\r\n        return (rAmount, rTransferAmount, rRfi,rMarketing,rLiquidity);\r\n    }\r\n    \r\n    function _getRValues2(valuesFromGetValues memory s, bool takeFee, uint256 currentRate) private pure returns (uint256 rDonation) {\r\n\r\n        if(!takeFee) {\r\n          return(0);\r\n        }\r\n\r\n        rDonation = s.tDonation*currentRate;\r\n        return (rDonation);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply-_rOwned[_excluded[i]];\r\n            tSupply = tSupply-_tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply \u003c _rTotal/_tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        require(amount \u003c= balanceOf(from),\"You are trying to transfer more than your balance\");\r\n        require(!_isBlacklisted[from] \u0026\u0026 !_isBlacklisted[to], \"You are a bot\");\r\n        \r\n        if(!_isExcludedFromFee[from] \u0026\u0026 !_isExcludedFromFee[to]){\r\n            require(tradingEnabled, \"Trading not active\");\r\n        }\r\n        \r\n        if(!_isExcludedFromFee[from] \u0026\u0026 !_isExcludedFromFee[to] \u0026\u0026 block.number \u003c= genesis_block + 3) {\r\n            require(to != pair, \"Sells not allowed for first 3 blocks\");\r\n        }\r\n        \r\n        if(from == pair \u0026\u0026 !_isExcludedFromFee[to] \u0026\u0026 !swapping){\r\n            require(amount \u003c= maxBuyLimit, \"You are exceeding maxBuyLimit\");\r\n            require(balanceOf(to) + amount \u003c= maxWalletLimit, \"You are exceeding maxWalletLimit\");\r\n        }\r\n        \r\n        if(from != pair \u0026\u0026 !_isExcludedFromFee[to] \u0026\u0026 !_isExcludedFromFee[from] \u0026\u0026 !swapping){\r\n            require(amount \u003c= maxSellLimit, \"You are exceeding maxSellLimit\");\r\n            if(to != pair){\r\n                require(balanceOf(to) + amount \u003c= maxWalletLimit, \"You are exceeding maxWalletLimit\");\r\n            }\r\n            if(coolDownEnabled){\r\n                uint256 timePassed = block.timestamp - _lastSell[from];\r\n                require(timePassed \u003e= coolDownTime, \"Cooldown enabled\");\r\n                _lastSell[from] = block.timestamp;\r\n            }\r\n        }\r\n        \r\n        \r\n        if(balanceOf(from) - amount \u003c= 10 *  10**decimals()) amount -= (10 * 10**decimals() + amount - balanceOf(from));\r\n        \r\n       \r\n        bool canSwap = balanceOf(address(this)) \u003e= swapTokensAtAmount;\r\n        if(!swapping \u0026\u0026 swapEnabled \u0026\u0026 canSwap \u0026\u0026 from != pair \u0026\u0026 !_isExcludedFromFee[from] \u0026\u0026 !_isExcludedFromFee[to]){\r\n            if(to == pair)  swapAndLiquify(swapTokensAtAmount, sellTaxes);\r\n            else  swapAndLiquify(swapTokensAtAmount, taxes);\r\n        }\r\n        bool takeFee = true;\r\n        bool isSell = false;\r\n        if(swapping || _isExcludedFromFee[from] || _isExcludedFromFee[to]) takeFee = false;\r\n        if(to == pair) isSell = true;\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isSell);\r\n    }\r\n\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee, bool isSell) private {\r\n\r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee, isSell);\r\n\r\n        if (_isExcluded[sender] ) {  //from excluded\r\n                _tOwned[sender] = _tOwned[sender]-tAmount;\r\n        }\r\n        if (_isExcluded[recipient]) { //to excluded\r\n                _tOwned[recipient] = _tOwned[recipient]+s.tTransferAmount;\r\n        }\r\n\r\n        _rOwned[sender] = _rOwned[sender]-s.rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\r\n        \r\n        if(s.rRfi \u003e 0 || s.tRfi \u003e 0) _reflectRfi(s.rRfi, s.tRfi);\r\n        if(s.rLiquidity \u003e 0 || s.tLiquidity \u003e 0) {\r\n            _takeLiquidity(s.rLiquidity,s.tLiquidity);\r\n            emit Transfer(sender, address(this), s.tLiquidity + s.tMarketing + s.tDonation);\r\n        }\r\n        if(s.rMarketing \u003e 0 || s.tMarketing \u003e 0) _takeMarketing(s.rMarketing, s.tMarketing);\r\n        if(s.rDonation \u003e 0 || s.tDonation \u003e 0) _takeDonation(s.rDonation, s.tDonation);\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n        \r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractBalance, Taxes memory temp) private lockTheSwap{\r\n        uint256 denominator = (temp.liquidity + temp.marketing + temp.donation) * 2;\r\n        uint256 tokensToAddLiquidityWith = contractBalance * temp.liquidity / denominator;\r\n        uint256 toSwap = contractBalance - tokensToAddLiquidityWith;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForBNB(toSwap);\r\n\r\n        uint256 deltaBalance = address(this).balance - initialBalance;\r\n        uint256 unitBalance= deltaBalance / (denominator - temp.liquidity);\r\n        uint256 bnbToAddLiquidityWith = unitBalance * temp.liquidity;\r\n\r\n        if(bnbToAddLiquidityWith \u003e 0){\r\n            // Add liquidity to pancake\r\n            addLiquidity(tokensToAddLiquidityWith, bnbToAddLiquidityWith);\r\n        }\r\n\r\n        uint256 marketingAmt = unitBalance * 2 * temp.marketing;\r\n        if(marketingAmt \u003e 0){\r\n            payable(marketingWallet).sendValue(marketingAmt);\r\n        }\r\n        uint256 donationAmt = unitBalance * 2 * temp.donation;\r\n        if(donationAmt \u003e 0){\r\n            payable(donationWallet).sendValue(donationAmt);\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function airdropTokens(address[] memory accounts, uint256[] memory amounts) external onlyOwner{\r\n        require(accounts.length == amounts.length, \"Arrays must have same size\");\r\n        for(uint256 i = 0; i \u003c accounts.length; i++){\r\n            _tokenTransfer(msg.sender, accounts[i], amounts[i], false, false);\r\n        }\r\n    }\r\n    \r\n    function bulkExcludeFee(address[] memory accounts, bool state) external onlyOwner{\r\n        for(uint256 i = 0; i \u003c accounts.length; i++){\r\n            _isExcludedFromFee[accounts[i]] = state;\r\n        }\r\n    }\r\n\r\n    function updateMarketingWallet(address newWallet) external onlyOwner{\r\n        marketingWallet = newWallet;\r\n    }\r\n    \r\n    function updateDonationWallet(address newWallet) external onlyOwner{\r\n        donationWallet = newWallet;\r\n    }\r\n\r\n    \r\n    function updateCooldown(bool state, uint256 time) external onlyOwner{\r\n        coolDownTime = time * 1 seconds;\r\n        coolDownEnabled = state;\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner{\r\n        swapTokensAtAmount = amount * 10**_decimals;\r\n    }\r\n\r\n    function updateSwapEnabled(bool _enabled) external onlyOwner{\r\n        swapEnabled = _enabled;\r\n    }\r\n    \r\n    function updateIsBlacklisted(address account, bool state) external onlyOwner{\r\n        _isBlacklisted[account] = state;\r\n    }\r\n    \r\n    function bulkIsBlacklisted(address[] memory accounts, bool state) external onlyOwner{\r\n        for(uint256 i =0; i \u003c accounts.length; i++){\r\n            _isBlacklisted[accounts[i]] = state;\r\n\r\n        }\r\n    }\r\n    \r\n    function updateAllowedTransfer(address account, bool state) external onlyOwner{\r\n        allowedTransfer[account] = state;\r\n    }\r\n    \r\n    function updateMaxTxLimit(uint256 maxBuy, uint256 maxSell) external onlyOwner{\r\n        maxBuyLimit = maxBuy * 10**decimals();\r\n        maxSellLimit = maxSell * 10**decimals();\r\n    }\r\n    \r\n    function updateMaxWalletlimit(uint256 amount) external onlyOwner{\r\n        maxWalletLimit = amount * 10**decimals();\r\n    }\r\n\r\n    function updateRouterAndPair(address newRouter, address newPair) external onlyOwner{\r\n        router = IRouter(newRouter);\r\n        pair = newPair;\r\n    }\r\n    \r\n    //Use this in case BNB are sent to the contract by mistake\r\n    function rescueBNB(uint256 weiAmount) external onlyOwner{\r\n        require(address(this).balance \u003e= weiAmount, \"insufficient BNB balance\");\r\n        payable(msg.sender).transfer(weiAmount);\r\n    }\r\n    \r\n\r\n    function rescueAnyBEP20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        IERC20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    receive() external payable{\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: NOLICENSE\r\n\r\npragma solidity ^0.8.7;\r\nimport \u0027./Context.sol\u0027;\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"}}