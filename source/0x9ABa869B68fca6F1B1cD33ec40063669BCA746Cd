/**
 *Submitted for verification at BscScan.com on 2021-12-05
*/

pragma solidity ^0.8.7;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract Ownable {
    address public _owner;

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function changeOwner(address newOwner) public onlyOwner {
        _owner = newOwner;
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}
contract SKF_TOKEN is IERC20, Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) private _rOwned;
    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) public _isExcludedFromFee;
    mapping(address => bool) public _isExcludedToFee;
    uint256 private constant MAX = ~uint256(0);
    string private _name = "Sparks Of Fire";
    string private _symbol = "SKF";
    uint256 private _decimals = 8;
    uint256 private _tTotal= 2000000 * 10**_decimals;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;

    

    uint256 public _previousTaxFee;
	uint256 public min_total = 50000 * 10**_decimals;
    SKF_PLEDGE public  _Abonus =SKF_PLEDGE(payable(0x6AD396053d30a2899B65B196f4Ca36f7b6E9061c));
	address public _bigbang=0x978092cc862746681AA378c71420991749a12bC6;
	address public _destroy=0x00000000000000000000000000000000000000eD;
	
	uint256 public _Abonus_rate = 5;
	uint256 public _bigbang_rate = 2;
	uint256 public _destroy_rate = 5;
	
    constructor() {
        address tokenOwner = msg.sender;         
        _rOwned[address(this)] = _rTotal;        //exclude owner and this contract from fee
        _isExcludedFromFee[tokenOwner] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedToFee[tokenOwner]=true;
        _isExcludedToFee[address(this)] = true;
        _owner = tokenOwner;
		sys.bonusRate=100000000;//分红比例设为1
		sys.lastAddress = _destroy;
		_isExcludedToFee[address(_Abonus)]=true;
		_isExcludedFromFee[_bigbang]=true;
		_isExcludedToFee[_bigbang]=true;
		
        emit Transfer(address(0), tokenOwner, _tTotal);
    }
    function set_abonus_address(address _bonusAddress)public onlyOwner{
        _Abonus = SKF_PLEDGE(payable(_bonusAddress));
		_isExcludedToFee[_bonusAddress]=true;
    }
	function set_bigbang_address(address _bigbangAddress)public onlyOwner{
        _bigbang = _bigbangAddress;
		_isExcludedFromFee[_bigbangAddress]=true;
		_isExcludedToFee[_bigbangAddress]=true;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function tokenFromReflection(uint256 rAmount)
        public
        view
        returns (uint256)
    {
        require(
            rAmount <= _rTotal,
            "Amount must be less than total reflections"
        );
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }
    function excludeFromFee(address account,bool value) public onlyOwner {
        _isExcludedFromFee[account] = value;
    }
    function excludeToFee(address account,bool value) public onlyOwner {
        _isExcludedToFee[account] = value;
    }
    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function claimTokens() public onlyOwner {
        payable(_owner).transfer(address(this).balance);
    }


    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        //indicates if fee should be deducted from transfer
        bool takeFee = true;

        //if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFromFee[from] || _isExcludedToFee[to]) {
            takeFee = false;
        }

        //transfer amount, it will take tax, burn, liquidity fee
        _tokenTransfer(from, to, amount, takeFee);
    }

    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        bool takeFee
    ) private {
        uint256 currentRate = _getRate();
        uint256 rAmount = tAmount.mul(currentRate);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);

        uint256 rate;
        if (takeFee) {
            _Abonus.InputToken(tAmount.div(100).mul(_Abonus_rate + _bigbang_rate),_Abonus_rate,_bigbang_rate);
            _takeFee(sender,address(_Abonus),tAmount.div(100).mul(_Abonus_rate),currentRate);
			_takeFee(sender,_bigbang,tAmount.div(100).mul(_bigbang_rate),currentRate);
			if(_tTotal.sub(balanceOf(_destroy))>min_total)
                _takeFee(sender,_destroy,tAmount.div(100).mul(_destroy_rate),currentRate);            
				rate = _Abonus_rate + _bigbang_rate +_destroy_rate;
        }
        uint256 recipientRate = 100 - rate;
        _rOwned[recipient] = _rOwned[recipient].add(
            rAmount.div(100).mul(recipientRate)
        );
        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));
    }

    function _takeFee(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 currentRate
    ) private {
        uint256 rAmount = tAmount.mul(currentRate);
        _rOwned[recipient] = _rOwned[recipient].add(rAmount);
        emit Transfer(sender, recipient, tAmount);
    }

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    function _takeLiquidity(uint256 tLiquidity) private {
        uint256 currentRate = _getRate();
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
    }
    mapping(uint256 =>address) public unionMapping;
    function setMappingAddress(uint256 unionIndex,address unionAddress)public onlyOwner{
        unionMapping[unionIndex]=unionAddress;
    }
    function mappingToken(address _from,address _to,uint256 _value)public onlyMapping{
        _transfer(_from,_to,_value);
    }
	function mappingTokenNoTax(address _from,address _to,uint256 _value)public onlyMapping{
	    _tokenTransfer(_from,_to,_value,false);
	}
	struct USER{
		uint256 id;
		uint256 basic;
		uint256 token;
	}
	struct SYSTEM{
		uint256 pepoleCount;
		uint256 basicTotal;
		uint256 bonusRate;
		uint256 bigbang;
		address lastAddress;
		uint256 lastTime;
	}
	mapping(address =>USER) public users;
	mapping(uint256 =>address)public user_id;
	SYSTEM public sys;
	modifier onlyMapping() {
	    for(uint256 i=1;unionMapping[i]!=address(0x0);i++){
	        if(unionMapping[i] == msg.sender){
	            _;
	            return;
	        }
	    }
	    require(false,"Must be joint contract");
	}
	function set_id_address(uint256 id,address ad)public onlyMapping{user_id[id]=ad;}
	function set_sys_pepoleCount(uint256 value)public onlyMapping{sys.pepoleCount = value;}
	function set_sys_basicTotal(uint256 value)public onlyMapping{sys.basicTotal = value;}
	function set_sys_bonusRate(uint256 value)public onlyMapping{sys.bonusRate = value;}
	function set_sys_bigbang(uint256 value)public onlyMapping{sys.bigbang = value;}
	function set_sys_lastAddress(address value)public onlyMapping{sys.lastAddress = value;}
	function set_sys_lastTime(uint256 value)public onlyMapping{sys.lastTime = value;}
	function get_sys_pepoleCount()public view returns(uint256){return sys.pepoleCount;}
	function get_sys_basicTotal()public view returns(uint256){return sys.basicTotal;}
	function get_sys_bonusRate()public view returns(uint256){return sys.bonusRate;}
	function get_sys_bigbang()public view returns(uint256){return sys.bigbang;}
	function get_sys_lastAddress()public view returns(address){return sys.lastAddress;}
	function get_sys_lastTime()public view returns(uint256){return sys.lastTime;}
	function set_user_id(address ad, uint256 value)public onlyMapping{users[ad].id=value;}
	function set_user_basic(address ad, uint256 value)public onlyMapping{users[ad].basic=value;}
	function set_user_token(address ad, uint256 value)public onlyMapping{users[ad].token=value;}
	function get_user_id(address ad)public view returns(uint256){return users[ad].id;}
	function get_user_basic(address ad)public view returns(uint256){return users[ad].basic;}
	function get_user_token(address ad)public view returns(uint256){return users[ad].token;}
}

contract SKF_PLEDGE{
    using SafeMath for uint256;
    SKF_TOKEN public Token = SKF_TOKEN(payable(0x9ABa869B68fca6F1B1cD33ec40063669BCA746Cd));
	address private admin;
	uint256 public max_bigbang_time = 7200;
    constructor() {	
		admin = msg.sender;
    }
    receive() external payable {}
	function setToken(address addr)public{
		require(msg.sender == admin,'must be admin');
		Token = SKF_TOKEN(payable(addr));
	}
	function pledge(uint256 token)public {
		require(token >= 100000000,'Must be greater than 1');
		Token.mappingToken(msg.sender,address(this),token);
		pledge_private(msg.sender,token);
	}
	function mapping_pledge(
				address ad1,uint256 token1,
				address ad2,uint256 token2,
				address ad3,uint256 token3,
				address ad4,uint256 token4,
				address ad5,uint256 token5
			)public{
		require(msg.sender == admin,'only admin');
		pledge_private(ad1,token1);
		pledge_private(ad2,token2);
		pledge_private(ad3,token3);
		pledge_private(ad4,token4);
		pledge_private(ad5,token5);
	}
	function pledge_private(address addr,uint256 token)private{
		uint256 id=Token.get_user_id(addr);
		if(id==0){
			id = Token.get_sys_pepoleCount()+1;
			Token.set_id_address(id,addr);
			Token.set_sys_pepoleCount(id);
			Token.set_user_id(addr,id);
		}
		if(block.timestamp.sub(Token.get_sys_lastTime()) > max_bigbang_time){
			uint256 bang = Token.balanceOf(Token._bigbang());
			if(bang >0){
				Token.mappingToken(
					Token._bigbang(),
					Token.get_sys_lastAddress(),
					bang
				);
				Token.set_sys_bigbang(0);
			}
		}
		uint256 rate=Token.get_sys_bonusRate();
		uint256 basic = token.mul(100000000).div(rate) ;
		Token.set_sys_basicTotal(Token.get_sys_basicTotal().add(basic));
		Token.set_user_basic(addr,Token.get_user_basic(addr).add(basic));
		Token.set_user_token(addr,Token.get_user_token(addr).add(token));
		Token.set_sys_lastAddress(addr);
		Token.set_sys_lastTime(block.timestamp);
	}
	function un_pledge()public{
		uint256 basic = Token.get_user_basic(msg.sender) ;
		uint256 token =basic.mul(Token.get_sys_bonusRate()).div(100000000);
		Token.set_sys_basicTotal(Token.get_sys_basicTotal().sub(basic));
		Token.set_user_basic(msg.sender,0);
		Token.set_user_token(msg.sender,0);
		Token.mappingToken(address(this),msg.sender,token);
		if(msg.sender == Token.get_sys_lastAddress()){
			Token.set_sys_lastAddress(Token._destroy());
		}
	}
	function InputToken(uint256 token,uint256 a_rate,uint256 b_rate)public{
		require(msg.sender == address(Token),'only Token contract can call');
		uint256 bonus = token.mul(a_rate).div(a_rate+b_rate);
		uint256 bigbang = token.mul(b_rate).div(a_rate+b_rate);
		uint256 basicTotal=Token.get_sys_basicTotal();
		uint256 rate=Token.get_sys_bonusRate();
		//uint256 total = basicTotal.mul(rate).div(1000000);
		rate = rate.add(bonus.mul(100000000).div(basicTotal));
		Token.set_sys_bonusRate(rate);
		Token.set_sys_bigbang(Token.get_sys_bigbang().add(bigbang));
	}
	function OutputAbonus()public{
		uint256 rate = Token.get_sys_bonusRate();
		uint256 basic = Token.get_user_basic(msg.sender);
		uint256 currToken = basic.mul(rate).div(100000000);
		uint256 pd = Token.get_user_token(msg.sender);
		uint256 bonus;
		if(currToken > pd)bonus= currToken.sub(pd);
		if(bonus > 0){
			basic = pd.mul(100000000).div( rate);
			Token.set_user_basic(msg.sender,basic);
			Token.mappingToken(address(this),msg.sender,bonus);
		}
		
	}
}