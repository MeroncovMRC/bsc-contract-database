pragma solidity ^0.5.0;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface ISwapPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function token0() external view returns (address);
}

contract ETHXTokenHolders {		
	string public name = "ETHX SUPER HOLDER";
	address public owner;
	address public funder;
	// DappToken public dappToken;
	// IERC20 public daiToken;	

	address[] public stakers;
    address public _usdt;
    mapping(address => address) public invitors;

    uint public _superHolderUsdtAmount = 6000 * 10 ** 18;    
    uint public _superHolderUsdtInvitePercent = 10;    

	mapping(address => uint) public stakingBalance;
	mapping(address => bool) public hasStaked;
	mapping(address => bool) public isStaking;
	
	constructor(address USDTAddress) public {
        _usdt = USDTAddress;
		owner = msg.sender;
		funder = msg.sender;

        if(!hasStaked[address(this)]) {
			stakers.push(address(this));
		}
        isStaking[address(this)] = true;
		hasStaked[address(this)] = true;
	}

	/* Stakes Tokens (Deposit): An investor will deposit the DAI into the smart contracts
	to starting earning rewards.
		
	Core Thing: Transfer the DAI tokens from the investor's wallet to this smart contract. */
	function stakeTokens(address invitorAddr) public {		
        address account = msg.sender;
        require(account == tx.origin, "notOrigin");

        require(hasStaked[invitorAddr], "invitorNotExsit");

        address usdt = _usdt;
        IERC20(usdt).transferFrom(account, address(this), _superHolderUsdtAmount * (100 - _superHolderUsdtInvitePercent) / 100);
        IERC20(usdt).transferFrom(account, invitorAddr, _superHolderUsdtAmount * _superHolderUsdtInvitePercent / 100);

		// add user to stakers array *only* if they haven't staked already
		if(!hasStaked[msg.sender]) {
			stakers.push(msg.sender);
		}

		// update stakng status
		isStaking[msg.sender] = true;
		hasStaked[msg.sender] = true;

        invitors[account] = invitorAddr;
	}

    function setUsdtAddress(address usdtAddr) external onlyFunder {	
		_usdt = usdtAddr;
	}

    function setSuperHolderUsdtAmount(uint usdtAmount) external onlyFunder {	
		_superHolderUsdtAmount = usdtAmount;
	}

    function setSuperHolderUsdtInvitePercent(uint usdtPercent) external onlyFunder {	
		_superHolderUsdtInvitePercent = usdtPercent;
	}

    function getInvitor(address addr) external view returns (
        address invitorAddr
    ){		
        invitorAddr = invitors[addr];
    }

	modifier onlyFunder() {
        require(owner == msg.sender || funder == msg.sender, "!Funder");
        _;
    }

	function setFunderWithAddress(address addr) external onlyFunder {	
		funder = addr;
	}

	function claimToken(address token, uint256 amount, address to) external onlyFunder {
        IERC20(token).transfer(to, amount);
    }
}