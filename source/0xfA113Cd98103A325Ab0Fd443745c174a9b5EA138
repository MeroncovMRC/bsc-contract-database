{"BabyMoonarch.sol":{"content":"/**\n// BabyMoonarch with dividends feature in the contract.\n// DIVIDEND YIELD\n// PAID IN MOONARCH! With the auto-claim feature,\n// simply hold BabyMoonarch and you\u0027ll receive Moonarch automatically in your wallet.\n//  ðŸ“± Telegram: https://t.me/BabyMoonarch\n// Are u Ready Astronaut?LFG!!!\n                     .                 ..\u0027,\u0027\u0027\u0027,;;::;;,,,\u0027..                   .                   \n                       ..     ..     .\u0027;;;,,;:clloooddddddoolc:\u0027..       .     ..                   \n                               .  .,::,...\u0027:looddddooooooddddoddoc;,.    .                          \n                               .\u0027:c;.   .:oddoodddooooooooodddooooddl;.                             \n                             .,c:\u0027.    .:ododdooddddooodoooddoddoddddoo:.                           \n                       ..   \u0027cc\u0027       :oddoddoddddddoooooddoodddodoodddo;.    ..                   \n                      ..   ;l,         ;oddddddddddddooooooddddddddoododddc.    ...                 \n                         .::.           .\u0027;cccccloddooooddoollllloooooooodol.                       \n                         ;c.         ...\u0027,:cllllodddoddoodol::;;;;;;;,;:coodc.                      \n                        ,c.      ..:lloooooolllcccccccccclloooooollc:;,\u0027..,co:.                     \n                        \u0027\u0027.      ..::;;::::;,\u0027.....\u0027..\u0027;;;::::::;;:cllool:;;;,.                     \n                       .,\u0027.   .....,;;:cc:;;;,\u0027\u0027.\u0027,,\u0027.,c:cccc:c::;,,\u0027\u0027.,;clol:,.                    \n                      .cl,....    .;c:,,,....................\u0027,;;;:c;. ....\u0027;lo,                    \n                      .;;\u0027.    ....:o:... .,,\u0027\u0027,,,,,,,,,....   ...:oc\u0027\u0027;;,,. .;.                    \n                       ... ..\u0027\u0027\u0027.. ...   .:lcclc;ldolclo:;:.      ... .,,;;..\u0027.                     \n                   .    .......\u0027.     ....,;;;;\u0027.\u0027;;;;:;;;,.          ..\u0027\u0027\u0027....                     \n                        .........   \u0027::c::,,:;;;:;\u0027\u0027;:;;:;,;,. .,\u0027     .......                      \n                        .......... .;;,c;,cl;...\u0027ccc:\u0027..\u0027c:cl:,\u0027:,  ..  .....\u0027..                    \n                       .\u0027\u0027.. .......;;\u0027c,,cl:...,llcc,..,c:c;.;cl;. ... .....,,.                    \n                        \u0027\u0027.....  ...,:;l:;::llcll:,,:llclc;c, .\u0027c,   .....\u0027\u0027.,.   .                 \n                      ......,\u0027......,c:;:cccc:::cc::c:;;:;,c,...:,.   \u0027..\u0027,\u0027.\u0027\u0027                     \n                     .;,.\u0027..,\u0027...  .;l::;cllc:cc:;,;:\u0027.....cc::cl;.. .\u0027..,\u0027,..\u0027.                    \n                   .,;:\u0027.;,.\u0027;......::...,cl:\u0027,c:,.,c;\u0027\u0027\u0027.\u0027c;...:, ..\u0027..,;,;..;;,.                  \n                   .:cl,.,;..,;\u0027....,.   ..\u0027.  .\u0027\u0027...,,\u0027,\u0027...   .......\u0027;\u0027,\u0027.;:\u0027;:,.                \n                   .;loc\u0027.;\u0027..,;\u0027. ....                           .. .,;,,\u0027.,c,.,lo:.               \n                    ;ollc\u0027.   .,;,\u0027.....                       ......;,,\u0027..,:;.\u0027looc\u0027               \n                    \u0027;cooc,. ...,;;,,,,\u0027...                   ...\u0027\u0027\u0027\u0027,\u0027\u0027\u0027.,:\u0027  ;lodl,               \n                    ..:dool;.,:...,,,\u0027,,\u0027\u0027\u0027\u0027...............  ..\u0027\u0027\u0027\u0027\u0027\u0027,,,\u0027\u0027,\u0027  \u0027cddoo:.              \n                     ..coodl,;d:\u0027\u0027.\u0027,;;;,\u0027\u0027\u0027\u0027..........\u0027\u0027,,,\u0027,,...\u0027,,,...,\u0027  \u0027coodoc;.              \n                       .\u0027;:;..;\u0027,,;c,.\u0027cooollllcccccccccc:;;,,\u0027\u0027.\u0027\u0027.. ..\u0027.  .:ooddl;.               \n                          .  .  ..,loc.,oolc::;;;;;;;;,,,,\u0027\u0027....   ....\u0027;\u0027.,:clooo:.                \n                       ,c:,...   ...\u0027;::\u0027,\u0027......    ...............\u0027\u0027,;cclooooooc\u0027                 \n                     ..:dooc\u0027.  ...   ........\u0027;c:,..,::ccccc:\u0027..,:loddddddo:;lc;.                  \n                    ..\u0027coool;.... ...   ..,,,\u0027...;cc\u0027..\u0027\u0027\u0027,\u0027..\u0027:ooodooddooc\u0027.\u0027,,.                   \n                     ..;clc;cl:;,. ..  \u0027;cddoc\u0027....;;...\u0027;,..:ododoooolc;\u0027..\u0027\u0027\u0027\u0027.                   \n                        .\u0027\u0027:ddddl:,.   .;;;:c:;l;  .;......\u0027lolc:;,\u0027\u0027....\u0027,;,.                      \n                          ..,;::lool;.  \u0027,\u0027\u0027:oddc. ....;\u0027 .:ol;\u0027...,,,;;\u0027....                       \n                                ..\u0027co;  .\u0027,\u0027;llo;   .\u0027\u0027,. \u0027:,\u0027...\u0027,\u0027...                             \n                         ..       ..,:.    .ll,.    ..... ..\u0027.                                      \n                                    .\u0027.     .,;.  ..       ..                                       \n                                              .\u0027....                                                \n                                                                                                    \n**/\n\n//SPDX-License-Identifier: UNLICENSED\n\npragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n// File: contracts/IUniswapV2Router02.sol\n\npragma solidity \u003e=0.6.2;\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n// File: contracts/IUniswapV2Factory.sol\n\npragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n// File: contracts/IUniswapV2Pair.sol\n\npragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n// File: contracts/IterableMapping.sol\n\n//\npragma solidity ^0.7.6;\n\nlibrary IterableMapping {\n    // Iterable mapping from address to uint;\n    struct Map {\n        address[] keys;\n        mapping(address =\u003e uint) values;\n        mapping(address =\u003e uint) indexOf;\n        mapping(address =\u003e bool) inserted;\n    }\n\n    function get(Map storage map, address key) public view returns (uint) {\n        return map.values[key];\n    }\n\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\n        if(!map.inserted[key]) {\n            return -1;\n        }\n        return int(map.indexOf[key]);\n    }\n\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\n        return map.keys[index];\n    }\n\n\n\n    function size(Map storage map) public view returns (uint) {\n        return map.keys.length;\n    }\n\n    function set(Map storage map, address key, uint val) public {\n        if (map.inserted[key]) {\n            map.values[key] = val;\n        } else {\n            map.inserted[key] = true;\n            map.values[key] = val;\n            map.indexOf[key] = map.keys.length;\n            map.keys.push(key);\n        }\n    }\n\n    function remove(Map storage map, address key) public {\n        if (!map.inserted[key]) {\n            return;\n        }\n\n        delete map.inserted[key];\n        delete map.values[key];\n\n        uint index = map.indexOf[key];\n        uint lastIndex = map.keys.length - 1;\n        address lastKey = map.keys[lastIndex];\n\n        map.indexOf[lastKey] = index;\n        delete map.indexOf[key];\n\n        map.keys[index] = lastKey;\n        map.keys.pop();\n    }\n}\n// File: contracts/Ownable.sol\n\n//\n\npragma solidity ^0.7.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n// File: contracts/IDividendPayingTokenOptional.sol\n\npragma solidity ^0.7.6;\n\n\n/// @title Dividend-Paying Token Optional Interface\n/// @author Roger Wu (https://github.com/roger-wu)\n/// @dev OPTIONAL functions for a dividend-paying token contract.\ninterface IDividendPayingTokenOptional {\n  /// @notice View the amount of dividend in wei that an address can withdraw.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\n\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\n\n  /// @notice View the amount of dividend in wei that an address has earned in total.\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\n}\n// File: contracts/IDividendPayingToken.sol\n\npragma solidity ^0.7.6;\n\n\n/// @title Dividend-Paying Token Interface\n/// @author Roger Wu (https://github.com/roger-wu)\n/// @dev An interface for a dividend-paying token contract.\ninterface IDividendPayingToken {\n  /// @notice View the amount of dividend in wei that an address can withdraw.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\n  function dividendOf(address _owner) external view returns(uint256);\n\n  /// @notice Distributes ether to token holders as dividends.\n  /// @dev SHOULD distribute the paid ether to token holders as dividends.\n  ///  SHOULD NOT directly transfer ether to token holders in this function.\n  ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\n  function distributeDividends() external payable;\n\n  /// @notice Withdraws the ether distributed to the sender.\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\n  function withdrawDividend() external;\n\n  /// @dev This event MUST emit when ether is distributed to token holders.\n  /// @param from The address which sends ether to this contract.\n  /// @param weiAmount The amount of distributed ether in wei.\n  event DividendsDistributed(\n    address indexed from,\n    uint256 weiAmount\n  );\n\n  /// @dev This event MUST emit when an address withdraws their dividend.\n  /// @param to The address which withdraws ether from this contract.\n  /// @param weiAmount The amount of withdrawn ether in wei.\n  event DividendWithdrawn(\n    address indexed to,\n    uint256 weiAmount\n  );\n}\n\n// File: contracts/DividendPayingToken.sol\n\n//\n\npragma solidity ^0.7.6;\n\nimport \"./ERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SafeMathUint.sol\";\nimport \"./SafeMathInt.sol\";\n\n/// @title Dividend-Paying Token\n/// @author Roger Wu (https://github.com/roger-wu)\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\n///  to token holders as dividends and allows token holders to withdraw their dividends.\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\ncontract DividendPayingToken is ERC20, IDividendPayingToken, IDividendPayingTokenOptional {\n  using SafeMath for uint256;\n  using SafeMathUint for uint256;\n  using SafeMathInt for int256;\n\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\n  // For more discussion about choosing the value of `magnitude`,\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\n  uint256 constant internal magnitude = 2**128;\n\n  uint256 internal magnifiedDividendPerShare;\n  uint256 internal lastAmount;\n\n  address public immutable Dividendstoken = address(0xaf96a19c2DD4a0f6B077D9481fCc8C9102FAa141); //Moonarch\n\n  // About dividendCorrection:\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\n  //   `dividendOf(_user)` should not be changed,\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\n  mapping(address =\u003e int256) internal magnifiedDividendCorrections;\n  mapping(address =\u003e uint256) internal withdrawnDividends;\n\n  uint256 public totalDividendsDistributed;\n\n  constructor(string memory _name, string memory _symbol) public ERC20(_name, _symbol) {\n\n  }\n\n\n  receive() external payable {\n  }\n\n  /// @notice Distributes ether to token holders as dividends.\n  /// @dev It reverts if the total supply of tokens is 0.\n  /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\n  /// About undistributed ether:\n  ///   In each distribution, there is a small amount of ether not distributed,\n  ///     the magnified amount of which is\n  ///     `(msg.value * magnitude) % totalSupply()`.\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\n  ///     (de-magnified) in a distribution can be less than 1 wei.\n  ///   We can actually keep track of the undistributed ether in a distribution\n  ///     and try to distribute it in the next distribution,\n  ///     but keeping track of such data on-chain costs much more than\n  ///     the saved ether, so we don\u0027t do that.\n  function distributeDividends() public override payable {\n    require(totalSupply() \u003e 0);\n\n    if (msg.value \u003e 0) {\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\n        (msg.value).mul(magnitude) / totalSupply()\n      );\n      emit DividendsDistributed(msg.sender, msg.value);\n\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\n    }\n  }\n\n\n  function distributeBusdDividends(uint256 amount) public {\n    require(totalSupply() \u003e 0);\n\n    if (amount \u003e 0) {\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\n        (amount).mul(magnitude) / totalSupply()\n      );\n      emit DividendsDistributed(msg.sender, amount);\n\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\n    }\n  }\n\n  /// @notice Withdraws the ether distributed to the sender.\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\n  function withdrawDividend() public virtual override {\n    _withdrawDividendOfUser(msg.sender);\n  }\n\n  /// @notice Withdraws the ether distributed to the sender.\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\n    if (_withdrawableDividend \u003e 0) {\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\n      emit DividendWithdrawn(user, _withdrawableDividend);\n      bool success = IERC20(Dividendstoken).transfer(user, _withdrawableDividend);\n\n      if(!success) {\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\n        return 0;\n      }\n\n      return _withdrawableDividend;\n    }\n\n    return 0;\n  }\n\n\n  /// @notice View the amount of dividend in wei that an address can withdraw.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\n  function dividendOf(address _owner) public view override returns(uint256) {\n    return withdrawableDividendOf(_owner);\n  }\n\n  /// @notice View the amount of dividend in wei that an address can withdraw.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\n  }\n\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\n    return withdrawnDividends[_owner];\n  }\n\n\n  /// @notice View the amount of dividend in wei that an address has earned in total.\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\n  }\n\n  /// @dev Internal function that transfer tokens from one address to another.\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\n  /// @param from The address to transfer from.\n  /// @param to The address to transfer to.\n  /// @param value The amount to be transferred.\n  function _transfer(address from, address to, uint256 value) internal virtual override {\n    require(false);\n\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\n  }\n\n  /// @dev Internal function that mints tokens to an account.\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\n  /// @param account The account that will receive the created tokens.\n  /// @param value The amount that will be created.\n  function _mint(address account, uint256 value) internal override {\n    super._mint(account, value);\n\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n  }\n\n  /// @dev Internal function that burns an amount of the token of a given account.\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\n  /// @param account The account whose tokens will be burnt.\n  /// @param value The amount that will be burnt.\n  function _burn(address account, uint256 value) internal override {\n    super._burn(account, value);\n\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n  }\n\n  function _setBalance(address account, uint256 newBalance) internal {\n    uint256 currentBalance = balanceOf(account);\n\n    if(newBalance \u003e currentBalance) {\n      uint256 mintAmount = newBalance.sub(currentBalance);\n      _mint(account, mintAmount);\n    } else if(newBalance \u003c currentBalance) {\n      uint256 burnAmount = currentBalance.sub(newBalance);\n      _burn(account, burnAmount);\n    }\n  }\n}\n\n// File: contracts/BabyMoonarch.sol\n\n//\n\npragma solidity ^0.7.6;\n\nimport \"./SafeMath.sol\";\n\ncontract BabyMoonarch is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public immutable uniswapV2Pair;\n\n    address public immutable Dividendstoken = address(0xaf96a19c2DD4a0f6B077D9481fCc8C9102FAa141); //Moonarch\n\n    bool private swapping;\n    bool public buyTransaction;\n\n   BabyMoonarchDividendTracker public dividendTracker;\n\n    address public liquidityWallet;\n\n    uint256 public maxBuyTranscationAmount = 300000000 * (10**18);\n    uint256 public maxSellTransactionAmount = 300000000 * (10**18);\n    uint256 public swapTokensAtAmount = 20000000 * (10**18);\n    uint256 public _maxWalletToken = 1500000000 * (10**18); // 1.5% of total supply\n    \n    mapping(address =\u003e bool) public _isBlacklisted;\n\n    uint256 public ETHRewardsFee;\n    uint256 public liquidityFee;\n    uint256 public marketingFee;\n    uint256 public totalFees;\n    address public _marketingWalletAddress = 0xf600f9364766bccF23f2D7683eB0974A9e1720f8;\n\n    // sells have fees of 12 and 6 (10 * 1.2 and 5 * 1.2)\n    uint256 public immutable sellFeeIncreaseFactor = 100;\n\n    // use by default 300,000 gas to process auto-claiming dividends\n    uint256 public gasForProcessing = 300000;\n\n    address public presaleAddress = address(0);\n\n\n    // //The time Liquidity gets locked at start and prolonged once it gets released\n    uint256 private constant DefaultLiquidityLockTime=7 days;\n\n    // timestamp for when the token can be traded freely on PanackeSwap\n    uint256 public immutable tradingEnabledTimestamp = 1626971460;\n\n    // exlcude from fees and max transaction amount\n    mapping (address =\u003e bool) private _isExcludedFromFees;\n    mapping (address =\u003e bool) private _isWhitelisted;\n    mapping (address =\u003e bool) public _isExcludedMaxSellTransactionAmount;\n\n    // addresses that can make transfers before presale is over\n    mapping (address =\u003e bool) private canTransferBeforeTradingIsEnabled;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping (address =\u003e bool) public automatedMarketMakerPairs;\n\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\n\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\n    event ExcludedMaxSellTransactionAmount(address indexed account, bool isExcluded);\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\n\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event FixedSaleBuy(address indexed account, uint256 indexed amount, bool indexed earlyParticipant, uint256 numberOfBuyers);\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n\n    event SendDividends(\n    \tuint256 tokensSwapped,\n    \tuint256 amount\n    );\n\n    event ProcessedDividendTracker(\n    \tuint256 iterations,\n    \tuint256 claims,\n        uint256 lastProcessedIndex,\n    \tbool indexed automatic,\n    \tuint256 gas,\n    \taddress indexed processor\n    );\n\n    constructor() public ERC20(\"BabyMoonarch\", \"BabyMoon\") {\n        uint256 _ETHRewardsFee = 8;\n        uint256 _liquidityFee = 5;\n        uint256 _marketingFee = 2;\n\n        ETHRewardsFee = _ETHRewardsFee;\n        liquidityFee = _liquidityFee;\n        marketingFee = _marketingFee;\n        totalFees = _ETHRewardsFee.add(_liquidityFee).add(_marketingFee);\n        \n\n    \tdividendTracker = new BabyMoonarchDividendTracker();\n\n    \tliquidityWallet = owner();\n\n\n    \tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n         // Create a uniswap pair for this new token\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2Pair = _uniswapV2Pair;\n\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n\n        // exclude from receiving dividends\n        dividendTracker.excludeFromDividends(address(dividendTracker));\n        dividendTracker.excludeFromDividends(address(this));\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\n        dividendTracker.excludeFromDividends(address(0x000000000000000000000000000000000000dEaD));\n\n\n\n        // exclude from paying fees or having max transaction amount\n        excludeFromFees(liquidityWallet, true);\n        excludeFromFees(address(this), true);\n        excludeFromFees(_marketingWalletAddress, true);\n        \n        _isWhitelisted[_uniswapV2Pair] = true;\n        _isWhitelisted[owner()] = true;\n\n        // enable owner and fixed-sale wallet to send tokens before presales are over\n        canTransferBeforeTradingIsEnabled[owner()] = true;\n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _mint(owner(), 100000000000 * (10**18));\n    }\n\n    receive() external payable {\n\n  \t}\n\n\n  \tfunction whitelistDxSale(address _presaleAddress, address _routerAddress) public onlyOwner {\n  \t    presaleAddress = _presaleAddress;\n  \t    canTransferBeforeTradingIsEnabled[presaleAddress] = true;\n        dividendTracker.excludeFromDividends(_presaleAddress);\n        excludeFromFees(_presaleAddress, true);\n\n  \t    canTransferBeforeTradingIsEnabled[_routerAddress] = true;\n        dividendTracker.excludeFromDividends(_routerAddress);\n        excludeFromFees(_routerAddress, true);\n  \t}\n  \t\n  \tfunction setswapTokensAtAmount(uint256 swapTokensAmount) public onlyOwner {\n        swapTokensAtAmount = swapTokensAmount * (10**18);\n  \t}\n  \t\n    function updateMaxWallet(uint256 maxWallet) public onlyOwner {\n        _maxWalletToken = maxWallet * (10**18);\n    }\n    \n     function updateMaxBuyTranscationAmount(uint256 maxBuy) public onlyOwner {\n        maxBuyTranscationAmount = maxBuy * (10**18);\n    }\n    \n    function updateMaxSellTransactionAmount(uint256 maxSell) public onlyOwner {\n        maxSellTransactionAmount = maxSell * (10**18);\n    }\n    \n    function updateDividendTracker(address newAddress) public onlyOwner {\n        require(newAddress != address(dividendTracker), \"BabyMoonarch: The dividend tracker already has that address\");\n\n        BabyMoonarchDividendTracker newDividendTracker = BabyMoonarchDividendTracker(payable(newAddress));\n\n        require(newDividendTracker.owner() == address(this), \"BabyMoonarch: The new dividend tracker must be owned by the BabyMoonarch token contract\");\n\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\n        newDividendTracker.excludeFromDividends(address(this));\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\n\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\n\n        dividendTracker = newDividendTracker;\n    }\n\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\n        require(newAddress != address(uniswapV2Router), \"BabyMoonarch: The router already has that address\");\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\n        uniswapV2Router = IUniswapV2Router02(newAddress);\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        require(_isExcludedFromFees[account] != excluded, \"BabyMoonarch: Account is already the value of \u0027excluded\u0027\");\n        _isExcludedFromFees[account] = excluded;\n\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\n        for(uint256 i = 0; i \u003c accounts.length; i++) {\n            _isExcludedFromFees[accounts[i]] = excluded;\n        }\n\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\n    }\n\n    function setMarketingWallet(address payable wallet) external onlyOwner{\n        _marketingWalletAddress = wallet;\n    }\n    \n    function setETHRewardsFee(uint256 value) external onlyOwner{\n        ETHRewardsFee = value;\n        totalFees = ETHRewardsFee.add(liquidityFee).add(marketingFee);\n    }\n\n    function setLiquiditFee(uint256 value) external onlyOwner{\n        liquidityFee = value;\n        totalFees = ETHRewardsFee.add(liquidityFee).add(marketingFee);\n    }\n\n    function setMarketingFee(uint256 value) external onlyOwner{\n        marketingFee = value;\n        totalFees = ETHRewardsFee.add(liquidityFee).add(marketingFee);\n\n    }\n    \n    function blacklistAddress(address account, bool value) external onlyOwner{\n        _isBlacklisted[account] = value;\n    }\n    \n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\n        require(pair != uniswapV2Pair, \"BabyMoonarch: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        require(automatedMarketMakerPairs[pair] != value, \"BabyMoonarch: Automated market maker pair is already set to that value\");\n        automatedMarketMakerPairs[pair] = value;\n\n        if(value) {\n            dividendTracker.excludeFromDividends(pair);\n        }\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n    address private _liquidityTokenAddress;\n    //Sets up the LP-Token Address required for LP Release\n    function SetupLiquidityTokenAddress(address liquidityTokenAddress) public onlyOwner{\n        _liquidityTokenAddress=liquidityTokenAddress;\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //Liquidity Lock////////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //the timestamp when Liquidity unlocks\n     uint256 private _liquidityUnlockTime;\n\n    //Sets Liquidity Release to 20% at a time and prolongs liquidity Lock for a Week after Release.\n    //Should be called once start was successful.\n    bool public liquidityRelease20Percent;\n    function TeamlimitLiquidityReleaseTo20Percent() public onlyOwner{\n        liquidityRelease20Percent=true;\n    }\n\n    function TeamUnlockLiquidityInSeconds(uint256 secondsUntilUnlock) public onlyOwner{\n        _prolongLiquidityLock(secondsUntilUnlock+block.timestamp);\n    }\n    function _prolongLiquidityLock(uint256 newUnlockTime) private{\n        // require new unlock time to be longer than old one\n        require(newUnlockTime\u003e_liquidityUnlockTime);\n        _liquidityUnlockTime=newUnlockTime;\n    }\n\n    //Release Liquidity Tokens once unlock time is over\n    function TeamReleaseLiquidity() public onlyOwner {\n        //Only callable if liquidity Unlock time is over\n        require(block.timestamp \u003e= _liquidityUnlockTime, \"Not yet unlocked\");\n\n        IERC20 liquidityToken = IERC20(_liquidityTokenAddress);\n        uint256 amount = liquidityToken.balanceOf(address(this));\n        if(liquidityRelease20Percent)\n        {\n            _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\n            //regular liquidity release, only releases 20% at a time and locks liquidity for another week\n            amount=amount*2/10;\n            liquidityToken.transfer(liquidityWallet, amount);\n        }\n        else\n        {\n            //Liquidity release if something goes wrong at start\n            //liquidityRelease20Percent should be called once everything is clear\n            liquidityToken.transfer(liquidityWallet, amount);\n        }\n    }\n\n\n    function updateLiquidityWallet(address newLiquidityWallet) public onlyOwner {\n        require(newLiquidityWallet != liquidityWallet, \"BabyMoonarch: The liquidity wallet is already this address\");\n        excludeFromFees(newLiquidityWallet, true);\n        emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\n        liquidityWallet = newLiquidityWallet;\n    }\n    function getLiquidityReleaseTimeInSeconds() public view returns (uint256){\n        if(block.timestamp\u003c_liquidityUnlockTime){\n            return _liquidityUnlockTime-block.timestamp;\n        }\n        return 0;\n    }\n\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\n        require(newValue \u003e= 200000 \u0026\u0026 newValue \u003c= 500000, \"BabyMoonarch: gasForProcessing must be between 200,000 and 500,000\");\n        require(newValue != gasForProcessing, \"BabyMoonarch: Cannot update gasForProcessing to same value\");\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\n        gasForProcessing = newValue;\n    }\n\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\n        dividendTracker.updateClaimWait(claimWait);\n    }\n\n    function getClaimWait() external view returns(uint256) {\n        return dividendTracker.claimWait();\n    }\n\n    function getTotalDividendsDistributed() external view returns (uint256) {\n        return dividendTracker.totalDividendsDistributed();\n    }\n\n    function isExcludedFromFees(address account) public view returns(bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function withdrawableDividendOf(address account) public view returns(uint256) {\n    \treturn dividendTracker.withdrawableDividendOf(account);\n  \t}\n\n\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\n\t\treturn dividendTracker.balanceOf(account);\n\t}\n\n    function getAccountDividendsInfo(address account)\n        external view returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256) {\n        return dividendTracker.getAccount(account);\n    }\n\n\tfunction getAccountDividendsInfoAtIndex(uint256 index)\n        external view returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256) {\n    \treturn dividendTracker.getAccountAtIndex(index);\n    }\n\n\tfunction processDividendTracker(uint256 gas) external {\n\t\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\n\t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\n    }\n\n    function claim() external {\n\t\tdividendTracker.processAccount(msg.sender, false);\n    }\n\n    function getLastProcessedIndex() external view returns(uint256) {\n    \treturn dividendTracker.getLastProcessedIndex();\n    }\n\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\n        return dividendTracker.getNumberOfTokenHolders();\n    }\n\n    function getTradingIsEnabled() public view returns (bool) {\n        return block.timestamp \u003e= tradingEnabledTimestamp;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n            if (\n            from != owner() \u0026\u0026\n            to != owner() \u0026\u0026\n            to != address(0) \u0026\u0026\n            to != address(0xdead) \u0026\u0026\n            to != uniswapV2Pair\n        ) {\n            require(!_isBlacklisted[from] \u0026\u0026 !_isBlacklisted[to], \u0027Blacklisted address\u0027);\n            \n            require(\n                amount \u003c= maxBuyTranscationAmount,\n                \"Transfer amount exceeds the maxTxAmount.\"\n            );\n\n            uint256 contractBalanceRecepient = balanceOf(to);\n            require(\n                contractBalanceRecepient + amount \u003c= _maxWalletToken,\n                \"Exceeds maximum wallet token amount.\"\n            );\n            \n            if(!buyTransaction) {\n                require(_isWhitelisted[to] \u0026\u0026 _isWhitelisted[from], \"buy transaction is disabled\");\n            }\n        }\n\n\n\n        bool tradingIsEnabled = getTradingIsEnabled();\n\n        // only whitelisted addresses can make transfers after the fixed-sale has started\n        // and before the public presale is over\n        if(!tradingIsEnabled) {\n            require(canTransferBeforeTradingIsEnabled[from], \"BabyMoonarch: This account cannot send tokens until trading is enabled\");\n        }\n\n        if(amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n        if(\n        \t!swapping \u0026\u0026\n        \ttradingIsEnabled \u0026\u0026\n            automatedMarketMakerPairs[to] \u0026\u0026 // sells only by detecting transfer to automated market maker pair\n        \tfrom != address(uniswapV2Router) \u0026\u0026 //router -\u003e pair is removing liquidity which shouldn\u0027t have max\n            !_isExcludedFromFees[to] //no max for those excluded from fees\n        ) {\n            require(amount \u003c= maxSellTransactionAmount, \"Sell transfer amount exceeds the maxSellTransactionAmount.\");\n        }\n\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n\n        bool canSwap = contractTokenBalance \u003e= swapTokensAtAmount;\n\n        if(\n            tradingIsEnabled \u0026\u0026\n            canSwap \u0026\u0026\n            !swapping \u0026\u0026\n            !automatedMarketMakerPairs[from] \u0026\u0026\n            from != liquidityWallet \u0026\u0026\n            to != liquidityWallet\n        ) {\n            swapping = true;\n            \n            uint256 marketingTokens = contractTokenBalance.mul(marketingFee).div(totalFees);\n            swapAndSendToFee(marketingTokens);\n\n            uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(totalFees);\n            swapAndLiquify(swapTokens);\n\n            uint256 sellTokens = balanceOf(address(this));\n            swapAndSendDividends(sellTokens);\n\n            swapping = false;\n        }\n\n\n        bool takeFee = tradingIsEnabled \u0026\u0026 !swapping;\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n\n        if(takeFee) {\n        \tuint256 fees = amount.mul(totalFees).div(100);\n\n            // if sell, multiply by 1.2\n            if(automatedMarketMakerPairs[to]) {\n                fees = fees.mul(sellFeeIncreaseFactor).div(100);\n            }\n\n        \tamount = amount.sub(fees);\n\n            super._transfer(from, address(this), fees);\n        }\n\n        super._transfer(from, to, amount);\n\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\n\n        if(!swapping) {\n\t    \tuint256 gas = gasForProcessing;\n\n\t    \ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\n\t    \t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\n\t    \t}\n\t    \tcatch {\n\n\t    \t}\n        }\n    }\n    \n    function swapAndSendToFee(uint256 tokens) private  {\n\n        uint256 initialDividendstokenBalance = IERC20(Dividendstoken).balanceOf(address(this));\n\n        swapTokensForBusd(tokens, address(this));\n        uint256 newBalance = (IERC20(Dividendstoken).balanceOf(address(this))).sub(initialDividendstokenBalance);\n        IERC20(Dividendstoken).transfer(_marketingWalletAddress, newBalance);\n    }\n\n    function swapAndLiquify(uint256 tokens) private {\n        // split the contract balance into halves\n        uint256 half = tokens.div(2);\n        uint256 otherHalf = tokens.sub(half);\n\n        // capture the contract\u0027s current ETH balance.\n        // this is so that we can capture exactly the amount of ETH that the\n        // swap creates, and not make the liquidity event include any ETH that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        swapTokensForEth(half); // \u003c- this breaks the ETH -\u003e HATE swap when swap+liquify is triggered\n\n        // how much ETH did we just swap into?\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n\n\n        // generate the uniswap pair path of token -\u003e weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n\n    }\n\nfunction swapTokensForBusd(uint256 tokenAmount, address recipient) private {\n\n        address[] memory path = new address[](3);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        path[2] = Dividendstoken;\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n   \n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n       uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(this),\n            block.timestamp\n        );\n\n    }\n\n     function swapAndSendDividends(uint256 tokens) private {\n        swapTokensForBusd(tokens, address(this));\n        uint256 dividends = IERC20(Dividendstoken).balanceOf(address(this));\n        bool success = IERC20(Dividendstoken).transfer(address(dividendTracker), dividends);\n\n        if (success) {\n            dividendTracker.distributeBusdDividends(dividends);\n            emit SendDividends(tokens, dividends);\n        }\n    }\n    \n    function whitelistAddress(address account, bool _enabled) public onlyOwner {\n        _isWhitelisted[account] = _enabled;\n    }\n    \n    function buyTransactionEnabled(bool _enabled) public onlyOwner {\n        buyTransaction = _enabled;\n    }\n    \n    function withdrawRemainingToken(address account) public onlyOwner {\n        uint256 balance = balanceOf(address(this));\n        super._transfer(address(this), account, balance);\n    }\n    \n    function withdrawRemainingBEP20Token(address bep20, address account) public onlyOwner {\n        ERC20 BEP20 = ERC20(bep20);\n        uint256 balance = BEP20.balanceOf(address(this));\n        BEP20.transfer(account, balance);\n    }\n    \n    function burnRemainingToken() public onlyOwner {\n        uint256 balance = balanceOf(address(this));\n        super._transfer(address(this), 0x000000000000000000000000000000000000dEaD, balance);\n    }\n\n}\n\ncontract BabyMoonarchDividendTracker is DividendPayingToken, Ownable {\n    using SafeMath for uint256;\n    using SafeMathInt for int256;\n    using IterableMapping for IterableMapping.Map;\n\n    IterableMapping.Map private tokenHoldersMap;\n    uint256 public lastProcessedIndex;\n\n    mapping (address =\u003e bool) public excludedFromDividends;\n\n    mapping (address =\u003e uint256) public lastClaimTimes;\n\n    uint256 public claimWait;\n    uint256 public immutable minimumTokenBalanceForDividends;\n\n    event ExcludeFromDividends(address indexed account);\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\n\n    constructor() public DividendPayingToken(\"BabyMoonarch_Dividend_Tracker\", \"BabyMoonarch_Dividend_Tracker\") {\n    \tclaimWait = 1800;\n        minimumTokenBalanceForDividends = 1000000 * (10**18); //must hold  tokens\n    }\n\n\n\n    function _transfer(address, address, uint256) internal override {\n        require(false, \"BabyMoonarch_Dividend_Tracker: No transfers allowed\");\n    }\n\n    function withdrawDividend() public override {\n        require(false, \"BabyMoonarch_Dividend_Tracker: withdrawDividend disabled. Use the \u0027claim\u0027 function on the main  contract.\");\n    }\n\n    function excludeFromDividends(address account) external onlyOwner {\n    \trequire(!excludedFromDividends[account]);\n    \texcludedFromDividends[account] = true;\n\n    \t_setBalance(account, 0);\n    \ttokenHoldersMap.remove(account);\n\n    \temit ExcludeFromDividends(account);\n    }\n\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\n        require(newClaimWait \u003e= 3600 \u0026\u0026 newClaimWait \u003c= 86400, \"BabyMoonarch_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\");\n        require(newClaimWait != claimWait, \"BabyMoonarch_Dividend_Tracker: Cannot update claimWait to same value\");\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\n        claimWait = newClaimWait;\n    }\n\n    function getLastProcessedIndex() external view returns(uint256) {\n    \treturn lastProcessedIndex;\n    }\n\n    function getNumberOfTokenHolders() external view returns(uint256) {\n        return tokenHoldersMap.keys.length;\n    }\n\n\n\n    function getAccount(address _account)\n        public view returns (\n            address account,\n            int256 index,\n            int256 iterationsUntilProcessed,\n            uint256 withdrawableDividends,\n            uint256 totalDividends,\n            uint256 lastClaimTime,\n            uint256 nextClaimTime,\n            uint256 secondsUntilAutoClaimAvailable) {\n        account = _account;\n\n        index = tokenHoldersMap.getIndexOfKey(account);\n\n        iterationsUntilProcessed = -1;\n\n        if(index \u003e= 0) {\n            if(uint256(index) \u003e lastProcessedIndex) {\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\n            }\n            else {\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length \u003e lastProcessedIndex ?\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\n                                                        0;\n\n\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\n            }\n        }\n\n\n        withdrawableDividends = withdrawableDividendOf(account);\n        totalDividends = accumulativeDividendOf(account);\n\n        lastClaimTime = lastClaimTimes[account];\n\n        nextClaimTime = lastClaimTime \u003e 0 ?\n                                    lastClaimTime.add(claimWait) :\n                                    0;\n\n        secondsUntilAutoClaimAvailable = nextClaimTime \u003e block.timestamp ?\n                                                    nextClaimTime.sub(block.timestamp) :\n                                                    0;\n    }\n\n    function getAccountAtIndex(uint256 index)\n        public view returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256) {\n    \tif(index \u003e= tokenHoldersMap.size()) {\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\n        }\n\n        address account = tokenHoldersMap.getKeyAtIndex(index);\n\n        return getAccount(account);\n    }\n\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\n    \tif(lastClaimTime \u003e block.timestamp)  {\n    \t\treturn false;\n    \t}\n\n    \treturn block.timestamp.sub(lastClaimTime) \u003e= claimWait;\n    }\n\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\n    \tif(excludedFromDividends[account]) {\n    \t\treturn;\n    \t}\n\n    \tif(newBalance \u003e= minimumTokenBalanceForDividends) {\n            _setBalance(account, newBalance);\n    \t\ttokenHoldersMap.set(account, newBalance);\n    \t}\n    \telse {\n            _setBalance(account, 0);\n    \t\ttokenHoldersMap.remove(account);\n    \t}\n\n    \tprocessAccount(account, true);\n    }\n\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\n\n    \tif(numberOfTokenHolders == 0) {\n    \t\treturn (0, 0, lastProcessedIndex);\n    \t}\n\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\n\n    \tuint256 gasUsed = 0;\n\n    \tuint256 gasLeft = gasleft();\n\n    \tuint256 iterations = 0;\n    \tuint256 claims = 0;\n\n    \twhile(gasUsed \u003c gas \u0026\u0026 iterations \u003c numberOfTokenHolders) {\n    \t\t_lastProcessedIndex++;\n\n    \t\tif(_lastProcessedIndex \u003e= tokenHoldersMap.keys.length) {\n    \t\t\t_lastProcessedIndex = 0;\n    \t\t}\n\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\n\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\n    \t\t\tif(processAccount(payable(account), true)) {\n    \t\t\t\tclaims++;\n    \t\t\t}\n    \t\t}\n\n    \t\titerations++;\n\n    \t\tuint256 newGasLeft = gasleft();\n\n    \t\tif(gasLeft \u003e newGasLeft) {\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\n    \t\t}\n\n    \t\tgasLeft = newGasLeft;\n    \t}\n\n    \tlastProcessedIndex = _lastProcessedIndex;\n\n    \treturn (iterations, claims, lastProcessedIndex);\n    }\n\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\n        uint256 amount = _withdrawDividendOfUser(account);\n\n    \tif(amount \u003e 0) {\n    \t\tlastClaimTimes[account] = block.timestamp;\n            emit Claim(account, amount, automatic);\n    \t\treturn true;\n    \t}\n\n    \treturn false;\n    }\n\n}"},"Context.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"ERC20.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.0;\n\nimport \"./IERC20.sol\";\nimport \"./Context.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address =\u003e uint256) private _balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c \u003c a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b \u003e a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a % b;\n    }\n}"},"SafeMathInt.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.6;\n\n/**\n * @title SafeMathInt\n * @dev Math operations with safety checks that revert on error\n * @dev SafeMath adapted for int256\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\n */\nlibrary SafeMathInt {\n  function mul(int256 a, int256 b) internal pure returns (int256) {\n    // Prevent overflow when multiplying INT256_MIN with -1\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\n    require(!(a == - 2**255 \u0026\u0026 b == -1) \u0026\u0026 !(b == - 2**255 \u0026\u0026 a == -1));\n\n    int256 c = a * b;\n    require((b == 0) || (c / b == a));\n    return c;\n  }\n\n  function div(int256 a, int256 b) internal pure returns (int256) {\n    // Prevent overflow when dividing INT256_MIN by -1\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\n    require(!(a == - 2**255 \u0026\u0026 b == -1) \u0026\u0026 (b \u003e 0));\n\n    return a / b;\n  }\n\n  function sub(int256 a, int256 b) internal pure returns (int256) {\n    require((b \u003e= 0 \u0026\u0026 a - b \u003c= a) || (b \u003c 0 \u0026\u0026 a - b \u003e a));\n\n    return a - b;\n  }\n\n  function add(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a + b;\n    require((b \u003e= 0 \u0026\u0026 c \u003e= a) || (b \u003c 0 \u0026\u0026 c \u003c a));\n    return c;\n  }\n\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\n    require(a \u003e= 0);\n    return uint256(a);\n  }\n}"},"SafeMathUint.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.6;\n\n/**\n * @title SafeMathUint\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMathUint {\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    require(b \u003e= 0);\n    return b;\n  }\n}"}}