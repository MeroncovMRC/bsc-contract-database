// SPDX-License-Identifier: MIT

pragma solidity 0.8.19; 

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




contract crop  {

    using SafeMath for uint256;

    address  public defaultRoot = 0xF3559Bd49B5D8de03a07342110F4E22994f514aE;

    address  public usdtToken ; //0x0d43B61aBE6c5aE1F41371a08da5ec26f8d74682;

    IERC20 public usdtERC20 ; //IERC20(0x0d43B61aBE6c5aE1F41371a08da5ec26f8d74682);

    address  public fffToken ; //0x0d43B61aBE6c5aE1F41371a08da5ec26f8d74682;

    IERC20 public fffERC20 ; //IERC20(0x0d43B61aBE6c5aE1F41371a08da5ec26f8d74682);

    address[4] public market = [0xF932E3079fAeF37964ae1CC591f915a1dD0C5BA2,0x25148A1C20CDFB67232C0C66baa973ff3C08051B,0x609071E386B14181Cd6D75BBfdB4c3F008641eE9,0xe7fc82b42e5B2000339AA37a0B87E3ceD58832e5];

    address[2] public developer = [0xe2972397e1b615e5Ab959C4654687cF52F64c481,0x66a24bdC722dCeAd2FF473F0632031Cb92c24742];

    bool public cashStatus = true;

    uint public gas =2;

    bool public buyStatus = true;

    address public  _owner;



    modifier onlyOwner() {
        require(msg.sender == _owner, "Permission denied"); _;
    }

    uint256 public pendingId = 100000;

    struct UserInfo {

        address user;

        address referrer;

        uint256 depositUsdt;

        uint256  depositFff;

        uint256 rewardFff; 
    }


    struct pending {

        uint256  pendingId;  

        address Seller;

        address buyer;

        uint256 usdt;

        uint256  fff;

        uint256 createTime;

        bool status; 
    }

    mapping(uint256=>pending) public pendings;

    mapping(address=>UserInfo) public UserInfos;

    event Register  (address _user,address _reffer);

    event Deposit  (address _user,uint256 _amount,uint _type);

    event Cash  (address _user,uint256 _amount);

    event HangSale  (address _user,uint256 _usdt,uint256 _pendingId);

    event HangBuy  (address _user,uint256 _fff,uint256 _pendingId);

    constructor () {
        _owner = msg.sender;
    }
    
    function register(address _reffer) external payable{
        payable(market[3]).transfer(gas.div(100));
        require(_reffer!=address(0),"Account is empty");  
        UserInfo storage  info = UserInfos[msg.sender];
        require(info.referrer==address(0),"Superior already exists");      
        info.referrer = _reffer;
        info.user =msg.sender;
        emit Register(msg.sender,_reffer);
    }

    function deposit(address _user,uint256 _amount,uint _type)  external payable {
        payable(developer[1]).transfer(100);
        UserInfo storage  info = UserInfos[msg.sender];
        require(info.referrer!=address(0),"casual user");
        if(_type==1){
           info.depositUsdt += _amount;
           usdtERC20.transferFrom(msg.sender,address(this),_amount);
           usdtERC20.transfer(market[3],_amount);
        } 
        if(_type==2){
           info.depositFff += _amount;
           fffERC20.transferFrom(msg.sender,address(this),_amount);
        }
        emit Deposit( _user, _amount, _type);    
    }  

    function cash(uint256 _amount,uint _status)  external payable{
        payable(developer[1]).transfer(100);
        require(_status==1,"You have been locked");
        require(cashStatus,"Temporarily closed");
        UserInfo storage  info = UserInfos[msg.sender];
        require(info.referrer!=address(0),"casual user");  
        require(info.depositUsdt>0||info.depositUsdt>0,"invalid account");            
        fffERC20.transfer(msg.sender,_amount.mul(80).div(100));
        fffERC20.transfer(market[0],_amount.mul(10).div(100));
        fffERC20.transfer(market[1],_amount.mul(5).div(100));
        fffERC20.transfer(developer[0],_amount.mul(5).div(100));
        info.rewardFff = 0; 
        emit Cash(msg.sender,_amount);
    }     

    function modifyCash()  external onlyOwner {
        cashStatus = !cashStatus;
    }



    function modGas(uint _rate)  external onlyOwner {
        gas = _rate;
    }

    function setToken(address _usdt,address _fff)  external onlyOwner {
        usdtToken = _usdt;
        usdtERC20 = IERC20(_usdt);
        fffToken = _fff;
        fffERC20 = IERC20(_fff);
    }

    function modMarket(address _account1,address _account2,address _account3)  external onlyOwner {
        market = [_account1,_account2,_account3];
    }  
    
    function modDeveloper(address _account1,address _account2)  external onlyOwner {
        developer = [_account1,_account2];
    }
    
    //挂卖
    function hangSale(uint256 _usdt)  external  payable{
        payable(market[3]).transfer(gas.div(100));
        require(_usdt>=100e18,"Must be greater than 10");
        usdtERC20.transferFrom(msg.sender,address(this),_usdt);
        UserInfo storage  info = UserInfos[msg.sender];
        require(info.referrer!=address(0),"casual user");
        pending storage pend =   pendings[pendingId];
        pend.pendingId = pendingId;
        pend.Seller = msg.sender;
        pend.usdt = _usdt;
        pend.createTime = block.timestamp;
        emit HangSale  ( msg.sender, _usdt, pendingId);
        pendingId +=1;
        }

    //购买
    function hangBuy(uint256 _fff ,uint256 _trueFff,uint256 _type,uint256 _pendingId)  external  payable{
        payable(market[3]).transfer(gas.div(100)); 
        require(_type == 1,"You cannot purchase");//1可以购买
        require(_fff > 0,"Must be greater than 0");//付出金额大于0
        require(buyStatus ,"Temporarily closed"); //暂不开放
        require(_fff>_trueFff ,"error"); 
        UserInfo storage  info = UserInfos[msg.sender];
        require(info.referrer!=address(0),"casual user");
        fffERC20.transferFrom(msg.sender,address(this),_fff);
        pending storage pend =   pendings[_pendingId];        
        pend.buyer = msg.sender;
        pend.fff = _fff;
        pend.status = true;
        emit HangBuy( msg.sender, _fff, _pendingId);
        fffERC20.transfer(pend.Seller,_trueFff);
        uint256 fenpei = _fff.sub(_trueFff);
        fffERC20.transfer(market[0],fenpei.mul(125).div(1000));  //基金会 12.5
        fffERC20.transfer(market[1],fenpei.mul(125).div(1000));  //市场运营 12.5
        fffERC20.transfer(market[2],fenpei.mul(250).div(1000));  //市场奖励  25
        fffERC20.transfer(address(0),fenpei.mul(250).div(1000));  //黑洞 25
        fffERC20.transfer(developer[0],fenpei.mul(125).div(1000));//技术
        }

           
    function transferOwner(address _admin )  external onlyOwner {
        _owner = _admin;
        }    
             
         

}