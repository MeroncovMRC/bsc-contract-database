{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"HashStaking.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./TransferHelper.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract HashStaking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint constant public STAKING_TOKENS_LIMIT = 15000000 * 10**18;\r\n    uint constant public PARTNER_TOKENS_LIMIT = 1500000 * 10**18;\r\n    uint constant public BLOCKS_TOTAL = 10512000;\r\n    uint constant public REWARD_PER_BLOCK = STAKING_TOKENS_LIMIT / BLOCKS_TOTAL;\r\n    uint constant public MAX_APR = 100;\r\n    uint constant public PARTNER_PERCENT = 10;\r\n    string constant public AGREEMENT = \"I confirm I am not a citizen, national, resident (tax or otherwise) or holder of a green card of the USA and have never been a citizen, national, resident (tax or otherwise) or holder of a green card of the USA in the past.\";\r\n    string constant AGREEMENT_LENGTH = \"223\";\r\n\r\n    address public hashTokenAddress;\r\n    uint public stakingTokensLeft = STAKING_TOKENS_LIMIT;\r\n    uint public partnerTokensLeft = PARTNER_TOKENS_LIMIT;\r\n    uint public currentStakedAmount = 0;\r\n    uint public finalStakedAmount = 0;\r\n    uint public endBlock;\r\n\r\n    struct User {\r\n        uint stakedAmount;\r\n        uint lastRewardBlock;\r\n        uint rewardCollected;\r\n        uint partnerRewardCollected;\r\n        address partner;\r\n        bytes agreementSignature;\r\n        uint16 referral;\r\n    }\r\n    mapping(address =\u003e User) public users;\r\n\r\n    address[] public participants;\r\n\r\n    event Stake(\r\n        address indexed user,\r\n        address indexed partner,\r\n        uint16 indexed referral,\r\n        uint addedAmount,\r\n        uint currentAmount,\r\n        uint reward,\r\n        uint partnerReward\r\n    );\r\n    event Unstake(\r\n        address indexed user,\r\n        address indexed partner,\r\n        uint16 indexed referral,\r\n        uint withdrawnAmount,\r\n        uint currentAmount,\r\n        uint reward,\r\n        uint partnerReward,\r\n        bool emergency\r\n    );\r\n    event Collect(\r\n        address indexed user,\r\n        address indexed partner,\r\n        uint16 indexed referral,\r\n        uint currentAmount,\r\n        uint reward,\r\n        uint partnerReward,\r\n        bool compound\r\n    );\r\n\r\n    constructor(address _hashTokenAddress) {\r\n        hashTokenAddress = _hashTokenAddress;\r\n        endBlock = block.number + BLOCKS_TOTAL;\r\n    }\r\n\r\n    function withdrawRemainingTokens() external onlyOwner {\r\n        require(block.number \u003e endBlock, \"The staking is not finished yet\");\r\n        uint contractBalance = _getHashBalance(address(this));\r\n        uint reservedBalance = 0;\r\n        for (uint i = 0; i \u003c participants.length; i++) {\r\n            uint userReward = _calculateReward(users[participants[i]].stakedAmount, users[participants[i]].lastRewardBlock);\r\n            reservedBalance = reservedBalance.add(users[participants[i]].stakedAmount).add(userReward);\r\n            if (users[participants[i]].partner != address(0)) {\r\n                reservedBalance = reservedBalance.add(userReward.mul(PARTNER_PERCENT).div(100));\r\n            }\r\n        }\r\n        require(contractBalance \u003e reservedBalance, \"Nothing to withdraw\");\r\n        TransferHelper.safeTransfer(hashTokenAddress, msg.sender, contractBalance.sub(reservedBalance));\r\n    }\r\n\r\n    function stake(uint _amount, address _partner, uint16 _referral, bytes calldata _agreementSignature) external {\r\n        require(block.number \u003c endBlock, \"The staking is finished\");\r\n        require(_amount \u003e 0, \"Incorrect amount\");\r\n        User storage user = users[msg.sender];\r\n        if (user.agreementSignature.length == 0) {\r\n            require (_verifySignature(_agreementSignature, msg.sender), \"Incorrect agreement signature\");\r\n            user.agreementSignature = _agreementSignature;\r\n            if (_partner != address(0)) {\r\n                user.partner = _partner;\r\n            }\r\n            if (_referral \u003e 0) {\r\n                user.referral = _referral;\r\n            }\r\n            participants.push(msg.sender);\r\n        }\r\n        (uint reward, uint partnerReward) = _collect(msg.sender, false);\r\n        user.stakedAmount = user.stakedAmount.add(_amount);\r\n        currentStakedAmount = currentStakedAmount.add(_amount);\r\n        TransferHelper.safeTransferFrom(hashTokenAddress, msg.sender, address(this), _amount);\r\n        emit Stake(msg.sender, user.partner, user.referral, _amount, user.stakedAmount, reward, partnerReward);\r\n    }\r\n\r\n    function unstake(uint _amount) external {\r\n        _unstake(msg.sender, _amount, false);\r\n    }\r\n\r\n    function unstakeAll() external {\r\n        _unstake(msg.sender, users[msg.sender].stakedAmount, false);\r\n    }\r\n\r\n    function collect() external {\r\n        (uint reward, uint partnerReward) = _collect(msg.sender, false);\r\n        require(reward \u003e 0, \"Nothing to collect\");\r\n        emit Collect(\r\n            msg.sender,\r\n            users[msg.sender].partner,\r\n            users[msg.sender].referral,\r\n            users[msg.sender].stakedAmount,\r\n            reward,\r\n            partnerReward,\r\n            false\r\n        );\r\n    }\r\n\r\n    function emergencyWithdraw() external {\r\n        _unstake(msg.sender, users[msg.sender].stakedAmount, true);\r\n    }\r\n\r\n    function compound() external {\r\n        (uint reward, uint partnerReward) = _collect(msg.sender, true);\r\n        require(reward \u003e 0, \"Nothing to collect\");\r\n        emit Collect(\r\n            msg.sender,\r\n            users[msg.sender].partner,\r\n            users[msg.sender].referral,\r\n            users[msg.sender].stakedAmount,\r\n            reward,\r\n            partnerReward,\r\n            true\r\n        );\r\n    }\r\n\r\n    function getCurrentAPR() public view returns (uint apr) {\r\n        if (block.number \u003e= endBlock) {\r\n            apr = 0;\r\n        } else if (currentStakedAmount == 0) {\r\n            apr = MAX_APR;\r\n        } else {\r\n            apr = stakingTokensLeft.mul(BLOCKS_TOTAL).mul(100).div(currentStakedAmount).div(endBlock.sub(block.number));\r\n            if (apr \u003e MAX_APR) {\r\n                apr = MAX_APR;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCurrentStakedAmount(address _address) public view returns (uint) {\r\n        return users[_address].stakedAmount;\r\n    }\r\n\r\n    function getPendingReward(address _address) public view returns (uint) {\r\n        return _calculateReward(users[_address].stakedAmount, users[_address].lastRewardBlock);\r\n    }\r\n\r\n    function getPendingPartnerReward(address _address) external view returns (uint partnerReward) {\r\n        partnerReward = 0;\r\n        for (uint i = 0; i \u003c participants.length; i++) {\r\n            if (users[participants[i]].partner == _address) {\r\n                uint userReward = _calculateReward(\r\n                    users[participants[i]].stakedAmount,\r\n                    users[participants[i]].lastRewardBlock\r\n                );\r\n                partnerReward = partnerReward.add(userReward.mul(PARTNER_PERCENT).div(100));\r\n            }\r\n        }\r\n    }\r\n\r\n    function countParticipants() external view returns (uint) {\r\n        return participants.length;\r\n    }\r\n\r\n    function getCurrentInfo(address _address) external view returns (\r\n        uint apr,\r\n        uint totalStakedAmount,\r\n        uint userStakedAmount,\r\n        uint userPendingReward,\r\n        bool isParticipant,\r\n        uint blocksLeft,\r\n        uint userRewardCollected,\r\n        uint partnerRewardCollected,\r\n        uint referrals,\r\n        uint activeReferrals,\r\n        uint referralsStakedAmount,\r\n        uint referralsRewardCollected\r\n    ) {\r\n        apr = getCurrentAPR();\r\n        totalStakedAmount = currentStakedAmount;\r\n        userStakedAmount = getCurrentStakedAmount(_address);\r\n        userPendingReward = getPendingReward(_address);\r\n        isParticipant = users[_address].agreementSignature.length \u003e 0;\r\n        if (block.number \u003c endBlock) {\r\n            blocksLeft = endBlock - block.number;\r\n        } else {\r\n            blocksLeft = 0;\r\n        }\r\n        userRewardCollected = users[_address].rewardCollected;\r\n        partnerRewardCollected = users[_address].partnerRewardCollected;\r\n        referrals = 0;\r\n        activeReferrals = 0;\r\n        referralsStakedAmount = 0;\r\n        referralsRewardCollected = 0;\r\n        for (uint i = 0; i \u003c participants.length; i++) {\r\n            if (users[participants[i]].partner == _address) {\r\n                referrals++;\r\n                if (users[participants[i]].stakedAmount \u003e 0) {\r\n                    activeReferrals++;\r\n                    referralsStakedAmount += users[participants[i]].stakedAmount;\r\n                }\r\n                referralsRewardCollected += users[participants[i]].rewardCollected;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _unstake(address _address, uint _amount, bool _emergency) internal {\r\n        require(_amount \u003e 0, \"Incorrect amount\");\r\n        if (block.number \u003e= endBlock \u0026\u0026 finalStakedAmount == 0) {\r\n            finalStakedAmount = currentStakedAmount;\r\n        }\r\n        (uint reward, uint partnerReward) = (0, 0);\r\n        if (!_emergency) {\r\n            (reward, partnerReward) = _collect(_address, false);\r\n        }\r\n        User storage user = users[_address];\r\n        require(_amount \u003c= user.stakedAmount, \"Incorrect amount\");\r\n        user.stakedAmount = user.stakedAmount.sub(_amount);\r\n        currentStakedAmount = currentStakedAmount.sub(_amount);\r\n        TransferHelper.safeTransfer(hashTokenAddress, _address, _amount);\r\n        emit Unstake(\r\n            _address,\r\n            user.partner,\r\n            user.referral,\r\n            _amount,\r\n            user.stakedAmount,\r\n            reward,\r\n            partnerReward,\r\n            _emergency\r\n        );\r\n    }\r\n\r\n    function _collect(address _address, bool _compound) internal returns (uint reward, uint partnerReward) {\r\n        User storage user = users[_address];\r\n        reward = _calculateReward(user.stakedAmount, user.lastRewardBlock);\r\n        partnerReward = 0;\r\n        if (reward \u003e 0) {\r\n            if (_compound) {\r\n                user.stakedAmount = user.stakedAmount.add(reward);\r\n                currentStakedAmount = currentStakedAmount.add(reward);\r\n            } else {\r\n                TransferHelper.safeTransfer(hashTokenAddress, _address, reward);\r\n            }\r\n            stakingTokensLeft = stakingTokensLeft.sub(reward);\r\n            user.rewardCollected = user.rewardCollected.add(reward);\r\n            if (user.partner != address(0)) {\r\n                partnerReward = reward.mul(PARTNER_PERCENT).div(100);\r\n                if (partnerReward \u003e 0) {\r\n                    TransferHelper.safeTransfer(hashTokenAddress, user.partner, partnerReward);\r\n                    partnerTokensLeft = stakingTokensLeft.sub(partnerReward);\r\n                    users[user.partner].partnerRewardCollected = users[user.partner].partnerRewardCollected.add(partnerReward);\r\n                }\r\n            }\r\n        }\r\n        user.lastRewardBlock = block.number;\r\n    }\r\n\r\n    function _calculateReward(uint _stakedAmount, uint _lastRewardBlock) internal view returns (uint) {\r\n        if (currentStakedAmount == 0) {\r\n            return 0;\r\n        }\r\n        uint currentBlock = block.number;\r\n        uint blocks = 0;\r\n        if (currentBlock \u003e endBlock) {\r\n            currentBlock = endBlock;\r\n        }\r\n        if (currentBlock \u003e _lastRewardBlock) {\r\n            blocks = currentBlock.sub(_lastRewardBlock);\r\n        }\r\n        uint totalStakedAmount = finalStakedAmount \u003e 0 ? finalStakedAmount : currentStakedAmount;\r\n        uint maxReward = _stakedAmount.mul(MAX_APR).mul(blocks).div(BLOCKS_TOTAL).div(100);\r\n        uint reward = REWARD_PER_BLOCK.mul(blocks).mul(_stakedAmount).div(totalStakedAmount);\r\n        if (reward \u003e maxReward) {\r\n            reward = maxReward;\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    function _getHashBalance(address _address) internal returns (uint) {\r\n        (bool success, bytes memory data) = hashTokenAddress.call(\r\n            abi.encodeWithSelector(bytes4(keccak256(bytes(\u0027balanceOf(address)\u0027))), _address)\r\n        );\r\n        require(success, \"Getting HASH balance failed\");\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    function _verifySignature(bytes memory _sign, address _signer) pure internal returns (bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", AGREEMENT_LENGTH, AGREEMENT));\r\n        address[] memory signList = _recoverAddresses(hash, _sign);\r\n        return signList[0] == _signer;\r\n    }\r\n\r\n    function _recoverAddresses(bytes32 _hash, bytes memory _signatures) pure internal returns (address[] memory addresses) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint count = _countSignatures(_signatures);\r\n        addresses = new address[](count);\r\n        for (uint i = 0; i \u003c count; i++) {\r\n            (v, r, s) = _parseSignature(_signatures, i);\r\n            addresses[i] = ecrecover(_hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    function _parseSignature(bytes memory _signatures, uint _pos) pure internal returns (uint8 v, bytes32 r, bytes32 s) {\r\n        uint offset = _pos * 65;\r\n        assembly {\r\n            r := mload(add(_signatures, add(32, offset)))\r\n            s := mload(add(_signatures, add(64, offset)))\r\n            v := and(mload(add(_signatures, add(65, offset))), 0xff)\r\n        }\r\n        if (v \u003c 27) v += 27;\r\n        require(v == 27 || v == 28);\r\n    }\r\n\r\n    function _countSignatures(bytes memory _signatures) pure internal returns (uint) {\r\n        return _signatures.length % 65 == 0 ? _signatures.length / 65 : 0;\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.3.2 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler\u0027s built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"},"TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\r\n            \u0027TransferHelper::safeApprove: approve failed\u0027\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\r\n            \u0027TransferHelper::safeTransfer: transfer failed\u0027\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\r\n            \u0027TransferHelper::transferFrom: transferFrom failed\u0027\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \u0027TransferHelper::safeTransferETH: ETH transfer failed\u0027);\r\n    }\r\n}"}}