// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;


interface IERC20 {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}
 
library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

  
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }


    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

 
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

library Address {

    function isContract(address account) internal view returns (bool) {
        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

   
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IUniswapV2Pair {
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
}


interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
     function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );
}

library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}

library EnumerableSet {
   
    struct Set {
        bytes32[] _values;
        mapping (bytes32 => uint256) _indexes;
    }

    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    function _remove(Set storage set, bytes32 value) private returns (bool) {
        
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { // Equivalent to contains(set, value)
            
            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

    
            bytes32 lastvalue = set._values[lastIndex];

            set._values[toDeleteIndex] = lastvalue;
            // Update the index for the moved value
            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based

            set._values.pop();

            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    struct Bytes32Set {
        Set _inner;
    }

    
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }


    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

   
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    struct AddressSet {
        Set _inner;
    }

    
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }


    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

   
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

   
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    struct UintSet {
        Set _inner;
    }

    
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}

contract FILstarmineToken is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;
    using EnumerableSet for EnumerableSet.AddressSet;

    mapping (address => uint256) private _tOwned;
    mapping (address => uint256) private _rOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) public _isExcludedFromFee;
    mapping (address => bool) public _isExcluded;
    address[] private _excluded;
   
    uint8 private _decimals = 18;
    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal = 300000 * 10**18;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
    
    string private _name = "FILstarmine";
    string private _symbol = "FILstarmine";
    
    uint256 public _burnFee = 60;
    uint256 public _marketFee = 10;
    address public marketAddress1;
    address public marketAddress2;
 
    uint256 public _shareFee = 30;
    uint[] internal shareUpConfig = [10,6,4];
    uint[] internal shareDownConfig = [10];
    uint256 public totalFee = 100;

    uint256 public shareCondition = 10e18;
    uint256 public recommeCondition = 0;

    uint public mkAmount;

    IUniswapV2Router02 public uniswapV2Router;
    mapping(address => bool) public ammPairs;
    
    IERC20 public uniswapV2Pair;

    bool inSwapAndLiquify;
    uint256 public maxTxAmount = 1 * 10**17;

    address public awardToken;    
    address public usdt;
    address public wbnb;
    address public holder;

    uint public initPrice;

    address constant public rootAddress = address(0x000000000000000000000000000000000000dEaD);
    
    mapping (address => address) public _recommerMapping;
    mapping (address => address[]) internal _childsMapping;

    uint public swapStartBlock;
    mapping(address => bool) public isBlackList;

    bool public depreciateSwitch = true;
    bool public awardSwitch = true;
    uint public maxDepreciateFee = 200;

    bool public swapSwitch = false;

    mapping(address => bool) public hasBuyToken;

    uint public addPriceTokenAmount = 10000;

    constructor (
        address _route,
        address _usdt,
        address _awardToken,
        address _holder,
        address _marketAddress1,
        address _marketAddress2) public {
        
         awardToken = _awardToken;
         holder = _holder;
         usdt = _usdt;
         marketAddress1 = _marketAddress1;
         marketAddress2 = _marketAddress2;

        _recommerMapping[rootAddress] = address(0xdeaddead);
        _recommerMapping[holder] = rootAddress;
        _recommerMapping[marketAddress1] = rootAddress;
        _recommerMapping[marketAddress2] = rootAddress;

         _rOwned[_holder] = _rTotal;
        
        _isExcludedFromFee[_holder] = true;
        _isExcludedFromFee[address(this)] = true;

        _owner = msg.sender;

        uniswapV2Router = IUniswapV2Router02(_route);
        wbnb = uniswapV2Router.WETH();
         
        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())
            .createPair(address(this), usdt);
        
        uniswapV2Pair = IERC20(_uniswapV2Pair);
        ammPairs[_uniswapV2Pair] = true;

        emit Transfer(address(0), _holder, _tTotal);
    }

     function startSwap()external onlyOwner{
        swapSwitch = true;
    }

    function setdepreciateSwitch(bool isS,bool isA)external onlyOwner{
        depreciateSwitch = isS;
        awardSwitch = isA;
    }

    function setAmmPair(address pair,bool hasPair)external onlyOwner{
        ammPairs[pair] = hasPair;
    }

    function setMaxTx(uint256 maxTx,uint mdf,uint apta) external onlyOwner{
        maxTxAmount = maxTx;
        maxDepreciateFee = mdf;
        addPriceTokenAmount = apta;
    }

    function initTokenPrice()external onlyOwner{
        initPrice = _getTokenPrice();
    }

    function _getTokenPrice()internal view returns(uint){
        (uint r0,uint r1,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();

        if( r0 > 0 && r1 > 0){
            if( address(this) == IUniswapV2Pair(address(uniswapV2Pair)).token0()){
                return  r1 * 1e10 / r0;
            }else{
                return r0 * 1e10 / r1;
            }
        }
    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    function tokenFromReflection(uint256 rAmount) internal view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

     function excludeFromReward(address account) public onlyOwner() {
        require(!_isExcluded[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    }

     function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;      
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
            rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            tSupply = tSupply.sub(_tOwned[_excluded[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    
    receive() external payable {}

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    function _take(uint256 tValue,address from,address to,uint currentRate) private {
         uint256 rValue = tValue.mul(currentRate);
        _rOwned[to] = _rOwned[to].add(rValue);
        if(_isExcluded[to]){
            _tOwned[to] = _tOwned[to].add(tValue);
        }
        emit Transfer(from, to, tValue);
    }
    
    function getForefathers(address owner,uint num) internal view returns(address[] memory fathers){
        fathers = new address[](num);
        address parent  = owner;
        for( uint i = 0; i < num; i++){
            parent = _recommerMapping[parent];
            if( parent == rootAddress || parent == address(0) ) break;
            fathers[i] = parent;
        }
    }

     function getChilds(address owner,uint num) internal view returns(address[] memory fathers){
        fathers = new address[](num);
        address parent  = owner;

        uint time = block.timestamp;
        for( uint i = 0; i < num; i++){
            address[] storage cs = _childsMapping[parent];
            if( cs.length == 0 ) break;
            uint index = time % cs.length;
            parent = cs[index];
            if( parent == address(0) ) break;
            fathers[i] = parent;
        }
    }

    function _takeShare(uint tShare,address from,address user,bool isAwardToken,uint currentRate) private {

        uint len = shareUpConfig.length;

        address[] memory farthers = getForefathers(user,len);

        uint sended = 0;
        for( uint i = 0; i < len; i++ ){
            address parent = farthers[i];
            if( parent == address(0)) break;

            if( balanceOf(parent) < shareCondition) continue;

            uint tv = tShare * shareUpConfig[i] / _shareFee;

            if( isAwardToken ){
                IERC20(awardToken).transfer(parent, tv);
            }else{
                _take(tv,from,parent,currentRate);
            }
           
            sended += tv;
        }  

        len = shareDownConfig.length;
        address[] memory childs = getChilds(user,len);
        for( uint i = 0; i < len; i++ ){
            address child = childs[i];
            if( child == address(0)) break;

            if( balanceOf(child) < shareCondition) continue;
            uint tv = tShare * shareDownConfig[i] / _shareFee;

            if( isAwardToken ){
                IERC20(awardToken).transfer(child, tv);
            }else{
                _take(tv,from,child,currentRate);
            }
            sended += tv;
        }  
        
        if( tShare > sended && tShare - sended > 10000 ){
            uint v = tShare - sended;
            if( !isAwardToken ){
                _take(v,from,address(0),currentRate);
            }else{
                IERC20(awardToken).transfer(marketAddress1, v);
            }
        }
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function addRelationEx(address recommer,address user) internal {
        if( 
            recommer != user 
            && _recommerMapping[user] == address(0x0) 
            && _recommerMapping[recommer] != address(0x0) ){
                _recommerMapping[user] = recommer;
                _childsMapping[recommer].push(user);

        }       
    }

    struct Param{
        uint rAmount;
        uint rTransferAmount;
        bool takeFee;
        bool isAwardToken;
        uint tTransferAmount;
        uint tBurn;
        uint tMarket;
        uint tShare;
        uint depreciateRate;
        uint tDepreciate;
        address from;
        address user;
    }

     function _initParam(uint256 tAmount,Param memory param) private {
        uint tFee = 0;
        uint256 rFee = 0;
        uint256 currentRate = _getRate();
        if( param.takeFee){
            param.tBurn = tAmount * _burnFee / 1000;
            param.tShare = tAmount * _shareFee / 1000;
            param.tMarket = tAmount * _marketFee / 1000;

            if( param.depreciateRate > 0){
                 param.tDepreciate = tAmount * param.depreciateRate / 1000;
                 tFee = tAmount * (totalFee + param.depreciateRate ) / 1000;
            }else{
                tFee = tAmount * totalFee / 1000;
            }
            rFee = tFee.mul(currentRate);
            if( param.isAwardToken && param.tShare > 0){
                _take(param.tShare, param.from, address(this), currentRate);
                param.tShare = swapAndToToken(param.tShare,address(this));
            }
        }
        param.tTransferAmount = tAmount.sub(tFee);
        param.rAmount = tAmount.mul(currentRate);
        param.rTransferAmount = param.rAmount.sub(rFee);
    }

    function _takeFee(Param memory param,address from)private {
        uint256 currentRate = _getRate();
        if( param.tBurn > 0 ){
            _take(param.tBurn, from, address(0),currentRate);
        }
        if( param.tMarket > 0 ){
            _take(param.tMarket, from, address(this),currentRate);
            mkAmount += param.tMarket;
        }
        if( param.tShare > 0 ){
             _takeShare(param.tShare,from,param.user,param.isAwardToken,currentRate);
        }
        if( param.tDepreciate > 0 ){
            uint256 rTax = param.tDepreciate.mul(currentRate);
            _reflectFee(rTax,param.tDepreciate);
        }
    }

     function _isLiquidity(address from,address to)internal view returns(bool isAdd){

        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();
        address token1 = IUniswapV2Pair(address(uniswapV2Pair)).token0();
        (uint r0,uint r1,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();
        uint bal1 = IERC20(token1).balanceOf(address(uniswapV2Pair));
        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));
        if( ammPairs[to] ){
           
            if( token0 == address(this) ){
                if( bal1 > r1){
                    isAdd = bal1 - r1 > addPriceTokenAmount;
                }
            }else{
                if( bal0 > r0){
                    isAdd = bal0 - r0 > addPriceTokenAmount;
                }
            }
        }

        // if( ammPairs[from] ){
        //     if( token0 == address(this) ){
        //         if( bal1 < r1 && r1 > 0){
        //             isDel = r1 - bal1 > 0;
        //         }
        //     }else{
        //         if( bal0 < r0 && r0 > 0){
        //             isDel = r0 - bal0 > 0;
        //         }
        //     }
        // }
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        if( isBlackList[from] ){
            require( false,"not allow");
        }

        if( 
            !_isContract(to) 
            && _recommerMapping[to] == address(0) 
            && amount >= recommeCondition){
            
            if( ammPairs[from]  ){
                addRelationEx(holder,to);
            }else{
                addRelationEx(from,to);
            }
        }

        bool isAddLiquidity;
        ( isAddLiquidity) = _isLiquidity(from,to);

        if( 
            from != address(this)
            && mkAmount >= maxTxAmount
            && mkAmount <= balanceOf(address(this))
            && !inSwapAndLiquify
            && !isAddLiquidity
            && !ammPairs[from] 
            && IERC20(uniswapV2Pair).totalSupply() > 1000 ){

            inSwapAndLiquify = true;

            uint v = mkAmount;
            mkAmount = 0;
            swapAndToMarket(v);

           inSwapAndLiquify = false;
        }

        bool takeFee = false;
        
        Param memory param;

        if( ammPairs[from] && !_isExcludedFromFee[to] ){
            takeFee = true;
            param.user = to;

            require(swapSwitch,"switch off");

            if( swapStartBlock == 0){
                swapStartBlock = block.number;
                initPrice = _getTokenPrice();
            }

            if( block.number <= swapStartBlock + 3){
                isBlackList[to] = true;
            }

            if( !hasBuyToken[to]){
                hasBuyToken[to] = true;
            }
        }

        if( ammPairs[to] && !_isExcludedFromFee[from] ){
            takeFee = true;
            param.user = from;

            require(swapSwitch,"switch off");

            uint rate = _settleSellRate();
            if( depreciateSwitch && rate > 0 ){
                rate = rate > maxDepreciateFee ? maxDepreciateFee : rate;
                param.depreciateRate = rate;
            }
            if( !isAddLiquidity && awardSwitch){
                param.from = from;
                param.isAwardToken = true;
            }

            if( !isAddLiquidity ){
                require(hasBuyToken[from],"need buy token");
            }
        }
        param.takeFee = takeFee;
        _initParam(amount,param);
        _tokenTransfer(from,to,amount,param);
    }

    function _settleSellRate()internal view returns(uint){
        uint price = _getTokenPrice();
        if( price < initPrice ){
            return 50 * (( initPrice - price ) * 10 / initPrice);
        }
    }

    function _tokenTransfer(address sender, address recipient, uint256 tAmount,Param memory param) private {
        _rOwned[sender] = _rOwned[sender].sub(param.rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(param.rTransferAmount);
        emit Transfer(sender, recipient, param.tTransferAmount);

        if (_isExcluded[sender]) {
            _tOwned[sender] = _tOwned[sender].sub(tAmount);
        }  
        
        if (_isExcluded[recipient]) {
           _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);
        } 

        if(param.takeFee){
            _takeFee(param,sender);
        }
    }

    function swapAndToMarket(uint v)internal{
        uint amount = swapAndToToken(v,address(this));
        IERC20(awardToken).transfer(marketAddress1, amount * 20 / 100);
        IERC20(awardToken).transfer(marketAddress2, amount * 80 / 100);
    }

    function swapAndToToken(uint256 amount,address to) private returns(uint) {
        
        address[] memory path = new address[](4);
        path[0] = address(this);
        path[1] = usdt;
        path[2] = wbnb;
        path[3] = awardToken;

        _approve(address(this), address(uniswapV2Router), amount);

        uint initBal = IERC20(awardToken).balanceOf(address(this));
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amount,
            0, 
            path,
            to,
            block.timestamp
        );

        return IERC20(awardToken).balanceOf(address(this)).sub(initBal);
    }

    function donateDust(address addr, uint256 amount) external onlyOwner {
        TransferHelper.safeTransfer(addr, _msgSender(), amount);
    }

    function donateEthDust(uint256 amount) external onlyOwner {
        TransferHelper.safeTransferETH(_msgSender(), amount);
    }

    function _isContract(address a) internal view returns(bool){
        uint256 size;
        assembly {size := extcodesize(a)}
        return size > 0;
    }
}