{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"IXUSD.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\nimport \"./IERC20.sol\";\n\n/**\n * Exempt Surge Interface\n */\ninterface IXUSD is IERC20 {\n    function sell(uint256 amount) external;\n    function getUnderlyingAsset() external returns(address);\n    function stakeUnderlyingAsset(uint256 numTokens) external returns(bool);\n    function stakeUnderlyingAsset(address recipient, uint256 numTokens) external returns (bool);\n    function eraseHoldings(uint256 nHoldings) external;\n    function transferOwnership(address newOwner) external;\n    function volumeFor(address wallet) external view returns (uint256);\n    function calculatePrice() external view returns (uint256);\n}\n"},"XUSDTrader.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IERC20.sol\";\nimport \"./IXUSD.sol\";\n\n/**\n * Enhance Swapper by MoonMark / DeFi Mark\n */\ncontract XUSDTrader {\n    \n    IUniswapV2Router02 constant router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    address constant xUSD = 0x254246331cacbC0b2ea12bEF6632E4C6075f60e2;\n    address constant busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n    \n    address[] buyPath;\n    address[] sellPath;\n    address[] busdToBNB;\n    address[] bnbToBUSD;\n    \n    bool receiveDisabled;\n    \n    uint256 gasCost = 2 * 10**15;\n\n    mapping (address =\u003e bool) approved;\n    address _owner;\n    modifier onlyApproved(){require(approved[msg.sender], \u0027Only Approved\u0027); _;}\n    modifier onlyOwner(){require(msg.sender == _owner, \u0027Only Owner\u0027); _;}\n    \n    event Trade(uint256 startingAmount, uint256 endingAmount, address token);\n    \n    constructor() {\n        approved[msg.sender] = true;\n        _owner = msg.sender;\n\n        buyPath = new address[](2);\n        buyPath[0] = router.WETH();\n        buyPath[1] = xUSD;\n        \n        sellPath = new address[](2);\n        sellPath[0] = xUSD;\n        sellPath[1] = router.WETH();\n        \n        busdToBNB = new address[](2);\n        busdToBNB[0] = busd;\n        busdToBNB[1] = router.WETH();\n        \n        bnbToBUSD = new address[](2);\n        bnbToBUSD[0] = router.WETH();\n        bnbToBUSD[1] = busd;\n    }\n\n    function migrateOwner(address newOwner) external onlyOwner {\n        _owner = newOwner;\n    }\n    \n    function approve(address user, bool approveUser) external onlyOwner {\n        approved[user] = approveUser;\n    }\n\n    function setGasCost(uint256 newCost) external onlyOwner {\n        gasCost = newCost;\n    }\n\n    function sellCycle(uint256 amountTokens, bool requireProfit) external onlyOwner {\n        _sellCycle(amountTokens, requireProfit);\n    }\n\n    function withdraw(address token) external onlyOwner {\n        uint256 bal = IERC20(token).balanceOf(address(this));\n        require(bal \u003e 0, \u0027Zero Tokens\u0027);\n        IERC20(token).transfer(msg.sender, bal);\n    }\n    \n    function withdrawBNB() external onlyOwner {\n        (bool s,) = payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(s, \u0027Failure on BNB Withdrawal\u0027);\n    }\n    \n    function sellCycleXUSDIn(uint256 amountTokens) external {\n\n        uint256 before = IERC20(xUSD).balanceOf(address(this));\n        bool s = IERC20(xUSD).transferFrom(msg.sender, address(this), amountTokens);\n        uint256 diff = IERC20(xUSD).balanceOf(address(this)) - before;\n        require(diff \u003e 0 \u0026\u0026 s, \u0027Failure TransferFrom\u0027);\n\n        _sellCycle(diff, true);\n    }\n    \n    function buyCycle(bool requireProfit) external payable {\n        _buyCycle(msg.value, requireProfit);\n    }\n    \n    function buyCycle() external payable {\n        _buyCycle(msg.value, true);\n    }\n    \n    function sellCycle() external payable {\n        _sellCycleBNB(msg.value, true);\n    }\n    \n    function sellCycle(bool requireProfit) external payable {\n        _sellCycleBNB(msg.value, requireProfit);\n    }\n    \n    function getAmountsOut() public view returns (uint256, uint256) {\n        // Price of Tokens in BNB\n        uint256 pcsPrice = router.getAmountsOut(10**18, sellPath)[1];\n        // Price of BNB in USD\n        uint256 busdPrice = router.getAmountsOut(pcsPrice, bnbToBUSD)[1];\n        // Internal Price\n        uint256 coinPrice = IXUSD(xUSD).calculatePrice();\n        // Return Outputs\n        return (busdPrice, coinPrice);\n    }\n    \n    function opportunity() external view returns (bool) {\n        \n        (uint256 dexCurrent, uint256 actual) = getAmountsOut();\n        \n        uint256 diff = dexCurrent \u003e actual ? dexCurrent - actual : actual - dexCurrent;\n        \n        return dexCurrent \u003e actual ? diff \u003e (actual / 96) : diff \u003e (actual / 192);\n    }\n    \n    function _buyCycle(uint256 amountBNB, bool requireProfit) private {\n        \n        // buy XUSD on PCS\n        uint256 xUSDReceived = _buyXUSD(amountBNB, true);\n        require(xUSDReceived \u003e 0, \u0027Zero xUSD Received\u0027);\n        \n        // sell XUSD through contract\n        uint256 busdReceived = _sellXUSD(xUSDReceived, false);\n        require(busdReceived \u003e 0, \u0027Zero BUSD Received\u0027);\n\n        // swap BUSD for BNB\n        uint256 bnbReceived = _swapBUSDForBNB(busdReceived);\n        require(bnbReceived \u003e 0, \u0027Zero BNB Received\u0027);\n        \n        if (requireProfit) {\n            uint256 realizedCost = amountBNB + gasCost;\n            require(bnbReceived \u003e= realizedCost, \u0027Non Profitable Swap\u0027);\n        }\n\n        (bool s,) = payable(msg.sender).call{value: bnbReceived}(\"\");\n        require(s, \u0027Failure on BNB Transfer Back\u0027);\n\n        emit Trade(amountBNB, bnbReceived, router.WETH());\n    }\n    \n    function _sellCycle(uint256 amountXUSD, bool requireProfit) private {\n        \n        // sell XUSD for BNB on PCS\n        uint256 received = _sellXUSD(amountXUSD, true);\n        require(received \u003e 0, \u0027Zero BNB Received\u0027);\n        \n        // Buy XUSD Through Contract\n        uint256 xUSDReceived = _buyXUSD(received, false);\n        require(xUSDReceived \u003e 0, \u0027Zero xUSD Received\u0027);\n      \n        uint256 senderBal = IERC20(xUSD).balanceOf(msg.sender);\n        bool s = IERC20(xUSD).transfer(msg.sender, xUSDReceived);\n        xUSDReceived = IERC20(xUSD).balanceOf(msg.sender) - senderBal;\n        require(s \u0026\u0026 xUSDReceived \u003e 0);\n        \n        if (requireProfit) {\n            require(xUSDReceived \u003e= amountXUSD, \u0027Non Profitable Swap\u0027);\n        }\n        \n        emit Trade(amountXUSD, xUSDReceived, xUSD);\n    }\n    \n    function _sellCycleBNB(uint256 amount, bool requireProfit) private {\n        \n        // Buy XUSD Through Contract\n        uint256 xUSDReceived = _buyXUSD(amount, false);\n        require(xUSDReceived \u003e 0, \u0027Zero xUSD Received\u0027);\n        \n        // sell XUSD for BNB on PCS\n        uint256 received = _sellXUSD(xUSDReceived, true);\n        require(received \u003e 0, \u0027Zero BNB Received\u0027);\n        \n        if (requireProfit) {\n            require(received \u003e= amount + gasCost, \u0027Non Profitable Swap\u0027);\n        }\n        \n        (bool s,) = payable(msg.sender).call{value: received}(\"\");\n        require(s, \u0027Failure on BNB Transfer\u0027);\n        \n        emit Trade(amount, received, router.WETH());\n    }\n\n    function _swapBUSDForBNB(uint256 nBUSD) internal returns (uint256) {\n\n        uint256 bnbBefore = address(this).balance;\n        IERC20(busd).approve(address(router), nBUSD);\n        \n        receiveDisabled = true;\n        \n        // minimum output amount\n        uint256 minOut = (router.getAmountsOut(nBUSD, busdToBNB)[1] * 995) / 1000;\n\n        router.swapExactTokensForETH(\n            nBUSD,\n            minOut,\n            busdToBNB,\n            address(this),\n            block.timestamp + 30\n        );\n        \n        receiveDisabled = false;\n        \n        return address(this).balance - bnbBefore;\n    }\n    \n    function _buyXUSD(uint256 amountBNB, bool PCS) internal returns (uint256) {\n        if (PCS) {\n            // buy XUSD on PCS\n            uint256 before = IERC20(xUSD).balanceOf(address(this));\n            \n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountBNB}(\n                0,\n                buyPath,\n                address(this),\n                block.timestamp + 30\n            );\n            return IERC20(xUSD).balanceOf(address(this)) - before;\n            \n        } else {\n            \n            // xUSD Balance Before Swap\n            uint256 xusdBefore = IERC20(xUSD).balanceOf(address(this));\n\n            // buy XUSD with BNB\n            (bool s,) = payable(xUSD).call{value: amountBNB}(\"\");\n            require(s, \u0027Failure on XUSD Purchase\u0027);\n\n            // Note XUSD Received\n            return IERC20(xUSD).balanceOf(address(this)) - xusdBefore;\n        }\n    }\n\n    function _sellXUSD(uint256 amountXUSD, bool PCS) internal returns (uint256) {\n\n        if (PCS) {\n\n            uint256 before = address(this).balance;\n            receiveDisabled = true;\n            \n            IERC20(xUSD).approve(address(router), amountXUSD);\n            \n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                amountXUSD,\n                0,\n                sellPath,\n                address(this),\n                block.timestamp + 30\n            );\n            \n            receiveDisabled = false;\n\n            return address(this).balance - before;\n\n        } else {\n\n            // sell XUSD\n            uint256 busdBefore = IERC20(busd).balanceOf(address(this));\n            IXUSD(xUSD).sell(amountXUSD);\n            return IERC20(busd).balanceOf(address(this)) - busdBefore;\n\n        }\n\n    }\n    \n    function dexBNBPrices() external view returns (uint256 pcs, uint256 baby, uint256 bakery) {\n        (pcs, baby, bakery) = _dexBUSDPrices(10**18);\n    }\n    \n    function _dexBUSDPrices(uint256 amount) internal view returns (uint256 pcs, uint256 baby, uint256 bakery) {\n        \n        // Price of BNB in USD\n        pcs = router.getAmountsOut(amount, bnbToBUSD)[1];\n        baby = IUniswapV2Router02(0x325E343f1dE602396E256B67eFd1F61C3A6B38Bd).getAmountsOut(amount, bnbToBUSD)[1];\n        bakery = IUniswapV2Router02(0xCDe540d7eAFE93aC5fE6233Bee57E1270D3E330F).getAmountsOut(amount, bnbToBUSD)[1];\n\n    }\n    \n    // Swap For Enhance\n    receive() external payable {\n        if (receiveDisabled || msg.sender == address(router)) {\n            return;\n        }\n        _buyCycle(msg.value, false);\n    }\n    \n}\n"}}