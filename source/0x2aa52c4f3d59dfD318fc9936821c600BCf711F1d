
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol
pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol
pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: contracts/CMF.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.18;

import {IUniswapV2Factory} from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import {IUniswapV2Router02} from "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {SafeMath} from "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract ERC20 is IERC20, Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor() {
        _name = "Chain Master Finance BSC";
        _symbol = "CMFB";
        _decimals = 18;
    }

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(
        address account
    ) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(
        address owner,
        address spender
    ) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(
        address spender,
        uint256 amount
    ) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(
        address spender,
        uint256 addedValue
    ) public virtual returns (bool) {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(
        address spender,
        uint256 subtractedValue
    ) public virtual returns (bool) {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(
            amount,
            "ERC20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(
            amount,
            "ERC20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _setupDecimals(uint8 decimals_) internal virtual {
        _decimals = decimals_;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

interface IDividendDistributor {
    function setDistributionCriteria(
        uint256 _minPeriod,
        uint256 _minDistribution
    ) external;

    function setShare(address shareholder, uint256 amount) external;

    function deposit(uint256 _busAmount) external payable;

    function process(uint256 gas) external;
}

contract CMFB is ERC20 {
    using SafeMath for uint256;

    IERC20 public token;

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;
    IDividendDistributor public distributor;

    address public usdtDividendToken;

    bool private swapping;
    bool public swapAndLiquifyEnabled;
    bool public usdtRewardsEnabled;

    uint256 public maxSellTransactionAmount;
    uint256 public maxWalletBalance;

    uint256 public usdtRewardLimit;

    //Addresses
    address public burnAddress;
    address public cmfMinerAddress;
    address public cmfNetworkAddress;

    uint256 public _usdtRewardsFeeBuy;
    uint256 public _burnFeeBuy;
    uint256 public _LpFeeBuy;
    uint256 public _cmfMinerFeeBuy;
    uint256 public _cmfNetworkFeeBuy;

    uint256 public _usdtRewardsFeeSell;
    uint256 public _burnFeeSell;
    uint256 public _LpFeeSell;
    uint256 public _cmfMinerFeeSell;
    uint256 public _cmfNetworkFeeSell;

    uint256 public tokensForLpInContract;
    uint256 public tokensForUsdtRewardsInContract;

    mapping(address => bool) private isExcludedFromFees;
    mapping(address => bool) public isDividendExempt;

    // Store addresses that an automatic market maker pairs, any transfer *to* these addresses
    // Could be subject to a maximum transfer amount
    mapping(address => bool) public automatedMarketMakerPairs;

    struct TempFeeStruct {
        uint256 tmpUsdtRewardPercent;
        uint256 tmpBurnPercent;
        uint256 tmpLpPercent;
        uint256 tmpCmfMinerPercent;
        uint256 tmpCmfNetworkPercent;
    }

    struct FeeStruct {
        uint256 usdtDividendRewardsFee;
        uint256 burnFee;
        uint256 liquidityFee;
        uint256 cmfMinerFee;
        uint256 cmfNetworkFee;
    }

    event UpdateUniswapV2Router(
        address indexed newAddress,
        address indexed oldAddress
    );

    event ExcludeFromFees(address indexed account, bool isExcluded);
    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);

    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 bnbReceived,
        uint256 tokensIntoLiqudity
    );
    event Airdrop(address holder, uint256 amount);

    event DEBUG(uint256 idx, address adr, uint256 n);

    constructor() ERC20() {
        swapAndLiquifyEnabled = true;
        usdtRewardsEnabled = true;
        maxSellTransactionAmount = 200_000 * (10 ** 18); // 200K
        maxWalletBalance = 5_000_000 * (10 ** 18); // 5 million
        usdtRewardLimit = 50_000 * 1e18; // 50K

        //Addresses
        burnAddress = 0x000000000000000000000000000000000000dEaD;
        cmfMinerAddress = 0x74680485a05a77430F9d73c47c5c0D5bfB8A3289;
        cmfNetworkAddress = 0xee304Bc2a10540c7B1F83f456E5eE895A5Dd7F0D;
        usdtDividendToken = 0x55d398326f99059fF775485246999027B3197955; //USDT Address

        //Buy Fees 10%

        _usdtRewardsFeeBuy = 200;
        _burnFeeBuy = 200;
        _LpFeeBuy = 200;
        _cmfMinerFeeBuy = 200;
        _cmfNetworkFeeBuy = 200;

        //Sell Fees 14%

        _usdtRewardsFeeSell = 600;
        _burnFeeSell = 200;
        _LpFeeSell = 200;
        _cmfMinerFeeSell = 200;
        _cmfNetworkFeeSell = 200;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );
        // Create a uniswap pair for the $NOVO token
        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = _uniswapV2Pair;

        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);

        isDividendExempt[address(this)] = true;
        isDividendExempt[address(_uniswapV2Router)] = true;
        isDividendExempt[_uniswapV2Pair] = true;
        isDividendExempt[burnAddress] = true;

        // Exclude from paying fees or having a max transaction amount
        excludeFromFees(burnAddress, true);
        excludeFromFees(cmfMinerAddress, true);
        excludeFromFees(cmfNetworkAddress, true);
        excludeFromFees(address(this), true);
        excludeFromFees(owner(), true);

        _mint(owner(), 1_000_000_000 * (10 ** 18)); // 1 billion
    }

    receive() external payable {}

    fallback() external payable {}

    function setWalletBalance(uint256 _maxWalletBalance) external onlyOwner {
        maxWalletBalance = _maxWalletBalance * (10 ** 18);
    }

    function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {
        maxSellTransactionAmount = _maxTxn * (10 ** 18);
    }

    function setCmfMinerAddress(address _cmfMinerAddress) external onlyOwner {
        require(
            _cmfMinerAddress != address(0) &&
                _cmfMinerAddress != cmfMinerAddress &&
                _cmfMinerAddress != address(this),
            "Invalid Cmf Miner Address"
        );
        cmfMinerAddress = _cmfMinerAddress;
        excludeFromFees(_cmfMinerAddress, true);
    }

    function setCmfNetworkAddress(
        address _cmfNetworkAddress
    ) external onlyOwner {
        require(
            _cmfNetworkAddress != address(0) &&
                _cmfNetworkAddress != cmfNetworkAddress &&
                _cmfNetworkAddress != address(this),
            "Invalid Cmf Network Address"
        );
        cmfNetworkAddress = _cmfNetworkAddress;
        excludeFromFees(_cmfNetworkAddress, true);
    }

    function setBuyFees(
        uint256 usdtRewardFeeBuy,
        uint256 burnFeeBuy,
        uint256 lpFeeBuy,
        uint256 cmfMinerFeeBuy,
        uint256 cmfNetworkFeeBuy
    ) external onlyOwner {
        require(
            usdtRewardFeeBuy +
                burnFeeBuy +
                lpFeeBuy +
                cmfMinerFeeBuy +
                cmfNetworkFeeBuy <=
                16,
            "Max Buy Fee is 16%"
        );
        _usdtRewardsFeeBuy = usdtRewardFeeBuy * 100;
        _burnFeeBuy = burnFeeBuy * 100;
        _LpFeeBuy = lpFeeBuy * 100;
        _cmfMinerFeeBuy = cmfMinerFeeBuy * 100;
        _cmfNetworkFeeBuy = cmfNetworkFeeBuy * 100;
    }

    function setSellFees(
        uint256 usdtRewardFeeSell,
        uint256 burnFeeSell,
        uint256 lpFeeSell,
        uint256 cmfMinerFeeSell,
        uint256 cmfNetworkFeeSell
    ) external onlyOwner {
        require(
            usdtRewardFeeSell +
                burnFeeSell +
                lpFeeSell +
                cmfMinerFeeSell +
                cmfNetworkFeeSell <=
                16,
            "Max Sell Fee is 16%"
        );
        _usdtRewardsFeeSell = usdtRewardFeeSell * 100;
        _burnFeeSell = burnFeeSell * 100;
        _LpFeeSell = lpFeeSell * 100;
        _cmfMinerFeeSell = cmfMinerFeeSell * 100;
        _cmfNetworkFeeSell = cmfNetworkFeeSell * 100;
    }

    function setUsdtRewardsStatus(bool _enabled) external onlyOwner {
        require(
            usdtRewardsEnabled != _enabled,
            "Can't set flag to same status"
        );
        usdtRewardsEnabled = _enabled;
    }

    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {
        require(
            swapAndLiquifyEnabled != _enabled,
            "Can't set flag to same status"
        );
        swapAndLiquifyEnabled = _enabled;
    }

    function updateUniswapV2Router(address newAddress) external onlyOwner {
        require(
            newAddress != address(uniswapV2Router),
            "The router already has the same address"
        );
        uniswapV2Router = IUniswapV2Router02(newAddress);
        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        require(
            isExcludedFromFees[account] != excluded,
            "Account is already exluded from fees"
        );
        isExcludedFromFees[account] = excluded;

        emit ExcludeFromFees(account, excluded);
    }

    function excludeMultipleAccountsFromFees(
        address[] memory _accounts,
        bool _excluded
    ) public onlyOwner {
        for (uint256 i = 0; i < _accounts.length; i++) {
            isExcludedFromFees[_accounts[i]] = _excluded;
        }

        emit ExcludeMultipleAccountsFromFees(_accounts, _excluded);
    }

    function setAutomatedMarketMakerPair(
        address pair,
        bool value
    ) public onlyOwner {
        require(
            pair != uniswapV2Pair,
            "The PancakeSwap pair cannot be removed from Automated Market Maker Pairs"
        );

        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        require(
            automatedMarketMakerPairs[pair] != value,
            "Automated market maker pair is already set to that value"
        );
        automatedMarketMakerPairs[pair] = value;
        if (value) {
            isDividendExempt[pair] = true;
        }
        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function setIsDividendExempt(
        address holder,
        bool exempt
    ) external onlyOwner {
        require(holder != address(this) && holder != uniswapV2Pair);
        isDividendExempt[holder] = exempt;
        if (exempt) {
            distributor.setShare(holder, 0);
        } else {
            distributor.setShare(holder, balanceOf(holder));
        }
    }

    function setDividendDistributor(
        address _dividendDistributor
    ) external onlyOwner {
        distributor = IDividendDistributor(_dividendDistributor);
        isDividendExempt[_dividendDistributor] = true;
    }

    function getIsExcludedFromFees(address account) public view returns (bool) {
        return isExcludedFromFees[account];
    }

    function setUsdtRewardLimit(uint256 _usdtRewardLimit) external onlyOwner {
        require(_usdtRewardLimit <= 50_000, "Max limit is 50K USDT Rewards Limit");
        usdtRewardLimit = _usdtRewardLimit * 10**18;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        bool excludedAccount = isExcludedFromFees[from] ||
            isExcludedFromFees[to];
        FeeStruct memory fee;

        if (!automatedMarketMakerPairs[to] && !excludedAccount) {
            require(
                balanceOf(to).add(amount) <= maxWalletBalance,
                "Wallet balance is exceeding maxWalletBalance"
            );
        }

        if (automatedMarketMakerPairs[from] && !excludedAccount) {
            fee.usdtDividendRewardsFee = _usdtRewardsFeeBuy;
            fee.burnFee = _burnFeeBuy;
            fee.liquidityFee = _LpFeeBuy;
            fee.cmfMinerFee = _cmfMinerFeeBuy;
            fee.cmfNetworkFee = _cmfNetworkFeeBuy;
        } else if (automatedMarketMakerPairs[to] && !excludedAccount) {
            require(
                amount <= maxSellTransactionAmount,
                "Sell transfer amount exceeds the maxSellTransactionAmount."
            );

            fee.usdtDividendRewardsFee = _usdtRewardsFeeSell;
            fee.liquidityFee = _LpFeeSell;
            fee.burnFee = _burnFeeSell;
            fee.cmfMinerFee = _cmfMinerFeeSell;
            fee.cmfNetworkFee = _cmfNetworkFeeSell;
        }

        if (!swapping && from != uniswapV2Pair) {
            swapping = true;

            if (swapAndLiquifyEnabled && tokensForLpInContract > 0) {
                swapAndLiquify(tokensForLpInContract);
                tokensForLpInContract = 0;
            }

            if (usdtRewardsEnabled && tokensForUsdtRewardsInContract > 0) {
                depositAmountToUsdtReward(tokensForUsdtRewardsInContract);
                tokensForUsdtRewardsInContract = 0;
            }

            swapping = false;
        }

        bool takeFee = !swapping && !excludedAccount;

        if (takeFee && (from == uniswapV2Pair || to == uniswapV2Pair)) {
            uint256 fees;

            TempFeeStruct memory tempFee;

            tempFee.tmpUsdtRewardPercent = amount
                .mul(fee.usdtDividendRewardsFee)
                .div(10000);
            tempFee.tmpLpPercent = amount.mul(fee.liquidityFee).div(10000);
            tempFee.tmpBurnPercent = amount.mul(fee.burnFee).div(10000);
            tempFee.tmpCmfMinerPercent = amount.mul(fee.cmfMinerFee).div(10000);
            tempFee.tmpCmfNetworkPercent = amount.mul(fee.cmfNetworkFee).div(
                10000
            );

            fees = tempFee
                .tmpLpPercent
                .add(tempFee.tmpUsdtRewardPercent)
                .add(tempFee.tmpBurnPercent)
                .add(tempFee.tmpCmfMinerPercent)
                .add(tempFee.tmpCmfNetworkPercent);

            tokensForLpInContract = tokensForLpInContract.add(
                tempFee.tmpLpPercent
            );

            tokensForUsdtRewardsInContract = tokensForUsdtRewardsInContract.add(
                    tempFee.tmpCmfNetworkPercent
                );

            amount = amount.sub(fees);
            super._transfer(from, address(this), fees);
            super._transfer(address(this), burnAddress, tempFee.tmpBurnPercent);
            super._transfer(
                address(this),
                cmfMinerAddress,
                tempFee.tmpCmfMinerPercent
            );
            super._transfer(
                address(this),
                cmfNetworkAddress,
                tempFee.tmpCmfNetworkPercent
            );
        }

        super._transfer(from, to, amount);

        if (usdtRewardsEnabled) {
            if (!isDividendExempt[from]) {
                if (balanceOf(from) >= usdtRewardLimit) {
                    try distributor.setShare(from, balanceOf(from)) {} catch {
                        emit DEBUG(0, from, 1);
                    }
                } else {
                    try distributor.setShare(from, 0) {} catch {
                        emit DEBUG(0, from, 2);
                    }
                }
            }
            if (!isDividendExempt[to]) {
                if (balanceOf(to) >= usdtRewardLimit) {
                    try distributor.setShare(to, balanceOf(to)) {} catch {
                        emit DEBUG(0, to, 3);
                    }
                } else {
                    try distributor.setShare(to, 0) {} catch {
                        emit DEBUG(0, to, 4);
                    }
                }
            }
        }
    }

    function depositAmountToUsdtReward(uint256 amount) private {
        swapTokensForDividendToken(amount, address(this), usdtDividendToken);
        uint256 usdtBalance = IERC20(usdtDividendToken).balanceOf(
            address(this)
        );
        IERC20(usdtDividendToken).approve(address(distributor), usdtBalance);

        try distributor.deposit(usdtBalance) {} catch {
            emit DEBUG(0, address(this), 5);
        } //USDT rewardS
    }

    function swapAndLiquify(uint256 contractTokenBalance) private {
        // Split the contract balance into halves
        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);

        uint256 initialBalance = address(this).balance;

        swapTokensForBNB(half);

        uint256 newBalance = address(this).balance.sub(initialBalance);

        addLiquidity(otherHalf, newBalance);

        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {
        // Approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Add the liquidity
        uniswapV2Router.addLiquidityETH{value: bnbAmount}(
            address(this),
            tokenAmount,
            0, // Slippage is unavoidable
            0, // Slippage is unavoidable
            cmfMinerAddress,
            block.timestamp
        );
    }

    function swapTokensForBNB(uint256 tokenAmount) private {
        // Generate the PanCakeSwap pair path of token -> WETH
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Process the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // Accept any amount of BNB
            path,
            address(this),
            block.timestamp
        );
    }

    function swapTokensForDividendToken(
        uint256 _tokenAmount,
        address _recipient,
        address _dividendAddress
    ) private {
        address[] memory path = new address[](3);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        path[2] = _dividendAddress;

        _approve(address(this), address(uniswapV2Router), _tokenAmount);

        // Process the swap
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            _tokenAmount,
            0, // Acceptance amount of any dividend token
            path,
            _recipient,
            block.timestamp
        );
    }

    function multiSend(
        address[] calldata _contributors,
        uint256[] calldata _balances
    ) public onlyOwner {
        require(
            _contributors.length == _balances.length,
            "Contributors and balances must be same size"
        );
        // Max 200 sends in bulk, uint8 in loop limited to 255
        require(
            _contributors.length <= 200,
            "Contributor list length must be <= 200"
        );
        uint256 sumOfBalances = 0;
        for (uint8 i = 0; i < _balances.length; i++) {
            sumOfBalances = sumOfBalances.add(_balances[i]);
        }
        require(
            balanceOf(msg.sender) >= sumOfBalances,
            "Account balance must be >= sum of balances. "
        );
        require(
            allowance(msg.sender, address(this)) >= sumOfBalances,
            "Contract allowance must be >= sum of balances. "
        );
        address contributor;
        uint256 origBalance;
        for (uint8 j; j < _contributors.length; j++) {
            contributor = _contributors[j];
            require(
                contributor != address(0) &&
                    contributor != 0x000000000000000000000000000000000000dEaD,
                "Cannot airdrop to a dead address"
            );
            origBalance = balanceOf(contributor);
            this.transferFrom(msg.sender, contributor, _balances[j]);
            require(
                balanceOf(contributor) == origBalance + _balances[j],
                "Contributor must recieve full balance of airdrop"
            );
            emit Airdrop(contributor, _balances[j]);
        }
    }

    function airdropToWallets(
        address[] calldata airdropWallets,
        uint256[] calldata amount
    ) external onlyOwner {
        require(
            airdropWallets.length == amount.length,
            "Arrays must be the same length"
        );
        require(
            airdropWallets.length <= 200,
            "Wallets list length must be <= 200"
        );

        for (uint256 i = 0; i < airdropWallets.length; i++) {
            address wallet = airdropWallets[i];
            uint256 airdropAmount = amount[i] * (10 ** 18);
            super._transfer(msg.sender, wallet, airdropAmount);
            if (!isDividendExempt[wallet]) {
                if (balanceOf(wallet) >= usdtRewardLimit) {
                    try distributor.setShare(wallet, airdropAmount) {} catch {}
                } else {
                    try distributor.setShare(wallet, 0) {} catch {}
                }
            }
        }
    }
}

