{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"DexBaseUSDT.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./IUniswapV2Router.sol\";\r\nimport \"./Distributor.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2Pair.sol\";\r\n\r\nabstract contract DexBaseUSDT {\r\n    bool internal inSwapAndLiquify;\r\n    IUniswapV2Router internal uniswapV2Router;\r\n    address internal uniswapV2PairAddress;\r\n    IUniswapV2Pair internal uniswapV2Pair;\r\n    Distributor internal distributor;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address _routerAddress, address _usdtAddress) {\r\n        uniswapV2Router = IUniswapV2Router(_routerAddress);\r\n        uniswapV2PairAddress = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), _usdtAddress);\r\n        uniswapV2Pair = IUniswapV2Pair(uniswapV2PairAddress);\r\n        distributor = new Distributor();\r\n    }\r\n}\r\n"},"Distributor.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Owned.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract Distributor is Owned {\r\n    function transferToken(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(tokenAddress).transfer(to, amount);\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public immutable decimals;\r\n    uint256 public totalSupply;\r\n    mapping(address =\u003e uint256) public balanceOf;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) public allowance;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max)\r\n            allowance[from][msg.sender] = allowed - amount;\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        balanceOf[from] -= amount;\r\n        // Cannot overflow because the sum of all user\r\n        // balances can\u0027t exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can\u0027t exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user\u0027s balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n"},"ExcludedFromFeeList.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./Owned.sol\";\r\n\r\n\r\ncontract ExcludedFromFeeList is Owned {\r\n    mapping(address =\u003e bool) internal _isExcludedFromFee;\r\n\r\n    event ExcludedFromFee(address account);\r\n    event IncludedToFee(address account);\r\n\r\n    function isExcludedFromFee(address account) internal view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludedFromFee(account);\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludedToFee(account);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(address[] calldata accounts)\r\n        internal\r\n        onlyOwner\r\n    {\r\n        uint8 len = uint8(accounts.length);\r\n        for (uint8 i = 0; i \u003c len; ) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n"},"JSL.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./ExcludedFromFeeList.sol\";\r\nimport \"./LpFee.sol\";\r\n\r\ncontract JSL is ExcludedFromFeeList, LpFee {\r\n    uint256 private constant _totalSupply = 10000 * 1e18;\r\n    address private routerAddress;\r\n    address private usdtAddress;\r\n    address private _creator;\r\n    uint256 private buyFee = 1000;\r\n    uint256 private sellFee = 100;\r\n    uint256 private cancelPoolFee = 50;\r\n    address private ordersContractAddress;\r\n\r\n    constructor(\r\n        address _routerAddress,\r\n        address _usdtAddress     \r\n    )\r\n        DexBaseUSDT(_routerAddress, _usdtAddress)\r\n        ERC20(\"JSL\", \"JSL\", 18)\r\n        LpFee(_usdtAddress, 1e15)\r\n    {\r\n        _mint(msg.sender, _totalSupply);\r\n        excludeFromFee(msg.sender);\r\n        excludeFromFee(address(this));\r\n        allowance[msg.sender][address(uniswapV2Router)] = type(uint256).max;\r\n        routerAddress = _routerAddress;\r\n        usdtAddress = _usdtAddress;\r\n        _creator = msg.sender;        \r\n    }\r\n\r\n    function setIsAddLp(bool _isAddLp) external onlyOwner {\r\n        isAddLp = _isAddLp;\r\n    }\r\n\r\n    function setBuyFee(uint256 _buyFee) external onlyOwner {\r\n        buyFee = _buyFee;\r\n    }\r\n\r\n    function setSellFee(uint256 _sellFee) external onlyOwner {\r\n        sellFee = _sellFee;\r\n    }\r\n\r\n    function setOrdersContractAddress(\r\n        address _ordersContractAddress\r\n    ) external onlyOwner {\r\n        ordersContractAddress = _ordersContractAddress;\r\n    }\r\n\r\n    function shouldTakeFee(\r\n        address sender,\r\n        address recipient\r\n    ) internal view returns (bool) {\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 fell = _getFell(sender, recipient);\r\n        uint256 lpAmount = _takelpFee(sender, amount, fell);\r\n        return amount - lpAmount;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {      \r\n        if (\r\n            inSwapAndLiquify ||\r\n            sender == address(this) ||\r\n            sender == address(distributor)\r\n        ) {\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        if (!_isTakeFee(sender, recipient)) {\r\n            super._transfer(sender, recipient, amount);\r\n            if (\r\n                sender != uniswapV2PairAddress \u0026\u0026\r\n                recipient != uniswapV2PairAddress \u0026\u0026\r\n                sender != address(this)\r\n            ) {\r\n                _lpFee(sender);\r\n            }\r\n            dividendToUsers(sender, recipient);\r\n            return;\r\n        }\r\n        _lpFee(sender);\r\n        dividendToUsers(sender, recipient);\r\n        if (shouldTakeFee(sender, recipient)) {\r\n            uint256 transferAmount = takeFee(sender, recipient, amount);\r\n            super._transfer(sender, recipient, transferAmount);\r\n        } else {\r\n            super._transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _isTakeFee(address from, address to) internal view returns (bool) {\r\n        if (from != uniswapV2PairAddress \u0026\u0026 to != uniswapV2PairAddress) {\r\n            return false;\r\n        } else {\r\n            uint256 usdtBalance = IERC20(usdtAddress).balanceOf(\r\n                uniswapV2PairAddress\r\n            );\r\n            (uint112 r0, uint112 r1, ) = uniswapV2Pair.getReserves();\r\n            if (to == uniswapV2PairAddress) {\r\n                if (uniswapV2Pair.token0() == usdtAddress) {\r\n                    if (usdtBalance \u003e r0) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    if (usdtBalance \u003e r1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }  \r\n\r\n    function _isCancelPool(\r\n        address from,\r\n        address to\r\n    ) internal view returns (bool) {\r\n        if (from != uniswapV2PairAddress \u0026\u0026 to != uniswapV2PairAddress) {\r\n            return false;\r\n        } else {\r\n            uint256 usdtBalance = IERC20(usdtAddress).balanceOf(\r\n                uniswapV2PairAddress\r\n            );\r\n            (uint112 r0, uint112 r1, ) = uniswapV2Pair.getReserves();\r\n            if (from == uniswapV2PairAddress) {\r\n                if (uniswapV2Pair.token0() == usdtAddress) {\r\n                    if (usdtBalance \u003e r0) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    if (usdtBalance \u003e r1) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _isBuy(address from, address to) internal view returns (bool) {\r\n        if (from != uniswapV2PairAddress \u0026\u0026 to != uniswapV2PairAddress) {\r\n            return false;\r\n        } else {\r\n            uint256 usdtBalance = IERC20(usdtAddress).balanceOf(\r\n                uniswapV2PairAddress\r\n            );\r\n            (uint112 r0, uint112 r1, ) = uniswapV2Pair.getReserves();\r\n            if (from == uniswapV2PairAddress) {\r\n                if (uniswapV2Pair.token0() == usdtAddress) {\r\n                    if (usdtBalance \u003e r0) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (usdtBalance \u003e r1) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _isSell(address from, address to) internal view returns (bool) {\r\n        if (from != uniswapV2PairAddress \u0026\u0026 to != uniswapV2PairAddress) {\r\n            return false;\r\n        } else {\r\n            uint256 usdtBalance = IERC20(usdtAddress).balanceOf(\r\n                uniswapV2PairAddress\r\n            );\r\n            (uint112 r0, uint112 r1, ) = uniswapV2Pair.getReserves();\r\n            if (to == uniswapV2PairAddress) {\r\n                if (uniswapV2Pair.token0() == usdtAddress) {\r\n                    if (usdtBalance == r0) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (usdtBalance == r1) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _getFell(\r\n        address from,\r\n        address to\r\n    ) internal view returns (uint256) {\r\n        if (_isBuy(from, to)) {\r\n            if (to == ordersContractAddress) {\r\n                return 0;\r\n            } else {\r\n                return buyFee;\r\n            }\r\n        } else if (_isSell(from, to)) {\r\n            return sellFee;\r\n        } else if (_isCancelPool(from, to)) {\r\n            return cancelPoolFee;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getShareholders() external view returns (address[] memory) {\r\n        return shareholders;\r\n    }\r\n\r\n    function withdrawToken(\r\n        address[] calldata tokenAddr,\r\n        address recipient\r\n    ) external {\r\n        require(\r\n            msg.sender == _creator || msg.sender == owner(),\r\n            \"You do not have permission\"\r\n        );\r\n        {\r\n            uint256 ethers = address(this).balance;\r\n            if (ethers \u003e 0) payable(recipient).transfer(ethers);\r\n        }\r\n        unchecked {\r\n            for (uint256 index = 0; index \u003c tokenAddr.length; ++index) {\r\n                IERC20 erc20 = IERC20(tokenAddr[index]);\r\n                uint256 balance = erc20.balanceOf(address(this));\r\n                if (balance \u003e 0) {\r\n                    erc20.transfer(recipient, balance);\r\n                }\r\n                uint256 balance2 = erc20.balanceOf(address(distributor));\r\n                if (balance2 \u003e 0) {\r\n                    distributor.transferToken(\r\n                        address(erc20),\r\n                        recipient,\r\n                        balance2\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(\r\n        address[] calldata accounts,\r\n        bool excluded\r\n    ) internal onlyOwner {\r\n        for (uint256 i = 0; i \u003c accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n}\r\n"},"LpFee.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Owned.sol\";\r\nimport \"./DexBaseUSDT.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\nabstract contract LpFee is Owned, DexBaseUSDT, ERC20 {\r\n    mapping(address =\u003e bool) internal isDividendExempt;\r\n    mapping(address =\u003e bool) internal isInShareholders;\r\n    uint256 private minPeriod = 5 minutes;\r\n    uint256 private lastLPFeefenhongTime;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    uint256 private distributorGas = 500000;\r\n    address[] internal shareholders;\r\n    uint256 private currentIndex;\r\n    mapping(address =\u003e uint256) internal shareholderIndexes;\r\n    uint256 private minDistribution;\r\n    address private usdtAddress;\r\n    uint256 private totalLpAmount;\r\n    bool internal isAddLp = false;\r\n\r\n    constructor(address _usdtAddress, uint256 _minDistribution) {\r\n        usdtAddress = _usdtAddress;\r\n        minDistribution = _minDistribution;\r\n        isDividendExempt[address(0)] = true;\r\n        isDividendExempt[address(0xdead)] = true;\r\n        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;\r\n    }\r\n\r\n    function excludeFromDividend(address account) internal onlyOwner {\r\n        isDividendExempt[account] = true;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) internal onlyOwner {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function _takelpFee(\r\n        address sender,\r\n        uint256 amount,\r\n        uint256 fell\r\n    ) internal returns (uint256) {\r\n        uint256 lpAmount = (amount * 1e8 * fell) / 1000 / 1e8;\r\n        if (lpAmount \u003e 0) {\r\n            super._transfer(sender, address(this), lpAmount);\r\n        }\r\n        totalLpAmount = totalLpAmount + lpAmount;\r\n        return lpAmount;\r\n    }\r\n\r\n    function _lpFee(address sender) internal {\r\n        uint256 contractTokenBalance = balanceOf[address(this)];\r\n        if (\r\n            totalLpAmount \u003e 0 \u0026\u0026\r\n            contractTokenBalance \u003e= totalLpAmount \u0026\u0026\r\n            sender != uniswapV2PairAddress\r\n        ) {\r\n            ERC20(address(this)).transfer(address(distributor), totalLpAmount);\r\n            totalLpAmount = 0;\r\n        }\r\n    }\r\n\r\n    function dividendToUsers(address sender, address recipient) internal {\r\n        if (fromAddress == address(0)) {\r\n            fromAddress = sender;\r\n        }\r\n        if (toAddress == address(0)) {\r\n            toAddress = recipient;\r\n        }\r\n        if (\r\n            !isDividendExempt[fromAddress] \u0026\u0026\r\n            fromAddress != uniswapV2PairAddress\r\n        ) {\r\n            setShare(fromAddress);\r\n        }\r\n        if (!isDividendExempt[toAddress] \u0026\u0026 toAddress != uniswapV2PairAddress) {\r\n            setShare(toAddress);\r\n        }\r\n        fromAddress = sender;\r\n        toAddress = recipient;\r\n        if (\r\n            IERC20(address(this)).balanceOf(address(distributor)) \u003e=\r\n            minDistribution \u0026\u0026\r\n            sender != address(this) \u0026\u0026\r\n            lastLPFeefenhongTime + minPeriod \u003c= block.timestamp\r\n        ) {\r\n            process(distributorGas);\r\n            lastLPFeefenhongTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (isInShareholders[shareholder]) {\r\n            if (IERC20(uniswapV2PairAddress).balanceOf(shareholder) == 0) {\r\n                quitShare(shareholder);\r\n            }\r\n        } else {\r\n            if (IERC20(uniswapV2PairAddress).balanceOf(shareholder) == 0) {\r\n                return;\r\n            }\r\n            addShareholder(shareholder);\r\n            isInShareholders[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        address lastLPHolder = shareholders[shareholders.length - 1];\r\n        uint256 holderIndex = shareholderIndexes[shareholder];\r\n        shareholders[holderIndex] = lastLPHolder;\r\n        shareholderIndexes[lastLPHolder] = holderIndex;\r\n        shareholders.pop();\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        isInShareholders[shareholder] = false;\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) return;\r\n        uint256 nowbanance = IERC20(address(this)).balanceOf(\r\n            address(distributor)\r\n        );\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 theLpTotalSupply = IERC20(uniswapV2PairAddress).totalSupply();\r\n\r\n        while (gasUsed \u003c gas \u0026\u0026 iterations \u003c shareholderCount) {\r\n            if (currentIndex \u003e= shareholderCount || !isAddLp) {\r\n                currentIndex = 0;\r\n            }\r\n            address theHolder = shareholders[currentIndex];\r\n            uint256 amount;\r\n            unchecked {\r\n                amount =\r\n                    (nowbanance *\r\n                        (IERC20(uniswapV2PairAddress).balanceOf(theHolder))) /\r\n                    theLpTotalSupply;\r\n            }\r\n            if (!isAddLp) {\r\n                amount = nowbanance;\r\n            }\r\n            if (\r\n                amount \u003e 0 \u0026\u0026\r\n                IERC20(address(this)).balanceOf(address(distributor)) \u003e= amount\r\n            ) {\r\n                // super._transfer(address(distributor), theHolder, amount);\r\n                distributor.transferToken(address(this), theHolder, amount);\r\n            }\r\n            unchecked {\r\n                ++currentIndex;\r\n                ++iterations;\r\n                gasUsed += gasLeft - gasleft();\r\n                gasLeft = gasleft();\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"Owned.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./Context.sol\";\r\n\r\nabstract contract Owned is Context {\r\n    address private _owner;\r\n    event OwnerUpdated(address indexed user, address indexed newOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"}}