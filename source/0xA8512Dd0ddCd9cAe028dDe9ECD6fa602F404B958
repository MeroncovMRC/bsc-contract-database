pragma solidity ^0.8.0;
// SPDX-License-Identifier: Unlicensed

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

    interface Erc20Token {//konwnsec//ERC20 接口
        function totalSupply() external view returns (uint256);
        function balanceOf(address _who) external view returns (uint256);
        function transfer(address _to, uint256 _value) external;
        function allowance(address _owner, address _spender) external view returns (uint256);
        function transferFrom(address _from, address _to, uint256 _value) external;
        function approve(address _spender, uint256 _value) external; 
        function burnFrom(address _from, uint256 _value) external; 
        event Transfer(address indexed from, address indexed to, uint256 value);
        event Approval(address indexed owner, address indexed spender, uint256 value);
            function decimals() external pure returns (uint8);

    }

 
 


    contract Base {
    using SafeMath for uint256;
 
         address SMA = 0x72fBAf6D5c402f12D52A2CfBc6239531e3dE90E3 ;
      address USDT = 0x8ba04bC049D372B66Ab60f07fB7e45F49bB3273a;

         Erc20Token    internal _SMA  = Erc20Token(0x72fBAf6D5c402f12D52A2CfBc6239531e3dE90E3);
        Erc20Token constant  internal _USDTAddr = Erc20Token(0x8ba04bC049D372B66Ab60f07fB7e45F49bB3273a);
         address public Uaddress = 0xf2eB05993900f7D8C66432973F4871AA8AC20A90; 
        address  _owner;
   
        modifier onlyOwner() {
            require(msg.sender == _owner, "Permission denied"); _;
        }
        modifier isZeroAddr(address addr) {
            require(addr != address(0), "Cannot be a zero address"); _; 
        }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        _owner = newOwner;
    }
    address  _Powner = 0xf2eB05993900f7D8C66432973F4871AA8AC20A90;

    modifier only_Powner() {
            require(msg.sender == _Powner, "Permission denied"); _;
    }
    function transferPownership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        _Powner = newOwner;
    }

 
    function setUaddressship(address newaddress) public onlyOwner {
        require(newaddress != address(0));
        Uaddress = newaddress;
    }
   

 
    receive() external payable {}  
}

contract LP is Base {
    using SafeMath for uint256;
     address xsqg;

 
    constructor(){
        _owner = msg.sender;
     }
  
    function setxsqg(address xsqgAddress) external  onlyOwner{
        xsqg = xsqgAddress;
    }


   function getPrice1( )
        public
        view
        returns (uint256 price)
    {
 
    
        uint256 balancePath1 = Erc20Token(USDT).balanceOf(address(this));
        uint256 balancePath2 = Erc20Token(SMA).balanceOf(address(this));
        if (balancePath1 == 0 || balancePath2 == 0) return 0;
        uint256 path1Decimals = Erc20Token(USDT).decimals();
        uint256 path2Decimals = Erc20Token(SMA).decimals();
        price =
            ((balancePath1 * 10**18) / 10**path1Decimals) /
            (balancePath2 / 10**path2Decimals);
    }

    function SellToken(uint256 balance) external  {
        uint256 U =    balance.mul(getPrice1()).div(10**18).div(2);
        _USDTAddr.transfer(address(this), U);
        _SMA.transferFrom(
            address(msg.sender),
            address(1),
            balance
        );
          _SMA.transfer(
            address(xsqg),
            balance
        );
    }


      function BuyToken(uint256 balance) external   {

        uint256 SMAbalance =    balance.mul(10**18).div(getPrice1()) ;
        _USDTAddr.transferFrom(address(msg.sender), address(this), balance);
        _SMA.transfer (
            address(xsqg),
            SMAbalance
        );
    
    }

 
  
}