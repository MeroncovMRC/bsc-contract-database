/**
 *BEES COIN SALE CONTRACT
 www.thebeescoins.com
*/

pragma solidity ^0.5.8;

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }
    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

library Address {

    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }

}

contract BEESCOINSALE {

    using SafeMath for uint256;

    IERC20 usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IERC20 bees = IERC20(0x445a2b263cC69c7256E8a1E15757c61Fb65390f0);
   
    address payable public owner ;
    uint256 public bnbRate = 133335;
    uint public usdtRate = 545;
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only Owner");
        _;
    }
        
    constructor() public {
        owner = msg.sender;
    }

    function ownerAddress(address payable _ownerAddress) public onlyOwner {
        owner = _ownerAddress;
    }

    function changeUSDTRate(uint updatedUsdtRate) public onlyOwner{
        usdtRate = updatedUsdtRate;
    }

    function changeBNBRate(uint256 updatedBNBRate) public onlyOwner{
        bnbRate = updatedBNBRate;
    }
   
    function () external payable {
        revert("Invalid Transaction");
    }

    function isContract(address addr) internal view returns (bool) {
        uint size;
        assembly { size := extcodesize(addr) }
        return size > 0;
    }
    
    function depositUSDT(uint depAmount) public {
        require(!isContract(msg.sender) && msg.sender == tx.origin);
        usdt.transferFrom(msg.sender, address(this), depAmount);
        uint beescoins = depAmount.mul(usdtRate);
        bees.transfer(msg.sender,beescoins);
        usdt.transfer((address(owner)), depAmount);
    }

    function depositBNB() public payable{
        require(!isContract(msg.sender) && msg.sender == tx.origin);
        uint256 weiAmount = msg.value;
        uint256 tokens = weiAmount.mul(bnbRate);
        bees.transfer(msg.sender,tokens);
        owner.transfer(msg.value);
    }
    
    function failSafe(address payable _toUser, uint _amount) onlyOwner external returns (bool) {
        require(_toUser != address(0));
        usdt.transfer((address(_toUser)), _amount);
        return true;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}