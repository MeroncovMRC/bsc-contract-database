{"SLDCommon.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    //function decimals() external returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance \u003e= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance \u003e= value,\n            \"Address: insufficient balance for call\"\n        );\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n            data\n        );\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract BEP20 is Context, IBEP20 {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"SLDInterfaces.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\nimport \"./SLDCommon.sol\";\n\ninterface ISLDCommon {\n    enum ContractType {\n        INVALID,\n        LONG,\n        SHORT\n    }\n    enum StableCoinType {\n        INVALID,\n        DAI,\n        USDT,\n        USDC\n    }\n    enum PoolFlag {\n        INVALID,\n        PUBLIC,\n        PRIVATE\n    }\n}\n\ninterface ISLDContract is ISLDCommon {\n    event SLDDeposit(\n        address indexed sender,\n        address indexed toAddr,\n        uint256 motageAmount\n    );\n    event SLDWithdraw(\n        address indexed sender,\n        address indexed toAddr,\n        uint256 motageAmount\n    );\n\n    event SetFormula(address indexed addr);\n\n    event BalanceOfTaker(\n        address indexed taker,\n        uint256 depositAmount,\n        uint256 availableAmount,\n        uint256 liquidationFee\n    );\n\n    event SLDOpenContract(\n        address indexed holder,\n        uint256 orderID,\n        ContractType contractType,\n        State state,\n        string exchangeType,\n        uint256 number,\n        uint256 tradingFee,\n        uint256 liquidationFee,\n        uint256 firstMgFee,\n        uint256 lockFee,\n        uint256 newLockFee,\n        uint256 openPrice\n    );\n\n    event SLDCloseContract(\n        uint256 orderID,\n        State state,\n        uint256 lockFee,\n        uint256 newLockFee,\n        uint256 closePrice\n    );\n\n    event SLDMigration(\n        uint256 orderID,\n        State state,\n        uint256 lockFee,\n        uint256 newLockFee,\n        uint256 closePrice\n    );\n\n    event SLDRiskHandle(\n        uint256 orderID,\n        State state,\n        uint256 lockFee,\n        uint256 newLockFee,\n        uint256 closePrice\n    );\n\n    enum State {\n        PENDING,\n        ACTIVE,\n        CLOSED,\n        FORCE_CLOSED,\n        AGREEMENT\n    }\n\n    struct Order {\n        address payable holder;\n        ContractType contractType;\n        State state;\n        string exchangeType;\n        uint256 number;\n        uint256 tradingFee;\n        uint256 liquidationFee;\n        uint256 firstMgFee;\n        uint256 lockFee;\n        uint256 newLockFee;\n        uint256 openPrice;\n        uint256 startTime;\n        uint256 closePrice;\n    }\n\n    struct AccountInfo {\n        uint256 depositAmount;\n        uint256 availableAmount;\n        uint256 liquidationFee;\n    }\n\n    struct Fees {\n        uint256 total;\n        uint256 tradingFee;\n        uint256 fundingFee;\n        uint256 liquidationFee;\n        uint256 currentPrice;\n    }\n\n    struct MigrationDetail {\n        uint256 migrationTime;\n        uint256 regulatedTime;\n        uint256 inPeriodHours;\n    }\n}\n\ninterface IPublicPool {\n    function lock(\n        uint256 id,\n        uint256 marginAmount,\n        uint256 marginFee\n    ) external returns (bool);\n\n    function close(\n        uint256 id,\n        uint256 profit,\n        uint256 fundingFee\n    ) external returns (uint256 userProfit, bool isAgreement);\n\n    function riskClose(\n        uint256 id,\n        uint256 profit,\n        uint256 fundingFee\n    )\n        external\n        returns (\n            bool flag,\n            uint256 userProfit,\n            bool isAgreement\n        );\n\n    function matchIds(uint256 orderId) external view returns (uint256);\n\n    function getMarginAmount(uint256 orderID)\n        external\n        view\n        returns (uint256 marginAmount, uint256 marginFee);\n\n    function getLP2ToLp1MovePrice(uint256 takerOrderId)\n        external\n        view\n        returns (bool, uint256);\n}\n\ninterface IPrivatePool {\n    function lock(\n        uint256 id,\n        uint256 marginAmount,\n        uint256 marginFee,\n        uint256 exchgFee\n    ) external returns (bool);\n\n    function close(\n        uint256 id,\n        uint256 profit,\n        uint256 fundingFee\n    ) external returns (uint256 userProfit, bool isAgreement);\n\n    function riskClose(\n        uint256 orderID,\n        uint256 number,\n        uint256 fundingFee,\n        uint256 profit,\n        uint256 openPrice,\n        uint256 currPrice\n    )\n        external\n        returns (\n            bool flag,\n            uint256 userProfit,\n            bool isAgreement\n        );\n\n    function matchIds(uint256 orderId) external view returns (uint256);\n\n    function getMarginAmount(uint256 orderID)\n        external\n        view\n        returns (uint256 marginAmount, uint256 marginFee);\n}\n\ninterface ISLDLiquidityPool is ISLDCommon {\n    event LockInPrivatePool(\n        uint256 orderID,\n        address maker,\n        uint256 makerID,\n        uint256 marginAmount,\n        uint256 marginFee\n    );\n\n    event LockInPublicPool(\n        uint256 orderID,\n        uint256 makerID,\n        uint256 marginAmount,\n        uint256 marginFee\n    );\n\n    event CloseInPrivatePool(\n        address maker,\n        uint256 makerID,\n        uint256 orderID,\n        uint256 userProfit\n    );\n\n    event CloseInPublicPool(\n        uint256 makerID,\n        uint256 orderID,\n        uint256 userProfit\n    );\n\n    event RiskInPrivatePool(\n        address maker,\n        uint256 makerID,\n        uint256 orderID,\n        uint256 userProfit\n    );\n\n    event RiskInPubicPool(uint256 makerID, uint256 orderID, uint256 userProfit);\n\n    event MoveToPublic(\n        uint256 id,\n        uint256 profit,\n        uint256 moveProfit,\n        uint256 openPrice,\n        uint256 movePrice\n    );\n\n    event BalanceofMaker(\n        address maker,\n        uint256 amount,\n        uint256 availableAmount,\n        uint256 lockedAmount,\n        uint256 marginFee\n    );\n\n    event BalanceofPublic(\n        uint256 depositTotal,\n        uint256 lockedAmount,\n        uint256 availAmount\n    );\n\n    struct LiquidityMarket {\n        uint256 takerId;\n        uint256 marginAmount;\n        uint256 marginFee;\n        uint256 pubPriFlag; //1 - public pool, 2 - private pool\n        uint256 changePrice;\n        address makerAddr;\n        bool locked;\n    }\n\n    struct LP1Account {\n        address payable holder;\n        uint256 reTokenAmount;\n    }\n\n    struct LP2Account {\n        address payable holder;\n        uint256 amount;\n        uint256 availableAmount;\n        uint256 lockedAmount;\n        uint256 marginFee;\n        bool isRejectOrder;\n    }\n\n    struct P1AmountInfo {\n        uint256 plDepositTotal;\n        uint256 pl1lockedAmount;\n        uint256 pl1AvailAmount;\n    }\n\n    struct CloseOrder {\n        uint256 number;\n        uint256 orderID;\n        uint256 matchID;\n        uint256 profit;\n        uint256 openPrice;\n        uint256 currPrice;\n        uint256 fundingFee;\n        uint256 totalMarginAmount;\n    }\n\n    event Provide(address indexed account, uint256 amount, uint256 writeAmount);\n    event ProvideLP2(address indexed account, uint256 amount);\n    event Withdraw(address indexed account, uint256 amount);\n    event AddMargin(\n        address indexed account,\n        uint256 orderID,\n        uint256 amount,\n        uint256 margin\n    );\n\n    function totalBalance() external view returns (uint256 amount);\n}\n\ninterface IFormulaContracts is ISLDCommon {\n    using SafeMath for uint256;\n    struct Settings {\n        uint256 realVolatility;\n        uint256 historyVolatility;\n        uint256 delta;\n    }\n}\n\ninterface ISLDBroker {\n    function addInviteRelationAndCalc(\n        address inviter,\n        address invitee,\n        uint256 tokenType,\n        uint256 amount\n    ) external returns (address);\n}\n\ninterface ISLDLiquidator {\n    function calcLiquidatorAmount(\n        address liquidor,\n        uint256 tokenType,\n        uint256 gasUsed\n    ) external returns (bool);\n}\n\ninterface ISLDRewards {\n    function stakeRewardsForLP1(\n        address lp,\n        uint256 tokenType,\n        uint256 oriTokenAmount,\n        uint256 reTokenAmount\n    ) external returns (bool);\n\n    function calcAndSendRewardsForLP1(\n        address lp,\n        uint256 tokenType,\n        uint256 reTokenAmount\n    ) external returns (bool);\n\n    function calcAndSendRewardsForLP2(address lp, uint256 orderFee)\n        external\n        returns (bool);\n\n    function calcAndSendRewardsForLiquidator(address liquidor, uint256 gasUsed)\n        external\n        returns (bool);\n\n    function calcAndSendRewardsForLiquidatorWeekly(\n        address liquidor,\n        uint256 rank\n    ) external returns (bool);\n}\n\ninterface IFormula {\n    function getMargin(\n        uint256 amount,\n        uint256 openPrice,\n        uint256 poolType\n    ) external view returns (uint256 marginFee, uint256 liquidateFee);\n\n    function getPriceByAggregator() external view returns (uint256, uint8);\n\n    function getFundingFee(\n        uint256 amount,\n        uint256 openPrice,\n        uint256 latestPrice,\n        uint256 contractPeriod,\n        ISLDCommon.ContractType contractType\n    ) external view returns (uint256 fundingFee);\n}\n"},"SLDPublicPool.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.12;\nimport \"./SLDInterfaces.sol\";\n\ncontract SLDPublicPool is ISLDLiquidityPool, Ownable, BEP20 {\n    uint256 internal constant PRICE_DECIMALS = 1e18;\n    uint256 public appendRate = (70 * 1e18) / 100; // Margin append rate\n\n    address public tokenAddress; // Fiat token address\n    uint256 public minMintAmount = 1e18;\n\n    uint256 public lockupPeriod = 14 days; // Lock period: 14 Days\n\n    LiquidityMarket[] public lockedLiquidity; //Market Order\n\n    P1AmountInfo public plAmountInfo;\n\n    mapping(address =\u003e bool) public addressExist;\n\n    mapping(address =\u003e uint256) public lastProvideTm; // Latest provide time, using for calculate lock period\n    mapping(address =\u003e uint256) public lpAccount;\n    mapping(address =\u003e uint256) public addressIndex;\n    mapping(uint256 =\u003e uint256) public matchIds;\n\n    IFormula public formula; // Formula contract address\n\n    address public brokerAddr; // contract address for broker\n    address public riskFundAddr;\n\n    mapping(address =\u003e bool) public keeperMap;\n    mapping(address =\u003e bool) public lp2KeeperMap;\n\n    // Function selectors for BEP20\n    bytes4 private constant SELECTOR_TRANSFER_FROM =\n        bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\n    bytes4 private constant SELECTOR_TRANSFER =\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n\n    event SetKeeper(address, bool);\n    event SetLP2Keeper(address, bool);\n\n    modifier onlyKeeper() {\n        require(isKeeper(msg.sender), \"caller is not the keeper\");\n        _;\n    }\n\n    function setKeeper(address _addr, bool _auth) public onlyOwner {\n        require(_addr != address(0x0), \"ADDRESS_ZERO\");\n        keeperMap[_addr] = _auth;\n\n        emit SetKeeper(_addr, _auth);\n    }\n\n    function isKeeper(address _addr) public view returns (bool) {\n        return keeperMap[_addr];\n    }\n\n    modifier onlyLP2Keeeper() {\n        require(isLP2Keeper(msg.sender), \"caller not lp2keeper\");\n        _;\n    }\n\n    function setLP2Keeper(address _addr, bool _auth) public onlyOwner {\n        require(_addr != address(0x0), \"ADDRESS_ZERO\");\n        lp2KeeperMap[_addr] = _auth;\n\n        emit SetLP2Keeper(_addr, _auth);\n    }\n\n    function isLP2Keeper(address _addr) public view returns (bool) {\n        return lp2KeeperMap[_addr];\n    }\n\n    /**\n     * @dev Contract constructor.\n     * @param _name Public pool token name. (e.g. Shield reDAI Token)\n     * @param _symbol Public pool token symbol. (e.g. reDAI)\n     * @param _riskFundAddr Risk fund address.\n     * @param _tokenAddress Fiat token address(DAI/USDT/USDC).\n     * @param _formula Formula contract address.\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _riskFundAddr,\n        address _tokenAddress,\n        address _formula\n    ) public BEP20(_name, _symbol) {\n        riskFundAddr = _riskFundAddr;\n        tokenAddress = _tokenAddress;\n        formula = IFormula(_formula);\n    }\n\n    /**\n     * @dev Provide liquidity to public pool.\n     * @param _mintAmount Amount of fiat token to provide.\n     * @param _inviter Broker address.\n     */\n    function provide(uint256 _mintAmount, address _inviter) public {\n        require(_mintAmount \u003e= minMintAmount, \"Mint Amount is too small\");\n\n        lastProvideTm[msg.sender] = block.timestamp;\n\n        _safeTransferFrom(tokenAddress, msg.sender, address(this), _mintAmount);\n\n        uint256 reDaitokenAmount = getMintReTokenAmount(_mintAmount);\n        lpAccount[msg.sender] = lpAccount[msg.sender].add(reDaitokenAmount);\n        _mint(msg.sender, reDaitokenAmount);\n\n        P1AmountInfo storage pl1AmountInfo = plAmountInfo;\n        pl1AmountInfo.plDepositTotal = pl1AmountInfo.plDepositTotal.add(\n            _mintAmount\n        );\n        pl1AmountInfo.pl1AvailAmount = pl1AmountInfo.pl1AvailAmount.add(\n            _mintAmount\n        );\n\n        if (brokerAddr != address(0)) {\n            ISLDBroker(brokerAddr).addInviteRelationAndCalc(\n                _inviter,\n                msg.sender,\n                uint256(0),\n                uint256(0)\n            );\n        }\n\n        emit Provide(msg.sender, _mintAmount, reDaitokenAmount);\n    }\n\n    /**\n     * @dev Withdraw liquidity from public pool.\n     * @param _reTokenAmount Amount of fiat token to withdraw.\n     */\n    function withdraw(uint256 _reTokenAmount)\n        public\n        returns (uint256 _tokenAmount)\n    {\n        require(\n            lastProvideTm[msg.sender].add(lockupPeriod) \u003c= block.timestamp,\n            \"Withdraw is locked up\"\n        );\n        require(_reTokenAmount \u003e 0, \"Pool: Amount is too small\");\n        require(\n            _reTokenAmount \u003c= lpAccount[msg.sender],\n            \"Pool:Please lower the amount.\"\n        );\n\n        _tokenAmount = getTokenAmountByreToken(_reTokenAmount);\n        P1AmountInfo storage pl1AmountInfo = plAmountInfo;\n        require(\n            pl1AmountInfo.pl1AvailAmount \u003e= _tokenAmount,\n            \"Pool1:availabe amount not enough\"\n        );\n\n        _burn(msg.sender, _reTokenAmount);\n        _safeTransfer(tokenAddress, msg.sender, _tokenAmount);\n\n        emit Withdraw(msg.sender, _tokenAmount);\n\n        pl1AmountInfo.plDepositTotal = pl1AmountInfo.plDepositTotal.sub(\n            _tokenAmount\n        );\n        pl1AmountInfo.pl1AvailAmount = pl1AmountInfo.pl1AvailAmount.sub(\n            _tokenAmount\n        );\n        lpAccount[msg.sender] = lpAccount[msg.sender].sub(_reTokenAmount);\n    }\n\n    /**\n     * @dev Match taker\u0027s order with public pool.\n     * @param _id Order id.\n     * @param _marginAmount Margin amount.\n     * @param _marginFee Margin fee amount.\n     */\n    function lock(\n        uint256 _id,\n        uint256 _marginAmount,\n        uint256 _marginFee\n    ) public onlyKeeper returns (bool) {\n        // Reject take order if amount exceed public pool\u0027s liquidity\n        P1AmountInfo storage pl1AmountInfo = plAmountInfo;\n        require(\n            _marginAmount.add(_marginFee) \u003c pl1AmountInfo.pl1AvailAmount,\n            \"lp1 amount is not enought\"\n        );\n\n        matchIds[_id] = lockedLiquidity.length + 1;\n\n        lockedLiquidity.push(\n            LiquidityMarket(\n                _id,\n                _marginAmount,\n                _marginFee,\n                uint256(PoolFlag.PUBLIC),\n                0,\n                address(this),\n                true\n            )\n        );\n\n        pl1AmountInfo.pl1lockedAmount = pl1AmountInfo.pl1lockedAmount.add(\n            _marginAmount.add(_marginFee)\n        );\n        pl1AmountInfo.pl1AvailAmount = pl1AmountInfo.pl1AvailAmount.sub(\n            _marginAmount.add(_marginFee)\n        );\n\n        emit LockInPublicPool(\n            _id,\n            lockedLiquidity.length,\n            _marginAmount,\n            _marginFee\n        );\n\n        emit BalanceofPublic(\n            pl1AmountInfo.plDepositTotal,\n            pl1AmountInfo.pl1lockedAmount,\n            pl1AmountInfo.pl1AvailAmount\n        );\n\n        return true;\n    }\n\n    /**\n     * @dev Move private pool\u0027s order into public pool when the corresponding maker order is forced closed.\n     * @param _orderID Taker\u0027s order id.\n     * @param _profit Order profit.\n     * @param _moveProfit Profit move from private pool.\n     * @param _number Order amount.\n     * @param _openPrice Open price of this order.\n     * @param _movePrice Move price of this order.\n     */\n    function moveLp1Fund(\n        uint256 _orderID,\n        uint256 _profit,\n        uint256 _moveProfit,\n        uint256 _number,\n        uint256 _openPrice,\n        uint256 _movePrice\n    ) public onlyLP2Keeeper returns (bool) {\n        P1AmountInfo storage pl1AmountInfo = plAmountInfo;\n        if (_profit \u003e pl1AmountInfo.pl1AvailAmount.add(_moveProfit)) {\n            return false;\n        }\n\n        (uint256 marginAmount, uint256 marginFee) = getLockedAmount(\n            _number,\n            _openPrice,\n            1\n        );\n\n        if (\n            pl1AmountInfo.pl1AvailAmount.add(_moveProfit) \u003c\n            marginAmount.add(marginFee)\n        ) {\n            return false;\n        }\n\n        matchIds[_orderID] = lockedLiquidity.length + 1;\n        lockedLiquidity.push(\n            LiquidityMarket(\n                _orderID,\n                marginAmount,\n                marginFee,\n                uint256(PoolFlag.PUBLIC),\n                _movePrice,\n                address(this),\n                true\n            )\n        );\n\n        pl1AmountInfo.plDepositTotal = pl1AmountInfo.plDepositTotal.add(\n            _moveProfit\n        );\n        pl1AmountInfo.pl1lockedAmount = pl1AmountInfo.pl1lockedAmount.add(\n            marginAmount.add(marginFee)\n        );\n        pl1AmountInfo.pl1AvailAmount = pl1AmountInfo\n            .pl1AvailAmount\n            .add(_moveProfit)\n            .sub(marginAmount.add(marginFee));\n\n        emit MoveToPublic(\n            _orderID,\n            _profit,\n            _moveProfit,\n            _openPrice,\n            _movePrice\n        );\n\n        emit BalanceofPublic(\n            pl1AmountInfo.plDepositTotal,\n            pl1AmountInfo.pl1lockedAmount,\n            pl1AmountInfo.pl1AvailAmount\n        );\n\n        return true;\n    }\n\n    /**\n     * @dev Close an order taken by public pool.\n     * @param _id Taker\u0027s order id.\n     * @param _profit Order\u0027s profit\n     * @param _fundingFee Order\u0027s funding fee.\n     */\n    function close(\n        uint256 _id,\n        uint256 _profit,\n        uint256 _fundingFee\n    ) public onlyKeeper returns (uint256 _userProfit, bool _isAgreement) {\n        // move funding fee to lps user\n        uint256 lpId = matchIds[_id] - 1;\n        lockedLiquidity[lpId].locked = false;\n\n        P1AmountInfo storage pl1AmountInfo = plAmountInfo;\n        uint256 pl1D = pl1AmountInfo.plDepositTotal.add(_fundingFee);\n        uint256 pl1A = pl1AmountInfo.pl1AvailAmount.add(_fundingFee);\n        uint256 marginAmount = lockedLiquidity[lpId].marginAmount;\n        uint256 marginFee = lockedLiquidity[lpId].marginFee;\n\n        if (_profit \u003e 0) {\n            if (marginAmount \u003e= _profit) {\n                _userProfit = _profit;\n\n                pl1D = pl1D.sub(_userProfit);\n                pl1A = pl1A.add(marginFee).add(marginAmount.sub(_userProfit));\n            } else if (marginAmount.add(marginFee) \u003e= _profit) {\n                // Force close\n                _userProfit = _profit;\n\n                uint256 riskFundAmount = marginAmount.add(marginFee).sub(\n                    _profit\n                );\n\n                pl1D = pl1D.sub(marginAmount.add(marginFee));\n\n                _safeTransfer(tokenAddress, riskFundAddr, riskFundAmount);\n            } else {\n                uint256 fixAmount = _profit.sub(marginAmount.add(marginFee));\n                if (pl1A \u003e= fixAmount) {\n                    _userProfit = _profit;\n\n                    pl1D = pl1D.sub(fixAmount).sub(marginAmount.add(marginFee));\n                    pl1A = pl1A.sub(fixAmount);\n                } else {\n                    uint256 newFixAmount = fixAmount.sub(pl1A);\n                    uint256 riskFund = getRiskFundAmount();\n                    if (riskFund \u003e= newFixAmount) {\n                        _userProfit = _profit;\n\n                        _safeTransferFrom(\n                            tokenAddress,\n                            riskFundAddr,\n                            address(this),\n                            newFixAmount\n                        );\n                        riskFund = riskFund.sub(newFixAmount);\n                    } else {\n                        // Agreement liquidation\n                        _userProfit = marginAmount.add(marginFee).add(pl1A).add(\n                                riskFund\n                            );\n\n                        _safeTransferFrom(\n                            tokenAddress,\n                            riskFundAddr,\n                            address(this),\n                            riskFund\n                        );\n                        riskFund = 0;\n                        _isAgreement = true;\n                    }\n\n                    pl1D = pl1D.sub(marginAmount.add(marginFee)).sub(pl1A);\n                    pl1A = 0;\n                }\n            }\n        } else {\n            pl1A = pl1A.add(marginAmount.add(marginFee));\n        }\n\n        pl1AmountInfo.plDepositTotal = pl1D;\n        pl1AmountInfo.pl1lockedAmount = pl1AmountInfo.pl1lockedAmount.sub(\n            marginAmount.add(marginFee)\n        );\n        pl1AmountInfo.pl1AvailAmount = pl1A;\n\n        _safeTransferFrom(tokenAddress, msg.sender, address(this), _fundingFee);\n        _safeTransfer(tokenAddress, msg.sender, _userProfit);\n\n        emit CloseInPublicPool(lpId, _id, _userProfit);\n\n        emit BalanceofPublic(pl1D, pl1AmountInfo.pl1lockedAmount, pl1A);\n    }\n\n    /**\n     * @dev Trigger risk control.\n     * @param _id The order id need to be risk controlled.\n     * @param _profit Order profit.\n     * @param _fundingFee Order\u0027s funding fee.\n     */\n    function riskClose(\n        uint256 _id,\n        uint256 _profit,\n        uint256 _fundingFee\n    )\n        public\n        onlyKeeper\n        returns (\n            bool _flag,\n            uint256 _userProfit,\n            bool _isAgreement\n        )\n    {\n        // When the order has made profits and the available balance from public pool is not enough,\n        // pay taker with the assets in risk fund address.\n        uint256 lpId = matchIds[_id] - 1;\n        P1AmountInfo storage pl1AmountInfo = plAmountInfo;\n        uint256 pl1D = pl1AmountInfo.plDepositTotal;\n        uint256 pl1L = pl1AmountInfo.pl1lockedAmount;\n        uint256 pl1A = pl1AmountInfo.pl1AvailAmount;\n        uint256 marginAmount = lockedLiquidity[lpId].marginAmount;\n\n        if (_profit \u003e marginAmount.mul(appendRate).div(PRICE_DECIMALS)) {\n            if (\n                plAmountInfo.pl1AvailAmount \u003e= _profit.mul(2).sub(marginAmount)\n            ) {\n                pl1A = pl1A.sub(_profit.mul(2).sub(marginAmount));\n                pl1L = pl1L.add(_profit.mul(2).sub(marginAmount));\n                lockedLiquidity[lpId].marginAmount = _profit.mul(2);\n                pl1AmountInfo.pl1lockedAmount = pl1L;\n                pl1AmountInfo.pl1AvailAmount = pl1A;\n                return (false, 0, false);\n            } else {\n                // Append margin failed, use fund in availble amount\n                pl1L = pl1L.add(pl1A);\n                lockedLiquidity[lpId].marginAmount = marginAmount.add(pl1A);\n                pl1A = 0;\n            }\n        }\n\n        if (_profit \u003e lockedLiquidity[lpId].marginAmount) {\n            lockedLiquidity[lpId].locked = false;\n            _flag = true;\n            marginAmount = lockedLiquidity[lpId].marginAmount;\n            uint256 marginFee = lockedLiquidity[lpId].marginFee;\n            pl1D = pl1D.add(_fundingFee);\n            pl1A = pl1A.add(_fundingFee);\n            if (marginAmount.add(marginFee) \u003e= _profit) {\n                // Force liquidation\n                _userProfit = _profit;\n                // riskFund\n                uint256 riskFundAmount = marginAmount.add(marginFee).sub(\n                    _profit\n                );\n\n                pl1D = pl1D.sub(marginAmount.add(marginFee));\n\n                _safeTransfer(tokenAddress, riskFundAddr, riskFundAmount);\n            } else {\n                uint256 fixAmount = _profit.sub(marginAmount.add(marginFee));\n                if (pl1A \u003e= fixAmount) {\n                    _userProfit = _profit;\n\n                    pl1D = pl1D.sub(fixAmount).sub(marginAmount.add(marginFee));\n                    pl1A = pl1A.sub(fixAmount);\n                } else {\n                    uint256 newFixAmount = fixAmount.sub(pl1A);\n                    uint256 riskFund = getRiskFundAmount();\n                    if (riskFund \u003e= newFixAmount) {\n                        _userProfit = _profit;\n\n                        _safeTransferFrom(\n                            tokenAddress,\n                            riskFundAddr,\n                            address(this),\n                            newFixAmount\n                        );\n                    } else {\n                        // Agreement liquidation\n                        _userProfit = marginAmount.add(marginFee).add(pl1A).add(\n                                riskFund\n                            );\n\n                        _safeTransferFrom(\n                            tokenAddress,\n                            riskFundAddr,\n                            address(this),\n                            riskFund\n                        );\n                        _isAgreement = true;\n                    }\n                    pl1D = pl1D.sub(marginAmount.add(marginFee)).sub(pl1A);\n                    pl1A = 0;\n                }\n            }\n            pl1L = pl1L.sub(marginAmount.add(marginFee));\n\n            _safeTransferFrom(\n                tokenAddress,\n                msg.sender,\n                address(this),\n                _fundingFee\n            );\n            _safeTransfer(tokenAddress, msg.sender, _userProfit);\n        }\n\n        pl1AmountInfo.plDepositTotal = pl1D;\n        pl1AmountInfo.pl1lockedAmount = pl1L;\n        pl1AmountInfo.pl1AvailAmount = pl1A;\n\n        emit RiskInPubicPool(lpId, _id, _userProfit);\n\n        emit BalanceofPublic(pl1D, pl1L, pl1A);\n    }\n\n    function setLockupPeriod(uint256 _period) public onlyOwner {\n        lockupPeriod = _period;\n    }\n\n    function setAppendRate(uint256 _appendRate) public onlyOwner {\n        require(_appendRate \u003e 0, \"INVALID\");\n        appendRate = _appendRate;\n    }\n\n    function totalBalance() public view override returns (uint256 amount) {\n        return balanceOf(address(this));\n    }\n\n    function getTotalSupply() public view returns (uint256 amount) {\n        return totalSupply();\n    }\n\n    function getLockedAmount(\n        uint256 _amount,\n        uint256 _currentPrice,\n        uint256 _poolType\n    ) public view returns (uint256 marginFee, uint256 forceFee) {\n        (marginFee, forceFee) = formula.getMargin(\n            _amount,\n            _currentPrice,\n            _poolType\n        );\n    }\n\n    function getMintReTokenAmount(uint256 _mintAmount)\n        public\n        view\n        returns (uint256 mintOtoken)\n    {\n        require(_mintAmount \u003e 0, \"mintAmount is zero\");\n\n        if (getTotalSupply() == 0 || plAmountInfo.plDepositTotal == 0) {\n            mintOtoken = _mintAmount;\n        } else {\n            mintOtoken = getTotalSupply().mul(_mintAmount).div(\n                plAmountInfo.plDepositTotal\n            );\n        }\n    }\n\n    function getTokenAmountByreToken(uint256 _reTokenAmount)\n        public\n        view\n        returns (uint256 tokenAmount)\n    {\n        require(_reTokenAmount \u003e 0, \"reTokenAmount is zero\");\n        tokenAmount = _reTokenAmount.mul(plAmountInfo.plDepositTotal).div(\n            getTotalSupply()\n        );\n        if (tokenAmount == 0) {\n            //TODO DDS need to return;need to do\n            revert();\n        }\n    }\n\n    function getReTokenAmountByToken(uint256 _tokenAmount)\n        public\n        view\n        returns (uint256 retokenAmount)\n    {\n        require(_tokenAmount \u003e 0, \"reTokenAmount is zero\");\n        retokenAmount = _tokenAmount.mul(getTotalSupply()).div(\n            plAmountInfo.plDepositTotal\n        );\n        if (retokenAmount == 0) {\n            revert();\n        }\n    }\n\n    function getMatchID(uint256 _orderID)\n        public\n        view\n        returns (\n            uint256 lpID /*,uint256 lpFlag*/\n        )\n    {\n        if (matchIds[_orderID] == 0) {\n            return (0);\n        } else {\n            lpID = matchIds[_orderID] - 1;\n        }\n    }\n\n    function getMarginAmount(uint256 _orderID)\n        public\n        view\n        returns (uint256 marginAmount, uint256 marginFee)\n    {\n        if (matchIds[_orderID] == 0) {\n            return (0, 0);\n        } else {\n            uint256 lpID = matchIds[_orderID] - 1;\n            marginAmount = lockedLiquidity[lpID].marginAmount;\n            marginFee = lockedLiquidity[lpID].marginFee;\n        }\n    }\n\n    function getlockedLiquidityLen() public view returns (uint256 lpLen) {\n        lpLen = lockedLiquidity.length;\n    }\n\n    function getLP2ToLp1MovePrice(uint256 _takerOrderId)\n        public\n        view\n        returns (bool, uint256)\n    {\n        uint256 lpID = matchIds[_takerOrderId] - 1;\n        uint256 changePrice = lockedLiquidity[lpID].changePrice;\n        if (changePrice \u003e 0) {\n            return (true, changePrice);\n        } else {\n            return (false, 0);\n        }\n    }\n\n    function getRiskFundAmount() public view returns (uint256) {\n        return IBEP20(tokenAddress).balanceOf(riskFundAddr);\n    }\n\n    function updateDepositAmount(uint8 _type, uint256 _amount)\n        public\n        onlyKeeper\n        returns (uint256)\n    {\n        require(_type == 0 || _type == 1, \"Invalid type\");\n\n        P1AmountInfo storage poolInfo = plAmountInfo;\n\n        if (_type == 0) {\n            poolInfo.plDepositTotal = poolInfo.plDepositTotal.add(_amount);\n            return poolInfo.plDepositTotal;\n        } else if (_type == 1) {\n            poolInfo.plDepositTotal = poolInfo.plDepositTotal.sub(_amount);\n            return poolInfo.plDepositTotal;\n        }\n\n        return 0;\n    }\n\n    function updateAvailableAmount(uint8 _type, uint256 _amount)\n        public\n        onlyKeeper\n        returns (uint256)\n    {\n        require(_type == 0 || _type == 1, \"Invalid type\");\n\n        P1AmountInfo storage poolInfo = plAmountInfo;\n\n        if (_type == 0) {\n            poolInfo.pl1AvailAmount = poolInfo.pl1AvailAmount.add(_amount);\n            return poolInfo.pl1AvailAmount;\n        } else if (_type == 1) {\n            poolInfo.pl1AvailAmount = poolInfo.pl1AvailAmount.sub(_amount);\n            return poolInfo.pl1AvailAmount;\n        }\n\n        return 0;\n    }\n\n    function updateLockedAmount(uint8 _type, uint256 _amount)\n        public\n        onlyKeeper\n        returns (uint256)\n    {\n        require(_type == 0 || _type == 1, \"Invalid type\");\n\n        P1AmountInfo storage poolInfo = plAmountInfo;\n\n        if (_type == 0) {\n            poolInfo.pl1lockedAmount = poolInfo.pl1lockedAmount.add(_amount);\n            return poolInfo.pl1lockedAmount;\n        } else if (_type == 1) {\n            poolInfo.pl1lockedAmount = poolInfo.pl1lockedAmount.sub(_amount);\n            return poolInfo.pl1lockedAmount;\n        }\n\n        return 0;\n    }\n\n    function getLPAmountInfo()\n        public\n        view\n        returns (\n            uint256 deposit,\n            uint256 availabe,\n            uint256 locked\n        )\n    {\n        deposit = plAmountInfo.plDepositTotal;\n        availabe = plAmountInfo.pl1AvailAmount;\n        locked = plAmountInfo.pl1lockedAmount;\n    }\n\n    function getUserReTokenInfo(address addr)\n        public\n        view\n        returns (uint256 selfReToken, uint256 total)\n    {\n        selfReToken = lpAccount[addr];\n        total = getTotalSupply();\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(SELECTOR_TRANSFER_FROM, from, to, value)\n        );\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(SELECTOR_TRANSFER, to, value)\n        );\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function isEqual(string memory a, string memory b)\n        public\n        pure\n        returns (bool)\n    {\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\n    }\n\n    function setMinMintAmount(uint256 _minMintAmount) public onlyOwner {\n        require(_minMintAmount \u003e 0, \"INVALID\");\n        minMintAmount = _minMintAmount;\n    }\n\n    function setFormula(address _formula) public onlyOwner {\n        require(address(_formula) != address(0x0), \"ADDRESS_ZERO\");\n        formula = IFormula(_formula);\n    }\n\n    function setPoolTokenAddr(address _tokenAddr) public onlyOwner {\n        require(_tokenAddr != address(0x0), \"ADDRESS_ZERO\");\n        tokenAddress = _tokenAddr;\n    }\n\n    function setRiskFundAddr(address _riskFundAddr) public onlyOwner {\n        require(_riskFundAddr != address(0x0), \"ADDRESS_ZERO\");\n        riskFundAddr = _riskFundAddr;\n    }\n\n    /**\n     * @dev Set broker contract address\n     * @param _brokerAddr Broker contract address.\n     */\n    function setBrokerAddr(address _brokerAddr) public onlyOwner {\n        require(address(_brokerAddr) != address(0x0), \"ZERO\");\n        brokerAddr = _brokerAddr;\n    }\n}\n"}}