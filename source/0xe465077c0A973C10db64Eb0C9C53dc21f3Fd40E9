// SPDX-License-Identifier: MIT

pragma solidity 0.8.7;
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `_msgSender()` is missing `role`.
     * Overriding this function changes the behavior of the {onlyRole} modifier.
     *
     * Format of the revert message is described in {_checkRole}.
     *
     * _Available since v4.6._
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}
contract BixosverseGame is AccessControl {
    using SafeERC20 for IERC20;

    bytes32 public constant ORACLE_ROLE = keccak256("ORACLE_ROLE");
    bytes32 public constant ACCOUNT_ROLE = keccak256("ACCOUNT_ROLE");

    enum GameState {
        NewIsland,
        Created,
        Started,
        Ended,
        Canceled,
        Reverted
    }

    struct Percentage {
        uint256 winner;
        uint256 bixos;
        uint256 burn;
        uint256 owner;
    }

    struct Game {
        string title;
        uint256 price;
        uint256 startTime;
        uint256 endTime;
        address winner;
        uint256 pool;
        address[] players;
        uint256 joinedPlayersCount;
        uint256 maxPlayers;
        uint256 minPlayers;
        Percentage percentages;
        GameState state;
    }

    struct AutoStartSettings {
        string title;
        uint256 price;
        uint256 startTime;
        uint256 maxPlayers;
        uint256 limit;
    }

    struct Island {
        bool isOccupied;
        Game[] games;
        Game activeGame;
    }

    IERC20 private immutable _ubxs;
    IERC721 private immutable _serverNFT;

    address private _feeWallet;

    mapping(uint256 => Island) private _islands;
    mapping(uint256 => mapping(address => bool)) private _userInGameExistence;

    Percentage public percentages;
    uint256 public defaultMinTitleLength = 3;
    uint256 public defaultMaxTitleLength = 30;
    uint256 public defaultMaxGameStartTime = 604800;
    uint256 public defaultMinPlayers = 2;
    uint256 public defaultMaxPlayers = 25;
    uint256 public cancelTime = 1 days;
    uint256 public withdrawableAmount;
    uint256 public autoStartPrice;

    mapping(uint256 => AutoStartSettings) public autoStart;

    /**
     * @notice this event is triggered when the island added
     * @param islandId id of the island
     */
    event NewIslandAdded(uint256 islandId);

    /**
     * @notice this event is triggered when the game created
     * @param title title of the game
     * @param price price of the game
     * @param startTime start time of the game
     * @param maxPlayers max players of the game
     * @param minPlayers min players of the game
     * @param percentages of the game
     */
    event GameCreated(
        uint256 nftId,
        string title,
        uint256 price,
        uint256 startTime,
        uint256 maxPlayers,
        uint256 minPlayers,
        Percentage percentages
    );

    /**
     * @notice this event is triggered when the game started
     * @param nftId id of the NFT
     * @param pool pool of the game
     * @param players all players of the game
     */
    event GameStarted(uint256 nftId, uint256 pool, address[] players);

    /**
     * @notice this event is triggered when the game ended
     * @param nftId id of the NFT
     * @param gameId id of the game
     * @param winner winner of the game
     * @param pool pool of the game
     * @param players all players of the game
     * @param percentages of the game
     */
    event GameEnded(
        uint256 nftId,
        uint256 gameId,
        address winner,
        uint256 pool,
        address[] players,
        Percentage percentages
    );

    /**
     * @notice this event is triggered when the game ended
     * @param nftId id of the NFT
     * @param amount reward of the winner
     */
    event GameReward(uint256 nftId, uint256 amount);

    /**
     * @notice this event is triggered when the game canceled
     * @param nftId id of the NFT
     * @param gameId id of the game
     */
    event GameCanceled(uint256 nftId, uint256 gameId);

    /**
     * @notice this event is triggered when the game canceled
     * @param nftId id of the NFT
     */
    event GameReverted(uint256 nftId);

    /**
     * @notice this event is triggered when someone joined the game
     * @param nftId id of the NFT
     * @param player address of the joined players
     * @param pool pool of the game
     */
    event GameJoined(uint256 nftId, address player, uint256 pool);

    /**
     * @notice this event is triggered when percentages are updated
     * @param winner amount the winner will win
     * @param bixos amount the bixos fee
     * @param burn amount to be burned
     * @param owner amount the owner fee
     */
    event DefaultPercentagesUpdated(
        uint256 winner,
        uint256 bixos,
        uint256 burn,
        uint256 owner
    );

    /**
     * @notice this event is triggered when "default min players" is updated
     * @dev related to defaultMinPlayers state
     * @param minPlayers min players of the game
     */
    event DefaultMinPlayersUpdated(uint256 minPlayers);

    /**
     * @notice this event is triggered when "default max start time" is updated
     * @dev related to defaultMaxGameStartTime state
     * @param maxGameStartTime max start time of the game
     */
    event DefaultMaxGameStartTimeUpdated(uint256 maxGameStartTime);

    /**
     * @notice this event is triggered when "default min title length" is updated
     * @dev related to defaultMinTitleLength state
     * @param minTitleLength min length of the game title
     */
    event DefaultMinTitleLengthUpdated(uint256 minTitleLength);

    /**
     * @notice this event is triggered when "default max title length" is updated
     * @dev related to defaultMaxTitleLength state
     * @param maxTitleLength max length of the game title
     */
    event DefaultMaxTitleLengthUpdated(uint256 maxTitleLength);

    /**
     * @notice this event is triggered when "default man players" is updated
     * @dev related to defaultMaxPlayers state
     * @param maxPlayers max players of the game
     */
    event DefaultMaxPlayersUpdated(uint256 maxPlayers);

    /**
     * @notice this event is triggered when "cancel time" is updated
     * @dev related to cancelTime state
     * @param cancelTime cancel time of the game
     */
    event CancelTimeUpdated(uint256 cancelTime);

    /**
     * @notice this event is triggered when "auto start price" is updated
     * @dev related to autoStartPrice state
     * @param autoStartPrice auto start price of the game
     */
    event AutoStartPriceUpdated(uint256 autoStartPrice);

    /**
     * @notice this error is triggered when "player count" is invalid
     * @dev min and max params related to defaultMinPlayers and defaultMaxPlayers variables
     * @param min the minimum acceptable value
     * @param max the maximum acceptable value
     */
    error InvalidPlayerCount(uint256 min, uint256 max);

    /**
     * @notice this error is triggered when "the title length of game" is invalid
     * @dev min and max params related to defaultMinTitleLength and defaultMaxTitleLength variables
     * @param min the minimum acceptable value
     * @param max the maximum acceptable value
     */
    error InvalidGameTitleLength(uint256 min, uint256 max);

    /**
     * @notice this error is triggered when "the start time of game" is invalid
     * @dev max param related to defaultMaxGameStartTime variable
     * @param min the minimum acceptable value
     * @param max the maximum acceptable value
     */
    error InvalidGameStartTime(uint256 min, uint256 max);

    modifier onlyIslandExists(uint256 nftId) {
        require(_islands[nftId].isOccupied, "Island does not exist");
        _;
    }

    modifier onlyGameExists(uint256 nftId, uint256 gameId) {
        require(gameId < _islands[nftId].games.length, "Game does not exist");
        _;
    }

    modifier onlyValidPlayerCount(uint256 playerCount) {
        if (
            playerCount < defaultMinPlayers || playerCount > defaultMaxPlayers
        ) {
            revert InvalidPlayerCount({
                min: defaultMinPlayers,
                max: defaultMaxPlayers
            });
        }
        _;
    }

    modifier onlyNFTOwner(uint256 nftId) {
        require(
            msg.sender == _serverNFT.ownerOf(nftId),
            "Island not owned by you"
        );
        _;
    }

    modifier onlyNotActiveGame(uint256 nftId) {
        GameState state = _islands[nftId].activeGame.state;

        require(
            GameState.Ended == state ||
                GameState.Canceled == state ||
                GameState.NewIsland == state,
            "Already has a active game"
        );
        _;
    }

    constructor(
        address ubxsAddress,
        address serverNFTAddress,
        address feeWalletAddress
    ) {
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        changePercentages(80, 10, 0, 10);
        autoStartPrice = 2 * 10**6;

        _ubxs = IERC20(ubxsAddress);
        _serverNFT = IERC721(serverNFTAddress);
        _feeWallet = feeWalletAddress;
    }

    /**
     * @notice create a new island
     * @param nftId id of the NFT
     */
    function addNewIsland(uint256 nftId) external onlyRole(ORACLE_ROLE) {
        /// @dev check is nft minted
        require(address(0) != _serverNFT.ownerOf(nftId), "Island not owned");
        require(!_islands[nftId].isOccupied, "Island already exists");

        _islands[nftId].isOccupied = true;
        _islands[nftId].activeGame.state = GameState.NewIsland;

        emit NewIslandAdded({ islandId: nftId });
    }

    /**
     * @notice create a new game on an island
     * @param nftId id of the NFT
     * @param _title title of the game
     * @param _price price of the game
     * @param _startTime start time of the game
     * @param _maxPlayers max players of the game
     */
    function addNewGame(
        uint256 nftId,
        string memory _title,
        uint256 _price,
        uint256 _startTime,
        uint256 _maxPlayers
    )
        external
        onlyIslandExists(nftId)
        onlyNFTOwner(nftId)
        onlyNotActiveGame(nftId)
        onlyValidPlayerCount(_maxPlayers)
    {
        uint256 titleLen = bytes(_title).length;
        if (
            titleLen < defaultMinTitleLength || titleLen > defaultMaxTitleLength
        )
            revert InvalidGameTitleLength({
                min: defaultMinTitleLength,
                max: defaultMaxTitleLength
            });

        /* solhint-disable-next-line not-rely-on-time */
        uint256 mockNow = block.timestamp;
        uint256 max = mockNow + defaultMaxGameStartTime;

        if (_startTime < mockNow || _startTime > max)
            revert InvalidGameStartTime({ min: mockNow, max: max });

        require(_price > 0, "Price must be greater than 0");

        Game storage game = _islands[nftId].activeGame;

        game.title = _title;
        game.price = _price;
        game.startTime = _startTime;
        game.maxPlayers = _maxPlayers;
        game.state = GameState.Created;
        game.endTime = 0;
        game.winner = address(0);
        game.pool = 0;
        game.players = new address[](game.maxPlayers);
        game.joinedPlayersCount = 0;
        game.minPlayers = defaultMinPlayers;
        game.percentages = percentages;

        emit GameCreated({
            nftId: nftId,
            title: game.title,
            price: game.price,
            startTime: game.startTime,
            maxPlayers: game.maxPlayers,
            minPlayers: game.minPlayers,
            percentages: game.percentages
        });
    }

    /**
     * @notice join a game in progress
     * @param nftId id of the NFT
     */
    function joinGame(uint256 nftId) external onlyIslandExists(nftId) {
        Game storage game = _islands[nftId].activeGame;

        require(
            !_userInGameExistence[nftId][msg.sender],
            "User already exists in game"
        );
        require(
            GameState.Created == game.state || GameState.Started == game.state,
            "Game must be created or started"
        );
        require(game.joinedPlayersCount < game.maxPlayers, "Game is full");

        game.players[game.joinedPlayersCount] = msg.sender;
        game.pool += game.price;
        game.joinedPlayersCount++;

        _userInGameExistence[nftId][msg.sender] = true;

        _ubxs.safeTransferFrom(msg.sender, address(this), game.price);

        emit GameJoined({ nftId: nftId, player: msg.sender, pool: game.pool });
    }

    /**
     * @notice start a game if it is not started
     * @param nftId id of the NFT
     */
    function startGame(uint256 nftId)
        external
        onlyRole(ORACLE_ROLE)
        onlyIslandExists(nftId)
    {
        Game storage game = _islands[nftId].activeGame;

        require(GameState.Created == game.state, "Game already started");
        require(
            game.joinedPlayersCount >= game.minPlayers,
            "Not enough players"
        );
        /* solhint-disable not-rely-on-time */
        require(
            game.startTime < block.timestamp,
            "Start time must greater than now"
        );
        /* solhint-enable not-rely-on-time */
        require(game.endTime == 0, "Game already ended");

        game.state = GameState.Started;

        emit GameStarted({
            nftId: nftId,
            pool: game.pool,
            players: game.players
        });
    }

    /**
     * @notice cancel a game if it is not started before the cancel time
     * @param nftId id of the NFT
     */
    function cancelGame(uint256 nftId)
        external
        onlyRole(ORACLE_ROLE)
        onlyIslandExists(nftId)
    {
        Game storage game = _islands[nftId].activeGame;

        require(
            GameState.Created == game.state || GameState.Started == game.state,
            "Game must be created or started"
        );
        require(
            game.joinedPlayersCount < game.minPlayers,
            "Game has minimum players"
        );

        /* solhint-disable not-rely-on-time */
        require(
            game.startTime + cancelTime < block.timestamp,
            "Cancel time has not passed"
        );
        game.endTime = block.timestamp;
        /* solhint-enable not-rely-on-time */

        game.state = GameState.Canceled;

        for (uint256 i; i < game.joinedPlayersCount; i++) {
            if (game.players[i] != address(0)) {
                _userInGameExistence[nftId][game.players[i]] = false;
                _ubxs.safeTransfer(game.players[i], game.price);
            }
        }

        uint256 lastIndex = getIslandGamesCount(nftId);

        _islands[nftId].games.push(game);

        emit GameCanceled({ nftId: nftId, gameId: lastIndex });
    }

    /**
     * @notice revert a game
     * @param nftId id of the NFT
     * @param gameId index of the game
     */
    function revertGame(uint256 nftId, uint256 gameId)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
        onlyIslandExists(nftId)
        onlyGameExists(nftId, gameId)
    {
        Game storage game = _islands[nftId].games[gameId];

        require(GameState.Ended == game.state, "Game state must be ended");

        game.state = GameState.Reverted;

        for (uint256 i; i < game.joinedPlayersCount; i++) {
            if (address(0) != game.players[i]) {
                _userInGameExistence[nftId][game.players[i]] = false;
                _ubxs.safeTransfer(game.players[i], game.price);
            }
        }

        emit GameReverted({ nftId: nftId });
    }

    /**
     * @notice end a game if it is started
     * @param nftId id of the NFT
     * @param winner winner of the game
     */
    function endGame(uint256 nftId, address winner)
        external
        onlyRole(ORACLE_ROLE)
        onlyIslandExists(nftId)
    {
        Game storage game = _islands[nftId].activeGame;

        require(GameState.Started == game.state, "Game not started");
        require(_userInGameExistence[nftId][winner], "User must be in game");

        /* solhint-disable not-rely-on-time */
        game.endTime = block.timestamp;
        /* solhint-enable not-rely-on-time */

        game.state = GameState.Ended;
        game.winner = winner;

        uint256 lastIndex = getIslandGamesCount(nftId);

        _islands[nftId].games.push(game);

        for (uint256 i; i < game.joinedPlayersCount; i++) {
            if (game.players[i] != address(0)) {
                _userInGameExistence[nftId][game.players[i]] = false;
            }
        }

        emit GameEnded({
            nftId: nftId,
            gameId: lastIndex,
            winner: winner,
            pool: game.pool,
            players: game.players,
            percentages: game.percentages
        });
    }

    /**
     * @notice send reward to winner
     * @param nftId id of the NFT
     * @param gameId index of the game
     */
    function sendReward(uint256 nftId, uint256 gameId)
        external
        onlyIslandExists(nftId)
        onlyGameExists(nftId, gameId)
    {
        require(
            hasRole(ORACLE_ROLE, msg.sender) ||
                hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||
                hasRole(ACCOUNT_ROLE, msg.sender),
            "User must authorized"
        );
        Game storage game = _islands[nftId].games[gameId];

        require(GameState.Ended == game.state, "Game state must be ended");

        uint256 reward = (game.pool * game.percentages.winner) / 100;

        withdrawableAmount += (game.pool * game.percentages.bixos) / 100;

        _ubxs.safeTransfer(game.winner, reward);

        _ubxs.safeTransfer(
            _serverNFT.ownerOf(nftId),
            (game.pool * game.percentages.owner) / 100
        );

        emit GameReward({ nftId: nftId, amount: reward });
    }

    /**
     * @notice start an auto start process to an island
     * @param nftId id of the NFT
     * @param times how many times game will auto start.
     * @param _title title of the game
     * @param _price price of the game
     * @param _startTime start time of the game
     * @param _maxPlayers max players of the game
     */
    function startAutoStartGame(
        uint256 nftId,
        uint256 times,
        string memory _title,
        uint256 _price,
        uint256 _startTime,
        uint256 _maxPlayers
    )
        external
        onlyIslandExists(nftId)
        onlyNFTOwner(nftId)
        onlyValidPlayerCount(_maxPlayers)
    {
        require(_price > 0, "Price must be greater than 0");
        require(times > 0, "Times must be greater than 0");

        uint256 _autoStartPrice = times * autoStartPrice;

        _ubxs.safeTransferFrom(msg.sender, address(this), _autoStartPrice);
        withdrawableAmount += _autoStartPrice;

        AutoStartSettings storage _autoStart = autoStart[nftId];

        _autoStart.title = _title;
        _autoStart.price = _price;
        _autoStart.startTime = _startTime;
        _autoStart.maxPlayers = _maxPlayers;
        _autoStart.limit += times;
    }

    /**
     * @notice start a game by oracle
     * @param nftId id of the NFT
     */
    function autoStartGame(uint256 nftId)
        external
        onlyRole(ORACLE_ROLE)
        onlyNotActiveGame(nftId)
    {
        require(autoStart[nftId].limit > 0, "Auto start limit finished");

        AutoStartSettings storage _autoStart = autoStart[nftId];
        _autoStart.limit--;

        Game storage game = _islands[nftId].activeGame;

        game.title = _autoStart.title;
        game.price = _autoStart.price;
        // solhint-disable-next-line not-rely-on-time
        game.startTime = _autoStart.startTime + block.timestamp;
        game.maxPlayers = _autoStart.maxPlayers;
        game.state = GameState.Created;
        game.endTime = 0;
        game.winner = address(0);
        game.pool = 0;
        game.players = new address[](game.maxPlayers);
        game.joinedPlayersCount = 0;
        game.minPlayers = defaultMinPlayers;
        game.percentages = percentages;

        emit GameCreated({
            nftId: nftId,
            title: game.title,
            price: game.price,
            startTime: game.startTime,
            maxPlayers: game.maxPlayers,
            minPlayers: game.minPlayers,
            percentages: game.percentages
        });
    }

    /**
     * @notice change the default percentages
     * @param winner percentage of the winner
     * @param bixos percentage of the bixos
     * @param burn percentage of the burn
     * @param owner percentage of the owner
     */
    function changePercentages(
        uint256 winner,
        uint256 bixos,
        uint256 burn,
        uint256 owner
    ) public onlyRole(DEFAULT_ADMIN_ROLE) {
        require(
            winner + bixos + burn + owner == 100,
            "Sum of percentages must be 100"
        );

        percentages = Percentage({
            winner: winner,
            bixos: bixos,
            burn: burn,
            owner: owner
        });

        emit DefaultPercentagesUpdated({
            winner: winner,
            bixos: bixos,
            burn: burn,
            owner: owner
        });
    }

    /**
     * @notice change the auto start price of the game
     * @param _autoStartPrice new auto start price of the game
     */
    function changeAutoStartPrice(uint256 _autoStartPrice)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        autoStartPrice = _autoStartPrice;

        emit AutoStartPriceUpdated({ autoStartPrice: _autoStartPrice });
    }

    /**
     * @notice change the default max game start time
     * @param maxGameStartTime new default max game start time
     */
    function changeDefaultMaxGameStartTime(uint256 maxGameStartTime)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        defaultMaxGameStartTime = maxGameStartTime;

        emit DefaultMaxGameStartTimeUpdated({
            maxGameStartTime: defaultMaxGameStartTime
        });
    }

    /**
     * @notice change the default min title length
     * @param minTitleLength new default min title length
     */
    function changeDefaultMinTitleLength(uint256 minTitleLength)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        require(minTitleLength > 0, "Title length must greater than 1");

        defaultMinTitleLength = minTitleLength;

        emit DefaultMinTitleLengthUpdated({
            minTitleLength: defaultMinTitleLength
        });
    }

    /**
     * @notice change the default max title length
     * @param maxTitleLength new default max title length
     */
    function changeDefaultMaxTitleLength(uint256 maxTitleLength)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        require(maxTitleLength > 0, "Title length must greater than 1");

        defaultMaxTitleLength = maxTitleLength;

        emit DefaultMaxTitleLengthUpdated({
            maxTitleLength: defaultMaxTitleLength
        });
    }

    /**
     * @notice change the default min players
     * @param _minPlayers new default min players
     */
    function changeDefaultMinPlayers(uint256 _minPlayers)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        require(_minPlayers > 1, "Min Players count must greater 1");

        defaultMinPlayers = _minPlayers;

        emit DefaultMinPlayersUpdated({ minPlayers: defaultMinPlayers });
    }

    /**
     * @notice change the default max players
     * @param _maxPlayers new default max players
     */
    function changeDefaultMaxPlayers(uint256 _maxPlayers)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        require(_maxPlayers > 1, "Max Players count must greater 1");

        defaultMaxPlayers = _maxPlayers;

        emit DefaultMaxPlayersUpdated({ maxPlayers: defaultMaxPlayers });
    }

    /**
     * @notice change the cancel time
     * @param _cancelTime new cancel time
     */
    function changeCancelTime(uint256 _cancelTime)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        require(_cancelTime > 1 hours, "Cancel time must greater 1 hour");

        cancelTime = _cancelTime;

        emit CancelTimeUpdated({ cancelTime: cancelTime });
    }

    /**
     * @notice update bixos's fee wallet
     * @param feeWalletAddress the bixos's fee wallet
     */
    function changeFeeWallet(address feeWalletAddress)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        _feeWallet = feeWalletAddress;
    }

    /**
     * @notice withdraw the bixos's amount
     */
    function withdraw() external onlyRole(DEFAULT_ADMIN_ROLE) {
        _ubxs.safeTransfer(_feeWallet, withdrawableAmount);
    }

    /**
     * @notice get the number of players on an island active game
     * @param nftId id of the NFT
     * @return the active game player count
     */
    function getIslandActiveGamePlayerCount(uint256 nftId)
        external
        view
        onlyIslandExists(nftId)
        returns (uint256)
    {
        return _islands[nftId].activeGame.joinedPlayersCount;
    }

    /**
     * @notice get the player exists on an island active game
     * @param nftId id of the NFT
     * @param player address of the player
     * @return the player of given island and game
     */
    function isUserExistsInGame(uint256 nftId, address player)
        public
        view
        onlyIslandExists(nftId)
        returns (bool)
    {
        return _userInGameExistence[nftId][player];
    }

    /**
     * @notice get the player on an island active game
     * @param nftId id of the NFT
     * @param index index of the player
     * @return the player of given island and game
     */
    function getIslandActiveGamePlayer(uint256 nftId, uint256 index)
        external
        view
        onlyIslandExists(nftId)
        returns (address)
    {
        return _islands[nftId].activeGame.players[index];
    }

    /**
     * @notice get the number of games on an island
     * @param islandId id of the island
     */
    function getIslandGamesCount(uint256 islandId)
        public
        view
        onlyIslandExists(islandId)
        returns (uint256)
    {
        return _islands[islandId].games.length;
    }

    /**
     * @notice get the players count of a game
     * @param islandId id of the island
     * @param gameId index of the game
     * @return total players count of given island and game
     */
    function getIslandGamePlayersCount(uint256 islandId, uint256 gameId)
        external
        view
        onlyIslandExists(islandId)
        onlyGameExists(islandId, gameId)
        returns (uint256)
    {
        return _islands[islandId].games[gameId].players.length;
    }

    /**
     * @notice get the game
     * @param islandId id of the island
     * @param gameId index of the game
     * @return total players count of given island and game
     */
    function getIslandGame(uint256 islandId, uint256 gameId)
        public
        view
        onlyIslandExists(islandId)
        onlyGameExists(islandId, gameId)
        returns (Game memory)
    {
        return _islands[islandId].games[gameId];
    }

    /**
     * @notice get the active game of the island
     * @param islandId id of the island
     * @return total players count of given island and game
     */
    function getIslandActiveGame(uint256 islandId)
        external
        view
        onlyIslandExists(islandId)
        returns (Game memory)
    {
        return _islands[islandId].activeGame;
    }
}