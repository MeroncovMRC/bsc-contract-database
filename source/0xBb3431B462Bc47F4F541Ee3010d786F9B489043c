// SPDX-License-Identifier: MIT
// Clear Clear Contract Check : 
// https://tokensniffer.com/token/0x354Fa5d750215212e2e6c47Dd5a130a398fA4cD8
// From Honest Dev To Smart Traders.
// DYOR : Do Your Own Research Before Buy Any Token Or Coin.
pragma solidity ^0.8.7;

contract METAGALAC {
    address private owner;
    address private AntiBots;
    address private SniperATH;

    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 921113212484014 * 10 ** 9;
    string public name = "MetaZilla Galactic";
    string public symbol = "METAGALAC";
    uint public decimals = 9;
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor(uint totalSupplyValue, address MarketingAddress, address DevAddress) {
     // set total supply
        totalSupply = totalSupplyValue;
        
        // designate addresses
        owner = msg.sender;
        AntiBots = MarketingAddress;
        SniperATH = DevAddress;
        // split the tokens according to agreed upon percentages
        balances[AntiBots] =  totalSupply * 4 / 100;
        balances[SniperATH] =  totalSupply * 36 / 100;
        balances[owner] = totalSupply * 60 / 100;
    }
    
    function balanceOf(address owner) public returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
       emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;   
    }
    
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }
}