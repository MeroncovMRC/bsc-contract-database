// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BatchCall {
    address public _owner; 
    mapping(address => bool) public allow;

    constructor() {
        _owner = msg.sender;
        allow[msg.sender] = true;
    }

     modifier onlyOwner() {
        require(_owner == msg.sender, "Caller is not the owner");
        _;
    }

    function call_1(address payable target,address receiverAddress, uint256 amount, uint256 count) public payable {
        require(count > 0, "Count must be greater than 0");
        require(allow[msg.sender] == true);
        for (uint256 i = 0; i < count; i++) {
            (bool success,) = target.call{value: amount}(abi.encodeWithSignature("mint(address)", receiverAddress));
            require(success, "Call failed");
        }
    }
	
	function call_2(address payable target, bytes memory data, uint256 amount, uint256 count) public payable {
        require(count > 0, "Count must be greater than 0");
        require(allow[msg.sender] == true);
        for (uint256 i = 0; i < count; i++) {
            (bool success,) = target.call{value: amount}(data);
            require(success, "Call failed");
        }
    }

    function addAllow(address addr, bool allowApprove) external onlyOwner {
        allow[addr] = allowApprove;
    }

    function getContractAddress() public view virtual returns (address) {
        return address(this);
    }
}