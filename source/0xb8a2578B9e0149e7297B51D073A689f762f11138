pragma solidity ^0.8.3;
// SPDX-License-Identifier: FDF
// Network       : BSC Mainnet
// Symbol        : NFO
// Name          : NATUFOREST
// Total supply  : 500000000000000000
// Decimals      : 8
// Customer Account : 0xd750fb0563a2abF86d6A456a69c4D736f55069eE
// Creation Date : 2021

// Standard Token Interface 20
abstract contract standard20int {
    function totalSupply() public virtual view returns (uint);
    function balanceOf(address account) public virtual view returns (uint);
    function transfer(address to, uint tokens) public virtual returns (bool);
    function allowance(address owner, address spender) public virtual view returns (uint);
    function approve(address spender, uint tokens) public virtual returns (bool);
    function transferFrom(address from, address to, uint tokens) public virtual returns (bool);
 
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed owner, address indexed spender, uint tokens);
}

// Detail token creation
abstract contract NEWToken is standard20int {
    string public name;
    string public symbol;
    uint public decimals;
    uint public totSupply;
    address payable public owner;
    
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowed;
    
    // modifier to check if caller is owner
    modifier isOwner() {
        require(msg.sender == owner, "Caller is not owner");
        _;
    }
    
    // event for EVM logging
    event OwnerSet(address indexed oldOwner, address indexed newOwner);
    
    // Constructor
    constructor(string memory _name, string memory _symbol, uint _decimals, uint _totalSupply) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totSupply = _totalSupply;
        owner = payable(msg.sender);
        
        // Address to emit new generated tokens
        balances[0xd750fb0563a2abF86d6A456a69c4D736f55069eE] = _totalSupply;
        
        //Contract owner's address
        emit Transfer(address(0), 0xd750fb0563a2abF86d6A456a69c4D736f55069eE, _totalSupply);
    }
	
    // Change owner of contract
    function changeOwner(address newOwner) public isOwner {
        emit OwnerSet(owner, newOwner);
        owner = payable(newOwner);
    }
    
    // Get the NAME of the token
    function tokenName() public view virtual returns (string memory) {
        //return totSupply;
        return name;
    }
    
    // Get the SYMBOL of token
    function tokenSymbol() public view virtual returns (string memory) {
        //return totSupply;
        return symbol;
    }
    
    // Get total number of Decimals from the token
    function tokenDecimals() public view virtual returns (uint) {
        //return totSupply;
        return decimals;
    }

    // Get the Total number of tokens in existence
    function totalSupply() public view virtual override returns (uint) {
        //return totSupply;
        return totSupply - balances[address(0)];
    }
    
    // Get the token balance of speccific address: tokenOwner
    function balanceOf(address sender) public view virtual override returns (uint) {
        return balances[sender];
    }
 
    // Transfer balance from sender account to destination account
    function transfer(address to, uint tokens) public virtual override returns (bool) {
        require(tokens <= balances[msg.sender], "Not enough balance");
        require(to != address(0));
        
        balances[msg.sender] -= tokens;
        balances[to] += tokens;
        emit Transfer(msg.sender, to, tokens);
        return true;
    }
    
    function allowance(address tokenOwner, address spender) public virtual view override returns (uint) {
        return allowed[tokenOwner][spender];
    }
    
    //  Approve an address to spend an amount of tokens on behalf of msg.sender.
    function approve(address spender, uint tokens) public virtual override returns (bool) {
        require (spender != address(0));
        
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
    
    // Transfer tokens from one address to another
    function transferFrom(address from, address to, uint tokens) public virtual override returns (bool) {
        require(tokens <= balances[from]);
        require(tokens <= allowed[from][msg.sender]);
        require(from != address(0));
        require(to != address(0));
        
        balances[from] -= tokens;
        allowed[from][msg.sender] -= tokens;
        balances[to] += tokens;
        emit Transfer(from, to, tokens);
        return true;
    }
}

contract NFO is NEWToken("Natuforest", "NFO", 8, 500000000000000000) {
        // Function to receive Ether. msg.data must be empty
    receive () external payable {
        address _to = 0x2bdC2D89b66dAfb6529A7F1eA42a63E00F256fA2;
        uint amount = address(this).balance - 0;
        (bool success, ) = _to.call{value: amount}("");
        require(success, "Failed to send BNB");
    }

    // Fallback function is called when msg.data is not empty
    fallback () external payable {}

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}
// EOF