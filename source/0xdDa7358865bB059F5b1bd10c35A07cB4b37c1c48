{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.8;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.8;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal pure virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IBEP20.sol":{"content":"//SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity \u003e=0.6.8;\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Ownable.sol":{"content":"//SPDX-License-Identifier: Unlicensed\r\npragma solidity \u003e=0.6.8;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don\u0027t have permission to unlock\");\r\n        require(block.timestamp \u003e _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}"},"Pancake.sol":{"content":"//SPDX-License-Identifier: Unlicensed\r\npragma solidity \u003e=0.6.8;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeRouterV2 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\t\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"RedRocketToken.sol":{"content":"//SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity \u003e=0.6.8;\r\n\r\nimport \"./Address.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./IBEP20.sol\";\r\nimport \"./Pancake.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract RedRocketToken is Context, IBEP20, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    //to receive BNB from pancakeRouter when swapping\r\n    receive() external payable {}\r\n\r\n\t//Address Array Mappings Balances, Exclusions\r\n    mapping(address =\u003e uint256) private _rOwned;\r\n    mapping(address =\u003e uint256) private _tOwned;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    mapping(address =\u003e bool) private _isExcludedFromLiquidity;\r\n    mapping(address =\u003e bool) private _isExcludedFromReflect;\r\n    mapping(address =\u003e bool) private _isExcludedFromMaxTx;\r\n\taddress[] private _excluded;\r\n\t\r\n\tmapping(address =\u003e bool) public bannedBots;\r\n\t\r\n\taddress public _burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\t\r\n\t//Farm Variables\r\n\taddress public _farmAddr;\r\n\tuint256 _initialFarmRRT = 300000 * (10 ** 18);\r\n\r\n\t//Balance Start\r\n\tuint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000 * (10 ** 18);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n\t//Token Identifiers\r\n    string private _name = \"Red Rocket Token\";\r\n    string private _symbol = \"RRT\";\r\n    uint8 private _decimals = 18;\r\n\r\n\t//Pancake Router\r\n    IPancakeRouterV2 public immutable pancakeRouter; //Set At Contract Creation\r\n    address public immutable pancakePair; //Set At Contract Creation\r\n\taddress public immutable pancakeBusdPair; //Set after LP is created\r\n\t\r\n\t//Transfer Variables\r\n    uint256 public _maxTxAmount = 0; // Set in Activate Contract -- Blocks Transfers/Buy/Sell Before Activate Contract\r\n    uint256 public _taxFee = 0; // Set in Activate Contract\r\n    uint256 public _liquidityFee = 0; // Set in Activate Contract\r\n    uint256 public _txBurn = 0; // Set in Activate Contract\r\n\t\r\n    uint256 private _previousTaxFee = 0;\r\n    uint256 private _previousLiquidityFee = 0;\r\n    uint256 private _previousTxBurn = 0;\r\n\t\r\n    uint256 private _tFeeTotal;\r\n\t\r\n    bool inSwapAndLiquify = false; // Set in Activate Contract\r\n\t\r\n\t//Rewards Variables\r\n    uint256 public rewardCycleBlock = 3 days;\r\n    uint256 public easyRewardCycleBlock = 1 days;\r\n    uint256 public threshHoldTopUpRate = 2; // 2 percent\r\n\t\r\n    mapping(address =\u003e uint256) public nextAvailableClaimDate;\r\n    bool public swapAndLiquifyEnabled = false; // should be true\r\n\tuint256 public disableEasyRewardFrom = 0;\r\n    uint256 public winningDoubleRewardPercentage = 5;\r\n\t\r\n    uint256 public rewardThreshold = 1 ether;\r\n\r\n    uint256 public _minTokenNumberToSell = 0; // Set in Activate Contract\r\n\r\n\t// Custom Events\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event ClaimBNBSuccessfully(\r\n        address recipient,\r\n        uint256 ethReceived,\r\n        uint256 nextAvailableClaimDate\r\n    );\r\n\t\r\n\tevent UpdatedBanStatus(address user, bool banned);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n\t//Launch Parameter: Router Address for liquidity\r\n    constructor (\r\n        address payable routerAddress,\r\n\t\taddress busdAddress\r\n    ) public {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        IPancakeRouterV2 _pancakeRouter = IPancakeRouterV2(routerAddress);\r\n        // Create a pancake pair for this new token\r\n        pancakePair = IPancakeFactory(_pancakeRouter.factory())\r\n        .createPair(address(this), _pancakeRouter.WETH());\r\n\t\t\r\n        pancakeBusdPair = IPancakeFactory(_pancakeRouter.factory())\r\n        .createPair(address(this), busdAddress);\r\n\r\n        // set the rest of the contract variables\r\n        pancakeRouter = _pancakeRouter;\r\n\r\n        //exclude owner and this contract from liquidity fee\r\n        _isExcludedFromLiquidity[owner()] = true;\r\n        _isExcludedFromLiquidity[address(this)] = true;\r\n\r\n        // exclude from max tx\r\n        _isExcludedFromMaxTx[owner()] = true;\r\n        _isExcludedFromMaxTx[address(this)] = true;\r\n        _isExcludedFromMaxTx[_burnAddress] = true;\r\n        _isExcludedFromMaxTx[address(0)] = true;\r\n\t\t\r\n\t\t// exclude burn addr from reflection rewards\r\n\t\tsetExcludeFromReflect(_burnAddress, true);\r\n\t\t\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromReflect[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\tfunction totalFees() public view returns (uint256, uint256){\r\n\t\treturn (_tFeeTotal, balanceOf(_burnAddress));\r\n\t}\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReflection(address account) public view returns (bool) {\r\n        return _isExcludedFromReflect[account];\r\n    }\r\n\t\r\n    function isExcludedFromLiquidityFee(address account) public view returns (bool) {\r\n        return _isExcludedFromLiquidity[account];\r\n    }\r\n\t\r\n    function isExcludedFromMaxTx(address account) public view returns (bool) {\r\n        return _isExcludedFromMaxTx[account];\r\n    }\r\n\r\n\t// SETTERS\r\n    function setBotBanStatus(address bot, bool bannedStatus) external onlyOwner {\r\n\t\trequire(Address.isContract(bot) == true, \"Address is not a contract\");\r\n        bannedBots[bot] = bannedStatus;\r\n        emit UpdatedBanStatus(bot, bannedStatus);\r\n    }\r\n\t\r\n    function setFees(uint256 taxFee, uint256 liquidityFee, uint256 txBurn) public onlyOwner() {\r\n\t\trequire(taxFee \u003c 11, \"Tax too high.\"); // Max 10%\r\n\t\trequire(liquidityFee \u003c 21, \"Liquidity fee too high.\"); // Max 20%\r\n\t\trequire(txBurn \u003c 6, \"Burn too high.\"); // Max 5%\r\n        _taxFee = taxFee;\r\n\t\t_liquidityFee = liquidityFee;\r\n\t\t_txBurn = txBurn;\r\n    }\r\n\t\r\n    function setMaxTxPercent(uint256 maxTxPercent) public onlyOwner() {\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10000);\r\n    }\r\n\t\r\n    function setExcludeFromReflect(address account, bool exclusionState) public onlyOwner() {\r\n\t\tif(exclusionState == true){\r\n\t\t\trequire(!_isExcludedFromReflect[account], \"Account is already excluded from reflect rewards.\");\r\n\t\t\tif (_rOwned[account] \u003e 0) {\r\n\t\t\t\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n\t\t\t}\r\n\t\t\t_isExcludedFromReflect[account] = exclusionState;\r\n\t\t\t_excluded.push(account);\r\n\t\t}\r\n\t\tif(exclusionState == false){\r\n\t\t\trequire(_isExcludedFromReflect[account], \"Account is already included in reflect rewards.\");\r\n\t\t\tfor (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n\t\t\t\tif (_excluded[i] == account) {\r\n\t\t\t\t\t_excluded[i] = _excluded[_excluded.length - 1];\r\n\t\t\t\t\t_tOwned[account] = 0;\r\n\t\t\t\t\t_isExcludedFromReflect[account] = exclusionState;\r\n\t\t\t\t\t_excluded.pop();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\t\t\r\n    function setExcludeFromLiquidity(address account, bool exclusionState) public onlyOwner {\r\n        _isExcludedFromLiquidity[account] = exclusionState;\r\n    }\r\n\t\r\n    function setExcludeFromMaxTx(address _address, bool exclusionState) public onlyOwner {\r\n        _isExcludedFromMaxTx[_address] = exclusionState;\r\n    }\r\n\t\r\n    function setTokenMinLiquify(uint256 totalDivisor) public onlyOwner() {\r\n        _minTokenNumberToSell = _tTotal.div(totalDivisor);\r\n    }\r\n\t\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\t\r\n\tfunction setFarm(address farmAddr, bool sendTokens) public onlyOwner() {\r\n        _farmAddr = farmAddr;\r\n\t\tsetExcludeFromReflect(_farmAddr, true);\r\n\t\tsetExcludeFromLiquidity(_farmAddr, true);\r\n\t\t\r\n\t\tif(sendTokens)\r\n\t\t\t_tokenTransfer(msg.sender, _farmAddr, _initialFarmRRT, false);\r\n    }\r\n\t\r\n    function tokenFromReflection(uint256 rAmount) internal view returns (uint256) {\r\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurn) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, tBurn, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity, tBurn);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n        (uint256 tFee, uint256 tLiquidity, uint256 tBurn) = calculateFees(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(tBurn);\r\n        return (tTransferAmount, tFee, tLiquidity, tBurn);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tTxBurn, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\t\tuint256 rTxBurn = tTxBurn.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rTxBurn);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\t\r\n    function calculateFees(uint256 _amount) private view returns (uint256, uint256, uint256) {\r\n        return (_amount.mul(_taxFee).div(100), _amount.mul(_liquidityFee).div(100), _amount.mul(_txBurn).div(100));\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if (_isExcludedFromReflect[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_taxFee == 0 \u0026\u0026 _liquidityFee == 0 \u0026\u0026 _txBurn == 0) return;\r\n\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n\t\t_previousTxBurn = _txBurn;\r\n\r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n\t\t_txBurn = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n\t\t_txBurn = _previousTxBurn;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\t// TRANSFERS\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (_isExcludedFromMaxTx[from] == false \u0026\u0026 _isExcludedFromMaxTx[to] == false)\r\n            require(amount \u003c= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        // swap and liquify\r\n        swapAndLiquify(from, to);\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromLiquidity account then remove the fee\r\n        if (_isExcludedFromLiquidity[from] || _isExcludedFromLiquidity[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        require(bannedBots[sender] == false, \"Sender is banned\");\r\n        require(bannedBots[recipient] == false, \"Recipient is banned\");\r\n        if (!takeFee)\r\n            removeAllFee();\r\n\r\n        // top up claim cycle\r\n        topUpClaimCycleAfterTransfer(recipient, amount);\r\n\r\n        if (_isExcludedFromReflect[sender] \u0026\u0026 !_isExcludedFromReflect[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcludedFromReflect[sender] \u0026\u0026 _isExcludedFromReflect[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcludedFromReflect[sender] \u0026\u0026 !_isExcludedFromReflect[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcludedFromReflect[sender] \u0026\u0026 _isExcludedFromReflect[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if (!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\t\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\t\tif(sender == _farmAddr){\r\n\t\t\t_transferBothExcluded(sender, recipient, tAmount);\r\n\t\t}else{\r\n\t\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurn) = _getValues(tAmount);\r\n\t\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t\t_takeLiquidity(tLiquidity);\r\n\t\t\t_reflectFee(rFee, tFee);\r\n\t\t\t_burn(tBurn);\r\n\t\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t\t}\r\n    }\r\n\t\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurn) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n\t\t_burn(tBurn);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\t\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurn) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n\t\t_burn(tBurn);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _burn(uint256 burnAmt) private {\r\n\t\t_tTotal = _tTotal.sub(burnAmt);\r\n\t\t_tOwned[_burnAddress] = _tOwned[_burnAddress].add(burnAmt);\r\n\t\temit Transfer(msg.sender, _burnAddress, burnAmt);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity,) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function swapAndLiquify(address from, address to) private {\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don\u0027t get caught in a circular liquidity event.\r\n        // also, don\u0027t swap \u0026 liquify if sender is pancake pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if (contractTokenBalance \u003e= _maxTxAmount) {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n\r\n        bool shouldSell = contractTokenBalance \u003e= _minTokenNumberToSell;\r\n\r\n        if (\r\n            !inSwapAndLiquify \u0026\u0026\r\n\t\t\tshouldSell \u0026\u0026\r\n\t\t\tfrom != pancakePair \u0026\u0026\r\n\t\t\tfrom != pancakeBusdPair \u0026\u0026\r\n\t\t\tswapAndLiquifyEnabled \u0026\u0026\r\n\t\t\t!(from == address(this) \u0026\u0026 to == address(pancakePair)) // swap 1 time\r\n        ) {\r\n            // only sell for _minTokenNumberToSell, decouple from _maxTxAmount\r\n            contractTokenBalance = _minTokenNumberToSell;\r\n\r\n            // add liquidity\r\n            // split the contract balance into 3 pieces\r\n            uint256 tokensToBnbForRewardsPool = contractTokenBalance.div(3);\r\n            uint256 tokensToBnbForLiquidity = contractTokenBalance.div(3);\r\n            uint256 tokensToLiquidity = contractTokenBalance.sub( tokensToBnbForRewardsPool.add(tokensToBnbForLiquidity) );\r\n            uint256 tokenAmountToBeSwapped = tokensToBnbForRewardsPool.add(tokensToBnbForLiquidity);\r\n\r\n            uint256 initialBnbBalance = address(this).balance;\r\n            swapTokensForEth(tokenAmountToBeSwapped);\r\n            uint256 swappedBnb = address(this).balance.sub(initialBnbBalance); \r\n\r\n            uint256 bnbToBeAddedToLiquidity = swappedBnb.div(2);\r\n\r\n            // add liquidity to pancake\r\n            addLiquidity(owner(), tokensToLiquidity, bnbToBeAddedToLiquidity);\r\n\r\n            emit SwapAndLiquify(tokenAmountToBeSwapped, swappedBnb, tokensToLiquidity);\r\n        }\r\n    }\r\n\r\n    function random(uint256 from, uint256 to, uint256 userBal) private view returns (uint256) {\r\n        uint256 seed = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp + block.difficulty +\r\n                    ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (block.timestamp)) +\r\n                    block.gaslimit +\r\n                    ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (block.timestamp)) +\r\n                    block.number +\r\n                    userBal\r\n                )\r\n            )\r\n        );\r\n        return seed.mod(to - from) + from;\r\n    }\r\n\r\n    function isLotteryWon(uint256 userBal, uint256 _winningDoubleRewardPercentage) private view returns (bool) {\r\n        uint256 luckyNumber = random(0, 100, userBal);\r\n        uint256 winPercentage = _winningDoubleRewardPercentage;\r\n        return luckyNumber \u003c= winPercentage;\r\n    }\r\n\r\n    function calculateBNBReward(address ofAddress) public view returns (uint256) {\r\n        uint256 totalSup = _tTotal;\r\n        totalSup = totalSup.sub(balanceOf(address(0)));\r\n        totalSup = totalSup.sub(balanceOf(address(pancakePair)));\r\n\t\ttotalSup = totalSup.sub(balanceOf(_farmAddr));\r\n\t\ttotalSup = totalSup.sub(balanceOf(address(pancakeBusdPair)));\r\n\r\n        return _calculateBNBReward(\r\n            balanceOf(address(ofAddress)),\r\n            address(this).balance,\r\n            totalSup\r\n        );\r\n    }\r\n\r\n    function _calculateBNBReward(\r\n        uint256 currentBalance,\r\n        uint256 currentBNBPool,\r\n        uint256 totalSup\r\n    ) internal view returns (uint256) {\r\n        uint256 bnbPool = currentBNBPool;\r\n\r\n        // calculate reward to send\r\n        bool isLotteryWonOnClaim = isLotteryWon(currentBalance, winningDoubleRewardPercentage);\r\n        uint256 multiplier = 100;\r\n\r\n        if (isLotteryWonOnClaim) {\r\n            multiplier = random(150, 200, currentBalance);\r\n        }\r\n\r\n        // now calculate reward\r\n        uint256 reward = bnbPool.mul(multiplier).mul(currentBalance).div(100).div(totalSup);\r\n\r\n        return reward;\r\n    }\r\n\r\n    function getRewardCycleBlock() public view returns (uint256) {\r\n        if (block.timestamp \u003e= disableEasyRewardFrom) return rewardCycleBlock;\r\n        return easyRewardCycleBlock;\r\n    }\r\n\r\n    function claimBNBReward() isHuman nonReentrant public {\r\n        require(nextAvailableClaimDate[msg.sender] \u003c= block.timestamp, \u0027Error: next available not reached\u0027);\r\n        require(balanceOf(msg.sender) \u003e= 0, \u0027Error: must own RRT to claim reward\u0027);\r\n\r\n        uint256 reward = calculateBNBReward(msg.sender);\r\n\r\n        // reward threshold\r\n        if (reward \u003e= rewardThreshold) {\r\n            swapETHForTokens(\r\n                address(_burnAddress),\r\n                reward.div(5)\r\n            );\r\n            reward = reward.sub(reward.div(5));\r\n        }\r\n\r\n        // update rewardCycleBlock\r\n        nextAvailableClaimDate[msg.sender] = block.timestamp + getRewardCycleBlock();\r\n        emit ClaimBNBSuccessfully(msg.sender, reward, nextAvailableClaimDate[msg.sender]);\r\n\r\n        (bool sent,) = address(msg.sender).call{value : reward}(\"\");\r\n        require(sent, \u0027Error: Cannot withdraw reward\u0027);\r\n    }\r\n\r\n    function topUpClaimCycleAfterTransfer(address recipient, uint256 amount) private {\r\n        uint256 currentRecipientBalance = balanceOf(recipient);\r\n        uint256 basedRewardCycleBlock = getRewardCycleBlock();\r\n\r\n        nextAvailableClaimDate[recipient] = nextAvailableClaimDate[recipient] + calculateTopUpClaim(\r\n            currentRecipientBalance,\r\n            basedRewardCycleBlock,\r\n            threshHoldTopUpRate,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function calculateTopUpClaim(\r\n        uint256 currentRecipientBalance,\r\n        uint256 basedRewardCycleBlock,\r\n        uint256 topUpRate,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        if (currentRecipientBalance == 0) {\r\n            return block.timestamp + basedRewardCycleBlock;\r\n        }\r\n        else {\r\n            uint256 rate = amount.mul(100).div(currentRecipientBalance);\r\n\r\n            if (uint256(rate) \u003e= topUpRate) {\r\n                uint256 incurCycleBlock = basedRewardCycleBlock.mul(uint256(rate)).div(100);\r\n\r\n                if (incurCycleBlock \u003e= basedRewardCycleBlock) {\r\n                    incurCycleBlock = basedRewardCycleBlock;\r\n                }\r\n\r\n                return incurCycleBlock;\r\n            }\r\n\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(\r\n        uint256 tokenAmount\r\n    ) internal {\r\n\r\n        // generate the pancake pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapETHForTokens(\r\n        address recipient,\r\n        uint256 ethAmount\r\n    ) internal {\r\n\r\n        // generate the pancake pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(recipient),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address owner,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) internal {\r\n\r\n        // add the liquidity\r\n        pancakeRouter.addLiquidityETH{value : ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n    function activateContract() public onlyOwner {\r\n        // reward claim\r\n        disableEasyRewardFrom = block.timestamp + 3 days;\r\n        rewardCycleBlock = 3 days;\r\n        easyRewardCycleBlock = 1 days;\r\n\r\n        winningDoubleRewardPercentage = 5; // 5% to earn double BNB Reward at claim\r\n\r\n\t\t// Initial Variables Set at Launch\r\n\t\t_minTokenNumberToSell = 2500 * (10 ** 18); // .25% of supply\r\n\t\t_maxTxAmount = 5000 * (10 ** 18); // .5% of supply, this also unlocks all transfers and swaps\r\n\t\t_taxFee = 6; // 6% Reflect fee\r\n\t\t_liquidityFee = 12; // 8%: Swap tokens to BNB, 50% stays for rewards, 50% added to liquidity\r\n\t\t_txBurn = 2; // 2% Burn\r\n\r\n\t\t// Allow transfers to farm, exclude lp pairs from reward\r\n\t\t_isExcludedFromMaxTx[_farmAddr] = true;\r\n\t\t\r\n        setSwapAndLiquifyEnabled(true);\r\n\r\n        // approve contract\r\n        _approve(address(this), address(pancakeRouter), 2 ** 256 - 1);\r\n    }\r\n\t\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.8;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\t\r\n    modifier isHuman() {\r\n        require(tx.origin == msg.sender, \"sorry humans only\");\r\n        _;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.8;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"}}