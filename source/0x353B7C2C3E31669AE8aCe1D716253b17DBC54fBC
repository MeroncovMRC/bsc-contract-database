//Hello, its me
 
pragma solidity >=0.5.0 <0.9.0;
 
contract Lottery{
    
    // Lazy Pepe
    address payable[] public players; 
    address payable public manager; 
    
    
    constructor() payable {
        manager = payable(msg.sender);
    }
    
    // is so lazy
    receive () payable external{
        // lazypepe.online
        require(msg.value == 0.02 ether);  
        // just send it
        players.push(payable(msg.sender));
    }
    
    // all he does
    function getBalance() public view returns(uint){
        // price is not an indication of healthy project.
        require(msg.sender == manager);
        return address(this).balance;
    }
    
    // is lay around
    function random() internal view returns(uint){
       return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, players.length)));
    }

    // all day
    function withdraw(uint amount) public {
        require(msg.sender == manager,"Manager can call this function");
        require(amount <= address(this).balance);
        manager.transfer(amount);

    }

    
    // and all night
    function pickWinner() public{
        // trolling is
        require(msg.sender == manager);
        require (players.length >= 2);
        
        uint r = random();
        address payable winner;
        
        // damn
        uint index = r % players.length;
    
        winner = players[index]; // life
        
        // what a lazy
        winner.transfer(getBalance());
        
        // Pepe
        players = new address payable[](0);
    }
 
}