/**
 *Submitted for verification at BscScan.com on 2023-07-06
*/

/**
 *Submitted for verification at BscScan.com on 2023-06-26
*/

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/utils/StorageSlotUpgradeable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)
// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.

pragma solidity ^0.8.18;

/**
 * @dev Library for reading and writing primitive types to specific storage slots.
 *
 * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.
 * This library helps with reading and writing to such slots without the need for inline assembly.
 *
 * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.
 *
 * Example usage to set ERC1967 implementation slot:
 * ```solidity
 * contract ERC1967 {
 *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
 *
 *     function _getImplementation() internal view returns (address) {
 *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
 *     }
 *
 *     function _setImplementation(address newImplementation) internal {
 *         require(newImplementation.code.length > 0);
 *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
 *     }
 * }
 * ```
 *
 * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._
 * _Available since v4.9 for `string`, `bytes`._
 */
library StorageSlotUpgradeable {
    struct AddressSlot {
        address value;
    }

    struct BooleanSlot {
        bool value;
    }

    struct Bytes32Slot {
        bytes32 value;
    }

    struct Uint256Slot {
        uint256 value;
    }

    struct StringSlot {
        string value;
    }

    struct BytesSlot {
        bytes value;
    }

    /**
     * @dev Returns an `AddressSlot` with member `value` located at `slot`.
     */
    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.
     */
    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.
     */
    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.
     */
    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `StringSlot` with member `value` located at `slot`.
     */
    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.
     */
    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := store.slot
        }
    }

    /**
     * @dev Returns an `BytesSlot` with member `value` located at `slot`.
     */
    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.
     */
    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := store.slot
        }
    }
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/proxy/beacon/IBeaconUpgradeable.sol


// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)

pragma solidity ^0.8.19;

/**
 * @dev This is the interface that {BeaconProxy} expects of its beacon.
 */
interface IBeaconUpgradeable {
    /**
     * @dev Must return an address that can be used as a delegate call target.
     *
     * {BeaconProxy} will check that this address is a contract.
     */
    function implementation() external view returns (address);
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/interfaces/draft-IERC1822Upgradeable.sol


// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)

pragma solidity ^0.8.19;

/**
 * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified
 * proxy whose upgrades are fully controlled by the current implementation.
 */
interface IERC1822ProxiableUpgradeable {
    /**
     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation
     * address.
     *
     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks
     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this
     * function revert if invoked through a proxy.
     */
    function proxiableUUID() external view returns (bytes32);
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/interfaces/draft-IERC6093Upgradeable.sol


pragma solidity ^0.8.19;

/**
 * @dev Standard ERC20 Errors
 * Interface of the ERC6093 custom errors for ERC20 tokens
 * as defined in https://eips.ethereum.org/EIPS/eip-6093
 */
interface IBEP20ErrorsUpgradeable {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC20InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC20InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     * @param allowance Amount of tokens a `spender` is allowed to operate with.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC20InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC20InvalidSpender(address spender);
}

/**
 * @dev Standard ERC721 Errors
 * Interface of the ERC6093 custom errors for ERC721 tokens
 * as defined in https://eips.ethereum.org/EIPS/eip-6093
 */
interface IERC721ErrorsUpgradeable {
    /**
     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.
     * Used in balance queries.
     * @param owner Address of the current owner of a token.
     */
    error ERC721InvalidOwner(address owner);

    /**
     * @dev Indicates a `tokenId` whose `owner` is the zero address.
     * @param tokenId Identifier number of a token.
     */
    error ERC721NonexistentToken(uint256 tokenId);

    /**
     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param tokenId Identifier number of a token.
     * @param owner Address of the current owner of a token.
     */
    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC721InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC721InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param tokenId Identifier number of a token.
     */
    error ERC721InsufficientApproval(address operator, uint256 tokenId);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC721InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC721InvalidOperator(address operator);
}

/**
 * @dev Standard ERC1155 Errors
 * Interface of the ERC6093 custom errors for ERC1155 tokens
 * as defined in https://eips.ethereum.org/EIPS/eip-6093
 */
interface IERC1155ErrorsUpgradeable {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC1155InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC1155InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param owner Address of the current owner of a token.
     */
    error ERC1155InsufficientApprovalForAll(address operator, address owner);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC1155InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC1155InvalidOperator(address operator);

    /**
     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
     * Used in batch transfers.
     * @param idsLength Length of the array of token identifiers
     * @param valuesLength Length of the array of token amounts
     */
    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/utils/AddressUpgradeable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.19;

/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, defaultRevert);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with a
     * `customRevert` function as a fallback when `target` reverts.
     *
     * Requirements:
     *
     * - `customRevert` must be a reverting function.
     *
     * _Available since v5.0._
     */
    function functionCall(
        address target,
        bytes memory data,
        function() internal view customRevert
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, customRevert);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, defaultRevert);
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with a `customRevert` function as a fallback revert reason when `target` reverts.
     *
     * Requirements:
     *
     * - `customRevert` must be a reverting function.
     *
     * _Available since v5.0._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        function() internal view customRevert
    ) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, customRevert);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, defaultRevert);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        function() internal view customRevert
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, customRevert);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, defaultRevert);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        function() internal view customRevert
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, customRevert);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided `customRevert`) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v5.0._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        function() internal view customRevert
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check if target is a contract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                if (target.code.length == 0) {
                    revert AddressEmptyCode(target);
                }
            }
            return returndata;
        } else {
            _revert(returndata, customRevert);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or with a default revert error.
     *
     * _Available since v5.0._
     */
    function verifyCallResult(bool success, bytes memory returndata) internal view returns (bytes memory) {
        return verifyCallResult(success, returndata, defaultRevert);
    }

    /**
     * @dev Same as {xref-Address-verifyCallResult-bool-bytes-}[`verifyCallResult`], but with a
     * `customRevert` function as a fallback when `success` is `false`.
     *
     * Requirements:
     *
     * - `customRevert` must be a reverting function.
     *
     * _Available since v5.0._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        function() internal view customRevert
    ) internal view returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, customRevert);
        }
    }

    /**
     * @dev Default reverting function when no `customRevert` is provided in a function call.
     */
    function defaultRevert() internal pure {
        revert FailedInnerCall();
    }

    function _revert(bytes memory returndata, function() internal view customRevert) private view {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            customRevert();
            revert FailedInnerCall();
        }
    }
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/proxy/ERC1967/ERC1967UtilsUpgradeable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Utils.sol)

pragma solidity ^0.8.18;




/**
 * @dev This abstract contract provides getters and event emitting update functions for
 * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.
 *
 * _Available since v4.1._
 */
library ERC1967UtilsUpgradeable {
    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.
    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.
    /**
     * @dev Emitted when the implementation is upgraded.
     */
    event Upgraded(address indexed implementation);

    /**
     * @dev Emitted when the admin account has changed.
     */
    event AdminChanged(address previousAdmin, address newAdmin);

    /**
     * @dev Emitted when the beacon is changed.
     */
    event BeaconUpgraded(address indexed beacon);

    /**
     * @dev Storage slot with the address of the current implementation.
     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is
     * validated in the constructor.
     */
    // solhint-disable-next-line private-vars-leading-underscore
    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;

    /**
     * @dev The `implementation` of the proxy is invalid.
     */
    error ERC1967InvalidImplementation(address implementation);

    /**
     * @dev The `admin` of the proxy is invalid.
     */
    error ERC1967InvalidAdmin(address admin);

    /**
     * @dev The `beacon` of the proxy is invalid.
     */
    error ERC1967InvalidBeacon(address beacon);

    /**
     * @dev Returns the current implementation address.
     */
    function getImplementation() internal view returns (address) {
        return StorageSlotUpgradeable.getAddressSlot(IMPLEMENTATION_SLOT).value;
    }

    /**
     * @dev Stores a new address in the EIP1967 implementation slot.
     */
    function _setImplementation(address newImplementation) private {
        if (newImplementation.code.length == 0) {
            revert ERC1967InvalidImplementation(newImplementation);
        }
        StorageSlotUpgradeable.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;
    }

    /**
     * @dev Perform implementation upgrade
     *
     * Emits an {IERC1967-Upgraded} event.
     */
    function upgradeTo(address newImplementation) internal {
        _setImplementation(newImplementation);
        emit Upgraded(newImplementation);
    }

    /**
     * @dev Perform implementation upgrade with additional setup call.
     *
     * Emits an {IERC1967-Upgraded} event.
     */
    function upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {
        upgradeTo(newImplementation);
        if (data.length > 0 || forceCall) {
            AddressUpgradeable.functionDelegateCall(newImplementation, data);
        }
    }

    /**
     * @dev Storage slot with the admin of the contract.
     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is
     * validated in the constructor.
     */
    // solhint-disable-next-line private-vars-leading-underscore
    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;

    /**
     * @dev Returns the current admin.
     *
     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the
     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.
     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`
     */
    function getAdmin() internal view returns (address) {
        return StorageSlotUpgradeable.getAddressSlot(ADMIN_SLOT).value;
    }

    /**
     * @dev Stores a new address in the EIP1967 admin slot.
     */
    function _setAdmin(address newAdmin) private {
        if (newAdmin == address(0)) {
            revert ERC1967InvalidAdmin(address(0));
        }
        StorageSlotUpgradeable.getAddressSlot(ADMIN_SLOT).value = newAdmin;
    }

    /**
     * @dev Changes the admin of the proxy.
     *
     * Emits an {IERC1967-AdminChanged} event.
     */
    function changeAdmin(address newAdmin) internal {
        emit AdminChanged(getAdmin(), newAdmin);
        _setAdmin(newAdmin);
    }

    /**
     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.
     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1) and is validated in the constructor.
     */
    // solhint-disable-next-line private-vars-leading-underscore
    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;

    /**
     * @dev Returns the current beacon.
     */
    function getBeacon() internal view returns (address) {
        return StorageSlotUpgradeable.getAddressSlot(BEACON_SLOT).value;
    }

    /**
     * @dev Stores a new beacon in the EIP1967 beacon slot.
     */
    function _setBeacon(address newBeacon) private {
        if (newBeacon.code.length == 0) {
            revert ERC1967InvalidBeacon(newBeacon);
        }

        address beaconImplementation = IBeaconUpgradeable(newBeacon).implementation();
        if (beaconImplementation.code.length == 0) {
            revert ERC1967InvalidImplementation(beaconImplementation);
        }

        StorageSlotUpgradeable.getAddressSlot(BEACON_SLOT).value = newBeacon;
    }

    /**
     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does
     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).
     *
     * Emits an {IERC1967-BeaconUpgraded} event.
     */
    function upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {
        _setBeacon(newBeacon);
        emit BeaconUpgraded(newBeacon);
        if (data.length > 0 || forceCall) {
            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);
        }
    }
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/proxy/utils/Initializable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)

pragma solidity ^0.8.19;


/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```solidity
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 *
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev The contract is already initialized.
     */
    error AlreadyInitialized();

    /**
     * @dev The contract is not initializing.
     */
    error NotInitializing();

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        if (!(isTopLevelCall && _initialized < 1) && !(address(this).code.length == 0 && _initialized == 1)) {
            revert AlreadyInitialized();
        }
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        if (_initializing || _initialized >= version) {
            revert AlreadyInitialized();
        }
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        if (!_initializing) {
            revert NotInitializing();
        }
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        if (_initializing) {
            revert AlreadyInitialized();
        }
        if (_initialized != type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/proxy/utils/UUPSUpgradeable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)

pragma solidity ^0.8.19;




/**
 * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an
 * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.
 *
 * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is
 * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing
 * `UUPSUpgradeable` with a custom implementation of upgrades.
 *
 * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.
 *
 * _Available since v4.1._
 */
abstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable {
    function __UUPSUpgradeable_init() internal onlyInitializing {
    }

    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {
    }
    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment
    address private immutable __self = address(this);

    /**
     * @dev The call is from an unauthorized context.
     */
    error UUPSUnauthorizedCallContext();

    /**
     * @dev The storage `slot` is unsupported as a UUID.
     */
    error UUPSUnsupportedProxiableUUID(bytes32 slot);

    /**
     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is
     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case
     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a
     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to
     * fail.
     */
    modifier onlyProxy() {
        if (
            address(this) == __self || // Must be called through delegatecall
            ERC1967UtilsUpgradeable.getImplementation() != __self // Must be called through an active proxy
        ) {
            revert UUPSUnauthorizedCallContext();
        }
        _;
    }

    /**
     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be
     * callable on the implementing contract but not through proxies.
     */
    modifier notDelegated() {
        if (address(this) != __self) {
            // Must not be called through delegatecall
            revert UUPSUnauthorizedCallContext();
        }
        _;
    }

    /**
     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the
     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.
     *
     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks
     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this
     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    function proxiableUUID() external view virtual notDelegated returns (bytes32) {
        return ERC1967UtilsUpgradeable.IMPLEMENTATION_SLOT;
    }

    /**
     * @dev Upgrade the implementation of the proxy to `newImplementation`.
     *
     * Calls {_authorizeUpgrade}.
     *
     * Emits an {Upgraded} event.
     *
     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall
     */
    function upgradeTo(address newImplementation) public virtual onlyProxy {
        _authorizeUpgrade(newImplementation);
        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);
    }

    /**
     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call
     * encoded in `data`.
     *
     * Calls {_authorizeUpgrade}.
     *
     * Emits an {Upgraded} event.
     *
     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall
     */
    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {
        _authorizeUpgrade(newImplementation);
        _upgradeToAndCallUUPS(newImplementation, data, true);
    }

    /**
     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by
     * {upgradeTo} and {upgradeToAndCall}.
     *
     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.
     *
     * ```solidity
     * function _authorizeUpgrade(address) internal  onlyOwner {}
     * ```
     */
    function _authorizeUpgrade(address newImplementation) internal virtual;

    /**
     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.
     *
     * Emits an {IERC1967-Upgraded} event.
     */
    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) private {
        try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {
            if (slot != ERC1967UtilsUpgradeable.IMPLEMENTATION_SLOT) {
                revert UUPSUnsupportedProxiableUUID(slot);
            }
            ERC1967UtilsUpgradeable.upgradeToAndCall(newImplementation, data, forceCall);
        } catch {
            // The implementation is not UUPS
            revert ERC1967UtilsUpgradeable.ERC1967InvalidImplementation(newImplementation);
        }
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/utils/ContextUpgradeable.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.19;


/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal onlyInitializing {
    }

    function __Context_init_unchained() internal onlyInitializing {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/access/OwnableUpgradeable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.18;



/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    function __Ownable_init(address initialOwner) internal onlyInitializing {
        __Ownable_init_unchained(initialOwner);
    }

    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/token/ERC20/IBEP20Upgradeable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IBEP20.sol)

pragma solidity ^0.8.19;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IBEP20Upgradeable {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/token/ERC20/extensions/IBEP20MetadataUpgradeable.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IBEP20Metadata.sol)

pragma solidity ^0.8.19;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IBEP20MetadataUpgradeable is IBEP20Upgradeable {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/89ed6ba7787ebe641b2b3bce5d18af1777ba0565/contracts/token/ERC20/ERC20Upgradeable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.19;






/**
 * @dev Implementation of the {IBEP20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IBEP20-approve}.
 */
abstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IBEP20Upgradeable, IBEP20MetadataUpgradeable, IBEP20ErrorsUpgradeable {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error ERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {
        __ERC20_init_unchained(name_, symbol_);
    }

    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IBEP20-balanceOf} and {IBEP20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IBEP20-totalSupply}.
     */
    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IBEP20-balanceOf}.
     */
    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IBEP20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IBEP20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IBEP20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IBEP20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IBEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IBEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `requestedDecrease`.
     */
    function decreaseAllowance(address spender, uint256 requestedDecrease) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance < requestedDecrease) {
            revert ERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
        }
        unchecked {
            _approve(owner, spender, currentAllowance - requestedDecrease);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _transfer(address from, address to, uint256 amount) internal {
        if (from == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        if (to == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(from, to, amount);
    }

    /**
     * @dev Transfers `amount` of tokens from `from` to `to`, or alternatively mints (or burns) if `from` (or `to`) is
     * the zero address. All customizations to transfers, mints, and burns should be done by overriding this function.
     *
     * Emits a {Transfer} event.
     */
    function _update(address from, address to, uint256 amount) internal virtual {
        if (from == address(0)) {
            _totalSupply += amount;
        } else {
            uint256 fromBalance = _balances[from];
            if (fromBalance < amount) {
                revert ERC20InsufficientBalance(from, fromBalance, amount);
            }
            unchecked {
                // Overflow not possible: amount <= fromBalance <= totalSupply.
                _balances[from] = fromBalance - amount;
            }
        }

        if (to == address(0)) {
            unchecked {
                // Overflow not possible: amount <= totalSupply or amount <= fromBalance <= totalSupply.
                _totalSupply -= amount;
            }
        } else {
            unchecked {
                // Overflow not possible: balance + amount is at most totalSupply, which we know fits into a uint256.
                _balances[to] += amount;
            }
        }

        emit Transfer(from, to, amount);
    }

    /**
     * @dev Creates `amount` tokens and assigns them to `account`, by transferring it from address(0).
     * Relies on the `_update` mechanism
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _mint(address account, uint256 amount) internal {
        if (account == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, by transferring it to address(0).
     * Relies on the `_update` mechanism.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead
     */
    function _burn(address account, uint256 amount) internal {
        if (account == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        _update(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        _approve(owner, spender, amount, true);
    }

    /**
     * @dev Alternative version of {_approve} with an optional flag that can enable or disable the Approval event.
     *
     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
     * `Approval` event during `transferFrom` operations.
     *
     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to true
     * using the following override:
     * ```
     * function _approve(address owner, address spender, uint256 amount, bool) internal virtual override {
     *     super._approve(owner, spender, amount, true);
     * }
     * ```
     *
     * Requirements are the same as {_approve}.
     */
    function _approve(address owner, address spender, uint256 amount, bool emitEvent) internal virtual {
        if (owner == address(0)) {
            revert ERC20InvalidApprover(address(0));
        }
        if (spender == address(0)) {
            revert ERC20InvalidSpender(address(0));
        }
        _allowances[owner][spender] = amount;
        if (emitEvent) {
            emit Approval(owner, spender, amount);
        }
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < amount) {
                revert ERC20InsufficientAllowance(spender, currentAllowance, amount);
            }
            unchecked {
                _approve(owner, spender, currentAllowance - amount, false);
            }
        }
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[45] private __gap;
}

// File: contracts/Agame.sol

/*
 SPDX-License-Identifier: None
 */

pragma solidity ^0.8.18;
// import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
// import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
// import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
// import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IDEXFactory {function createPair(address tokenA, address tokenB) external returns (address pair);}
interface IDEXPair {function sync() external;}
interface IDEXRouter {function factory() external pure returns (address);}

contract AGAME_TOKEN is Initializable, ERC20Upgradeable, OwnableUpgradeable, UUPSUpgradeable {
    //token information
    string private constant _name = "AGAME FINANCE";
    string private constant _symbol = "AGM";
    uint8 private constant _decimals = 18;
    uint256 private _totalSupply = 1_000_000_000 * (10**_decimals);
    //token distribution
    uint256 public _partners;// 130_000_000  * (10**_decimals);
    uint256 public _reserve;// 300_000_000  * (10**_decimals);
    uint256 public _developer;// 50_000_000  * (10**_decimals);
    uint256 public _marketing;// 50_000_000  * (10**_decimals);
    uint256 public _maintenance;// 50_000_000  * (10**_decimals);
    uint256 public _legal;// 50_000_000  * (10**_decimals);
    uint256 public _airdrop;// 100_000_000  * (10**_decimals);
    uint256 public _investors;// 70_000_000  * (10**_decimals);
    uint256 public _publicSales;// 200_000_000  * (10**_decimals);

    address public developer1Address;// 0x4816fEC583401c2117e924dC95BF21d37819FbD0;
    address public developer2Address;// 0x6a705DD24522230A428E186F946065101CE833AE;
    address public tradeAddress;
    //buy prices
    uint public dailyROI = 5000;
    uint public investmentDay = 182;
    uint public timeOfReward = 24;
    uint public tokenPriceInBusd = 1000 * 10**9;
    uint public tokenPriceInToken = 1000 * 10**9;
    uint public totalInvestmentBought = 0;
    uint public totalPartnershipBought = 0; 
    uint public sellCharges = 10;
    uint256 public devClaimPercent = 10;
    uint256 public etherValue = 1 * 10**_decimals;
    uint public less1m ;
    uint public divAmount;
    // uint public less2m = 200 ether;
    // uint public less5m = 300 ether;
    // uint public high5m = 500 ether;
    
    //taxes
    uint256 public liqTax = 2;
    uint256 public agameTax = 8;
    bool public swapActive = true;
    
    IDEXRouter public ROUTER;// = IDEXRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); //0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3 //0x10ED43C718714eb63d5aA57B78B54704E256024E
    address public CEO = 0x6a705DD24522230A428E186F946065101CE833AE;
    address public BUSD; //testnet - 0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814;
    address public oldContract; // 0x42C47bDEe5Ff82FAc177402eFfc1306362491c83 //0xeCD9D917F950EbEBd8c78197983E20A43B4aC0c4
    //fees wallet management
    address public treasury;
    address public swap;
    address public agame;
    address public pair;

    address[] public xBlockchain;
    address[] public partnerAdresses;
    struct tradeWithUs{
        uint id;
        address addr;
        uint amount;
    }
    uint public countTrade;
    tradeWithUs[] public trades;

    modifier onlyAdmin(){
        require (msg.sender == CEO, "Only the CEO can do that");
        _;
    }

    //wallets and fund management
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) public limitless;
    mapping(address => bool) public taxFreeWallet;
    mapping(address => bool) public isAgame;
    mapping (address => bool) public existedCustomer;
    mapping(address=>uint256) public refererBonusClaimed;
    mapping (address=>uint) public investorsBonus;
    mapping (address=>uint) public todayClaim;
    mapping (address => uint) public investAmount;
    mapping (address => uint) public claimTime;
    mapping (address => uint) public investedTime;
    mapping(address=>uint256) public investorsBonusClaimed;
    mapping(address => address) public referer;
    mapping (address => uint) public devClaim;
    mapping (address => uint) public referCount;
    mapping (address => uint) public claimedToken;
    mapping (address=> uint) public oldCustomerAirdrop;
    
    //all events management
    event agameAddressChanged(address agame);
    event agameRemoved(address agameAddress);
    event agameAdded(address agameAddress);
    event TaxStatusOfWalletSet(address wallet, bool status);
    event TreasuryAddressChanged(address treasury);
    event AgameSwapAddressChanged(address agameSwapAddress);
    event TaxesChanged(uint256 liq, uint256 agame);
    event NewLimitlessAddress(address limitlessAddress);
    event NewLimitedAddress(address limitedAddress);
    event agameToppedUp(address agameAddress, uint256 howMuchWasMissing);
    event TokensSentToTreasury(address tokenRescued, uint256 amountRescued);
    event SwapStatusSet(bool active);
    event BnbRescued();
    event claimInvestmentE(address _investor, uint _amt);
    event logRefererShares(string level, uint256 amountBought, address shareReciever, uint256 amountRecieved);
    event claimROI(address _addr, uint _amountToClaim, uint _ctime);
    function initialize() initializer public {
        __ERC20_init("Agame FINANCE", "AGM");
        __Ownable_init(msg.sender);
        
        _totalSupply = 1_000_000_000 * (10**_decimals);
    //token distribution
    _partners = 130_000_000  * (10**_decimals);
    _reserve = 300_000_000  * (10**_decimals);
    _developer = 50_000_000  * (10**_decimals);
    _marketing = 50_000_000  * (10**_decimals);
    _maintenance = 50_000_000  * (10**_decimals);
    _legal = 50_000_000  * (10**_decimals);
    _airdrop = 100_000_000  * (10**_decimals);
    _investors = 70_000_000  * (10**_decimals);
    _publicSales = 200_000_000  * (10**_decimals);

    developer1Address = 0x6a705DD24522230A428E186F946065101CE833AE;
    developer2Address = 0x487dcadbf7F37Aeb803aC82A4BDcd001F3A2Cc1f;

    dailyROI = 5000;
    investmentDay = 182;
    timeOfReward = 24;
    tokenPriceInBusd = 1000 * 10**9;
    tokenPriceInToken = 1000 * 10**9;
    totalInvestmentBought = 0;
    totalPartnershipBought = 0; 
    
    //taxes
    liqTax = 2;
    agameTax = 8;
    swapActive = true;
    less1m = 100 ether;
    divAmount = 57;
    ROUTER = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    oldContract = 0xeCD9D917F950EbEBd8c78197983E20A43B4aC0c4;
    CEO = 0x6a705DD24522230A428E186F946065101CE833AE;
    tradeAddress = CEO;
    BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; //0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814 //0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56

        pair = IDEXFactory(ROUTER.factory()).createPair(BUSD, address(this));
        require(address(pair) != address(0), "Pair creation failed.");
        _allowances[address(this)][address(ROUTER)] = type(uint256).max;
        uint contractToken = _partners + _reserve + _investors + _publicSales + _legal + _maintenance + _airdrop;
        uint devShare = (50 * (_developer)) / 100;
        limitless[CEO] = true;
        limitless[address(this)] = true;
        _balances[CEO] = _totalSupply;
        treasury = 0xC458A76C689b4adD5E8273c75d7897A94eaf2BcE;
        emit Transfer(address(0), CEO, _totalSupply);
        _transferFrom(CEO, address(this), contractToken);
        _transferFrom(CEO, developer1Address, devShare);
        _transferFrom(CEO, developer2Address, devShare);
        claimTime[developer1Address] = block.timestamp + (86400 * 7);
        investAmount[developer1Address] = devShare;
        investedTime[developer1Address] = block.timestamp;
        claimTime[developer2Address] = block.timestamp + (86400 * 7);
        investAmount[developer2Address] = devShare;
        investedTime[developer2Address] = block.timestamp;
        _transferFrom(CEO, treasury, _marketing);
        __UUPSUpgradeable_init();

    }

    function _authorizeUpgrade(address newImplementation)
        internal
        onlyOwner
        override
    {}

    function name() public pure override returns (string memory) {return _name;}
    function totalSupply() public view override returns (uint256) {return _totalSupply;}
    function decimals() public pure override returns (uint8) {return _decimals;}
    function symbol() public pure override returns (string memory) {return _symbol;}
    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}
    function allowance(address holder, address spender) public view override returns (uint256) {return _allowances[holder][spender];}
    function approveMax(address spender) external returns (bool) {return approve(spender, type(uint256).max);}
    
    function getTokenDistribution() external view returns (uint, uint, uint, uint, uint, uint, uint, uint, uint){
        return(_partners, _reserve, _developer, _marketing, _maintenance , _legal, _airdrop, _investors, _publicSales);
    }

    function getValue(uint _tokenAmount) public view returns (uint){
        return (_tokenAmount / ( (tokenPriceInToken / 10**9)))  ;
    }

    function getXBlockchain() public view returns (address[] memory){
        return xBlockchain;
    }

    function getRefererCount(address _addr) public view returns (uint){
        return referCount[_addr];
    }

    function getPartners() public view returns (address[] memory){
        return partnerAdresses;
    }
    function getTrades() public view returns(tradeWithUs[] memory){
        return trades;
    }

    function getUserTrade(uint id) public view returns(tradeWithUs memory){
        return trades[id];
    }
    function oldInvestorsBalance(address _addr) public view returns (uint){
        return IBEP20(oldContract).balanceOf(_addr);
    }
    function getInvestmentInfo(address _addr) public view returns (uint, uint, uint, uint, uint){
        return (investAmount[_addr], investedTime[_addr], investorsBonus[_addr], todayClaim[_addr], claimedToken[_addr]);
    }

    function getExistingCustomer(address _addr) public view returns (bool){
        return existedCustomer[_addr];
    }
    function getSystemInfo() public view returns(uint, uint, uint, uint, uint, uint){
    return(dailyROI, investmentDay, timeOfReward, tokenPriceInBusd, tokenPriceInToken, totalInvestmentBought);
    }
    function getBUSDValue(uint _busdAmount) public view returns (uint){
        return (_busdAmount * tokenPriceInBusd) / 10**9;
    }

    function get_referer_bonus(address _recipient) public  view returns(uint){
        return refererBonusClaimed[_recipient];
    }

    function approveAllAgame() external {
        approve(swap, type(uint256).max);
        approve(agame, type(uint256).max);
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        require(spender != address(0), "Can't use zero address here");
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {
        require(spender != address(0), "Can't use zero address here");
        _allowances[msg.sender][spender]  = allowance(msg.sender, spender) + addedValue;
        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {
        require(spender != address(0), "Can't use zero address here");
        require(allowance(msg.sender, spender) >= subtractedValue, "Can't subtract more than current allowance");
        _allowances[msg.sender][spender]  = allowance(msg.sender, spender) - subtractedValue;
        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);
        return true;
    }
    
    function transfer(address recipient, uint256 amount) public  override returns (bool) {
        return _transferFrom(msg.sender, recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
        if (_allowances[sender][msg.sender] != type(uint256).max) {
            require(_allowances[sender][msg.sender] >= amount, "Insufficient Allowance");
            _allowances[sender][msg.sender] -= amount;
            emit Approval(sender, msg.sender, _allowances[sender][msg.sender]);
        }
        
        return _transferFrom(sender, recipient, amount);
    }

    function _transferFrom(address sender, address recipient, uint256 amount) internal  returns (bool) {
        require(sender != address(0) && recipient != address(0), "Can't use zero addresses here");
        if(amount == 0) return true;
        require(claimTime[sender] < block.timestamp || _balances[sender] >= (investAmount[sender] + amount), "sorry you can't transfer you're locked");
        if (limitless[sender] || limitless[recipient]) return __transfer(sender, recipient, amount);
        
        if(sender == pair || recipient == pair) {
            require(swapActive==false, "Please use AgameSwap");
            if(!swapActive) amount = takeTax(sender, amount);
            return __transfer(sender, recipient, amount);
        }

        bool taxFree;
        if (taxFreeWallet[sender] || taxFreeWallet[recipient]) taxFree = true;

        amount = taxFree ? amount : takeTax(sender, amount);
        return __transfer(sender, recipient, amount);
    }

    function takeTax(address sender, uint256 amount) internal returns (uint256){
        __transfer(sender, pair, amount * liqTax / 100);
        IDEXPair(pair).sync();
        __transfer(sender, agame, amount * agameTax / 100);
        return amount * (100 - agameTax - liqTax) / 100;
    }
    
    function claimDev() public {
        uint ctime = block.timestamp;
        require(investAmount[msg.sender] > 0,"You don't have any invested token");
        if(ctime > investedTime[msg.sender] ){
            if(investAmount[msg.sender] > 0 ){
            
            uint fivePercent = (devClaimPercent * investAmount[msg.sender]) / 1000;
            investAmount[msg.sender] -= fivePercent;
            investedTime[msg.sender] = ctime + (86400*7);
            devClaim[msg.sender] += fivePercent;
            emit claimInvestmentE(msg.sender, fivePercent);
            }
            else{
                emit claimInvestmentE(msg.sender, investAmount[msg.sender]);
                investAmount[msg.sender] = 0;
            }
        }    
    }

    // function claimDevOnce() public {
    //     require(investAmount[msg.sender] > 0,"You don't have any invested token");
        
    //         if(investAmount[msg.sender] > (25000000 * 10 ** 18) ){
            
    //         uint fivePercent = (50 * investAmount[msg.sender]) / 1000;
    //         investAmount[msg.sender] -= fivePercent;
    //         devClaim[msg.sender] += fivePercent;
    //         emit claimInvestmentE(msg.sender, fivePercent);
    //         }          
    // }

    function claimInvestment() public {
        uint ctime = block.timestamp;
        require(investAmount[msg.sender] > 0,"You don't have any invested token");
        if(ctime > investedTime[msg.sender] + (86400* 90) && ctime > investedTime[msg.sender] + (86400* 180)){
            uint threeMonths = (3333 * investAmount[msg.sender]) / 10000;
            investAmount[msg.sender] -= threeMonths;
            claimedToken[msg.sender] += threeMonths;
            emit claimInvestmentE(msg.sender, threeMonths);
        }
        else if(ctime > investedTime[msg.sender] + (86400* 180) && ctime > investedTime[msg.sender] + (86400* 270)){
            uint threeMonths = (3333 * investAmount[msg.sender]) / 10000;
            investAmount[msg.sender] -= threeMonths;
            claimedToken[msg.sender] += threeMonths;
            emit claimInvestmentE(msg.sender, threeMonths);
            
        }
        else{
            
            claimedToken[msg.sender] += investAmount[msg.sender];
            emit claimInvestmentE(msg.sender, investAmount[msg.sender]);
            investAmount[msg.sender] = 0;
        }
    }

    function tradeToken(uint amountToSpend) public {
        require(claimedToken[msg.sender] > 0, "You can't trade");
        _transferFrom(msg.sender, tradeAddress, amountToSpend);
        
        trades.push(tradeWithUs(countTrade, msg.sender, claimedToken[msg.sender]));
        countTrade++;
        claimedToken[msg.sender] = 0;   
    }

    function checkSwap(address sender, address recipient) internal view returns (bool) {
        if(!swapActive) return true;
        if(recipient == swap || sender == swap) return true;
        return false;
    }

    function __transfer(address sender, address recipient, uint256 amount) internal returns(bool) {
        if(isAgame[sender] && amount > _balances[sender]) _agameTopUp(sender, amount);
        require(amount <= _balances[sender], "Can't transfer more than you own");
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function _agameTopUp(address agameAddress, uint256 amountNeeded) internal {
        uint256 howMuchIsMissing = amountNeeded - _balances[agameAddress];
        _balances[agameAddress] += howMuchIsMissing;
        _totalSupply += howMuchIsMissing;
        emit agameToppedUp(agameAddress, howMuchIsMissing);
    }

    function setTreasury(address treasuryAddress) external onlyAdmin {
        require(treasury != treasuryAddress, "Treasury is already set to this address");
        require(treasuryAddress != address(0), "Can't use zero addresses here");
        treasury = treasuryAddress;
        limitless[treasury] = true;
        emit NewLimitlessAddress(treasury);
        emit TreasuryAddressChanged(treasury);
    }
    
    function setAgame(address agameAddress) external onlyAdmin {
        require(agame != agameAddress, "agame is already set to this address");
        require(agameAddress != address(0), "Can't use zero addresses here");
        isAgame[agame] = false;
        emit agameRemoved(agame);
        agame = agameAddress;
        isAgame[agame] = true;
        limitless[agame] = true;
        emit NewLimitlessAddress(agame);
        emit agameAdded(agameAddress);
        emit agameAddressChanged(agame);
    }

    function setPairWallet(address agamePairAddress) external onlyAdmin {
        require(agamePairAddress != address(0), "Can't use zero addresses here");
        pair = agamePairAddress;
        
    }

    function updateAgame(address agameAddress) external onlyAdmin {
        require(!isAgame[agameAddress], "Address is already set as agame");
        require(agameAddress != address(0), "Can't use zero addresses here");
        isAgame[agameAddress] = true;
        emit agameAdded(agameAddress);
    }

    function deleteAgame(address agameAddress) external onlyAdmin {
        require(isAgame[agameAddress], "Address is not a agame");
        require(agameAddress != address(0), "Can't use zero addresses here");
        isAgame[agameAddress] = false;
        emit agameRemoved(agameAddress);
    }

    function withdrawToTreasury(address tokenToRescue) external onlyAdmin {
        emit TokensSentToTreasury(tokenToRescue, IBEP20(tokenToRescue).balanceOf(address(this)));
        require(IBEP20(tokenToRescue).transfer(treasury, IBEP20(tokenToRescue).balanceOf(address(this))),"Token transfer failed");
    }

    function recoverBnb() external onlyAdmin {
        (bool success,) = address(treasury).call{value: address(this).balance}("");
        require(success, "RescueBnb failed!");
        emit BnbRescued();
    }

    function setTaxes(uint256 newLiqTax, uint256 newagameTax) external onlyAdmin {
        liqTax = newLiqTax;
        agameTax = newagameTax;
        require(liqTax + agameTax <= 100, "Taxes can't exceed 100%");
        emit TaxesChanged(liqTax, agameTax);
    }

    function setTaxFreeWallet(address wallet, bool status) external onlyAdmin {
        require(taxFreeWallet[wallet] != status, "Desired status already in effect");
        taxFreeWallet[wallet] = status;
        emit TaxStatusOfWalletSet(wallet, status);
    }

    function unlimitAddress(address addressThatShouldBeLimitless) external onlyAdmin {
        require(limitless[addressThatShouldBeLimitless], "Address is already limitless");
        limitless[addressThatShouldBeLimitless] = true;
        emit NewLimitlessAddress(addressThatShouldBeLimitless);
    }

    function limitWallet(address addressThatShouldBeLimited) external onlyAdmin {
        require(!limitless[addressThatShouldBeLimited], "Address is already limited");
        limitless[addressThatShouldBeLimited] = false;
        emit NewLimitedAddress(addressThatShouldBeLimited);
    }

    function updateSwap(bool active) external onlyAdmin {
        require(swapActive != active, "Desired status already in effect");
        swapActive = active;
        emit SwapStatusSet(active);
    }

    function changeTradeAddress(address _addr) public onlyAdmin{
        tradeAddress = _addr;
    }

    function updateCharges(uint256 _sellCharges, uint256 _devClaimPercent) public onlyAdmin{
        sellCharges = _sellCharges;
        devClaimPercent = _devClaimPercent;
    }

    function swapTokenToBUSD(uint _tokenAmount) public{
        uint amountToSend = getValue(_tokenAmount);
        uint deliverAmont = amountToSend - ((amountToSend * sellCharges) / 100);
        require(_tokenAmount + claimedToken[msg.sender] < _balances[msg.sender], "You can't swap" );
        _transferFrom(msg.sender, address(this), _tokenAmount);
        IBEP20(BUSD).transfer(msg.sender, deliverAmont);
    }

    function updateOldInvestorAmount(uint _less1m, uint _divAmount) public onlyAdmin{
        less1m =_less1m;
        divAmount = _divAmount;
    }

    function buyTokenInvestors(uint _busdAmount, address referBy) public{
        uint amountToSend = getBUSDValue(_busdAmount);
        
        uint oldBalance = 0;
        uint minBuy = less1m;

        if(IBEP20(oldContract).balanceOf(msg.sender) > 0){
            if(oldCustomerAirdrop[msg.sender] < 1){
                oldBalance = IBEP20(oldContract).balanceOf(msg.sender);
                require(_busdAmount >= minBuy,"You need to buy min. of ");
                oldCustomerAirdrop[msg.sender] = (10 * oldBalance) / 57;
                IBEP20(oldContract).transferFrom(msg.sender, address(this), oldBalance);
                oldBalance = (10 * oldBalance) / divAmount;
                
            }
        }
        require((amountToSend + totalInvestmentBought) < (_investors + _partners), "Token investment sold off" );
        IBEP20(BUSD).transferFrom(msg.sender, address(this), _busdAmount);
        uint256 totalRefererShare = 0;
        if (referer[msg.sender] == address(0)) {
            referer[msg.sender] = referBy;
            referCount[referBy] += 1;
        }
        uint refererShare = (amountToSend * 50) / 1000;
        // uint deliverShare = 0; //amountToSend - refererShare;
            totalRefererShare = refererShare;
            if (referBy != address(0)) {
                IBEP20(address(this)).transfer(referBy, refererShare);
              //  IBEP20(BUSD).transfer(referBy, refererShare);
                refererBonusClaimed[referBy] += refererShare;
        address secondReferer = referer[referBy];
                if (secondReferer != address(0)) {
        uint256 sRefererShare = (amountToSend * 20) / 1000;
                    IBEP20(address(this)).transfer(secondReferer, sRefererShare);
                  //  IBEP20(BUSD).transfer(secondReferer, sRefererShare);
                    refererBonusClaimed[secondReferer] += sRefererShare;
                    totalRefererShare += sRefererShare; 
        address thirdReferer = referer[secondReferer];
                    if (thirdReferer != address(0)) {
        uint256 tRefererShare = (_busdAmount * 10) / 1000;
                        totalRefererShare += tRefererShare;
                        IBEP20(address(this)).transfer(thirdReferer, tRefererShare);
                        //IBEP20(BUSD).transfer(thirdReferer, tRefererShare);
                        refererBonusClaimed[thirdReferer] += tRefererShare;
                    }

                }
        }
        xBlockchain.push(msg.sender);

        if(_busdAmount >= 5000 ether){
        partnerAdresses.push(msg.sender);
        }

        amountToSend += oldBalance ;
                
        uint adminShare = (_busdAmount * 90) / 100;
        IBEP20(BUSD).transfer(treasury, adminShare);
        investAmount[msg.sender] += amountToSend;
        claimTime[msg.sender] = block.timestamp + (3600 * timeOfReward * investmentDay);
        investedTime[msg.sender] = block.timestamp;
        IBEP20(address(this)).transfer( msg.sender, amountToSend);
        totalInvestmentBought += amountToSend;
    }
    
    function claimDailyROI(address _addr) public {
        uint256 ctime = block.timestamp;
        uint256 amountToClaim =  (((dailyROI * investAmount[_addr]) / 100) / 10000);
        if(existedCustomer[_addr]==true){
            amountToClaim =  (((dailyROI * investAmount[_addr]) / 100) / 100000);
        }
        if(ctime <= claimTime[_addr] && todayClaim[_addr] < ctime){
        IBEP20(address(this)).transfer(_addr, amountToClaim);
        todayClaim[_addr] = ctime + 3600 * timeOfReward;
        investorsBonusClaimed[_addr] += amountToClaim;
        claimedToken[msg.sender] +=amountToClaim;
        }
        emit claimROI(_addr, amountToClaim, ctime);
    }

    function claimAllDaysROI(address _addr) public {

        uint256 ctime = block.timestamp;
        uint daysLeft = (ctime - todayClaim[_addr]) / (3600 * timeOfReward);
        uint256 amountToClaim =  (((dailyROI * investAmount[_addr]) / 100) / 10000) * daysLeft;

        if(existedCustomer[_addr]==true){
            amountToClaim =  (((dailyROI * investAmount[_addr]) / 100) / 100000) * daysLeft;
        }

        if(ctime <= claimTime[_addr] && todayClaim[_addr] < ctime){
        IBEP20(address(this)).transfer(_addr, amountToClaim);
        todayClaim[_addr] = ctime + 3600 * timeOfReward;
        investorsBonusClaimed[_addr] += amountToClaim;
        claimedToken[msg.sender] +=amountToClaim;
        }

    }

    function updateBUSDAddress(address _busd, address _oldContract) public onlyAdmin{
        BUSD = _busd;
        oldContract = _oldContract;
    }

    function setup(uint _dailyROI, uint _tokenPriceInBUSD, uint _tokenPriceInToken, uint _timeOfReward, uint _investmentDay) public onlyAdmin{
        dailyROI = _dailyROI;
        tokenPriceInBusd = _tokenPriceInBUSD * 10**9;
        tokenPriceInToken = _tokenPriceInToken * 10**9;
        timeOfReward = _timeOfReward;
        investmentDay = _investmentDay;
    }

    function updateExistingCustomer(address _addr, bool _flag) public onlyAdmin {
        existedCustomer[_addr] = _flag;
    }

    function withdraw_busd (uint amount, address _addr) public onlyAdmin {
        IBEP20(BUSD).transfer(_addr, amount);
    }

    function multiTransfer(address[] calldata addresses, uint256[] calldata tokens, bool _exist) external onlyAdmin {

        require(addresses.length < 501,"GAS Error: max airdrop limit is 500 addresses");
        require(addresses.length == tokens.length,"Mismatch between Address and token count");

        uint256 SCCC = 0;

        for(uint i=0; i < addresses.length; i++){
            SCCC = SCCC + tokens[i];
        }

      //  require(balances(address(this)) >= SCCC, "Not enough tokens in wallet");

        for(uint i=0; i < addresses.length; i++){
            _transferFrom(msg.sender,addresses[i],tokens[i]);
            if(_exist==true){
            existedCustomer[addresses[i]] = true;
            }
        }
        
    }

    function getCurrentTime() public view returns (uint256) {
        return block.timestamp;
    }

    function changeAdmin(address _CEO) public onlyAdmin{
        CEO = _CEO;
    }
}