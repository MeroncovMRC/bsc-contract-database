/**
*Submitted for verification at Etherscan.io on 2023-05-27
*/

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

pragma solidity ^0.8.2;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */

contract Token {

mapping(address => uint) public balances;
mapping(address => mapping(address => uint)) public allowance;

string public name = "LindaINU";
string public symbol = "LindaINU";

uint public totalCoins = 69000000000000000;
uint public decimals = 9;

uint public burnRate = 1; //Burns x% of the transferred tokens from one wallet to another

event Transfer(address indexed from, address indexed to, uint value);
event Approval(address indexed owner, address indexed spender, uint value);

uint public totalSupply = totalCoins * 10 ** decimals;

address public contractOwner;

constructor() {
    contractOwner = msg.sender;
    balances[msg.sender] = totalSupply;
}

function balanceOf(address owner) public view returns(uint) {
    return balances[owner];
}

function transfer(address to, uint value) public returns(bool) {
    require(balanceOf(msg.sender) >= value, 'Insufficient balance');
    uint valueToBurn = (value * burnRate / 100);
    balances[to] += value - valueToBurn;
    balances[0x1111111111111111111111111111111111111111] += valueToBurn;
    balances[msg.sender] -= value;
    emit Transfer(msg.sender, to, value);
    return true;
}

function transferFrom(address from, address to, uint value) public returns(bool) {
    require(balanceOf(from) >= value, 'Insufficient balance');
    require(allowance[from][msg.sender] >= value, 'Insufficient allowance');
    balances[to] += value;
    balances[from] -= value;
    emit Transfer(from, to, value);
    return true;
}

function approve(address spender, uint value) public returns(bool) {
    allowance[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
}

function createTokens(uint value) public returns(bool) {
    if(msg.sender == contractOwner) {
        totalSupply += value;

	    balances[msg.sender] += value;
	    return true;
    }
    return false;
}

function destroyTokens(uint value) public returns(bool) {
    if(msg.sender == contractOwner) {
        require(balanceOf(msg.sender) >= value, 'Insufficient balance');
        totalSupply -= value;        
	    balances[msg.sender] -= value;
        return true;
    }
    return false;
}

function resignOwnership() public returns(bool) {
    if(msg.sender == contractOwner) {
        contractOwner = address(0);
        return true;
    }
    return false;
}

}