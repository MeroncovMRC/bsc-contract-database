// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract GG {
    address public owner;
    uint256 public phase1Duration = 5 minutes;
    uint256 public phase2Duration = 15 seconds;
    uint256 public minimumBet = 0.01 ether;
    uint256 public maximumBet = 1 ether;
    uint256 public phase1EndTime;
    uint256 public phase2StartTime;
    bool public isPhase1Active;
    bool public isPhase2Active;
    mapping(address => uint256) public userBetsOnSideA;
    mapping(address => uint256) public userBetsOnSideB;

    event BetPlaced(address indexed user, uint256 amount, string side);
    event WinnerDeclared(string side, uint256 totalPrize);
    event StuckETHClaimed(uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner");
        _;
    }

    modifier onlyDuringPhase1() {
        require(isPhase1Active, "Phase 1 is not active");
        require(block.timestamp <= phase1EndTime, "Phase 1 has ended");
        _;
    }

    modifier onlyBeforePhase2() {
        require(isPhase1Active && !isPhase2Active, "Betting for Phase 2 has not started");
        require(block.timestamp > phase1EndTime && block.timestamp <= phase1EndTime + 1 minutes, "Betting for Phase 2 has ended");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function startRound() external onlyOwner {
        require(!isPhase1Active && !isPhase2Active, "A round is already active");

        // Start Phase 1
        isPhase1Active = true;
        phase1EndTime = block.timestamp + phase1Duration;

        // Reset Phase 2 start time
        phase2StartTime = 0;
        isPhase2Active = false;
    }

    function placeBetA() external payable onlyDuringPhase1 {
        require(msg.value >= minimumBet && msg.value <= maximumBet, "Invalid bet amount");
        userBetsOnSideA[msg.sender] += msg.value;
        emit BetPlaced(msg.sender, msg.value, "Side A");

        // Check if Phase 2 needs to be started
        if (phase2StartTime == 0 && block.timestamp > phase1EndTime && block.timestamp <= phase1EndTime + 1 minutes) {
            startPhase2();
        }
    }

    function placeBetB() external payable onlyDuringPhase1 {
        require(msg.value >= minimumBet && msg.value <= maximumBet, "Invalid bet amount");
        userBetsOnSideB[msg.sender] += msg.value;
        emit BetPlaced(msg.sender, msg.value, "Side B");

        // Check if Phase 2 needs to be started
        if (phase2StartTime == 0 && block.timestamp > phase1EndTime && block.timestamp <= phase1EndTime + 1 minutes) {
            startPhase2();
        }
    }

    function startPhase2() private {
        // Start Phase 2 automatically after Phase 1 ends and any user places a bet
        phase2StartTime = block.timestamp;
        isPhase2Active = true;
    }

    function declareWinners() external onlyOwner {
        require(isPhase2Active, "Phase 2 is not active");
        require(block.timestamp >= phase2StartTime + phase2Duration, "Phase 2 has not ended yet");

        // Rest of the winner declaration logic (omitted for brevity)
        // ...

        // Reset Phase 1 and Phase 2 flags
        isPhase1Active = false;
        isPhase2Active = false;
    }

    function claimWinnings() external view {
        require(isPhase2Active, "Phase 2 is not active");
        require(block.timestamp >= phase2StartTime + phase2Duration, "Phase 2 has not ended yet");

        // Rest of the winnings claim logic (omitted for brevity)
        // ...
    }

    function claimBalance() external view {
        require(isPhase2Active, "Phase 2 is not active");
        require(block.timestamp >= phase2StartTime + phase2Duration, "Phase 2 has not ended yet");

        // Rest of the balance claim logic (omitted for brevity)
        // ...
    }

    function getPhase2Countdown() external view returns (uint256) {
        if (!isPhase2Active) {
            return 0;
        }

        uint256 timeRemaining = phase2StartTime + phase2Duration - block.timestamp;
        if (timeRemaining > 0) {
            return timeRemaining;
        } else {
            return 0;
        }
    }

    function claimStuckEth() external onlyOwner {
        // Ensure Phase 2 has ended before claiming stuck ETH
        require(!isPhase2Active, "Phase 2 has not ended yet");

        uint256 stuckEth = address(this).balance;
        require(stuckEth > 0, "No stuck ETH to claim");
        payable(msg.sender).transfer(stuckEth);
        emit StuckETHClaimed(stuckEth);
    }

    // Functions to set the minimum bet, maximum bet, Phase 1 duration, and Phase 2 duration
    // Only callable by the owner
    function setMinimumBet(uint256 newMinimumBet) external onlyOwner {
        minimumBet = newMinimumBet;
    }

    function setMaximumBet(uint256 newMaximumBet) external onlyOwner {
        maximumBet = newMaximumBet;
    }

    function setPhase1Duration(uint256 newDuration) external onlyOwner {
        phase1Duration = newDuration;
    }

    function setPhase2Duration(uint256 newDuration) external onlyOwner {
        phase2Duration = newDuration;
    }
}