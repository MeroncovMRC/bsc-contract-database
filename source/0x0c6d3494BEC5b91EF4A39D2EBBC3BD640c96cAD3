// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract FluffyInuToken {
    string public name;
    string public symbol;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event SaleEnabled(bool enabled);

    uint8 public constant decimals = 18;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }

    bool public saleEnabled;

    constructor() {
        name = "Fluffy Inu";
        symbol = "FLUFF";
        totalSupply = 10000000000 * 10**decimals; // 10 billion tokens with 18 decimals
        owner = msg.sender;
        saleEnabled = true;
        
        balanceOf[owner] = totalSupply; // Mint the total supply to the owner's address
    }

    function enableSale() external onlyOwner {
        saleEnabled = true;
        emit SaleEnabled(true);
    }

    function disableSale() external onlyOwner {
        saleEnabled = false;
        emit SaleEnabled(false);
    }

    function buyTokens(uint256 _amount) external payable {
        require(saleEnabled, "Token sale is currently not enabled.");
        require(balanceOf[owner] >= _amount, "Insufficient tokens available for sale.");

        uint256 cost = _amount * 1 ether; // Replace 1 ether with the actual token price

        require(msg.value >= cost, "Insufficient funds sent.");

        balanceOf[msg.sender] += _amount;
        balanceOf[owner] -= _amount;

        emit Transfer(owner, msg.sender, _amount);
    }

    function sellTokens(uint256 _amount) external onlyOwner {
        require(balanceOf[owner] >= _amount, "Insufficient tokens for sale.");

        balanceOf[owner] -= _amount;

        emit Transfer(owner, address(0), _amount);
    }
}