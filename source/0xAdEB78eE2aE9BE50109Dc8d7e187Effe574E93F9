{"child.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\nimport \"./rule.sol\";\r\nimport \"./factory.sol\";\r\n \r\n contract GET_TOKEN is MinterRole  {\r\n    \r\n    \r\n    using SafeMath for uint;\r\n    using SafeMath for uint256;    \r\n    address defaultContract;\r\n    address defaultContract2;   \r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    //0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // BNB MAIN NET\r\n    //0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; //BNB TESTNET\r\n\r\n    address creatoraddress;\r\n    address factory;\r\n    address easy_address;    \r\n        \r\n    IUniswapV2Router02  router;\r\n\r\n    IERC20 X;\r\n\r\n    event Easy_Created(address factory_address, address token_target, address promoter_address, address easyswap_address);\r\n\r\n    constructor (address _defaultContract2, address _promoter)  {\r\n\r\n        //0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3 TESTNET PANCAKESWAP ROUTER\r\n        //0x10ED43C718714eb63d5aA57B78B54704E256024E MAINNET PANCAKESWAP ROUTER\r\n\r\n        router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n        X = IERC20(msg.sender);\r\n        factory = msg.sender;              \r\n        easy_address = address(this);\r\n        defaultContract2 = _defaultContract2; // NEW TOKEN - 97.5%\r\n        creatoraddress = _promoter; // Promoter Address        \r\n\r\n         emit Easy_Created(\r\n             factory,\r\n             _defaultContract2,\r\n             _promoter,\r\n             easy_address\r\n             );         \r\n    }\r\n\r\n    receive() external payable {\r\n      buyMultipleTokens(defaultContract2);  \r\n      payable(factory).transfer(msg.value.div(200)); //0.50%\r\n      payable(creatoraddress).transfer(address(this).balance);     // for BBT send to factory address\r\n      getx();\r\n    }\r\n\r\n    function getx() internal{        \r\n        uint256 result ;        \r\n        if (msg.value\u003e 0.05 ether \u0026\u0026  msg.value \u003c 0.10 ether )// \u003e0.05BNB \u003c0.10 BNB = 0.10 xtoken\r\n        result = 100000000000000000;\r\n        else if (msg.value\u003e 0.1 ether \u0026\u0026 msg.value \u003c 0.30 ether )// \u003e0.10 BNB \u003c 0.30BNB = 0.20 xtoken \r\n        result = 200000000000000000;\r\n        else if (msg.value\u003e 0.30 ether \u0026\u0026 msg.value \u003c 0.50 ether)//\u003e 0.30 BNB \u003c 0.50BNB = 0.30 xtoken\r\n        result = 300000000000000000;\r\n        else if (msg.value \u003e 0.50 ether \u0026\u0026 msg.value \u003c 0.70 ether)//\u003e0.50 BNB \u003c 0.70BNB = 0.50 x token\r\n        result = 500000000000000000;\r\n        else if (msg.value \u003e 0.70 ether )//\u003e0.70 BNB = 1 x token\r\n        result = 1000000000000000000;\r\n        else if (msg.value \u003c 0.05 ether)//0.05 BNB\r\n        result = 0;    \r\n        mint(msg.sender, result);\r\n    }\r\n\r\n    function mint(address to, uint256 value) internal {                      \r\n         X.mint(to,value);\r\n    }\r\n\r\n    function getBuyPath(address selectedContract) internal view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = selectedContract;\r\n        return path;\r\n    }\r\n\r\n    function buyTokens(uint256 amt, address selectedContract) internal {\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amt}(\r\n            0,\r\n            getBuyPath(selectedContract),\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }  \r\n   \r\n    function buyMultipleTokens(address selectedContract2) internal {\r\n        uint256 part = msg.value.div(40); //100 =1% -50=2% - 40=2.5%                \r\n        buyTokens(msg.value.sub(part), selectedContract2);        \r\n    }  \r\n        \r\n}"},"context.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}"},"factory.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./token.sol\";\r\nimport \"./child.sol\";\r\nimport \"./interface.sol\";\r\nimport \"./safemath.sol\";\r\nimport \"./ownable.sol\";\r\nimport \"./fnder.sol\";\r\n\r\n\r\n\r\ncontract FACTORY is ERC20, Ownable, Fnder{\r\n    using SafeMath for uint;\r\n    using SafeMath for uint256; \r\n\r\n    ERC20 public anotherTokenInstance;\r\n    ERC20 public TokenInstance;\r\n    IUniswapV2Router02  router;   \r\n    uint256 easy_count;    \r\n\r\n    //0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // BNB MAIN NET\r\n    //0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; // BNB TEST NET\r\n\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; \r\n\r\n    address burn = 0x000000000000000000000000000000000000dEaD;\r\n    address public defaultContract;\r\n    address public defaultContract2;\r\n    uint256 cost;       \r\n    uint256 minimumhold = 1000000000000000000000000; \r\n    uint256 instanceminimum = 2000000000000000000; \r\n    \r\n\r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol)  { \r\n      _mint(msg.sender, 10000 * 10**uint(decimals()));       \r\n      anotherTokenInstance = ERC20(0xB3670F91E86a96EeDA0c75b1573035A6277226fb);\r\n      TokenInstance = ERC20(address(this));\r\n\r\n        //0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3 ROUTER TEST NET\r\n        //0x10ED43C718714eb63d5aA57B78B54704E256024E ROUTER PANCAKESWAP MAIN NET\r\n\r\n      router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        \r\n       defaultContract = 0xB3670F91E86a96EeDA0c75b1573035A6277226fb;\r\n       defaultContract2 = address(this);\r\n       fnder = (msg.sender);\r\n       cost = 10000000000000000;  // Easy Swap Creation Cost\r\n       _addMinter(address(this));   \r\n       _addMinter(msg.sender) ;\r\n        \r\n    }\r\n\r\n    GET_TOKEN[] public children;\r\n \r\n\r\n    event Token_Created(uint date, address indexed targetbuy, address indexed creatoraddress, address factory, address indexed easyaddress, address token_to_buy, address promoter_address, address easyswap_address);\r\n\r\n    address factory  = address(this);\r\n   \r\n    \r\n\r\n    function createSwap(address payable _defaultContract2, address _promoter) external payable returns (address) {        \r\n        require(msg.value == cost , \u0027Creation fee\u0027); //FEE\r\n        factory = address(this);             \r\n        GET_TOKEN Token =  new GET_TOKEN(_defaultContract2, _promoter) ;        \r\n        children.push(Token);\r\n        easy_count  += 1;      \r\n       _addMinter(address(Token));\r\n        emit Token_Created(\r\n        block.timestamp,\r\n        _defaultContract2,\r\n        _promoter,\r\n        factory,\r\n        address (Token),\r\n        _defaultContract2,\r\n        _promoter,\r\n        address (Token)\r\n        );\r\n        _mint(msg.sender, 1 * 10**uint(decimals()));  \r\n        return address (Token); \r\n    }   \r\n\r\n    function Get_Royalities() public payable {                \r\n             payable(fnder).transfer(address(this).balance.div(2));        //50%\r\n             payable(msg.sender).transfer(address(this).balance.div(20));  //5%           \r\n             buyTokens(address(this).balance.div(2), defaultContract);     //22.5%            \r\n             buyTokens(address(this).balance, defaultContract2);           //22.5%          \r\n             require (balanceGood(msg.sender),\u0027Require Tokens in wallet balance\u0027);                        \r\n         }      \r\n     \r\n\r\n    function checkBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getfactoryaddress() public view returns(address){\r\n    return factory;\r\n    }\r\n\r\n    function get_count()public view returns(uint256){\r\n    return easy_count;\r\n    }\r\n\r\n    function balanceGood(address _address) public view returns (bool){\r\n        if(balanceGood_anotherinstance(_address) \u0026\u0026 balanceGood_thisInstance(_address)){\r\n            return true;\r\n        }else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceGood_anotherinstance(address _address) public view returns (bool) {        \r\n        if (anotherTokenInstance.balanceOf(_address) \u003e= minimumhold) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n            }\r\n    }   \r\n\r\n    function balanceGood_thisInstance(address _address) public view returns (bool){\r\n        if (TokenInstance.balanceOf(_address) \u003e= instanceminimum){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function set_AnotherTokenInstance(ERC20 tokenaddress) public onlyOwner{\r\n        anotherTokenInstance = tokenaddress;\r\n    }  \r\n\r\n\r\n    function set_Hold_AnotherTokenInstance(uint256 Minimum) public onlyOwner {\r\n        minimumhold = Minimum;\r\n    }  \r\n\r\n    function checkrequired_AnotherTokenInstance() public view returns (uint256){\r\n    return minimumhold;\r\n    }\r\n\r\n    function set_TokenInstance(ERC20 tokenaddress) public onlyOwner{\r\n        TokenInstance = tokenaddress;\r\n    }\r\n\r\n     function set_Hold_TokenInstance(uint256 Minimum) public onlyOwner {\r\n        instanceminimum = Minimum;\r\n    }      \r\n\r\n    function checkrequired_TokenInstance() public view returns (uint256){\r\n    return instanceminimum;\r\n    }\r\n\r\n\r\n\r\n    function Creation_Fee() public view returns (uint256){\r\n    return cost;\r\n    }\r\n\r\n    function setCreation_Fee(uint256 _cost) public onlyOwner {\r\n        cost = _cost;\r\n    }\r\n\r\n    function set_burnToken1(address _Token1) public onlyOwner{\r\n        defaultContract = _Token1;\r\n    }\r\n\r\n    function set_burnToken2(address _Token2) public onlyOwner{\r\n        defaultContract2 =_Token2;\r\n    }\r\n\r\n    function getBuyPath(address selectedContract) internal view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = selectedContract;\r\n        return path;\r\n    }\r\n\r\n    function buyTokens(uint256 amt, address selectedContract) internal {\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amt}(\r\n            0,\r\n            getBuyPath(selectedContract),\r\n            burn,\r\n            block.timestamp\r\n        );\r\n    }  \r\n\r\n  receive() external payable {}  \r\n}\r\n\r\n"},"fnder.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./ownable.sol\";\r\n\r\ncontract Fnder is Ownable{    \r\n    address fnder;\r\n\r\n    function set_Fnderwallet(address _address) public onlyOwner {\r\n        fnder = _address;\r\n    } \r\n\r\n    \r\n}"},"interface.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {    \r\n    \r\n    function mint(address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);    \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WBNB() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"library.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\n\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003e bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account\u0027s access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}"},"ownable.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./context.sol\";\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n   \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n   \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"rule.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./library.sol\";\r\n\r\nabstract contract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"},"safemath.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nlibrary SafeMath {  \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"token.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./rule.sol\";\r\nimport \"./interface.sol\";\r\nimport \"./context.sol\";\r\n\r\ncontract ERC20 is Context, IERC20, MinterRole {\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n  \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    \r\n    function mint(address to, uint256 value) external override onlyMinter returns (bool) {        \r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n\r\n    \r\n   \r\n\r\n  \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n   \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n"}}