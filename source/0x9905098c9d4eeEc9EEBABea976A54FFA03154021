// SPDX-License-Identifier: SimPL-2.0
pragma solidity 0.6.12;

//
// XCashDoge Community
// 
// This will be a meme token of pure community autonomy, where there is no arrogance, evasion, stubbornness and cowardice. Only love and action!
//
// Website: https://www.xcashdoge.com
// Telegram: https://t.me/XCashDogeCommunity
//
//
//   /$$   /$$  /$$$$$$   /$$$$$$   /$$$$$$  /$$   /$$       /$$$$$$$   /$$$$$$   /$$$$$$  /$$$$$$$$
//  | $$  / $$ /$$__  $$ /$$__  $$ /$$__  $$| $$  | $$      | $$__  $$ /$$__  $$ /$$__  $$| $$_____/
//  |  $$/ $$/| $$  \__/| $$  \ $$| $$  \__/| $$  | $$      | $$  \ $$| $$  \ $$| $$  \__/| $$      
//   \  $$$$/ | $$      | $$$$$$$$|  $$$$$$ | $$$$$$$$      | $$  | $$| $$  | $$| $$ /$$$$| $$$$$   
//    >$$  $$ | $$      | $$__  $$ \____  $$| $$__  $$      | $$  | $$| $$  | $$| $$|_  $$| $$__/   
//   /$$/\  $$| $$    $$| $$  | $$ /$$  \ $$| $$  | $$      | $$  | $$| $$  | $$| $$  \ $$| $$      
//  | $$  \ $$|  $$$$$$/| $$  | $$|  $$$$$$/| $$  | $$      | $$$$$$$/|  $$$$$$/|  $$$$$$/| $$$$$$$$
//  |__/  |__/ \______/ |__/  |__/ \______/ |__/  |__/      |_______/  \______/  \______/ |________/
//
//
//

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
            bytes32 accountHash
         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        return _functionCallWithValue(target, data, value, errorMessage);
    }
    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{value: weiValue}(
            data
        );
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function geUnlockTime() public view returns (uint256) {
        return _lockTime;
    }
    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = now + time;
        emit OwnershipTransferred(_owner, address(0));
    }
    function unlock() public virtual {
        require(
            _previousOwner == msg.sender,
            "You don't have permission to unlock"
        );
        require(now > _lockTime, "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}

interface ISwapPair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface ISwapFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);
    function migrator() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);

    function pairFor(address tokenA, address tokenB) external view returns (address pair);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
    function setMigrator(address) external;
}

interface ISwapRouter {

    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);

    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

abstract contract ReentrancyGuard {

    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() public {
        _status = _NOT_ENTERED;
    }

    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
        _;
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    modifier isHuman() {
        require(tx.origin == msg.sender, "sorry humans only");
        _;
    }
}



contract XCashDogeCommunityPool is Context, Ownable, ReentrancyGuard {

    using SafeMath for uint256;
    using Address for address;

    address[] private _joins;
    
    mapping(address => uint256) private _joinUnlockAmount;
    
    mapping(address => uint256) private _joinUnlockTime;
    //bnb 0.1
    uint256 public _joinBnbLimit = 1 * 10 ** 17;

    IBEP20 public _contractForXCashDoge;
    
    IBEP20 public _contractForBNB;

    ISwapRouter public immutable _pancakeSwapRouter;
    
    address public _pancakeSwapPair;
    
    address public _founderAddress;
    
    uint8 public _stepNo;

    uint public _joinCountLimit = 500;

    //10%
    uint256 public _poolAmount;
    //5%
    uint256 public _dropAmount;
    //0.01%
    uint256 public _dropSingleAmount;
    //0.01%
    uint256 public _singleAmount;
    //
    uint256 public _singleUnlockAmount;
    //2000 bnb
    uint256 public _dropBnbLimit = 2000 * 10 ** 18;


    receive() external payable {}

    constructor(
        address routerAddress,
        address founderAddress,
        address bnbTokenAddress
    ) public {

        _contractForBNB = IBEP20(bnbTokenAddress);
        
        _founderAddress = founderAddress;
        
        _pancakeSwapRouter = ISwapRouter(routerAddress);

        uint256 total = 1 * 10**15 * 10**9;
        
        //10%
        _poolAmount = total.mul(10).div(100);
        //5%
        _dropAmount = total.mul(5).div(100);

        _dropSingleAmount = _dropAmount.div(_joinCountLimit);

        _singleAmount = _poolAmount.div(_joinCountLimit);

        _singleUnlockAmount = _singleAmount.div(10);

        _stepNo = 1;
    }

    function join() payable public {
        
        require(_stepNo == 1,"XCashDogePool: StepNo Error");

        uint256 bnbAmount = msg.value;

        require(_msgSender() != address(0),"XCashDogePool: Error");

        require(bnbAmount == _joinBnbLimit,"XCashDogePool: BNB Amount Error");

        require(_joinUnlockAmount[_msgSender()] == 0,"XCashDogePool: Your Joined");

        require(_joins.length < _joinCountLimit,"XCashDogePool: Join Done");

        _joins.push(_msgSender());
        
        _joinUnlockAmount[_msgSender()] = _singleAmount;

        if(_joins.length == _joinCountLimit) {
            _stepNo = 2;
        }
    }

    function info() public view returns(uint8 stepNo, uint256 unlockAmount, uint256 nextUnlockTime, address[] memory joinList) {
        stepNo = _stepNo;
        unlockAmount = _joinUnlockAmount[_msgSender()];
        nextUnlockTime = _joinUnlockTime[_msgSender()];

        joinList = new address[](_joins.length);

        for(uint i=0; i<_joins.length; i++) {
            joinList[i] = _joins[i];
        }
    }

    function applyUnlock() public {

        require(_stepNo == 3,"XCashDogePool: StepNo Error");
        require(_joinUnlockAmount[_msgSender()] > 0,"XCashDogePool: Unlock Amount Error");
        require(_joinUnlockTime[_msgSender()] < block.timestamp,"XCashDogePool: Unlock Time Error");
        require(_joinUnlockAmount[_msgSender()] >= _singleUnlockAmount,"XCashDogePool: Unlock Not Enough");

        _joinUnlockAmount[_msgSender()] = _joinUnlockAmount[_msgSender()] - _singleUnlockAmount;
        _joinUnlockTime[_msgSender()] = block.timestamp + 30 days;

        _contractForXCashDoge.transfer(_msgSender(), _singleUnlockAmount);
    }

    function airdrop() public onlyOwner {

        require(_stepNo == 3,"XCashDogePool: StepNo Error");

        require(_dropAmount > 0,"XCashDogePool: Airdrop End");

        uint256 bnbBlanace = _contractForBNB.balanceOf(_pancakeSwapPair);
        require(bnbBlanace >= _dropBnbLimit,"XCashDogePool: BNB Not Reached");
        
        uint xcashdogeBalance = IBEP20(_contractForXCashDoge).balanceOf(address(this));
        require(xcashdogeBalance >= _dropAmount,"XCashDogePool: XCashDoge Not Enough");

        for(uint i=0; i<_joins.length; i++) {
            _contractForXCashDoge.transfer(_joins[i], _dropSingleAmount);
        }

        _dropAmount = 0;
    }

    function launch() public onlyOwner {
        require(_stepNo == 2,"XCashDogePool: StepNo Error");
        for(uint i=0; i<_joins.length; i++) {
            _joinUnlockTime[_joins[i]] = block.timestamp + 30 days;
        }
        _addLiquidity(_poolAmount, address(this).balance);
        _stepNo = 3;
    }


    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _contractForXCashDoge.approve(address(_pancakeSwapRouter), tokenAmount);
        _pancakeSwapRouter.addLiquidityETH{value: ethAmount}(
            address(_contractForXCashDoge),
            tokenAmount,
            0,
            0,
            _founderAddress, //recevie LP
            block.timestamp
        );
    }

    function setContract(address tokenAddress, address pairAddress) public onlyOwner {
        _contractForXCashDoge = IBEP20(tokenAddress);
        _pancakeSwapPair = pairAddress;
    }
    
    function setFailed() public onlyOwner {
        _stepNo = 10;
    }
    
    function returnBack() public isHuman nonReentrant {
        require(_stepNo == 10,"XCashDogePool: StepNo Error");
        require(_joinUnlockAmount[_msgSender()] > 0,"XCashDogePool: Your Not Joined");

        _joinUnlockAmount[_msgSender()] = 0;

        (bool sent, ) = address(msg.sender).call{value: _joinBnbLimit}("");
        require(sent, "Error: Cannot return back");
    }   
}