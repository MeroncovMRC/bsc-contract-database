// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract LudoCoin {
    string public name = "Ludo Play To Earn";
    string public symbol = "Ludo";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => bool) public whitelist;
    
    address public owner;
    bool public paused;
    bool public locked;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed from, uint256 value);
    event Pause();
    event Unpause();
    event Lock();
    event Unlock();
    event Mint(address indexed to, uint256 value);
    event Whitelist(address indexed account, bool isWhitelisted);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    modifier whenNotPaused() {
        require(!paused, "Token transfers are paused.");
        _;
    }
    
    modifier whenNotLocked() {
        require(!locked, "Token transfers are locked.");
        _;
    }

    constructor() {
        owner = msg.sender;
        totalSupply = 45000000000 * 10**uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        paused = false;
        locked = false;
    }

    function transfer(address to, uint256 value) public whenNotPaused whenNotLocked returns (bool) {
        require(to != address(0), "Invalid recipient address.");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public whenNotPaused whenNotLocked returns (bool) {
        require(spender != address(0), "Invalid spender address.");

        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public whenNotPaused whenNotLocked returns (bool) {
        require(from != address(0), "Invalid sender address.");
        require(to != address(0), "Invalid recipient address.");

        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }

    function burn(uint256 value) public onlyOwner {
        require(value <= balanceOf[msg.sender], "Insufficient balance.");

        balanceOf[msg.sender] -= value;
        totalSupply -= value;
        emit Burn(msg.sender, value);
    }

    function pause() public onlyOwner {
        paused = true;
        emit Pause();
    }

    function unpause() public onlyOwner {
        paused = false;
        emit Unpause();
    }
    
    function lock() public onlyOwner {
        locked = true;
        emit Lock();
    }
    
    function unlock() public onlyOwner {
        locked = false;
        emit Unlock();
    }

    function mint(address to, uint256 value) public onlyOwner {
        totalSupply += value;
        balanceOf[to] += value;
        emit Mint(to, value);
        emit Transfer(address(0), to, value);
    }

    function addToWhitelist(address account) public onlyOwner {
        whitelist[account] = true;
        emit Whitelist(account, true);
    }

    function removeFromWhitelist(address account) public onlyOwner {
        whitelist[account] = false;
        emit Whitelist(account, false);
    }
}