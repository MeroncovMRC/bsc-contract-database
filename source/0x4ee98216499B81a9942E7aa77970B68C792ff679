
// File: /contracts/SCT.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";

contract Wrap {
    address public immutable sct;

    IERC20 public immutable usdt;

    constructor(address sct_, IERC20 usdt_) {
        sct = sct_;
        usdt = usdt_;
    }

    function withdraw() external {
        uint256 usdtBalance = usdt.balanceOf(address(this));
        if (usdtBalance > 0) {
            usdt.transfer(sct, usdtBalance);
        }
    }
}

abstract contract ERC20Detailed is IERC20 {
    string private _name;

    string private _symbol;

    uint8 private _decimals = 18;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

contract SCT is ERC20Detailed, Ownable {
    using SafeMath for uint256;

    Wrap public immutable wrap;

    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;

    uint256 private immutable TOTAL_GONS;
    uint256 private constant MAX_UINT256 = type(uint256).max;
    uint256 public immutable MAX_SUPPLY;

    uint256 public immutable extraFeeRate = 20;
    uint256 public immutable maxHoldings = 500 * 1e18;

    uint256 public immutable buyMarketingFeeRate = 1;
    uint256 private immutable _buyJtsFeeRate = 5;
    uint256 private immutable _buyLpFeeRate = 4;

    uint256 public immutable sellMarketingFeeRate = 2;
    uint256 private immutable _sellBurnFeeRate = 8;

    address public marketingWallet1;
    address public marketingWallet2;

    uint256 public gonsMarketingFee1;
    uint256 public gonsMarketingFee2;
    uint256 public gonsJtsFee;
    uint256 public gonsLpFee;

    IUniswapV2Router02 public immutable pancakeSwapRouter;
    IERC20 public immutable usdt;
    IERC20 public immutable jts;
    address public immutable pair;

    uint256 public swapInterval = 1 hours;
    uint256 public immutable tradeStartTime;
    uint256 private _lastSwapTime;
    bool private _swapping = false;
    uint256 public immutable rebaseInterval = 15 minutes;
    uint256 public immutable rebaseRate = 51954907016092;
    uint256 private _lastRebasedTime;
    uint256 private _totalSupply;
    uint256 private _gonsPerFragment;

    uint256 private _pairBalance;
    mapping(address => uint256) private _gonsBalances;
    mapping(address => mapping(address => uint256)) private _allowedFragments;
    mapping(address => bool) private _isExcludedFromFees;
    modifier validRecipient(address to) {
        require(to != address(0x0));
        _;
    }

    constructor(
        string memory name_,
        string memory symbol_,
        uint256 initSupply_,
        uint256 maxSupply_,
        IUniswapV2Router02 pancakeSwapRouter_,
        IERC20 usdt_,
        IERC20 jts_,
        address marketingWallet1_,
        address marketingWallet2_,
        uint256 tradeStartTime_
    ) ERC20Detailed(name_, symbol_) {
        tradeStartTime = _lastSwapTime = _lastRebasedTime = tradeStartTime_;
        pancakeSwapRouter = pancakeSwapRouter_;
        usdt = usdt_;
        jts = jts_;
        marketingWallet1 = marketingWallet1_;
        marketingWallet2 = marketingWallet2_;
        wrap = new Wrap(address(this), usdt);
        pair = IUniswapV2Factory(pancakeSwapRouter.factory()).createPair(
            address(usdt),
            address(this)
        );
        _totalSupply = initSupply_ * 10 ** decimals();
        MAX_SUPPLY = maxSupply_ * 10 ** decimals();
        TOTAL_GONS = MAX_UINT256 / 1e10 - ((MAX_UINT256 / 1e10) % _totalSupply);
        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);
        _gonsBalances[msg.sender] = TOTAL_GONS;
        emit Transfer(address(0x0), msg.sender, _totalSupply);
        _allowedFragments[address(this)][
            address(pancakeSwapRouter)
        ] = MAX_UINT256;
        usdt.approve(address(pancakeSwapRouter), MAX_UINT256);
        excludeFromFees(address(this), true);
        excludeFromFees(DEAD, true);
        excludeFromFees(owner(), true);
        excludeFromFees(marketingWallet1, true);
        excludeFromFees(marketingWallet2, true);
    }

    function isExcludedFromFees(address account) public view returns (bool) {
        return _isExcludedFromFees[account];
    }

    function transfer(
        address to,
        uint256 value
    ) external override validRecipient(to) returns (bool) {
        _transferFrom(msg.sender, to, value);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external override validRecipient(to) returns (bool) {
        if (_allowedFragments[from][msg.sender] != MAX_UINT256) {
            _allowedFragments[from][msg.sender] = _allowedFragments[from][
                msg.sender
            ].sub(value, "Insufficient Allowance");
        }
        _transferFrom(from, to, value);
        return true;
    }

    function allowance(
        address owner_,
        address spender
    ) external view override returns (uint256) {
        return _allowedFragments[owner_][spender];
    }

    function decreaseAllowance(
        address spender,
        uint256 subtractedValue
    ) external returns (bool) {
        uint256 oldValue = _allowedFragments[msg.sender][spender];
        if (subtractedValue >= oldValue) {
            _allowedFragments[msg.sender][spender] = 0;
        } else {
            _allowedFragments[msg.sender][spender] = oldValue.sub(
                subtractedValue
            );
        }
        emit Approval(
            msg.sender,
            spender,
            _allowedFragments[msg.sender][spender]
        );
        return true;
    }

    function increaseAllowance(
        address spender,
        uint256 addedValue
    ) external returns (bool) {
        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][
            spender
        ].add(addedValue);
        emit Approval(
            msg.sender,
            spender,
            _allowedFragments[msg.sender][spender]
        );
        return true;
    }

    function approve(
        address spender,
        uint256 value
    ) external override returns (bool) {
        return _approve(msg.sender, spender, value);
    }

    function _approve(
        address sender,
        address spender,
        uint256 value
    ) private returns (bool) {
        _allowedFragments[sender][spender] = value;
        emit Approval(sender, spender, value);
        return true;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address who) public view override returns (uint256) {
        return
            who == pair
                ? _pairBalance
                : _gonsBalances[who].div(_gonsPerFragment);
    }

    function _basicTransfer(
        address from,
        address to,
        uint256 gonAmount
    ) internal returns (bool) {
        uint256 amount = gonAmount.div(_gonsPerFragment);
        if (from == pair) {
            _pairBalance = _pairBalance.sub(amount);
        } else {
            _gonsBalances[from] = _gonsBalances[from].sub(gonAmount);
        }
        if (to == pair) {
            _pairBalance = _pairBalance.add(amount);
        } else {
            _gonsBalances[to] = _gonsBalances[to].add(gonAmount);
        }
        emit Transfer(from, to, amount);
        return true;
    }

    function _transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) internal returns (bool result) {
        if (_swapping) {
            return
                _basicTransfer(sender, recipient, amount.mul(_gonsPerFragment));
        }
        require(_isStartTrade(sender, recipient), "Trade not start");
        if (_shouldRebase()) {
            _rebase();
        }
        if (_shouldSwap(sender, recipient)) {
            _swap();
        }
        uint256 gonAmount = amount.mul(_gonsPerFragment);
        if (_shouldTakeFee(sender, recipient)) {
            if (sender != pair) {
                uint256 minHolderAmount = _gonsBalanceOf(sender).mul(99).div(
                    100
                );
                if (gonAmount > minHolderAmount) {
                    gonAmount = minHolderAmount;
                }
            }
            gonAmount = _takeFee(sender, gonAmount);
        }
        result = _basicTransfer(sender, recipient, gonAmount);
        require(!_isExceedMaxHoldings(sender, recipient), "GT max holdings");
    }

    function _isStartTrade(
        address _from,
        address _to
    ) private view returns (bool) {
        return
            tradeStartTime <= block.timestamp ||
            (_from != pair && _to != pair) ||
            (_isExcludedFromFees[_to] || _isExcludedFromFees[_from]);
    }

    function _shouldTakeExtraFee() private view returns (bool) {
        uint256 time = block.timestamp;
        return tradeStartTime <= time && tradeStartTime.add(2 minutes) >= time;
    }

    function _isExceedMaxHoldings(
        address _from,
        address _to
    ) private view returns (bool) {
        return
            block.timestamp < tradeStartTime.add(20 minutes) &&
            _to != pair &&
            balanceOf(_to) > maxHoldings &&
            !(_isExcludedFromFees[_to] || _isExcludedFromFees[_from]);
    }

    function _shouldTakeFee(
        address from,
        address to
    ) private view returns (bool) {
        if (_isExcludedFromFees[from] || _isExcludedFromFees[to] || _swapping) {
            return false;
        } else {
            return true;
        }
    }

    function _shouldRebase() private view returns (bool) {
        return
            (_totalSupply < MAX_SUPPLY) &&
            msg.sender != pair &&
            !_swapping &&
            block.timestamp >= (_lastRebasedTime + rebaseInterval);
    }

    function _shouldSwap(
        address _from,
        address _to
    ) private view returns (bool) {
        return
            !_swapping &&
            _from != pair &&
            _from != owner() &&
            _to != owner() &&
            block.timestamp >= (_lastSwapTime + swapInterval);
    }

    function buyLpFeeRate() public view returns (uint256) {
        return MAX_SUPPLY == totalSupply() ? 0 : _buyLpFeeRate;
    }

    function buyJtsFeeRate() public view returns (uint256) {
        return MAX_SUPPLY == totalSupply() ? 0 : _buyJtsFeeRate;
    }

    function sellBurnFeeRate() public view returns (uint256) {
        return MAX_SUPPLY == totalSupply() ? 0 : _sellBurnFeeRate;
    }

    function _takeFee(
        address sender,
        uint256 gonAmount
    ) private returns (uint256 result) {
        result = gonAmount;
        if (_shouldTakeExtraFee()) {
            uint256 EFee = gonAmount.mul(extraFeeRate).div(100);
            gonsMarketingFee1 = gonsMarketingFee1.add(EFee);
            result = result.sub(EFee);
            EFee > 0 && _basicTransfer(sender, address(this), EFee);
        }
        if (sender == pair) {
            //buy

            //Marketing
            uint256 MFee = gonAmount.mul(buyMarketingFeeRate).div(100);
            gonsMarketingFee1 = gonsMarketingFee1.add(MFee);

            //LP
            uint256 LFee = gonAmount.mul(buyLpFeeRate()).div(100);
            gonsLpFee = gonsLpFee.add(LFee);

            //JTS
            uint256 JFee = gonAmount.mul(buyJtsFeeRate()).div(100);
            gonsJtsFee = gonsJtsFee.add(JFee);

            uint256 TFee = JFee.add(LFee).add(MFee);
            TFee > 0 && _basicTransfer(sender, address(this), TFee);
            result = result.sub(TFee);
        } else {
            //sell or transfer
            //Burn
            uint256 BFee = gonAmount.mul(sellBurnFeeRate()).div(100);
            result = result.sub(BFee);
            BFee > 0 && _basicTransfer(sender, DEAD, BFee);
            //Marketing
            uint256 MFee = gonAmount.mul(sellMarketingFeeRate).div(100);
            gonsMarketingFee2 = gonsMarketingFee2.add(MFee);
            result = result.sub(MFee);
            MFee > 0 && _basicTransfer(sender, address(this), MFee);
        }
    }

    function _gonsBalanceOf(address _address) private view returns (uint256) {
        return _gonsBalances[_address];
    }

    function _rebase() private {
        uint256 deltaTime = block.timestamp - _lastRebasedTime;
        uint256 times = deltaTime.div(rebaseInterval);
        uint256 epoch = times.mul(rebaseInterval).div(1 minutes);
        for (uint256 i = 0; i < times; i++) {
            _totalSupply = _totalSupply
                .mul((10 ** decimals()).add(rebaseRate))
                .div(10 ** decimals());
            if (_totalSupply > MAX_SUPPLY) {
                _totalSupply = MAX_SUPPLY;
            }
        }
        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);
        _lastRebasedTime = _lastRebasedTime.add(times.mul(rebaseInterval));
        emit LogRebase(epoch, _totalSupply);
    }

    function _swap() private {
        _swapping = true;
        if (gonsMarketingFee1 > 0) {
            _swapTokensForUsdt(
                gonsMarketingFee1.div(_gonsPerFragment),
                marketingWallet1
            );
            gonsMarketingFee1 = 0;
        }
        if (gonsMarketingFee2 > 0) {
            _swapTokensForUsdt(
                gonsMarketingFee2.div(_gonsPerFragment),
                marketingWallet2
            );
            gonsMarketingFee2 = 0;
        }
        if (gonsJtsFee > 0) {
            _swapTokensForJts(gonsJtsFee.div(_gonsPerFragment), DEAD);
            gonsJtsFee = 0;
        }
        if (gonsLpFee > 0) {
            _swapAndLiquidity(gonsLpFee.div(_gonsPerFragment), DEAD);
            gonsLpFee = 0;
        }
        _lastSwapTime = block.timestamp;
        _swapping = false;
    }

    function _swapTokensForUsdt(
        uint256 tokenAmount,
        address to
    ) private returns (uint256 swapUsdtAmount) {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(usdt);
        uint256 beforeUsdtAmount = usdt.balanceOf(to);
        pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            to,
            block.timestamp
        );
        swapUsdtAmount = usdt.balanceOf(to).sub(beforeUsdtAmount);
        if (to == address(wrap)) wrap.withdraw();
    }

    function _swapTokensForJts(uint256 tokenAmount, address to) private {
        address[] memory path = new address[](3);
        path[0] = address(this);
        path[1] = address(usdt);
        path[2] = address(jts);
        pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            to,
            block.timestamp
        );
    }

    function _swapUsdtForJts(uint256 usdtAmount, address to) private {
        address[] memory path = new address[](2);
        path[0] = address(usdt);
        path[1] = address(jts);
        pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            usdtAmount,
            0,
            path,
            to,
            block.timestamp
        );
    }

    function _swapAndLiquidity(uint256 tokenAmount, address to) private {
        uint256 half = tokenAmount.div(2);
        uint256 otherHalf = tokenAmount.sub(half);
        uint256 usdtAmount = _swapTokensForUsdt(half, address(wrap));
        _addLiquidityUsdt(otherHalf, usdtAmount, to);
        emit SwapAndLiquify(half, usdtAmount, otherHalf);
    }

    function _addLiquidityUsdt(
        uint256 tokenAmount,
        uint256 usdtAmount,
        address to
    ) private {
        pancakeSwapRouter.addLiquidity(
            address(this),
            address(usdt),
            tokenAmount,
            usdtAmount,
            0,
            0,
            to,
            block.timestamp
        );
    }

    function manualSync() external {
        IUniswapV2Pair(pair).sync();
    }

    function manualRebase() external {
        if (_shouldRebase()) {
            _rebase();
        }
    }

    function swapUsdtForJts() external {
        _swapUsdtForJts(usdt.balanceOf(address(this)), DEAD);
    }

    function setSwapInterval(uint256 _swapInterval) external onlyOwner {
        swapInterval = _swapInterval;
    }

    function setMarketingWallet2(address _wallet) external onlyOwner {
        marketingWallet2 = _wallet;
    }

    function setMarketingWallet1(address _wallet) external onlyOwner {
        marketingWallet1 = _wallet;
    }

    function withdraw(address _token, address payable _to) external onlyOwner {
        if (_token == address(0x0)) {
            payable(_to).transfer(address(this).balance);
        } else {
            IERC20(_token).transfer(
                _to,
                IERC20(_token).balanceOf(address(this))
            );
        }
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        if (_isExcludedFromFees[account] != excluded) {
            _isExcludedFromFees[account] = excluded;
            emit ExcludeFromFees(account, excluded);
        }
    }

    function excludeMultipleAccountsFromFees(
        address[] calldata accounts,
        bool excluded
    ) external onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFees[accounts[i]] = excluded;
        }
        emit ExcludeMultipleAccountsFromFees(accounts, excluded);
    }

    event LogRebase(uint256 indexed epoch, uint256 totalSupply);
    event ExcludeFromFees(address indexed account, bool isExcluded);
    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 usdtReceived,
        uint256 tokensIntoLiqudity
    );
}

// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol
pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol
pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

