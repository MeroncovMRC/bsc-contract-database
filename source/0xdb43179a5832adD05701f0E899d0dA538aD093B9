// SPDX-License-Identifier: MIT
pragma solidity 0.8.7;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
    * @dev Initializes the contract setting the deployer as the initial owner.
    */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
    * @dev Returns the address of the current owner.
    */
    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

abstract contract ReentrancyGuard {
    bool internal locked;

    modifier noReentrant() {
        require(!locked, "No re-entrancy");
        locked = true;
        _;
        locked = false;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

library SafeERC20 {

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(isContract(address(token)), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }

	function isContract(address addr) internal view returns (bool) {
        uint size;
        assembly { size := extcodesize(addr) }
        return size > 0;
    }
}

contract HealthyFX is ReentrancyGuard, Context, Ownable {
	using SafeMath for uint256;

    using SafeERC20 for IERC20;
    address private tokenAddr = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;

    
    IERC20 public BUSDToken;

	uint256 constant public INVEST_MIN_AMOUNT = 100 ether;
    uint256 constant public WITHDRAW_MIN_AMOUNT = 15 ether;
    uint256 constant public WITHDRAW_MAX_AMOUNT = 20000 ether;
    uint256 constant public PLAN_DURATION = 42 days;
    uint256 public MAX_DEPOSIT = 50;
	uint256[] public REFERRAL_PERCENTS = [20, 20];
	uint256 constant public PROJECT_FEE = 50;
	uint256 constant public PERCENTS_DIVIDER = 1000;
	uint256 constant public TIME_STEP = 1 days;
    uint256 constant public WITHDRAW_COOLDOWN = 3 days;
    bool public ENABLE_SINGLE_WITHDRAW = false;

	uint256 public totalInvested;
	uint256 public totalReferral;
	uint256 public totalInvestors;
	uint256 public totalWithdrawnProfit;
	uint256 public totalWithdrawnCapital;

	struct Deposit {
		uint256 amount;
		uint256 start;
        uint256 finish;
        uint256 index;
        uint256 withdrawn;
        uint256 checkpoint;
        bool isReturned;
	}

	struct User {
		Deposit[] deposits;
		address referrer;
		uint256 checkpoint;
		uint256[2] levels;
		uint256 bonus;
		uint256 totalBonus;
		uint256 withdrawnProfit;
        uint256 withdrawnCapital;
		uint256 reserve;
        bool isWhitelist;
	}

	mapping (address => User) internal users;
    mapping (uint256 => uint256) public dayTotalDeposit;

	address payable public projectWallet;
    bool public init = false;

	event Newbie(address user);
	event NewDeposit(address indexed user, uint256 amount, uint256 time);
    event CompoundProfit(address indexed user, uint256 amount, uint256 time);
    event CompoundCapital(address indexed user, uint256 amount, uint256 time);
	event Withdrawn(address indexed user, uint256 amount, uint256 time);
    event WithdrawnCapital(address indexed user, uint256 amount, uint256 time);
    event WithdrawRef(address indexed user, uint256 amount, uint256 time);
	event RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);
	event FeePayed(address indexed user, uint256 totalAmount);
    event RefInvalidPayed(uint256 totalAmount, uint256 time);
	event WithdrawTrading(address destination, uint256 amount, uint256 time);
	event WhitelistChanged(address user, bool status);
    


	constructor() {
		projectWallet = payable(address(0xD37EfE7F1e3350b66B164eDc15c69b224Fd461A0));
        BUSDToken = IERC20(tokenAddr);
	}

    // initialized the Project
    function launch() public onlyOwner {
        require(init == false, "Only once");
        init = true;
    }

	function invest(address referrer, uint256 amount) public noReentrant {
		require(init, "Not Started Yet");
		require(amount >= INVEST_MIN_AMOUNT, "Invalid deposit amount");


		User storage user = users[msg.sender];
        uint256 depositsLength = user.deposits.length;
        require(depositsLength < MAX_DEPOSIT, "max 300 deposit each address");
        BUSDToken.safeTransferFrom(msg.sender, address(this), amount);

		uint256 feeAmount = amount.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);
        BUSDToken.safeTransfer(projectWallet, feeAmount);
        amount -= feeAmount;
		emit FeePayed(msg.sender, feeAmount);

		if (user.referrer == address(0)) {
			if (users[referrer].deposits.length > 0 && referrer != msg.sender) {
				user.referrer = referrer;
			}

			address upline = user.referrer;
			for (uint256 i = 0; i < 2; i++) {
				if (upline != address(0)) {
					users[upline].levels[i] = users[upline].levels[i].add(1);
					upline = users[upline].referrer;
				} else break;
			}
		}

		if (user.referrer != address(0)) {
			address upline = user.referrer;
            uint256 invalidAmount;
			for (uint256 i = 0; i < 2; i++) {
                uint256 bonusAmount = amount.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);
				if (upline != address(0)) {
					users[upline].bonus = users[upline].bonus.add(bonusAmount);
					users[upline].totalBonus = users[upline].totalBonus.add(bonusAmount);
					totalReferral = totalReferral.add(bonusAmount);
					emit RefBonus(upline, msg.sender, i, bonusAmount);
					upline = users[upline].referrer;
				} else {
                    invalidAmount += bonusAmount;
                }
			}
            if(invalidAmount > 0){
                BUSDToken.safeTransfer(projectWallet, invalidAmount);
                emit RefInvalidPayed(invalidAmount, block.timestamp);
            }
		}

		if (user.deposits.length == 0) {
			totalInvestors++;
			user.checkpoint = block.timestamp;
			emit Newbie(msg.sender);
		}

		user.deposits.push(Deposit(amount, block.timestamp, block.timestamp + PLAN_DURATION, cDay(), 0, block.timestamp, false));
		totalInvested += amount;
        dayTotalDeposit[cDay()] += amount;
		emit NewDeposit(msg.sender, amount, block.timestamp);
	}

	function withdrawProfit() public noReentrant {
        require(init, "Not Started Yet");

		User storage user = users[msg.sender];
		require(user.checkpoint.add(WITHDRAW_COOLDOWN) < block.timestamp, "Only once every 3 days");

		uint256 totalAmount = _getUserDividends(msg.sender);
		if(user.reserve > 0){
			totalAmount = totalAmount.add(user.reserve);
			user.reserve = 0;
		}

        require(totalAmount >= WITHDRAW_MIN_AMOUNT, "Invalid amount");
		if(totalAmount > WITHDRAW_MAX_AMOUNT){
			user.reserve = totalAmount.sub(WITHDRAW_MAX_AMOUNT);
			totalAmount = WITHDRAW_MAX_AMOUNT;
		}

		if (getContractBalance() < totalAmount) {
            revert("Not enough contract balance");
		}

		user.withdrawnProfit += totalAmount;
		totalWithdrawnProfit += totalAmount;
		user.checkpoint = block.timestamp;

        BUSDToken.safeTransfer(msg.sender, totalAmount);

		emit Withdrawn(msg.sender, totalAmount, block.timestamp);
	}

    function withdrawDepositProfit(uint256 _depositIndex) public noReentrant {
        require(init, "Not Started Yet");
        require(ENABLE_SINGLE_WITHDRAW, "This feature is not active");
		User storage user = users[msg.sender];

		uint256 totalAmount = _getUserDepositDividends(msg.sender, _depositIndex);
		if(user.reserve > 0){
			totalAmount = totalAmount.add(user.reserve);
			user.reserve = 0;
		}

        require(totalAmount >= WITHDRAW_MIN_AMOUNT, "Invalid amount");
		if(totalAmount > WITHDRAW_MAX_AMOUNT){
			user.reserve = totalAmount.sub(WITHDRAW_MAX_AMOUNT);
			totalAmount = WITHDRAW_MAX_AMOUNT;
		}

		if (getContractBalance() < totalAmount) {
            revert("Not enough contract balance");
		}

		user.withdrawnProfit += totalAmount;
		totalWithdrawnProfit += totalAmount;
		user.checkpoint = block.timestamp;

        BUSDToken.safeTransfer(msg.sender, totalAmount);

		emit Withdrawn(msg.sender, totalAmount, block.timestamp);
	}

    function withdrawCapital() public noReentrant {
       require(init, "Not Started Yet");

		User storage user = users[msg.sender];
		uint256 totalAmount = _getUserAvailableCapital(msg.sender);
        require(totalAmount > 0, "No capital to withdraw");

		if (getContractBalance() < totalAmount) {
            revert("Not enough contract balance");
		}

		user.withdrawnCapital += totalAmount;
		totalWithdrawnCapital += totalAmount;
        BUSDToken.safeTransfer(msg.sender, totalAmount);
		emit WithdrawnCapital(msg.sender, totalAmount, block.timestamp);
	}

    function withdrawRef() public noReentrant {
        require(init, "Not Started Yet");
		User storage user = users[msg.sender];
		
		uint256 totalAmount = getUserReferralBonus(msg.sender);
		require(totalAmount > 0, "User has no dividends");
        user.bonus = 0;
        BUSDToken.safeTransfer(msg.sender, totalAmount);
        emit WithdrawRef(msg.sender, totalAmount, block.timestamp);
	}	  

    function compoundProfit() public noReentrant {
        require(init, "Not Started Yet");

		User storage user = users[msg.sender];
		require(user.checkpoint.add(WITHDRAW_COOLDOWN) < block.timestamp, "Only once every 3 days");

		uint256 totalAmount = _getUserDividends(msg.sender);
		if(user.reserve > 0){
			totalAmount = totalAmount.add(user.reserve);
			user.reserve = 0;
		}

        require(totalAmount >= INVEST_MIN_AMOUNT, "Invalid amount");

		user.withdrawnProfit += totalAmount;
		totalWithdrawnProfit += totalAmount;
		user.checkpoint = block.timestamp;

        user.deposits.push(Deposit(totalAmount, block.timestamp, block.timestamp + PLAN_DURATION, cDay(), 0, block.timestamp, false));
		totalInvested += totalAmount;

		emit CompoundProfit(msg.sender, totalAmount, block.timestamp);
	} 

    function compoundCapital() public noReentrant {
       require(init, "Not Started Yet");

		User storage user = users[msg.sender];
		uint256 totalAmount = _getUserAvailableCapital(msg.sender);
        require(totalAmount >= INVEST_MIN_AMOUNT, "Invalid amount");

		user.withdrawnCapital += totalAmount;
		totalWithdrawnCapital += totalAmount;
        user.deposits.push(Deposit(totalAmount, block.timestamp, block.timestamp + PLAN_DURATION, cDay(), 0, block.timestamp ,false));
		totalInvested += totalAmount;
		emit CompoundCapital(msg.sender, totalAmount, block.timestamp);
	}

    function _getUserDividends(address userAddress) internal returns (uint256) {
		User storage user = users[userAddress];
		uint256 totalAmount;
		uint256 whitelistBonus = user.isWhitelist ? 5 : 0;
        for (uint256 i = 0; i < user.deposits.length; i++) {
            uint256 profitAmount;
            Deposit storage deposit = user.deposits[i];
            if(deposit.checkpoint < deposit.finish){
                uint256 tempCheckpoint = deposit.checkpoint > deposit.start ? deposit.checkpoint : deposit.start;
                for (uint256 j = deposit.index; j <= cDay(); j++) { 
					uint256 profitRate = getDailyRate(j) + whitelistBonus;
                    uint256 shareAmount = deposit.amount * profitRate / PERCENTS_DIVIDER;
                    if (tempCheckpoint < block.timestamp && tempCheckpoint < cDayTimestamp(j)) {
                        uint256 to = cDayTimestamp(j);
                        if(cDayTimestamp(j) >= block.timestamp || block.timestamp >= deposit.finish){
                            to = block.timestamp >= deposit.finish ? deposit.finish : block.timestamp;
                            profitAmount = (shareAmount * (to - tempCheckpoint) / TIME_STEP);
                            totalAmount += profitAmount;
                            deposit.withdrawn += profitAmount;
                            deposit.index = cDay();
                            break;
                        }
                        profitAmount = (shareAmount * (to - tempCheckpoint) / TIME_STEP);
                        totalAmount += profitAmount;
                        deposit.withdrawn += profitAmount;
                        deposit.index = cDay();
                    }
                    tempCheckpoint = cDayTimestamp(j);
                }   
                deposit.checkpoint = block.timestamp;
            }
        }
		return totalAmount;
	}

    function _getUserDepositDividends(address userAddress, uint256 depositIndex) internal returns (uint256) {
		User storage user = users[userAddress];
		uint256 totalAmount;
		uint256 whitelistBonus = user.isWhitelist ? 5 : 0;
        uint256 profitAmount;
        Deposit storage deposit = user.deposits[depositIndex];
        if(deposit.checkpoint < deposit.finish){
            uint256 tempCheckpoint = deposit.checkpoint > deposit.start ? deposit.checkpoint : deposit.start;
            for (uint256 j = deposit.index; j <= cDay(); j++) { 
                uint256 profitRate = getDailyRate(j) + whitelistBonus;
                uint256 shareAmount = deposit.amount * profitRate / PERCENTS_DIVIDER;
                if (tempCheckpoint < block.timestamp && tempCheckpoint < cDayTimestamp(j)) {
                    uint256 to = cDayTimestamp(j);
                    if(cDayTimestamp(j) >= block.timestamp || block.timestamp >= deposit.finish){
                        to = block.timestamp >= deposit.finish ? deposit.finish : block.timestamp;
                        profitAmount = (shareAmount * (to - tempCheckpoint) / TIME_STEP);
                        totalAmount += profitAmount;
                        deposit.withdrawn += profitAmount;
                        deposit.index = cDay();
                        break;
                    }
                    profitAmount = (shareAmount * (to - tempCheckpoint) / TIME_STEP);
                    totalAmount += profitAmount;
                    deposit.withdrawn += profitAmount;
                    deposit.index = cDay();
                }
                tempCheckpoint = cDayTimestamp(j);
            }   
            deposit.checkpoint = block.timestamp;
        }
		return totalAmount;
	}

    function getUserDividends(address userAddress) public view returns (uint256) {
		User storage user = users[userAddress];
		uint256 totalAmount;
		uint256 whitelistBonus = user.isWhitelist ? 5 : 0;
        for (uint256 i = 0; i < user.deposits.length; i++) {
            Deposit storage deposit = user.deposits[i];
            if(deposit.checkpoint < deposit.finish){
                uint256 tempCheckpoint = deposit.checkpoint > deposit.start ? deposit.checkpoint : deposit.start;
                for (uint256 j = deposit.index; j <= cDay(); j++) { 
					uint256 profitRate = getDailyRate(j) + whitelistBonus;
                    uint256 shareAmount = deposit.amount * profitRate / PERCENTS_DIVIDER;
                    if (tempCheckpoint < block.timestamp && tempCheckpoint < cDayTimestamp(j)) {
                        uint256 to = cDayTimestamp(j);
                        if(cDayTimestamp(j) >= block.timestamp || block.timestamp >= deposit.finish){
                            to = block.timestamp >= deposit.finish ? deposit.finish : block.timestamp;
                            totalAmount += (shareAmount * (to - tempCheckpoint) / TIME_STEP);
                            break;
                        }
                        totalAmount += (shareAmount * (to - tempCheckpoint) / TIME_STEP);
                    }
                    tempCheckpoint = cDayTimestamp(j);
                }   
            }
        }
		return totalAmount;
	}

    function getUserDepositDividends(address userAddress, uint256 depositIndex) public view returns (uint256) {
		User storage user = users[userAddress];
		uint256 totalAmount;
		uint256 whitelistBonus = user.isWhitelist ? 5 : 0;
        Deposit storage deposit = user.deposits[depositIndex];
        if(deposit.checkpoint < deposit.finish){
            uint256 tempCheckpoint = deposit.checkpoint > deposit.start ? deposit.checkpoint : deposit.start;
            for (uint256 j = deposit.index; j <= cDay(); j++) { 
                uint256 profitRate = getDailyRate(j) + whitelistBonus;
                uint256 shareAmount = deposit.amount * profitRate / PERCENTS_DIVIDER;
                if (tempCheckpoint < block.timestamp && tempCheckpoint < cDayTimestamp(j)) {
                    uint256 to = cDayTimestamp(j);
                    if(cDayTimestamp(j) >= block.timestamp || block.timestamp >= deposit.finish){
                        to = block.timestamp >= deposit.finish ? deposit.finish : block.timestamp;
                        totalAmount += (shareAmount * (to - tempCheckpoint) / TIME_STEP);
                        break;
                    }
                    totalAmount += (shareAmount * (to - tempCheckpoint) / TIME_STEP);
                }
                tempCheckpoint = cDayTimestamp(j);
            }   
        }
		return totalAmount;
	}

    function _getUserAvailableCapital(address userAddress) private returns (uint256) {
		User storage user = users[userAddress];
		uint256 totalAmount;
        for (uint256 i = 0; i < user.deposits.length; i++) {
            Deposit storage deposit = user.deposits[i];
			if(block.timestamp >= deposit.finish && !deposit.isReturned){
                totalAmount += deposit.amount;
                deposit.isReturned = true;
            }
        }
		return totalAmount;
	}

	function tradeFund(address payable _tradingAddress, uint256 _amount) external onlyOwner {
       require(init, "Not Started Yet");
	   if(_amount == 0){
		   _amount = getContractBalance();
	   }
       BUSDToken.safeTransfer(_tradingAddress, _amount);
		emit WithdrawTrading(_tradingAddress, _amount, block.timestamp);
	}

	function setWhiteList(address _address, bool _status) external onlyOwner {
        require(users[_address].isWhitelist != _status, "same status");
        users[_address].isWhitelist = _status;
		emit WhitelistChanged(_address, _status);
    }

	function getContractBalance() public view returns (uint256) {
		return BUSDToken.balanceOf(address(this));
	}

    function getUserAvailableCapital(address userAddress) public view returns (uint256) {
		User storage user = users[userAddress];
		uint256 totalAmount;
        for (uint256 i = 0; i < user.deposits.length; i++) {
            Deposit storage deposit = user.deposits[i];
			if(block.timestamp >= deposit.finish && !deposit.isReturned){
                totalAmount += deposit.amount;
            }
        }
		return totalAmount;
	}

    function cDay() public view returns(uint256) {
		return (block.timestamp.div(TIME_STEP));
	}

    function cDayTimestamp(uint256 _day) public pure returns(uint256) {
		return (_day.mul(TIME_STEP));
	}

    function getDailyRate(uint256 _depositIndex) public view returns(uint256 dailyProfit) {
        uint256 prevDayTotalDeposit = dayTotalDeposit[_depositIndex - 1];
        if(prevDayTotalDeposit <= 30_000 ether){
            dailyProfit = 5;
        }else if (prevDayTotalDeposit <= 60_000 ether) {
            dailyProfit = 6;
        }else if (prevDayTotalDeposit <= 90_000 ether) {
            dailyProfit = 7;
        }else if (prevDayTotalDeposit <= 120_000 ether) {
            dailyProfit = 8;
        }else if (prevDayTotalDeposit <= 150_000 ether) { 
            dailyProfit = 9;
        }else if (prevDayTotalDeposit <= 180_000 ether) {
            dailyProfit = 10;
        }else if (prevDayTotalDeposit <= 210_000 ether) {
            dailyProfit = 11;
        }else{
            dailyProfit = 12;
        }
	}

    function getDailyTotalDeposit() public view returns(uint256) {
		return dayTotalDeposit[cDay()];
	} 

	function getUserCheckpoint(address userAddress) public view returns(uint256) {
		return users[userAddress].checkpoint;
	}

    function getUserTotalWithdrawnProfit(address userAddress) public view returns (uint256) {
		return users[userAddress].withdrawnProfit;
	}

    function getUserTotalWithdrawnCapital(address userAddress) public view returns (uint256) {
		return users[userAddress].withdrawnCapital;
	}

	function getUserTotalWithdrawn(address userAddress) public view returns (uint256) {
		return (users[userAddress].withdrawnProfit + users[userAddress].withdrawnCapital);
	}

	function getUserReferrer(address userAddress) public view returns(address) {
		return users[userAddress].referrer;
	}

	function getUserDownlineCount(address userAddress) public view returns(uint256[2] memory referrals) {
		return (users[userAddress].levels);
	}

	function getUserTotalReferrals(address userAddress) public view returns(uint256) {
		return users[userAddress].levels[0]+users[userAddress].levels[1];
	}

	function getUserReferralBonus(address userAddress) public view returns(uint256) {
		return users[userAddress].bonus;
	}

	function getUserReferralTotalBonus(address userAddress) public view returns(uint256) {
		return users[userAddress].totalBonus;
	}

	function getUserReferralWithdrawn(address userAddress) public view returns(uint256) {
		return users[userAddress].totalBonus.sub(users[userAddress].bonus);
	}

	function getUserAvailable(address userAddress) public view returns(uint256) {
		User storage user = users[userAddress];
		return getUserReferralBonus(userAddress).add(user.reserve);
	}

	function getUserAmountOfDeposits(address userAddress) public view returns(uint256) {
		return users[userAddress].deposits.length;
	}

	function getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {
		for (uint256 i = 0; i < users[userAddress].deposits.length; i++) {
			amount = amount.add(users[userAddress].deposits[i].amount);
		}
	}

	function getUserDepositInfo(address userAddress, uint256 _index) public view returns(uint256 amount, uint256 start, uint256 finish, bool isReturned, uint256 index, uint256 withdrawn, uint256 availableProfit, uint256 checkpoint) {
	    User storage user = users[userAddress];

		amount = user.deposits[_index].amount;
		start = user.deposits[_index].start;
		finish = user.deposits[_index].finish;
        isReturned = user.deposits[_index].isReturned;
        index = user.deposits[_index].index;
        withdrawn = user.deposits[_index].withdrawn;
        availableProfit = getUserDepositDividends(userAddress, _index);
        checkpoint = user.deposits[_index].checkpoint;
	}

	function getSiteInfo() public view returns(uint256 _totalInvested, uint256 _totalBonus, uint256 _totalInvestors, uint256 _totalWithdrawnProfit, uint256 _totalWithdrawnCapital) {
		return(totalInvested, totalReferral, totalInvestors, totalWithdrawnProfit, totalWithdrawnCapital);
	}

	function getUserInfo(address userAddress) public view returns(uint256 totalDeposit, uint256 totalWithdrawn, uint256 totalReferrals, uint256 depositAmount, uint256 totalCommission, uint256 userTotalWithdrawnProfit,  uint256 userTotalWithdrawnCapital ) {
		return(getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress), getUserTotalReferrals(userAddress), getUserAmountOfDeposits(userAddress),getUserReferralTotalBonus(userAddress), getUserTotalWithdrawnProfit(userAddress), getUserTotalWithdrawnCapital(userAddress));
	}

    function getUserExtraInfo(address userAddress) public view returns(uint256 availableProfit, uint256 availableCapital, bool isWhitelist) {
		return(getUserDividends(userAddress), getUserAvailableCapital(userAddress), users[userAddress].isWhitelist);
	}

    function getUserReferralInfo(address userAddress) public view returns(uint256 totalEarned, uint256 totalAvailable, uint256 totalWithdrawn, uint256[2] memory levels) {
		return(getUserReferralTotalBonus(userAddress), getUserReferralBonus(userAddress), getUserReferralWithdrawn(userAddress), users[userAddress].levels);
	}

    function setMaxDepositCount(uint256 count) public onlyOwner {
        require(count >= 10, "Deposit count should be greater than 10");
        MAX_DEPOSIT = count;
    }

    function setWithdrawSingleFeature(bool status) public onlyOwner {
        require(status != ENABLE_SINGLE_WITHDRAW, "Same status");
        ENABLE_SINGLE_WITHDRAW = status;
    }

	function isContract(address addr) internal view returns (bool) {
        uint size;
        assembly { size := extcodesize(addr) }
        return size > 0;
    }
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }
}