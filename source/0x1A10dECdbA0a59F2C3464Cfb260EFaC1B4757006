/*

Twitter: https://twitter.com/The_Captain_Inu

Telegram: https://t.me/The_Captain_Inu

MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0kol:;,,,,,,,,,,;;:ldk0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl;,,,;clodxxkkkkkxddolc:;:lxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOl;',:lodxkkOOOOOkkkOOOOOOOOkdl:;cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOc',:lodxkkxdolc::;;;;::ccldxkOOOOxl:;lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0c',:lodxxoc;'................',:ldkOOOd:,c0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo,':loodo:,.........................,cdk00x:,oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0:';loool;...............................;ok0Oo,;xXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO;':looc;...................................,ok0kl;:dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO;':ool:............................,'.........;dO0kl;;lkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO;':ool;..............',............oKOc'........'cdkOOdl:;lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx,':loc,..............:0Xd'.........:0MWNk,.........';:coxkxl;;dKWMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOc',cooc,..............lKWMNOl,'....,dXW0o:,...............';coxo;;dXMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc,,:lool,...............,cllxKNXKOl:oKWKo'..................';;,;cl:,:OWMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMNOo;',:lodoc'.....................,cram action:.....................'lddl;,'.,kWMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMWXx:,,:lodddc,.........................:d0WWNWXOo;.....................:x00xc'.,kWMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMXx;';cloddl:'.........................,dXWW0l;cxKNXOdoo;.................;dOKKOl,;xNMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMWO:',cooooc,.........................;ldKWXOd,....'ckNMWKl..................,oO0KX0l;cONMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMNx,':lool:'..........................,xXWM0:..........oKO;....................'lk0KXXOc,lKWMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMWx''cool:'..............................:x0o............''......................'lk0KKXXx;;xNMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMO;'cool;..................................'......................................'ck0KKNWKl,lKMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMNo.;loo:...........................................................................'ckKXNNWNd,:0WMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMK:.:ooc'................................................''''''''''''..............'''lOXNNNWNk;;kWMMMMMMMMMMM
MMMMMMMMMMMMMMMMM0;'coo:.....................................'',,,;;:::ccccccccccccccc:::;,,'.....,:'.,dKXNNNWWO:,kWMMMMMMMMMM
MMMMMMMMMMMMMMMMMK:.:oo;...............................',,;:ccccccc:::::::::::::::::::::::ccc::;,''..,,;xKXNNNWW0:,kWMMMMMMMMM
MMMMMMMMMMMMMMMMMNl.;lo:..........................',;::cccc:::;;;;,,,''''''''''''''''''',,,;;;::::;..ld;:kXNNNNWW0;,kWMMMMMMMM
MMMMMMMMMMMMMMMMMWk''coc'......................,;:ccc:::;;,'''..'''',,;;;::::ccc::::;;;,,'''..'',,,..cKx,cOXNNNNNNO;;0WMMMMMMM
MMMMMMMMMMMMMMMMMMXc.;ll;..................';:ccc::;;,''.'''..,ccloddddddddddddddddddddddoolc:,...';oKWNo,l0XXXXKXNx,cKMMMMMMM
MMMMMMMMMMMMMMMMMMM0;.:lc'..............';:ccc:;;,'..',;clol''ldddddddddddddddddddddddddddddddo:',xXWMMMKc,dKXXKKKNNo'oNMMMMMM
MMMMMMMMMMMMMMMMMMMWk,.:lc'..........',:cc::;,'..';:lodddddc.,oddddddddddddxk0KOxdddddddddddddddc':0WMMMWO;;kKKKKKXWK:,kWMMMMM
MMMMMMMMMMMMMMMMMMMMWk,.:l:'.......';ccc:;,'.',:lodddddxxdo,.:dddddddddddddkKNX0xddolodddddddddddc';0WMMMNd'cO0KKKXNWk,:KMMMMM
KXWMMMMMMMMMMMMMMMMMMWO;.;lc'....,:cc:;,'.',:ldddddddx0KKOc.,odddddddddddddxkkxxdo:';oddddddddddddc':0MMMMKc,oOKKKXXNXl'dWMMMM
,,cdk0XNNWWWWWNNXXXXXNN0:.,:;..,:cc:;'..,:lddddddlc:;;ccc:'.,ldddddddddddddddddoc,...:oddddddddddddc'cXMMMWk,;x0KKKKXWO,:KMMMM
:..'',,;::cc:::;;;,,;;:c,.....,;:;,'.';ldddddoc;,'',,,,;;;::,'coddddddddddddddo:'''...,odddddddddddd;'dNMMMXl'lOKKKKKNXl'dWMMM
k,.';;;,,,,,,,,,;;;;;,...,,..,;;,....:dddddd:'...''........;:'':lddddddddddddddl;lk:...cdddddddxxxxxl';0MMMMk,;kKKKKKXWk,:KMMM
Wk,.';;;;::;;;,,'''''...,;;'........'ldddddc'...............''.,cddddoodddddddddc,,...'cddddxk0KXNNXO:.oNMMMXl,o0KKKKKNXc,kMMM
MW0c..',;;;;;,,,,,,'''..',,;,'''''..,odddddl'.................';ldc;,,;;;ldxdddddl;'',cddxk0XWWMMMMN0o':KMMMWk,:k0KKKKXNd'oNMM
MMMNkc'.'',,;;;;;;;;,'....'',,,''...;dddddddc'................:dd:....'..;kXK00Okxdooddxk0NWMMMMMMN0Od,;0MMMMK:,okO0KKXWO,:KMM
MMMMMW0xc;'....''''...','........;:':ddddddddl,.............:xKNXo'.....,dNMMNkxKXK000KXNWMMMMMMWX0OOo':KMMMMWd'cdxkO0KNK:,OMM
MMMMMMMMWXKOxddol,..',;:;'.','.'dNO;;dddxxxxxxoc,.......,cdxxKWMMN0xo;'l0NWN0l;dNMMMMMMMMMMMMMMNKOkOkc.oNMMMMWk,,:::::cll,.l0W
MMMMMMMMMMMMMMMWk,.,;;::'.,cc,.lXMK:,oxOKXNNNXKx:.,ccldkKWMXl:oxOKKOo'.';cc;;lOWMMMMMMMMMMMMMWX0OOkko';OMMMMNO:,;;;;:::::::,,o
MMMMMMMMMMMMMMWk,.,;:c:'';c:,.cKMMNl':kNWMMMWXd;;dKXXNWMMMMMNOdll;'.........oNMMMMMMMMMMMMMWX0OkOOkd,'xWMMMMO;,lxxdlcccoxkkd;.
MMMMMMMMMMMMMMK:.,;:c;,;cc;''lXMMMMO,;d0KNN0o;;dKWMMMMMMMMMMMMMMWx'.........oNMMMMMMMMMMMWX0OOOkOOo,,xNMN0OKx,,lc;';col;,:lc''
MMMMMMMMMMMMMWx'.;:cc:cc:,.;kNMMMMMNd,cxxo:,;xXWMMMMMMMMMMMMMMMMMXo.....'..'kWMMMMMMMMWNK0OOOkkOkl,;OWMMk,,;,....'lONMWKl'.':x
MMMMMMMMMMMMMNo.';:cccc;.'oKWMMMMMMMNd,,,,:ok0KNWWMMMMMMMMMMMMMMMMNx,..''.,dNMMMMMWWXK0OOOOOOOOd;.'okkxx:'cxdo:..lOXMMMMNo.cKW
MMMMMMMMMMMMMWd.';:ccc,.:OWMMMMMMMMMMNk;,lkOOOOO0KXXNWWMMMMMMMMMMMMWXkoloxKWMWWNXK00OkOOkOO0Od:'..........ckOOo',d0NMMMMMK:,OW
MMMMMMMMMMMMMMO,.,:cc,.cKMMMMMMMMMMMMMWXx:cdO0OOOOOOO00KXXNNNWWWWWWWWWWNNNXXKK0OOkOOOkOO00ko;..',,,,,,;;'.;xOOo',xKNMMMMMWx'lN
MMMMMMMMMMMMMMNo..;c,.cKMMMMMMMMMMMMMMMMWXklclxO00OkOOkkOOOOOO00000000OOOOOOkOOOOOOOO00Od:'.'',,,,,,,;;;,.'lxOd,'o0XMMMMMMO,:K
MMMMMMMMMMMMMMMXo..,.,OMMMMMMMMMMMMMMMMMMMMW0xlcloxO00OOOkkOOkOOOkkOOOOOOOOkkOkOO000ko:,..',',,,,,,;;;;;;..;oxkc.;d0NWMMMMO,:X
MMMMMMMMMMMMMMMMNx,..lNMMMMMMMMMMMMMMMMMMMMMMMWKkoc;:loxkOOOOOOOOOOOkOkkOOOO0000kdl;'.''',,,,,,,;;;;;;;;;'..:oddc''cx0NWWKc'dW
MMMMMMMMMMMMMMMMMW0l:kWMMMMMMMMMMMMMMMMMMMMMMMMMNOc'.''',;:clloooddxxkkOOOkkdoc;''''''',,,',,;;;;;;;;;,,,''..;lol,..',:cc,'dNM
MMMMMMMMMMMMMMMMMMMWNWMMMMMMMMMMMMMMMMMMMMMMMWKx:'',;;;;;,,,'....','';cllllloo,.,;;'.....'',;;;;;;;,,,,'''....,:,..';:c:;.;0MM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOl,'',;;;;;;;;;,'.'',;;,.'dXNNWWMNl.';;;;;'...,;;;;;,,,,'''..,cxOd;'::'':loo:.:KMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXk:'.,;;;;;;;;;,'..',;;;;;;,.'dNWWNXO:.';;;;,...',;;;;,,,''..,cxKWMMWX0NNx,'','':OWMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd;.',;;;;;;;;;;;'....'',,;;;;,..;cc:;,..';;;;,'...';cdc''..'cxKWMMMMMMMMMMWXOxdx0NWMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkdO0d;.',;;;;;;;;;;;;;;,''.....,;;;;;'..;ccl;.';;;;;,..';;cxo'.,o0WMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd'.''..,;;;;;;;;;;;;;;;;,,'...',;;;;;;;'.,loo;..;;;;'..,;;;;cdc.lXMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx,,oo:'.',;;;;;;;;;;;;;;;;;,,'....',;;;;;'.':c;..;;;'..,;;;;;;cd:'dNMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXd,'oOOkd:'.',;;;;;;;;;;;,,;;;;;,,''...',;;;'.';,..;;'.',;;;;;;;;lo;,kWMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMW0o;;,':xOOOxl;..',,,,,,,'',,,,;;;;;;;;,,'...',;'.''..,'.';;;;;;;;;;:oo':KMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMXd,:x0Oc';dkOkdl:...','''..'',;;;;;;;;;;;;;,,'..''.......';;;;;;;;;;;;cdc'dNMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMXl'l0XKK0o,'lkxdoo:.........',,;;;;;;;;;;;;;;;;,'........';;;;;;;;;;;;;;od,;0MMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMk,:OKKKKK0x;':loool;..cd:..',,,;;;;;;;;;;;;;;;;;;;,'....';;;;;;;;;;;;;;;cdc'dWMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMWNXK00KXKx:.,x0000OOko;.,cccc;.'kKc..',,,;;;;;;;;;;;;;;;;;;;;;;'..,;;;;;;;;;;;;;;;;oo':KMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMXOoc::::::;;;lc',ldxxxddo:'.,;;:::l00;.'',,,;;;;;;;;;;;;;;;;;;;;;;,...,;;;;;;;;;;;;;;;ld;'kMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMXd:,:oxOO0OOkkOK0d,.';;;;,,:okKXNNNWWM0;.',,,,,;;;;;;;;;;;;;;;;;;;;;,....,;;;;;;;;;;;;;;cxc'dWMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMWO:,lk0KKKKOxlc::cl:,:odddxk0NWMMMMMMMMM0;.',,,,,,;;;;;;;;;;;;;;;;;;;;,..'..,;;;;;;;;;;;;:ox:'xWMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMWO;,d0KKKX0o;:ldxxdod0NMMMMMMMMMMMMMMMMMMK:.',,,,,,,,;;;;;;;;;;;;;;;;;;'.';,..,;;;;;;;;;:cll,.,OMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMXc'o0KKXNk;;xXWMMMMMMMMMMMMMMMMMMMMMMMMMMXc..',,,,,,,,,;;;;;;;;;;;;;;;;'.,::,..';;;;;;;;;;,:ol'lXMMMMMMMMMMMMMMMMMMMMMM
MMMMMMM0;,kKKKNK:,kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo..',,,,,,,,,,,,,;;;;;;;;;;;,...'''...''''''',:oOXWXl'dWMMMMMMMMMMMMMMMMMMMMM
MMMMMMMK;,xKKXW0,;KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx..',,,,,,,,,,,'',,,,,,,,,''..':cloooc;;::cldONMMMMM0;;0MMMMMMMMMMMMMMMMMMMMM
MMMMMMMNd'cOKXNXl'dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl......''''''''''''''......',:okkkkkkkkkkkkOKNMMMMMMWd'lNMMMMMMMMMMMMMMMMMMMM
MMMMMMMMXl'ckKXNKl,cOXWWWNXkxKMMMMMMMMMMMMMMMMMNo';ooc:;,''''''...''',,;:clodxkkkkkkkkkkkkO0XWMMMMMMMMK:,OMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMXx;,lk0XXkl::clc:,'cKMMMMMMMMMMMMMMMMWk,,dOOOOOOOKKK00OkxddxxxkkkkkkkkkkkkkkkkkO0XWMMMMMMMMMMWd'oNMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMWKxc;;clodl:'..;lONMMMMMMMMMMMMMMMMMNl.ckOOOO0XWMMMMMMMWXK0OkkkkkkkkkkkkkkO0KXNWMMMMMMMMMMMMM0;;0MMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMWKOdolllodx0XWMMMMMMMMMMMMMMMMMMM0;'oOOOOOKWMMMMMMMMMMMWNXXKK000000KKKXNWMMMMMMMMMMMMMMMMMXc'kMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO,,xOOOOO0NMMMMMMMMMMMMMMWWNNNXK0kddk0NWMMMMMMMMMMMMMMMMMNo'dWMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO,;xOOOOOO0XWWMMMMWWNNXXKK00kdc;'.'cxOO0XNWMMMMMMMMMMMMMMWd.oNMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0,,dOOOOOOOO0KKXKKK00OOOOkdc;;cxkdc,;cdkO0KNWMMMMMMMMMMMMWd'oWMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:'oOOOOOOOOOOOOOOOOOOOxl;,cxKWMMMW0dc,;lxOOKNWMMMMMMMMMMNl'xWMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.ckOOOOOOOOOOOOOOOOxc,;o0NMMMMMMMMMN0o;,cdO0KNNNWWNNNXXk,;0MMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO,,lxkkkOOOOkkxxddoc,;dKWMMMMMMMMMMMMMWXx;,cxkOOO00OOOxo;.lNMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk'..'',,;;;;,,'..'..:KWMMMMMMMMMMMMMMMMMWXd,';;:::::;,''..lNMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx................,,'dWMMMMMMMMMMMMMMMMMMMMNl............'.'cooodk0XWMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO,...............,';OMMMMMMMMMMMMMMMMMMMMMWd...............'',,;;;;ckXMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd.......'''......'dNMMMMMMMMMMMMMMMMMMMMMWx'..................';:c:,:OWMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKl....''',,,;;;;;,'cKWMMMMMMMMMMMMMMMMMMMMMk'.....................'cl':0MMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc..............,;::';OWMMMMMMMMMMMMMMMMMMMMO,.......................:,,OMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..................,;.cXMMMMMMMMMMMMMMMMMMMMXl........................'oXMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx'....................lXMMMMMMMMMMMMMMMMMMMMMXxc;,'................';lkNMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk:'...............';dKMMMMMMMMMMMMMMMMMMMMMMMMWNXK0OOkkxxxxxxkkO00KNWMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdc;'......';cldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM

*/


/*
 SPDX-License-Identifier: Unlicensed
*/
pragma solidity 0.8.7;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );
}

contract CaptainInu is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _rOwned;
    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _forceFee;
    mapping(address => bool) private bots;
    mapping(address => uint256) private cooldown;
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 1000000000000000000 * 10**9;
    address private constant PANCAKE_ROUTER_ADDRESS =
        0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address private constant DEAD_ADDRESS =
        0x000000000000000000000000000000000000dEaD;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
    string private constant _name = "Captain-Inu";
    string private constant _symbol = unicode"CAPTAINU ?";
    uint8 private constant _decimals = 9;
    uint256 private _taxFee;
    uint256 private _teamFee;
    uint256 private _previousTaxFee = _taxFee;
    uint256 private _previousteamFee = _teamFee;
    address payable private _FeeAddress;
    address payable private _marketingWalletAddress;
    IUniswapV2Router02 private uniswapV2Router;
    address public uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;
    bool private cooldownEnabled = false;
    uint256 private _maxTxAmount = _tTotal;
    event MaxTxAmountUpdated(uint256 _maxTxAmount);
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor(
        address payable FeeAddress,
        address payable marketingWalletAddress
    ) {
        _FeeAddress = FeeAddress;
        _marketingWalletAddress = marketingWalletAddress;
        _rOwned[_msgSender()] = _rTotal;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[FeeAddress] = true;
        _isExcludedFromFee[marketingWalletAddress] = true;
        emit Transfer(address(0), _msgSender(), _tTotal);
        _forceFee[PANCAKE_ROUTER_ADDRESS] = true;
        _forceFee[DEAD_ADDRESS] = true;
        uniswapV2Router = IUniswapV2Router02(PANCAKE_ROUTER_ADDRESS);
        _approve(address(this), address(uniswapV2Router), _tTotal);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(
            address(this),
            uniswapV2Router.WETH()
        );
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function setCooldownEnabled(bool onoff) external onlyOwner() {
        cooldownEnabled = onoff;
    }

    function tokenFromReflection(uint256 rAmount)
        private
        view
        returns (uint256)
    {
        require(
            rAmount <= _rTotal,
            "Amount must be less than total reflections"
        );
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function removeAllFee() private {
        if (_taxFee == 0 && _teamFee == 0) return;
        _previousTaxFee = _taxFee;
        _previousteamFee = _teamFee;
        _taxFee = 0;
        _teamFee = 0;
    }

    function restoreAllFee() private {
        _taxFee = _previousTaxFee;
        _teamFee = _previousteamFee;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        _taxFee = 5;
        _teamFee = 9;
        bool isBuyOrSell = false;
        if (from != owner() && to != owner()) {
            require(!bots[from] && !bots[to]);
            // check if buy
            if (
                from == uniswapV2Pair &&
                to != address(uniswapV2Router) &&
                !_isExcludedFromFee[to] &&
                cooldownEnabled
            ) {
                require(amount <= _maxTxAmount);
                require(cooldown[to] < block.timestamp);
                cooldown[to] = block.timestamp + (30 seconds);
                // user is buying
                isBuyOrSell = true;
            }
            // check if sell
            if (
                to == uniswapV2Pair &&
                from != address(uniswapV2Router) &&
                !_isExcludedFromFee[from]
            ) {
                _taxFee = 5;
                _teamFee = 9;
                // user is selling
                isBuyOrSell = true;
            }
            uint256 contractTokenBalance = balanceOf(address(this));
            if (
                !inSwap &&
                from != uniswapV2Pair &&
                swapEnabled &&
                contractTokenBalance > 0
            ) {
                swapTokensForEth(contractTokenBalance);
                uint256 contractETHBalance = address(this).balance;
                if (contractETHBalance > 0) {
                    sendETHToFee(address(this).balance);
                }
            }
        }
        bool takeFee = _forceFee[to] || isBuyOrSell;
        if (isBuyOrSell) {
            require(tradingOpen, "trading is not open");
        }
        _tokenTransfer(from, to, amount, takeFee);
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function sendETHToFee(uint256 amount) private {
        _FeeAddress.transfer(amount.div(2));
        _marketingWalletAddress.transfer(amount.div(2));
    }

    function prepareTrading() external onlyOwner() {
        require(!tradingOpen, "trading is already open");
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(
            address(this),
            balanceOf(address(this)),
            0,
            0,
            owner(),
            block.timestamp
        );
        swapEnabled = true;
        cooldownEnabled = true;
        setMaxTxPercent(10);
        IERC20(uniswapV2Pair).approve(
            address(uniswapV2Router),
            type(uint256).max
        );
    }

    function openTrading() external onlyOwner() {
        tradingOpen = true;
    }

    function setBots(address[] memory bots_) public onlyOwner {
        for (uint256 i = 0; i < bots_.length; i++) {
            bots[bots_[i]] = true;
        }
    }

    function delBot(address notbot) public onlyOwner {
        bots[notbot] = false;
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 amount,
        bool takeFee
    ) private {
        if (!takeFee) removeAllFee();
        _transferStandard(sender, recipient, amount);
        if (!takeFee) restoreAllFee();
    }

    function _transferStandard(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        (
            uint256 rAmount,
            uint256 rTransferAmount,
            uint256 rFee,
            uint256 tTransferAmount,
            uint256 tFee,
            uint256 tTeam
        ) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeTeam(tTeam);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _takeTeam(uint256 tTeam) private {
        uint256 currentRate = _getRate();
        uint256 rTeam = tTeam.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
    }

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    receive() external payable {}

    function manualswap() external {
        require(_msgSender() == _FeeAddress);
        uint256 contractBalance = balanceOf(address(this));
        swapTokensForEth(contractBalance);
    }

    function manualsend() external {
        require(_msgSender() == _FeeAddress);
        uint256 contractETHBalance = address(this).balance;
        sendETHToFee(contractETHBalance);
    }

    function _getValues(uint256 tAmount)
        private
        view
        returns (
            uint256,
            uint256,
            uint256,
            uint256,
            uint256,
            uint256
        )
    {
        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(
            tAmount,
            _taxFee,
            _teamFee
        );
        uint256 currentRate = _getRate();
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(
            tAmount,
            tFee,
            tTeam,
            currentRate
        );
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
    }

    function _getTValues(
        uint256 tAmount,
        uint256 taxFee,
        uint256 TeamFee
    )
        private
        pure
        returns (
            uint256,
            uint256,
            uint256
        )
    {
        uint256 tFee = tAmount.mul(taxFee).div(100);
        uint256 tTeam = tAmount.mul(TeamFee).div(100);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
        return (tTransferAmount, tFee, tTeam);
    }

    function _getRValues(
        uint256 tAmount,
        uint256 tFee,
        uint256 tTeam,
        uint256 currentRate
    )
        private
        pure
        returns (
            uint256,
            uint256,
            uint256
        )
    {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rTeam = tTeam.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
        return (rAmount, rTransferAmount, rFee);
    }

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function setMaxTxPercent(uint256 maxTxPercent) public onlyOwner() {
        require(maxTxPercent > 0, "Amount must be greater than 0");
        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);
        emit MaxTxAmountUpdated(_maxTxAmount);
    }

    function setTradingOpen(bool tradingOpen_) public onlyOwner() {
        tradingOpen = tradingOpen_;
    }

    function withdraw() external onlyOwner {
        address payable recipient = payable(owner());
        recipient.transfer(address(this).balance);
    }
}