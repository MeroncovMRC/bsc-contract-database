// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address _who) external view returns (uint256);

    function transfer(address _to, uint256 _value) external;

    function allowance(address _owner, address _spender)
        external
        view
        returns (uint256);

    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) external;

    function approve(address _spender, uint256 _value) external;

    function burnFrom(address _from, uint256 _value) external;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract DOTCTwo {
    IERC20 public _USDT; // USDT Token address

    address public _owner;

    uint256 public nodePrice = 2000e18;

    uint256 public nodeCount = 200;

    mapping(address => uint256) public buyNodeUser;

    uint256 public currentNodeId;

    address public collectAddress;

    // USDT-0x55d398326f99059fF775485246999027B3197955
    // 0xE56D5478250251f84760E769E911fa5F0dca196F
    constructor(IERC20 USDT) {
        _USDT = USDT;
        _owner = msg.sender;
        collectAddress = address(this);
    }

    modifier onlyOwner() {
        require(msg.sender == _owner, "Permission denied");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        _owner = newOwner;
    }

    function changeNodePrice(uint256 _nodePrice) public onlyOwner {
        nodePrice = _nodePrice * (10**18);
    }

    function addNodeCount(uint256 _nodeCount) public onlyOwner {
        nodeCount += _nodeCount;
    }

    function changeCollectAddress(address _collectAddress) public onlyOwner {
        collectAddress = _collectAddress;
    }

    function buyNode() public {
        currentNodeId++;
        require(currentNodeId <= nodeCount, "node is sall out!");
        require(buyNodeUser[msg.sender] == 0, "only buy node one once!");
        buyNodeUser[msg.sender] = currentNodeId;
        require(
            _USDT.balanceOf(msg.sender) >= nodePrice,
            "balance is no enough!"
        );
        _USDT.transferFrom(msg.sender, collectAddress, nodePrice);
    }

    function participateU(uint256 _amount) public {
        _USDT.transferFrom(msg.sender, collectAddress, _amount);
    }

    function participateDOTC(uint256 _amount) public {}

    function appliWithdraw(uint256 _id, uint256 _amount) public {}

    function withdrawUSDT(address _account, uint256 _amount) public onlyOwner {
        _USDT.transfer(_account, _amount);
    }
}