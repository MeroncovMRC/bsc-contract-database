// SPDX-License-Identifier: UNLISCENSED
 
pragma solidity 0.8.4;
 
/*
@title TestBEP20Token
@dev Пример простого BEP-20 токена, в котором
все токены изначально назначены создателю.
Обратите внимание, что позже создатель может
распределять токены по своему усмотрению,
используя “transfer” и другие функции BEP-20
НЕОБХОДИМО МОДИФИЦИРОВАТЬ ПЕРЕД ВЫПУСКОМ.
ИСПОЛЬЗОВАТЬ ИСКЛЮЧИТЕЛЬНО В ОЗНАКОМИТЕЛЬНЫХ ЦЕЛЯХ.
*/
 
   contract TestBEP20Token {
   string public name = "PRESALETEST";
   string public symbol = "PT";
   uint256 public totalSupply = 1000000000000000000000;
   // 1 million
   uint8 public decimals = 18;
   
    /*
     @dev Emitted when `value` of tokens
    are transferred from one account (`from`) to another (`to`).
    The value of `value` can be zero.
    */
     
   event Transfer(address indexed _from, address indexed _to, uint256 _value);
    
    /*
    @dev Generated when `spender` for `owner`
    set by calling {approve}. `value` is a new reserve.
    */
     
   event Approval(
       address indexed _owner,
       address indexed _spender,
       uint256 _value
   );
   mapping(address => uint256) public balanceOf;
   mapping(address => mapping(address => uint256)) public allowance;
    
    /*
    @dev Constructor giving msg.sender all existing tokens.
 
    */
     
   constructor() {
       balanceOf[msg.sender] = totalSupply;
   }
    
    /*
   @dev Passes `amount` tokens
    from calling account to `recipient`.
      
    Returns a boolean value indicating the success of the transaction.
      
    Raises the {Transfer} event.
    */
     
   function transfer(address _to, uint256 _value)
       public
       returns (bool success)
   {
       require(balanceOf[msg.sender] >= _value);
       balanceOf[msg.sender] -= _value;
       balanceOf[_to] += _value;
       emit Transfer(msg.sender, _to, _value);
       return true;
   }
   
    /*
@dev Sets `amount` to be `spender`'s tolerance for the caller's tokens.
      
    Returns a boolean value indicating the success of the transaction.
      
    IMPORTANT: Be aware that changing the resolution
    using this method carries the risk of
    someone can use both old and new
    resolution due to bad order of transactions.
    One possible solution to mitigate this
    race conditions - first reduce the spender's tolerance to 0,
    and then set the desired value.
      
    Raises the {Approval} event.
    */
     
   function approve(address _spender, uint256 _value)
       public
       returns (bool success)
   {
       allowance[msg.sender][_spender] = _value;
       emit Approval(msg.sender, _spender, _value);
       return true;
   }
    
    /*
    @dev Passes `amount` of tokens from `sender` to `recipient`
    using the reserve mechanism. `amount` is subtracted from the caller's reserve.
      
    Returns a boolean value indicating the success of the transaction.
      
    Raises the {Transfer} event.
    */
     
   function transferFrom(
       address _from,
       address _to,
       uint256 _value
   ) public returns (bool success) {
       require(_value <= balanceOf[_from]);
       require(_value <= allowance[_from][msg.sender]);
       balanceOf[_from] -= _value;
       balanceOf[_to] += _value;
       allowance[_from][msg.sender] -= _value;
       emit Transfer(_from, _to, _value);
       return true;
   }
}