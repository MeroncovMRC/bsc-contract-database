{"IPancakeSwapRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e= 0.6.2;\r\ninterface IPancakeSwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n * not same\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   *\r\n   * _Available since v2.4.0._\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b \u003c= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   *\r\n   * _Available since v2.4.0._\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b \u003e 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n}"},"token.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./IPancakeSwapRouter.sol\";\r\n\r\n library SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) \u003c\u003c 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) \u003c\u003c 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a \u0026 MIN_INT256) != (b \u0026 MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b \u003e= 0 \u0026\u0026 c \u003c= a) || (b \u003c 0 \u0026\u0026 c \u003e a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b \u003e= 0 \u0026\u0026 c \u003e= a) || (b \u003c 0 \u0026\u0026 c \u003c a));\r\n        return c;\r\n    }\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a \u003c 0 ? -a : a;\r\n    }\r\n}\r\nabstract contract BEPContext {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this;\r\n    return msg.data;\r\n  }\r\n}\r\nabstract contract BEPOwnable is BEPContext {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return _msgSender() == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\nabstract contract BEP20Detailed {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  /**\r\n   * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n   * these values are immutable: they can only be set once during\r\n   * construction.\r\n   */\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint8 decimals_\r\n  ) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _decimals = decimals_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei.\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IBEP20-balanceOf} and {IBEP20-transfer}.\r\n   */\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract BEP20 is BEPContext, IBEP20, BEPOwnable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address =\u003e uint256) private _balances;\r\n\r\n  mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n   * @dev See {IBEP20-totalSupply}.\r\n   */\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IBEP20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(\r\n      sender,\r\n      _msgSender(),\r\n      _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\")\r\n    );\r\n    return true;\r\n  }\r\n\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\")\r\n    );\r\n    return true;\r\n  }\r\n\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _takefee(address sender,address addres,uint256 amount)  internal virtual {\r\n    _balances[addres] = _balances[addres].add(amount);\r\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n  }\r\n\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    _burn(account, amount);\r\n    _approve(\r\n      account,\r\n      _msgSender(),\r\n      _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\")\r\n    );\r\n  }\r\n}\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ncontract WTF is BEP20Detailed, BEP20 {\r\n  using SafeMath for uint256;\r\n  using SafeMathInt for int256;\r\n\r\n  mapping(address =\u003e bool) public whitelistTax;\r\n\r\n\r\n  uint8 private buyTax;\r\n  uint8 private sellTax; \r\n  uint8 private transferTax;\r\n\r\n  uint256 private taxAmount;\r\n  address private marketingPool;\r\n  address private DevPool;\r\n  address private LiquidityPool2;\r\n  address private LiquidityPool;\r\n\r\n\r\n  uint8 private mktTaxPercent;\r\n  uint8 private DevTaxPercent;\r\n  uint8 private liqTaxPercent;\r\n\r\n  uint256 private SwapAtAmount;\r\n  uint256 private minimumTokensBeforeSwap;\r\n  bool public swapAndLiquifyEnabled;\r\n  bool private inSwapAndLiquify;\r\n\r\n  bool public tradingOpen;\r\n\r\n\r\n\r\n  IPancakeSwapRouter public uniswapV2Router;\r\n  bool public enableTax;\r\n  address public _lpAddress;\r\n  address public pinksale;\r\n  uint256 public launchedAt;\r\n  event changeTax(bool _enableTax, uint8 _buyTax, uint8 _sellTax, uint8 _transferTax);\r\n  event changeTaxPercent(uint8 _mktTaxPercent,uint8 _DevTaxPercent,uint8 _LiquidityPool2);\r\n  event changeWhitelistTax(address _address, bool status);  \r\n  \r\n  event changeMarketingPool(address _marketingPool);\r\n  event changeLiquidityPool2(address _LiquidityPool2);\r\n  event changeDevPool(address _DevPool);\r\n\r\n\r\n  event UpdateUniswapV2Router(address indexed newAddress,address indexed oldAddress);\r\n  modifier lockTheSwap {\r\n    inSwapAndLiquify = true;\r\n    _;\r\n    inSwapAndLiquify = false;\r\n  }\r\n  constructor(address _marketingPool,address _DevPool,address _LiquidityPool2,address _LiquidityPool) payable BEP20Detailed(\"WorldCup Fan Token\", \"WTF\", 9) {\r\n    uint256 totalTokens = 1_000_000_000 * 10**uint256(decimals());\r\n    _mint(msg.sender, totalTokens);  \r\n    buyTax = 3;\r\n    sellTax = 3;\r\n    transferTax = 0;\r\n    enableTax = true;\r\n    tradingOpen = false;\r\n    mktTaxPercent = 25;\r\n    DevTaxPercent = 25;\r\n    liqTaxPercent = 20;\r\n    swapAndLiquifyEnabled = true;\r\n    SwapAtAmount  = totalTokens.div(1000);\r\n    minimumTokensBeforeSwap = totalTokens.div(5000);\r\n    whitelistTax[address(this)] = true;\r\n    whitelistTax[owner()] = true;\r\n    whitelistTax[address(0)] = true;\r\n    LiquidityPool = _LiquidityPool;\r\n    whitelistTax[LiquidityPool] = true;\r\n    marketingPool = _marketingPool;\r\n    whitelistTax[marketingPool] = true;\r\n    DevPool = _DevPool;\r\n    whitelistTax[DevPool] = true;\r\n    LiquidityPool2 = _LiquidityPool2;\r\n    whitelistTax[LiquidityPool2] = true;\r\n\r\n  \r\n    uniswapV2Router = IPancakeSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);//pancakerouter v2 mainnet\r\n\r\n    _approve(address(this), address(uniswapV2Router), ~uint256(0));\r\n    _lpAddress = IFactory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n  }\r\n\r\n\r\n  function setLiquidityPool(address _LiquidityPool) external onlyOwner {\r\n    LiquidityPool = _LiquidityPool;\r\n    whitelistTax[LiquidityPool] = true;\r\n  }\r\n  function setMarketingPool(address _marketingPool) external onlyOwner {\r\n    marketingPool = _marketingPool;\r\n    whitelistTax[marketingPool] = true;\r\n    emit changeMarketingPool(_marketingPool);\r\n  }\r\n  function setpinksaleAdress(address _pinksaleAdress) external onlyOwner {\r\n    pinksale = _pinksaleAdress;\r\n    whitelistTax[pinksale] = true;\r\n  }  \r\n\r\n  function setDevPool(address _DevPool) external onlyOwner {\r\n    DevPool = _DevPool;\r\n    whitelistTax[DevPool] = true;\r\n    emit changeDevPool(_DevPool);\r\n  }\r\n  function setLiquidityPool2(address _LiquidityPool2) external onlyOwner {\r\n    LiquidityPool2 = _LiquidityPool2;\r\n    whitelistTax[LiquidityPool2] = true;\r\n    emit changeLiquidityPool2(_LiquidityPool2);\r\n  }    \r\n\r\n  function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n    require(\r\n        newAddress != address(uniswapV2Router),\r\n        \"The router already has that address\"\r\n    );\r\n    uniswapV2Router = IPancakeSwapRouter(newAddress);\r\n    _approve(address(this), address(uniswapV2Router), ~uint256(0));\r\n    _lpAddress = IFactory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n    emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n  }\r\n\r\n\r\n  function setTaxes(bool _enableTax, uint8 _buyTax, uint8 _sellTax, uint8 _transferTax) external onlyOwner {\r\n    require(_buyTax \u003c= 5);\r\n    require(_sellTax \u003c= 5);\r\n    require(_transferTax \u003c= 5);\r\n    enableTax = _enableTax;\r\n    buyTax = _buyTax;\r\n    sellTax = _sellTax;\r\n    transferTax = _transferTax;\r\n    emit changeTax(_enableTax,_buyTax,_sellTax,_transferTax);\r\n  }\r\n\r\n  function setTaxPercent(uint8 _mktTaxPercent2, uint8 _DevTaxPercent2, uint8 _LiquidityPool2) external onlyOwner {\r\n    require(_mktTaxPercent2 +  _DevTaxPercent2 + _LiquidityPool2 \u003c= 100);\r\n    mktTaxPercent = _mktTaxPercent2;\r\n    DevTaxPercent = _DevTaxPercent2;\r\n    liqTaxPercent = _LiquidityPool2;\r\n    emit changeTaxPercent(_mktTaxPercent2,_DevTaxPercent2,_LiquidityPool2);\r\n  }\r\n\r\n  function setWhitelist(address _address, bool _status) external onlyOwner {\r\n    whitelistTax[_address] = _status;\r\n    emit changeWhitelistTax(_address, _status);\r\n  }\r\n\r\n  function getTaxes() external view returns (uint8 _sellTax, uint8 _buyTax, uint8 _transferTax) {\r\n    return (sellTax, buyTax, transferTax);\r\n  }\r\n\r\n\r\n  //Tranfer and tax\r\n  function _transfer(address sender, address receiver, uint256 amount) internal virtual override {\r\n    taxAmount = 0;\r\n    if (amount == 0) {\r\n        super._transfer(sender, receiver, 0);\r\n        return;\r\n    }\r\n    if(enableTax \u0026\u0026 !whitelistTax[sender] \u0026\u0026 !whitelistTax[receiver]){\r\n      require(tradingOpen, \"Trade Not Open\");\r\n      uint256 BalanceToken = balanceOf(address(this));\r\n      if(amount \u003e SwapAtAmount \u0026\u0026 !inSwapAndLiquify \u0026\u0026 sender != _lpAddress \u0026\u0026 receiver == _lpAddress \u0026\u0026 swapAndLiquifyEnabled \u0026\u0026 BalanceToken \u003e minimumTokensBeforeSwap) {\r\n        swapAndLiquify(BalanceToken);\r\n      }\r\n      if(receiver == _lpAddress \u0026\u0026 sender != _lpAddress) {\r\n        taxAmount = amount.mul(sellTax).div(100);\r\n      }else if(sender == _lpAddress \u0026\u0026 receiver != _lpAddress) {\r\n        taxAmount = amount.mul(buyTax).div(100);\r\n      }else if(sender != _lpAddress \u0026\u0026 receiver != _lpAddress){\r\n        taxAmount = amount.mul(transferTax).div(100);\r\n      }\r\n      if(block.number - launchedAt \u003c= 3 ){\r\n        taxAmount = amount.mul(80).div(100);\r\n      }\r\n      if(taxAmount \u003e 0) {\r\n          super._takefee(sender,address(this),taxAmount);  \r\n      }\r\n      super._transfer(sender, receiver, amount - taxAmount);\r\n      return;\r\n    }else{\r\n      super._transfer(sender, receiver, amount);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n    recipient.transfer(amount);\r\n  }\r\n  function swapTokensForBnb(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n  }\r\n  function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n    swapAndLiquifyEnabled = _enabled;\r\n\r\n  }\r\n  function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n        \r\n        uint256 tokensForLP = tAmount.div(3);\r\n        uint256 tokensForSwap = tAmount.sub(tokensForLP);\r\n\r\n        swapTokensForBnb(tokensForSwap);\r\n        uint256 amountReceived = address(this).balance;\r\n        uint256 amountBNBTeam = amountReceived.mul(DevTaxPercent).div(100);\r\n        uint256 amountBNBMarketing = amountReceived.mul(mktTaxPercent).div(100);\r\n        uint256 amountBNBLiquidity2 = amountReceived.mul(liqTaxPercent).div(100);\r\n        uint256 amountBNBLiquidity = amountReceived.sub(amountBNBTeam).sub(amountBNBMarketing).sub(amountBNBLiquidity2);\r\n        if(amountBNBMarketing \u003e 0){\r\n            transferToAddressETH(payable(marketingPool), amountBNBMarketing);\r\n        }\r\n        if(amountBNBTeam \u003e 0){\r\n            transferToAddressETH(payable(DevPool), amountBNBTeam);\r\n        }\r\n        if(amountBNBLiquidity \u003e 0 \u0026\u0026 LiquidityPool != address(0)){\r\n            transferToAddressETH(payable(LiquidityPool), amountBNBLiquidity);\r\n        }\r\n        if(amountBNBLiquidity2 \u003e 0 \u0026\u0026 tokensForLP \u003e 0){\r\n            addLiquidity(tokensForLP, amountBNBLiquidity2);\r\n        }\r\n    }\r\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            LiquidityPool2,\r\n            block.timestamp\r\n        );\r\n  }\r\n\r\n  function launch() external onlyOwner {\r\n    require(tradingOpen == false, \"Already open \");\r\n    launchedAt = block.number;\r\n    tradingOpen = true;\r\n  }\r\n  function burn(uint256 amount) external {\r\n    amount = amount * 10**uint256(decimals());\r\n    _burn(msg.sender, amount);\r\n  }\r\n  function manualswap() external {\r\n    require(whitelistTax[msg.sender],\"Not Allow\");\r\n    uint256 contractBalance = balanceOf(address(this));\r\n    if(contractBalance \u003e 0){\r\n      swapAndLiquify(contractBalance);\r\n    }\r\n    uint256 ContractBnb = address(this).balance;\r\n    if(ContractBnb \u003e 0){\r\n      transferToAddressETH(payable(DevPool), ContractBnb);\r\n    }\r\n\r\n  }\r\n  function sweep() external {\r\n    require(whitelistTax[msg.sender],\"Not Allow\");\r\n    uint256 contractBalance = balanceOf(address(this));\r\n    if(contractBalance \u003e 0){\r\n      swapTokensForBnb(contractBalance);\r\n    }\r\n    uint256 ContractBnb = address(this).balance;\r\n    if(ContractBnb \u003e 0){\r\n      transferToAddressETH(payable(DevPool), ContractBnb);\r\n    }\r\n  }\r\n  receive() external payable {}\r\n\r\n}"}}