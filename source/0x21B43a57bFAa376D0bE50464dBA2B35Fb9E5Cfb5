{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue\u0027s index to valueIndex\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function owner() internal view returns (address) {\n        return _owner;\n    }\n}\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"./Address.sol\";\nimport \"./IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"Staking.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"./Ownable.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./EnumerableSet.sol\";\n\ncontract ImmortlStaking is Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using SafeERC20 for IERC20;\n\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n        uint256 vestingStartTime;\n    }\n\n    struct PoolInfo {\n        IERC20 stakingToken;        // Address of deposit token contract.\n        uint256 allocPoint;         // How many allocation points assigned to this pool.\n        uint256 lastRewardBlock;    // Last block number that reward distribution occurred.\n        uint256 accTokenPerShare;   // Accumulated token per share, times 1e12.\n        uint256 totalStakedAmount;  // Total token in pool.\n        uint256 vestingPeriod;      // Vesting period for staked tokens.\n    }\n\n    PoolInfo[] public poolInfo;\n    mapping(uint256 =\u003e EnumerableSet.AddressSet) poolUsers;\n    mapping(uint256 =\u003e mapping(address =\u003e UserInfo)) public userInfo;\n    mapping(uint256 =\u003e mapping(address =\u003e uint256)) public failedRewardsCache;\n    IERC20 public constant IMRTL = IERC20(0x170DC35C5B58AEdEdC81960691eb4b389Eba9E95);\n\n    uint256 public bonusMultiplier = 1;\n    uint256 public tokenPerBlock;\n    uint256 public totalAllocPoint;\n    uint256 public startBlock;\n    uint256 public totalTokensInPools;\n    bool isIgnoringVesting;\n\n    event StartStaking(uint256 timestamp);\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyRewardWithdraw(uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event UpdatePoolAlloc(uint256 indexed pid, uint256 previous, uint256 newValue);\n    event UpdateRewardRate(uint256 previous, uint256 newValue);\n    event AddPool(address token, uint256 allocPoint, uint256 vesting);\n    event UpdateMultiplier(uint256 previous, uint256 newValue);\n\n    modifier ignoreVesting() {\n        isIgnoringVesting = true;\n        _;\n        isIgnoringVesting = false;\n    }\n\n    constructor() {\n        // Set value in the future because start will be triggered manually by calling startStaking().\n        startBlock = block.number + 28800 * 365;\n        tokenPerBlock = 1 * 10**18;\n    }\n\n    // Public\n\n    function remainingRewards() external view returns (uint256) {\n        return IMRTL.balanceOf(address(this)) - totalTokensInPools;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    function userCountAtPool(uint256 _pid) external view returns (uint256) {\n        return poolUsers[_pid].length();\n    }\n\n    function userAddress(uint256 _pid, uint256 _index) external view returns (address) {\n        return poolUsers[_pid].at(_index);\n    }\n\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        return (_to - _from) * bonusMultiplier;\n    }\n\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n\n        uint256 accTokenPerShare = pool.accTokenPerShare;\n        uint256 tokenSupply = pool.totalStakedAmount;\n        uint256 lastRewardBlock = pool.lastRewardBlock;\n\n        if (block.number \u003e lastRewardBlock \u0026\u0026 tokenSupply != 0) {\n            uint256 multiplier = getMultiplier(lastRewardBlock, block.number);\n            uint256 reward = multiplier * tokenPerBlock * pool.allocPoint / totalAllocPoint;\n            accTokenPerShare += reward * 1e12 / tokenSupply;\n        }\n\n        return user.amount * accTokenPerShare / 1e12 - user.rewardDebt + failedRewardsCache[_pid][_user];\n    }\n\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\n            PoolInfo storage pool = poolInfo[pid];\n            if (block.number \u003c= pool.lastRewardBlock) {\n                continue;\n            }\n\n            if (pool.totalStakedAmount == 0 || pool.allocPoint == 0) {\n                pool.lastRewardBlock = block.number;\n                continue;\n            }\n\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 reward = multiplier * tokenPerBlock * pool.allocPoint / totalAllocPoint;\n\n            pool.accTokenPerShare += reward * 1e12 / pool.totalStakedAmount;\n            pool.lastRewardBlock = block.number;\n        }\n    }\n\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number \u003c= pool.lastRewardBlock) {\n            return;\n        }\n\n        if (pool.totalStakedAmount == 0 || pool.allocPoint == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 reward = multiplier * tokenPerBlock * pool.allocPoint / totalAllocPoint;\n\n        pool.accTokenPerShare += reward * 1e12 / pool.totalStakedAmount;\n        pool.lastRewardBlock = block.number;\n    }\n\n    function compound(uint256 _pid) external ignoreVesting {\n        PoolInfo storage pool = poolInfo[_pid];\n        require(pool.stakingToken == IMRTL, \"Can compound only IMRTL\");\n\n        uint256 userBalanceBefore = pool.stakingToken.balanceOf(msg.sender);\n        withdraw(_pid, 0);\n        uint256 claimed = pool.stakingToken.balanceOf(msg.sender) - userBalanceBefore;\n        deposit(_pid, claimed);\n    }\n\n    function deposit(uint256 _pid, uint256 _amount) public {\n        require(block.number \u003e= startBlock, \"Can not deposit before farm start\");\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        updatePool(_pid);\n\n        if (user.amount \u003e 0) {\n            uint256 failedRewards = failedRewardsCache[_pid][msg.sender];\n            uint256 pending = user.amount * pool.accTokenPerShare / 1e12 - user.rewardDebt + failedRewards;\n            if(pending \u003e 0) {\n                safeTokenTransfer(_pid, msg.sender, pending);\n            }\n        } else if (_amount \u003e 0) {\n            poolUsers[_pid].add(msg.sender);\n        }\n\n        if (_amount \u003e 0) {\n            user.amount += _amount;\n            pool.totalStakedAmount += _amount;\n\n            if (!isIgnoringVesting) {\n                user.vestingStartTime = block.timestamp;\n            }\n            if (address(pool.stakingToken) == address(IMRTL)) {\n                totalTokensInPools += _amount;\n            }\n\n            pool.stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n        }\n\n        user.rewardDebt = user.amount * pool.accTokenPerShare / 1e12;\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount \u003e= _amount, \"User amount not enough\");\n\n        updatePool(_pid);\n\n        uint256 failedRewards = failedRewardsCache[_pid][msg.sender];\n        uint256 pending = user.amount * pool.accTokenPerShare / 1e12 - user.rewardDebt + failedRewards;\n        if(pending \u003e 0) {\n            safeTokenTransfer(_pid, msg.sender, pending);\n        }\n\n        if (_amount \u003e 0) {\n            require(block.timestamp - user.vestingStartTime \u003e= pool.vestingPeriod, \"Tokens are vested\");\n\n            user.amount -= _amount;\n            pool.totalStakedAmount -= _amount;\n\n            if (address(pool.stakingToken) == address(IMRTL)) {\n                totalTokensInPools -= _amount;\n            }\n            if (user.amount == 0) {\n                poolUsers[_pid].remove(msg.sender);\n            }\n\n            pool.stakingToken.safeTransfer(msg.sender, _amount);\n        }\n\n        user.rewardDebt = user.amount * pool.accTokenPerShare / 1e12;\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    function emergencyWithdraw(uint256 _pid) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.totalStakedAmount -= amount;\n\n        if (address(pool.stakingToken) == address(IMRTL)) {\n            totalTokensInPools -= amount;\n        }\n        if (block.timestamp - user.vestingStartTime \u003c pool.vestingPeriod \u0026\u0026 pool.allocPoint \u003e 0) {\n            amount = amount * 85 / 100;\n        }\n\n        pool.stakingToken.safeTransfer(msg.sender, amount);\n\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    // Private\n\n    function safeTokenTransfer(uint256 _pid, address _to, uint256 _amount) private {\n        uint256 balance = IMRTL.balanceOf(address(this));\n        if (balance \u003e totalTokensInPools) {\n            uint256 rewardBalance = balance - totalTokensInPools;\n            if (_amount \u003e= rewardBalance) {\n                failedRewardsCache[_pid][_to] = _amount - rewardBalance;\n                IMRTL.transfer(_to, rewardBalance);\n            } else if (_amount \u003e 0) {\n                failedRewardsCache[_pid][_to] = 0;\n                IMRTL.transfer(_to, _amount);\n            }\n        } else {\n            failedRewardsCache[_pid][_to] = _amount;\n        }\n    }\n\n    // Maintenance\n\n    function emergencyRewardWithdraw() external onlyOwner {\n        uint256 rewardAmount = IMRTL.balanceOf(address(this)) - totalTokensInPools;\n        IMRTL.transfer(msg.sender, rewardAmount);\n        emit EmergencyRewardWithdraw(rewardAmount);\n    }\n\n    function startStaking() external onlyOwner {\n        require(block.number \u003c startBlock, \"Farm started already\");\n\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\n            PoolInfo storage pool = poolInfo[pid];\n            pool.lastRewardBlock = block.number;\n        }\n\n        startBlock = block.number;\n        emit StartStaking(startBlock);\n    }\n\n    function addPool(\n        IERC20 _stakingToken,\n        uint256 _allocPoint,\n        uint256 _vestingPeriod,\n        bool _withUpdate\n    ) external onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number \u003e startBlock ? block.number : startBlock;\n        totalAllocPoint += _allocPoint;\n        poolInfo.push(\n            PoolInfo({\n                stakingToken: _stakingToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accTokenPerShare: 0,\n                totalStakedAmount: 0,\n                vestingPeriod: _vestingPeriod\n            })\n        );\n\n        emit AddPool(address(_stakingToken), _allocPoint, _vestingPeriod);\n    }\n\n    function updatePool(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n        emit UpdatePoolAlloc(_pid, poolInfo[_pid].allocPoint, _allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    function setMultiplier(uint256 _multiplier) external onlyOwner {\n        emit UpdateMultiplier(bonusMultiplier, _multiplier);\n        bonusMultiplier = _multiplier;\n    }\n\n    function updateRewardRate(uint256 _tokenPerBlock) external onlyOwner {\n        massUpdatePools();\n        emit UpdateRewardRate(tokenPerBlock, _tokenPerBlock);\n        tokenPerBlock = _tokenPerBlock;\n    }\n}\n"}}