// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.6.0 <0.9.0;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "add err");
    return c;
  }

  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a, "sub err");
    return a - b;
  }

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(a == 0 || c / a == b, "mul err");
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0, "div 0 err");
    uint256 c = a / b;
    require(a == b * c + a % b, "div err"); // There is no case in which this doesn't hold
    return c;
  }

}


/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
interface ERC20Basic {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
  function allowance(address owner, address spender) external view returns (uint256);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract Ownable {
    address private _owner;

    // event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        _owner = msg.sender;
        // emit OwnershipTransferred(address(0), _owner);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Returns true if the caller is the current owner.
     */
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    // function renounceOwnership() public onlyOwner {
    //     emit OwnershipTransferred(_owner, address(0));
    //     _owner = address(0);
    // }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        // emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WHT() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}



// pragma solidity >=0.6.2;

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract TxRule is Ownable{
    using SafeMath for uint256;

    address public cTokenAddress = 0x142Df7B797ba87a95D5C4aa16991Ee46f20c0D64;  
    uint256 conditionNum = 50*(10**18); // main  
    uint256[][] teamPersonMinCounts = [[11, 10], [50, 12], [100, 15]]; // main
    // uint256 conditionNum = 50*(10**14); // test
    // uint256[][] teamPersonMinCounts = [[2, 1], [4, 3], [6, 5]]; // test

    address public buyBackAddress;
    address public _teamAddress;
    mapping(address => bool) public txWhiteList;
    mapping(address => bool) public swapWhiteList;
    bool public needGas = true; 
    bool public needApproveTx = true; 
    bool public swapStartOn = true; 
    uint256 public allTotalGas = 0;
    uint256 public allUsdtGas = 0;
    uint256 public lastAllTotalGas = 0;
    uint256 public sendGasMin = 1 * (10**16);
    uint256 oneToken = (10**18);
    uint256 public allTotalRewardToken = 0;
    mapping(address => bool) public noNeedRedUsersDic;

    function addNoNeedRedUsers(address _address) public {
        require(msg.sender == swpDAppAddress || isOwner(), "account error");
        noNeedRedUsersDic[_address] = true;
    }
    function subNoNeedRedUsers(address _address) public {
        require(msg.sender == swpDAppAddress || isOwner(), "account error");
        delete noNeedRedUsersDic[_address];
    }

    function updateConditionNum(uint256 _value) public {
        require(msg.sender == swpDAppAddress || isOwner(), "account error");
        require(_value>0, "_value is 0");
        conditionNum = _value;
    }
    function needGasOnOff(bool _bo) public {
        require(msg.sender == swpDAppAddress || isOwner(), "account error");
        needGas = _bo;
    }
    function needApproveTxOnOff(bool _bo) external onlyOwner {
        needApproveTx = _bo;
    }
    
    function updateSendGasMin(uint256 _value) external onlyOwner {
        require(_value>0, "_value is 0");
        sendGasMin = _value;
    }
    function addTxWhiteLists(address[] memory _addressList) external onlyOwner {
        for (uint256 i=0; i < _addressList.length; i++) {
            txWhiteList[_addressList[i]] = true;
        } 
    }
    function subTxWhiteList(address _address) external onlyOwner {
        delete txWhiteList[_address];
    }
    function addSwapWhiteLists(address[] memory _addressList) external onlyOwner {
        for (uint256 i=0; i < _addressList.length; i++) {
            swapWhiteList[_addressList[i]] = true;
        } 
    }
    function subSwapWhiteList(address _address) external onlyOwner {
        delete swapWhiteList[_address];
    }
    function offSwapStartOn() external onlyOwner {
        swapStartOn = false;
    }
  
    struct UserStruct {
        bool notCanSuperior;
        address superAddress;
        uint256 zhituiCount;
        uint256 teamCount;
        uint256 level;
        uint256 lastTxTime;
        bool haveSwap; //是否买卖过币，才
        uint8 valid; //是否有效满足队员的要求
        uint256 tokenTotalReward;
        bool isExist; //是否收到过币，才给算分红
    }
    mapping(address => UserStruct) public users;
    uint256 public allUserNumber = 1;
    address[] public haveSwapUsers;
    uint256 public haveSwapCount = 0;
    // address[][] lpLevelUsers;


    SwpDApp swpDApp;
    address public swpDAppAddress;
    
    function setSwpDApp(address _address) external onlyOwner {
        swpDAppAddress = _address;
        swpDApp = SwpDApp(_address);
        txWhiteList[_address] = true;
        noNeedRedUsersDic[_address] = true;
        swpDApp.initUserAccSushi(_teamAddress);
    }

    function setUniswapV2PairCtoken(address _address) external onlyOwner {
        uniswapV2PairCtoken = _address;
        txWhiteList[uniswapV2PairCtoken] = true;
        noNeedRedUsersDic[uniswapV2PairCtoken] = true;
    }
    
    function userLevel(address _user) public view returns (uint256) {
        UserStruct memory user = users[_user];
        return(user.level);
    }
    function userSuper(address _user) public view returns (address) {
        UserStruct memory user = users[_user];
        return(user.superAddress);
    }
    function userReward(address _user) public view returns (uint256) {
        UserStruct memory user = users[_user];
        return(user.tokenTotalReward); 
    }
    function userIsExist(address _user) public view returns (bool) {
        UserStruct memory user = users[_user];
        return(user.isExist); 
    }
    function userNotCanSuperior(address _user) public view returns (bool) {
        UserStruct memory user = users[_user];
        return(user.notCanSuperior); 
    }

    /**
     * swap 
    */ 
    // address usdt = 0xa71EdC38d189767582C38A3145b5873052c3e47a;
    // address swap = 0xED7d5F38C79115ca12fe6C0041abb22F0A06C300; // heco
    address usdt = 0x55d398326f99059fF775485246999027B3197955;
    address swap = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // bsc
    // address swap = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // eth
    ERC20Basic public usdtToken = ERC20Basic(usdt);
    
    // address public uniswapV2Pair = address(0x01);
    IUniswapV2Router02 public immutable uniswapV2Router;
    address public uniswapV2Pair;
    address public uniswapV2PairCtoken;
    ERC20Basic public lpTokenContract;

    constructor () { 
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(swap); 
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), usdt); //getPair, createPair
        uniswapV2PairCtoken = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(cTokenAddress, usdt); //getPair, createPair

        uniswapV2Router = _uniswapV2Router;
        lpTokenContract = ERC20Basic(uniswapV2Pair);
        // lpLevelUsers[0][0] = address(0x0);
    }
}


interface SwpDApp  {
    function initUserAccSushi(address _user) external;
    function swapTokensToUsdt(uint256 tokenAmount) external;
    function mdexLpToUsdtAmount() external returns(uint256);
    function mdexPrice(uint256 _amount) external returns(uint256);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract StandardToken is ERC20Basic,TxRule {
  using SafeMath for uint256;

  event AddRelate(address indexed user, address indexed superUser);
  event UpdateUserLpLevel(address indexed user, uint256 level);

  mapping(address => uint256) balances;
  mapping (address => mapping (address => uint256)) internal allowed;

  uint256 _totalSupply;
  uint256 public _maxTotalGas;

  /**
   * @dev Fix for the ERC20 short address attack.
   */
  modifier onlyPayloadSize(uint size) {
    if(msg.data.length < size + 4) {
      revert();
    }
    _;
  }
    
    function swapTokensToUsdt(uint256 tokenAmount, address receiveAddress) private {
        // generate the uniswap pair path of token -> WHT
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdt;

        // approve(address(uniswapV2Router), tokenAmount);
        allowed[address(this)][address(uniswapV2Router)] = tokenAmount*10;
        emit Approval(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            receiveAddress,
            block.timestamp
        );
    }
    function inTtransfer(address _from, address _to, uint256 _value) private {
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(_from, _to, _value);
    }

    uint256[] public tokenRewardLevelRatio = [10,5,5,5,5];
    function handleSubGasBalance(UserStruct storage _baseUser, address _to, uint256 _value) private{
        uint256 gas = _value.mul(15).div(100);
        allTotalGas = allTotalGas.add(gas);
        
        inTtransfer(_to, address(this), gas);
        inTtransfer(address(this), swpDAppAddress, gas.sub(2*gas.div(15)));
        if ((balances[address(0x0)]+balances[address(0x01)]) < _maxTotalGas) {
            inTtransfer(address(this), address(0x0), gas.div(15));
        } else {
            inTtransfer(address(this), buyBackAddress, gas.div(15));
        }
        inTtransfer(address(this), buyBackAddress, gas.div(15));
        uint256 tokenGas = gas.mul(3).div(15);
        allTotalRewardToken = allTotalRewardToken.add(tokenGas);
        uint256 index = 0;
        address _superUser = _baseUser.superAddress;
        while (_superUser != address(0x0) && index < 5) {
            UserStruct storage superUser = users[_superUser];
            superUser.tokenTotalReward = superUser.tokenTotalReward.add(tokenGas.mul(tokenRewardLevelRatio[index]).div(30));
            _superUser = superUser.superAddress;
            index++;
        }
        uint256 usdtGas = gas.mul(10).div(15);
        allUsdtGas = allUsdtGas.add(usdtGas);
    }
    function subUserLpLevel(UserStruct storage user, address _user) private {
        uint256 level = 10;
        if (user.level == 1 && (user.teamCount < teamPersonMinCounts[0][0] || user.zhituiCount < teamPersonMinCounts[0][1])) {
            level = 0;
        } else if (user.level == 2 && (user.teamCount < teamPersonMinCounts[1][0] || user.zhituiCount < teamPersonMinCounts[1][1])) {
            level = 1;
        } else if (user.level == 3 && (user.teamCount < teamPersonMinCounts[2][0] || user.zhituiCount < teamPersonMinCounts[2][1])) {
            level = 2;
        }
        if (level < 10) {
            user.level = level;
            emit UpdateUserLpLevel(_user, level);
        }
    }
    function setUserLpLevel(UserStruct storage user, address _user, uint8 _isAdd) private {
        if (_isAdd == 0) {
            subUserLpLevel(user, _user);
            return;
        }
        uint256 level = 0;
        if (user.level == 0 && user.teamCount >= teamPersonMinCounts[0][0] && user.zhituiCount >= teamPersonMinCounts[0][1]) {
            level = 1;
        } else if (user.level == 1 && user.teamCount >= teamPersonMinCounts[1][0] && user.zhituiCount >= teamPersonMinCounts[1][1]) {
            level = 2;
        } else if (user.level == 2 && user.teamCount >= teamPersonMinCounts[2][0] && user.zhituiCount >= teamPersonMinCounts[2][1]) {
            level = 3;
        }
        if (level > 0) {
            user.level = level;
            // lpLevelUsers[level].push(_user);
            emit UpdateUserLpLevel(_user, level);
        }
    }

    function judgeGreaterMinAmount(address _user, uint256 _tokenPrice) public view returns (bool){
        //  && lpTokenContract.balanceOf(_user).mul(_usdtAmount).div(oneToken) >= conditionNum
        if (_user != uniswapV2Pair && _user != address(0x0) && _user != swpDAppAddress && balances[_user].mul(_tokenPrice).div(oneToken) >= conditionNum) {
            return true;
        }
        return false;
    }

    function judgeUserValid(address _from, address _to, UserStruct storage fromUser, UserStruct storage toUser) private {
        uint8 fromIsBig = 0;
        uint256 tokenPrice = swpDApp.mdexPrice(oneToken);
        // uint256 usdtAmount = swpDApp.mdexLpToUsdtAmount(); 
        if (judgeGreaterMinAmount(_from, tokenPrice)) {
            fromIsBig = 1;
        }
        if (fromIsBig+fromUser.valid == 1) {
            fromUser.valid = fromIsBig;
            setTeamUserLevel(fromUser.superAddress, fromIsBig);
        }

        uint8 toIsBig = 0;
        if (judgeGreaterMinAmount(_to, tokenPrice)) {
            toIsBig = 1;
        }
        if (toIsBig+toUser.valid == 1) {
            toUser.valid = toIsBig;
            setTeamUserLevel(toUser.superAddress, toIsBig);
        }
    }
    function setTeamUserLevel(address _superUser, uint8 _isAdd) private {
        // 需要有效
        if (_superUser != address(0x0)) {
            UserStruct storage superUser = users[_superUser];
            if (_isAdd == 1) {
                superUser.zhituiCount = superUser.zhituiCount+1;
            } else if (superUser.zhituiCount > 0){
                superUser.zhituiCount = superUser.zhituiCount-1;
            }
            
            uint256 index = 0;
            while (_superUser != address(0x0) && index < 5) {
                if (_isAdd == 1) {
                    superUser.teamCount = superUser.teamCount+1;
                } else if (superUser.teamCount > 0){
                    superUser.teamCount = superUser.teamCount-1;
                }
                setUserLpLevel(superUser, _superUser, _isAdd);

                _superUser = superUser.superAddress;
                superUser = users[_superUser];
                index++;
            }
        }
    }
    function handleTrasfer() public {
        uint256 subAmount = allUsdtGas.sub(lastAllTotalGas);
        if (subAmount > sendGasMin) {
            lastAllTotalGas = allUsdtGas;
            swpDApp.swapTokensToUsdt(subAmount);
        }
    }
    function bindSuperAddress(address _user, address _superUser) public {
        require(msg.sender == swpDAppAddress || isOwner(), "account error");
        UserStruct storage baseUser = users[_user];
        bindSuper(baseUser, _user, _superUser);
    }
    function bindSuper(UserStruct storage baseUser, address _user, address _superUser) private {
        if (!baseUser.notCanSuperior) {
            baseUser.notCanSuperior = true;
            if (_superUser != uniswapV2Pair) {
                baseUser.superAddress = _superUser;
                emit AddRelate(_user, _superUser);
            }
        }
    }
    function _transfer(address _from, address _to, uint256 _value) private {
        require(_value <= balances[_from], "_from balance low");
        if (_from == address(this) || _from == swpDAppAddress || _from == uniswapV2PairCtoken) {
            inTtransfer(_from, _to, _value);
            return;
        }
        if (swapStartOn && _from == uniswapV2Pair) {
            require(swapWhiteList[_to], "you not is swapWhiteList");
        }

        UserStruct storage toUser = users[_to];
        UserStruct storage fromUser = users[_from];
        if (_value >= sendGasMin) {
            bindSuper(toUser, _to, _from);
        }
        
        if (!toUser.isExist) {
            toUser.isExist = true;
            swpDApp.initUserAccSushi(_to);
            allUserNumber = allUserNumber+1;
        } else if (!txWhiteList[_to]) {
            uint256 lpBalance = lpTokenContract.balanceOf(_to);
            if (lpBalance == 0) {
                swpDApp.initUserAccSushi(_to);
            }
        }

        inTtransfer(_from, _to, _value);

        if (needGas) {
            address gasAddress = address(0x0);
            if (_from == uniswapV2Pair) {
                gasAddress = _to;
            }
            if (_to == uniswapV2Pair) {
                gasAddress = _from;
            }

            if (gasAddress != address(0x0)) {
                UserStruct storage baseUser = users[gasAddress];
                if (!baseUser.haveSwap && !noNeedRedUsersDic[gasAddress]) {
                    baseUser.haveSwap = true;
                    haveSwapCount = haveSwapCount+1;
                    haveSwapUsers.push(gasAddress);
                } 
                if (!txWhiteList[gasAddress]) {
                    require(block.timestamp - baseUser.lastTxTime >= 60, "time not enough 1 minute");
                    baseUser.lastTxTime = block.timestamp;
                    handleSubGasBalance(baseUser, _to,_value);
                }
            } 
            if (_to != uniswapV2Pair && _from != uniswapV2Pair) {
                handleTrasfer();
            }
            judgeUserValid(_from, _to, fromUser, toUser);
        } 
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        allowed[owner][spender] = amount;
        emit Approval(owner, spender, amount);

        if (!txWhiteList[owner] && needApproveTx) { 
            handleTrasfer();
        }
    }
    
    
  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) override returns (bool) {
    // require(_to != address(0));
    _transfer(msg.sender, _to, _value);
    return true;
  }

  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {
    require(_to != address(0), "to do not is 0x0");
    require(_value <= allowed[_from][msg.sender], "_from allowed low");
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    
    _transfer(_from, _to, _value);
    return true;
  }
  
  function balanceOf(address _owner) public view override returns (uint256 balance) {
    return balances[_owner];
  }
  
  /**
  * @dev total number of tokens in existence
  */
  function totalSupply() public view override returns (uint256) {
    return _totalSupply;
  }
  
  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) override returns (bool) {
    _approve(msg.sender, _spender, _value);
    return true;
  }
    
  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view override returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public onlyPayloadSize(2 * 32) returns (bool) {
    require(_spender != address(0));
    // require(allowed[msg.sender][_spender].add(_addedValue) <= balances[msg.sender]);
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  /**
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(address _spender, uint _subtractedValue) public onlyPayloadSize(2 * 32) returns (bool) {
    require(_spender != address(0));
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}


/**
 * @title SimpleToken
 * @dev ERC20 Token, where all tokens are pre-assigned to the creator.
 * Note they can later distribute these tokens as they wish using `transfer` and other
 * `StandardToken` functions.
 */
contract AMyToken is StandardToken {
    string public constant symbol = "SWP";  
    string public constant name = "SWP";
    uint8 public constant decimals = 18;

    uint256 public constant INITIAL_SUPPLY = 2100 * (10 ** 4) * (10 ** uint256(decimals));
    // uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));

    /**
    * @dev Constructor that gives msg.sender all of existing tokens.
    */
    constructor() {
        _totalSupply = INITIAL_SUPPLY;
        _teamAddress = 0x9D253De564E7c82526CC3A19De13CeF3764527d0;
        buyBackAddress = 0x997014736d66Ab4B150A3Db0F96bBF8A1ded296A;

        UserStruct storage teamAddressUser = users[_teamAddress];
        teamAddressUser.isExist = true;
        teamAddressUser.notCanSuperior = true;
        _maxTotalGas = INITIAL_SUPPLY - 21000 * (10**18);

        txWhiteList[msg.sender] = true;
        txWhiteList[_teamAddress] = true;
        txWhiteList[buyBackAddress] = true;
        noNeedRedUsersDic[_teamAddress] = true;
        noNeedRedUsersDic[buyBackAddress] = true;
        txWhiteList[address(this)] = true;
        txWhiteList[uniswapV2Pair] = true;
        txWhiteList[uniswapV2PairCtoken] = true;
        txWhiteList[address(0x0)] = true;
        txWhiteList[address(0x1)] = true;
        noNeedRedUsersDic[address(this)] = true;
        noNeedRedUsersDic[uniswapV2Pair] = true;
        noNeedRedUsersDic[uniswapV2PairCtoken] = true;
        noNeedRedUsersDic[address(0x0)] = true;
        noNeedRedUsersDic[address(0x1)] = true;

        address[6] memory configUsers = [address(0x0), address(0x01), address(this), uniswapV2Pair, _teamAddress, buyBackAddress];
        for (uint256 i; i < configUsers.length; i++) {
            swapWhiteList[configUsers[i]] = true;
        }
        setSystemAddressAndBalance(_teamAddress, INITIAL_SUPPLY);
    }
    
    function setSystemAddressAndBalance(address _user, uint256 _value) private {
        txWhiteList[_user] = true;
        balances[_user] = _value;
        emit Transfer(address(0x0), _user, _value);
    }
}