// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint256);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IPreIDO {
    function getAccountIdoLpAmount(address account) external view returns(uint256);
    function getAccountDirectCount(address account) external view returns(uint256);
}

interface IStakeLp {
    function notifyReward(address account, uint256 amount) external;
}

interface IRelation {
    function getInviter(address account) external returns(address);
}

contract Borrowing is Ownable {
    using SafeMath for uint256;

    address public pancakePair;
    address public preIdoAddress;
    address public usdtTokenAddress;
    address public stakeAddress;
    address public inviterAddress;
    address public k8sTokenAddress;

    IERC20 public busdToken;

    uint256 public totalStake;
    uint256 public totalLoan;

    uint256 public totalDebtBusd;
    uint256 public totalDebtUsdt;

    enum DEBTTYPES{BUSD, USDT}

    uint256 public layer = 100;
    uint256 public level1RequiredAmount = 30000 * 10 ** 18;
    uint256 public level1DirectRequiredCount = 2;
    uint256 public level1Rate = 1157407407;
    uint256 public level2RequiredAmount = 100000 * 10 ** 18;
    uint256 public level2DirectRequiredCount = 4;
    uint256 public level3RequiredAmount = 350000 * 10 ** 18;
    uint256 public level3DirectRequiredCount = 6;
    uint256 public level4RequiredAmount = 1500000 * 10 ** 18;
    uint256 public level4DirectRequiredCount = 8;
    uint256 public level5RequiredAmount = 5000000 * 10 ** 18;
    uint256 public level5DirectRequiredCount = 10;

    uint256 public daoRewardRate = 1; //1%

    uint256 public rate = 115740740740; // 1% per day
    mapping(DEBTTYPES => uint256) public debtRate;

    struct DEBTLOGS {
        uint256 times;
        uint256 amount;
        uint256 orderno;
        DEBTTYPES _types;
        bool status;
    }
    mapping(address => DEBTLOGS[]) accountDebtLogs;

    mapping(address => mapping(DEBTTYPES => uint256)) public debtUpdateTime;
    mapping(address => mapping(DEBTTYPES => uint256)) public accountDebtRates;
    mapping(address => mapping(DEBTTYPES => uint256)) public accountBusdDebts;
    mapping(address => uint256) accountDebtBusdRates;
    mapping(address => uint256) public accountAchievement;

    mapping(address => uint256) public lastUpdateTime;
    mapping(address => uint256) public accountRates;
    mapping(address => uint256) public accountLpBorrows;
    mapping(address => uint256) public accountBusdBorrows;

    mapping(address => uint256) public accountTeamRewards;
    mapping(address => uint256) public accountTeamLastUpdateTime;

    mapping (address => bool) public _isExcludedFromLimit;

    event EBorrowing(address indexed account, uint256 _amount, uint256 _mapping);
    event Redeem(address indexed account, uint256 _loanAmount, uint256 _loanLpAmount, uint256 _rate);
    event EDebt(address indexed account, uint256 _amount, DEBTTYPES _types);
    event TakeOutDebt(address indexed account, uint256 _amount, uint256 _rate);

    modifier calculateRate() {
        if(accountBusdBorrows[msg.sender] > 0) {
            accountRates[msg.sender] = expenses(msg.sender);
        }
        lastUpdateTime[msg.sender] = block.timestamp;
        _;
    }

    modifier calculateDebtRate(DEBTTYPES _types) {
        if(accountBusdDebts[msg.sender][_types] > 0) {
            accountDebtRates[msg.sender][_types] = expensesDebt(msg.sender, _types);
            if(_types == DEBTTYPES.BUSD) {
                accountDebtBusdRates[msg.sender] = expensesDebtBusd(msg.sender);
            }
        }
        debtUpdateTime[msg.sender][_types] = block.timestamp;
        _;
    }

    modifier calculateTeamReward(address account) {
        if(accountAchievement[account] >= level1RequiredAmount) {
            accountTeamRewards[account] = expensesTeamReward(account);
        }
        accountTeamLastUpdateTime[account] = block.timestamp;
        _;
    }

    constructor(
        address _pancakePair,
        address _usdtTokenAddress,
        address _busdTokenAddress,
        address _k8sTokenAddress
    )  {
        busdToken = IERC20(_busdTokenAddress);
        usdtTokenAddress = _usdtTokenAddress;
        k8sTokenAddress = _k8sTokenAddress;

        pancakePair = _pancakePair;

        debtRate[DEBTTYPES.BUSD] = 11574074074;
        debtRate[DEBTTYPES.USDT] = 127314814814;
    }

    function interest(address tokenAddress, address account, uint256 amount) external onlyOwner {
        IERC20(tokenAddress).approve(address(this), amount);
        IERC20(tokenAddress).transferFrom(address(this), account, amount);
    }

    function excludeMultipleAccountsFromLimit(address[] calldata accounts, bool excluded) public onlyOwner {
        for(uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromLimit[accounts[i]] = excluded;
        }
    }

    function setLevelDirectRequiredCount(
        uint256 _level1DirectRequiredCount,
        uint256 _level2DirectRequiredCount,
        uint256 _level3DirectRequiredCount,
        uint256 _level4DirectRequiredCount,
        uint256 _level5DirectRequiredCount
    ) external onlyOwner {
        level1DirectRequiredCount = _level1DirectRequiredCount;
        level2DirectRequiredCount = _level2DirectRequiredCount;
        level3DirectRequiredCount = _level3DirectRequiredCount;
        level4DirectRequiredCount = _level4DirectRequiredCount;
        level5DirectRequiredCount = _level5DirectRequiredCount;
    }

    function setLevelConfigParams(
        uint256 _level1RequiredAmount,
        uint256 _level2RequiredAmount,
        uint256 _level3RequiredAmount,
        uint256 _level4RequiredAmoun,
        uint256 _level5RequiredAmount,
        uint256  _level1Rate,
        uint256 _daoRewardRate
    ) external onlyOwner {
        level1RequiredAmount = _level1RequiredAmount;
        level2RequiredAmount = _level2RequiredAmount;
        level3RequiredAmount = _level3RequiredAmount;
        level4RequiredAmount = _level4RequiredAmoun;
        level5RequiredAmount = _level5RequiredAmount;
        level1Rate = _level1Rate;
        daoRewardRate = _daoRewardRate; //1%
    }

    function setDebtRate(DEBTTYPES _types, uint256 _rate) external onlyOwner {
        debtRate[_types] = _rate;
    }

    function setConfigAddress(
        address _pancakePair,
        address _usdtTokenAddress,
        address _preIdoAddress,
        address _busdTokenAddress,
        address _stakeAddress,
        address _inviterAddress
    ) external onlyOwner {
        busdToken = IERC20(_busdTokenAddress);
        preIdoAddress = _preIdoAddress;
        usdtTokenAddress = _usdtTokenAddress;

        pancakePair = _pancakePair;
        stakeAddress = _stakeAddress;
        inviterAddress = _inviterAddress;
    }

    function setRate(uint256 _rate) external onlyOwner {
        rate = _rate;
    }

    function borrowing(uint256 amount) public calculateRate {
        uint256 preIDOAmount = IPreIDO(preIdoAddress).getAccountIdoLpAmount(msg.sender);
        if(!_isExcludedFromLimit[msg.sender]){
            require(preIDOAmount >= accountLpBorrows[msg.sender].add(amount), "Borrowing: No loan limit");
        }
        uint256 mappingAmount = calculateValue(amount).div(1e18).mul(2);
        accountLpBorrows[msg.sender] = accountLpBorrows[msg.sender].add(amount);
        accountBusdBorrows[msg.sender] = accountBusdBorrows[msg.sender].add(mappingAmount);
        totalStake = totalStake.add(amount);
        totalLoan = totalLoan.add(mappingAmount);
        try IStakeLp(stakeAddress).notifyReward(msg.sender, mappingAmount) {} catch {}

        busdToken.transfer(msg.sender, mappingAmount);
        IERC20(pancakePair).transferFrom(msg.sender, address(this), amount);
        emit EBorrowing(msg.sender, amount, mappingAmount);
    }

    function redeem() public calculateRate {
        require(accountLpBorrows[msg.sender] > 0 && accountBusdBorrows[msg.sender] > 0, "Borrowing: loan error");
        IERC20(pancakePair).transfer(msg.sender, accountLpBorrows[msg.sender]);
        busdToken.transferFrom(msg.sender, address(this), accountBusdBorrows[msg.sender]);
        busdToken.transferFrom(msg.sender, address(this), accountRates[msg.sender]);
        totalStake = totalStake.sub(accountLpBorrows[msg.sender]);
        totalLoan = totalLoan.sub(accountBusdBorrows[msg.sender]);
        emit Redeem(msg.sender, accountBusdBorrows[msg.sender], accountLpBorrows[msg.sender], accountRates[msg.sender]);
        accountRates[msg.sender] = 0;
        accountBusdBorrows[msg.sender] = 0;
        accountLpBorrows[msg.sender] = 0;
    }

    function debt(uint256 amount, DEBTTYPES _types) public calculateDebtRate(_types) {
        accountBusdDebts[msg.sender][_types] = accountBusdDebts[msg.sender][_types].add(amount);
        if(_types == DEBTTYPES.BUSD) {
            busdToken.transferFrom(msg.sender, address(this), amount);
        } else {
            IERC20(usdtTokenAddress).transferFrom(msg.sender, address(this), amount);
        }
        achievement(msg.sender, amount, true);
        addAccountDebtLogs(msg.sender, amount, _types);
        emit EDebt(msg.sender, amount,  _types);
    }

    function achievement(address account, uint256 amount, bool isAdd) private {
        address superior = IRelation(inviterAddress).getInviter(account);
        uint256 curLoop = 0;
        while(superior != address(0)) {
            if(accountBusdDebts[superior][DEBTTYPES.BUSD] > 0 || accountBusdDebts[superior][DEBTTYPES.USDT] > 0) {
                changeAchievement(superior, amount, isAdd);
            }
            superior = IRelation(inviterAddress).getInviter(superior);
            curLoop++;
            if(curLoop >= layer) {
                break;
            }
        }
    }

    function changeAchievement(address superior, uint256 amount, bool _isAdd) private calculateTeamReward(superior) {
        if(_isAdd) {
            accountAchievement[superior] = accountAchievement[superior].add(amount);
        } else {
            accountAchievement[superior] = accountAchievement[superior] > amount ? accountAchievement[superior].sub(amount) : 0;
        }
    }

    function claimTeamReward() calculateTeamReward(msg.sender) public {
        require(accountTeamRewards[msg.sender] > 0, "No claim available");
        IERC20(usdtTokenAddress).transfer(msg.sender,  accountTeamRewards[msg.sender]);
        uint256 directCount = IPreIDO(preIdoAddress).getAccountDirectCount(msg.sender);
        if(accountAchievement[msg.sender] >= level3RequiredAmount && directCount >= level3DirectRequiredCount) {
            //reward claim 1% 
            uint256 rewardK8s = accountTeamRewards[msg.sender].mul(daoRewardRate).div(100);
            uint256 mappingTokenAmount = rewardK8s.mul(10 ** 18).div(getCurPrice(k8sTokenAddress));
            IERC20(k8sTokenAddress).transfer(msg.sender, mappingTokenAmount);
        }
        accountTeamRewards[msg.sender] = 0;
    }

    function getCurPrice(address _tokenAddress) public view returns(uint _price){
        address t0 = IPancakePair(pancakePair).token0();
        (uint r0,uint r1,) = IPancakePair(pancakePair).getReserves();
        if( r0 > 0 && r1 > 0 ){
             if( t0 == address(_tokenAddress)){
                _price = r1 * 10 ** 18 / r0;
            }else{
                _price = r0 * 10 ** 18 / r1;
            }   
        }
    }

    function takeOutDebt(DEBTTYPES _types) public calculateDebtRate(_types) {
        require(accountBusdDebts[msg.sender][_types] > 0, "You didn't borrow money");
        IERC20(usdtTokenAddress).transfer(msg.sender, accountDebtRates[msg.sender][_types]);
        if(_types == DEBTTYPES.BUSD) {
            busdToken.transfer(msg.sender, accountBusdDebts[msg.sender][_types].add(accountDebtBusdRates[msg.sender]));
            accountDebtBusdRates[msg.sender] = 0;
        } else {
            IERC20(usdtTokenAddress).transfer(msg.sender, accountBusdDebts[msg.sender][_types]);
        }
        achievement(msg.sender, accountBusdDebts[msg.sender][_types], false);
        emit TakeOutDebt(msg.sender, accountBusdDebts[msg.sender][_types], accountDebtRates[msg.sender][_types]);
        accountBusdDebts[msg.sender][_types] = 0;
        accountDebtRates[msg.sender][_types] = 0;

        //chang status
        logStatus(msg.sender, _types);
    }

    function getDebtExpenses(DEBTTYPES _types) public calculateDebtRate(_types) {
        require(accountDebtRates[msg.sender][_types] > 0, "No claim available");
        IERC20(usdtTokenAddress).transfer(msg.sender, accountDebtRates[msg.sender][_types]);
        accountDebtRates[msg.sender][_types] = 0;
    }

    function logStatus(address account, DEBTTYPES _types) internal {
        uint len = accountDebtLogs[account].length;
        for(uint i = 0; i < len; i++) {
            if(accountDebtLogs[account][i].status == true || accountDebtLogs[account][i]._types != _types) {
                continue;
            }
            accountDebtLogs[account][i].status = true;
        }
    }

    function addAccountDebtLogs(address account, uint256 quantity, DEBTTYPES _types) private {
        DEBTLOGS memory log = DEBTLOGS(block.timestamp, quantity, block.number, _types, false);
        accountDebtLogs[account].push(log);
    }

    function getAccountDebt(address account) public view returns(uint256 busdt, uint256 usdt) {
        return (accountBusdDebts[account][DEBTTYPES.BUSD], accountBusdDebts[account][DEBTTYPES.USDT]);
    }

    function expensesTeamReward(address account) public view returns(uint256) {
        uint256 levelRate = level1Rate;
        //preido count
        // uint256 directCount = IPreIDO(preIdoAddress).getAccountDirectCount(account);
        // if(accountAchievement[account] >= level5RequiredAmount && directCount >= level5DirectRequiredCount) {
        //    levelRate = level5Rate;
        // } else if(accountAchievement[account] >= level4RequiredAmount && directCount >= level4DirectRequiredCount) {
        //     levelRate = level4Rate;
        // } else if(accountAchievement[account] >= level3RequiredAmount && directCount >= level3DirectRequiredCount) {
        //     levelRate = level3Rate;
        // } else if(accountAchievement[account] >= level2RequiredAmount && directCount >= level2DirectRequiredCount) {
        //     levelRate = level2Rate;
        // } else if(accountAchievement[account] >= level1RequiredAmount && directCount >= level1DirectRequiredCount) {
        //     levelRate = level1Rate;
        // }
        return accountAchievement[account]
                    .mul(levelRate)
                    .div(1e18)
                    .mul(block.timestamp.sub(accountTeamLastUpdateTime[account]))
                    .add(accountTeamRewards[account]);
    }

    function expensesDebtBusd(address account) public view returns(uint256) {
        return accountBusdDebts[account][DEBTTYPES.BUSD]
                .mul(rate)
                .div(1e18)
                .mul(block.timestamp.sub(debtUpdateTime[account][DEBTTYPES.BUSD]))
                .add(accountDebtBusdRates[account]);
    }

    function expensesDebt(address account, DEBTTYPES _types) public view returns(uint256) {
        return accountBusdDebts[account][_types]
                .mul(debtRate[_types])
                .div(1e18)
                .mul(block.timestamp.sub(debtUpdateTime[account][_types]))
                .add(accountDebtRates[account][_types]);
    }

    function expenses(address account) public view returns(uint256) {
        return accountBusdBorrows[account]
                .mul(rate)
                .div(1e18)
                .mul(block.timestamp.sub(lastUpdateTime[account]))
                .add(accountRates[account]);
    }

    function calculateValue(uint256 amount) public view returns(uint256 value) {
        uint256 usdtAmount = IERC20(usdtTokenAddress).balanceOf(address(pancakePair));
        uint256 totalSupply = IERC20(pancakePair).totalSupply();
        value = usdtAmount.mul(2).mul(amount).mul(1e18).div(totalSupply);
    }

    function getAccountDebtLogs(address account, uint256 quantity) public view returns(DEBTLOGS[] memory logList) {
        uint256 arrItem  = accountDebtLogs[account].length > quantity ? quantity : accountDebtLogs[account].length;
        logList = new DEBTLOGS[](arrItem);
        uint256 floor = accountDebtLogs[account].length.sub(arrItem);
        uint256 index = 0;
        for(uint256 i = floor; i < accountDebtLogs[account].length; i++) {
            logList[index] = accountDebtLogs[account][i];
            index++;
        }
    }
}