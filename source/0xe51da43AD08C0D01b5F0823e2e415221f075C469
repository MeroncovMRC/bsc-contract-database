{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a \u0026 b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator \u003e prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always \u003e= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator \u0026 (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\u0027s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\u0027t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up \u0026\u0026 mulmod(x, y, denominator) \u003e 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\u0027s \"Hacker\u0027s Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) \u003c= a \u003c 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k \u003c a \u003c= 2**(k+1)` â†’ `2**(k/2) \u003c= sqrt(a) \u003c 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x \u003e\u003e 128 \u003e 0) {\n            x \u003e\u003e= 128;\n            result \u003c\u003c= 64;\n        }\n        if (x \u003e\u003e 64 \u003e 0) {\n            x \u003e\u003e= 64;\n            result \u003c\u003c= 32;\n        }\n        if (x \u003e\u003e 32 \u003e 0) {\n            x \u003e\u003e= 32;\n            result \u003c\u003c= 16;\n        }\n        if (x \u003e\u003e 16 \u003e 0) {\n            x \u003e\u003e= 16;\n            result \u003c\u003c= 8;\n        }\n        if (x \u003e\u003e 8 \u003e 0) {\n            x \u003e\u003e= 8;\n            result \u003c\u003c= 4;\n        }\n        if (x \u003e\u003e 4 \u003e 0) {\n            x \u003e\u003e= 4;\n            result \u003c\u003c= 2;\n        }\n        if (x \u003e\u003e 2 \u003e 0) {\n            result \u003c\u003c= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\u0027s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) \u003e\u003e 1;\n            result = (result + a / result) \u003e\u003e 1;\n            result = (result + a / result) \u003e\u003e 1;\n            result = (result + a / result) \u003e\u003e 1;\n            result = (result + a / result) \u003e\u003e 1;\n            result = (result + a / result) \u003e\u003e 1;\n            result = (result + a / result) \u003e\u003e 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up \u0026\u0026 result * result \u003c a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"pacMan_Contract.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./Math.sol\";\n\ncontract pacman_contract is Context, Ownable {\n    using SafeMath for uint256;\n    mapping (address =\u003e uint256) private hatcheryMiners;\n    mapping (address =\u003e uint256) private claimedGhosts;\n    mapping (address =\u003e uint256) private lastHatch;\n    mapping (address =\u003e Rewards) public rewards;\n    mapping (address =\u003e uint256) public rewardsTier1;\n    mapping (address =\u003e uint256) public rewardsTier2;\n    mapping (address =\u003e uint256) public rewardsTier3;\n    mapping (address =\u003e uint256) public rewardsTier4;\n    uint256 private constant GHOSTS_TO_HATCH_1MINERS = 1000 *1 days /15;\n    uint256 public marketGhosts = 100000*GHOSTS_TO_HATCH_1MINERS;\n    uint256 private constant PSN = 10000;\n    uint256 private constant PSNH = 5000;\n    uint256 private constant PROJECTFEES = 25;\n    uint256 private constant ADDFEE1 = 50;\n    uint256 private constant ADDFEE2 = 100;\n    uint256 private constant ADDFEE3 = 150;\n    uint256 private constant ADDFEE4 = 200;\n    uint256 private constant ADDFEE5 = 250;\n    uint256 private constant ADDFEE6 = 300;\n    uint256 private constant ADDFEE7 = 350;\n    uint256 private constant ADDFEE8 = 400;\n    uint256 private constant ADDFEE9 = 450;\n    uint256 private constant ADDFEE10 = 500;\n    bool public antiwhalestatus = true;\n    address payable private immutable projectAddress;\n    bool private initialized = false;\n    struct Rewards {\n        address referrer;\n        address upline1;\n        address upline2;\n        address upline3;\n        address upline4;\n    }\n    event NewUpline(address referal, address indexed upline1, address indexed upline2, address indexed upline3, address upline4);\n    event Initialize(bool status);\n    event Antiwhale(bool status);\n\n    constructor() {\n        projectAddress = payable(msg.sender);\n    }\n\n    receive() external payable{}\n    function initializeMarket() external onlyOwner {\n        initialized = true;\n        emit Initialize(true);\n    }\n    function buyGhosts(address referrer) external payable {\n        require(initialized, \"Not initialized\");\n        require(referrer != msg.sender,\"User can\u0027t refer themselves\");\n        uint256 ghostsBought = calculateBoughtGhosts(msg.value, SafeMath.sub(address(this).balance, msg.value));\n        ghostsBought = SafeMath.sub(ghostsBought, projectFee(ghostsBought));\n        uint256 fee = projectFee(msg.value);\n        projectAddress.transfer(fee);\n        claimedGhosts[msg.sender] = SafeMath.add(claimedGhosts[msg.sender], ghostsBought);\n        address _upline1 = rewards[referrer].referrer;\n        address _upline2 =  rewards[_upline1].upline1;\n        address _upline3 =  rewards[_upline2].upline1; \n        address _upline4 =  rewards[_upline3].upline1;\n        rewards[msg.sender] = Rewards(msg.sender, referrer, _upline2, _upline3, _upline4);\n        emit NewUpline(msg.sender, referrer, _upline2, _upline3, _upline4);\n        hatchGhosts();\n    }\n    function hatchGhosts() public {\n        require(initialized, \"Not initialized\");\n        uint256 ghostsUsed = getMyGhosts(msg.sender);\n        require(ghostsUsed \u003e 0, \"You do not have Ghosts\");\n        uint256 newMiners = SafeMath.div(ghostsUsed, GHOSTS_TO_HATCH_1MINERS);\n        hatcheryMiners[msg.sender] = SafeMath.add(hatcheryMiners[msg.sender],newMiners);\n        claimedGhosts[msg.sender] = 0;\n        lastHatch[msg.sender] = block.timestamp;\n        address upline1reward = rewards[msg.sender].upline1;\n        address upline2reward = rewards[msg.sender].upline2;\n        address upline3reward = rewards[msg.sender].upline3;\n        address upline4reward = rewards[msg.sender].upline4;\n    \n        if(upline1reward != address(0)) {\n            claimedGhosts[upline1reward] = SafeMath.add(claimedGhosts[upline1reward],SafeMath.div(SafeMath.mul(ghostsUsed, 6), 100));\n            rewardsTier1[upline1reward] = SafeMath.add(rewardsTier1[upline1reward],SafeMath.div(SafeMath.mul(ghostsUsed, 6), 100));\n        }\n        if(upline2reward != address(0)) {\n            claimedGhosts[upline2reward] = SafeMath.add(claimedGhosts[upline2reward],SafeMath.div(SafeMath.mul(ghostsUsed, 3), 100));\n            rewardsTier2[upline2reward] = SafeMath.add(rewardsTier2[upline2reward],SafeMath.div(SafeMath.mul(ghostsUsed, 3), 100));\n        }\n        if(upline3reward != address(0)) {\n            claimedGhosts[upline3reward] = SafeMath.add(claimedGhosts[upline3reward],SafeMath.div(SafeMath.mul(ghostsUsed, 2), 100));\n            rewardsTier3[upline3reward] = SafeMath.add(rewardsTier3[upline3reward],SafeMath.div(SafeMath.mul(ghostsUsed, 2), 100));\n        }\n        if(upline4reward != address(0)) {\n            claimedGhosts[upline4reward] = SafeMath.add(claimedGhosts[upline4reward],SafeMath.div(SafeMath.mul(ghostsUsed, 1), 100));\n            rewardsTier4[upline4reward] = SafeMath.add(rewardsTier4[upline4reward],SafeMath.div(SafeMath.mul(ghostsUsed, 1), 100));\n        }\n        marketGhosts = SafeMath.add(marketGhosts, SafeMath.div(ghostsUsed, 5));\n    }\n    function sellGhosts() external {\n        require(initialized, \"Not initialized\");\n        uint256 hasGhosts = getMyGhosts(msg.sender);\n        uint256 ghostValue = calculateSoldGhosts(hasGhosts);\n        uint256 fee = projectFee(ghostValue);\n        uint256 balance = address(this).balance;\n        uint256 anti = SafeMath.mul(1000,ghostValue);\n        uint256 antiwhale = SafeMath.div(anti,balance);\n        claimedGhosts[msg.sender] = 0;\n        lastHatch[msg.sender] = block.timestamp;\n        marketGhosts = SafeMath.add(marketGhosts, hasGhosts);\n        projectAddress.transfer(fee);\n    if(antiwhalestatus) {\n        if(antiwhale \u003c 10) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,fee));\n        }\n        else if(antiwhale \u003e 10 \u0026\u0026 antiwhale \u003c= 20) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE1))));\n                }\n        else if(antiwhale \u003e 20 \u0026\u0026 antiwhale \u003c= 30) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE2))));\n                }\n        else if(antiwhale \u003e 30 \u0026\u0026 antiwhale \u003c= 40) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE3))));\n                }\n        else if(antiwhale \u003e 40 \u0026\u0026 antiwhale \u003c= 50) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE4))));\n                }\n        else if(antiwhale \u003e 50 \u0026\u0026 antiwhale \u003c= 60) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE5))));\n                }\n        else if(antiwhale \u003e 60 \u0026\u0026 antiwhale \u003c= 70) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE6))));\n                }\n        else if(antiwhale \u003e 70 \u0026\u0026 antiwhale \u003c= 80) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE7))));\n                }\n         else if(antiwhale \u003e 80 \u0026\u0026 antiwhale \u003c= 90) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE8))));\n                }  \n        else if(antiwhale \u003e 90 \u0026\u0026 antiwhale \u003c= 100) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE9))));\n                }\n        else if(antiwhale \u003e 100) {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,SafeMath.add(fee,addFees(ghostValue,ADDFEE10))));\n                }\n        } else {\n            payable (msg.sender).transfer(SafeMath.sub(ghostValue,fee));\n        }\n    }\n    function ghostRewards(address addr) external view returns(uint256) {\n        uint256 hasGhosts = getMyGhosts(addr);\n        uint256 ghostValue = calculateSoldGhosts(hasGhosts);\n        return ghostValue;\n    }\n    function calculateTrade(uint256 rt, uint256 rs, uint256 bs) private pure returns(uint256) {\n        return SafeMath.div(SafeMath.mul(PSN, bs), SafeMath.add(PSNH, SafeMath.div(SafeMath.add(SafeMath.mul(PSN, rs), SafeMath.mul(PSNH, rt)), rt)));\n    }\n    function setAntiwhale(bool status) external onlyOwner {\n        antiwhalestatus = status;\n        emit Antiwhale(status);\n    }\n    function calculateSoldGhosts(uint256 ghosts) public view returns(uint256) {\n        return calculateTrade(ghosts, marketGhosts, address(this).balance);\n    }\n    function calculateBoughtGhosts(uint256 bnb, uint256 contractBalance) public view returns(uint256) {\n        return calculateTrade(bnb, contractBalance, marketGhosts);\n    }\n    function calculateGhostBuySimple(uint256 bnb) external view returns(uint256) {\n        return calculateBoughtGhosts(bnb, address(this).balance);\n    }\n    function projectFee(uint256 amount) private pure returns(uint256) {\n        return SafeMath.div(SafeMath.mul(amount, PROJECTFEES), 1000);\n    }\n    function addFees (uint256 amount, uint256 addfee) private pure returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,addfee), 1000);\n    }\n    function getBalance() external view returns(uint256) {\n        return address(this).balance;\n    }\n    function getMyMiners(address addr) external view returns(uint256) {\n        return hatcheryMiners[addr];\n    }\n    function getMyGhosts(address addr) public view returns(uint256) {\n        return SafeMath.add(claimedGhosts[addr], getGhostsSinceLastHatch(addr));\n    }\n    function getGhostsSinceLastHatch(address addr) public view returns(uint256) {\n        uint256 secondsPassed = Math.min(GHOSTS_TO_HATCH_1MINERS, SafeMath.sub(block.timestamp, lastHatch[addr]));\n        return SafeMath.mul(secondsPassed, hatcheryMiners[addr]);\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b \u003e 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b \u003c= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c \u003e= a);\n    return c;\n  }\n}"}}