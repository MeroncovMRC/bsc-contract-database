// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.0;

// File: @openzeppelin/contracts/utils/introspection/IERC165.sol

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol

/**
 * @dev Required interface of an ERC1155 compliant contract, as defined in the
 * https://eips.ethereum.org/EIPS/eip-1155[EIP].
 *
 * _Available since v3.1._
 */
interface IERC1155 is IERC165 {
    /**
     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.
     */
    event TransferSingle(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256 id,
        uint256 value
    );

    /**
     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all
     * transfers.
     */
    event TransferBatch(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256[] ids,
        uint256[] values
    );

    /**
     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to
     * `approved`.
     */
    event ApprovalForAll(
        address indexed account,
        address indexed operator,
        bool approved
    );

    /**
     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.
     *
     * If an {URI} event was emitted for `id`, the standard
     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value
     * returned by {IERC1155MetadataURI-uri}.
     */
    event URI(string value, uint256 indexed id);

    /**
     * @dev Returns the amount of tokens of token type `id` owned by `account`.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function balanceOf(address account, uint256 id)
        external
        view
        returns (uint256);

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)
        external
        view
        returns (uint256[] memory);

    /**
     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,
     *
     * Emits an {ApprovalForAll} event.
     *
     * Requirements:
     *
     * - `operator` cannot be the caller.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.
     *
     * See {setApprovalForAll}.
     */
    function isApprovedForAll(address account, address operator)
        external
        view
        returns (bool);

    /**
     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.
     * - `from` must have a balance of tokens of type `id` of at least `amount`.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes calldata data
    ) external;

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) external;
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

// File: @openzeppelin/contracts/utils/Context.sol

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/MithrilMine.sol

//Mithril Mine for BSC created by redWizard
//Modified from NonFungibleFarm by CodinMaster

/**
 * User Flow:
 * NFT's are referenced in this contract, having some Price as `points` associated to them.
 * In order to claim an NFT, the user must have sufficient `points` to reach Price threshold.
 * To increase `points` balance, user must deposit lp tokens to this contract.
 * `points` balance increases dynamically with each passing second allowing user to Farm NFTs!
 *
 */

interface IMine {
    function mint(
        address,
        uint256,
        uint256
    ) external;
}

contract MithrilMine is Ownable {
    struct UserInfo {
        uint256 amount; // current staked
        uint256 lastUpdateAt; // unix timestamp for last details update (when pointsDebt calculated)
        uint256 pointsDebt; // total points collected before latest deposit
    }

    struct NFTInfo {
        address contractAddress;
        uint256 id; // NFT id
        uint256 price; // points required to claim NFT
    }

    uint256 public emissionRate; // points generated per Stake token per second staked
    uint256 public stakeUnitSize = 500 ether; // number of stake Tokens needed per tier (* 10**18)
    uint256 public currentTokenStaked; // counter for all User staked tokens
    bool public depositsPaused; // pause ability to deposit token
    IERC20 lpToken; // token being staked

    NFTInfo[] public nftInfo;
    mapping(address => UserInfo) public userInfo;

    constructor(uint256 _emissionRate, IERC20 _lpToken) {
        emissionRate = _emissionRate;
        lpToken = _lpToken;
    }

    function addNFT(
        address contractAddress, // Only ERC-1155 NFT Supported!
        uint256 id,
        uint256 price
    ) external onlyOwner {
        nftInfo.push(
            NFTInfo({contractAddress: contractAddress, id: id, price: price})
        );
    }

    function deposit(uint256 _amount) external {
        require(!depositsPaused, "Deposits paused");
        require(_amount > 1 ether, "Deposit too low"); // require deposit of more than 1 "ether" // 1 * 10**18

        lpToken.transferFrom(msg.sender, address(this), _amount);

        UserInfo storage user = userInfo[msg.sender];

        // already deposited before
        if (user.amount != 0) {
            user.pointsDebt = pointsBalance(msg.sender);
        }

        //adjust deposit amount for 4% Mithril fee
        uint256 adjustedAmount = _amount -
            ((_amount / 1 ether) * 40000000000000000);

        user.amount += adjustedAmount;
        user.lastUpdateAt = block.timestamp;

        currentTokenStaked += adjustedAmount;
    }

    // claim nft if points threshold reached
    function claim(uint256 _nftIndex, uint256 _quantity) public {
        NFTInfo storage nft = nftInfo[_nftIndex];
        require(
            pointsBalance(msg.sender) >= nft.price * _quantity,
            "Insufficient Points"
        );

        UserInfo storage user = userInfo[msg.sender];

        // deduct points
        user.pointsDebt = pointsBalance(msg.sender) - (nft.price * _quantity);
        user.lastUpdateAt = block.timestamp;

        // mint nft
        IMine(nft.contractAddress).mint(msg.sender, nft.id, _quantity);
    }

    function claimMultiple(
        uint256[] calldata _nftIndex,
        uint256[] calldata _quantity
    ) external {
        require(_nftIndex.length == _quantity.length, "Incorrect array length");
        for (uint64 i = 0; i < _nftIndex.length; i++) {
            claim(_nftIndex[i], _quantity[i]);
        }
    }

    function withdraw(uint256 _amount) public {
        UserInfo storage user = userInfo[msg.sender];
        require(user.amount >= _amount, "Insufficient staked");

        // update userInfo
        user.pointsDebt = pointsBalance(msg.sender);
        user.amount -= _amount;
        user.lastUpdateAt = block.timestamp;

        currentTokenStaked -= _amount;

        lpToken.transfer(msg.sender, _amount);
    }

    // claim main NFT and withdraw all LP tokens
    function exit(uint256 _nftIndex) external {
        withdraw(userInfo[msg.sender].amount);

        NFTInfo storage nft = nftInfo[_nftIndex];
        uint256 availableToClaim = pointsBalance(msg.sender) / nft.price;
        claim(nft.id, availableToClaim);
    }

    function pointsBalance(address userAddress) public view returns (uint256) {
        UserInfo memory user = userInfo[userAddress];
        return user.pointsDebt + _unDebitedPoints(user);
    }

    function _unDebitedPoints(UserInfo memory user)
        internal
        view
        returns (uint256)
    {
        return
            (block.timestamp - user.lastUpdateAt) *
            (emissionRate * (user.amount / stakeUnitSize));
    }

    function nftCount() public view returns (uint256) {
        return nftInfo.length;
    }

    // Only owner
    function changeLpToken(address _newAddress) public onlyOwner {
        lpToken = IERC20(_newAddress);
    }

    function changeEmissionRate(uint256 _newRate) public onlyOwner {
        emissionRate = _newRate;
    }

    function changeStakeUnitSize(uint256 _newUintSize) public onlyOwner {
        stakeUnitSize = _newUintSize;
    }

    function toggleDepositPause() public onlyOwner returns (bool) {
        depositsPaused = !depositsPaused;
        return depositsPaused;
    }

    function changeNftPrice(uint256 _nftIndex, uint256 _newPointsPrice)
        public
        onlyOwner
    {
        NFTInfo storage nft = nftInfo[_nftIndex];
        nft.price = _newPointsPrice;
    }

    function reflectionWithdraw(uint256 _amount, address _toAddress)
        public
        onlyOwner
    {
        uint256 mineBalance = lpToken.balanceOf(address(this));
        uint256 tokenAvailable = mineBalance - currentTokenStaked;
        require(_amount <= tokenAvailable, "Cannot withdraw that amount");

        lpToken.transfer(_toAddress, _amount);
    }
}