// SPDX-License-Identifier: MIT

pragma solidity 0.8.9;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

interface IStaking {
    function deposit() external payable;
}

contract Distribution is Ownable {
    address public nftPoolAddress;
    address public stakingPoolAddress;
    uint256 public percentNft = 50;
    uint256 public percentReward = 50;


    event SendToNFT(uint256 amount);
    event SendDividends(uint256 balanceRewardToken);

    constructor(
      address _nftPoolAddress,
      address _stakingPoolAddress
    ) {
      nftPoolAddress = _nftPoolAddress;
      stakingPoolAddress = _stakingPoolAddress;
    }
    
    receive() external payable {
      uint256 amount = address(this).balance;
      if(percentNft > 0){
        uint256 amountNft = (amount * percentNft) / 100;
        sendBNB(payable(nftPoolAddress), amountNft);
        amount -= amountNft;
        emit SendToNFT(amountNft);  
      }
      if(percentReward > 0){
        IStaking(stakingPoolAddress).deposit{value: amount}();
      }
    }

    function sendBNB(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }


    function updateNftAddress(address _newAddress) external onlyOwner {
      require(nftPoolAddress != _newAddress,"Already to that address");
      nftPoolAddress = _newAddress;
    }

    function updateStakingAddress(address _newAddress) external onlyOwner {
      require(stakingPoolAddress != _newAddress,"Already to that address");
      stakingPoolAddress = _newAddress;
    }



    function forwardStuckToken(address token) external onlyOwner{
        if (token == address(0x0)) {
            payable(msg.sender).transfer(address(this).balance);
            return;
        }
        IERC20 ERC20token = IERC20(token);
        uint256 balance = ERC20token.balanceOf(address(this));
        ERC20token.transfer(msg.sender, balance);
    }
}