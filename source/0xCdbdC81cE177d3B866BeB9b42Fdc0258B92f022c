{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\n// Address库\nlibrary Address {\n    // 利用extcodesize判断一个地址是否为合约地址\n    function isContract(address account) internal view returns (bool) {\n        uint size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n}\n"},"ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// by 0xAA\npragma solidity ^0.8.4;\n\nimport \"./IERC165.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./Address.sol\";\nimport \"./String.sol\";\n\ncontract ERC721 is IERC721, IERC721Metadata{\n    using Address for address; // 使用Address库，用isContract来判断地址是否为合约\n    using Strings for uint256; // 使用String库，\n\n    // Token名称\n    string public override name;\n    // Token代号\n    string public override symbol;\n    // tokenId 到 owner address 的持有人映射\n    mapping(uint =\u003e address) private _owners;\n    // address 到 持仓数量 的持仓量映射\n    mapping(address =\u003e uint) private _balances;\n    // tokenID 到 授权地址 的授权映射\n    mapping(uint =\u003e address) private _tokenApprovals;\n    //  owner地址。到operator地址 的批量授权映射\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\n\n    /**\n     * 构造函数，初始化`name` 和`symbol` .\n     */\n    constructor(string memory name_, string memory symbol_) {\n        name = name_;\n        symbol = symbol_;\n    }\n\n    // 实现IERC165接口supportsInterface\n    function supportsInterface(bytes4 interfaceId)\n        external\n        pure\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId;\n    }\n\n    // 实现IERC721的balanceOf，利用_balances变量查询owner地址的balance。\n    function balanceOf(address owner) external view override returns (uint) {\n        require(owner != address(0), \"owner = zero address\");\n        return _balances[owner];\n    }\n\n    // 实现IERC721的ownerOf，利用_owners变量查询tokenId的owner。\n    function ownerOf(uint tokenId) public view override returns (address owner) {\n        owner = _owners[tokenId];\n        require(owner != address(0), \"token doesn\u0027t exist\");\n    }\n\n    // 实现IERC721的isApprovedForAll，利用_operatorApprovals变量查询owner地址是否将所持NFT批量授权给了operator地址。\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    // 实现IERC721的setApprovalForAll，将持有代币全部授权给operator地址。调用_setApprovalForAll函数。\n    function setApprovalForAll(address operator, bool approved) external override {\n        _operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    // 实现IERC721的getApproved，利用_tokenApprovals变量查询tokenId的授权地址。\n    function getApproved(uint tokenId) external view override returns (address) {\n        require(_owners[tokenId] != address(0), \"token doesn\u0027t exist\");\n        return _tokenApprovals[tokenId];\n    }\n     \n    // 授权函数。通过调整_tokenApprovals来，授权 to 地址操作 tokenId，同时释放Approval事件。\n    function _approve(\n        address owner,\n        address to,\n        uint tokenId\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    // 实现IERC721的approve，将tokenId授权给 to 地址。条件：to不是owner，且msg.sender是owner或授权地址。调用_approve函数。\n    function approve(address to, uint tokenId) external override {\n        address owner = _owners[tokenId];\n        require(\n            msg.sender == owner || _operatorApprovals[owner][msg.sender],\n            \"not owner nor approved for all\"\n        );\n        _approve(owner, to, tokenId);\n    }\n\n    // 查询 spender地址是否可以使用tokenId（需要是owner或被授权地址）\n    function _isApprovedOrOwner(\n        address owner,\n        address spender,\n        uint tokenId\n    ) private view returns (bool) {\n        return (spender == owner ||\n            _tokenApprovals[tokenId] == spender ||\n            _operatorApprovals[owner][spender]);\n    }\n\n    /*\n     * 转账函数。通过调整_balances和_owner变量将 tokenId 从 from 转账给 to，同时释放Transfer事件。\n     * 条件:\n     * 1. tokenId 被 from 拥有\n     * 2. to 不是0地址\n     */\n    function _transfer(\n        address owner,\n        address from,\n        address to,\n        uint tokenId\n    ) private {\n        require(from == owner, \"not owner\");\n        require(to != address(0), \"transfer to the zero address\");\n\n        _approve(owner, address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n    \n    // 实现IERC721的transferFrom，非安全转账，不建议使用。调用_transfer函数\n    function transferFrom(\n        address from,\n        address to,\n        uint tokenId\n    ) external override {\n        address owner = ownerOf(tokenId);\n        require(\n            _isApprovedOrOwner(owner, msg.sender, tokenId),\n            \"not owner nor approved\"\n        );\n        _transfer(owner, from, to, tokenId);\n    }\n\n    /**\n     * 安全转账，安全地将 tokenId 代币从 from 转移到 to，会检查合约接收者是否了解 ERC721 协议，以防止代币被永久锁定。调用了_transfer函数和_checkOnERC721Received函数。条件：\n     * from 不能是0地址.\n     * to 不能是0地址.\n     * tokenId 代币必须存在，并且被 from拥有.\n     * 如果 to 是智能合约, 他必须支持 IERC721Receiver-onERC721Received.\n     */\n    function _safeTransfer(\n        address owner,\n        address from,\n        address to,\n        uint tokenId,\n        bytes memory _data\n    ) private {\n        _transfer(owner, from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"not ERC721Receiver\");\n    }\n\n    /**\n     * 实现IERC721的safeTransferFrom，安全转账，调用了_safeTransfer函数。\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint tokenId,\n        bytes memory _data\n    ) public override {\n        address owner = ownerOf(tokenId);\n        require(\n            _isApprovedOrOwner(owner, msg.sender, tokenId),\n            \"not owner nor approved\"\n        );\n        _safeTransfer(owner, from, to, tokenId, _data);\n    }\n\n    // safeTransferFrom重载函数\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint tokenId\n    ) external override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /** \n     * 铸造函数。通过调整_balances和_owners变量来铸造tokenId并转账给 to，同时释放Transfer事件。铸造函数。通过调整_balances和_owners变量来铸造tokenId并转账给 to，同时释放Transfer事件。\n     * 这个mint函数所有人都能调用，实际使用需要开发人员重写，加上一些条件。\n     * 条件:\n     * 1. tokenId尚不存在。\n     * 2. to不是0地址.\n     */\n    function _mint(address to, uint tokenId) internal virtual {\n        require(to != address(0), \"mint to zero address\");\n        require(_owners[tokenId] == address(0), \"token already minted\");\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    // 销毁函数，通过调整_balances和_owners变量来销毁tokenId，同时释放Transfer事件。条件：tokenId存在。\n    function _burn(uint tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n        require(msg.sender == owner, \"not owner of token\");\n\n        _approve(owner, address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    // _checkOnERC721Received：函数，用于在 to 为合约的时候调用IERC721Receiver-onERC721Received, 以防 tokenId 被不小心转入黑洞。\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            return\n                IERC721Receiver(to).onERC721Received(\n                    msg.sender,\n                    from,\n                    tokenId,\n                    _data\n                ) == IERC721Receiver.onERC721Received.selector;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * 实现IERC721Metadata的tokenURI函数，查询metadata。\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_owners[tokenId] != address(0), \"Token Not Exist\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length \u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * 计算{tokenURI}的BaseURI，tokenURI就是把baseURI和tokenId拼接在一起，需要开发重写。\n     * BAYC的baseURI为ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/ \n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n}\n"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC165标准接口, 详见\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * 合约可以声明支持的接口，供其他合约检查\n *\n */\ninterface IERC165 {\n    /**\n     * @dev 如果合约实现了查询的`interfaceId`，则返回true\n     * 规则详见：https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     *\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev ERC721标准接口.\n */\ninterface IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function approve(address to, uint256 tokenId) external;\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC721Metadata {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}"},"IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// ERC721接收者接口：合约必须实现这个接口来通过安全转账接收ERC721\ninterface IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}"},"String.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.4;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}"},"WTFApe.sol":{"content":"// SPDX-License-Identifier: MIT\n// by 0xAA\npragma solidity ^0.8.4;\n\nimport \"./ERC721.sol\";\n\ncontract WTFApe is ERC721{\n    uint public MAX_APES = 10000; // 总量\n\n    // 构造函数\n    constructor(string memory name_, string memory symbol_) ERC721(name_, symbol_){\n    }\n\n    //BAYC的baseURI为ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/ \n    function _baseURI() internal pure override returns (string memory) {\n        return \"ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/\";\n    }\n    \n    // 铸造函数\n    function mint(address to, uint tokenId) external {\n        require(tokenId \u003e= 0 \u0026\u0026 tokenId \u003c MAX_APES, \"tokenId out of range\");\n        _mint(to, tokenId);\n    }\n}"}}