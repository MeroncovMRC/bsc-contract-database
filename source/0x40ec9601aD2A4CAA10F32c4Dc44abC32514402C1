/**
 * CTAI Crypto Trading AI Token PRESALE
Supply: 1.000.000.000.000
Name: Crypto Trading AI
Symbol: CTAI

START: MAY 15 2023
END: MAY 30 2023

PRICE ON PRESALE: 0,0000002803 USD
PRICE ON LAUNCH:  0,00000043 USD


An exciting and innovative concept in the field of cryptocurrency trading is the idea of
the Crypto Trading AI Bot. This intelligent bot allows users to achieve higher profits by
executing automated trades on the Binance Smart Chain (BSC) network. The bot operates as a smart contract, continuously fed with real-time contracts, purchases, and
sales to learn and maximize its efficiency.

https://t.me/crypto_trading_ai

https://cryptotradingai.network

  */
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

contract Presale {
    address public owner;
    address public token;
    uint256 public price;
    uint256 public hardCap;
    uint256 public softCap;
    uint256 public totalSold;
    bool public isPresaleActive;

    mapping(address => uint256) public balances;

    event TokensPurchased(address indexed buyer, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }

    constructor(address _token, uint256 _price, uint256 _hardCap, uint256 _softCap) {
        owner = msg.sender;
        token = _token;
        price = _price;
        hardCap = _hardCap;
        softCap = _softCap;
        isPresaleActive = true;
    }

    function buyTokens() external payable {
        require(isPresaleActive, "Presale is not active.");
        require(msg.value >= price, "Insufficient payment amount.");

        uint256 tokensToBuy = msg.value / price;
        require(totalSold + tokensToBuy <= hardCap, "Exceeded hard cap.");

        balances[msg.sender] += tokensToBuy;
        totalSold += tokensToBuy;

        emit TokensPurchased(msg.sender, tokensToBuy);
    }

    function withdrawFunds() external onlyOwner {
        //require(!isPresaleActive, "Presale must be inactive.");

        uint256 balance = address(this).balance;
        require(balance > 0, "No funds to withdraw.");

        (bool success, ) = owner.call{value: balance}("");
        require(success, "Failed to withdraw funds.");
    }

    function endPresale() external onlyOwner {
        require(isPresaleActive, "Presale is not active.");
        require(totalSold >= softCap, "Did not reach soft cap.");

        isPresaleActive = false;
    }
    
    function editPrice(uint newPrice) public onlyOwner {
        price = newPrice;
    }
}