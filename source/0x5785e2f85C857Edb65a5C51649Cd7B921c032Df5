{"BeastKing.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./EnumerableSet.sol\";\r\n\r\n\r\ninterface IWBNB {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\n\r\ncontract DividendHelper {\r\n    address private constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    address private immutable _ca;\r\n\r\n    constructor() {\r\n        _ca = msg.sender;\r\n    }\r\n\r\n    function withdraw() external {\r\n        IWBNB(WBNB).withdraw(IWBNB(WBNB).balanceOf(address(this)));\r\n        payable(_ca).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\n\r\ncontract BeastKing is Context {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint8 private constant DECIMALS = 9;\r\n    uint256 private constant TOTAL_SUPPLY = 10**13 * 10**DECIMALS;\r\n    string private _symbol;\r\n    string private _name;\r\n\r\n    address private constant MARKETING_WALLET = 0x496433c5C0b814d52DEb581e2C3222b55539240C;\r\n    address private constant BUYBACK_WALLET = 0x22DCCA2E933F7a04b8E034eDE4BFF5f1CfF36507;\r\n    address private constant DEAD_WALLET = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address private constant LP_PAIR = 0xB16B5F7969239392813B8729d03d94Fc81526416;\r\n\r\n    uint256 private constant MIN_TAX_FOR_SWAPPING = 5 * 10**16;\r\n    uint256 private constant MIN_TOKENS_FOR_DIVIDEND = 10**7 * 10**DECIMALS;\r\n    uint256 private constant LIMIT_BUY_AMOUNT = 1500 * 10**8 * 10**DECIMALS;\r\n\r\n    uint256 private _totalDividend;\r\n    uint256 private _limitBuyUntil;\r\n    bool private _lock;\r\n\r\n    DividendHelper private immutable _dividendHelper;\r\n    uint256 private constant DIVIDEND_PERIOD = 3600;\r\n\r\n    uint256 public gasForDividend;\r\n    uint256 public gasForSingleDividend;\r\n    uint256 public currentDividendIndex;\r\n    EnumerableSet.AddressSet private _holders;\r\n    mapping(address =\u003e uint256) public timeForNextDividend;\r\n\r\n    constructor() {\r\n        _name = \"Beast King\";\r\n        _symbol = \"BKING\";\r\n\r\n        _balances[BUYBACK_WALLET] = TOTAL_SUPPLY;\r\n\r\n        gasForDividend = 400000;\r\n        gasForSingleDividend = 10000;\r\n\r\n        _dividendHelper = new DividendHelper();\r\n\r\n        emit Transfer(address(0), BUYBACK_WALLET, TOTAL_SUPPLY);\r\n    }\r\n\r\n    function getOwner() external pure returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external pure returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"Beast King: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"Beast King: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    modifier onlyTeam() {\r\n        require(msg.sender == BUYBACK_WALLET || msg.sender == MARKETING_WALLET, \"Beast King: you have no right to do this\");\r\n        _;\r\n    }\r\n\r\n    function setGasForDividend(uint256 newValue) external onlyTeam {\r\n        require(newValue \u003e= 200000 \u0026\u0026 newValue \u003c= 600000, \"Beast King: gas limit for dividend must be between 200000 and 600000\");\r\n        gasForDividend = newValue;\r\n    }\r\n\r\n    function setGasForSingleDividend(uint256 newValue) external onlyTeam {\r\n        require(newValue \u003e= 7000 \u0026\u0026 newValue \u003c= 30000, \"Beast King: gas limit for single dividend must be between 7000 and 30000\");\r\n        gasForSingleDividend = newValue;\r\n    }\r\n\r\n    function tokenAmountForDividend() public view returns (uint256) {\r\n        return (\r\n            TOTAL_SUPPLY\r\n            - _balances[address(this)]\r\n            - _balances[LP_PAIR]\r\n            - _balances[DEAD_WALLET]\r\n        );\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(!_lock, \"Beast King: reentrant call\");\r\n        _lock = true;\r\n        _;\r\n        _lock = false;\r\n    }\r\n\r\n    function _processDividend(address holder, uint256 tokenAmount, uint256 dividendAmount) internal nonReentrant returns (uint256) {\r\n        uint256 dividend = _balances[holder] * dividendAmount / tokenAmount;\r\n        if (dividend == 0) {\r\n            return 0;\r\n        }\r\n        timeForNextDividend[holder] = block.timestamp + DIVIDEND_PERIOD;\r\n        (bool success,) = payable(holder).call{value: dividend, gas: gasForSingleDividend}(\"\");\r\n        if (success) {\r\n            return dividend;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function manualClaimDividend() external {\r\n        require(block.timestamp \u003e= timeForNextDividend[msg.sender], \"Beast King: cannot claim now\");\r\n        uint256 claimed = _processDividend(msg.sender, tokenAmountForDividend(), _totalDividend);\r\n        _totalDividend -= claimed;\r\n    }\r\n\r\n    function distributeDividends() public {\r\n        uint256 nHolders = _holders.length();\r\n        if (nHolders == 0) {\r\n            return;\r\n        }\r\n        uint256 endIndex;\r\n        if (currentDividendIndex == 0) {\r\n            endIndex = nHolders - 1;\r\n        }\r\n        else {\r\n            endIndex = currentDividendIndex - 1;\r\n        }\r\n        uint256 distributed = 0;\r\n        uint256 tokenAmount = tokenAmountForDividend();\r\n        uint256 totalGas = gasleft();\r\n        while (totalGas - gasleft() \u003c gasForDividend) {\r\n            address holder = _holders.at(currentDividendIndex);\r\n            if (block.timestamp \u003e= timeForNextDividend[holder]) {\r\n                distributed += _processDividend(holder, tokenAmount, _totalDividend);\r\n            }\r\n            if (currentDividendIndex == endIndex) {\r\n                currentDividendIndex += 1;\r\n                if (currentDividendIndex == nHolders) {\r\n                    currentDividendIndex = 0;\r\n                }\r\n                break;\r\n            }\r\n            currentDividendIndex += 1;\r\n            if (currentDividendIndex == nHolders) {\r\n                currentDividendIndex = 0;\r\n            }\r\n        }\r\n        _totalDividend -= distributed;\r\n    }\r\n\r\n    function _getTaxAmountOut(uint amountIn) internal view returns (uint) {\r\n        (uint reserveIn, uint reserveOut,) = IPancakePair(LP_PAIR).getReserves();\r\n        uint amountInWithFee = amountIn.mul(9975);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        return numerator / denominator;\r\n    }\r\n\r\n    function swapTaxForBNB(uint256 minAmountOut) public {\r\n        require(minAmountOut \u003e= 1 gwei, \"Beast King: `minAmountOut` must be at least 1 gwei\");\r\n        uint256 savedTax = _balances[address(this)];\r\n        uint amountOut = _getTaxAmountOut(savedTax);\r\n        if (amountOut \u003c minAmountOut) {\r\n            return;\r\n        }\r\n\r\n        _balances[LP_PAIR] = _balances[LP_PAIR].add(savedTax);\r\n        _balances[address(this)] = 0;\r\n        emit Transfer(address(this), LP_PAIR, savedTax);\r\n        IPancakePair(LP_PAIR).swap(0, amountOut, address(_dividendHelper), new bytes(0));\r\n        _dividendHelper.withdraw();\r\n\r\n        uint256 receivedBNB = address(this).balance - _totalDividend;\r\n        uint256 marketingFee = receivedBNB * 3 / 10;\r\n        uint256 buybackFee = receivedBNB / 5;\r\n\r\n        payable(MARKETING_WALLET).call{value: marketingFee}(\"\");\r\n        payable(BUYBACK_WALLET).call{value: buybackFee}(\"\");\r\n\r\n        _totalDividend = address(this).balance;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _changeDividendPermission(address holder) internal {\r\n        if (holder == address(this) || holder == LP_PAIR || holder == DEAD_WALLET) {\r\n            return;\r\n        }\r\n        if (_balances[holder] \u003e= MIN_TOKENS_FOR_DIVIDEND) {\r\n            if (!_holders.contains(holder)) {\r\n                _holders.add(holder);\r\n                timeForNextDividend[holder] = block.timestamp + DIVIDEND_PERIOD;\r\n            }\r\n        }\r\n        else if (_holders.contains(holder)) {\r\n            _holders.remove(holder);\r\n            timeForNextDividend[holder] = 0;\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"Beast King: transfer from the zero address\");\r\n        require(recipient != address(0), \"Beast King: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Beast King: transfer amount exceeds balance\");\r\n\r\n        if (sender != BUYBACK_WALLET\r\n            \u0026\u0026 recipient != BUYBACK_WALLET\r\n            \u0026\u0026 recipient != address(this)\r\n        ) {\r\n            uint256 tax = amount / 10;\r\n            _balances[address(this)] = _balances[address(this)].add(tax);\r\n            emit Transfer(sender, address(this), tax);\r\n            if (sender != LP_PAIR) {\r\n                swapTaxForBNB(MIN_TAX_FOR_SWAPPING);\r\n            }\r\n            else if (block.timestamp \u003c _limitBuyUntil) {\r\n                require(amount \u003c= LIMIT_BUY_AMOUNT, \"Beast King: limit buy at launch to prevent bots\");\r\n            }\r\n            amount = amount.sub(tax);\r\n        }\r\n        else if (_limitBuyUntil == 0 \u0026\u0026 recipient == LP_PAIR) {\r\n            _limitBuyUntil = block.timestamp + 180;\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        distributeDividends();\r\n        _changeDividendPermission(sender);\r\n        _changeDividendPermission(recipient);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"Beast King: approve from the zero address\");\r\n        require(spender != address(0), \"Beast King: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue\u0027s index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}