
// File: /contracts/KSNdonation.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./AggregatorV3Interface.sol";


contract KSNdonation {
    
    struct Donation {
        address donor;
        uint amount;
    }
    
    address payable public owner;
    mapping(uint => Donation) public donations;
    uint public donationIndex;
    IERC20 public ksnToken;
    AggregatorV3Interface internal priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE);
    
    event Donate(address indexed donor, uint amount);

    constructor(address _ksnToken, address _priceFeed) {
        owner = payable(msg.sender);
        ksnToken = IERC20(_ksnToken);
        priceFeed = AggregatorV3Interface(_priceFeed);
    }

    function donate(uint _amount) public {
        require(_amount > 0, "Amount must be greater than 0");
        uint allowance = ksnToken.allowance(msg.sender, address(this));
        require(allowance >= _amount, "Insufficient token allowance");
        donationIndex++;
        ksnToken.transferFrom(msg.sender, address(this), _amount);
        donations[donationIndex] = Donation(msg.sender, _amount);
        emit Donate(msg.sender, _amount);
    }
    
    function withdraw() public {
        require(msg.sender == owner, "Only owner can withdraw funds");
        uint balance = ksnToken.balanceOf(address(this));
        require(balance > 0, "No balance to withdraw");
        ksnToken.transfer(owner, balance);
    }
    
    function getDonation(uint _index) public view returns (address, uint) {
        Donation storage d = donations[_index];
        return (d.donor, d.amount);
    }
    
    function getDonationsCount() public view returns (uint) {
        return donationIndex;
    }
    
    function getKSNPrice() public view returns (uint) {
        (,int256 price,,,) = priceFeed.latestRoundData();
        return uint(price);
    }
}


// File: /contracts/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: /contracts/AggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(uint80 _roundId)
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );
}
