
// File: contracts/oracle/interfaces/IAggregatorV3.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

interface IAggregatorV3 {
    function decimals() external view returns (uint8);

    function description() external view returns (string memory);

    function version() external view returns (uint256);

    // getRoundData and latestRoundData should both raise "No data present"
    // if they do not have data to report, instead of returning unset values
    // which could be misinterpreted as actual reported values.
    function getRoundData(uint80 _roundId)
        external
        view
        returns (
            uint80 roundId,
            int256 answer,
            uint256 startedAt,
            uint256 updatedAt,
            uint80 answeredInRound
        );

    function latestRoundData()
        external
        view
        returns (
            uint80 roundId,
            int256 answer,
            uint256 startedAt,
            uint256 updatedAt,
            uint80 answeredInRound
        );
}


// File: contracts/oracle/PriceOracle.sol
//SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;
import "./interfaces/IAggregatorV3.sol";
import "../uniswapV2/interfaces/IERC20Token.sol";

contract PriceOracle {
    mapping(address => address) public priceFeeds;
    mapping(address => uint256) public priceData;

    address public owner;

    // events
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    modifier onlyOwner() {
        require(msg.sender == owner, "oo");
        _;
    }

    function transaferOwnership(address newOwner) public onlyOwner {
        address oldOwner = owner;
        owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    constructor() {
        owner = msg.sender;
    }

    function setPriceFeed(address _token, address _feed) public onlyOwner {
        priceFeeds[_token] = _feed;
    }

    function setPriceData(address _token, uint256 _price) public onlyOwner {
        priceData[_token] = _price;
    }

    function getUnderlyingPrice(address _token) public view returns (uint256) {
        address feed = priceFeeds[_token];
        uint256 _price;
        if (feed == address(0)) {
            _price = 0;
        } else if (priceData[_token] != 0) {
            _price = priceData[_token];
        } else {
            (, int256 answer, , , ) = IAggregatorV3(feed).latestRoundData();
            _price = uint256(answer);
        }
        uint256 tokenDecimal = uint256(IERC20Token(_token).decimals());
        uint256 defaultDecimal = 18;
        if (defaultDecimal == tokenDecimal) {
            return _price;
        } else if (defaultDecimal > tokenDecimal) {
            return _price * (10**(defaultDecimal - tokenDecimal));
        } else {
            return _price / (10**(tokenDecimal - defaultDecimal));
        }
    }
}


// File: contracts/uniswapV2/interfaces/IERC20Token.sol
// SPDX-License-Identifier: GPL-3.0-or-later

pragma solidity >=0.5.0;

interface IERC20Token {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);
}

