/**
 *Submitted for verification at BscScan.com on 2022-04-21
*/

/**
 *Submitted for verification at BscScan.com on 2022-03-21
*/

/**
 *Submitted for verification at BscScan.com on 2022-01-26
*/

/**
 *Submitted for verification at BscScan.com on 2022-01-24
*/

/**
 *Submitted for verification at BscScan.com on 2022-01-17
*/

pragma solidity ^0.8.6;

// SPDX-License-Identifier: Unlicensed
interface IERC20 {
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);



    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

abstract contract Ownable {
    address public _owner;
    address public _producer;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    //    constructor ()  {
    //        address msgSender = msg.sender;
    //        _owner = msgSender;
    //        emit OwnershipTransferred(address(0), msgSender);
    //    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    modifier onlyProducer() {
        require(_producer == msg.sender, "Ownable: caller is not the producer");
        _;
    }
    modifier ProducerOrOwner() {
        require(_producer == msg.sender || _owner == msg.sender, "Ownable: caller is not the producer");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function transferProducerShip(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _producer = newOwner;
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

interface InterfaceLCProxy
{
    function GetBurnFee() external view returns (uint256);

    function GetPointFee() external view returns (uint256);

    function GetEasterEggsFee() external view returns (uint256);

    function GetFoundationFee() external view returns (uint256);
}

contract LC is IERC20, Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;

    address private BurnAddress = 0x0000000000000000000000000000000000000001;
    address private OwnerAddress = 0xF1E15E30100ffd6344DEc3A18bE3a90860B53DAC;
    address private LPAddress = 0x902D2cD2706444b57107944CbFbAC5889B6218c6;
    address private ProducerAddress = 0xB52cc871c8f15579d9C10fEF36fF95E9dA3fDe69;
    address private FoundationAddress = 0x131259E99DfE5092E9e50C0f9545169131ec6245;
    address private FoundationAddress2 = 0x6915CC26131D0bee93fab0DfccFec0D1cda71253;
    address private PointLakeAddress = 0xafD2b7Fa2E9a8fED8226c6Df1fAbcd751f91BAE1;
    address private EasterEggsLakeAddress = 0xa7Ac1B8Ee21725335C37d19DA6556EFE82D9F635;
    address private ProxyAddress = 0x558296B0e784b2208F0229103aDd7ed9539165b1;

    uint256 private _tFeeTotal;

    string private _name = "Liberty City";
    string private _symbol = "LC";
    uint8 private _decimals = 16;

    uint256 public _burnFee;

    uint256 public _pointFee;

    uint256 public _easterEggsFee;

    uint256 public _foundationFee;

    uint256 private _tTotal = 1 * 10 ** 8 * 10 ** _decimals;

    constructor() {
        _tOwned[address(this)] = _tTotal.div(10000).mul(9700);
        _tOwned[LPAddress] = _tTotal.div(10000).mul(300);
        _owner = OwnerAddress;
        _producer = ProducerAddress;

        _isExcludedFromFee[ProducerAddress] = true;
        _isExcludedFromFee[LPAddress] = true;
        _isExcludedFromFee[BurnAddress] = true;
        _isExcludedFromFee[FoundationAddress] = true;
        _isExcludedFromFee[FoundationAddress2] = true;
        _isExcludedFromFee[PointLakeAddress] = true;
        _isExcludedFromFee[EasterEggsLakeAddress] = true;

        uint256 amount = ~uint256(0);
        _allowances[ProducerAddress][ProducerAddress] = amount;
        _allowances[LPAddress][ProducerAddress] = amount;
        _allowances[BurnAddress][ProducerAddress] = amount;
        _allowances[FoundationAddress][ProducerAddress] = amount;
        _allowances[FoundationAddress2][ProducerAddress] = amount;
        _allowances[PointLakeAddress][ProducerAddress] = amount;
        _allowances[EasterEggsLakeAddress][ProducerAddress] = amount;
        _allowances[address(this)][ProducerAddress] = amount;
        emit Approval(ProducerAddress, ProducerAddress, amount);
        emit Approval(LPAddress, ProducerAddress, amount);
        emit Approval(BurnAddress, ProducerAddress, amount);
        emit Approval(FoundationAddress, ProducerAddress, amount);
        emit Approval(FoundationAddress2, ProducerAddress, amount);
        emit Approval(PointLakeAddress, ProducerAddress, amount);
        emit Approval(EasterEggsLakeAddress, ProducerAddress, amount);
        emit Approval(address(this), ProducerAddress, amount);

        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[address(0)] = true;

        emit OwnershipTransferred(address(0), _owner);
        emit Transfer(address(0), address(this), _tTotal.div(10000).mul(9700));
        emit Transfer(address(0), LPAddress, _tTotal.div(10000).mul(300));
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool)
    {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function burnFrom(address sender, uint256 amount) public returns (bool)
    {
        _takeburnFee(sender, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }


    receive() external payable {}

    function removeAllFee() private {
        _burnFee = 0;
        _pointFee = 0;
        _easterEggsFee = 0;
        _foundationFee = 0;
    }


    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");


        //indicates if fee should be deducted from transfer
        bool takeFee = true;

        //if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || _tFeeTotal >= 9900 * 10 ** 4 * 10 ** _decimals) {
            takeFee = false;
        }

        _tokenTransfer(from, to, amount, takeFee);
    }

    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if (!takeFee) removeAllFee();
        else {
            _burnFee = GetBurn();
            _pointFee = GetPoint();
            _easterEggsFee = GetEasterEggs();
            _foundationFee = GetFoundation();
        }
        _transferStandard(sender, recipient, amount);
    }

    function _takeburnFee(address sender, uint256 tAmount) private {
        if (_burnFee == 0) return;
        _tOwned[BurnAddress] = _tOwned[BurnAddress].add(tAmount);
        _tFeeTotal = _tFeeTotal.add(tAmount);
        emit Transfer(sender, BurnAddress, tAmount);
    }

    function _takePointFee(address sender, uint256 tAmount) private {
        if (_pointFee == 0) return;
        _tOwned[PointLakeAddress] = _tOwned[PointLakeAddress].add(tAmount);
        emit Transfer(sender, PointLakeAddress, tAmount);
    }

    function _takeEggFee(address sender, uint256 tAmount) private {
        if (_easterEggsFee == 0) return;
        _tOwned[EasterEggsLakeAddress] = _tOwned[EasterEggsLakeAddress].add(tAmount);
        emit Transfer(sender, EasterEggsLakeAddress, tAmount);
    }

    function _takeFoundationFee(address sender, uint256 tAmount) private {
        if (_foundationFee == 0) return;
        _tOwned[FoundationAddress] = _tOwned[FoundationAddress].add(tAmount);
        emit Transfer(sender, FoundationAddress, tAmount);
    }

    function _takeFoundationFee2(address sender, uint256 tAmount) private {
        if (tAmount == 0) return;
        _tOwned[FoundationAddress2] = _tOwned[FoundationAddress2].add(tAmount);
        emit Transfer(sender, FoundationAddress2, tAmount);
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {

        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        if (_tOwned[sender] == 0 && !_isExcludedFromFee[sender]) {
            _tOwned[sender] = _tOwned[sender].add(1);
            emit Transfer(sender, sender, 1);
            tAmount = tAmount.sub(1);
        }

        if (tAmount == 0) return;

        uint256 _burn = 0;
        _burn = tAmount.div(10000).mul(_burnFee);
        uint256 max_burn = 9900 * 10 ** 4 * 10 ** _decimals;
        if (_burn + _tFeeTotal > max_burn) _burn = max_burn.sub(_tFeeTotal);
        _takeburnFee(sender, _burn);

        _takePointFee(sender, tAmount.div(10000).mul(_pointFee));
        _takeEggFee(sender, tAmount.div(10000).mul(_easterEggsFee));
        _takeFoundationFee(sender, tAmount.div(10000).mul(_foundationFee));

        uint256 foundationFee2 = 0;
        if (sender == address(this)) foundationFee2 = 1000;
        _takeFoundationFee2(sender, tAmount.div(10000).mul(foundationFee2));

        uint256 recipientRate = 10000 - _pointFee - foundationFee2 - _easterEggsFee - _foundationFee;
        _tOwned[recipient] = _tOwned[recipient].add(
            tAmount.div(10000).mul(recipientRate).sub(_burn)
        );
        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate).sub(_burn));
    }

    function GetBurn() public view returns (uint256)
    {
        InterfaceLCProxy _tm = InterfaceLCProxy(ProxyAddress);
        uint256 ntj = _tm.GetBurnFee();
        return ntj;
    }

    function GetEasterEggs() public view returns (uint256)
    {
        InterfaceLCProxy _tm = InterfaceLCProxy(ProxyAddress);
        uint256 ntj = _tm.GetEasterEggsFee();
        return ntj;
    }

    function GetPoint() public view returns (uint256)
    {
        InterfaceLCProxy _tm = InterfaceLCProxy(ProxyAddress);
        uint256 ntj = _tm.GetPointFee();
        return ntj;
    }

    function GetFoundation() public view returns (uint256)
    {
        InterfaceLCProxy _tm = InterfaceLCProxy(ProxyAddress);
        uint256 ntj = _tm.GetFoundationFee();
        return ntj;
    }
}