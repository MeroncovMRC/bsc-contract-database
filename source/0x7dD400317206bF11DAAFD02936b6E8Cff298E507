/**
 *Submitted for verification at BscScan.com on 2023-02-23
*/

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.11;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IPancakeRouter01 {
    function WETH() external pure returns (address);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
   
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    
}


library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
        
}



contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _previousOwner = _owner ;
        _owner = newOwner;
    }

    function previousOwner() public view returns (address) {
        return _previousOwner;
    }
}

contract CoreFeesRountingContract is Context,Ownable{
   
    using SafeMath for uint256;

    // pancakeswap
     IPancakeRouter01 private pancakeV2Router;
    address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address public targetToken; 
    

    uint public platformFee = 15; 
    uint public totalPlatformFee; 
    bool public platformFeeFlag = true;
    
    address public platformFeeWallet;
    address public cccWallet;


    mapping (address => bool) public Tokens;




    
    mapping(address => bool) private _isBlacklisted;

    bool public _directTransferFlag ;


    // transaction details 
    struct OrderDetails { 
            uint product_id;
            address from_address;
            address to_address;
            uint amount;
            uint plantform_fee;
    }

    
    event OrderDetailsToWalletEvent(address indexed token,address indexed from,address indexed to,string order_id,uint256 value_after_convertion,uint256 platformfee_value,uint256 value_after_platformfee,OrderDetails order_details);
    event OrderDetailsToBagEvent(address indexed token,address indexed from,address indexed to,string order_id,uint256 value_after_convertion,uint256 platformfee_value,uint256 value_after_platformfee,OrderDetails order_details);

    // ################
    address public treasury = 0xd3163724D1AB51468c1917CCf8B66E6C4d3c580A;

    event TransferAllTokenToTreasuryEvent(address indexed token,address indexed treasury, uint256 value,uint256 timestamp);

    event DirectTransferEvent(address indexed token,address indexed from, address indexed to,uint256 actual_value ,uint256 value_after_deduction,uint256 value_after_platformfee,uint256 platformfee_value);
    event DirectTransferEvent2(address indexed token,address indexed from, address indexed to,uint256 actual_value ,uint256 value_after_platformfee,uint256 platformfee_value);


  
    constructor(address token,address _platformFeeWallet, address _cccWallet){
        targetToken = token;
        platformFeeWallet = _platformFeeWallet;
        cccWallet = _cccWallet;
        Tokens[targetToken] = true;
        pancakeV2Router = IPancakeRouter01(routerAddress);

    }



    function setPlatformFeeWalletAddress(address _platformFeeWallet) external onlyOwner {
        platformFeeWallet = _platformFeeWallet;
    }

    function setCccWalletAddress(address _cccWallet) external onlyOwner {
        cccWallet = _cccWallet;
    }


    function setTargetAddress(address target_adr) external onlyOwner {
        targetToken = target_adr;
        Tokens[targetToken] = true;

    }

    

    modifier AllowedTokenCheck(IBEP20 _token){
        require(Tokens[address(_token)],'This Token is not allowed to deposit and withdraw.');
        _;
    }


    function setPlatformFee(uint _platformFee) external onlyOwner {
        platformFee = _platformFee;
    }



    function setPlatformFeeFlag(bool _platformFeeFlag) external onlyOwner {
        platformFeeFlag = _platformFeeFlag;
    }
    
    function setDirectTransferFlag(bool _bool) external onlyOwner {
        _directTransferFlag = _bool;
    }


    function setAddressIsBlackListed(address _address, bool _bool) external onlyOwner {
        _isBlacklisted[_address] = _bool;
    }

    function viewIsBlackListed(address _address) public view returns(bool) {
        return _isBlacklisted[_address];
    }

    function allowedTokens(address _token,bool _flag) public onlyOwner{
        Tokens[_token] = _flag;
    }

    
    function TransferAllTokenToTreasury(IBEP20 _token) public onlyOwner AllowedTokenCheck(_token){

        uint _contract_balance = _token.balanceOf(address(this));
        require(_contract_balance > 0, "Contract not have any token balance to transfer.");
        
        _token.transfer(treasury, _contract_balance);
        emit TransferAllTokenToTreasuryEvent(address(_token),treasury, _contract_balance,block.timestamp);
    
    }


  function swapTokenfortargetToken(IBEP20 from_token,uint amountIn) private {
     
        address[] memory path;


        if (address(from_token) == pancakeV2Router.WETH()) {
            path = new address[](2);
            path[0] = address(from_token);
            path[1] = address(targetToken);
        
        pancakeV2Router.swapExactETHForTokens{value: amountIn}(0,path,address(this),block.timestamp);
        } else {
            path = new address[](3); 
            path[0] = address(from_token);
            path[1] = pancakeV2Router.WETH();
            path[2] = address(targetToken);

        from_token.transferFrom(msg.sender,address(this), amountIn);
        from_token.approve(address(pancakeV2Router), amountIn);
        pancakeV2Router.swapExactTokensForTokens(amountIn,1,path,address(this),block.timestamp);
        }
   
    }  
    function PaymentTransfer(IBEP20 _token,address _address,uint _amount) public payable AllowedTokenCheck(_token){
        require(_amount > 0, "You need at least some tokens");
        require(_directTransferFlag,"Direct Transfer is not allowed");
        require(!_isBlacklisted[msg.sender],"Your Address is blacklisted");
        require(!_isBlacklisted[_address],"Receiver Address is blacklisted");

        IBEP20 _target_token = IBEP20(targetToken);
        
        uint _before_token_balance = _target_token.balanceOf(address(this));

        if(targetToken != address(_token)){
            swapTokenfortargetToken(_token,_amount);
           
        }else{
        _token.transferFrom(msg.sender,address(this), _amount);
        }
   

        uint _after_token_balance = _target_token.balanceOf(address(this));

        uint _new_amount = _after_token_balance.sub(_before_token_balance);
        uint _platformfee_value =0;

        if(platformFeeFlag){
        _platformfee_value = _new_amount.mul(platformFee).div(1000);
        totalPlatformFee.add(_platformfee_value);
        _target_token.transfer(platformFeeWallet, _platformfee_value);
        }
        
        uint _transfer_value = _new_amount.sub(_platformfee_value);

        _target_token.transfer(_address, _transfer_value);  
        emit DirectTransferEvent(address(_token),msg.sender,_address,_amount,_new_amount,_transfer_value,_platformfee_value);
    }
    

    receive() external payable {}



 function OrderPaymentToWallet(IBEP20 _token,string memory order_id,OrderDetails[] memory orders) public payable AllowedTokenCheck(_token){
        require(_directTransferFlag,"Direct Transfer is not allowed");
        require(!_isBlacklisted[msg.sender],"Your Address is blacklisted");

        IBEP20 _target_token = IBEP20(targetToken);

        for (uint i=0; i<orders.length; i++) {

        uint _before_token_balance = _target_token.balanceOf(address(this));
        
        if(targetToken != address(_token)){
            swapTokenfortargetToken(_token,orders[i].amount);
           
        }else{
        _token.transferFrom(msg.sender,address(this), orders[i].amount);
        }

        uint _after_token_balance = _target_token.balanceOf(address(this));

        uint _new_amount = _after_token_balance.sub(_before_token_balance);
        

        uint _platformfee_value = _new_amount.mul(orders[i].plantform_fee).div(1000);
        totalPlatformFee.add(_platformfee_value);
        _target_token.transfer(platformFeeWallet, _platformfee_value);


        uint _transfer_value = _new_amount.sub(_platformfee_value); 
        
        _target_token.transfer(orders[i].to_address, _transfer_value);

        OrderDetails memory order = orders[i];
        emit OrderDetailsToWalletEvent(address(_token),msg.sender,orders[i].to_address,order_id,_new_amount,_platformfee_value,_transfer_value,order);
        
        }        
    }

function OrderPaymentToBag(IBEP20 _token,string memory order_id,OrderDetails[] memory orders) public payable AllowedTokenCheck(_token){
        require(_directTransferFlag,"Direct Transfer is not allowed");
        require(!_isBlacklisted[msg.sender],"Your Address is blacklisted");

        IBEP20 _target_token = IBEP20(targetToken);

        for (uint i=0; i<orders.length; i++) {

        uint _before_token_balance = _target_token.balanceOf(address(this));
        
        if(targetToken != address(_token)){
            swapTokenfortargetToken(_token,orders[i].amount);
           
        }else{
        _token.transferFrom(msg.sender,address(this), orders[i].amount);
        }

        uint _after_token_balance = _target_token.balanceOf(address(this));

        uint _new_amount = _after_token_balance.sub(_before_token_balance);
        

        uint _platformfee_value = _new_amount.mul(orders[i].plantform_fee).div(1000);
        totalPlatformFee.add(_platformfee_value);

        uint _transfer_value = _new_amount.sub(_platformfee_value); 
        
        _target_token.transfer(cccWallet, _new_amount);

        OrderDetails memory order = orders[i];
        emit OrderDetailsToBagEvent(address(_token),msg.sender,orders[i].to_address,order_id,_new_amount,_platformfee_value,_transfer_value,order);
        
        }        
    }




}