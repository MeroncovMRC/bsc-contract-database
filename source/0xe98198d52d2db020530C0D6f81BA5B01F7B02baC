
// File: /contracts/MasterFoxV2.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.17;

/*
// FOX BLOCKCHAIN \\

FoxChain works to connect all Blockchains in one platform with one click access to any network.

Website     : https://foxchain.app/
Dex         : https://foxdex.finance/
Telegram    : https://t.me/FOXCHAINNEWS
Twitter     : https://twitter.com/FoxchainLabs
Github      : https://github.com/FoxChainLabs

*/

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@fox.chain/contracts/contracts/v0.8/access/ContractWhitelist.sol";
import "./interfaces/IRewarderV2.sol";
import "./interfaces/IMasterFoxV2.sol";
import "./interfaces/IMasterFox.sol";

contract MasterFoxV2 is
    IMasterFoxV2,
    Initializable,
    Ownable,
    ContractWhitelist,
    ReentrancyGuard
{
    using SafeERC20 for IERC20;

    /// @notice Info of each user's pool deposit
    struct UserInfo {
        uint256 amount; // How many tokens the user has provided
        uint256 rewardDebt; // Reward debt. See explanation below
    }

    /// @notice Info of each pool.
    struct PoolInfo {
        IERC20 stakeToken; // Address of stake token contract.
        IRewarderV2 rewarder; // Address of rewarder contract.
        uint256 allocPoint; // How many allocation points assigned to this pool. FOXLAYERs to distribute per block.
        uint256 totalStaked; // Amount of tokens staked in given pool
        uint256 lastRewardTime; // Last timestamp FOXLAYERs distribution occurs.
        uint256 accFoxlayerPerShare; // Accumulated FOXLAYERs per share, times SCALING_FACTOR. Check code.
        uint16 depositFeeBP; // Deposit fee in basis points
    }

    /// @notice Address which is eligible to accept ownership of the MasterFoxV1. Set by the current owner.
    address public pendingMasterFoxV1Owner;
    /// @notice Address of MAV1 contract.
    IMasterFox public immutable MasterFox;
    /// @notice The pool id of the MAV2 mock token pool in MAV1.
    uint256 public immutable masterPid;
    /// @notice The FOXLAYER TOKEN!
    IERC20 public immutable foxlayer;
    ///  @notice 10 FOXLAYERs per block in MAV1
    uint256 public constant MASTER_FOX_FOXLAYER_PER_BLOCK = 10 ether;
    /// @notice BNB Chain has 3 second block times at the time of deployment
    uint256 public constant MASTER_FOX_FOXLAYER_PER_SECOND_ESTIMATE =
        MASTER_FOX_FOXLAYER_PER_BLOCK / 3;
    uint256 public foxlayerPerSecond;
    uint256 public hardCap = 420000000 ether;
    /// @notice keeps track of unallocated FOXLAYER in the contract
    uint256 public unallocatedFoxlayer;
    /// @notice keeps track of the reward FOXLAYER balance in the contract
    uint256 public availableFoxlayerRewards;

    /// @notice Deposit Fee address
    address public feeAddress;
    /// @dev Max deposit fee is 10% or 1000 BP
    uint256 public constant MAX_DEPOSIT_FEE_BP = 1000;
    uint256 private constant DEPOSIT_FEE_BP = 10000;
    /// @dev Scaling this up increases support for high supply tokens
    uint256 private constant SCALING_FACTOR = 1e18;

    /// @notice Info of each pool.
    PoolInfo[] public poolInfo;

    /// @notice Info of each user that stakes tokens.
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;
    /// @notice Total allocation points. Must be the sum of all allocation points in all pools.
    uint256 public totalAllocPoint;
    /// @dev tracks existing pools to avoid duplicates
    mapping(IERC20 => bool) public poolExistence;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event EmergencyWithdraw(
        address indexed user,
        uint256 indexed pid,
        uint256 amount
    );
    event SetFeeAddress(address indexed user, address indexed newAddress);
    event DepositFoxlayerRewards(address indexed user, uint256 amount);
    event UpdateEmissionRate(address indexed user, uint256 foxlayerPerSecond);
    event UpdateHardCap(address indexed user, uint256 hardCap);

    event LogPoolAddition(
        uint256 indexed pid,
        uint256 allocPoint,
        IERC20 indexed stakeToken,
        uint16 depositFee,
        IRewarderV2 indexed rewarder
    );
    event LogSetPool(
        uint256 indexed pid,
        uint256 allocPoint,
        uint16 depositFee,
        IRewarderV2 indexed rewarder
    );
    event LogUpdatePool(
        uint256 indexed pid,
        uint256 lastRewardBlock,
        uint256 stakeSupply,
        uint256 accFoxlayerPerShare
    );
    event SetPendingMasterFoxV1Owner(address pendingMasterFoxOwner);

    /// @dev modifier to avoid adding duplicate pools
    modifier nonDuplicated(IERC20 _stakeToken) {
        require(
            poolExistence[_stakeToken] == false,
            "nonDuplicated: duplicated"
        );
        _;
    }

    /// @param foxlayer_ the address of the FOXLAYER token
    /// @param MasterFox_ the address of MasterFox
    /// @param masterPid_ the pool id that will control all allocations
    /// @param foxlayerPerSecond_ the emission rates by second
    constructor(
        IERC20 foxlayer_,
        IMasterFox MasterFox_,
        uint256 masterPid_,
        uint256 foxlayerPerSecond_
    ) {
        foxlayer = foxlayer_;
        MasterFox = MasterFox_;
        masterPid = masterPid_;
        _updateEmissionRate(foxlayerPerSecond_);
        /// @dev init foxlayer pool with an allocation of 0
        add(0, foxlayer_, false, 0, IRewarderV2(address(0)));
    }

    /// @notice Deposits a dummy token to `MasterFox` MAV1.
    /// This is required because MAV1 holds the minting permission of FOXLAYER.
    /// It will transfer all the `dummyToken` in the tx sender address.
    /// The allocation point for the dummy pool on MAV1 should be equal to the total amount of allocPoint.
    function initialize() external initializer onlyOwner {
        (address lpToken, , , ) = MasterFox.getPoolInfo(masterPid);
        IERC20 dummyToken = IERC20(lpToken);
        uint256 balance = dummyToken.balanceOf(msg.sender);
        require(balance != 0, "MasterFoxV2: bad balance");
        dummyToken.safeTransferFrom(msg.sender, address(this), balance);
        dummyToken.approve(address(MasterFox), balance);
        MasterFox.deposit(masterPid, balance);
    }

    /// @notice deposit tokens on behalf of sender
    /// @dev depositTo is nonReentrant
    /// @param _pid pool id in which to make deposit
    /// @param _amount amount of tokens to deposit
    function deposit(uint256 _pid, uint256 _amount) external {
        depositTo(_pid, _amount, msg.sender);
    }

    /// @notice withdraw tokens on behalf of sender
    /// @dev withdrawTo is nonReentrant
    /// @param _pid pool id in which to make withdraw
    /// @param _amount amount of tokens to withdraw
    function withdraw(uint256 _pid, uint256 _amount) external {
        withdrawTo(_pid, _amount, msg.sender);
    }

    /// @notice Update reward variables of the given pool to be up-to-date.
    function updatePool(uint256 _pid) external nonReentrant {
        _updatePool(_pid);
    }

    /// @notice Harvests FOXLAYER from `MasterFox` MAV1 and pool `masterPid` to MAV2.
    function harvestFromMasterFox() external nonReentrant {
        _harvestFromMasterFox();
    }

    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _pid) external nonReentrant {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        uint256 amount = user.amount;
        uint256 lastPoolStake = pool.totalStaked;
        user.amount = 0;
        user.rewardDebt = 0;
        pool.totalStaked -= amount;
        // Handle onReward
        if (address(pool.rewarder) != address(0)) {
            pool.rewarder.onReward(
                _pid,
                msg.sender,
                msg.sender,
                0,
                0,
                lastPoolStake
            );
        }
        pool.stakeToken.safeTransfer(msg.sender, amount);
        emit EmergencyWithdraw(msg.sender, _pid, amount);
    }

    /// @notice updates the deposit fee receiver
    /// @param _feeAddress address that receives the fee
    function setFeeAddress(address _feeAddress) external {
        require(
            msg.sender == feeAddress || msg.sender == owner(),
            "setFeeAddress: FORBIDDEN"
        );
        require(_feeAddress != address(0), "setFeeAddress: address(0)");
        feeAddress = _feeAddress;
        emit SetFeeAddress(msg.sender, _feeAddress);
    }

    /// @notice updates the emission rate
    /// @dev reverts if above 3.33 per second
    /// @param _foxlayerPerSecond how many FOXLAYER per second
    /// @param _withUpdate flag to call massUpdatePool before update
    function updateEmissionRate(
        uint256 _foxlayerPerSecond,
        bool _withUpdate
    ) external onlyOwner {
        if (_withUpdate) {
            massUpdatePools();
        }
        _updateEmissionRate(_foxlayerPerSecond);
    }

    /// @notice Set an address as the pending admin of the MasterFox. The address must accept to take ownership.
    /// @param _pendingMasterFoxV1Owner Address to set as the pending owner of the MasterFox.
    function setPendingMasterFoxV1Owner(
        address _pendingMasterFoxV1Owner
    ) external onlyOwner {
        pendingMasterFoxV1Owner = _pendingMasterFoxV1Owner;
        emit SetPendingMasterFoxV1Owner(pendingMasterFoxV1Owner);
    }

    /// @notice The pendingMasterFoxOwner takes ownership through this call
    /// @dev Transferring MasterFox ownership away from this contract can brick this contract.
    function acceptMasterFoxV1Ownership() external {
        require(msg.sender == pendingMasterFoxV1Owner, "not pending owner");
        MasterFox.transferOwnership(pendingMasterFoxV1Owner);
        pendingMasterFoxV1Owner = address(0);
    }

    /// @notice updates the hard cap
    /// @dev reverts if less than current
    /// @param _hardCap the new hard cap
    function updateHardCap(uint256 _hardCap) external onlyOwner {
        _updateHardCap(_hardCap);
    }

    /// @notice returns the amount of pools created
    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }

    /// @notice View function to see pending FOXLAYERs on frontend.
    /// @param _pid PID on which to check pending FOXLAYER
    /// @param _user address of which balance is being checked on
    function pendingFoxlayer(
        uint256 _pid,
        address _user
    ) external view returns (uint256) {
        PoolInfo memory pool = poolInfo[_pid];
        UserInfo memory user = userInfo[_pid][_user];
        uint256 accFoxlayerPerShare = pool.accFoxlayerPerShare;
        uint256 stakeSupply = pool.totalStaked;
        if (
            block.timestamp > pool.lastRewardTime &&
            stakeSupply != 0 &&
            totalAllocPoint != 0
        ) {
            uint256 multiplier = getMultiplier(
                pool.lastRewardTime,
                block.timestamp
            );
            uint256 foxlayerReward = (multiplier *
                foxlayerPerSecond *
                pool.allocPoint) / totalAllocPoint;
            accFoxlayerPerShare +=
                (foxlayerReward * SCALING_FACTOR) /
                stakeSupply;
        }
        return
            ((user.amount * accFoxlayerPerShare) / SCALING_FACTOR) -
            user.rewardDebt;
    }

    /// @notice Adds a new pool into the Master Fox
    /// @param _allocPoint allocation points of new pool
    /// @param _stakeToken stake token of new pool. It cannot be duplicated
    /// @param _withUpdate if we should mass update all existing pools
    /// @param _depositFeeBP the basis points of the deposit fee
    /// @param _rewarder A rewarder compliant smart contract
    function add(
        uint256 _allocPoint,
        IERC20 _stakeToken,
        bool _withUpdate,
        uint16 _depositFeeBP,
        IRewarderV2 _rewarder
    ) public onlyOwner nonDuplicated(_stakeToken) {
        require(
            _depositFeeBP <= MAX_DEPOSIT_FEE_BP,
            "add: invalid deposit fee"
        );

        if (_withUpdate) {
            massUpdatePools();
        }

        uint256 lastRewardTime = block.timestamp;
        totalAllocPoint += _allocPoint;
        poolExistence[_stakeToken] = true;

        poolInfo.push(
            PoolInfo({
                stakeToken: _stakeToken,
                rewarder: _rewarder,
                allocPoint: _allocPoint,
                lastRewardTime: lastRewardTime,
                accFoxlayerPerShare: 0,
                totalStaked: 0,
                depositFeeBP: _depositFeeBP
            })
        );

        emit LogPoolAddition(
            poolInfo.length - 1,
            _allocPoint,
            _stakeToken,
            _depositFeeBP,
            _rewarder
        );
    }

    /// @notice  Update the given pool's FOXLAYER allocation point and deposit fee. Can only be called by the owner.
    /// @param _pid id of pool to update
    /// @param _allocPoint allocation points of new pool
    /// @param _withUpdate if we should mass update all existing pools
    /// @param _depositFeeBP the basis points of the deposit fee
    /// @param _rewarder A rewarder compliant smart contract
    function set(
        uint256 _pid,
        uint256 _allocPoint,
        bool _withUpdate,
        uint16 _depositFeeBP,
        IRewarderV2 _rewarder
    ) external onlyOwner {
        require(
            _depositFeeBP <= MAX_DEPOSIT_FEE_BP,
            "set: invalid deposit fee"
        );
        if (_withUpdate) {
            massUpdatePools();
        } else {
            _updatePool(_pid);
        }

        totalAllocPoint =
            (totalAllocPoint - poolInfo[_pid].allocPoint) +
            _allocPoint;
        poolInfo[_pid].allocPoint = _allocPoint;
        poolInfo[_pid].depositFeeBP = _depositFeeBP;
        poolInfo[_pid].rewarder = _rewarder;

        emit LogSetPool(_pid, _allocPoint, _depositFeeBP, _rewarder);
    }

    /// @notice Update reward variables for all pools. Be careful of gas spending!
    function massUpdatePools() public {
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            _updatePool(pid);
        }
    }

    /// @notice Deposit tokens to MasterFox for FOXLAYER allocation.
    /// @param _pid pool id in which to make deposit
    /// @param _amount amount of tokens to deposit
    /// @param _to who receives the staked amount
    function depositTo(
        uint256 _pid,
        uint256 _amount,
        address _to
    ) public nonReentrant checkEOAorWhitelist {
        _updatePool(_pid);
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_to];
        uint256 finalDepositAmount;
        uint256 pendingRewards;
        if (user.amount > 0) {
            pendingRewards =
                ((user.amount * pool.accFoxlayerPerShare) / SCALING_FACTOR) -
                user.rewardDebt;
            if (pendingRewards > 0) {
                _safeFoxlayerTransfer(_to, pendingRewards);
            }
        }
        if (_amount > 0) {
            // Prefetch balance to account for transfer fees
            IERC20 stakeToken = pool.stakeToken;
            uint256 preStakeBalance = stakeToken.balanceOf(address(this));
            stakeToken.safeTransferFrom(msg.sender, address(this), _amount);
            finalDepositAmount =
                stakeToken.balanceOf(address(this)) -
                preStakeBalance;

            if (pool.depositFeeBP > 0) {
                uint256 depositFee = (finalDepositAmount * pool.depositFeeBP) /
                    DEPOSIT_FEE_BP;
                stakeToken.safeTransfer(feeAddress, depositFee);
                finalDepositAmount -= depositFee;
            }

            user.amount += finalDepositAmount;
        }
        // Handle onReward
        if (address(pool.rewarder) != address(0)) {
            pool.rewarder.onReward(
                _pid,
                _to,
                _to,
                pendingRewards,
                user.amount,
                pool.totalStaked
            );
        }
        /// @dev pool.totalStaked must be updated after rewarder.onReward()
        pool.totalStaked += finalDepositAmount;
        user.rewardDebt =
            (user.amount * pool.accFoxlayerPerShare) /
            SCALING_FACTOR;
        emit Deposit(_to, _pid, finalDepositAmount);
    }

    /// @notice Withdraw tokens from MasterFox.
    /// @param _pid pool id in which to make withdraw
    /// @param _amount amount of tokens to withdraw
    /// @param _to address who receives the withdrawn amount
    function withdrawTo(
        uint256 _pid,
        uint256 _amount,
        address _to
    ) public nonReentrant {
        _updatePool(_pid);
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= _amount, "withdraw: insufficient");
        uint256 pendingRewards = ((user.amount * pool.accFoxlayerPerShare) /
            SCALING_FACTOR) - user.rewardDebt;
        if (pendingRewards > 0) {
            _safeFoxlayerTransfer(_to, pendingRewards);
        }
        user.amount -= _amount;
        // Handle onReward
        if (address(pool.rewarder) != address(0)) {
            pool.rewarder.onReward(
                _pid,
                msg.sender,
                _to,
                pendingRewards,
                user.amount,
                pool.totalStaked
            );
        }
        if (_amount > 0) {
            /// @dev pool.totalStaked must be updated after rewarder.onReward()
            pool.totalStaked -= _amount;
            pool.stakeToken.safeTransfer(_to, _amount);
        }
        user.rewardDebt =
            (user.amount * pool.accFoxlayerPerShare) /
            SCALING_FACTOR;
        emit Withdraw(msg.sender, _pid, _amount);
    }

    /// @notice Deposits FOXLAYER from `MasterFox` MAV1 and pool `masterPid` to MAV2.
    /// @param _amount Amount of FOXLAYER to add to FOXLAYER rewards
    function depositFoxlayerRewards(
        uint256 _amount
    ) external nonReentrant checkEOAorWhitelist {
        require(_amount > 0, "amount is 0");
        foxlayer.safeTransferFrom(msg.sender, address(this), _amount);
        unallocatedFoxlayer += _amount;
        availableFoxlayerRewards += _amount;
        emit DepositFoxlayerRewards(msg.sender, _amount);
    }

    /// @notice returns all pool info
    function getPoolInfo(
        uint256 _pid
    )
        public
        view
        returns (
            address lpToken,
            uint256 allocPoint,
            IRewarderV2 rewarder,
            uint256 lastRewardTime,
            uint256 accFoxlayerPerShare,
            uint256 totalStaked,
            uint16 depositFeeBP
        )
    {
        return (
            address(poolInfo[_pid].stakeToken),
            poolInfo[_pid].allocPoint,
            poolInfo[_pid].rewarder,
            poolInfo[_pid].lastRewardTime,
            poolInfo[_pid].accFoxlayerPerShare,
            poolInfo[_pid].totalStaked,
            poolInfo[_pid].depositFeeBP
        );
    }

    /// @notice Return reward multiplier over the given _from to _to block.
    /// @param _from from what timestamp
    /// @param _to to what timestamp
    /// @return uint256
    function getMultiplier(
        uint256 _from,
        uint256 _to
    ) public pure returns (uint256) {
        return _to - _from;
    }

    /// @dev Safe foxlayer transfer function, just in case if rounding error causes pool to not have enough FOXLAYERs.
    function _safeFoxlayerTransfer(address _to, uint256 _amount) internal {
        if (_amount > availableFoxlayerRewards) {
            _harvestFromMasterFox();
        }
        /// @dev availableFoxlayerRewards is updated inside harvestFromMasterFox()
        if (_amount > availableFoxlayerRewards) {
            _amount = availableFoxlayerRewards;
            availableFoxlayerRewards = 0;
            foxlayer.safeTransfer(_to, _amount);
        } else {
            availableFoxlayerRewards -= _amount;
            foxlayer.safeTransfer(_to, _amount);
        }
    }

    function _updateEmissionRate(uint256 _foxlayerPerSecond) private {
        require(
            _foxlayerPerSecond <= MASTER_FOX_FOXLAYER_PER_SECOND_ESTIMATE,
            "More than maximum rate"
        );
        foxlayerPerSecond = _foxlayerPerSecond;
        emit UpdateEmissionRate(msg.sender, _foxlayerPerSecond);
    }

    function _updateHardCap(uint256 _hardCap) private {
        require(
            _hardCap > foxlayer.totalSupply(),
            "Updated cap is less than total supply"
        );
        hardCap = _hardCap;
        emit UpdateHardCap(msg.sender, _hardCap);
    }

    /// @notice Update reward variables of the given pool to be up-to-date.
    function _updatePool(uint256 _pid) internal {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.timestamp <= pool.lastRewardTime) {
            return;
        }
        uint256 stakeSupply = pool.totalStaked;
        if (stakeSupply == 0 || pool.allocPoint == 0) {
            pool.lastRewardTime = block.timestamp;
            return;
        }
        uint256 multiplier = getMultiplier(
            pool.lastRewardTime,
            block.timestamp
        );
        pool.lastRewardTime = block.timestamp;
        uint256 poolFoxlayer = (multiplier *
            foxlayerPerSecond *
            pool.allocPoint) / totalAllocPoint;
        if (poolFoxlayer == 0) return;
        if (poolFoxlayer > unallocatedFoxlayer) _harvestFromMasterFox();
        /// @dev FOXLAYER hard cap and emissions will be hit at separate times. This handles the emission rate.
        if (
            foxlayer.totalSupply() + poolFoxlayer - unallocatedFoxlayer > hardCap
        ) {
            // This is true when assigning more rewards than possible within the bounds of the hardcap
            _harvestFromMasterFox();
            // Make sure we have the latest number for unallocatedFoxlayer before doing any crazy stuff
            if (poolFoxlayer >= unallocatedFoxlayer) {
                // This can only be true if emissions stopped
                // (or if we are allocating more than 3.333 per second which should not be possible)
                // See _updateEmissionRate
                poolFoxlayer = unallocatedFoxlayer;
                if (foxlayerPerSecond != 0) {
                    // If we get here MasterFoxV1 Emissions already stopped
                    // we allocate the remainder unallocatedFoxlayer and stop emissions on MAv2
                    _updateEmissionRate(0);
                }
            }
        }
        /// @dev This ensures that enough rewards were harvested from MasterFoxV1. This can happen when:
        ///  1. `MasterFoxV2.foxlayerPerSecond()` is set too HIGH compared to `MasterFoxV1.foxlayerPerBlock() * MasterFoxV1.BONUS_MULTIPLIER()`
        ///  2. More FOXLAYER rewards need to be deposited through `MasterFoxV2.depositFoxlayerRewards()`
        require(
            unallocatedFoxlayer >= poolFoxlayer,
            "updatePool: Rewards misallocation"
        );
        unallocatedFoxlayer -= poolFoxlayer;
        pool.accFoxlayerPerShare += (poolFoxlayer * SCALING_FACTOR) / stakeSupply;
        emit LogUpdatePool(
            _pid,
            pool.lastRewardTime,
            stakeSupply,
            pool.accFoxlayerPerShare
        );
    }

    /// @notice Harvests FOXLAYER from `MasterFox` MAV1 and pool `masterPid` to MAV2.
    function _harvestFromMasterFox() internal returns (uint256 newFoxlayer) {
        // TEST that this works with ghost farm for this set to zero
        uint256 beforeFoxlayerBal = foxlayer.balanceOf(address(this));
        MasterFox.deposit(masterPid, 0);
        newFoxlayer = foxlayer.balanceOf(address(this)) - beforeFoxlayerBal;
        unallocatedFoxlayer += newFoxlayer;
        availableFoxlayerRewards += newFoxlayer;

        uint256 foxlayerTotalSupply = foxlayer.totalSupply();
        if (
            foxlayerTotalSupply >= hardCap && MasterFox.BONUS_MULTIPLIER() > 0
        ) {
            /// @dev FOXLAYER hard cap and emissions will be hit at separate times. This handles the hard cap.
            MasterFox.updateMultiplier(0);
            uint256 surplus = foxlayerTotalSupply - hardCap;
            if (availableFoxlayerRewards >= surplus) {
                unallocatedFoxlayer = unallocatedFoxlayer > surplus
                    ? unallocatedFoxlayer - surplus
                    : 0;
                _safeFoxlayerTransfer(
                    0x000000000000000000000000000000000000dEaD,
                    surplus
                );
            } else {
                /// @dev These are safeguards to avoid bricking the contract
                /// nevertheless off-chain checks and interactions should make this case impossible
                /// This happens when the hard-cap block is missed by so much
                /// that the surplus in the dev wallet exceeds what this contract can burn by itself
                unallocatedFoxlayer = 0;
                _safeFoxlayerTransfer(
                    0x000000000000000000000000000000000000dEaD,
                    availableFoxlayerRewards
                );
            }
        }
    }
}


// File: /contracts/interfaces/IRewarderV2.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.17;

/*
// FOX BLOCKCHAIN \\

FoxChain works to connect all Blockchains in one platform with one click access to any network.

Website     : https://foxchain.app/
Telegram    : https://t.me/FOXCHAINNEWS
Twitter     : https://twitter.com/FoxchainLabs
Github      : https://github.com/FoxChainLabs

*/

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IRewarderV2 {
    /// @dev even if not all parameters are currently used in this implementation they help future proofing it
    function onReward(
        uint256 _pid,
        address _user,
        address _to,
        uint256 _pending,
        uint256 _stakedAmount,
        uint256 _lpSupply
    ) external;

    /// @dev passing stakedAmount here helps future proofing the interface
    function pendingTokens(
        uint256 pid,
        address user,
        uint256 amount
    ) external view returns (IERC20[] memory, uint256[] memory);
}

// File: /contracts/interfaces/IMasterFoxV2.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

/*
// FOX BLOCKCHAIN \\

FoxChain works to connect all Blockchains in one platform with one click access to any network.

Website     : https://foxchain.app/
Dex         : https://foxdex.finance/
Telegram    : https://t.me/FOXCHAINNEWS
Twitter     : https://twitter.com/FoxchainLabs
Github      : https://github.com/FoxChainLabs

*/


import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@fox.chain/contracts/contracts/v0.8/interfaces/IContractWhitelist.sol";
import "./IRewarderV2.sol";


interface IMasterFoxV2 is IContractWhitelist {
    function updateEmissionRate(uint256 _foxlayerPerSecond, bool _withUpdate) external; // onlyOwner

    function updateHardCap(uint256 _hardCap) external; // onlyOwner

    function setFeeAddress(address _feeAddress) external; // onlyOwner

    function add(
        uint256 _allocPoint,
        IERC20 _stakeToken,
        bool _withUpdate,
        uint16 _depositFeeBP,
        IRewarderV2 _rewarder
    ) external; // onlyOwner

    function set(
        uint256 _pid,
        uint256 _allocPoint,
        bool _withUpdate,
        uint16 _depositFeeBP,
        IRewarderV2 _rewarder
    ) external; // onlyOwner

    function massUpdatePools() external;

    function updatePool(uint256 _pid) external; // validatePool(_pid);

    function depositTo(
        uint256 _pid,
        uint256 _amount,
        address _to
    ) external; // validatePool(_pid);

    function deposit(uint256 _pid, uint256 _amount) external; // validatePool(_pid);

    function withdraw(uint256 _pid, uint256 _amount) external; // validatePool(_pid);

    function withdrawTo(
        uint256 _pid,
        uint256 _amount,
        address _to
    ) external; // validatePool(_pid);

    function emergencyWithdraw(uint256 _pid) external;

    function setPendingMasterFoxV1Owner(address _pendingMasterFoxV1Owner) external;

    function acceptMasterFoxV1Ownership() external;

    function foxlayerPerSecond() external view returns (uint256);

    function poolLength() external view returns (uint256);

    function totalAllocPoint() external view returns (uint256);

    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);

    function pendingFoxlayer(uint256 _pid, address _user) external view returns (uint256);

    function userInfo(uint256, address)
        external
        view
        returns (uint256 amount, uint256 rewardDebt);

    function getPoolInfo(uint256 _pid)
        external
        view
        returns (
            address lpToken,
            uint256 allocPoint,
            IRewarderV2 rewarder,
            uint256 lastRewardBlock,
            uint256 accFoxlayerPerShare,
            uint256 totalStaked,
            uint16 depositFeeBP
        );
}

// File: /contracts/interfaces/IMasterFox.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.17;

/*
// FOX BLOCKCHAIN \\

FoxChain works to connect all Blockchains in one platform with one click access to any network.

Website     : https://foxchain.app/
Dex         : https://foxdex.finance/
Telegram    : https://t.me/FOXCHAINNEWS
Twitter     : https://twitter.com/FoxchainLabs
Github      : https://github.com/FoxChainLabs

*/

interface IMasterFox {
    function transferOwnership(address newOwner) external; // from Ownable.sol

    function updateMultiplier(uint256 multiplierNumber) external; // onlyOwner

    function add(
        uint256 _allocPoint,
        address _lpToken,
        bool _withUpdate
    ) external; // onlyOwner

    function set(
        uint256 _pid,
        uint256 _allocPoint,
        bool _withUpdate
    ) external; // onlyOwner

    function massUpdatePools() external;

    function updatePool(uint256 _pid) external; // validatePool(_pid);

    function deposit(uint256 _pid, uint256 _amount) external; // validatePool(_pid);

    function withdraw(uint256 _pid, uint256 _amount) external; // validatePool(_pid);

    function enterStaking(uint256 _amount) external;

    function leaveStaking(uint256 _amount) external;

    function emergencyWithdraw(uint256 _pid) external;

    function dev(address _devaddr) external;

    function totalAllocPoint() external view returns (uint256);

    function BONUS_MULTIPLIER() external view returns (uint256);

    function cakePerBlock() external view returns (uint256);

    function poolLength() external view returns (uint256);

    function checkPoolDuplicate(address _lpToken) external view;

    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);

    function pendingCake(uint256 _pid, address _user) external view returns (uint256);

    function syrup() external view returns (address);

    function getPoolInfo(uint256 _pid)
        external
        view
        returns (
            address lpToken,
            uint256 allocPoint,
            uint256 lastRewardBlock,
            uint256 accCakePerShare
        );
}

// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastvalue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastvalue;
                // Update the index for the moved value
                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        assembly {
            result := store
        }

        return result;
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)

pragma solidity ^0.8.2;

import "../../utils/AddressUpgradeable.sol";

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        require(
            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),
            "Initializable: contract is already initialized"
        );
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        require(!_initializing, "Initializable: contract is initializing");
        if (_initialized < type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}


// File: @fox.chain/contracts/contracts/v0.8/interfaces/IContractWhitelist.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

/*
// FOX BLOCKCHAIN \\

FoxChain works to connect all Blockchains in one platform with one click access to any network.

Website     : https://foxchain.app/
Dex         : https://foxdex.finance/
Telegram    : https://t.me/FOXCHAINNEWS
Twitter     : https://twitter.com/FoxchainLabs
Github      : https://github.com/FoxChainLabs

*/

interface IContractWhitelist {
    function getWhitelistLength() external returns (uint256);

    function getWhitelistAtIndex(uint256 _index) external returns (address);

    function isWhitelisted(address _address) external returns (bool);

    function setWhitelistEnabled(bool _enabled) external;

    function setContractWhitelist(address _address, bool _enabled) external;

    function setBatchContractWhitelist(
        address[] memory _addresses,
        bool[] memory _enabled
    ) external;
}


// File: @fox.chain/contracts/contracts/v0.8/access/ContractWhitelist.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

/*
// FOX BLOCKCHAIN \\

FoxChain works to connect all Blockchains in one platform with one click access to any network.

Website     : https://foxchain.app/
Dex         : https://foxdex.finance/
Telegram    : https://t.me/FOXCHAINNEWS
Twitter     : https://twitter.com/FoxchainLabs
Github      : https://github.com/FoxChainLabs

*/

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
import "../interfaces/IContractWhitelist.sol";

abstract contract ContractWhitelist is IContractWhitelist, Ownable {
    using EnumerableSet for EnumerableSet.AddressSet;

    EnumerableSet.AddressSet private contractWhitelistSet;
    /// @notice marks if a contract whitelist is enabled.
    bool public whitelistEnabled;

    event UpdateWhitelistStatus(bool whitelistEnabled);
    event UpdateContractWhitelist(
        address indexed whitelistAddress,
        bool whitelistEnabled
    );

    /// @dev checks if whitelist is enabled and if contract is whitelisted
    modifier checkEOAorWhitelist() {
        // If whitelist is enabled and sender is not EOA
        if (whitelistEnabled && msg.sender != tx.origin) {
            require(
                isWhitelisted(msg.sender),
                "checkWhitelist: not in whitelist"
            );
        }
        _;
    }

    /// @notice Get the number of addresses on the whitelist
    function getWhitelistLength()
        external
        view
        virtual
        override
        returns (uint256)
    {
        return contractWhitelistSet.length();
    }

    /// @notice Find the address on the whitelist of the provided index
    /// @param _index Index to query
    function getWhitelistAtIndex(
        uint256 _index
    ) external view virtual override returns (address) {
        return contractWhitelistSet.at(_index);
    }

    /// @notice Check if an address is whitelisted
    /// @param _address Address to query
    function isWhitelisted(
        address _address
    ) public view virtual override returns (bool) {
        return contractWhitelistSet.contains(_address);
    }

    /// @notice enables smart contract whitelist
    function setWhitelistEnabled(
        bool _enabled
    ) external virtual override onlyOwner {
        whitelistEnabled = _enabled;
        emit UpdateWhitelistStatus(whitelistEnabled);
    }

    /// @notice Enable or disable a contract address on the whitelist
    /// @param _address Address to update on whitelist
    /// @param _enabled Set if the whitelist is enabled or disabled
    function setContractWhitelist(
        address _address,
        bool _enabled
    ) external override onlyOwner {
        _setContractWhitelist(_address, _enabled);
    }

    /// @notice Enable or disable contract addresses on the whitelist
    /// @param _addresses Addressed to update on whitelist
    /// @param _enabled Set if the whitelist is enabled or disabled for each address passed
    function setBatchContractWhitelist(
        address[] calldata _addresses,
        bool[] calldata _enabled
    ) external override onlyOwner {
        require(_addresses.length == _enabled.length, "array mismatch");
        for (uint256 i = 0; i < _addresses.length; i++) {
            _setContractWhitelist(_addresses[i], _enabled[i]);
        }
    }

    /// @notice Enable or disable a contract address on the whitelist
    /// @param _address Address to update on whitelist
    /// @param _enabled Set if the whitelist is enabled or disabled
    function _setContractWhitelist(
        address _address,
        bool _enabled
    ) internal virtual {
        if (_enabled) {
            require(
                contractWhitelistSet.add(_address),
                "address already enabled"
            );
        } else {
            require(
                contractWhitelistSet.remove(_address),
                "address already disabled"
            );
        }
        emit UpdateContractWhitelist(_address, _enabled);
    }
}

