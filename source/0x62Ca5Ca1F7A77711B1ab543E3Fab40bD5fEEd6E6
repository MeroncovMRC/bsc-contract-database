{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"mathFunclib.sol":{"content":"// SPDX-License-Identifier: MIT LICENSE\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary mathFuncs {\r\n    uint constant DECIMALS = 10**18; \r\n\r\n    function decMul18(uint x, uint y) internal pure returns (uint decProd) {\r\n        decProd = x * y / DECIMALS;\r\n    }\r\n\r\n    function decDiv18(uint x, uint y) internal pure returns (uint decQuotient) {\r\n        require(y != 0, \"Division by zero\");\r\n        decQuotient = x * DECIMALS / y;\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"w-IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// Amended ERC20 by Wand Dev.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /*\n    *Customised \n    */\n    function mint(address addrTo, uint256 amount) external;\n    function burn(address addrFrom, uint256 amount) external;\n    /*\n    *End Customised \n    */\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"WandInvestments.sol":{"content":"// SPDX-License-Identifier: MIT LICENSE\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./w-IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./mathFunclib.sol\";\r\n\r\ncontract WandInvestments is ReentrancyGuard, Ownable {\r\n    \r\n    uint256 public constant SEEDERS_SPTRS = 77058823526000000000000; //9411.764706 + 44705.88235 + 22941.17647\r\n    uint256 public constant WHALES_SPTRS = 33333333333333333333333; //60% of paid amount\r\n    uint256 public constant LAUNCH_SPTRS_AMOUNT = SEEDERS_SPTRS + WHALES_SPTRS;\r\n\r\n    uint256 constant DECIMALS = 10**18;\r\n    uint256 constant SECONDS_IN_A_DAY = 60 * 60 * 24;\r\n\r\n    address public constant SCEPTER_TREASURY_ADDR = 0x954b53Bba4DA95537738c6bb7F6FC17E24aa0F54;\r\n    address public constant BATON_TREASURY_ADDR = 0x7e9BCDc9133036209aCFcDb6DF007b602D0C617F;\r\n    address public constant DEV_WALLET_ADDR = 0x25f9860e2c422c67498806aDD2fDA39809C7bd1f;\r\n   \r\n    IERC20 public constant SPTR = IERC20(0xdb369CB15F2630D4add8b9929c6ccc0FE5958590);\r\n    IERC20 public constant WAND = IERC20(0x3ECc1858ead3Fb54FA0cd15C2185fC16C22dBb43);\r\n    IERC20 public constant BTON = IERC20(0x60811935f6DCE667F62FE3aDFc8C1CDDb3010389);\r\n\r\n    address public adminDelegator;\r\n\r\n    bool public tradingEnabled = false;\r\n\r\n    struct WLData {\r\n        uint256 buyLimit;\r\n        uint256 SPTRBought;\r\n    }\r\n    mapping(address =\u003e WLData) public whiteListees;\r\n\r\n    uint256 public timeLaunched = 0;\r\n    uint256 public daysInCalculation;\r\n\r\n    struct ScepterData {\r\n        uint256 sptrGrowthFactor;\r\n        uint256 sptrSellFactor;\r\n        uint256 sptrBackingPrice;\r\n        uint256 sptrSellPrice;\r\n        uint256 sptrBuyPrice;\r\n        uint256 sptrTreasuryBal;\r\n    }\r\n    ScepterData public scepterData;\r\n\r\n    struct BatonData {\r\n        uint256 btonBackingPrice;\r\n        uint256 btonRedeemingPrice;\r\n        uint256 btonTreasuryBal;\r\n    }\r\n    BatonData public batonData;\r\n\r\n    mapping(uint256 =\u003e uint256) public tokensBoughtXDays;\r\n    mapping(uint256 =\u003e uint256) public tokensSoldXDays;\r\n    mapping(uint256 =\u003e uint256) public circulatingSupplyXDays;\r\n    mapping(uint256 =\u003e bool) private setCircSupplyToPreviousDay;\r\n\r\n    struct stableTokensParams {\r\n        address contractAddress;\r\n        uint256 tokenDecimals;\r\n    }\r\n    mapping (string =\u003e stableTokensParams) public stableERC20Info;\r\n\r\n    struct lockedamounts {\r\n        uint256 timeUnlocked;\r\n        uint256 amounts;\r\n    }\r\n    mapping(address =\u003e lockedamounts) public withheldWithdrawals;\r\n\r\n    mapping(address =\u003e uint256) public initialTimeHeld;\r\n    mapping(address =\u003e uint256) public timeSold;\r\n\r\n    struct btonsLocked {\r\n        uint256 timeInit;\r\n        uint256 amounts;\r\n    }\r\n    mapping(address =\u003e btonsLocked) public btonHoldings;\r\n\r\n    event sceptersBought(address indexed _from, uint256 _amount);\r\n    event sceptersSold(address indexed _from, uint256 _amount);\r\n\r\n    constructor() {\r\n        _transferOwnership(0x954b53Bba4DA95537738c6bb7F6FC17E24aa0F54);\r\n        adminDelegator = 0x4a55c1181B4aeC55cF8e71377e8518E742F9Ae72; \r\n    }\r\n\r\n    function setCirculatingSupplyXDaysToPrevious(uint256 dInArray) private returns (uint256) {\r\n        if (setCircSupplyToPreviousDay[dInArray]) {\r\n            return circulatingSupplyXDays[dInArray];\r\n        }\r\n        setCircSupplyToPreviousDay[dInArray] = true;\r\n        circulatingSupplyXDays[dInArray] = setCirculatingSupplyXDaysToPrevious(dInArray - 1);\r\n        return circulatingSupplyXDays[dInArray];\r\n    }\r\n\r\n    function cashOutScepter(\r\n        uint256 amountSPTRtoSell,\r\n        uint256 daysChosenLocked,\r\n        string calldata stableChosen\r\n    )\r\n        external nonReentrant\r\n    {\r\n        require(tradingEnabled, \"Disabled\");\r\n        require(SPTR.balanceOf(msg.sender) \u003e= amountSPTRtoSell, \"You dont have that amount!\");\r\n        require(daysChosenLocked \u003c 10, \"You can only lock for a max of 9 days\");\r\n\r\n        uint256 usdAmt = mathFuncs.decMul18(\r\n            mathFuncs.decMul18(scepterData.sptrSellPrice, amountSPTRtoSell),\r\n            mathFuncs.decDiv18((daysChosenLocked + 1) * 10, 100)\r\n        );\r\n\r\n        require(usdAmt \u003e 0, \"Not enough tokens swapped\");\r\n\r\n        uint256 dInArray = (block.timestamp - timeLaunched) / SECONDS_IN_A_DAY;\r\n        tokensSoldXDays[dInArray] += amountSPTRtoSell;\r\n        setCirculatingSupplyXDaysToPrevious(dInArray);\r\n        circulatingSupplyXDays[dInArray] -= amountSPTRtoSell;\r\n\r\n        WAND.burn(SCEPTER_TREASURY_ADDR, amountSPTRtoSell);\r\n        SPTR.burn(msg.sender, amountSPTRtoSell);\r\n\r\n        if (daysChosenLocked == 0) {\r\n            require(stableERC20Info[stableChosen].contractAddress != address(0), \"Unsupported stable coin\");\r\n            IERC20 tokenStable = IERC20(stableERC20Info[stableChosen].contractAddress);\r\n\r\n            uint256 usdAmtTrf = usdAmt / 10**(18 - stableERC20Info[stableChosen].tokenDecimals);\r\n            uint256 usdAmtToUser = mathFuncs.decMul18(usdAmtTrf, mathFuncs.decDiv18(95, 100));\r\n\r\n            require(usdAmtToUser \u003e 0, \"Not enough tokens swapped\");\r\n\r\n            scepterData.sptrTreasuryBal -= usdAmt;\r\n\r\n            _safeTransferFrom(tokenStable, SCEPTER_TREASURY_ADDR, msg.sender, usdAmtToUser);\r\n            _safeTransferFrom(tokenStable, SCEPTER_TREASURY_ADDR, DEV_WALLET_ADDR, usdAmtTrf - usdAmtToUser);\r\n        } else {\r\n            if (withheldWithdrawals[msg.sender].timeUnlocked == 0) {\r\n                withheldWithdrawals[msg.sender].amounts = usdAmt;\r\n                withheldWithdrawals[msg.sender].timeUnlocked =\r\n                    block.timestamp + (daysChosenLocked * SECONDS_IN_A_DAY);\r\n            } else {\r\n                withheldWithdrawals[msg.sender].amounts += usdAmt;\r\n                if (block.timestamp \u003c withheldWithdrawals[msg.sender].timeUnlocked) {\r\n                    withheldWithdrawals[msg.sender].timeUnlocked += (daysChosenLocked * SECONDS_IN_A_DAY);\r\n                } else {\r\n                    withheldWithdrawals[msg.sender].timeUnlocked =\r\n                        block.timestamp + (daysChosenLocked * SECONDS_IN_A_DAY);\r\n                }\r\n            }\r\n        }\r\n\r\n        calcSPTRData();\r\n\r\n        timeSold[msg.sender] = block.timestamp;\r\n        if (SPTR.balanceOf(msg.sender) == 0 \u0026\u0026 BTON.balanceOf(msg.sender) == 0) {\r\n            initialTimeHeld[msg.sender] = 0;\r\n        }\r\n\r\n        emit sceptersSold(msg.sender, amountSPTRtoSell);\r\n    }\r\n\r\n    function cashOutBaton(uint256 amountBTONtoSell, string calldata stableChosen) external nonReentrant {\r\n        require(tradingEnabled, \"Disabled\");\r\n        require(BTON.balanceOf(msg.sender) \u003e= amountBTONtoSell, \"You dont have that amount!\");\r\n        require(stableERC20Info[stableChosen].contractAddress != address(0), \"Unsupported stable coin\");\r\n\r\n        IERC20 tokenStable = IERC20(stableERC20Info[stableChosen].contractAddress);\r\n        uint256 usdAmt = mathFuncs.decMul18(batonData.btonRedeemingPrice, amountBTONtoSell);\r\n        uint256 usdAmtTrf = usdAmt / 10**(18 - stableERC20Info[stableChosen].tokenDecimals);\r\n\r\n        require(usdAmtTrf \u003e 0, \"Not enough tokens swapped\");\r\n\r\n        batonData.btonTreasuryBal -= usdAmt;\r\n\r\n        btonHoldings[msg.sender].timeInit = block.timestamp;\r\n        btonHoldings[msg.sender].amounts -= amountBTONtoSell;\r\n\r\n        BTON.burn(msg.sender, amountBTONtoSell);\r\n        _safeTransferFrom(tokenStable, BATON_TREASURY_ADDR, msg.sender, usdAmtTrf);\r\n\r\n        calcBTONData();\r\n\r\n        timeSold[msg.sender] = block.timestamp;\r\n        if (SPTR.balanceOf(msg.sender) == 0 \u0026\u0026 BTON.balanceOf(msg.sender) == 0) {\r\n            initialTimeHeld[msg.sender] = 0;\r\n        }\r\n    }\r\n\r\n    function transformScepterToBaton(uint256 amountSPTRtoSwap, string calldata stableChosen) external nonReentrant {\r\n        require(tradingEnabled, \"Disabled\");\r\n        require(SPTR.balanceOf(msg.sender) \u003e= amountSPTRtoSwap, \"You dont have that amount!\");\r\n        require(stableERC20Info[stableChosen].contractAddress != address(0), \"Unsupported stable coin\");\r\n\r\n        uint256 btonTreaAmtTrf = mathFuncs.decMul18(\r\n            mathFuncs.decMul18(scepterData.sptrBackingPrice, amountSPTRtoSwap),\r\n            mathFuncs.decDiv18(9, 10)\r\n        );\r\n\r\n        uint256 toTrf = btonTreaAmtTrf / 10**(18 - stableERC20Info[stableChosen].tokenDecimals);\r\n\r\n        require(toTrf \u003e 0, \"Not enough tokens swapped\");\r\n\r\n        IERC20 tokenStable = IERC20(stableERC20Info[stableChosen].contractAddress);\r\n\r\n        uint256 dInArray = (block.timestamp - timeLaunched) / SECONDS_IN_A_DAY;\r\n        tokensSoldXDays[dInArray] += amountSPTRtoSwap;\r\n        setCirculatingSupplyXDaysToPrevious(dInArray);\r\n        circulatingSupplyXDays[dInArray] -= amountSPTRtoSwap;\r\n\r\n        scepterData.sptrTreasuryBal -= btonTreaAmtTrf;\r\n\r\n        batonData.btonTreasuryBal += btonTreaAmtTrf;\r\n\r\n        btonHoldings[msg.sender].timeInit = block.timestamp;\r\n        btonHoldings[msg.sender].amounts += amountSPTRtoSwap;\r\n\r\n        WAND.burn(SCEPTER_TREASURY_ADDR, amountSPTRtoSwap);\r\n        SPTR.burn(msg.sender, amountSPTRtoSwap);\r\n        BTON.mint(msg.sender, amountSPTRtoSwap);\r\n        calcSPTRData();\r\n        _safeTransferFrom(tokenStable, SCEPTER_TREASURY_ADDR, BATON_TREASURY_ADDR, toTrf);\r\n    }\r\n\r\n    function buyScepter(uint256 amountSPTRtoBuy, string calldata stableChosen) external nonReentrant {\r\n        require(tradingEnabled, \"Disabled\");\r\n        require(timeLaunched != 0 \u0026\u0026 block.timestamp \u003e timeLaunched + 172800, \"Not launched for public.\");\r\n        require(amountSPTRtoBuy \u003c= 250000 * DECIMALS , \"Per transaction limit\");\r\n        require(stableERC20Info[stableChosen].contractAddress != address(0), \"Unsupported stable coin\");\r\n\r\n        IERC20 tokenStable = IERC20(stableERC20Info[stableChosen].contractAddress);\r\n\r\n        uint256 usdAmt = mathFuncs.decMul18(amountSPTRtoBuy, scepterData.sptrBuyPrice);\r\n        uint256 usdAmtToPay = usdAmt / 10**(18 - stableERC20Info[stableChosen].tokenDecimals);\r\n\r\n        require(tokenStable.balanceOf(msg.sender) \u003e= usdAmtToPay, \"You dont have that amount!\");\r\n\r\n        uint256 dInArray = (block.timestamp - timeLaunched) / SECONDS_IN_A_DAY;\r\n        tokensBoughtXDays[dInArray] += amountSPTRtoBuy;\r\n        setCirculatingSupplyXDaysToPrevious(dInArray);\r\n        circulatingSupplyXDays[dInArray] += amountSPTRtoBuy;\r\n\r\n        scepterData.sptrTreasuryBal += mathFuncs.decMul18(usdAmt, mathFuncs.decDiv18(95, 100));\r\n\r\n        uint256 usdAmtToTreasury = mathFuncs.decMul18(usdAmtToPay, mathFuncs.decDiv18(95, 100));\r\n\r\n        require(usdAmtToTreasury \u003e 0, \"Not enough tokens swapped\");\r\n\r\n        _safeTransferFrom(tokenStable, msg.sender, SCEPTER_TREASURY_ADDR, usdAmtToTreasury);\r\n        _safeTransferFrom(tokenStable, msg.sender, DEV_WALLET_ADDR, usdAmtToPay - usdAmtToTreasury);\r\n\r\n        SPTR.mint(msg.sender, amountSPTRtoBuy);\r\n        WAND.mint(SCEPTER_TREASURY_ADDR, amountSPTRtoBuy);\r\n        calcSPTRData();\r\n\r\n        if (initialTimeHeld[msg.sender] == 0) {\r\n            initialTimeHeld[msg.sender] = block.timestamp;\r\n        }\r\n\r\n        emit sceptersBought(msg.sender, amountSPTRtoBuy);\r\n    }\r\n\r\n    function wlBuyScepter(uint256 amountSPTRtoBuy, string calldata stableChosen) external nonReentrant {\r\n        require(tradingEnabled, \"Disabled\");\r\n        require(block.timestamp \u003c= timeLaunched + 172800, \"WL Sale closed\");\r\n        require(whiteListees[msg.sender].SPTRBought + amountSPTRtoBuy \u003c= whiteListees[msg.sender].buyLimit, \"Hit Limit\");\r\n        require(stableERC20Info[stableChosen].contractAddress != address(0), \"Unsupported stable coin\");\r\n\r\n        IERC20 tokenStable = IERC20(stableERC20Info[stableChosen].contractAddress);\r\n\r\n        uint256 usdAmt = amountSPTRtoBuy;\r\n        uint256 usdAmtToPay = usdAmt / 10**(18 - stableERC20Info[stableChosen].tokenDecimals);\r\n        require(tokenStable.balanceOf(msg.sender) \u003e= usdAmtToPay, \"You dont have that amount!\");\r\n\r\n        uint256 dInArray = (block.timestamp - timeLaunched) / SECONDS_IN_A_DAY;\r\n        tokensBoughtXDays[dInArray] += amountSPTRtoBuy;\r\n        setCirculatingSupplyXDaysToPrevious(dInArray);\r\n        circulatingSupplyXDays[dInArray] += amountSPTRtoBuy;\r\n\r\n        scepterData.sptrTreasuryBal += mathFuncs.decMul18(usdAmt, mathFuncs.decDiv18(95, 100));\r\n\r\n        uint256 usdAmtToTreasury = mathFuncs.decMul18(usdAmtToPay, mathFuncs.decDiv18(95, 100));\r\n\r\n        require(usdAmtToTreasury \u003e 0, \"Not enough tokens swapped\");\r\n\r\n        _safeTransferFrom(tokenStable, msg.sender, SCEPTER_TREASURY_ADDR, usdAmtToTreasury);\r\n        _safeTransferFrom(tokenStable, msg.sender, DEV_WALLET_ADDR, usdAmtToPay - usdAmtToTreasury);\r\n\r\n        whiteListees[msg.sender].SPTRBought += amountSPTRtoBuy;\r\n\r\n        SPTR.mint(msg.sender, amountSPTRtoBuy);\r\n        WAND.mint(SCEPTER_TREASURY_ADDR, amountSPTRtoBuy);\r\n        calcSPTRData();\r\n\r\n        if (initialTimeHeld[msg.sender] == 0) {\r\n            initialTimeHeld[msg.sender] = block.timestamp;\r\n        }\r\n\r\n        emit sceptersBought(msg.sender, amountSPTRtoBuy);\r\n    }\r\n\r\n    function claimLockedUSD(string calldata stableChosen) external nonReentrant {\r\n        require(tradingEnabled, \"Disabled\");\r\n        require(withheldWithdrawals[msg.sender].timeUnlocked != 0, \"No locked funds to claim\");\r\n        require(block.timestamp \u003e= withheldWithdrawals[msg.sender].timeUnlocked, \"Not unlocked\");\r\n        require(stableERC20Info[stableChosen].contractAddress != address(0), \"Unsupported stable coin\");\r\n\r\n        IERC20 tokenStable = IERC20(stableERC20Info[stableChosen].contractAddress);\r\n\r\n        uint256 claimAmts =\r\n            withheldWithdrawals[msg.sender].amounts /\r\n            10**(18 - stableERC20Info[stableChosen].tokenDecimals);\r\n        uint256 amtToUser = mathFuncs.decMul18(claimAmts, mathFuncs.decDiv18(95, 100));\r\n\r\n        scepterData.sptrTreasuryBal -= withheldWithdrawals[msg.sender].amounts;\r\n        calcSPTRData();\r\n\r\n        delete withheldWithdrawals[msg.sender];\r\n        _safeTransferFrom(tokenStable, SCEPTER_TREASURY_ADDR, msg.sender, amtToUser);\r\n        _safeTransferFrom(tokenStable, SCEPTER_TREASURY_ADDR, DEV_WALLET_ADDR, claimAmts - amtToUser);\r\n    }\r\n\r\n    function getCircSupplyXDays() public view returns (uint256) {\r\n        if (timeLaunched == 0) return 0;\r\n        uint256 daySinceLaunched = (block.timestamp - timeLaunched) / SECONDS_IN_A_DAY;\r\n        uint256 numdays = daysInCalculation / SECONDS_IN_A_DAY;\r\n        if (daySinceLaunched \u003c numdays) {\r\n            return LAUNCH_SPTRS_AMOUNT;\r\n        }\r\n        for (uint d = daySinceLaunched - numdays; d \u003e 0; d--) {\r\n            if (setCircSupplyToPreviousDay[d]) {\r\n                return circulatingSupplyXDays[d];\r\n            }\r\n        }\r\n        return circulatingSupplyXDays[0];\r\n    }\r\n\r\n    function calcBTONData() private {\r\n        if (BTON.totalSupply() == 0) { \r\n            batonData.btonBackingPrice = DECIMALS;\r\n        } else {\r\n            batonData.btonBackingPrice = mathFuncs.decDiv18(batonData.btonTreasuryBal, BTON.totalSupply());\r\n        }\r\n        uint256 btonPrice = mathFuncs.decMul18(batonData.btonBackingPrice, mathFuncs.decDiv18(30, 100));\r\n        uint256 sptrPriceHalf = scepterData.sptrBackingPrice / 2;\r\n        if (btonPrice \u003e sptrPriceHalf) {\r\n            batonData.btonRedeemingPrice = sptrPriceHalf;\r\n        } else {\r\n            batonData.btonRedeemingPrice = btonPrice;\r\n        }\r\n    }\r\n\r\n    function calcSPTRData() private {\r\n        if (getCircSupplyXDays() == 0) {\r\n            scepterData.sptrGrowthFactor = 3 * 10**17;\r\n        } else {\r\n            scepterData.sptrGrowthFactor =\r\n                2 * (mathFuncs.decDiv18(getTokensBoughtXDays(), getCircSupplyXDays()));\r\n        }\r\n        if (scepterData.sptrGrowthFactor \u003e 3 * 10**17) {\r\n            scepterData.sptrGrowthFactor = 3 * 10**17;\r\n        }\r\n\r\n        if (getCircSupplyXDays() == 0) {\r\n            scepterData.sptrSellFactor = 3 * 10**17;\r\n        } else {\r\n            scepterData.sptrSellFactor =\r\n                2 * (mathFuncs.decDiv18(getTokensSoldXDays(), getCircSupplyXDays()));\r\n        }\r\n        if (scepterData.sptrSellFactor \u003e 3 * 10**17) {\r\n           scepterData.sptrSellFactor = 3 * 10**17;\r\n        }\r\n\r\n        if (SPTR.totalSupply() == 0) {\r\n            scepterData.sptrBackingPrice = DECIMALS;\r\n        } else {\r\n            scepterData.sptrBackingPrice =\r\n                mathFuncs.decDiv18(scepterData.sptrTreasuryBal, SPTR.totalSupply());\r\n        }\r\n\r\n        scepterData.sptrBuyPrice = mathFuncs.decMul18(\r\n            scepterData.sptrBackingPrice,\r\n            12 * 10**17 + scepterData.sptrGrowthFactor\r\n        );\r\n        scepterData.sptrSellPrice = mathFuncs.decMul18(\r\n            scepterData.sptrBackingPrice,\r\n            9 * 10**17 - scepterData.sptrSellFactor\r\n        );\r\n        calcBTONData();\r\n    }\r\n\r\n    function getTokensBoughtXDays() public view returns (uint256) {\r\n        if (timeLaunched == 0) return tokensBoughtXDays[0];\r\n\r\n        uint256 boughtCount = 0;\r\n        uint d = 0;\r\n        uint256 numdays = daysInCalculation / SECONDS_IN_A_DAY;\r\n        uint256 daySinceLaunched = (block.timestamp - timeLaunched) / SECONDS_IN_A_DAY;\r\n\r\n        if (daySinceLaunched \u003e numdays) {\r\n            d = daySinceLaunched - numdays;\r\n        }\r\n        for (; d \u003c= daySinceLaunched; d++) {\r\n            boughtCount += tokensBoughtXDays[d];\r\n        }\r\n        return boughtCount;\r\n    }\r\n\r\n    function getTokensSoldXDays() public view returns (uint256) {\r\n        if (timeLaunched == 0) return tokensSoldXDays[0];\r\n\r\n        uint256 soldCount = 0;\r\n        uint256 d;\r\n        uint256 numdays = daysInCalculation / SECONDS_IN_A_DAY;\r\n        uint256 daySinceLaunched = (block.timestamp - timeLaunched) / SECONDS_IN_A_DAY;\r\n\r\n        if (daySinceLaunched \u003e numdays) {\r\n            d = daySinceLaunched - numdays;\r\n        }\r\n        for (; d \u003c= daySinceLaunched; d++) {  \r\n            soldCount += tokensSoldXDays[d];\r\n        }\r\n        return soldCount;\r\n    }\r\n\r\n    function turnOnOffTrading(bool value) external onlyOwner {\r\n        tradingEnabled = value;\r\n    }\r\n\r\n    function updateSPTRTreasuryBal(uint256 totalAmt) external {\r\n        require(msg.sender == adminDelegator, \"Not Delegated to call.\"); \r\n        scepterData.sptrTreasuryBal = totalAmt * DECIMALS;\r\n        calcSPTRData();\r\n    }\r\n\r\n    function updateDelegator(address newAddress) external onlyOwner {\r\n        adminDelegator = newAddress;\r\n    }\r\n\r\n    function addOrSubFromSPTRTreasuryBal(int256 amount) external onlyOwner {\r\n        if (amount \u003c 0) {\r\n            scepterData.sptrTreasuryBal -= uint256(-amount) * DECIMALS;\r\n        } else {\r\n            scepterData.sptrTreasuryBal += uint256(amount) * DECIMALS;\r\n        }\r\n        calcSPTRData();\r\n    }\r\n\r\n    function updateBTONTreasuryBal(uint256 totalAmt) external {\r\n        require(msg.sender == adminDelegator, \"Not Delegated to call.\"); \r\n        batonData.btonTreasuryBal = totalAmt * DECIMALS;\r\n        calcBTONData();\r\n    }\r\n\r\n    function Launch() external {\r\n        require(msg.sender == adminDelegator, \"Not Delegated to call.\"); \r\n        require(timeLaunched == 0, \"Already Launched\");\r\n        timeLaunched = block.timestamp;\r\n        daysInCalculation = 5 days;\r\n\r\n        SPTR.mint(adminDelegator, LAUNCH_SPTRS_AMOUNT); \r\n\r\n        WAND.mint(SCEPTER_TREASURY_ADDR, LAUNCH_SPTRS_AMOUNT);\r\n\r\n        tokensBoughtXDays[0] = LAUNCH_SPTRS_AMOUNT;\r\n        circulatingSupplyXDays[0] = LAUNCH_SPTRS_AMOUNT;\r\n        setCircSupplyToPreviousDay[0] = true;\r\n        scepterData.sptrTreasuryBal = 30000 * DECIMALS; \r\n        batonData.btonTreasuryBal = 0;\r\n        calcSPTRData();\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function setDaysUsedInFactors(uint256 numDays) external onlyOwner {\r\n        daysInCalculation = numDays * SECONDS_IN_A_DAY;\r\n    }\r\n\r\n    function addWhitelistee(uint listNum, address[] memory addr) external {\r\n        require(msg.sender == adminDelegator, \"Not Delegated to call.\");\r\n        require(listNum \u003e= 1 \u0026\u0026 listNum \u003c= 4, \"listNum has to be 1, 2, 3 or 4.\");\r\n        if (listNum == 1) {\r\n            listNum = 2000 * DECIMALS;\r\n        } else if (listNum == 2) {\r\n            listNum = 1500 * DECIMALS;\r\n        } else if (listNum == 3) {\r\n            listNum = 1000 * DECIMALS;\r\n        } else {\r\n            listNum = 500 * DECIMALS;\r\n        }\r\n        for (uint256 i = 0; i \u003c addr.length; i++) {\r\n            whiteListees[addr[i]].buyLimit = listNum;\r\n        }\r\n    }\r\n\r\n    function addStable(string calldata ticker, address addr, uint256 dec) external onlyOwner {\r\n        stableERC20Info[ticker].contractAddress = addr;\r\n        stableERC20Info[ticker].tokenDecimals = dec;\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        IERC20 token,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        private\r\n    {\r\n        require(token.transferFrom(sender, recipient, amount), \"Token transfer failed\");\r\n    }\r\n}"}}