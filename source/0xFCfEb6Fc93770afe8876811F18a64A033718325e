//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,
     * given `owner`'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }

}
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

library SafeERC20 {
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
    unchecked {
        uint256 oldAllowance = token.allowance(address(this), spender);
        require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
        uint256 newAllowance = oldAllowance - value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

/// @notice one user staking information (amount, end time)
    struct StakeInfo {
        address stakeToken;
        address rewardToken;
        uint256 amount;
        uint256 rewards;
        uint64 start;
        uint64 end;
    }

/// @notice period option(period in days and total period bonus in percentage)
    struct StakeOption {
        uint16 periodInDays;
        uint16 bonusInPercentage;
        address rewardToken;
    }

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract TokenStakeOwnable is Ownable {
    /// @notice stores owner of specific token staking
    /// @dev token => owner
    mapping(address => address) public tokenStakeOwner;

    /// @notice is spesific stake paused
    /// @dev token => isPaused
    mapping(address => bool) public isStakePaused;

    /// @notice emits when new option is created
    event TokenStakeOwnerAdd(address indexed token, address indexed owner);

    event TransferTokenStakeOwnership(
        address indexed token,
        address indexed owner
    );

    event SetStakingPaused(address indexed token, bool indexed isPaused);

    /// @dev Check that msg.sender is stake owner
    modifier onlyTokenStakeOwner(address token) {
        require(_msgSender() == tokenStakeOwner[token], "!tokenStakeOwner");
        _;
    }

    /// @dev Check that msg.sender is stake owner
    modifier whenStakingNotPaused(address token) {
        require(isStakePaused[token] == false, "staking paused");
        _;
    }

    function setStakingPaused(address stakeToken, bool isPaused)
    external
    onlyTokenStakeOwner(stakeToken)
    {
        isStakePaused[stakeToken] = isPaused;
        emit SetStakingPaused(stakeToken, isPaused);
    }

    function transferStakeOwnership(address token, address newOwner)
    external
    onlyTokenStakeOwner(token)
    {
        require(newOwner != address(0), "!newOwner");
        tokenStakeOwner[token] = newOwner;
        emit TransferTokenStakeOwnership(token, newOwner);
    }

    function addStakeOwner(address token, address owner) external onlyOwner {
        require(token != address(0), "!token");
        require(owner != address(0), "!owner");
        require(tokenStakeOwner[token] == address(0), "already have owner");
        tokenStakeOwner[token] = owner;
        emit TokenStakeOwnerAdd(token, owner);
    }
}

abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor () {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

/// @title Solo-staking token contract
/// @notice Staking token for one of pre-defined periods with different rewards and bonus percentage.
contract StakingFixed is TokenStakeOwnable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    /// @notice store information about users stakes
    mapping(address => StakeInfo[]) public usersStake;

    /// @notice store information about stake options
    mapping(address => StakeOption[]) public stakeOptions;

    /// @notice staked amount in for each option
    /// @dev stakeToken => reservedAmount
    mapping(address => uint256) public totalReservedAmount;

    /// @notice emits on stake
    event Stake(
        address indexed sender,
        address indexed stakeToken,
        uint256 amount,
        uint16 option
    );

    /// @notice emits on token withdrawal from staking
    event Withdraw(
        address indexed sender,
        address indexed stakeToken,
        address indexed rewardToken,
        uint256 amount,
        uint256 rewards
    );

    /// @notice emits when option for stake token is changed
    event OptionChange(address indexed stakeToken, uint16 indexed option);

    /// @notice emits when new option for stake token is created
    event OptionAdd(address indexed stakeToken, uint16 indexed newOption);

    /// @dev Check for value is greater then zero
    modifier gtZero(uint256 value) {
        require(value > 0, "value == 0");
        _;
    }

    /// @dev Checks that selected stake option is valid
    modifier validOption(address stakeToken, uint16 option) {
        require(option < stakeOptions[stakeToken].length, "!option");
        require(
            stakeOptions[stakeToken][option].periodInDays != 0 &&
            stakeOptions[stakeToken][option].bonusInPercentage != 0 &&
            stakeOptions[stakeToken][option].rewardToken != address(0),
            "!active option"
        );
        _;
    }

    /// @notice stake function with permit support
    /// (see stake(..) func for more info)
    function stakeWithPermit(
        address stakeToken,
        uint256 amount,
        uint16 option,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external {
        IERC20Permit(stakeToken).permit(
            _msgSender(),
            address(this),
            amount,
            deadline,
            v,
            r,
            s
        );

        IERC20(stakeToken).safeTransferFrom(_msgSender(), address(this), amount);
        _stake(_msgSender(), stakeToken, amount, option);
    }

    /// @notice puts tokens into staking for given option
    /// @param amount - amount of tokens to put into stake,
    /// @param option - index of the option in stakeOptions array
    function stake(
        address stakeToken,
        uint256 amount,
        uint16 option
    ) external gtZero(amount) {
        IERC20(stakeToken).safeTransferFrom(_msgSender(), address(this), amount);
        _stake(_msgSender(), stakeToken, amount, option);
    }

    /// @notice puts tokens into staking for given option for specified user
    /// @param amount - amount of tokens to put into stake,
    /// @param option - index of the option in stakeOptions array
    function stakeFor(
        address account,
        address stakeToken,
        uint256 amount,
        uint16 option
    ) external gtZero(amount) {
        IERC20(stakeToken).safeTransferFrom(_msgSender(), address(this), amount);
        _stake(account, stakeToken, amount, option);
    }

    /// @dev internal function for stake logic implementation (without transfer tokens)
    /// @param amount - amount of tokens,
    /// @param option - index of the option in stakeOptions mapping
    /// @param account - address of user account
    function _stake(
        address account,
        address stakeToken,
        uint256 amount,
        uint16 option
    )
    internal
    nonReentrant
    validOption(stakeToken, option)
    whenStakingNotPaused(stakeToken)
    {
        require(account != address(0), "!account");
        StakeOption memory opt = stakeOptions[stakeToken][option];

        uint256 rewards = calculateRewards(stakeToken, amount, option);

        require(
            IERC20(opt.rewardToken).balanceOf(address(this)) >= rewards + amount,
            "!reserves"
        );

        usersStake[account].push(
            StakeInfo({
        stakeToken: stakeToken,
        rewardToken: opt.rewardToken,
        amount: amount,
        rewards: rewards,
        start: uint64(block.timestamp),
        end: uint64(block.timestamp + opt.periodInDays * 1 days)
        })
        );

        totalReservedAmount[stakeToken] += amount;
        totalReservedAmount[opt.rewardToken] += rewards;

        emit Stake(account, stakeToken, amount, option);
    }

    /// @notice withdraw tokens
    /// @param stakeToken - stake token
    /// @param stakeIndex - index of user`s stake
    function withdraw(address stakeToken, uint16 stakeIndex)
    external
    nonReentrant
    {
        require(usersStake[_msgSender()].length > stakeIndex, "!index");

        StakeInfo memory s = usersStake[_msgSender()][stakeIndex];

        require(s.stakeToken == stakeToken, "!stakeToken");
        require(block.timestamp > s.end, "!end");

        // remove stake from user stakes
        usersStake[_msgSender()][stakeIndex] = usersStake[_msgSender()][
        usersStake[_msgSender()].length - 1
        ];

        usersStake[_msgSender()].pop();

        totalReservedAmount[stakeToken] -= s.amount;
        totalReservedAmount[s.rewardToken] -= s.rewards;

        if (stakeToken == s.rewardToken) {
            IERC20(stakeToken).safeTransfer(_msgSender(), s.amount + s.rewards);
        } else {
            IERC20(stakeToken).safeTransfer(_msgSender(), s.amount);
            IERC20(s.rewardToken).safeTransfer(_msgSender(), s.rewards);
        }

        emit Withdraw(_msgSender(), stakeToken, s.rewardToken, s.amount, s.rewards);
    }

    /// @notice set option values. Will affect only new stakes
    /// @dev to make option inactive set period to 0
    /// @param optionIndex - option indexes
    /// @param period - period for options
    /// @param bonusInPercentage - bonuse for each option in percents (100 = 1%)
    function setStakeOptions(
        address token,
        uint16 optionIndex,
        uint16 period,
        uint16 bonusInPercentage,
        address rewardToken
    ) external onlyTokenStakeOwner(token) {
        require(optionIndex < stakeOptions[token].length, "!option");
        stakeOptions[token][optionIndex] = StakeOption(
            period,
            bonusInPercentage,
            rewardToken
        );
        emit OptionChange(token, optionIndex);
    }

    /// @notice add new option
    /// @param token - stake token
    /// @param period - period for options
    /// @param bonusInPercentage - bonuse for each option in percents (100 = 1%)
    function addStakeOptions(
        address token,
        uint16 period,
        uint16 bonusInPercentage,
        address rewardToken
    ) external onlyTokenStakeOwner(token) {
        stakeOptions[token].push(
            StakeOption(period, bonusInPercentage, rewardToken)
        );
        emit OptionAdd(token, uint16(stakeOptions[token].length) - 1);
    }

    /// @notice withdraw free tokens from the contract
    /// @param token - address of the token
    /// @param amount - amount to withdraw
    function withdrawFreeTokens(address token, uint256 amount) external {
        if (totalReservedAmount[token] != 0) {
            require(_msgSender() == tokenStakeOwner[token], "not a pool owner");
            require(amount <= notReservedTokenAmount(token), "!free");
        } else {
            require(_msgSender() == owner(), "not a owner");
        }

        IERC20(token).safeTransfer(_msgSender(), amount);
    }

    /// @notice returns all user stakes
    function getUserStakes(address account)
    external
    view
    returns (StakeInfo[] memory)
    {
        return usersStake[account];
    }

    /// @notice return stake options array
    function getStakeOptions(address stakeToken)
    external
    view
    returns (StakeOption[] memory)
    {
        return stakeOptions[stakeToken];
    }

    /// @notice calculate user stake rewards
    function calculateRewards(
        address stakeToken,
        uint256 amount,
        uint16 optionIndex
    ) public view returns (uint256) {
        return
        (amount * stakeOptions[stakeToken][optionIndex].bonusInPercentage) /
        10000;
    }

    /// @notice returns how many tokens free
    function notReservedTokenAmount(address token) public view returns (uint256) {
        return IERC20(token).balanceOf(address(this)) - totalReservedAmount[token];
    }
}