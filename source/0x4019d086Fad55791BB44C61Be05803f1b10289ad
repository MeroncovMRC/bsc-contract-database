// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;



/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol


// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastValue;
                // Update the index for the moved value
                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        assembly {
            result := store
        }

        return result;
    }
}

// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: MarsControl.sol


// beta version 2.10
pragma solidity ^0.8.2;

interface IERC20Meta is IERC20 {
    function mint_operator(address to, uint256 amount, uint256 reason) external;
    function get_DailyDistribution() external returns (uint256);
}
interface IERC721 {
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
}
interface IPOOLCHEF {
    function updatePool(uint256 cakeReward) external;
}
interface IMO {

    struct PropertyTypeinfo {
        uint256[3] power;
        uint256 discount;
        bool exist;
    }
    function get_PropertyType(uint key) view external returns (PropertyTypeinfo memory);

    struct Polygoninfo {
        address account;
        uint256 x; 
        uint256 y;
        uint256 propertys_count;
    }
    function Polygon(uint key) view external returns (Polygoninfo memory);
    function polygon_count() view external returns (uint256);

    struct Propertyinfo {
        uint256 polygon_id;
        uint256 property_type_id;
        uint256 level;
    }
    function Property(uint key) view external returns (Propertyinfo memory);


    function get_account_power_Ex(address _address) external view returns (uint[] memory);
    function get_distance(int _x1, int _y1, int _x2, int _y2) external pure returns (uint256);
    function add_polygon_Ex(address _account, uint256 _x, uint256 _y) external;
    function add_property_Ex(uint _property_type_id, uint _polygon_id, uint _level) external;
    function property_level_up_Ex(address _account, uint256 _property_id) external;
}
interface IMD {
    struct AddressPower {
        uint256[3] power;
        uint256 need_solar;
        uint256 frozen_provision;
    }
    struct AddressFinance {
        uint256[3] balance;
        uint256 solar_tank;
    }
    struct Limit {
        uint256 mining_limit;
        uint256 staking_limit;
    }

    function burn_solar(address _account, uint _amount) external;
    function mint_solar(address _account, uint _amount) external;
    function burn_provision(address _account, uint _amount) external;
    function mint_provision(address _account, uint _amount) external;
    function Day() view external returns (uint256);
    function add_Day() external;
    function add_MarsTotalPower(uint256 _index, uint256 _value) external;
    function sub_MarsTotalPower(uint256 _index, uint256 _value) external;
    function update_AddressPower(address _account, AddressPower memory _AddressPower) external;
    function update_AddressFinance(address _account, AddressFinance memory _AddressFinance) external;
    function get_MarsTotalPower() external view returns (uint[2] memory);
    function get_AddressPower(address _address) external view returns (AddressPower memory);
    function get_AddressFinance(address _address) external view returns (AddressFinance memory);
    function active_add(address _address) external returns (bool);
    function active_remove(address _address) external returns (bool);
    function active_contains(address _address) external view returns (bool);
    function active_length() external view returns (uint256);
    function active_at(uint256 _index) external view returns (address);
    function get_Limits() external view returns (Limit memory);
    function update_Limits(Limit memory _Limit) external;
    function emit_AutoTake(uint256 _Day, Limit memory _Limit, uint256[2] memory _totalpower) external;
    function emit_AutoTakeUser(uint256 _Day, address _address, AddressPower memory _AddressPower) external;
}
interface IMR {
    function new_deduction(address _account, address _referrer, uint256 _property_type_id, uint256 _amount) external;
}
interface IMA {

}

contract MarsControl is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20Meta;
    using EnumerableSet for EnumerableSet.AddressSet;

    constructor(IERC20Meta _MarsToken,
            IMO _MarsObject,
            IMD _MarsData,
            address _AdminAddress,
            address _MarsBot,
            uint256 _SolarRate,
            uint256 _NeighboursRange,
            uint256 _MinPricePolygon,
            uint256 _CoefPrice) {
        MarsToken = _MarsToken;
        MarsObject = _MarsObject;
        MarsData = _MarsData;
        AdminAddress = _AdminAddress;
        MarsBot = _MarsBot;
        SolarRate = _SolarRate;     
        NeighboursRange = _NeighboursRange;
        MinPricePolygon = _MinPricePolygon;
        CoefPrice = _CoefPrice;
    }

    uint256 public SolarRate;

    uint256 public StakingMintPercent = 80;
    uint256 public IfCrystalPowerZero = 1;
    uint256 public DaysReturnSolar = 3;

    mapping(uint256 => EnumerableSet.AddressSet) _rem;

    uint256 public LastTimeTake;
    uint256 public LastTimeAfterTake;
    uint256 Cursor;
    uint256 CursorAfter;

    uint256[2] CacheMarsTotalPower;

    // Recover ERC20 tokens sent by accident
    event TokenRecovery(address indexed token, uint256 amount);
    // Recover NFT tokens sent by accident
    event NonFungibleTokenRecovery(address indexed token, uint256 indexed tokenId);

    event UpdatePower(address indexed _address);

    function buy_solar() external payable notContract nonReentrant {
        uint256 _amount = msg.value/SolarRate;
        require (_amount > 0);
        MarsData.mint_solar(msg.sender, _amount);
    }
    function airdrop_fill_tank(address _address, uint256 _solar) external onlyMarsAirDrop {
        require (_solar > 0);
        IMD.AddressFinance memory _AddressFinance = MarsData.get_AddressFinance(_address);
        _AddressFinance.solar_tank += _solar;
        MarsData.update_AddressFinance(_address, _AddressFinance);
    }

    function fill_tank(uint256 _solar) external notContract nonReentrant {
        MarsData.burn_solar(msg.sender, _solar);
        IMD.AddressFinance memory _AddressFinance = MarsData.get_AddressFinance(msg.sender);
        _AddressFinance.solar_tank += _solar;
        MarsData.update_AddressFinance(msg.sender, _AddressFinance);
        update_power(msg.sender);
    }

    function use_provisions(uint _amount) external notContract nonReentrant {
        require (_amount > 0 , "Amount can not be 0");
        IMD.AddressPower memory _AddressPower = MarsData.get_AddressPower(msg.sender);
        require (_AddressPower.frozen_provision == 0 , "#238");
        MarsData.burn_provision(msg.sender, _amount);
        _AddressPower.frozen_provision = _amount;
        MarsData.update_AddressPower(msg.sender, _AddressPower);
        update_power(msg.sender);
    }
    function cansel_use_provisions() external notContract nonReentrant {
        IMD.AddressPower memory _AddressPower = MarsData.get_AddressPower(msg.sender);
        require (_AddressPower.frozen_provision > 0 , "No unused provisions");
        MarsData.mint_provision(msg.sender, _AddressPower.frozen_provision);
        _AddressPower.frozen_provision = 0;
        MarsData.update_AddressPower(msg.sender, _AddressPower);
        update_power(msg.sender);
    }
    function Take() external notContract nonReentrant {
        IMD.AddressFinance memory _AddressFinance = MarsData.get_AddressFinance(msg.sender);
        if (_AddressFinance.balance[0] > 0) {
            MarsToken.mint_operator(msg.sender, _AddressFinance.balance[0], 0);
            _AddressFinance.balance[0] = 0;
        }
        if (_AddressFinance.balance[1] > 0) {
            MarsData.mint_solar(msg.sender, _AddressFinance.balance[1]);
            _AddressFinance.balance[1] = 0;
        }
        if (_AddressFinance.balance[2] > 0) {
            MarsData.mint_provision(msg.sender, _AddressFinance.balance[2]);
            _AddressFinance.balance[2] = 0;
        }
        MarsData.update_AddressFinance(msg.sender, _AddressFinance);
    }

    function update_power(address _address) private {
        require (Cursor == 0, "Wait for the calculation to complete");

        uint[] memory _sum_powers = new uint[](3);
        _sum_powers = MarsObject.get_account_power_Ex(_address);

        IMD.AddressPower memory _AddressPower = MarsData.get_AddressPower(_address);

        if (_AddressPower.frozen_provision > 0) {
            _sum_powers[0] += _AddressPower.frozen_provision;
        }

        uint solar_take = _sum_powers[0]*100/StakingMintPercent;

        if (_sum_powers[0] == 0 && _sum_powers[1]+_sum_powers[2] > 0) {
            _AddressPower.need_solar = IfCrystalPowerZero;
        } else {
            _AddressPower.need_solar = solar_take;
        }
        IMD.AddressFinance memory _AddressFinance = MarsData.get_AddressFinance(_address);
        if (_AddressFinance.solar_tank >= _AddressPower.need_solar && _sum_powers[0]+_sum_powers[1]+_sum_powers[2] > 0) {
    
            if(!MarsData.active_contains(_address)) {
                MarsData.active_add(_address);

                MarsData.add_MarsTotalPower(0, _sum_powers[0]);
                MarsData.add_MarsTotalPower(1, _sum_powers[1]);

            } else {
                MarsData.sub_MarsTotalPower(0, _AddressPower.power[0]);
                MarsData.sub_MarsTotalPower(1, _AddressPower.power[1]);
                MarsData.add_MarsTotalPower(0, _sum_powers[0]);
                MarsData.add_MarsTotalPower(1, _sum_powers[1]);
            }
        } else {
            if(MarsData.active_contains(_address)) {
                MarsData.active_remove(_address);
                MarsData.sub_MarsTotalPower(0, _AddressPower.power[0]);
                MarsData.sub_MarsTotalPower(1, _AddressPower.power[1]);
            }
        }

        _AddressPower.power = [_sum_powers[0], _sum_powers[1], _sum_powers[2]];
        MarsData.update_AddressPower(_address, _AddressPower);
        emit UpdatePower(_address);
    }

    function update_power_Ex(address _address) external onlyMars {
        update_power(_address);
    }

    function update_limit() private {
            uint256 _limit = MarsToken.get_DailyDistribution();
            IMD.Limit memory _Limit;
            _Limit.mining_limit = _limit*StakingMintPercent/100;
            _Limit.staking_limit = _limit-_Limit.mining_limit;
            MarsData.update_Limits(_Limit);
    }
    function startContract() external notContract nonReentrant onlyOwner {
        update_limit();
    }

    function auto_take(uint256 size) external notContract nonReentrant onlyMarsBot {
        if (LastTimeTake+86400 < block.timestamp) {

            if (Cursor == 0) {
                CacheMarsTotalPower = MarsData.get_MarsTotalPower();
                    
            }
            uint256 _Day = MarsData.Day();
            uint256 solar_limit = (CacheMarsTotalPower[0]*100/StakingMintPercent)*10/100;

            uint256 length = size;
            
            if (length > MarsData.active_length() - Cursor) {
                length = MarsData.active_length() - Cursor;
            }
            for (uint256 i = 0; i < length; i++) {
                address _address = MarsData.active_at(Cursor + i);
                IMD.AddressFinance memory _AddressFinance = MarsData.get_AddressFinance(_address);
                IMD.AddressPower memory _AddressPower = MarsData.get_AddressPower(_address);

                _AddressFinance.solar_tank -= _AddressPower.need_solar;
                if (CacheMarsTotalPower[0] != 0) {
                    IMD.Limit memory _Limit = MarsData.get_Limits();
                    uint256 tokens = _AddressPower.power[0] * _Limit.mining_limit / CacheMarsTotalPower[0];
                    _AddressFinance.balance[0] += tokens;
                }
                            
                _AddressFinance.balance[2] += _AddressPower.power[2];
                if (CacheMarsTotalPower[1] != 0) {
                    uint256 solars = _AddressPower.power[1] * solar_limit / CacheMarsTotalPower[1];
                    _AddressFinance.balance[1] += solars;
                }
                MarsData.emit_AutoTakeUser(_Day, _address, _AddressPower);
                if (_AddressPower.frozen_provision > 0) {
                    _AddressPower.power[0] -= _AddressPower.frozen_provision;
                    MarsData.sub_MarsTotalPower(0, _AddressPower.frozen_provision);
                    _AddressPower.need_solar = _AddressPower.power[0]*100/StakingMintPercent;
                    _AddressPower.frozen_provision = 0;
                }
                if (_AddressFinance.solar_tank < _AddressPower.need_solar) {
                    _rem[_Day].add(_address);
                    MarsData.sub_MarsTotalPower(0, _AddressPower.power[0]);
                    MarsData.sub_MarsTotalPower(1, _AddressPower.power[1]);
                }
                MarsData.update_AddressFinance(_address, _AddressFinance);
                MarsData.update_AddressPower(_address, _AddressPower);
            }
            Cursor += length;
            if (Cursor >= MarsData.active_length()) {
                LastTimeTake = block.timestamp-(block.timestamp%86400);
            }
        } else {
            after_take(size);
        }
    }
    
    function after_take(uint256 size) private {
        require (LastTimeAfterTake+86400 < block.timestamp, "Already distributed");
        uint256 _Day = MarsData.Day();
        uint256 length = size;
        if (length > _rem[_Day].length() - CursorAfter) {
            length = _rem[_Day].length() - CursorAfter;
        }
        for (uint256 i = 0; i < length; i++) {
            if (CursorAfter + i < _rem[_Day].length()) {
                address _address = _rem[_Day].at(CursorAfter + i);
                if(MarsData.active_contains(_address)) {
                    MarsData.active_remove(_address);
                }
            }
        }
        CursorAfter += length;
        if (CursorAfter >= _rem[_Day].length()) {
            LastTimeAfterTake = block.timestamp-(block.timestamp%86400);
            Cursor = 0;
            CursorAfter = 0;
            IMD.Limit memory _Limit = MarsData.get_Limits();
            address _mint_address;
            if(address(StakePoolAddress) != address(0)) {
                _mint_address = StakePoolAddress;
            } else {
                _mint_address = AdminAddress;
            }
            MarsToken.mint_operator(address(_mint_address), _Limit.staking_limit, 0);
            MarsData.emit_AutoTake(_Day, _Limit, CacheMarsTotalPower);
            MarsData.add_Day();
            update_limit();
        }
    }



    function get_price_property(uint256 _property_type_id) public view returns (uint, uint, uint, uint) {
        IMO.PropertyTypeinfo memory propertytypeDetail = MarsObject.get_PropertyType(_property_type_id);
        require (propertytypeDetail.exist == true );
        uint256 _tokens_price = 0;
        uint256 _solars_price = propertytypeDetail.power[1];
        uint256 _3day_need_solar = (propertytypeDetail.power[0] + propertytypeDetail.power[2])*DaysReturnSolar*100/StakingMintPercent;

        uint256[2] memory _MarsTotalPower = MarsData.get_MarsTotalPower();
        if (_MarsTotalPower[0] != 0) {
            IMD.Limit memory _Limit = MarsData.get_Limits();
            uint256 _dayprice = (propertytypeDetail.power[0] + propertytypeDetail.power[2]) * _Limit.mining_limit / _MarsTotalPower[0];
            _tokens_price = _dayprice*30*propertytypeDetail.discount/100;
        } else {
            _solars_price += (propertytypeDetail.power[0] + propertytypeDetail.power[2])*30*100/StakingMintPercent;
        }
        _solars_price += _3day_need_solar;

        //ref
        uint256 ref_amount_max = 0;
        if (_tokens_price != 0 && propertytypeDetail.power[1] == 0) {
            ref_amount_max = _solars_price;
        }
        if (_tokens_price != 0 && propertytypeDetail.power[1] != 0) {
            ref_amount_max = (_solars_price-propertytypeDetail.power[1])+(propertytypeDetail.power[1]*10/100);
        }
        if (_tokens_price == 0) {
            ref_amount_max = _solars_price*10/100;
        }

        return (_tokens_price, _solars_price, _3day_need_solar, ref_amount_max); 
    }

    function buy_polygon(uint256 _x, uint256 _y) external payable notContract nonReentrant {
        uint256 _price = get_price_polygon(_x, _y);
        require (msg.value == _price);
        MarsObject.add_polygon_Ex(address(msg.sender), _x, _y);
        update_power(msg.sender);
    }


    function buy_property(uint256 _property_type_id, uint256 _polygon_id, address _referrer) external notContract nonReentrant {
        IMO.PropertyTypeinfo memory propertytypeDetail = MarsObject.get_PropertyType(_property_type_id);
        require (propertytypeDetail.exist == true); 
        require (MarsObject.Polygon(_polygon_id).account == msg.sender, "This polygon does not belong to you"); 
        write_off(msg.sender, _property_type_id, _referrer);
        MarsObject.add_property_Ex(_property_type_id, _polygon_id, 1);
        update_power(msg.sender);
    }

    function property_level_up(uint256 _property_id, address _referrer) external notContract nonReentrant {
        write_off(msg.sender, MarsObject.Property(_property_id).property_type_id, _referrer);
        MarsObject.property_level_up_Ex(msg.sender, _property_id);
        update_power(msg.sender);
    }

    function write_off(address _account, uint256 _property_type_id, address _referrer) private {
        uint[] memory _price = new uint[](4);
        (_price[0], _price[1], _price[2], _price[3]) = get_price_property(_property_type_id);
        MarsData.burn_solar(_account, _price[1]);
        MarsToken.safeTransferFrom(_account, address(this), _price[0]);
        if(ChefPoolAddress != address(0)) {
            IPOOLCHEF(ChefPoolAddress).updatePool(_price[0]);
        } else {
            MarsToken.safeTransfer(AdminAddress, _price[0]);
        }

        IMD.AddressFinance memory _AddressFinance = MarsData.get_AddressFinance(_account);
        _AddressFinance.solar_tank += _price[2];
        MarsData.update_AddressFinance(_account, _AddressFinance);

        MarsReferral.new_deduction(_account, _referrer, _property_type_id, _price[3]);
    }


    function airdrop_polygon(address _address, uint _x, uint _y) external onlyMarsAirDrop {
        MarsObject.add_polygon_Ex(address(_address), _x, _y);
    }

    function airdrop_property(uint _property_type_id, uint _polygon_id, uint _level) external onlyMarsAirDrop {
        MarsObject.add_property_Ex(_property_type_id, _polygon_id, _level);
    }

    function is_active(address _address) public view returns (bool) {
        return MarsData.active_contains(_address);
    }

    function get_price_polygon(uint _x, uint _y) public view returns (uint256) {
        uint256 _ncount = get_neighbours_new(_x, _y);
        uint256 _price = MinPricePolygon+(MinPricePolygon*_ncount/CoefPrice);
        return _price;
    }

    function get_neighbours_new(uint _x, uint _y) public view returns (uint256) {
        uint256 _ncount;
        for (uint i = 0; i < MarsObject.polygon_count(); i++) { 
            IMO.Polygoninfo memory _Polygon = MarsObject.Polygon(i);
            uint distance = MarsObject.get_distance(int(_x), int(_y), int(_Polygon.x), int(_Polygon.y));
            if (NeighboursRange > distance) {
                if(is_active(_Polygon.account)) {
                    _ncount++;
                }
            }
        }
        return _ncount;
    }


    address public AdminAddress;
    IERC20Meta public MarsToken;               // Token ERC20
    address public StakePoolAddress = address(0); // Stake
    address public ChefPoolAddress = address(0); // Farming

    uint256 public NeighboursRange; 
    uint256 public MinPricePolygon;
    uint256 public CoefPrice;            // price coefficient, where 1 is an increase in price by 100% for each guest, 10 is an increase in price by 10% for each guest,, 100 is an increase in price by 1% for each guest


    function setAddress(address _ChefPoolAddress, address _StakePoolAddress, address _AdminAddress) external onlyOwner {
        require(_AdminAddress != address(0), "not0");
        ChefPoolAddress = _ChefPoolAddress;
        StakePoolAddress = _StakePoolAddress;
        AdminAddress = _AdminAddress;
    }
    function setChefPoolApprove() external onlyOwner {
        MarsToken.safeApprove(address(ChefPoolAddress), type(uint256).max);
    }

    function setSettings(uint256 _SolarRate, uint256 _IfCrystalPowerZero, uint256 _DaysReturnSolar) external onlyOwner {
        require(_SolarRate != 0 && _IfCrystalPowerZero != 0, "not0");
        SolarRate = _SolarRate;
        IfCrystalPowerZero = _IfCrystalPowerZero;
        DaysReturnSolar = _DaysReturnSolar;
    }

    function setPricePolygon(uint256 _NeighboursRange, uint256 _MinPricePolygon, uint256 _CoefPrice) external onlyOwner {
        require(_NeighboursRange != 0 && _MinPricePolygon != 0 && _CoefPrice != 0, "not0");
        NeighboursRange = _NeighboursRange;
        MinPricePolygon = _MinPricePolygon;
        CoefPrice = _CoefPrice;
    }
    function setStakingMintPercent(uint256 _StakingMintPercent) external onlyOwner {
        require(_StakingMintPercent != 0, "not0");
        StakingMintPercent = _StakingMintPercent;
        update_limit();
    }
    

    function WithdrawalFromTheContract() external onlyOwner {
        payable(address(msg.sender)).transfer(address(this).balance);
    }

    /**
     * @notice Check if an address is a contract
     */
    modifier notContract() {
        require(!_isContract(msg.sender), "Contract not allowed");
        require(msg.sender == tx.origin, "Proxy contract not allowed");
        _;
    }
    function _isContract(address _addr) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(_addr)
        }
        return size > 0;
    }

    /**
     * @notice Allows the owner to recover tokens sent to the contract by mistake
     * @param _token: token address
     * @dev Callable by owner
     */
    function recoverFungibleTokens(IERC20Meta _token) external onlyOwner {
        uint256 amountToRecover = _token.balanceOf(address(this));
        require(amountToRecover != 0, "No token to recover");
        _token.safeTransfer(address(msg.sender), amountToRecover);
        emit TokenRecovery(address(_token), amountToRecover);
    }

    /**
     * @notice Allows the owner to recover NFTs sent to the contract by mistake
     * @param _token: NFT token address
     * @param _tokenId: tokenId
     * @dev Callable by owner
     */
    function recoverNonFungibleToken(address _token, uint256 _tokenId) external onlyOwner nonReentrant {
        IERC721(_token).safeTransferFrom(address(this), address(msg.sender), _tokenId);
        emit NonFungibleTokenRecovery(_token, _tokenId);
    }

    modifier onlyMars() {
        require(msg.sender == address(MarsObject) || msg.sender == address(MarsAirDrop), "Not Mars");
        _;
    }

    IMO public MarsObject;
    function setAddressMarsObject(IMO _MarsObject) external onlyOwner {
        MarsObject = _MarsObject;
    }
    modifier onlyMarsObject() {
        require(msg.sender == address(MarsObject), "Not MarsObject");
        _;
    }

    IMD public MarsData;
    function setAddressMarsData(IMD _MarsData) external onlyOwner {
        MarsData = _MarsData;
    }
    modifier onlyMarsData() {
        require(msg.sender == address(MarsData), "Not MarsData");
        _;
    }

    IMA public MarsAirDrop;
    function setAddressMarsAirDrop(IMA _MarsAirDrop) external onlyOwner {
        MarsAirDrop = _MarsAirDrop;
    }
    modifier onlyMarsAirDrop() {
        require(msg.sender == address(MarsAirDrop), "Not MarsAirDrop");
        _;
    }

    IMR public MarsReferral;
    function setAddressMarsReferral(IMR _MarsReferral) external onlyOwner {
        MarsReferral = _MarsReferral;
    }
    modifier onlyMarsReferral() {
        require(msg.sender == address(MarsReferral), "Not MarsReferral");
        _;
    }

    address public MarsBot;
    function setAddressMarsBot(address _MarsBot) external onlyOwner {
        MarsBot = _MarsBot;
    }
    modifier onlyMarsBot() {
        require(msg.sender == MarsBot, "Not MarsBot");
        _;
    }


}