
// File: contracts/auth/Owned.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity >=0.8.0;

/// @notice Simple single owner authorization mixin.
/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)
abstract contract Owned {
    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event OwnershipTransferred(address indexed user, address indexed newOwner);

    /*//////////////////////////////////////////////////////////////
                            OWNERSHIP STORAGE
    //////////////////////////////////////////////////////////////*/

    address public owner;

    modifier onlyOwner() virtual {
        require(msg.sender == owner, "UNAUTHORIZED");

        _;
    }

    /*//////////////////////////////////////////////////////////////
                               CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

    constructor(address _owner) {
        owner = _owner;

        emit OwnershipTransferred(address(0), _owner);
    }

    /*//////////////////////////////////////////////////////////////
                             OWNERSHIP LOGIC
    //////////////////////////////////////////////////////////////*/

    function transferOwnership(address newOwner) public virtual onlyOwner {
        owner = newOwner;

        emit OwnershipTransferred(msg.sender, newOwner);
    }
}


// File: contracts/interfaces/IERC20WithLp.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20WithLp {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    function lpCount() external view returns (uint256);

    function shareholders(uint256 index) external view returns (address);
}


// File: contracts/Lp_share.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.17;

import "./interfaces/IERC20WithLp.sol";
import "./auth/Owned.sol";

contract TokenDividends is Owned {
    uint256 public minPeriod = 1 days - 5 minutes;
    uint256 public lastLPFeefenhongTime;
    uint256 divAmount = 10958 * 1e15;

    constructor() Owned(msg.sender) {}

    function dividendThisToLpHolders(
        IERC20WithLp token,
        IERC20WithLp lpPair,
        address[] calldata dividendExempts
    ) external {
        require(
            lastLPFeefenhongTime + minPeriod <= block.timestamp,
            "next period"
        );
        require(token.balanceOf(address(this)) >= divAmount, "balance");
        lastLPFeefenhongTime = block.timestamp;

        uint256 nowbanance = divAmount;
        uint256 shareholderCount = token.lpCount();
        if (shareholderCount == 0) return;
        uint256 theLpTotalSupply = lpPair.totalSupply();
        unchecked {
            for (uint256 i = 0; i < dividendExempts.length; i++) {
                uint256 exemptsAmount = lpPair.balanceOf(dividendExempts[i]);
                theLpTotalSupply -= exemptsAmount;
            }

            for (uint256 i = 0; i < shareholderCount; i++) {
                address theHolder = token.shareholders(i);
                uint256 amount = ((nowbanance * lpPair.balanceOf(theHolder)) /
                    theLpTotalSupply);
                if (amount > 0) {
                    token.transfer(theHolder, amount);
                }
            }
        }
    }

    function emergencyWithdraw(IERC20WithLp _token, uint256 _amount)
        external
        onlyOwner
    {
        _token.transfer(msg.sender, _amount);
    }

    function setPeriod(uint256 _minPeriod) external onlyOwner {
        minPeriod = _minPeriod;
    }

    function setDivAmount(uint256 _divAmount) external onlyOwner {
        divAmount = _divAmount;
    }
}

