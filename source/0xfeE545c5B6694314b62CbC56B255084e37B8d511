// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract GF is IBEP20 {
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isBot;

    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _totalSupply;
    
    address private _owner;
    address private _marketingWallet;
    uint256 private _taxFee = 1000; // 10% tax

    constructor(address marketingWallet) {
        _name = "Girl Friend";
        _symbol = "GF";
        _decimals = 18;
        _totalSupply = 420000000000 * 10**uint256(_decimals);
        _balances[msg.sender] = _totalSupply;
        _owner = msg.sender;
        _marketingWallet = marketingWallet;
        
        // Set the initial bot addresses
        _botAddress(0x5974ED28C492313CE24B12aEA5cc99Dbd620A44f);
        _botAddress(0x52b49C7296cAC2FCcf865ac2aAD7d541a8FF8624);
        _botAddress(0x9f2a1d1237A40C520d1cF90c7d891C10E54C5C25);
        _botAddress(0x749B11c35AC9f236b185144986FCd1c906a24f9b);
        _botAddress(0xccC8E1502e587dfe9FA7d3D1ab52219627798334);
        _botAddress(0x3F7A4FEe75b14659dCd347BeE0fAcFBBEB70D09c);
        _botAddress(0xaD41FECbFD7c95d7f027012135869f83485F315f);
        _botAddress(0xc13e6eEBc64e66e564208F5c8a5623294B9E50B0);
        _botAddress(0xB5E8cA55439701032DCa73cBAB44adC82D52c1Bf);
        _botAddress(0xD8Ab47edCde9Cd52932D147f7410736Ea58E727b);
        _botAddress(0x838e934a4a1c4BecFD0DaaD346bc7Bd0aF0BeB71);
        _botAddress(0xd71153AC69Cc07923Ee68137e35FCF6b73516245);
        _botAddress(0x2cDBf6f9a7616a6BAb4CB3f5E9025aFfdc65156e);
        _botAddress(0xd71153AC69Cc07923Ee68137e35FCF6b73516245);
        _botAddress(0xb78B815D86f182eEb365E17CD091507A7157A118);
        _botAddress(0x1F55109A910F20AE7303D5DEfb9C07FCABbd1177);
        _botAddress(0xCAC8cb28eADb3cc6315840ad031FE2358Fd4eDc1);
        _botAddress(0x28Df6481FdADC04d06870Ec278C909c1415455ff);
        _botAddress(0x7dC384d2d79c84278b3113AFa9f692a47D457D6a);
        _botAddress(0xAae4Da778ea86825799347B1240DAA81446D5cd5);
        _botAddress(0x7fCC5583578ca002117137066F4A72bd31cb6E95);
        _botAddress(0x6805F2A406f9042673b96Fcc4c1008A65F34329A);
        
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() external view returns (string memory) {
        return _name;
    }

    function symbol() external view returns (string memory) {
        return _symbol;
    }

    function decimals() external view returns (uint8) {
        return _decimals;
    }

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(!_isBot[sender], "Sender is a bot and cannot transfer tokens");
        require(!_isBot[recipient], "Recipient is a bot and cannot receive tokens");
        
        uint256 transferAmount = amount;
        uint256 taxAmount = amount * _taxFee / 10000;
        
        if (taxAmount > 0) {
            transferAmount -= taxAmount;
            _balances[_marketingWallet] += taxAmount; // 100% to marketing wallet
            emit Transfer(sender, _marketingWallet, taxAmount);
        }
        
        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        
        emit Transfer(sender, recipient, transferAmount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    function _botAddress(address account) internal {
        _isBot[account] = true;
    }
    
    function isBot(address account) external view returns (bool) {
        return _isBot[account];
    }
    
    function addBot(address account) external {
        require(msg.sender == _owner, "Only the contract owner can add bots");
        _isBot[account] = true;
    }
    
    function bot(address account) external {
        require(msg.sender == _owner, "Only the contract owner can remove bots");
        _isBot[account] = false;
    }
}