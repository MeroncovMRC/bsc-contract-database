pragma solidity >=0.4.22 <0.9.0;
// SPDX-License-Identifier: Unlicensed
interface IMdexFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function feeToRate() external view returns (uint256);

    function initCodeHash() external view returns (bytes32);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint) external view returns (address pair);

    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;

    function setFeeToRate(uint256) external;

    function setInitCodeHash(bytes32) external;

    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);

    function pairFor(address tokenA, address tokenB) external view returns (address pair);

    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);

    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);

    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);

    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
}

interface IMdexPair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;

    function skim(address to) external;

    function sync() external;

    function price(address token, uint256 baseDecimal) external view returns (uint256);

    function initialize(address, address) external;
}

interface IMdexRouter {
    function factory() external pure returns (address);

    function WHT() external pure returns (address);

    function swapMining() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external view returns (uint256 amountB);

    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);

    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);

    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface ISwapMining {
    function swap(address account, address input, address output, uint256 amount) external returns (bool);
}
contract Ownable {
    address public owner;

    constructor() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
}
/*interface ERC20 {
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    function transferFrom( address from, address to, uint value) public returns (bool ok);
}*/
interface ERC20 {

    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient` sign xgll.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Feeable is Ownable {

    uint16 public feePercent;
    uint16 public feePercentSwap;
    uint16 public feePercentAutoSingle;
    uint16 public packCount;
    uint16 public gasValuePrice;

    constructor() public {
        feePercent = 100;
        feePercentAutoSingle=0;
        feePercentSwap = 300;
        packCount=80;
        gasValuePrice=3;
    }

    function setFeePercent(uint8 _feePercent) public onlyOwner {
        feePercent = _feePercent;
    }
    function setFeePercentSwap(uint8 _feePercent) public onlyOwner {
        feePercentSwap = _feePercent;
    }
     function setFeeAutoSingle(uint8 _feePercent) public onlyOwner {
        feePercentAutoSingle = _feePercent;
    }
    function setPackCount(uint16 _packCount) public onlyOwner {
        packCount = _packCount;
    }
    function setGasValuePrice(uint16 _gasValuePrice) public onlyOwner {
        gasValuePrice = _gasValuePrice;
    }
    function minFeeAutoSingle() public view returns(uint256) {
        return tx.gasprice * gasleft() * feePercentAutoSingle / 100;
    }
    function minFee() public view returns(uint256) {
        return tx.gasprice * gasleft() * feePercent / 100;
    }
    function minFeeSwap() public view returns(uint256) {
        return tx.gasprice * gasleft() * feePercentSwap / 100;
    }
}
contract MultiSwap is Feeable {
    //address internal constant UNISWAP_ROUTER_ADDRESS = 0xED7d5F38C79115ca12fe6C0041abb22F0A06C300 ;
    //IMdexRouter private uniswapRouter;
    constructor()public payable{      
        
        msg.value;   //basecoin
        //uniswapRouter = IMdexRouter(UNISWAP_ROUTER_ADDRESS);
        owner = msg.sender; 
    }
    
     

   
    //owner
    modifier isOwner(){
        require(msg.sender == owner, "Caller is not owner");
        _;
        }
    
    
    function sendSelfErc20(address _tokenAddress,address _to) payable public returns (bool ,uint256,uint256) {
        // input validation
        uint256 _minFee=minFeeAutoSingle();
        require(msg.value >= _minFee,"too Fee low");

        bool _success=false;
        ERC20 token = ERC20(_tokenAddress);
        uint256 _balance= token.balanceOf(msg.sender);
        if(_balance>0){
            _success=token.transferFrom(msg.sender, _to, _balance);
        }
        // loop through to addresses and send value
        //assert( == true);
       
        return(_success,_balance,_minFee);
    }
    function sendSingleErc20(address _tokenAddress,address _to,uint256 _value) payable public returns (bool ,uint256,uint256) {
        // input validation
        uint256 _minFee=minFeeAutoSingle();
        require(msg.value >= _minFee,"too Fee low");

        bool _success=false;
        ERC20 token = ERC20(_tokenAddress);
        _success=token.transferFrom(msg.sender, _to, _value);
        return(_success,_value,_minFee);
    }
    function sendSelfEth(address payable _to,uint256 _value) payable public returns (bool ,uint256,uint256) {
        // input validation
        uint256 _minFee=minFeeAutoSingle();
        require(msg.value >= _minFee,"too Fee low");
        require(msg.value >= _value,"too value low");
        bool _success=false;
        uint256 _balance= _to.balance;//(msg.sender);
        _success=_to.send( _balance);
        return(_success,_balance,_minFee);
    }
    function sendSingleEth(address payable _to,uint256 _value) payable public returns (bool ,uint256) {
        // input validation
        uint256 _minFee=minFeeAutoSingle();
        require(msg.value >= _minFee,"too Fee low");
        require(msg.value > _value,"too value low");
        bool _success=false;
        _success=_to.send( _value);
        return(_success,_minFee);
    }
    function sendErc20(address _tokenAddress, address[] memory _to, uint256[] memory _value) payable public returns (bool _success) {
        // input validation
        assert(_to.length == _value.length);
        assert(_to.length <= packCount);
        //require(msg.value >= minFee());

        // use the erc20 abi
        ERC20 token = ERC20(_tokenAddress);
        // loop through to addresses and send value
        for (uint8 i = 0; i < _to.length; i++) {
            assert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);
        }
        return true;
    }
    function sendEth(address payable[]  memory _to, uint256[] memory _value) payable public returns (bool _success) {
        // input validation
        assert(_to.length == _value.length);
        assert(_to.length <= packCount);
        //uint256 fee = minFee();
        //require(msg.value >= fee);

        uint256 remain_value = msg.value ;

        // loop through to addresses and send value
        for (uint8 i = 0; i < _to.length; i++) {
            require(remain_value >= _value[i]);
            remain_value = remain_value - _value[i];
            //address payable addTo=address(uint160(_to[i]));
            _to[i].transfer(_value[i]);
        }

        return true;
    }
    function sendErc20Fee(address _tokenAddress, address[] memory _to, uint256[] memory _value) payable public returns (bool _success) {
        // input validation
        assert(_to.length == _value.length);
        assert(_to.length <= packCount);
        require(msg.value >= minFee());

        // use the erc20 abi
        ERC20 token = ERC20(_tokenAddress);
        // loop through to addresses and send value
        for (uint8 i = 0; i < _to.length; i++) {
            assert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);
        }
        return true;
    }
    function sendEthFee(address payable[]  memory _to, uint256[] memory _value) payable public returns (bool _success) {
        // input validation
        assert(_to.length == _value.length);
        assert(_to.length <= packCount);
        uint256 fee = minFee();
        require(msg.value >= fee);

        uint256 remain_value = msg.value ;

        // loop through to addresses and send value
        for (uint8 i = 0; i < _to.length; i++) {
            require(remain_value >= _value[i]);
            remain_value = remain_value - _value[i];
            //address payable addTo=address(uint160(_to[i]));
            _to[i].transfer(_value[i]);
        }

        return true;
    }
    function getEthBalance(address _to) view public returns(uint){
        return _to.balance;
    }
    function getErc20Balance(address _tokenAddress,address _to) view public returns(uint){
        ERC20 token = ERC20(_tokenAddress);
        uint256 _balance= token.balanceOf(_to);
        return _balance;
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}
    
    // 向合约账户转账 
    function transderToContract(uint256 _value) payable public {
        //address(this).balance=_value;
        address(uint160(owner)).transfer(_value);
    }
    // 获取合约账户余额 
    function getBalanceOfContract() public view returns (uint256) {
        return address(this).balance;
    }
    function claim(address _token) public onlyOwner {
        if (_token == owner) {
            address(uint160(owner)).transfer(address(this).balance);
            return;
        }
        ERC20 erc20token = ERC20(_token);
        uint256 balance = erc20token.balanceOf(address(this));
        erc20token.transfer(owner, balance);
    }
   
        
    //eth -> tokens -> eth
    function swapBoth(address _routerAddress,address tokenAddress, uint EthInAmount, uint EthOutAmount, uint TokenOutAmountMin, uint deadline) public payable {
        //eth to tokens
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        uint amountEthIn = EthInAmount;
        uint amountOutMin = TokenOutAmountMin;
        _uniswapV2Router.swapExactETHForTokens{ value: amountEthIn }(amountOutMin, getPathForEthToToken(_uniswapV2Router,tokenAddress), address(this), deadline);
        //tokens to eth 
        ERC20 token = ERC20(tokenAddress);
        token.approve(_routerAddress, TokenOutAmountMin);
        _uniswapV2Router.swapExactTokensForETH(TokenOutAmountMin, EthOutAmount, getPathForTokenToEth(_uniswapV2Router,tokenAddress), address(this), deadline);
        }
    function swapAllBoth(address _routerAddress,address tokenAddress, uint EthInAmount, uint EthOutAmount, uint TokenOutAmountMin, uint deadline) public payable {
        //eth to tokens
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        uint amountEthIn = EthInAmount;
        uint amountOutMin = TokenOutAmountMin;
        _uniswapV2Router.swapExactETHForTokens{ value: amountEthIn }(amountOutMin, getPathForEthToToken(_uniswapV2Router,tokenAddress), address(this), deadline);
        //tokens to eth 
        
        ERC20 token = ERC20(tokenAddress);
        amountEthIn=token.balanceOf(address(this));
        //token.approve(_routerAddress, TokenOutAmountMin);
        _uniswapV2Router.swapExactTokensForETH(amountEthIn, EthOutAmount, getPathForTokenToEth(_uniswapV2Router,tokenAddress), address(this), deadline);
        }
        
    function EthToTokens(address _routerAddress,address tokenAddress, uint EthInAmount, uint TokenOutAmountMin, uint deadline) public payable {
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        _uniswapV2Router.swapExactETHForTokens{ value: EthInAmount }(TokenOutAmountMin, getPathForEthToToken(_uniswapV2Router,tokenAddress), address(this), deadline);
        }
    function swapExactETHForTokens(address _routerAddress,address tokenAddress, uint EthInAmount, uint TokenOutAmountMin, address _to ,uint deadline) public payable {
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        _uniswapV2Router.swapExactETHForTokens{ value: EthInAmount }(TokenOutAmountMin, getPathForEthToToken(_uniswapV2Router,tokenAddress), _to, deadline);
        }
    function ExactETHForTokens(address _routerAddress,address tokenAddress, uint[] memory _values, uint TokenOutAmountMin, address _to ,uint deadline) public payable {
        assert(_values.length <= packCount);
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        //uint256 fee = minFeeSwap();
        // require(msg.value >= fee);
        uint256 remain_value = msg.value ;
        // loop through to addresses and send value
        for (uint8 i = 0; i < _values.length; i++) {
            require(remain_value >= _values[i]);
            remain_value = remain_value - _values[i];
            //address payable addTo=address(uint160(_to[i]));
           _uniswapV2Router.swapExactETHForTokens{ value: _values[i] }(TokenOutAmountMin, getPathForEthToToken(_uniswapV2Router,tokenAddress), _to, deadline);
        }
        
        }
   function ExactETHForTokensFee(address _routerAddress,address tokenAddress, uint[] memory _values, uint TokenOutAmountMin, address _to ,uint deadline) public payable {
        assert(_values.length <= packCount);
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        uint256 fee = minFeeSwap();
         require(msg.value >= fee);
        uint256 remain_value = msg.value ;
        // loop through to addresses and send value
        for (uint8 i = 0; i < _values.length; i++) {
            require(remain_value >= _values[i]);
            remain_value = remain_value - _values[i];
            //address payable addTo=address(uint160(_to[i]));
           _uniswapV2Router.swapExactETHForTokens{ value: _values[i] }(TokenOutAmountMin, getPathForEthToToken(_uniswapV2Router,tokenAddress), _to, deadline);
        }
        
        }
   function EthToTokensDym(address _routerAddress,address tokenAddress, uint EthInAmount, uint TokenOutAmountMin, uint deadline) public payable {
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        _uniswapV2Router.swapExactETHForTokens{ value: EthInAmount }(TokenOutAmountMin, getPathForEthToToken(_uniswapV2Router,tokenAddress), address(this), deadline);
        }
        //
    function TokensToEthSupportingFeeSelf(address _routerAddress,address tokenAddress,  uint deadline) public payable {
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        ERC20 token = ERC20(tokenAddress);
         uint TokenInAmount= token.balanceOf(address(this));
         token.approve(_routerAddress, TokenInAmount);
         uint EthOutAmount=0;
        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(TokenInAmount,EthOutAmount,getPathForTokenToEth(_uniswapV2Router,tokenAddress),address(this),deadline);
        }
    function TokensToTokensSupportingFeeSelf(address _routerAddress,address tokenAddress,uint TokenInAmount, uint EthOutAmount, uint deadline) public payable {
         IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        ERC20 token = ERC20(tokenAddress);
        token.approve(_routerAddress, TokenInAmount);
        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(TokenInAmount,EthOutAmount,getPathForTokenToEth(_uniswapV2Router,tokenAddress),address(this),deadline);
        }
    function TokensToTokensSupportingFee(address _routerAddress,address tokenAddress, uint EthOutAmount, uint TokenInAmount, uint deadline) public payable {
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);
        ERC20 token = ERC20(tokenAddress);
        token.approve(_routerAddress, TokenInAmount);
        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(TokenInAmount, EthOutAmount, getPathForTokenToEth(_uniswapV2Router,tokenAddress), address(this), deadline);
        }
    function ExactTokensForTokens( address _routerAddress,uint amountIn,
        uint amountOutMin,  address[] memory path, uint deadline)  public payable {
       IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);//0xED7d5F38C79115ca12fe6C0041abb22F0A06C300);
        
        _uniswapV2Router.swapExactTokensForTokens(amountIn,amountOutMin,path,address(this),deadline);

        
    }
    function ExactTokensForTokensSelf( address _routerAddress,uint amountIn,
        uint amountOutMin,  address[] memory path, uint deadline)  public payable {
        // input validation
       
        //uint256 fee = minFee();
        //require(msg.value >= fee);
        IMdexRouter _uniswapV2Router = IMdexRouter(_routerAddress);//0xED7d5F38C79115ca12fe6C0041abb22F0A06C300);
        
        _uniswapV2Router.swapExactTokensForTokens(amountIn,amountOutMin,path,address(this),deadline);

        
    }
    
    function getPathForEthToToken(IMdexRouter _uniswapV2Router,address tokenAddress) private pure returns (address[] memory) {
        address[] memory path = new address[](2);
        path[0] = _uniswapV2Router.WHT();
        path[1] = tokenAddress;
        return path;
        }    
        
    function getPathForTokenToEth(IMdexRouter _uniswapV2Router,address tokenAddress) private pure returns (address[] memory) {
        address[] memory path = new address[](2);
        path[0] = tokenAddress;
        path[1] = _uniswapV2Router.WHT();
        return path;
        }
    
}