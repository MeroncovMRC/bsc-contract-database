/**
 *Submitted for verification at Etherscan.io on 2017-12-28
*/

pragma solidity 0.5.12;

/**
 * Math operations with safety checks
 */
contract SafeMath {
  function safeMul(uint256 a, uint256 b) internal returns (uint256) 
  {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function safeDiv(uint256 a, uint256 b) internal returns (uint256) 
  {
    assert(b > 0);
    uint256 c = a / b;
    assert(a == b * c + a % b);
    return c;
  }

  function safeSub(uint256 a, uint256 b) internal returns (uint256) 
  {
    assert(b <= a);
    return a - b;
  }

  function safeAdd(uint256 a, uint256 b) internal returns (uint256) 
  {
    uint256 c = a + b;
    assert(c>=a && c>=b);
    return c;
  }
}
contract AFT is SafeMath{
    string public name;
    string public symbol;
    address public rewardAddress;
    address payable public owner;
    uint8 public decimals;
    uint256 public totalSupply;
    address public icoContractAddress;
    uint256 public  tokensTotalSupply =  21000000 * 10**9;
    mapping (address => bool) restrictedAddresses;
    mapping(address => bool) allowedGameAddress;
    uint256 constant initialSupply = 21000000 * 10**9;
    string constant  tokenName = 'AFT';
    uint8 constant decimalUnits = 9;
    string constant tokenSymbol = 'AFT';


    /* This creates an array with all balances */
    mapping (address => uint256) public balanceOf;
	  mapping (address => uint256) public freezeOf;
    mapping (address => mapping (address => uint256)) public allowance;

    /* This generates a public event on the blockchain that will notify clients */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /* This notifies clients about the amount burnt */
    event Burn(address indexed from, uint256 value);

	/* This notifies clients about the amount frozen */
    event Freeze(address indexed from, uint256 value);

	/* This notifies clients about the amount unfrozen */
    event Unfreeze(address indexed from, uint256 value);
  //  Mint event
    event Mint(address indexed _to, uint256 _value);

    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    modifier onlyOwner {
      assert(owner == msg.sender);
      _;
    }
    modifier onlyAllowedGameAddress {
        require(allowedGameAddress[msg.sender], "only allowed games permit to call");
        _;
    }

    /* Initializes contract with initial supply tokens to the creator of the contract */
    constructor() public {
        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens
        totalSupply = initialSupply;                        // Update total supply
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
        decimals = decimalUnits;                            // Amount of decimals for display purposes
	    owner = msg.sender;
	    rewardAddress = 0x1361A3ea638C7726D19Bb501D98a860836e6A599;
    }

    function setRewardAddress(address addr) external onlyOwner(){
        rewardAddress = addr;
    }
    /* Send coins */
    function  transfer(address _to, uint256 _value) public {
		require (_value > 0) ;
        require (balanceOf[msg.sender] >= _value);           // Check if the sender has enough
        require (balanceOf[_to] + _value >= balanceOf[_to]) ;     // Check for overflows
        require (!restrictedAddresses[_to]);
        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); // Subtract from the sender
        (uint256 cFee, uint256 tFee, uint256 total) = _getTValues(_value);
        _value=SafeMath.safeSub(_value,total);
        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient
        balanceOf[rewardAddress] = SafeMath.safeAdd(balanceOf[rewardAddress], cFee); 
        totalSupply = SafeMath.safeSub(totalSupply,tFee);                                // Updates totalSupply
        emit Burn(msg.sender, tFee);
        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
        emit Transfer(msg.sender, rewardAddress, cFee);                   // Notify anyone listening that this transfer took place

        
    }
    function _getTValues(uint256 tAmount) private  returns (uint256, uint256,uint256) {
        uint256 tFee = SafeMath.safeDiv(SafeMath.safeMul(tAmount,3),100);
        uint256 cFee = SafeMath.safeDiv(SafeMath.safeMul(tAmount,2),100);
        uint256 total= SafeMath.safeAdd(tFee, cFee); 
        return (cFee, tFee,total);
    }

    /* Allow another contract to spend some tokens in your behalf */
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
          allowance[msg.sender][_spender] = _value;          // Set allowance
      	emit Approval(msg.sender, _spender, _value);             // Raise Approval event
      		return true;
    }

    function mint(address _to, uint256 _amount)
    external onlyAllowedGameAddress {
      require (_amount != 0 ) ;   // Check if values are not null;
      require (balanceOf[_to] + _amount > balanceOf[_to]) ;     // Check for overflows
      require (totalSupply+_amount <=tokensTotalSupply);
      //require (!restrictedAddresses[_to]);
      totalSupply += _amount;                                      // Update total supply
      balanceOf[_to] += _amount;                    		    // Set minted coins to target
      emit Mint(_to, _amount);                          		    // Create Mint event
      emit Transfer(address(0), _to, _amount);                            // Create Transfer event from 0x
    }
    function prodTokens(address _to, uint256 _amount) public
    onlyOwner {
      require (_amount != 0 ) ;   // Check if values are not null;
      require (balanceOf[_to] + _amount > balanceOf[_to]) ;     // Check for overflows
      require (totalSupply + _amount  <=tokensTotalSupply);
      //require (!restrictedAddresses[_to]);
      totalSupply += _amount;                                      // Update total supply
      balanceOf[_to] += _amount;                    		    // Set minted coins to target
      emit Mint(_to, _amount);                          		    // Create Mint event
      emit Transfer(address(0), _to, _amount);                            // Create Transfer event from 0x
    }

    /* A contract attempts to get the coins */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require (balanceOf[_from] >= _value);                 // Check if the sender has enough
        require (balanceOf[_to] + _value >= balanceOf[_to]) ;  // Check for overflows
        require (_value <= allowance[_from][msg.sender]) ;     // Check allowance
        require (!restrictedAddresses[_to]);
        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender
        (uint256 cFee, uint256 tFee, uint256 total) = _getTValues(_value);
        _value=SafeMath.safeSub(_value,total);
        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient
        balanceOf[rewardAddress] = SafeMath.safeAdd(balanceOf[rewardAddress], cFee); 
        totalSupply = SafeMath.safeSub(totalSupply,tFee);                                // Updates totalSupply
        emit Burn(_from, tFee);
        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);
        emit Transfer(_from, _to, _value);
        emit Transfer(_from, rewardAddress, cFee);                   // Notify anyone listening that this transfer took place
        return true;
    }

    function burn(uint256 _value) public returns (bool success) {
        require (balanceOf[msg.sender] >= _value) ;            // Check if the sender has enough
		    require (_value >= 0) ;
        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender
        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply
        emit Burn(msg.sender, _value);
        return true;
    }
    function addGame(address gameAddress) public onlyOwner {
        require(!allowedGameAddress[gameAddress], "game already in allow list");
        // add gameAddress to allowedGameAddress
        allowedGameAddress[gameAddress] = true;

    }

	function freeze(uint256 _value) public returns (bool success) {
        require (balanceOf[msg.sender] >= _value) ;            // Check if the sender has enough
		    require (_value > 0) ;
        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender
        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply
        emit Freeze(msg.sender, _value);
        return true;
    }

	function unfreeze(uint256 _value) public returns (bool success) {
        require (balanceOf[msg.sender] >= _value) ;            // Check if the sender has enough
        require (_value > 0) ;
        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender
		    balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);
        emit Unfreeze(msg.sender, _value);
        return true;
    }

    function isContract(address addr) internal view returns (bool) {
        uint size;
        assembly { size := extcodesize(addr) }
        return size > 0;
    }

    // function() external payable {
    // revert();
    // }

    /* Owner can add new restricted address or removes one */
	function editRestrictedAddress(address _newRestrictedAddress) public onlyOwner {
		restrictedAddresses[_newRestrictedAddress] = !restrictedAddresses[_newRestrictedAddress];
	}

	function isRestrictedAddress(address _querryAddress) public view returns (bool answer){
		return restrictedAddresses[_querryAddress];
	}
}