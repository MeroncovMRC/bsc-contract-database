pragma solidity ^0.8.0;

/*
    GMEB
*/

// SPDX-License-Identifier: MIT
/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor (string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}


contract Tax {

    event SetBurnRatio(uint _newBurnRatio);
    event SetLiquidRatio(uint _newLiquidRatio);
    event SetCharityRatio(uint _newCharityRatio);
    event SetCharityAddress(address _newCharityAddress);

    event SetMinAutoLiquid(uint _newMinAutoLiquid);

    uint private _burnRatio;
    uint private _liquidRatio;
    uint private _charityRatio;

    uint constant denominator = 10000;

    uint private _minAutoLiquid;

    address private _charityAddress;

    uint internal _totalTax;

    function _setBurnRatio(
        uint _newBurnRatio
    )
        internal
    {
        _burnRatio = _newBurnRatio;
        emit SetBurnRatio(_newBurnRatio);
    }

    function _setLiquidRatio(
        uint _newLiquidRatio
    )
        internal
    {
        _liquidRatio = _newLiquidRatio;
        emit SetLiquidRatio(_newLiquidRatio);
    }

    function _setCharityRatio(
        uint _newCharityRatio
    )
        internal
    {
        _charityRatio = _newCharityRatio;
        emit SetCharityRatio(_newCharityRatio);
    }

    function _setCharityAddress(
        address _newCharityAddress
    )
        internal
    {
        _charityAddress = _newCharityAddress;
        emit SetCharityAddress(_newCharityAddress);
    }

    function _setMinAutoLiquid(
        uint _newMinAutoLiquid
    )
        internal
    {
        _minAutoLiquid = _newMinAutoLiquid;
        emit SetMinAutoLiquid(_newMinAutoLiquid);
    }

    function burnRatio()
        public
        view
        returns(uint)
    {
        return _burnRatio;
    }

    function liquidRatio()
        public
        view
        returns(uint)
    {
        return _liquidRatio;
    }

    function charityRatio()
        public
        view
        returns(uint)
    {
        return _charityRatio;
    }

    function charityAddress()
        public
        view
        returns(address)
    {
        return _charityAddress;
    }

    function minAutoLiquid()
        public
        view
        returns(uint)
    {
        return _minAutoLiquid;
    }

    function getFeeAmounts(
        uint _amount
    )
        public
        view
        returns(uint burnA, uint taxA)
    {
        uint tmp = _amount / denominator;
        burnA = tmp * _burnRatio;
        taxA = tmp * (_liquidRatio + _charityRatio);
    }

    function _splitLiquidCharityFromTax(
        uint _maxAmount
    )
        internal
        returns(uint liquidA, uint charityA)
    {
        uint _amount = _maxAmount > _totalTax ? _totalTax : _maxAmount;
        uint tmp = _amount / (_liquidRatio + _charityRatio);
        liquidA = tmp * _liquidRatio;
        charityA = _amount - liquidA;
        // reset
        _totalTax -= _amount;
    }
}


// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.
/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


contract Sale {
    using SafeMath for uint;

    event SetPrice(uint _newPrice);
    event SetSaleAmount(uint _oldSaleAmount, uint _newSaleAmount);
    event SetSaleOwner(address payable _newSaleOwner);

    event Buy(uint _tokenAmount);

    uint private _price;
    uint private _saleAmount;

    address payable private _saleOwner;

    function _setPrice(
        uint _newPrice
    )
        internal
    {
        _price = _newPrice;
        emit SetPrice(_newPrice);
    }

    function _setSaleAmount(
        uint _newSaleAmount
    )
        internal
    {
        emit SetSaleAmount(_saleAmount, _newSaleAmount);
        _saleAmount = _newSaleAmount;
    }

    function _setSaleOwner(
        address payable _newSaleOwner
    )
        internal
    {
        _saleOwner = _newSaleOwner;
        emit SetSaleOwner(_newSaleOwner);
    }

    function _saleStop()
        internal
    {
        _setSaleAmount(0);
    }

    function _buy(
        uint value
    )
        internal
        returns(uint)
    {
        uint tokenAmount = value.mul(1 ether).div(_price);
        _saleAmount = _saleAmount.sub(tokenAmount);
        emit Buy(tokenAmount);
        _saleOwner.transfer(value);
        return tokenAmount;
    }

    function saleOwner()
        public
        view
        returns(address payable)
    {
        return _saleOwner;
    }

    function price()
        public
        view
        returns(uint)
    {
        return _price;
    }

    function saleAmount()
        public
        view
        returns(uint)
    {
        return _saleAmount;
    }
}


contract Referral {
    event AddRef(address _address, address _ref);
    event SetRefPercents(uint _newF1Percent, uint _newF2Percent, uint _newF3Percent);

    mapping(address => address) private _refOf;

    uint private _f1Percent;
    uint private _f2Percent;
    uint private _f3Percent;

    function _setRefPercents(
        uint _newF1Percent,
        uint _newF2Percent,
        uint _newF3Percent
    )
        internal
    {
        _f1Percent = _newF1Percent;
        _f2Percent = _newF2Percent;
        _f3Percent = _newF3Percent;
        emit SetRefPercents(_newF1Percent, _newF2Percent, _newF3Percent);
    }

    function _addRef(
        address _address,
        address _ref
    )
        internal
    {
        if (_refOf[_address] == address(0x0) && _address != _ref) {
            _refOf[_address] = _ref;
            emit AddRef(_address, _ref);
        }
    }

    function refOf(
        address _address
    )
        public
        view
        returns(address)
    {
        return _refOf[_address];
    }

    function f1Percent()
        public
        view
        returns(uint)
    {
        return _f1Percent;
    }

    function f2Percent()
        public
        view
        returns(uint)
    {
        return _f2Percent;
    }

    function f3Percent()
        public
        view
        returns(uint)
    {
        return _f3Percent;
    }
}


contract Claim {
    modifier onlyNotClaimed(address _claimer) {
        require(!_isClaimed[_claimer], "already claimed!");
        _;
    }

    mapping(address => bool) private _isClaimed;

    uint private _claimCost;
    uint private _claimAmount;
    uint private _refClaimAmount;

    bool private _isClaimStopped;

    function _stopClaim()
        internal
    {
        _isClaimStopped = true;
    }

    function _startClaim()
        internal
    {
        _isClaimStopped = false;
    }

    function _setClaimCost(
        uint _newClaimCost
    )
        internal
    {
        _claimCost = _newClaimCost;
    }

    function _setClaimAmount(
        uint _newClaimAmount
    )
        internal
    {
        _claimAmount = _newClaimAmount;
    }

    function _setRefClaimAmount(
        uint _newRefClaimAmount
    )
        internal
    {
        _refClaimAmount = _newRefClaimAmount;
    }

    function _claim(
        address _claimer
    )
        internal
        onlyNotClaimed(_claimer)
        returns(uint, uint)
    {
        require(!_isClaimStopped, "Claimming programm has been stopped!");
        _isClaimed[_claimer] = true;
        if (_claimCost > 0) {
            require(msg.value >= _claimCost, "claim cost a bit bnb!");
        }
        return (_claimAmount, _refClaimAmount);
    }

    function isClaimed(
        address _claimer
    )
        public
        view
        returns(bool)
    {
        return _isClaimed[_claimer];
    }

    function isClaimStopped()
        public
        view
        returns(bool)
    {
        return _isClaimStopped;
    }

    function claimCost()
        public
        view
        returns(uint)
    {
        return _claimCost;
    }

    function claimAmount()
        public
        view
        returns(uint)
    {
        return _claimAmount;
    }

    function refClaimAmount()
        public
        view
        returns(uint)
    {
        return _refClaimAmount;
    }
}


contract Admin {
    modifier onlyAdmin() {
        require(msg.sender == _admin, "is not admin!");
        _;
    }

    address private _admin;

    constructor (
        address _initAdmin
    )
    {
        _admin = _initAdmin;
    }

    function setAdmin(
        address _newAdmin
    )
        public
        onlyAdmin
    {
        _admin = _newAdmin;
    }

    function admin()
        public
        view
        returns(address)
    {
        return _admin;
    }
}


contract Whitelist {
    event AddToWhitelist(address _address);
    event RemoveFromWhitelist(address _address);

    mapping(address => bool) private _isWhitelisted;

    function _addToWhitelist(
        address _address
    )
        internal
    {
        if (_isWhitelisted[_address]) {
            return;
        }
        _isWhitelisted[_address] = true;
        emit AddToWhitelist(_address);
    }

    function _removeFromWhitelist(
        address _address
    )
        internal
    {
        if (!_isWhitelisted[_address]) {
            return;
        }
        _isWhitelisted[_address] = false;
        emit RemoveFromWhitelist(_address);
    }

    function isWhitelisted(
        address _address
    )
        public
        view
        returns(bool)
    {
        return _isWhitelisted[_address];
    }
}


contract Settings is Admin, Tax, Sale, Referral, Claim, Whitelist {
    constructor (
        address _initAdmin
    )
        Admin(_initAdmin)
    {
    }

    /*
        REFERRAL
    */

    function setRefPercents(
        uint _newF1Percent,
        uint _newF2Percent,
        uint _newF3Percent
    )
        public
        onlyAdmin
    {
        _setRefPercents(_newF1Percent, _newF2Percent, _newF3Percent);
    }

    /*
        SALE
    */

    function setPrice(
        uint _newPrice
    )
        public
        onlyAdmin
    {
        _setPrice(_newPrice);
    }

    function setSaleAmount(
        uint _newSaleAmount
    )
        public
        onlyAdmin
    {
        _setSaleAmount(_newSaleAmount);
    }

    function setSaleOwner(
        address payable _newSaleOwner
    )
        public
        onlyAdmin
    {
        _setSaleOwner(_newSaleOwner);
    }

    function saleStop()
        public
        onlyAdmin
    {
        _saleStop();
    }

    /*
        TAX
    */

    function setBurnRatio(
        uint _newBurnRatio
    )
        public
        onlyAdmin
    {
        _setBurnRatio(_newBurnRatio);
    }

    function setLiquidRatio(
        uint _newLiquidRatio
    )
        public
        onlyAdmin
    {
        _setLiquidRatio(_newLiquidRatio);
    }

    function setCharityRatio(
        uint _newCharityRatio
    )
        public
        onlyAdmin
    {
        _setCharityRatio(_newCharityRatio);
    }

    function setCharityAddress(
        address _newCharityAddress
    )
        public
        onlyAdmin
    {
        _setCharityAddress(_newCharityAddress);
    }

    function setMinAutoLiquid(
        uint _newMinAutoLiquid
    )
        public
        onlyAdmin
    {
        _setMinAutoLiquid(_newMinAutoLiquid);
    }

    /*
        WHITELIST
    */

    function addToWhitelist(
        address _address
    )
        public
        onlyAdmin
    {
        _addToWhitelist(_address);
    }

    function removeFromWhitelist(
        address _address
    )
        public
        onlyAdmin
    {
        _removeFromWhitelist(_address);
    }

    /*
        CLAIM
    */
    function setClaimCost(
        uint _newClaimCost
    )
        public
        onlyAdmin
    {
        _setClaimCost(_newClaimCost);
    }

    function setClaimAmount(
        uint _newClaimAmount
    )
        public
        onlyAdmin
    {
        _setClaimAmount(_newClaimAmount);
    }

    function setRefClaimAmount(
        uint _newRefClaimAmount
    )
        public
        onlyAdmin
    {
        _setRefClaimAmount(_newRefClaimAmount);
    }

    function stopClaim()
        public
        onlyAdmin
    {
        _stopClaim();
    }

    function startClaim()
        public
        onlyAdmin
    {
        _startClaim();
    }
}


interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract AntfToken is ERC20, Settings {
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    address constant public uniswapV2FactoryAddr = address(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);
    address constant public uniswapV2RouterAddr = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    address constant public WBNBAddr = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;

    address constant private ZERO_ADDRESS = address(0x0);

    uint private _lastAutoSwapLiquidBlock;

    constructor (string memory name, string memory symbol, address _initAdmin)
        ERC20(name, symbol)
        Settings(_initAdmin)
    {
        uniswapV2Router = IUniswapV2Router02(uniswapV2RouterAddr);
         // Create a uniswap pair for this new token
        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2FactoryAddr)
            .createPair(address(this), WBNBAddr);
        uniswapV2Pair = _uniswapV2Pair;

        _addToWhitelist(address(this));

        uint initTotal = 1e6 * 1e9 ether;
        uint initContractBalance = 275000 * 1e9 ether;
        _mint(address(this), initContractBalance);
        _mint(_initAdmin, initTotal - initContractBalance);
        // Init
        _setSaleAmount(initTotal);
        _setMinAutoLiquid(totalSupply() * 5 / 10000);

        _setSaleOwner(payable(0x5eD06B57A82dDdf9A5328e5035253EDb247d65ff));
        _setCharityAddress(payable(0xDf2dF79841a1cc0eddA5fd20C5a2fd67406d6cBf));

        // denominator = 10000
        _setBurnRatio(200);
        _setLiquidRatio(300);
        _setCharityRatio(300);

        _setClaimAmount(100 * 1e6 ether);
        _setRefClaimAmount(50 * 1e6 ether);

        // 1 bnb = 300 bil tokens
        uint oneBnb = 320 * 1e9;
        _setPrice(1 ether / oneBnb);

        _setRefPercents(30, 15, 5);
    }

    receive() external payable {}

    function _autoSwapAndLiquify(address _from) internal {
        if (_totalTax >= minAutoLiquid() && _from != uniswapV2Pair) {
            if (block.number != _lastAutoSwapLiquidBlock) {
                _lastAutoSwapLiquidBlock = block.number;
                swapAndLiquify();
            }
        }
    }

    function swapAndLiquify() public {
        (uint liquidA, uint charityA) = _splitLiquidCharityFromTax(minAutoLiquid());
        swapTokensForEth(charityA, charityAddress());
        // split the contract balance into halves
        uint256 half = liquidA / 2;
        uint256 otherHalf = liquidA - half;
        // swap tokens for ETH
        uint initCoinBalance = address(this).balance;
        swapTokensForEth(half, address(this)); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered

        // how much ETH did we just swap into?
        uint256 addedCoinBalance = address(this).balance - initCoinBalance;

        // add liquidity to uniswap
        addLiquidity(otherHalf, addedCoinBalance, charityAddress());
        
        emit SwapAndLiquify(half, addedCoinBalance, otherHalf);
    }

    function swapTokensForEth(uint256 tokenAmount, address to) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            to,
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount, address lpOwner) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            lpOwner,
            block.timestamp
        );
    }

    function _tax(
        address sender,
        address recipient,
        uint amount
    )
        internal
        returns(uint)
    {
        if (isWhitelisted(sender) || isWhitelisted(recipient)) {
            return amount;
        }
        (uint burnA, uint taxA) = getFeeAmounts(amount);
        _burn(sender, burnA);
        _transfer(sender, address(this), taxA);
        _totalTax += taxA;

        require(taxA + burnA < amount, "invalid tax amount");
        return amount - taxA - burnA;
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _autoSwapAndLiquify(_msgSender());
        uint afterTaxAmount = _tax(_msgSender(), recipient, amount);
        _transfer(_msgSender(), recipient, afterTaxAmount);

        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _autoSwapAndLiquify(sender);
        uint afterTaxAmount = _tax(sender, recipient, amount);
        _transfer(sender, recipient, afterTaxAmount);

        uint256 currentAllowance = allowance(sender, _msgSender());
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /*
        Sale
    */

    function buy(
        address _ref
    )
        public
        payable
    {
        uint tokenAmount = _buy(msg.value);
        _transfer(address(this), _msgSender(), tokenAmount);
        _addRef(_msgSender(), _ref);

        address f1 = refOf(_msgSender());
        // stop if F1 not found
        if (f1 == ZERO_ADDRESS) {
            return;
        }
        uint onePercent = tokenAmount / 100;
        _transfer(address(this), f1, onePercent * f1Percent());

        address f2 = refOf(f1);
        // stop if F2 not found
        if (f2 == ZERO_ADDRESS) {
            return;
        }
        _transfer(address(this), f2, onePercent * f2Percent());

        address f3 = refOf(f2);
        // stop if F3 not found
        if (f3 == ZERO_ADDRESS) {
            return;
        }
        _transfer(address(this), f3, onePercent * f3Percent());
    }

    /*
        CLAIM
    */

    function claim(
        address _ref
    )
        public
        payable
    {
        require(tx.origin == msg.sender, "spammer go away!");
        (uint claimAmount, uint refClaimAmount) = _claim(msg.sender);
        _transfer(address(this), _msgSender(), claimAmount);
        _transfer(address(this), _ref, refClaimAmount);
    }

    /*
        SaleOwner
    */

    function withdraw(
        uint _amount
    )
        public
        onlyAdmin
    {
        _transfer(address(this), saleOwner(), _amount);
        require(balanceOf(address(this)) >= _totalTax, "withdraw too much!");
    }
}