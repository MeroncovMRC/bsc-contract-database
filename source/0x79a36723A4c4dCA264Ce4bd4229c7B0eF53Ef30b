// FairSwap LP tokens timelock contract

// "SPDX-License-Identifier: UNLICENSED"
pragma solidity =0.7.6;


contract TimeLock {

    address public Owner;
    address public constant PancakeLP = 0xD26e08c981f93D686214D095039cFe4800b96423;

    uint256 public constant StartLock = 1624971600;
    uint256 public constant LockedUntil = 2240611200;   // Sunday 1 January 2041 00:00:00 (GMT)

	uint256 constant Decimals = 18;
	uint256 constant incrementAmount = 10 ** (5 + Decimals);
	
    
    // Constructor. 
   constructor() payable {  
		Owner = payable(msg.sender);
    }  
    

    // Modifiers
    modifier checkRequirements {
        require(StartLock < block.timestamp, "Time travel is not allowed!");
		require(LockedUntil > block.timestamp, "Locking period is not over!");
		require(msg.sender == Owner, "Admin function!");
        _;
    }
    
    
    function payOutTotalPancakeLP() external checkRequirements {
        uint256 balance = TIMELOCK(PancakeLP).balanceOf(address(this));
		TIMELOCK(PancakeLP).transfer(Owner, balance);
    }
    
}


// Interface for TIMELOCK
abstract contract TIMELOCK {
    function balanceOf(address tokenOwner) virtual external view returns (uint256);
    function transfer(address receiver, uint256 numTokens) virtual public returns (bool);
}