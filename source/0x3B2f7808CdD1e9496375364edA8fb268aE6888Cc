
// File: /contracts/DepositContract.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract DepositContract {
    // Token to be deposited
    IERC20 public token;

    // Owner of the contract
    address public owner;

    // Whitelist mapping, individual deposit limit and deposits tracker
    mapping (address => bool) public whitelist;
    mapping (address => uint256) public depositLimit;
    mapping (address => uint256) public deposits;

    // Events
    event Deposit(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    constructor(IERC20 _token) {
        owner = msg.sender;
        token = _token;
    }

    function setToken(IERC20 _token) public onlyOwner {
        token = _token;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner is the zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    function addToWhitelist(address _address, uint256 _limit) public onlyOwner {
        whitelist[_address] = true;
        depositLimit[_address] = _limit;
    }

    function editDepositLimit(address _address, uint256 _newLimit) public onlyOwner {
        require(whitelist[_address], "Address is not whitelisted");
        depositLimit[_address] = _newLimit;
    }

    function addBatchToWhitelist(address[] memory _addresses, uint256[] memory _limits) public onlyOwner {
        require(_addresses.length == _limits.length, "Addresses and limits arrays must have the same length");

        for (uint i = 0; i < _addresses.length; i++) {
            addToWhitelist(_addresses[i], _limits[i]);
        }
    }

    function removeFromWhitelist(address _address) public onlyOwner {
        whitelist[_address] = false;
    }

    function deposit(uint256 _amount) public {
        require(whitelist[msg.sender], "You are not whitelisted");
        require(deposits[msg.sender] + _amount <= depositLimit[msg.sender], "Deposit exceeds your limit");

        // Update deposits
        deposits[msg.sender] += _amount;

        // Ensure the tokens get transferred here
        require(token.transferFrom(msg.sender, address(this), _amount), "Token transfer failed");

        emit Deposit(msg.sender, _amount);
    }

    function withdraw(uint256 _amount) public onlyOwner {
        uint256 contractBalance = token.balanceOf(address(this));
        require(_amount <= contractBalance, "Not enough tokens in the contract");

        // Transfer the tokens to the owner
        require(token.transfer(owner, _amount), "Token transfer failed");

        emit Withdrawal(owner, _amount);
    }

    function getDepositedAmount(address _address) public view returns (uint256) {
        return deposits[_address];
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

