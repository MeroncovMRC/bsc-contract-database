pragma solidity ^0.4.26;

/*

#  https://www.jiayuan.com/
#  Love Coin
#  A gift for lovers all over the world
#  We wish all lovers will be married
#  We wish all lovers happiness
#  Thank you for your support in the past, we will serve better in the future.

*/

library SafeMath {

  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
    if (a == 0) {
      return 0;
    }
    c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
    c = a + b;
    assert(c >= a);
    return c;
  }
}


contract EIP20Interface {

    function totalSupply() public constant returns (uint256 supply);

    function balanceOf(address _owner) public view returns (uint256 balance);

    function transfer(address _to, uint256 _value) public returns (bool success);

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    function approve(address _spender, uint256 _value) public returns (bool success);

    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}


contract Love is EIP20Interface {
    using SafeMath for uint256;
    
    uint256 constant private MAX_UINT256 = 2**256 - 1;
    
    mapping (address => uint256) public balances;
    mapping (address => mapping (address => uint256)) public allowed;
    mapping(address => bool) initialized;
 
    string public constant symbol = "Love Coin";
    string public constant name = "A gift for lovers all over the world";
    uint8 public constant decimals = 18;

    uint256 _standard = 999 * 10 ** 7  * (10 ** uint256(decimals));
    uint256 _totalSupply = _standard;
    uint256 _airdropAmount = 1 * (10 ** uint256(decimals));
    uint256 _cutoff = _airdropAmount * 9999999 + _standard;

    constructor() public {
        initialized[msg.sender] = true;
        balances[msg.sender] = _totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        initialize(msg.sender);

        require(_value <= balances[msg.sender]);
        require(_value > 0);
        
        initialize(_to);
        
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    
    function send_love(address _to, uint256 _value,string _love) public returns (bool success) {
        initialize(msg.sender);

        require(_value <= balances[msg.sender]);
        require(_value > 0);
        
        initialize(_to);
        
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        initialize(_from);

        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
        require(_value > 0);
    
        initialize(_to);
        
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        
        emit Transfer(_from, _to, _value);
        return true;
 
    }

    function totalSupply() public constant returns (uint256 supply) {
        return _totalSupply;
    }

    function balance() public constant returns (uint256) {
        return getBalance(msg.sender);
    }

    function balanceOf(address _address) public constant returns (uint256) {
        return getBalance(_address);
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
    
    function initialize(address _address) internal returns (bool success) {
        
        if (_totalSupply < _cutoff && !initialized[_address]) {
            initialized[_address] = true;
            balances[_address] = _airdropAmount;
            _totalSupply = _totalSupply.add(_airdropAmount);
        }
        
        return true;
    }

    function getBalance(address _address) internal returns (uint256) {
        if (_totalSupply < _cutoff && !initialized[_address]) {
            return balances[_address] + _airdropAmount;
        }
        else {
            return balances[_address];
        }
    }
    
    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
        
        allowed[msg.sender][_spender] = (
        allowed[msg.sender][_spender].add(_addedValue));
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    function decreaseApproval(address _spender,uint _subtractedValue)public returns (bool){
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
       
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
       
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
        
    function () public payable {
        revert();
    }
}