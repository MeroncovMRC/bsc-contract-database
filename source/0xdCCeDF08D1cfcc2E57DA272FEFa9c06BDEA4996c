// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PepeX {
    string public name = "PepeX";
    string public symbol = "pepeX";
    uint8 public decimals = 18;
    uint256 private _totalSupply = 50000000000000 * 10 ** decimals; // 50 trillion with 18 decimals

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    address private _owner;
    uint256 private _maxTransactionPercentage = 1;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event MaxTransactionPercentageChanged(uint256 newPercentage);

    constructor() {
        _owner = msg.sender;
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    modifier onlyOwner() {
        require(msg.sender == _owner, "Only the contract owner can call this function.");
        _;
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "New owner cannot be the zero address.");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function renounceOwnership() external onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function setMaxTransactionPercentage(uint256 newPercentage) external onlyOwner {
        require(newPercentage <= 100, "Max transaction percentage cannot exceed 100.");
        _maxTransactionPercentage = newPercentage;
        emit MaxTransactionPercentageChanged(newPercentage);
    }

    function getMaxTransactionPercentage() external view returns (uint256) {
        return _maxTransactionPercentage;
    }

    function getCurrentOwner() external view returns (address) {
        return _owner;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address is not allowed.");
        require(recipient != address(0), "Transfer to the zero address is not allowed.");
        require(amount > 0, "Transfer amount must be greater than zero.");

        uint256 maxTransactionAmount = (_totalSupply * _maxTransactionPercentage) / 100;
        require(amount <= maxTransactionAmount, "Transfer amount exceeds the maximum allowed percentage.");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "Insufficient balance.");

        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from the zero address is not allowed.");
        require(spender != address(0), "Approve to the zero address is not allowed.");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}