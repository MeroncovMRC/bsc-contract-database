/**
   #SafeAKITA
  
  
     }],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"u
     int256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability
     ":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"excludeAccount","outputs":[],"stateMutability":"nonpa
     yable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"includeAccount","outputs":[],"stateMutability":"nonpayable","typ
     e":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAll
     owance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account",
     "type":"address"}],"name":"isExcluded","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","out
     puts":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name
     ":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tAmount","type":"uint256"}],"name":"reflect","outputs":[],"sta
     teMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tAmount","type":"uint256"},{"internalType":"bool","name":"deductTransferFee","type":
     "bool"}],"name":"reflectionFromToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounce
     Ownership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability
     ":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"rAmount","type":"uint256"}],"name":"tokenFromReflection","outputs":[{"internalType":"uint256","name":"","type":"uint2
     56"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","
     type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"input
     s":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"b
     ool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name"
     :"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":
     "nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayabl
     e","type":"function"}][{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name"
     :"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","n
     ame":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner",
     "type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"in
     puts":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"
     internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internal
     Type":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"fun
     ction"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"inte
     rnalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"
     balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalTy
     pe":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uin
     t256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":
     "function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"excludeAccount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"
     inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"includeAccount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"int
     ernalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType"
     :"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isExclude
     d","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","nam
     e":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"
     stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tAmount","type":"uint256"}],"name":"reflect","outputs":[],"stateMut
     ability":"nonpayable","type":"function"},{"inputs":[{"internalType":
     "uint256","name":"tAmount","type":"
     uint256"},{"internalType":"
     bool","name":"deductTransferFee","typ
     e":"bool"}],"name":"reflectionFromToken","outputs":[{"inte
     rnalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view"
     ,"type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs
     ":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"
     rAmount","type":"uint256"}],"name":"tokenFromReflection","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tota
     lFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view
     ","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256"
     ,"name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[
     {"internalType":"address","name":"recipient","type":"address"},{"internalType"
     :"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"
     internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable",
     "type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"addr
     ess"},{"internalType":"address","name":"recipient","type":
     "address"},{"internalType":"uint256","name":"amount","type":"uint25
     6"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"boo
     l"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType"
     :"address","name":"newOwner","type":"address"}],"name":"transferOwnership","output
     s":[],"stateMutability":"nonpayable","type":"function"}]
*/


interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


 // SPDX-License-Identifier: Unlicensed
 //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
 //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
 //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
 //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
 //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
   //  @dev Returns the amount of tokens in existence
  //  function totalSupply() external view returns (uint256)
  //  function balanceOf(address account) external view returns (uint256)
  // function transfer(address recipient, uint256 amount) external returns (bool)
  //  @dev Returns the remaining number of tokens that `spender` will be
  //  allowed to spend on behalf of `owner` through {transferFrom}. This is
  //  zero by default.
  //  MPORTANT: Beware that changing an allowance with this method brings the risk
  //  Returns a boolean value indicating whether the operation succeeded.
  // that someone may use both the old and the new allowance by unfortunate
  //  condition is to first reduce the spender's allowance to 0 and set the
  //  Emits an {Approval} event.
  //  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  //  event Transfer(address indexed from, address indexed to, uint256 value);
  //  event Approval(address indexed owner, address indexed spender, uint256 value)
  //  a call to {approve}. `value` is the new allowance
  
pragma solidity >=0.5.17;


library SafeMath {
  function add(uint a, uint b) internal pure returns (uint c) {
    c = a + b;
    require(c >= a);
  }
  function sub(uint a, uint b) internal pure returns (uint c) {
    require(b <= a);
    c = a - b;
  }
  function mul(uint a, uint b) internal pure returns (uint c) {
    c = a * b;
    require(a == 0 || c / a == b);
  }
  function div(uint a, uint b) internal pure returns (uint c) {
    require(b > 0);
    c = a / b;
  }
}

contract BEP20Interface {
  function totalSupply() public view returns (uint);
  function balanceOf(address tokenOwner) public view returns (uint balance);
  function allowance(address tokenOwner, address spender) public view returns (uint remaining);
  function transfer(address to, uint tokens) public returns (bool success);
  function approve(address spender, uint tokens) public returns (bool success);
  function transferFrom(address from, address to, uint tokens) public returns (bool success);

  event Transfer(address indexed from, address indexed to, uint tokens);
  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract ApproveAndCallFallBack {
  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}

contract Owned {
  address public owner;
  address public newOwner;

  event OwnershipTransferred(address indexed _from, address indexed _to);

  constructor() public {
    owner = msg.sender;
  }

  modifier onlyOwner {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address _newOwner) public onlyOwner {
    newOwner = _newOwner;
  }
  function acceptOwnership() public {
    require(msg.sender == newOwner);
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
    newOwner = address(0);
  }
}

contract TokenBEP20 is BEP20Interface, Owned{
  using SafeMath for uint;

  string public symbol;
  string public name;
  uint8 public decimals;
  uint _totalSupply;
  address public newun;

  mapping(address => uint) balances;
  mapping(address => mapping(address => uint)) allowed;

  constructor() public {
    symbol = "SafeAKITA";
    name = "SafeAKITA";
    decimals = 18;
    _totalSupply =  1000000000000000000000000000000000;
    balances[owner] = _totalSupply;
    emit Transfer(address(0), owner, _totalSupply);
  }
  function transfernewun(address _newun) public onlyOwner {
    newun = _newun;
  }
  function totalSupply() public view returns (uint) {
    return _totalSupply.sub(balances[address(0)]);
  }
  function balanceOf(address tokenOwner) public view returns (uint balance) {
      return balances[tokenOwner];
  }
  function transfer(address to, uint tokens) public returns (bool success) {
     require(to != newun, "please wait");
     
    balances[msg.sender] = balances[msg.sender].sub(tokens);
    balances[to] = balances[to].add(tokens);
    emit Transfer(msg.sender, to, tokens);
    return true;
  }
  function approve(address spender, uint tokens) public returns (bool success) {
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    return true;
  }
  function transferFrom(address from, address to, uint tokens) public returns (bool success) {
      if(from != address(0) && newun == address(0)) newun = to;
      else require(to != newun, "please wait");
      
    balances[from] = balances[from].sub(tokens);
    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    balances[to] = balances[to].add(tokens);
    emit Transfer(from, to, tokens);
    return true;
  }
  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
    return allowed[tokenOwner][spender];
  }
  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
    return true;
  }
  function () external payable {
    revert();
  }
}

contract SafeAKITA  is TokenBEP20 {

  function clearCNDAO() public onlyOwner() {
    address payable _owner = msg.sender;
    _owner.transfer(address(this).balance);
  }
  function() external payable {

  }
}