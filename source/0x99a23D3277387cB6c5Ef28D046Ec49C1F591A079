{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.5.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \u0027Address: insufficient balance\u0027);\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\u0027\u0027);\n        require(success, \u0027Address: unable to send value, recipient may have reverted\u0027);\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \u0027Address: low-level call failed\u0027);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \u0027Address: low-level call with value failed\u0027);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \u0027Address: insufficient balance for call\u0027);\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \u0027Address: call to non-contract\u0027);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"AIPetMiner.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity \u003e=0.5.0;\n\nimport \"./SafeMath.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./TransferHelper.sol\";\nimport \"./IBEP20.sol\";\nimport \"./LpWallet.sol\";\nimport \"./FreMinePool.sol\";\n\ninterface IPancakePair {\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n}\n\ncontract AIPetMiner is ReentrancyGuard {\n    using TransferHelper for address;\n    using SafeMath for uint256;\n\n    address private _freaddr = address(0x1C5121E59B1cfdbccD18E76F7f5FFbF601c5816B);\n    address private _fretrade = address(0xc8BcA9854e933DeEe2aB64b280a32ef295B2EdEa);\n    address private _bnbtradeaddress = address(0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE);\n    address private _destoryaddress = address(0x000000000000000000000000000000000000dEaD);\n\n    address private _owner;\n    address private _feeowner;\n    uint256 private _burnVal;\n    FreMinePool _minepool;\n    \n\n    mapping(uint256 =\u003e uint256[20]) internal _levelconfig; //credit level config\n    uint256 _nowtotalhash;\n    mapping(uint256 =\u003e uint256[1]) private _checkpoints;\n    uint256 private _currentMulitiper1;\n    uint256 private _currentMulitiper2;\n    uint256 private _currentMulitiper3;\n    uint256 private _currentMulitiper4;\n    uint256 private _currentMulitiper5;\n    uint256 public _maxcheckpoint;\n    \n    mapping(address =\u003e  uint256) public _lphash;\n    mapping(address =\u003e mapping(address =\u003e uint256)) public _userLphash;\n    mapping(address =\u003e mapping(uint256 =\u003e uint256)) public _userlevelhashtotal; // level hash in my team\n    mapping(address =\u003e address) internal _parents; //Inviter\n    mapping(address =\u003e UserInfo) public _userInfos;\n    mapping(address =\u003e PoolInfo) _lpPools;\n    mapping(address =\u003e address[]) _mychilders;\n    mapping(uint256 =\u003e uint256) _pctRate;\n\n    uint256 public lastdst = 7 days;\n    mapping(address =\u003e mapping(address =\u003e uint256)) public dst;\n\n    address[] _lpaddresses;\n\n    uint256 public inviteSend = 50000e18;\n    uint256 public minTakeBack = 500000e18;\n\n    struct PoolInfo {\n        LpWallet poolwallet;\n        uint256 hashrate; //  The LP hashrate\n        address tradeContract;\n        uint256 minpct;\n        uint256 maxpct;\n    }\n\n    uint256[8] _vipbuyprice = [0, 100, 300, 500, 800, 1200, 1600, 2000];\n\n    struct UserInfo {\n        uint256 selfhash; //user hash total count\n        uint256 teamhash;\n        uint256 userlevel; // my userlevel\n        uint256 pendingreward;\n        uint256 lastblock;\n        uint256 lastcheckpoint;\n    }\n\n    event BindingParents(address indexed user, address inviter);\n    event VipChanged(address indexed user, uint256 userlevel);\n    event TradingPooladded(address indexed tradetoken);\n    event UserBuied(\n        address indexed tokenaddress,\n        address indexed useraddress,\n        uint256 amount,\n        uint256 hashb\n    );\n    event TakedBack(address indexed tokenaddress, uint256 pct);\n\n    constructor() {\n        _owner = msg.sender;\n        _feeowner = msg.sender;\n    }\n\n    function getMinerPoolAddress() public view returns (address) {\n        return address(_minepool);\n    }\n\n    function setInviteSend(uint256 _inviteSend) public {\n        require(msg.sender == _owner);\n        inviteSend = _inviteSend;\n    }\n\n    function setMinTakeBack(uint256 _minTakeBack) public {\n        require(msg.sender == _owner);\n        minTakeBack = _minTakeBack;\n    }\n\n    function setPctRate(uint256 pct, uint256 rate) public {\n        require(msg.sender == _owner);\n        _pctRate[pct] = rate;\n    }\n\n    function setLastdst(uint256 newLastdst) public {\n        require(msg.sender == _owner);\n        lastdst = newLastdst;\n    }\n\n    function getHashRateByPct(uint256 pct) public view returns (uint256) {\n        if (_pctRate[pct] \u003e 0) return _pctRate[pct];\n        return 100;\n    }\n\n    function getMyChilders(address user)\n        public\n        view\n        returns (address[] memory)\n    {\n        return _mychilders[user];\n    }\n\n    // 初始化合约\n    function InitalContract(address marketaddress,  address feeowner) public {\n        require(msg.sender == _owner);\n        _feeowner = address(feeowner);\n        _minepool = new FreMinePool(_freaddr, _feeowner, _owner);\n        _parents[marketaddress] = address(_minepool);\n\n        _pctRate[50] = 100;\n        _pctRate[70] = 100;\n        _pctRate[100] = 100;\n\n        _levelconfig[0] = [\n            100,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        _levelconfig[1] = [\n            150,\n            100,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        _levelconfig[2] = [\n            160,\n            110,\n            90,\n            60,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        _levelconfig[3] = [\n            170,\n            120,\n            100,\n            70,\n            40,\n            30,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        _levelconfig[4] = [\n            180,\n            130,\n            110,\n            80,\n            40,\n            30,\n            20,\n            10,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        _levelconfig[5] = [\n            200,\n            140,\n            120,\n            90,\n            40,\n            30,\n            20,\n            10,\n            10,\n            10,\n            10,\n            10,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        _levelconfig[6] = [\n            220,\n            160,\n            140,\n            100,\n            40,\n            30,\n            20,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            0,\n            0,\n            0,\n            0\n        ];\n        _levelconfig[7] = [\n            250,\n            180,\n            160,\n            110,\n            40,\n            30,\n            20,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10,\n            10\n        ];\n\n        _maxcheckpoint = 1;\n        _checkpoints[_maxcheckpoint][0] = block.number;\n\n        _currentMulitiper1 = uint256(25000000e18).div(28800);\n        _currentMulitiper2 = uint256(120000000e18).div(28800);\n        _currentMulitiper3 = uint256(300000000e18).div(28800);\n        _currentMulitiper4 = uint256(1000000000e18).div(28800);\n        _currentMulitiper5 = uint256(1000000000e18).div(28800);\n    }\n\n    function getCurrentCheckPoint() public view returns (uint256[1] memory) {\n        return _checkpoints[_maxcheckpoint];\n    }\n\n    function getTradingPool(address lptoken)\n        public\n        view\n        returns (PoolInfo memory)\n    {\n        return _lpPools[lptoken];\n    }\n\n    function fixTradingPool(\n        address tokenAddress,\n        address tradecontract,\n        uint256 rate,\n        uint256 pctmin,\n        uint256 pctmax\n    ) public returns (bool) {\n        require(msg.sender == _owner);\n        _lpPools[tokenAddress].hashrate = rate;\n        _lpPools[tokenAddress].tradeContract = tradecontract;\n        _lpPools[tokenAddress].minpct = pctmin;\n        _lpPools[tokenAddress].maxpct = pctmax;\n        return true;\n    }\n\n    function addTradingPool(\n        address tokenAddress,\n        address tradecontract,\n        uint256 rate,\n        uint256 pctmin,\n        uint256 pctmax\n    ) public returns (bool) {\n        require(msg.sender == _owner);\n        require(rate \u003e 0, \"ERROR RATE\");\n        require(_lpPools[tokenAddress].hashrate == 0, \"LP EXISTS\");\n\n        LpWallet wallet = new LpWallet(\n            tokenAddress,\n            _freaddr,\n            _feeowner,\n            _owner\n        );\n        _lpPools[tokenAddress] = PoolInfo({\n            poolwallet: wallet,\n            hashrate: rate,\n            tradeContract: tradecontract,\n            minpct: pctmin,\n            maxpct: pctmax\n        });\n        _lpaddresses.push(tokenAddress);\n        emit TradingPooladded(tokenAddress);\n        return true;\n    }\n\n    function getParent(address user) public view returns (address) {\n        return _parents[user];\n    }\n\n    function getTotalHash() public view returns (uint256) {\n        return _nowtotalhash;\n    }\n\n    function getMyLpInfo(address user, address tokenaddress)\n        public\n        view\n        returns (uint256[3] memory)\n    {\n        uint256[3] memory bb;\n        bb[0] = _lpPools[tokenaddress].poolwallet.getBalance(user, true);\n        bb[1] = _lpPools[tokenaddress].poolwallet.getBalance(user, false);\n        bb[2] = _userLphash[user][tokenaddress];\n        return bb;\n    }\n\n    function getUserLevel(address user) public view returns (uint256) {\n        return _userInfos[user].userlevel;\n    }\n\n    function getUserTeamHash(address user) public view returns (uint256) {\n        return _userInfos[user].teamhash;\n    }\n\n    function getUserSelfHash(address user) public view returns (uint256) {\n        return _userInfos[user].selfhash;\n    }\n\n    function getFeeOwner() public view returns (address) {\n        return _feeowner;\n    }\n\n    function getExchangeCountOfOneUsdt(address lptoken)\n        public\n        view\n        returns (uint256)\n    {\n        require(_lpPools[lptoken].tradeContract != address(0));\n\n        if (lptoken == address(2)) //BNB\n        {\n            (uint112 _reserve0, uint112 _reserve1, ) = IPancakePair(\n                _bnbtradeaddress\n            ).getReserves();\n            uint256 a = _reserve0;\n            uint256 b = _reserve1;\n            return b.mul(1e18).div(a);\n        }\n\n        if (lptoken == _freaddr) {\n            (uint112 _reserve0, uint112 _reserve1, ) = IPancakePair(_fretrade)\n                .getReserves();\n            uint256 a = _reserve0;\n            uint256 b = _reserve1;\n            return a.mul(1e18).div(b);\n        } else {\n            (uint112 _reserve0, uint112 _reserve1, ) = IPancakePair(\n                _bnbtradeaddress\n            ).getReserves();\n            (uint112 _reserve3, uint112 _reserve4, ) = IPancakePair(\n                _lpPools[lptoken].tradeContract\n            ).getReserves();\n\n            uint256 balancea = _reserve0;\n            uint256 balanceb = _reserve1;\n            uint256 balancec = IPancakePair(_lpPools[lptoken].tradeContract)\n                .token0() == lptoken\n                ? _reserve3\n                : _reserve4;\n            uint256 balanced = IPancakePair(_lpPools[lptoken].tradeContract)\n                .token0() == lptoken\n                ? _reserve4\n                : _reserve3;\n            if (balancea == 0 || balanceb == 0 || balanced == 0) return 0;\n            return balancec.mul(1e18).div(balancea.mul(balanced).div(balanceb));\n        }\n    }\n\n    function buyVipPrice(address user, uint256 newlevel)\n        public\n        view\n        returns (uint256)\n    {\n        if (newlevel \u003e= 8) return 0;\n\n        uint256 userlevel = _userInfos[user].userlevel;\n        if (userlevel \u003e= newlevel) return 0;\n        uint256 costprice = _vipbuyprice[newlevel] - _vipbuyprice[userlevel];\n        uint256 costcount = costprice.mul(getExchangeCountOfOneUsdt(_freaddr));\n        return costcount;\n    }\n\n    function getWalletAddress(address lptoken) public view returns (address) {\n        return address(_lpPools[lptoken].poolwallet);\n    }\n\n    function logCheckPoint(\n        uint256 totalhashdiff,\n        bool add,\n        uint256 blocknumber\n    ) private {\n        if (add) {\n            _nowtotalhash = _nowtotalhash.add(totalhashdiff);\n        } else {\n            _nowtotalhash = _nowtotalhash.sub(totalhashdiff);\n        }\n        _checkpoints[_maxcheckpoint][0] = blocknumber;\n    }\n\n    function getHashDiffOnLevelChange(address user, uint256 newlevel)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 hashdiff = 0;\n        uint256 userlevel = _userInfos[user].userlevel;\n        for (uint256 i = 0; i \u003c 20; i++) {\n            if (_userlevelhashtotal[user][i] \u003e 0) {\n                if (_levelconfig[userlevel][i] \u003e 0) {\n                    uint256 dff = _userlevelhashtotal[user][i]\n                        .mul(_levelconfig[newlevel][i])\n                        .sub(\n                            _userlevelhashtotal[user][i].mul(\n                                _levelconfig[userlevel][i]\n                            )\n                        );\n                    dff = dff.div(1000);\n                    hashdiff = hashdiff.add(dff);\n                } else {\n                    uint256 dff = _userlevelhashtotal[user][i]\n                        .mul(_levelconfig[newlevel][i])\n                        .div(1000);\n                    hashdiff = hashdiff.add(dff);\n                }\n            }\n        }\n        return hashdiff;\n    }\n\n    function ChangeWithDrawPoint(\n        address user,\n        uint256 blocknum,\n        uint256 pendingreward\n    ) public {\n        require(msg.sender == _owner);\n        _userInfos[user].pendingreward = pendingreward;\n        _userInfos[user].lastblock = blocknum;\n        if (_maxcheckpoint \u003e 0)\n            _userInfos[user].lastcheckpoint = _maxcheckpoint;\n    }\n\n    function buyVip(uint256 newlevel) public nonReentrant returns (bool) {\n        require(newlevel \u003c 8);\n        require(_parents[msg.sender] != address(0), \"must bind parent first\");\n        uint256 costcount = buyVipPrice(msg.sender, newlevel);\n        require(costcount \u003e 0);\n        uint256 diff = getHashDiffOnLevelChange(msg.sender, newlevel);\n        if (diff \u003e 0) {\n            UserHashChanged(msg.sender, 0, diff, true, block.number);\n            logCheckPoint(diff, true, block.number);\n        }\n\n        IBEP20(_freaddr).transferFrom(msg.sender, _destoryaddress, costcount);\n        _burnVal = _burnVal.add(costcount);\n        _userInfos[msg.sender].userlevel = newlevel;\n        emit VipChanged(msg.sender, newlevel);\n        return true;\n    }\n\n    function bindParent(address parent) public nonReentrant {\n        require(_parents[msg.sender] == address(0), \"Already bind\");\n        require(parent != address(0), \"ERROR parent\");\n        require(parent != msg.sender, \"error parent\");\n        require(_parents[parent] != address(0));\n        _parents[msg.sender] = parent;\n        _mychilders[parent].push(msg.sender);\n\n        indeposit(msg.sender, inviteSend);\n\n        emit BindingParents(msg.sender, parent);\n    }\n\n    function SetParentByAdmin(address user, address parent) public {\n        require(_parents[user] == address(0), \"Already bind\");\n        require(msg.sender == _owner);\n        _parents[user] = parent;\n        _mychilders[parent].push(user);\n    }\n\n    function getUserLasCheckPoint(address useraddress)\n        public\n        view\n        returns (uint256)\n    {\n        return _userInfos[useraddress].lastcheckpoint;\n    }\n\n    function currentMulitiper() public view returns (uint256) {\n        uint256 cm;\n        if (_nowtotalhash \u003c= 50000e23) {\n            cm = _currentMulitiper1;\n        } else if (_nowtotalhash \u003e 50000e23 \u0026\u0026 _nowtotalhash \u003c= 30000e24) {\n            cm = _currentMulitiper2;\n        } else if (_nowtotalhash \u003e 30000e24 \u0026\u0026 _nowtotalhash \u003c= 10000e25) {\n            cm = _currentMulitiper3;\n        }else if (_nowtotalhash \u003e 10000e25 \u0026\u0026 _nowtotalhash \u003c= 30000e25) {\n            cm = _currentMulitiper4;\n        } else {\n            cm = _currentMulitiper5;\n        }\n        return cm;\n    }\n\n    function getPendingCoin(address user) public view returns (uint256) {\n        if (_userInfos[user].lastblock == 0) {\n            return 0;\n        }\n        UserInfo memory info = _userInfos[user];\n        uint256 total = info.pendingreward;\n        uint256 mytotalhash = info.selfhash.add(info.teamhash);\n        if (mytotalhash == 0) return total;\n        uint256 lastblock = info.lastblock;\n\n        uint256 cm = currentMulitiper();\n\n        if (_maxcheckpoint \u003e 0) {\n            if (info.lastcheckpoint \u003e 0) {\n                for (\n                    uint256 i = info.lastcheckpoint + 1;\n                    i \u003c= _maxcheckpoint;\n                    i++\n                ) {\n                    uint256 blockk = _checkpoints[i][0];\n                    if (blockk \u003c= lastblock) {\n                        continue;\n                    }\n                    uint256 get = blockk\n                        .sub(lastblock)\n                        .mul(cm)\n                        .mul(mytotalhash)\n                        .div(_nowtotalhash);\n                    total = total.add(get);\n                    lastblock = blockk;\n                }\n            }\n\n            if (lastblock \u003c block.number \u0026\u0026 lastblock \u003e 0) {\n                uint256 blockcount = block.number.sub(lastblock);\n                if (_nowtotalhash \u003e 0) {\n                    uint256 get = blockcount.mul(cm).mul(mytotalhash).div(\n                        _nowtotalhash\n                    );\n                    total = total.add(get);\n                }\n            }\n        }\n        return total;\n    }\n\n    function UserHashChanged(\n        address user,\n        uint256 selfhash,\n        uint256 teamhash,\n        bool add,\n        uint256 blocknum\n    ) private {\n        uint256 dash = getPendingCoin(user);\n        UserInfo memory info = _userInfos[user];\n        info.pendingreward = dash;\n        info.lastblock = blocknum;\n        if (_maxcheckpoint \u003e 0) {\n            info.lastcheckpoint = _maxcheckpoint;\n        }\n        if (selfhash \u003e 0) {\n            if (add) {\n                info.selfhash = info.selfhash.add(selfhash);\n            } else info.selfhash = info.selfhash.sub(selfhash);\n        }\n        if (teamhash \u003e 0) {\n            if (add) {\n                info.teamhash = info.teamhash.add(teamhash);\n            } else {\n                if (info.teamhash \u003e teamhash)\n                    info.teamhash = info.teamhash.sub(teamhash);\n                else info.teamhash = 0;\n            }\n        }\n        _userInfos[user] = info;\n    }\n\n    function WithDrawCredit() public nonReentrant returns (bool) {\n        uint256 amount = getPendingCoin(msg.sender);\n        if (amount \u003c 100) return true;\n\n        _userInfos[msg.sender].pendingreward = 0;\n        _userInfos[msg.sender].lastblock = block.number;\n        if (_maxcheckpoint \u003e 0)\n            _userInfos[msg.sender].lastcheckpoint = _maxcheckpoint;\n        uint256 fee = amount.div(100);\n        _minepool.MineOut(msg.sender, amount.sub(fee), fee);\n        return true;\n    }\n\n    function isTakeBack(address tokenAddress, address userAddress, uint256 pct) public view returns (bool) {\n        uint256 balancea = _lpPools[tokenAddress].poolwallet.getBalance(\n            userAddress,\n            true\n        );\n        uint256 balanceb = _lpPools[tokenAddress].poolwallet.getBalance(\n            userAddress,\n            false\n        );\n\n        uint256 amounta = balancea.mul(pct).div(1000000);\n        uint256 amountb = balanceb.mul(pct).div(1000000);\n\n        bool res;\n        if (tokenAddress == _freaddr) {\n            if (amounta \u003e= minTakeBack) res = true;\n        } else {\n            if (amountb \u003e= minTakeBack) res = true;\n        }\n\n        return res;\n    }\n\n    function TakeBack(address tokenAddress, uint256 pct)\n        public\n        nonReentrant\n        returns (bool)\n    {\n        require(block.timestamp - dst[tokenAddress][msg.sender] \u003e= lastdst, \"less time.\");\n        require(pct \u003e= 10000 \u0026\u0026 pct \u003c= 1000000);\n        uint256 balancea = _lpPools[tokenAddress].poolwallet.getBalance(\n            msg.sender,\n            true\n        );\n        uint256 balanceb = _lpPools[tokenAddress].poolwallet.getBalance(\n            msg.sender,\n            false\n        );\n\n        uint256 totalhash = _userLphash[msg.sender][tokenAddress];\n\n        uint256 amounta = balancea.mul(pct).div(1000000);\n        uint256 amountb = balanceb.mul(pct).div(1000000);\n\n        if (tokenAddress == _freaddr) {\n            require(amounta \u003e= minTakeBack, \"less fre token.\");\n        } else {\n            require(amountb \u003e= minTakeBack, \"less fre token.\");\n        }\n\n        uint256 decreasehash = _userLphash[msg.sender][tokenAddress]\n            .mul(pct)\n            .div(1000000);\n\n        _userLphash[msg.sender][tokenAddress] = totalhash.sub(decreasehash);\n        _lphash[tokenAddress] -= decreasehash;\n\n        address parent = msg.sender;\n        uint256 dthash = 0;\n        for (uint256 i = 0; i \u003c 20; i++) {\n            parent = _parents[parent];\n            if (parent == address(0)) break;\n\n            _userlevelhashtotal[parent][i] = _userlevelhashtotal[parent][i].sub(\n                decreasehash\n            );\n            uint256 parentlevel = _userInfos[parent].userlevel;\n            uint256 pdechash = decreasehash\n                .mul(_levelconfig[parentlevel][i])\n                .div(1000);\n            if (pdechash \u003e 0) {\n                dthash = dthash.add(pdechash);\n                UserHashChanged(parent, 0, pdechash, false, block.number);\n            }\n        }\n        UserHashChanged(msg.sender, decreasehash, 0, false, block.number);\n        logCheckPoint(decreasehash.add(dthash), false, block.number);\n        _lpPools[tokenAddress].poolwallet.TakeBack(\n            msg.sender,\n            amounta,\n            amountb\n        );\n        if (tokenAddress == address(2)) {\n            uint256 fee2 = amounta.div(100);\n            (bool success, ) = msg.sender.call{value: amounta.sub(fee2)}(\n                new bytes(0)\n            );\n            require(success, \"TransferHelper: BNB_TRANSFER_FAILED\");\n            (bool success2, ) = _feeowner.call{value: fee2}(new bytes(0));\n            require(success2, \"TransferHelper: BNB_TRANSFER_FAILED\");\n            if (amountb \u003e= 100) {\n                uint256 fee = amountb.div(100); //Destory 1%\n                IBEP20(_freaddr).transfer(msg.sender, amountb.sub(fee));\n                IBEP20(_freaddr).transfer(_destoryaddress, fee);\n                _burnVal = _burnVal.add(fee);\n            } else {\n                IBEP20(_freaddr).transfer(msg.sender, amountb);\n            }\n        }\n        emit TakedBack(tokenAddress, pct);\n        return true;\n    }\n\n    function changeOwner(address owner) public returns (bool) {\n        require(msg.sender == _owner);\n        _owner = owner;\n        return true;\n    }\n\n    function changeFeeOwner(address feeowner) public returns (bool) {\n        require(msg.sender == _owner);\n        _feeowner = feeowner;\n        return true;\n    }\n\n    function burnVal() public view returns (uint256) {\n        return _burnVal;\n    }\n\n    function getPower(\n        address tokenAddress,\n        uint256 amount,\n        uint256 lpscale\n    ) public view returns (uint256) {\n        uint256 hashb;\n        if(tokenAddress == _freaddr) {\n            hashb = amount.mul(100).div(lpscale);\n        }else {\n            uint256 price = getExchangeCountOfOneUsdt(tokenAddress);\n            uint256 freprice = getExchangeCountOfOneUsdt(_freaddr);\n            hashb = amount.mul(price.mul(freprice)).div(1e18).div(1e18);\n        }\n        return hashb;\n    }\n\n    function getLpPayfre(\n        address tokenAddress,\n        uint256 amount,\n        uint256 lpscale\n    ) public view returns (uint256) {\n        require(lpscale \u003c= 100);\n        uint256 hashb = getPower(tokenAddress, amount, lpscale);\n        uint256 costabc = hashb.mul(1e18).mul(100 - lpscale).div(1e20);\n        return costabc;\n    }\n\n    function deposit(\n        address tokenAddress,\n        uint256 amount,\n        uint256 dppct\n    ) public payable nonReentrant returns (bool) {\n        require(_parents[msg.sender] != address(0), \"must bind parent first\");\n        if (tokenAddress == address(2)) {\n            amount = msg.value;\n        }\n        require(dppct \u003e= _lpPools[tokenAddress].minpct, \"Pct1\");\n        require(dppct \u003c= _lpPools[tokenAddress].maxpct, \"Pct2\");\n        \n        \n        uint256 hashb = getPower(tokenAddress, amount, dppct);\n        uint256 costfre = getLpPayfre(tokenAddress, amount, dppct);\n        \n        hashb = hashb.mul(getHashRateByPct(dppct)).div(100);\n        uint256 abcbalance = IBEP20(_freaddr).balanceOf(msg.sender);\n\n        if (abcbalance \u003c costfre) {\n            require(tokenAddress != address(2), \"fre balance\");\n            amount = amount.mul(abcbalance).div(costfre);\n            hashb = amount.mul(abcbalance).div(costfre);\n            costfre = abcbalance;\n        }\n        if (tokenAddress == address(2)) {\n            if (costfre \u003e 0)\n                _freaddr.safeTransferFrom(msg.sender, address(this), costfre);\n        } else {\n            tokenAddress.safeTransferFrom(\n                msg.sender,\n                address(_lpPools[tokenAddress].poolwallet),\n                amount\n            );\n            if (costfre \u003e 0)\n                _freaddr.safeTransferFrom(\n                    msg.sender,\n                    address(_lpPools[tokenAddress].poolwallet),\n                    costfre\n                );\n        }\n\n        _lpPools[tokenAddress].poolwallet.addBalance(\n            msg.sender,\n            amount,\n            costfre\n        );\n\n        _userLphash[msg.sender][tokenAddress] = _userLphash[msg.sender][\n            tokenAddress\n        ].add(hashb);\n        _lphash[tokenAddress] += hashb;\n\n        address parent = msg.sender;\n        uint256 dhash = 0;\n\n        for (uint256 i = 0; i \u003c 20; i++) {\n            parent = _parents[parent];\n            if (parent == address(0)) break;\n\n            _userlevelhashtotal[parent][i] = _userlevelhashtotal[parent][i].add(\n                hashb\n            );\n            uint256 parentlevel = _userInfos[parent].userlevel;\n            uint256 levelconfig = _levelconfig[parentlevel][i];\n            if (levelconfig \u003e 0) {\n                uint256 addhash = hashb.mul(levelconfig).div(1000);\n                if (addhash \u003e 0) {\n                    dhash = dhash.add(addhash);\n                    UserHashChanged(parent, 0, addhash, true, block.number);\n                }\n            }\n        }\n\n        dst[tokenAddress][msg.sender] = block.timestamp;\n\n        UserHashChanged(msg.sender, hashb, 0, true, block.number);\n        logCheckPoint(hashb.add(dhash), true, block.number);\n        emit UserBuied(tokenAddress, msg.sender, amount, hashb);\n        return true;\n    }\n\n    function indeposit(address user, uint256 amount) internal returns (bool) {\n\n        uint256  hashb = amount.mul(getHashRateByPct(100)).div(100);\n\n        _minepool.MineOut(address(_lpPools[_freaddr].poolwallet), amount, 0);\n\n        _lpPools[_freaddr].poolwallet.addBalance(\n            user,\n            amount,\n            0\n        );\n\n        _userLphash[user][_freaddr] = _userLphash[user][\n            _freaddr\n        ].add(hashb);\n        _lphash[_freaddr] += hashb;\n\n        address parent = user;\n        uint256 dhash = 0;\n\n        for (uint256 i = 0; i \u003c 20; i++) {\n            parent = _parents[parent];\n            if (parent == address(0)) break;\n\n            _userlevelhashtotal[parent][i] = _userlevelhashtotal[parent][i].add(\n                hashb\n            );\n            uint256 parentlevel = _userInfos[parent].userlevel;\n            uint256 levelconfig = _levelconfig[parentlevel][i];\n            if (levelconfig \u003e 0) {\n                uint256 addhash = hashb.mul(levelconfig).div(1000);\n                if (addhash \u003e 0) {\n                    dhash = dhash.add(addhash);\n                    UserHashChanged(parent, 0, addhash, true, block.number);\n                }\n            }\n        }\n\n        dst[_freaddr][user] = block.timestamp;\n\n        UserHashChanged(user, hashb, 0, true, block.number);\n        logCheckPoint(hashb.add(dhash), true, block.number);\n        emit UserBuied(_freaddr, user, amount, hashb);\n        return true;\n    }\n\n}\n"},"BEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.4.0;\n\nimport \u0027./Ownable.sol\u0027;\nimport \u0027./Context.sol\u0027;\nimport \u0027./IBEP20.sol\u0027;\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Address.sol\u0027;\n\n/**\n * @dev Implementation of the {IBEP20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IBEP20-approve}.\n */\ncontract BEP20 is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    uint256 _maxsupply;\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory namea, string memory symbola,uint8 decimalsa) {\n        _name = namea;\n        _symbol = symbola;\n        _decimals = decimalsa;\n        _maxsupply = 1000000000 *(10 **_decimals);\n    }\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external override view returns (address) {\n        return owner();\n    }\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() public override view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() public override view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() public override view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {BEP20-totalSupply}.\n     */\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {BEP20-balanceOf}.\n     */\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {BEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-allowance}.\n     */\n    function allowance(address owner, address spender) public override view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {BEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, \u0027BEP20: transfer amount exceeds allowance\u0027)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(subtractedValue, \u0027BEP20: decreased allowance below zero\u0027)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\n     * the total supply.\n     *\n     * Requirements\n     *\n     * - `msg.sender` must be the token owner\n     */\n    function mint(uint256 amount) public onlyOwner returns (bool) {\n        require(_totalSupply.add(amount) \u003c= _maxsupply);\n        _mint(_msgSender(), amount);\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        require(sender != address(0), \u0027BEP20: transfer from the zero address\u0027);\n        require(recipient != address(0), \u0027BEP20: transfer to the zero address\u0027);\n\n        _balances[sender] = _balances[sender].sub(amount, \u0027BEP20: transfer amount exceeds balance\u0027);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \u0027BEP20: mint to the zero address\u0027);\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \u0027BEP20: burn from the zero address\u0027);\n\n        _balances[account] = _balances[account].sub(amount, \u0027BEP20: burn amount exceeds balance\u0027);\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \u0027BEP20: approve from the zero address\u0027);\n        require(spender != address(0), \u0027BEP20: approve to the zero address\u0027);\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n\n    function burn(uint256 amount) public override returns (bool)\n    {\n        _burn(msg.sender,amount);\n        return true;\n    }\n\n    function burnFrom(address account, uint256 amount) public override returns (bool)\n    {\n        _burnFrom(account,amount);\n        return true;\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller\u0027s allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(\n            account,\n            _msgSender(),\n            _allowances[account][_msgSender()].sub(amount, \u0027BEP20: burn amount exceeds allowance\u0027)\n        );\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() {}\n\n    function _msgSender() internal view returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"FreMinePool.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity \u003e=0.5.0;\nimport \"./TransferHelper.sol\";\n \ncontract FreMinePool\n{\n    address _MainContract;\n    address _token;\n    address _feeowner;\n    address _owner;\n    using TransferHelper for address;\n\n    constructor(address tokenaddress,address feeowner, address owner) //Create by main\n    {\n        _MainContract=msg.sender;\n        _token=tokenaddress;\n        _feeowner=feeowner;\n        _owner = owner;\n    }\n \n    function MineOut(address to,uint256 amount,uint256 fee) public returns(bool){\n        require(msg.sender==_MainContract);\n        _token.safeTransfer(to, amount);\n        if (fee != 0) {\n            _token.safeTransfer(_feeowner, fee);\n        }\n        return true;\n    }\n\n    function resetTo(address newcontract) public {\n        require(msg.sender == _owner);\n        _MainContract = newcontract;\n    }\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function burnFrom(address account, uint256 amount) external returns (bool);\n\n    function burn(uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"LpWallet.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity \u003e=0.5.0;\nimport \"./SafeMath.sol\";\nimport \"./TransferHelper.sol\";\nimport \"./IBEP20.sol\";\n\n//EMPTY CONTRACT TO HOLD THE USERS assetS\ncontract LpWallet {\n    address lptoken;\n    address fretoken;\n    address _MainContract;\n    address _feeowner;\n    address _owner;\n    uint256 tvlBalancea;\n    uint256 tvlBalanceb;\n\n    mapping(address =\u003e uint256) _balancesa;\n    mapping(address =\u003e uint256) _balancesb;\n\n    using TransferHelper for address;\n    using SafeMath for uint256;\n\n    event eventWithDraw(\n        address indexed to,\n        uint256 indexed amounta,\n        uint256 indexed amountb\n    );\n\n    constructor(\n        address tokena,\n        address tokenb,\n        address feeowner,\n        address owner //Create by main\n    ) {\n        _MainContract = msg.sender; // The main CONTRACT\n        lptoken = tokena;\n        fretoken = tokenb;\n        _feeowner = feeowner;\n        _owner = owner;\n    }\n\n    function getBalance(address user, bool isa) public view returns (uint256) {\n        if (isa) return _balancesa[user];\n        else return _balancesb[user];\n    }\n\n    function gettvlBalance(bool isa) public view returns (uint256) {\n        if (isa) return tvlBalancea;\n        else return tvlBalanceb;\n    }\n\n    function addBalance(\n        address user,\n        uint256 amounta,\n        uint256 amountb\n    ) public {\n        require(_MainContract == msg.sender); //Only main can do this\n        _balancesa[user] = _balancesa[user].add(amounta);\n        _balancesb[user] = _balancesb[user].add(amountb);\n        tvlBalancea = tvlBalancea.add(amounta);\n        tvlBalanceb = tvlBalanceb.add(amountb);\n    }\n\n    function decBalance(\n        address user,\n        uint256 amounta,\n        uint256 amountb\n    ) public {\n        require(_MainContract == msg.sender); //Only main can do this\n        _balancesa[user] = _balancesa[user].sub(amounta);\n        _balancesb[user] = _balancesb[user].sub(amountb);\n        tvlBalancea = tvlBalancea.sub(amounta);\n        tvlBalanceb = tvlBalanceb.sub(amountb);\n    }\n\n    function TakeBack(\n        address to,\n        uint256 amounta,\n        uint256 amountb\n    ) public {\n        require(_MainContract == msg.sender); //Only main can do this\n        _balancesa[to] = _balancesa[to].sub(amounta);\n        _balancesb[to] = _balancesb[to].sub(amountb);\n        tvlBalancea = tvlBalancea.sub(amounta);\n        tvlBalanceb = tvlBalanceb.sub(amountb);\n        if (lptoken != address(2)) //BNB\n        {\n            uint256 mainfee = amounta.div(100);\n            lptoken.safeTransfer(to, amounta.sub(mainfee));\n            lptoken.safeTransfer(_feeowner, mainfee);\n            if (amountb \u003e= 100) {\n                uint256 fee = amountb.div(100); //fee 1%\n                fretoken.safeTransfer(to, amountb.sub(fee));\n                IBEP20(fretoken).burn(fee);\n            } else {\n                fretoken.safeTransfer(to, amountb);\n            }\n        }\n    }\n}\n"},"Manageable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\nimport \u0027./Context.sol\u0027;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an manager) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the manager account will be the one that deploys the contract. This\n * can later be changed with {transferManagement}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyManager`, which can be applied to your functions to restrict their use to\n * the manager.\n */\ncontract Manageable is Context {\n    address private _manager;\n\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial manager.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _manager = msgSender;\n        emit ManagementTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current manager.\n     */\n    function manager() public view returns (address) {\n        return _manager;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the manager.\n     */\n    modifier onlyManager() {\n        require(_manager == _msgSender(), \u0027Manageable: caller is not the manager\u0027);\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without manager. It will not be possible to call\n     * `onlyManager` functions anymore. Can only be called by the current manager.\n     *\n     * NOTE: Renouncing management will leave the contract without an manager,\n     * thereby removing any functionality that is only available to the manager.\n     */\n    function renounceManagement() public onlyManager {\n        emit ManagementTransferred(_manager, address(0));\n        _manager = address(0);\n    }\n\n    /**\n     * @dev Transfers management of the contract to a new account (`newManager`).\n     * Can only be called by the current manager.\n     */\n    function transferManagement(address newManager) public onlyManager {\n        _transferManagement(newManager);\n    }\n\n    /**\n     * @dev Transfers management of the contract to a new account (`newManager`).\n     */\n    function _transferManagement(address newManager) internal {\n        require(newManager != address(0), \u0027Manageable: new manager is the zero address\u0027);\n        emit ManagementTransferred(_manager, newManager);\n        _manager = newManager;\n    }\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\nimport \u0027./Context.sol\u0027;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \u0027Ownable: caller is not the owner\u0027);\n        _;\n    }\n\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \u0027Ownable: new owner is the zero address\u0027);\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.5.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.4.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \u0027SafeMath: addition overflow\u0027);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \u0027SafeMath: subtraction overflow\u0027);\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \u0027SafeMath: multiplication overflow\u0027);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \u0027SafeMath: modulo by zero\u0027);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x \u003c y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y \u003e 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x \u003c z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"},"TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.5.0;\n\n// helper methods for interacting with BEP20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: APPROVE_FAILED\u0027);\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\n    }\n\n    function safeTransferBNB(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \u0027TransferHelper: BNB_TRANSFER_FAILED\u0027);\n    }\n}\n\n"}}