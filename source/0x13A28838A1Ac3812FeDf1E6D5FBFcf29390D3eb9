// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

library SafeMath {
    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal pure virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {

    function balanceOf(address owner) external view returns (uint);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
}

contract Airdrop is Ownable {
    using SafeMath for uint256;
    address public allowedAddress;

    modifier onlyAllowedAddress {
        require(msg.sender == owner() || msg.sender == allowedAddress,"You are not Owner!");
        _;
    }

    function updateAllowdAddress(address _addr) public onlyOwner{
        allowedAddress = _addr;
    }

    function airdropMultiAmount(IERC20 _address,address[] memory recipients, uint256[] memory amount) public onlyAllowedAddress {
        require(recipients.length == amount.length);

        for (uint256 i = 0; i < recipients.length; i++) {
            require(recipients[i] != address(0),"please insert  valid address!");
            require(IERC20(_address).transfer(recipients[i], amount[i].mul(1e18)),"error in Token Transfer!");
        }
    }

    function airdropSameAmount(IERC20 _address, address[] memory recipients, uint256 amount) public onlyAllowedAddress  {
        
        for (uint256 i = 0; i < recipients.length; i++) {
            require(recipients[i] != address(0),"please insert valid address!");
            require(IERC20(_address).transfer(recipients[i], amount.mul(1e18)),"error in Token Transfer!");
        }
    }

    function withdrawToken(IERC20 _address) public onlyOwner {
        IERC20(_address).transfer(owner(),IERC20(_address).balanceOf(address(this)));
    }

}