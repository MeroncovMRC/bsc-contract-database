{"AutoCTaxReceiver.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IToken {\n    function getOwner() external view returns (address);\n    function burn(uint256 amount) external returns (bool);\n}\n\ncontract AutoCTaxReceiver {\n\n    // Token\n    address public immutable token;\n\n\n    // Receiver Adresses\n    address public treasuryAddress;\n    address public devAddress;\n\n    // Allocation Percentage\n    uint256 public treasuryPercentage;\n    uint256 public devPercentage;\n\n    /**\n        Minimum Amount Of Tokens In Contract To Trigger `trigger` Unless `approved`\n        If Set To A Very High Number, Only Approved May Call Trigger Function\n        If Set To A Very Low Number, Anybody May Call At Their Leasure\n     */\n    uint256 public minimumTokensRequiredToTrigger;\n\n    // Address =\u003e Can Call Trigger\n    mapping ( address =\u003e bool ) public approved;\n\n    // Events\n    event Approved(address caller, bool isApproved);\n\n    modifier onlyOwner(){\n        require(\n            msg.sender == IToken(token).getOwner(),\n            \u0027Only Token Owner\u0027\n        );\n        _;\n    }\n\n    constructor(address token_, address treasuryAddress_, address devAddress_) {\n        require(\n            token_ != address(0) \u0026\u0026\n            treasuryAddress_ != address(0) \u0026\u0026\n            devAddress_ != address(0),\n            \u0027Zero Address\u0027\n        );\n\n        token = token_;\n        treasuryAddress = treasuryAddress_;\n        devAddress = devAddress_;\n\n        approved[msg.sender] = true;\n\n        treasuryPercentage = 30;\n        devPercentage = 10;\n    }\n\n    function trigger() external {\n\n        // Token Balance In Contract\n        uint balance = IERC20(token).balanceOf(address(this));\n\n        if (balance \u003c minimumTokensRequiredToTrigger \u0026\u0026 !approved[msg.sender]) {\n            return;\n        }\n\n        if (balance \u003e 0) {\n            uint treasuryBalance = balance * treasuryPercentage / 100;\n            uint devBalance = balance * devPercentage / 100;\n            uint burn = balance - treasuryBalance - devBalance;\n\n            // send to destinations\n            if (treasuryBalance \u003e 0) {\n                IERC20(token).transfer(treasuryAddress, treasuryBalance);\n            }\n            if (devBalance \u003e 0) {\n                IERC20(token).transfer(devAddress, devBalance);\n            }\n            if (burn \u003e 0) {\n                IToken(token).burn(burn);\n            }\n        }\n    }\n\n    function setTreasuryAddress(address treasuryAddress_) external onlyOwner {\n        require(treasuryAddress_ != address(0));\n        treasuryAddress = treasuryAddress_;\n    }\n    function setTreasuryPercentage(uint256 newTreasuryPercentage_) external onlyOwner {\n        require((devPercentage + newTreasuryPercentage_) \u003c= 100);\n        treasuryPercentage = newTreasuryPercentage_;\n    }\n\n    function setDevAddress(address devAddress_) external onlyOwner {\n        require(devAddress_ != address(0));\n        devAddress = devAddress_;\n    }\n    function setDevPercentage(uint256 newDevPercentage_) external onlyOwner {\n        require((treasuryPercentage + newDevPercentage_) \u003c= 100);\n        devPercentage = newDevPercentage_;\n    }\n\n    function setApproved(address caller, bool isApproved) external onlyOwner {\n        approved[caller] = isApproved;\n        emit Approved(caller, isApproved);\n    }\n    function setMinTriggerAmount(uint256 minTriggerAmount) external onlyOwner {\n        minimumTokensRequiredToTrigger = minTriggerAmount;\n    }\n\n    function withdraw() external onlyOwner {\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(s);\n    }\n    function withdraw(address _token) external onlyOwner {\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\n    }\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"}}