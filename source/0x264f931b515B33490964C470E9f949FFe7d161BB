// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface ERC721{
    function mint(address to_,string memory mintUrl,uint tokenId) external returns (uint256);
    function burn(uint256 tokenId_) external returns (bool);
    function ownerOf(uint256 tokenId)external returns (address);
    function totalSupply()external returns (uint256);
    function balanceOf(address _adr)external returns (uint256);
    function tokenByIndex(uint _value)external returns(uint);
}

interface ERC20{
    function decimals() external view returns (uint8);
    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);
}
interface IRouter {
    function WETH() external view returns (address);

    function getAmountsOut(uint256 amountIn, address[] memory path)
        external
        view
        returns (uint256[] memory amounts);

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}
contract TSLNFTMid{

    address public owner;
    
    mapping(address=>bool) public whiteLists;

    uint public startNum = 10000;
    uint public nowA = 0;
    uint public nowB = 0;
    uint public nowC = 0;
    uint public nowD = 0;
    uint public nowE = 0;
    uint public nowF = 0;

    address public nftA;
    address public nftB;
    address public nftC;
    address public nftD;
    address public nftE;
    address public nftF;

    event userMintNFTEvent(address from,address to,uint level,uint tokenId,uint status);
    event userBurnToUpEvent(address sender,uint level,uint timestamp);

    constructor(){
        whiteLists[msg.sender] = true;
        owner = msg.sender;
    }

    modifier isOnwer(){
        require(msg.sender == owner,"you are not the Owner of the contract!");
        _;
    }

    modifier isWhiteLists(){
        require(whiteLists[msg.sender] == true,"you are not in whiteLists");
        _;
    }

    function setWhiteLists(address _adr,bool _isTrue) public isOnwer returns(bool){
        whiteLists[_adr] = _isTrue;
        return _isTrue;
    }

    function userbuyNode(address _player,uint _type,uint _status)public isWhiteLists{        

        ERC721 aNFT = ERC721(nftA);
        ERC721 bNFT = ERC721(nftB);
        ERC721 cNFT = ERC721(nftC);
        ERC721 dNFT = ERC721(nftD);
        ERC721 eNFT = ERC721(nftE);
        ERC721 fNFT = ERC721(nftF);
        if(_type == 1){
            uint tokenId = startNum + nowA;
            nowA++;
            aNFT.mint(_player,"A",tokenId);
            emit userMintNFTEvent(msg.sender,_player,_type,tokenId,_status);
        }else if(_type == 2){
            uint tokenId = startNum + nowB;
            nowB++;
            bNFT.mint(_player,"B",tokenId);
            emit userMintNFTEvent(msg.sender,_player,_type,tokenId,_status);
        }else if(_type == 3){
            uint tokenId = startNum + nowC;
            nowC++;
            cNFT.mint(_player,"C",tokenId);
            emit userMintNFTEvent(msg.sender,_player,_type,tokenId,_status);
        }else if(_type == 4){
            uint tokenId = startNum + nowD;
            nowD++;
            dNFT.mint(_player,"D",tokenId);
            emit userMintNFTEvent(msg.sender,_player,_type,tokenId,_status);
        }else if(_type ==5){
            uint tokenId = startNum + nowE;
            nowE++;
            eNFT.mint(_player,"E",tokenId);
            emit userMintNFTEvent(msg.sender,_player,_type,tokenId,_status);
        }else if(_type ==6){
            uint tokenId = startNum + nowF;
            nowF++;
            fNFT.mint(_player,"F",tokenId);
            emit userMintNFTEvent(msg.sender,_player,_type,tokenId,_status);
        }
        
    }

    function NFTBurnToUpEvent(uint[] memory _tokenids,uint _type) public returns(bool){

        require(_tokenids.length == 5,"must five mount");
        ERC721 aNFT = ERC721(nftA);
        ERC721 bNFT = ERC721(nftB);
        ERC721 cNFT = ERC721(nftC);
        ERC721 dNFT = ERC721(nftD);
        ERC721 eNFT = ERC721(nftE);
        if(_type == 1){
            for(uint i = 0;i < _tokenids.length;i++){
                require(aNFT.ownerOf(_tokenids[i]) == msg.sender,"not this NFT Owner");
                aNFT.burn(_tokenids[i]);
            }
        }else if(_type == 2){
            for(uint i = 0;i < _tokenids.length;i++){
                require(bNFT.ownerOf(_tokenids[i]) == msg.sender,"not this NFT Owner");
                bNFT.burn(_tokenids[i]);
            }
        }else if(_type == 3){
            for(uint i = 0;i < _tokenids.length;i++){
                require(cNFT.ownerOf(_tokenids[i]) == msg.sender,"not this NFT Owner");
                cNFT.burn(_tokenids[i]);
            }
        }else if(_type == 4){
           for(uint i = 0;i < _tokenids.length;i++){
                require(dNFT.ownerOf(_tokenids[i]) == msg.sender,"not this NFT Owner");
                dNFT.burn(_tokenids[i]);
            }
        }else if(_type == 5){
            for(uint i = 0;i < _tokenids.length;i++){
                require(eNFT.ownerOf(_tokenids[i]) == msg.sender,"not this NFT Owner");
                eNFT.burn(_tokenids[i]);
            }
        }
        
        emit userBurnToUpEvent(msg.sender,_type+1,block.timestamp);

        return true;
    }


    function setNowMount(uint _amount,uint _type) public isOnwer returns(uint){
        
        if(_type == 1){
            nowA =_amount;
        }else if(_type == 2){
            nowB =_amount;
        }else if(_type == 3){
            nowC =_amount;
        }else if(_type == 4){
            nowD =_amount;
        }else if(_type ==5){
            nowE =_amount;
        }else if(_type ==6){
            nowF =_amount;
        }
        return nowA;
    }

    function setNFTAddress(address _nftAdr,uint _type) public isOnwer returns(uint){
        
        if(_type == 1){
            nftA =_nftAdr;
        }else if(_type == 2){
            nftB =_nftAdr;
        }else if(_type == 3){
            nftC =_nftAdr;
        }else if(_type == 4){
            nftD =_nftAdr;
        }else if(_type ==5){
            nftE =_nftAdr;
        }else if(_type ==6){
            nftF =_nftAdr;
        }
        return _type;
    }

}