pragma solidity ^0.8.0;

/*
     ∧＿∧
    （｡･ω･｡)つ━☆・*。
    ⊂　　 ノ 　　　・゜+.
     しーＪ　　　°。+ *´¨)
              .· ´¸.·*´¨) ¸.·*¨)
             (¸.·´ (¸.·'* ☆
       
Welcome to LuminaCoin contract!
*/

pragma solidity ^0.8.0;// SPDX-License-Identifier: MIT

contract LuminaCoin {
    string public name = "LuminaCoin"; // Nazwa kryptowaluty
    string public symbol = "LUMI"; // Skrót kryptowaluty
    uint256 public totalSupply = 420690000000000 * 10**8; // Całkowita ilość tokenów

    mapping(address => uint256) public balanceOf; // Mapa przechowująca saldo użytkowników

    mapping(address => mapping(uint256 => bool)) public transactionExists; // Mapa przechowująca informacje o przetworzonych transakcjach

    event Transfer(address indexed from, address indexed to, uint256 value); // Zdarzenie emitowane przy transferze tokenów
    event TokensPurchased(address indexed buyer, uint256 amount, uint256 value); // Zdarzenie emitowane przy zakupie tokenów
    event TokensSold(address indexed seller, uint256 amount, uint256 value); // Zdarzenie emitowane przy sprzedaży tokenów

    constructor() {
        balanceOf[msg.sender] = totalSupply; // Przyznanie całej ilości tokenów twórcy kontraktu
    }

    /**
     * @dev Funkcja umożliwiająca transfer tokenów między użytkownikami.
     * @param to Adres odbiorcy.
     * @param amount Ilość tokenów do przesłania.
     */
    function transfer(address to, uint256 amount) external {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance"); // Sprawdzenie, czy użytkownik ma wystarczającą ilość tokenów
        require(!transactionExists[msg.sender][amount], "Transaction already processed"); // Sprawdzenie, czy transakcja nie została już przetworzona wcześniej

        balanceOf[msg.sender] -= amount; // Zmniejszenie salda nadawcy
        balanceOf[to] += amount; // Zwiększenie salda odbiorcy

        emit Transfer(msg.sender, to, amount); // Wyemitowanie zdarzenia Transfer

        transactionExists[msg.sender][amount] = true; // Oznaczenie transakcji jako przetworzonej
    }

    /**
     * @dev Funkcja umożliwiająca zakup tokenów za BNB.
     */
    function buyTokens() external payable {
        uint256 amountToBuy = msg.value; // Ilość BNB do zakupu
        require(amountToBuy > 0, "Amount must be greater than 0"); // Sprawdzenie, czy ilość BNB jest większa od zera
        require(!transactionExists[msg.sender][amountToBuy], "Transaction already processed"); // Sprawdzenie, czy transakcja nie została już przetworzona wcześniej

        uint256 tokensToTransfer = amountToBuy; // Ilość tokenów do przekazania

        balanceOf[msg.sender] += tokensToTransfer; // Zwiększenie salda kupującego

        emit TokensPurchased(msg.sender, tokensToTransfer, amountToBuy); // Wyemitowanie zdarzenia TokensPurchased

        transactionExists[msg.sender][amountToBuy] = true; // Oznaczenie transakcji jako przetworzonej
    }

    /**
     * @dev Funkcja umożliwiająca sprzedaż tokenów za BNB.
     * @param amount Ilość tokenów do sprzedaży.
     */
    function sellTokens(uint256 amount) external {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance"); // Sprawdzenie, czy użytkownik ma wystarczającą ilość tokenów
        require(!transactionExists[msg.sender][amount], "Transaction already processed"); // Sprawdzenie, czy transakcja nie została już przetworzona wcześniej

        uint256 ethToTransfer = amount; // Ilość BNB do przekazania

        balanceOf[msg.sender] -= amount; // Zmniejszenie salda sprzedającego

        payable(msg.sender).transfer(ethToTransfer); // Przekazanie BNB do sprzedającego

        emit TokensSold(msg.sender, amount, ethToTransfer); // Wyemitowanie zdarzenia TokensSold

        transactionExists[msg.sender][amount] = true; // Oznaczenie transakcji jako przetworzonej
    }

    /**
     * @dev Funkcja testowa sprawdzająca transfer tokenów.
     * @param to Adres odbiorcy.
     * @param amount Ilość tokenów do przesłania.
     */
    function testTransfer(address to, uint256 amount) external {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance"); // Sprawdzenie, czy użytkownik ma wystarczającą ilość tokenów

        balanceOf[msg.sender] -= amount; // Zmniejszenie salda nadawcy
        balanceOf[to] += amount; // Zwiększenie salda odbiorcy

        emit Transfer(msg.sender, to, amount); // Wyemitowanie zdarzenia Transfer
    }

    /**
     * @dev Funkcja testowa sprawdzająca zakup tokenów.
     * @param amountToBuy Ilość BNB do zakupu.
     */
    function testBuyTokens(uint256 amountToBuy) external payable {
        require(amountToBuy > 0, "Amount must be greater than 0"); // Sprawdzenie, czy ilość BNB jest większa od zera

        uint256 tokensToTransfer = amountToBuy; // Ilość tokenów do przekazania

        balanceOf[msg.sender] += tokensToTransfer; // Zwiększenie salda kupującego

        emit TokensPurchased(msg.sender, tokensToTransfer, amountToBuy); // Wyemitowanie zdarzenia TokensPurchased
    }

    /**
     * @dev Funkcja testowa sprawdzająca sprzedaż tokenów.
     * @param amount Ilość tokenów do sprzedaży.
     */
    function testSellTokens(uint256 amount) external {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance"); // Sprawdzenie, czy użytkownik ma wystarczającą ilość tokenów

        uint256 ethToTransfer = amount; // Ilość BNB do przekazania

        balanceOf[msg.sender] -= amount; // Zmniejszenie salda sprzedającego

        payable(msg.sender).transfer(ethToTransfer); // Przekazanie BNB do sprzedającego

        emit TokensSold(msg.sender, amount, ethToTransfer); // Wyemitowanie zdarzenia TokensSold
    }
}