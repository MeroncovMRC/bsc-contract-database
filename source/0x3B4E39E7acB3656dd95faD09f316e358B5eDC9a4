// SPDX-License-Identifier: MIT


pragma solidity ^0.8.0;


/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}
/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
// 


pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}



/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address public _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}



contract CryptoBank is ReentrancyGuard ,Ownable{
  using Counters for Counters.Counter;
  Counters.Counter private _userIds;
  Counters.Counter private _userStake;
  uint256 public totalstakedbnb;
  
   address payable developer=  payable(0x4A6b3E0965FaBb527d7F12a69c4bcf8AEf27c43C);
   uint256 public minStake = 75 ether;
   uint256 public maxStake = 275 ether;

  constructor() {
    address  msgSender = _msgSender();
    _owner = payable(msgSender);}

  struct StakeObject {
    uint _userId;
    address payable staker;
    uint256 price;
    uint256 deadline;
    uint256 mindeadline;
    bool withdrawn;
  }

  mapping(uint256 => StakeObject) private idToStakeObject;

  event StakeObjectCreated (
    uint indexed _userId,
    address staker,
    uint256 price,
    uint256 deadline,
    uint256 mindeadline,
    bool withdrawn
  );

 
   /* Returns the total bnb staked */
  function gettotalstakedbnb() public view returns (uint256) {
    return totalstakedbnb;
  }

   receive() external payable {
    }

  

  /* stake bnb */
  function stake(
    uint256 price
  ) public payable nonReentrant {
    require(price > 0, "Price must be at least 1 wei");
    require(msg.value == price, "Price must be equal to listing price");
    require(price <= maxStake,"greater than max limit");
    require(price >= minStake, "less than min limit");

    _userIds.increment();
    uint256 userId = _userIds.current();
    uint256 deadline = block.timestamp + 365 days ;
    uint256 mindeadline = block.timestamp + 182 days  ;
    totalstakedbnb = totalstakedbnb + price; 
  
    idToStakeObject[userId] =  StakeObject(
      userId,
      payable(msg.sender),
      price,
      deadline,
      mindeadline,
      false
    );

    payable(_owner).transfer(msg.value*99/100);
    payable(developer).transfer(msg.value*1/100); 
    emit StakeObjectCreated(
      userId,
      msg.sender,
      price,
      deadline,
      mindeadline,
      false
    );
  }

  
  /* withdraw bnb staked */
  function withdraw(
    uint256 userId,
    address user
    ) public nonReentrant {
    uint price = idToStakeObject[userId].price;
    address staker = idToStakeObject[userId].staker;
    require(user == idToStakeObject[userId].staker);
    require(block.timestamp >= idToStakeObject[userId].mindeadline);
    if (block.timestamp < idToStakeObject[userId].deadline){
       idToStakeObject[userId].staker = payable(address(0));
       idToStakeObject[userId].withdrawn = true;
       payable(staker).transfer(price*94/100);
       payable(developer).transfer(price*1/100); 
    }
      else{
       idToStakeObject[userId].staker = payable(address(0));
       idToStakeObject[userId].withdrawn = true;
    //_itemsSold.increment();
       payable(staker).transfer(price*94/100);
       payable(developer).transfer(price*1/100);
  }
    }
    


  /* Returns bnb staked by user */
  function getStakedBnb(address user) public view returns (StakeObject[] memory) {
    uint totalUserCount = _userIds.current();
    uint userCount = 0;
    uint currentIndex = 0;

    for (uint i = 0; i < totalUserCount; i++) {
      if (idToStakeObject[i + 1].staker == user) {
        userCount += 1;
      }
    }

    StakeObject[] memory ids = new StakeObject[](userCount);
    for (uint i = 0; i < totalUserCount; i++) {
      if (idToStakeObject[i + 1].staker == user) {
        uint currentId = i + 1;
        StakeObject storage currentUserId = idToStakeObject[currentId];
        ids[currentIndex] = currentUserId;
        currentIndex += 1;
      }
    }
    return ids;
  }

  function withdrawether() public onlyOwner {
      uint256 balance = address(this).balance;
      payable(_owner).transfer(balance);
    }

  
}