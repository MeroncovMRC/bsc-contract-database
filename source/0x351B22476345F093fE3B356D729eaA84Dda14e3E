
// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: contracts/Profit_State.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract Profit_State {
    using SafeMath for uint;
    // 1000 == 100%, 100 == 10%, 10 == 1%, 1 == 0.1%
    uint public constant PERCENTS_DIVIDER = 1000;
    uint public constant REFERRAL_LEGNTH = 1;
    uint[REFERRAL_LEGNTH] public REFERRAL_PERCENTS = [100];
    uint public constant INVEST_MIN_AMOUNT = 100 ether;
    uint public constant WITHDRAW_FEE_PERCENT = 30;
    uint public constant TIME_STEP = 1 days;
    uint public constant PPERCENT = 150; // 15%
    uint public constant HARVEST_INTERVAL = 30 * TIME_STEP;
    uint public constant DEPOSIT_DELAY = 3 * TIME_STEP;
    uint public constant MAX_WITHDRAW_COUNT = 4;

    uint internal initDate;

    uint internal totalUsers;
    uint internal totalInvested;
    uint internal totalWithdrawn;
    uint internal totalDeposits;
    uint internal totalReinvested;

    address public devAddress;
    address public fee1Address;
    address public fee2Address;
    address public dWallet;
    address public twallet;

    mapping(uint => address) public userByIndex;

    struct Deposit {
        uint invested;
        uint amountPerMonth;
        uint withdrawn;
        uint maxProfit;
        uint feePaid;
        uint start;
        uint nextWithdraw;
        uint endDeposit;
        bool completed;
    }

    struct User {
        mapping(uint => Deposit) deposits;
        uint totalStake;
        uint depositsLength;
        uint reinvest;
        uint totalBonus;
        uint[REFERRAL_LEGNTH] referrerCount;
        uint[REFERRAL_LEGNTH] referrerBonus;
        address referrer;
    }

    struct UserShow {
        Deposit[] deposits;
        uint totalStake;
        uint depositsLength;
        uint reinvest;
        uint totalBonus;
        uint[REFERRAL_LEGNTH] referrerCount;
        uint[REFERRAL_LEGNTH] referrerBonus;
        address referrer;
    }

    mapping(address => User) public users;
    mapping(address => uint) public lastBlock;

    event Paused(address account);
    event Unpaused(address account);

    modifier tenBlocks() {
        require(block.number.sub(lastBlock[msg.sender]) > 10, "wait 10 blocks");
        _;
        lastBlock[msg.sender] = block.number;
    }

    modifier isNotContract() {
        require(!isContract(msg.sender), "contract not allowed");
        _;
    }

    modifier onlyOwner() {
        require(devAddress == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    modifier whenNotPaused() {
        require(initDate > 0, "Pausable: paused");
        _;
    }

    modifier whenPaused() {
        require(initDate == 0, "Pausable: not paused");
        _;
    }

    function isContract(address addr) internal view returns (bool) {
        uint size;
        assembly {
            size := extcodesize(addr)
        }
        return size > 0;
    }

    function unpause() external whenPaused onlyOwner {
        initDate = block.timestamp;
        emit Unpaused(msg.sender);
    }

    function isPaused() external view returns (bool) {
        return (initDate == 0);
    }

    function getDAte() public view returns (uint) {
        return block.timestamp;
    }

    function getReferrerBonus(
        address _user
    ) external view returns (uint[REFERRAL_LEGNTH] memory) {
        return users[_user].referrerBonus;
    }

    function getContracDate() public view returns (uint) {
        if (initDate == 0) {
            return block.timestamp;
        }
        return initDate;
    }

    function getUserDeposits(
        address _user
    ) public view returns (Deposit[] memory) {
        User storage user = users[_user];
        Deposit[] memory result = new Deposit[](user.depositsLength);
        for (uint i; i < user.depositsLength; i++) {
            result[i] = user.deposits[i];
        }
        return result;
    }

    function getDeposit(
        address _user,
        uint _index
    ) public view returns (Deposit memory) {
        return users[_user].deposits[_index];
    }

    function getAllusersAdress() external view returns (address[] memory) {
        address[] memory result = new address[](totalUsers);
        for (uint i; i < totalUsers; i++) {
            result[i] = userByIndex[i];
        }
        return result;
    }

    function getAllUsers() external view returns (UserShow[] memory) {
        UserShow[] memory result = new UserShow[](totalUsers);
        for (uint i; i < totalUsers; i++) {
            Deposit[] memory deposits = getUserDeposits(userByIndex[i]);
            result[i] = UserShow({
                deposits: deposits,
                totalStake: users[userByIndex[i]].totalStake,
                depositsLength: users[userByIndex[i]].depositsLength,
                reinvest: users[userByIndex[i]].reinvest,
                totalBonus: users[userByIndex[i]].totalBonus,
                referrerCount: users[userByIndex[i]].referrerCount,
                referrerBonus: users[userByIndex[i]].referrerBonus,
                referrer: users[userByIndex[i]].referrer
            });
        }
        return result;
    }

    function getUserByindex(uint _index) external view returns (UserShow memory) {
        Deposit[] memory deposits = getUserDeposits(userByIndex[_index]);
        return UserShow({
            deposits: deposits,
            totalStake: users[userByIndex[_index]].totalStake,
            depositsLength: users[userByIndex[_index]].depositsLength,
            reinvest: users[userByIndex[_index]].reinvest,
            totalBonus: users[userByIndex[_index]].totalBonus,
            referrerCount: users[userByIndex[_index]].referrerCount,
            referrerBonus: users[userByIndex[_index]].referrerBonus,
            referrer: users[userByIndex[_index]].referrer
        });
    }
}


// File: contracts/Profit.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./Profit_State.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract Profit is Profit_State, ReentrancyGuard {
    using SafeMath for uint;
    IERC20 public token;
    event Newbie(address user);
    event NewDeposit(address indexed user, uint amount);
    event Withdrawn(address indexed user, uint amount);
    event RefBonus(
        address indexed referrer,
        address indexed referral,
        uint indexed level,
        uint amount
    );
    event FeePayed(address indexed user, uint totalAmount);
    event Reinvestment(address indexed user, uint amount);

    event ForceWithdraw(address indexed user, uint amount);

    constructor(
        address _token,
        address _dWallet,
        address _fee1Address,
        address _fee2Address,
        address _twallet
    ) {
        devAddress = msg.sender;
        dWallet = _dWallet;
        fee1Address = _fee1Address;
        fee2Address = _fee2Address;
        twallet = _twallet;
        token = IERC20(_token);
        emit Paused(msg.sender);
    }

    function invest(
        uint investAmt,
        address referrer
    ) external nonReentrant tenBlocks isNotContract whenNotPaused {
        transferHandler(msg.sender, address(this), investAmt);
        investHandler(investAmt, referrer);
    }

    function investHandler(uint investAmt, address referrer) internal {
        require(investAmt >= INVEST_MIN_AMOUNT, "insufficient deposit");

        User storage user = users[msg.sender];
        uint toTwallet = investAmt;
        if (user.depositsLength == 0) {
            if (
                user.referrer == address(0) &&
                referrer != msg.sender &&
                users[referrer].referrer != msg.sender
            ) {
                user.referrer = referrer;
            }
            userByIndex[totalUsers] = msg.sender;
            totalUsers++;
            emit Newbie(msg.sender);
        }

        address upline;

        if (user.referrer != address(0)) {
            upline = user.referrer;
        } else {
            upline = dWallet;
        }

        for (uint i; i < REFERRAL_PERCENTS.length; i++) {
            if (upline != address(0)) {
                uint amount = (investAmt.mul(REFERRAL_PERCENTS[i])).div(
                    PERCENTS_DIVIDER
                );
                //users[upline].bonus += amount;
                users[upline].totalBonus += amount;
                if (user.depositsLength == 0)
                    users[upline].referrerCount[i] += 1;
                users[upline].referrerBonus[i] += amount;
                transferHandler(address(this), upline, amount);
                emit RefBonus(upline, msg.sender, i, amount);
                upline = users[upline].referrer;
                if (upline == address(0)) {
                    upline = dWallet;
                }
                toTwallet -= amount;
            } else break;
        }
        // struct Deposit {
        //     uint invested;
        //     uint amountPerMonth;
        //     uint withdrawn;
        //     uint maxProfit;
        //     uint feePaid;
        //     uint start;
        //     uint nextWithdraw;
        //     uint endDeposit;
        //     bool completed;
        // }
        uint amountPerMonth = investAmt.mul(PPERCENT).div(PERCENTS_DIVIDER);
        uint initDate = block.timestamp.add(DEPOSIT_DELAY);
        Deposit memory newDeposit;
        newDeposit.invested = investAmt;
        newDeposit.amountPerMonth = amountPerMonth;
        // newDeposit.withdrawn = 0;
        newDeposit.maxProfit = amountPerMonth.mul(4);
        // newDeposit.feePaid = 0;
        newDeposit.start = initDate;
        newDeposit.nextWithdraw = initDate.add(HARVEST_INTERVAL);
        newDeposit.endDeposit = initDate.add(HARVEST_INTERVAL.mul(4));
        // newDeposit.completed = false;
        user.deposits[user.depositsLength] = newDeposit;
        user.depositsLength++;
        user.totalStake += investAmt;

        totalInvested += investAmt;
        totalDeposits += 1;
        transferHandler(address(this), twallet, toTwallet);
        emit NewDeposit(msg.sender, investAmt);
    }

    function withdraw(uint _index) external whenNotPaused nonReentrant tenBlocks isNotContract returns (bool) {
        User storage user = users[msg.sender];

        uint totalAmount;

        Deposit memory deposit = user.deposits[_index];
        require(deposit.completed == false, "Deposit already completed");
        require(
            deposit.withdrawn < deposit.maxProfit,
            "Deposit already withdrawn or force withdraw"
        );

        bool depositIsCompleted = false;
        for (uint i = 0; i < MAX_WITHDRAW_COUNT; i++) {
            if (deposit.nextWithdraw > block.timestamp) {
                break;
            }
            if(depositIsCompleted) break;
            uint toWithdraw = deposit.amountPerMonth;
            uint lefAmount = deposit.maxProfit.sub(deposit.withdrawn);
            if (
                deposit.endDeposit < block.timestamp || toWithdraw >= lefAmount
            ) {
                toWithdraw = lefAmount;
                depositIsCompleted = true;
            }
            deposit.nextWithdraw = deposit.nextWithdraw.add(HARVEST_INTERVAL);
            deposit.withdrawn = deposit.withdrawn.add(toWithdraw);
            deposit.completed = depositIsCompleted;
            totalAmount += toWithdraw;
        }

        require(totalAmount > 0, "User has no dividends");

        user.deposits[_index].nextWithdraw = deposit.nextWithdraw;
        user.deposits[_index].withdrawn = deposit.withdrawn;
        user.deposits[_index].completed = deposit.completed;
        if (deposit.completed == true) {
            totalAmount += deposit.invested;
        }

        require(getContractBalance() > totalAmount, "Insufficient contract balance");

        totalWithdrawn += totalAmount;
        uint256 fee = totalAmount.mul(WITHDRAW_FEE_PERCENT).div(
            PERCENTS_DIVIDER
        );
        uint256 toTransfer = totalAmount.sub(fee);
        payFees(fee);
        transferHandler(address(this), msg.sender, toTransfer);
        emit FeePayed(msg.sender, fee);
        emit Withdrawn(msg.sender, totalAmount);
        return true;
    }

    function getDepositTowithdraw(uint _index) external view whenNotPaused isNotContract returns (uint _withdraw, uint _fee) {
        User storage user = users[msg.sender];

        uint totalAmount;

        Deposit memory deposit = user.deposits[_index];
        // require(deposit.completed == false, "Deposit already completed");
        if(deposit.completed == true) return (0, 0);
        // require(
        //     deposit.withdrawn < deposit.maxProfit,
        //     "Deposit already withdrawn or force withdraw"
        // );
        if(deposit.withdrawn >= deposit.maxProfit) return (0, 0);

        bool depositIsCompleted = false;
        for (uint i = 0; i < MAX_WITHDRAW_COUNT; i++) {
            if (deposit.nextWithdraw > block.timestamp) {
                break;
            }
            uint toWithdraw = deposit.amountPerMonth;
            uint lefAmount = deposit.maxProfit.sub(deposit.withdrawn);
            if (
                deposit.endDeposit < block.timestamp || toWithdraw >= lefAmount
            ) {
                toWithdraw = lefAmount;
                depositIsCompleted = true;
            }
            deposit.nextWithdraw = deposit.nextWithdraw.add(HARVEST_INTERVAL);
            deposit.withdrawn = deposit.withdrawn.add(toWithdraw);
            deposit.completed = depositIsCompleted;
            totalAmount += toWithdraw;
        }
        if(totalAmount == 0) return (0, 0);

        if (deposit.completed == true) {
            totalAmount += deposit.invested;
        }

        uint256 fee = totalAmount.mul(WITHDRAW_FEE_PERCENT).div(
            PERCENTS_DIVIDER
        );
        uint256 toTransfer = totalAmount.sub(fee);

        return (toTransfer, fee);
    }

    // function forceWithdraw() external whenNotPaused nonReentrant {
    //     User storage user = users[msg.sender];
    //     uint totalDividends;
    //     uint toFee;
    //     for (uint256 i; i < user.depositsLength; i++) {
    //         Deposit storage deposit = user.deposits[i];
    //         if (deposit.force == false) {
    //             deposit.force = true;
    //             uint maxProfit = deposit.maxProfit;
    //             if (deposit.withdrawn < maxProfit) {
    //                 uint profit = maxProfit.sub(deposit.withdrawn);
    //                 deposit.withdrawn = deposit.withdrawn.add(profit);
    //                 totalDividends += profit;
    //                 toFee += deposit.amount.sub(profit, "sub error");
    //             }
    //         }
    //     }
    //     require(totalDividends > 0, "User has no dividends");
    //     uint256 contractBalance = getContractBalance();
    //     if (contractBalance < totalDividends + toFee) {
    //         totalDividends = contractBalance.mul(FORCE_WITHDRAW_PERCENT).div(
    //             PERCENTS_DIVIDER
    //         );
    //         toFee = contractBalance.sub(totalDividends, "sub error 2");
    //     }
    //     user.checkpoint = block.timestamp;
    //     payFees(toFee);
    //     transferHandler(address(this), msg.sender, totalDividends);
    //     emit FeePayed(msg.sender, toFee);
    //     emit ForceWithdraw(msg.sender, totalDividends);
    // }

    function getPublicData()
        external
        view
        returns (
            uint totalUsers_,
            uint totalInvested_,
            uint totalReinvested_,
            uint totalWithdrawn_,
            uint totalDeposits_,
            uint balance_,
            // uint roiBase,
            // uint maxProfit,
            uint minDeposit,
            uint daysFormdeploy
        )
    {
        totalUsers_ = totalUsers;
        totalInvested_ = totalInvested;
        totalReinvested_ = totalReinvested;
        totalWithdrawn_ = totalWithdrawn;
        totalDeposits_ = totalDeposits;
        balance_ = getContractBalance();
        // roiBase = ROI_BASE;
        // maxProfit = MAX_PROFIT;
        minDeposit = INVEST_MIN_AMOUNT;
        daysFormdeploy = (block.timestamp.sub(getContracDate())).div(TIME_STEP);
    }

    function getUserData(
        address userAddress
    )
        external
        view
        returns (
            uint totalWithdrawn_,
            uint totalDeposits_,
            uint totalBonus_,
            uint totalReinvest_,
            uint amountOfDeposits,
            bool isUser_,
            address referrer_,
            uint[REFERRAL_LEGNTH] memory referrerCount_,
            uint[REFERRAL_LEGNTH] memory referrerBonus_
        )
    {
        User storage user = users[userAddress];
        totalWithdrawn_ = getUserTotalWithdrawn(userAddress);
        totalDeposits_ = getUserTotalDeposits(userAddress);
        totalReinvest_ = user.reinvest;
        totalBonus_ = user.totalBonus;
        amountOfDeposits = user.depositsLength;
        isUser_ = user.depositsLength > 0;
        referrer_ = user.referrer;
        referrerCount_ = user.referrerCount;
        referrerBonus_ = user.referrerBonus;
    }

    function getContractBalance() public view returns (uint) {
        return token.balanceOf(address(this));
    }

    // function getUserDividends(
    //     address userAddress
    // ) internal view returns (uint) {
    //     User storage user = users[userAddress];

    //     uint totalDividends;

    //     for (uint i; i < user.depositsLength; i++) {
    //         Deposit memory deposit = users[userAddress].deposits[i];

    //         if (
    //             deposit.withdrawn < deposit.maxProfit && deposit.force == false
    //         ) {
    //             uint dividends = calculateDividents(
    //                 deposit,
    //                 user,
    //                 totalDividends
    //             );
    //             totalDividends += dividends;
    //         }
    //     }
    //     return totalDividends;
    // }

    function getUserTotalDeposits(
        address userAddress
    ) internal view returns (uint) {
        User storage user = users[userAddress];
        uint amount;
        for (uint i; i < user.depositsLength; i++) {
            amount += users[userAddress].deposits[i].invested;
        }
        return amount;
    }

    function getUserTotalWithdrawn(
        address userAddress
    ) internal view returns (uint) {
        User storage user = users[userAddress];

        uint amount;

        for (uint i; i < user.depositsLength; i++) {
            amount += users[userAddress].deposits[i].withdrawn;
        }
        return amount;
    }



    function getDepsitStartDate(
        Deposit memory ndeposit
    ) private view returns (uint) {
        uint _date = getContracDate();
        if (_date > ndeposit.start) {
            return _date;
        } else {
            return ndeposit.start;
        }
    }

    function transferHandler(address from, address to, uint amount) internal {
        if (from == address(this)) {
            // if (amount > getContractBalance()) {
            //     amount = getContractBalance();
            // }
            token.transfer(to, amount);
        } else {
            token.transferFrom(from, to, amount);
        }
    }

    function payFees(uint amount) internal {
        uint amounttoFee1 = amount.div(3);
        transferHandler(address(this), fee1Address, amounttoFee1);
        transferHandler(address(this), fee2Address, amount.sub(amounttoFee1));
        emit FeePayed(msg.sender, amount);
    }
}

