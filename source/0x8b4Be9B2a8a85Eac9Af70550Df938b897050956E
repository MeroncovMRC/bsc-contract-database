// McMoon Token Official
// TG: t.me/mcmoonofficial
// Safe Dev

// SPDX-License-Identifier: MIT

// File: contracts/interfaces/IWrappedNativeToken.sol


pragma solidity ^0.8.4;

interface IWrappedNativeToken {
    function deposit() external payable;
    function withdraw(uint wad) external;
    function totalSupply() external view returns (uint);
    function approve(address guy, uint wad) external returns (bool);
    function transfer(address dst, uint wad) external returns (bool);
    function transferFrom(address src, address dst, uint wad) external returns (bool);
    function balanceOf(address wallet) external view returns (uint);
}
// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// File: contracts/data/ShareHolder.sol


pragma solidity ^0.8.4;

struct ShareHolder {
    uint256 shares;
    uint256 rewardDebt;
    uint256 claimed;
    uint256 pending;
}
// File: contracts/interfaces/IHODLRewardDistributor.sol


pragma solidity ^0.8.4;


interface IHODLRewardDistributor {

    function excludedFromRewards(
        address wallet_
    ) external view returns (bool);

    function pending(
        address sharholderAddress_
    ) external view returns (uint256 pendingAmount);

    function totalPending () external view returns (uint256 );

    function shareHolderInfo (
        address shareHoldr_
    ) external view returns(ShareHolder memory);

    function depositWrappedNativeTokenRewards(
        uint256 amount_
    ) external;

    function setShare(
        address sharholderAddress_,
        uint256 amount_
    ) external;

    function excludeFromRewards (
        address shareHolderToBeExcluded_ 
    ) external;

    function includeInRewards(
        address shareHolderToBeIncluded_
    ) external;

    function claimPending(
        address sharholderAddress_
    ) external;

    function owner() external returns(address);
    
    function batchProcessClaims(uint256 gas) external;
}
// File: contracts/interfaces/IMcMoon.sol


pragma solidity ^0.8.4;


interface IMcMoon {
    function autoLPWallet () external returns(address);
    function marketingWallet() external returns(address);
    function hodlRewardDistributor() external returns(IHODLRewardDistributor);
}
// File: contracts/interfaces/IRouter.sol


pragma solidity ^0.8.4;

interface IRouter {
    function factory() external returns (address);
    /**
        for AMMs that cloned uni without changes to functions names
    */
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    /**
        for joe AMM that cloned uni and changed functions names
    */
    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function addLiquidityAVAX(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountAVAXMin,
        address to,
        uint256 deadline
    ) external payable returns (uint256 amountToken,uint256 amountAVAX,uint256 liquidity);

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
}
// File: contracts/interfaces/IFactory.sol


pragma solidity ^0.8.4;


interface IFactory {
    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);
}
// File: @openzeppelin/contracts/utils/math/SafeMath.sol


// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: contracts/data/Tax.sol


pragma solidity ^0.8.4;

struct Tax {
    uint256 autoLP;
    uint256 holder;
    uint256 marketing;
}
// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;



/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: contracts/HodlRewardDistributor.sol


pragma solidity ^0.8.4;








contract HODLRewardsDistributor is Ownable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    address immutable public wbnb;

    uint256 public accPerShare;   // Accumulated per share, times 1e36.
    uint256 public totalShares;   // total number of shares
    uint256 public totalClaimed;  // total amount claimed
    uint256 public totalRewardsDebt;  // total amount claimed

    // use getShare-holderInfo function to get this data
    mapping (address => ShareHolder) shareHolders;
    address[] public allShareHolders;
    mapping (address => uint256) indexOfShareHolders;

    uint256 private _lastProccessedIndex = 1;

    mapping (address => bool) public excludedFromRewards;

    address public immutable rewardsaddress;

    address immutable swapRouter;

    address[] path = new address[](2);

    // events
    event Claimed(address indexed claimer, uint256 indexed amount);
    event RewardsAdded(uint256 indexed amount);
    event ShareUpdated(address indexed shareHolder, uint256 indexed sharesAmount);
    event IncludedInRewards(address indexed shareHolder);
    event ExcludedFromRewards(address indexed shareHolder);

    modifier onlyIncluded (address shareHolderAddress_) {
        require(!excludedFromRewards[shareHolderAddress_],"HODLRewardsDistributor: excluded from rewards");
        _;
    }

    receive() external payable { 
        uint256 balanceBefore = IERC20(rewardsaddress).balanceOf(address(this));
        _swap(msg.value);
        uint256 addedBalance = IERC20(rewardsaddress).balanceOf(address(this)) - balanceBefore;
        _updateGlobalShares(addedBalance);
    }
    constructor (address wbnb_, address rewardsAddress_, address swapRouter_){
        wbnb = wbnb_;
        allShareHolders.push(address(0)); // use the index zero for address zero
        rewardsaddress = rewardsAddress_;
        swapRouter = swapRouter_;
        path[0] = wbnb_;
        path[1] = rewardsAddress_;
    }

    /**
        retruns the pending rewards amount
        */
    function pending(
        address sharholderAddress_
    ) public view returns (uint256 pendingAmount) {
        ShareHolder storage user = shareHolders[sharholderAddress_];
        pendingAmount = user.shares.mul(accPerShare).div(1e36).sub(user.rewardDebt);
    }

    function totalPending () public view returns (uint256 ) {
        return accPerShare.mul(totalShares).div(1e36).sub(totalRewardsDebt);
    }

    /**
        returns information about the share holder
        */
    function shareHolderInfo (
        address shareHoldr_
    ) external view returns(ShareHolder memory){
        ShareHolder storage user = shareHolders[shareHoldr_];
        return ShareHolder (
            user.shares,     // How many tokens the user is holding.
            user.rewardDebt, // see @masterChef contract for more details
            user.claimed,
            pending(shareHoldr_)
        );
    }

    function holders () external view returns(uint256) {
        return allShareHolders.length;
    }

    /**
        CAN BE CALLED BY ANYONE 
        could help add more rewards from other incomes to thus contract
        cannot be used maliciously who ever call this is basically giving wrapped native token as reward
        to all shareholders
        */
    function depositWrappedNativeTokenRewards(
        uint256 amount_
    ) external {
        IWrappedNativeToken(wbnb).transferFrom(msg.sender, address(this), amount_);
        IWrappedNativeToken(wbnb).withdraw(IWrappedNativeToken(wbnb).balanceOf(address(this)));
    }

    function setShare(
        address sharholderAddress_,
        uint256 amount_
    ) onlyOwner onlyIncluded(sharholderAddress_) external {
        ShareHolder storage user = shareHolders[sharholderAddress_];

        // pay any pending rewards
        if(user.shares > 0)
            claimPending(sharholderAddress_);

        // update total shares
        _updateUserShares(sharholderAddress_, amount_);
    }

    /*
        excludes shareHolderToBeExcluded_ from participating in rewards
    */
    function excludeFromRewards (
        address shareHolderToBeExcluded_ 
    ) external onlyOwner {
        if(excludedFromRewards[shareHolderToBeExcluded_])
            return;

        uint256 amountPending = pending(shareHolderToBeExcluded_);
        // update this user's shares to 0
        _updateUserShares(shareHolderToBeExcluded_, 0);
        // distribute his pending share to all shareholders
        if(amountPending > 0)
            _updateGlobalShares(amountPending);
        excludedFromRewards[shareHolderToBeExcluded_] = true;
        emit ExcludedFromRewards(shareHolderToBeExcluded_);
    }

    /*
        allow shareHolderToBeExcluded_ to participating in rewards
    */
    function includeInRewards(
        address shareHolderToBeIncluded_
    ) external onlyOwner {
        require(excludedFromRewards[shareHolderToBeIncluded_],"HODLRewardsDistributor: not excluded");
        
        _updateUserShares(shareHolderToBeIncluded_, IERC20(owner()).balanceOf(shareHolderToBeIncluded_));
        excludedFromRewards[shareHolderToBeIncluded_] = false;
        emit IncludedInRewards(shareHolderToBeIncluded_);
    }

    /** 
        @dev
        claim pending rewards for sharholderAddress_
        can be called by anyone but only sharholderAddress_
        can receive the reward
    */
    function claimPending(
        address sharholderAddress_
    ) public {
        ShareHolder storage user = shareHolders[sharholderAddress_];

        uint256 pendingAmount = user.shares.mul(accPerShare).div(1e36).sub(user.rewardDebt);

        if(pendingAmount <= 0) return;
        
        IERC20(rewardsaddress).safeTransfer(sharholderAddress_, pendingAmount);
        emit Claimed(sharholderAddress_, pendingAmount);

        user.claimed = user.claimed.add(pendingAmount);
        totalClaimed = totalClaimed.add(pendingAmount);
        
        totalRewardsDebt = totalRewardsDebt.sub(user.rewardDebt);
        user.rewardDebt = user.shares.mul(accPerShare).div(1e36);
        totalRewardsDebt = totalRewardsDebt.add(user.rewardDebt);
    }

    function batchProcessClaims(uint256 gas) public {
        if(gasleft() < gas) return;
        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();
        uint256 iterations = 1; // index 0 is ocupied by address(0) 

        // we
        while(gasUsed < gas && iterations < allShareHolders.length) {
            claimPending(allShareHolders[_lastProccessedIndex]);
            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            _incrementLastProccessed();
            iterations++;
        }
    }

    /**
        prevents accidental renouncement of owner ship 
        can sill renounce if set explicitly to dead address 
     */
    function renounceOwnership() public virtual override onlyOwner {}

    /**
        updates the accumulatedPerShare amount based on the new amount and total shares
        */
    function _updateGlobalShares(
        uint256 amount_
    ) internal {
        accPerShare = accPerShare.add(amount_.mul(1e36).div(totalShares));
        emit RewardsAdded(amount_);
    }

    /**
        swap helper function
     */
    function _swap(
        uint amount_
    ) internal {
        // make the swap to wbnb
        IRouter(swapRouter).swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount_}(
            0,
            path,
            address(this),
            block.timestamp + 1000
        );
    }

    /**
        updates a user share
        */
    function _updateUserShares(
        address sharholderAddress_,
        uint256 newAmount_
    ) internal {
        ShareHolder storage user = shareHolders[sharholderAddress_];

        totalShares = totalShares.sub(user.shares).add(newAmount_);
        totalRewardsDebt = totalRewardsDebt.sub(user.rewardDebt);
        user.shares = newAmount_;
        user.rewardDebt = user.shares.mul(accPerShare).div(1e36);
        totalRewardsDebt = totalRewardsDebt.add(user.rewardDebt);
        if(user.shares > 0 && indexOfShareHolders[sharholderAddress_] == 0 ){
            // add this shareHolder to array 
            allShareHolders.push(sharholderAddress_);
            indexOfShareHolders[sharholderAddress_] = allShareHolders.length-1;

        } else if(user.shares == 0 && indexOfShareHolders[sharholderAddress_] != 0){
            // remove this share holder from array
            uint256 indexOfRemoved = indexOfShareHolders[sharholderAddress_];
            allShareHolders[indexOfRemoved] = allShareHolders[allShareHolders.length-1]; // last item to the removed item's index
            indexOfShareHolders[sharholderAddress_] = 0;
            indexOfShareHolders[allShareHolders[indexOfRemoved]] = indexOfRemoved;
            allShareHolders.pop(); // remove the last item
        }
        emit ShareUpdated(sharholderAddress_, newAmount_);
    }

    function _incrementLastProccessed() internal {
        _lastProccessedIndex++;
        if(_lastProccessedIndex >= allShareHolders.length)
            _lastProccessedIndex = 1;
    }
}
// File: contracts/SwapHandler.sol


pragma solidity ^0.8.4;






contract SwapHandler is Ownable {

    address immutable swapRouter;
    address immutable wrappedNativeToken;
    
    IMcMoon erc20;

    bool private _inSwap = false;
    
    uint256 public totalAutoLPNative;
    uint256 public totalMarketingInNative;
    uint256 public totalToHoldersInNative;

    uint256 public totalAutoLPERC20;
    uint256 public totalMarketingInERC20;
    uint256 public totalToHoldersInERC20;

    modifier isInSwap () {
        require(!_inSwap, "SwapHandler: Already in swap");
        _inSwap = true;
        _;
        _inSwap = false;
    }

    receive() external payable {}

    constructor (
        address swapRouter_,
        address wrappedNativeToken_
    ) {
        swapRouter = swapRouter_;
        wrappedNativeToken = wrappedNativeToken_;
        erc20 = IMcMoon(msg.sender);
    }

    /**
        this will swap the amounts to avax/eth/bnb/matic and send them to the respective wallets
     */
    function swapToNativeWrappedToken(
        uint256 autoLPAmount_,
        uint256 holderAmount_,
        uint256 marketingAmount_
    ) isInSwap onlyOwner external {
        IERC20(owner()).approve(swapRouter, IERC20(owner()).balanceOf(address(this)));

        uint256 balanceBefore;
        if (autoLPAmount_ > 0){
            uint256 half = autoLPAmount_/2;
            totalAutoLPERC20 += half;
            balanceBefore = address(this).balance;
            _swap(half, address(this)); // swap half
            totalAutoLPNative += address(this).balance-balanceBefore;
            _createLP(autoLPAmount_-half);
        }

        if (marketingAmount_ > 0){
            totalMarketingInERC20 += marketingAmount_;
            balanceBefore = erc20.marketingWallet().balance;
            _swap(marketingAmount_, erc20.marketingWallet());
            totalMarketingInNative += erc20.marketingWallet().balance - balanceBefore;
        }

        if (holderAmount_ > 0){
            totalToHoldersInERC20 += IERC20(owner()).balanceOf(address(this));
            balanceBefore = address(erc20.hodlRewardDistributor()).balance;
            _swap(
                IERC20(owner()).balanceOf(address(this)),
                address(erc20.hodlRewardDistributor())
            );       
            // Does not matter if it fails because it should not 
            address(erc20.hodlRewardDistributor()).call{value: address(this).balance}("");

            totalToHoldersInNative += address(erc20.hodlRewardDistributor()).balance-balanceBefore;
        }
    }

    /**
        swap helper function
     */
    function _swap(
        uint amount_,
        address to_
    ) internal {
        // make the swap to wrappedNativeToken
        address[] memory path = new address[](2);
        path[0] = owner();
        path[1] = wrappedNativeToken;

        IRouter(swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(
            amount_,
            0,
            path,
            to_,
            block.timestamp + 10000
        );
    }


    function _createLP (uint256 erc20Amount_) internal {
        IRouter(swapRouter).addLiquidityETH{value: address(this).balance}(
            owner(),
            erc20Amount_,
            0,
            0,
            erc20.autoLPWallet(),
            block.timestamp + 10000
        );
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual override onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
        erc20 = IMcMoon(newOwner);
    }
}
// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: @openzeppelin/contracts/token/ERC20/ERC20.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;




/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

// File: contracts/McMoon.sol


pragma solidity ^0.8.4;









contract McMoon is ERC20, Ownable {
    using SafeMath for uint256;

    struct Whitlisted {
        bool maxTx;
        bool maxBalance;
        bool tax;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
    uint256 constant BASE = 10 ** 18; // 18 decimals
    uint256 constant TOTAL_SUPPLY = 100_000_000_000_000 * BASE;



    address public wbnb;
    address public swapRouter;
    address public wbnbPair;


    address public autoLPWallet;
    address public marketingWallet;

    uint256 public minimumShareForRewards;
    bool public autoBatchProcess;

    Tax public buyerTax = Tax(
        3, // AUTOLP
        0, // HOLDER
        3 // Marketing
    );

    Tax public sellerTax = Tax(
        3, // AUTOLP
        10, // HOLDER
        3 // Marketing
    );

    Tax public transferTax = Tax(
        3, // AUTOLP
        3, // HOLDER 
        3 // Marketing
    );

    mapping(address => bool) public isLpPair;

    mapping(address => Whitlisted) public whitlisted;

    HODLRewardsDistributor public hodlRewardDistributor;

    bool public isDistributorSet;

    bool public reflectionEnabled = false;

    SwapHandler public swapHundler;

    uint256 public autoLPReserved;
    uint256 public hodlReserved;
    uint256 public marketingReserved;

    uint256 public processingGasLimit = 500000;

    uint256 public maxTx;
    function setMaxTx(uint256 maxTx_) external onlyOwner {maxTx = maxTx_;}
    
    uint256 public maxBalance;
    function setMaxBalance(uint256 maxBalance_) external onlyOwner {maxBalance = maxBalance_;}

    constructor(
        string memory name_,
        string memory symbol_,
        address rewardsAddress_,
        address wbnb_,
        address swapRouter_,
        address payable autoLP_,
        address payable marketing_
    ) ERC20(name_, symbol_) {
        // init wallets addresses
        wbnb = wbnb_;
        swapRouter = swapRouter_;
        autoLPWallet = autoLP_;
        marketingWallet = marketing_;
        
        // create pair for OPSY/
        wbnbPair = IFactory(
            IRouter(swapRouter_).factory()
        ).createPair(wbnb_, address(this));
        
        isLpPair[wbnbPair] = true;

        swapHundler = new SwapHandler(swapRouter_,wbnb_);

        // whiteliste wallets
        whitlisted[autoLP_] = Whitlisted(
            true, // max transfer
            true, // max balance
            true  // Tax
        );

        whitlisted[marketing_] = Whitlisted(
            true, // max transfer
            true, // max balance
            true  // Tax
        );

        whitlisted[address(this)] = Whitlisted(
            true, // max transfer
            true, // max balance
            true  // Tax
        );

        whitlisted[address(swapHundler)] = Whitlisted(
            true, // max transfer
            true, // max balance
            true  // Tax
        );

        whitlisted[swapRouter_] = Whitlisted(
            true, // max transfer
            true, // max balance
            false  // Tax
        );
        // mint supply to wallet
        _mint(autoLP_, TOTAL_SUPPLY);

        // init distributor 
        hodlRewardDistributor = new HODLRewardsDistributor(wbnb_, rewardsAddress_,swapRouter_);

        require(hodlRewardDistributor.owner() == address(this), "initDistributor: Erc20 not owner");

        hodlRewardDistributor.excludeFromRewards(wbnbPair);
        hodlRewardDistributor.excludeFromRewards(swapRouter);
        hodlRewardDistributor.excludeFromRewards(autoLPWallet);
        hodlRewardDistributor.excludeFromRewards(marketingWallet);
        hodlRewardDistributor.excludeFromRewards(address(this));
        hodlRewardDistributor.excludeFromRewards(address(swapHundler));

        whitlisted[address(hodlRewardDistributor)] = Whitlisted(
            true,
            true,
            true
        );

        isDistributorSet = true;
    }

    function initDistributor(
        address payable distributor_
    ) external onlyOwner {
        hodlRewardDistributor = HODLRewardsDistributor(distributor_);

        require(hodlRewardDistributor.owner() == address(this), "initDistributor: Erc20 not owner");

        hodlRewardDistributor.excludeFromRewards(wbnbPair);
        hodlRewardDistributor.excludeFromRewards(swapRouter);
        hodlRewardDistributor.excludeFromRewards(autoLPWallet);
        hodlRewardDistributor.excludeFromRewards(marketingWallet);
        hodlRewardDistributor.excludeFromRewards(address(this));
        hodlRewardDistributor.excludeFromRewards(address(swapHundler));

        whitlisted[distributor_] = Whitlisted(
            true,
            true,
            true
        );

        isDistributorSet = true;
    }

    function transfer(
        address to_,
        uint256 amount_
    ) public virtual override returns (bool) {
        return _customTransfer(_msgSender(), to_, amount_);
    }

    function transferFrom(
        address from_,
        address to_,
        uint256 amount_
    ) public virtual override returns (bool) {
        // check allowance
        require(allowance(from_, _msgSender()) >= amount_, "> allowance");
        bool success = _customTransfer(from_, to_, amount_);
        approve(from_, allowance(from_, _msgSender()).sub(amount_));
        return success;
    }


    /**
        When taxes are generated from swaps 
        we cannot make the swap to avax due to reentrency gard
        on LPpool , so unstead we add it to a reserve , on next transfer
        this function is called and can also be called by any user
        if they are willing to pay gas.
    */
    function processReserves() public {
        swapHundler.swapToNativeWrappedToken(
            autoLPReserved,
            hodlReserved,
            marketingReserved
        );

        autoLPReserved = 0;
        hodlReserved = 0;
        marketingReserved = 0;
    }

    function setAutoLPWallet(
        address newautoLPWallet_
    ) external onlyOwner {
        require(
            newautoLPWallet_ != autoLPWallet,
            "ReflectionERC20: same as current wallet"
        );
        require(
            newautoLPWallet_ != address(0),
            "ReflectionERC20: cannot be address(0)"
        );
        autoLPWallet = newautoLPWallet_;
    }

    function setMarketingWallet(
        address newMarketingWallet_
    ) external onlyOwner {
        require(
            newMarketingWallet_ != marketingWallet,
            "ReflectionERC20: same as current wallet"
        );
        require(
            newMarketingWallet_ != address(0),
            "ReflectionERC20: cannot be address(0)"
        );
        marketingWallet = newMarketingWallet_;
    }

    /**
        Sets the whitlisting of a wallet 
        you can set it's whitlisting from maxTransfer #fromMaxTx
        or from payign tax #fromTax separatly
    */
    function whitelist(
        address wallet_,
        bool fromMaxTx_,
        bool fromMaxBalance_,
        bool fromTax_
    ) external onlyOwner {
        whitlisted[wallet_] = Whitlisted(
            fromMaxTx_,
            fromMaxBalance_,
            fromTax_
        );
    }

    /**
        this wallet will be excluded from rewards 
        it is had any amount of rewards they will be
        distributed to all share holders
    */
    function excludeFromHodlRewards(
        address wallet_
    ) external onlyOwner {
        if(autoLPReserved + hodlReserved + marketingReserved > 0)
            processReserves();
        hodlRewardDistributor.excludeFromRewards(wallet_);
    }

    /**
        This wallet will be included in rewards
    */
    function includeFromHodlRewards(
        address wallet_
    ) external onlyOwner {
        if(autoLPReserved + hodlReserved + marketingReserved > 0)
            processReserves();
        hodlRewardDistributor.includeInRewards(wallet_);
    }

    function setBuyerTax(
        uint256 autoLP_,
        uint256 holder_,
        uint256 marketing_
    ) external onlyOwner {
        buyerTax = Tax(
            autoLP_, holder_, marketing_
        );
    }

    function setSellerTax(
        uint256 autoLP_,
        uint256 holder_,
        uint256 marketing_
    ) external onlyOwner {
        sellerTax = Tax(
            autoLP_, holder_, marketing_
        );
    }

    function setTransferTax(
        uint256 autoLP_,
        uint256 holder_,
        uint256 marketing_
    ) external onlyOwner {
        transferTax = Tax(
            autoLP_, holder_, marketing_
        );
    }

    function setReflection(
        bool isEnabled_
    ) external onlyOwner {
        require(isDistributorSet, "Distributor_not_set");
        if(autoLPReserved + hodlReserved + marketingReserved > 0)
            processReserves();
        reflectionEnabled = isEnabled_;
    }

    function setIsLPPair(
        address pairAddess_,
        bool isPair_
    ) external onlyOwner {
        isLpPair[pairAddess_] = isPair_;
    }

    function setPeocessingGasLimit(
        uint256 maxAmount_
    ) external onlyOwner {
        processingGasLimit = maxAmount_;
    }
    /**
        prevents accidental renouncement of owner ship 
        can sill renounce if set explicitly to dead address
     */
    function renounceOwnership() public virtual override onlyOwner {}

    /**
        sets the minimum balance required to make holder eligible to reseave reflection rewards
     */
    function setMinimumShareForRewards(uint256 minimumAmount_) external onlyOwner {
        minimumShareForRewards = minimumAmount_;
    }

    /**
        Token uses some of the transaction gas to distribute rewards 
        you can enable disable/enable here 
        users can still claim
     */
    function setAutoBatchProcess(bool autoBatchProcess_) external onlyOwner {
        autoBatchProcess = autoBatchProcess_;
    }

    function claimRewardsFor(address wallet_) external {
        // No danger here claim sends to the share holder
        hodlRewardDistributor.claimPending(wallet_);
    }

    /**
        this is the implementation the custom transfer for this token
     */
    function _customTransfer(
        address from_,
         address to_,
          uint256 amount_
    ) internal returns (bool) {
        // if whitlisted or we are internally swapping no tax
        require(whitlisted[from_].maxTx || amount_ <= maxTx , "exceeds max tx");

        if (whitlisted[from_].tax || whitlisted[to_].tax) {
            _transfer(from_, to_, amount_);
        } else {
            uint256 netTransfer = amount_;

            if (reflectionEnabled) {
                Tax memory currentAppliedTax = isLpPair[from_] ? buyerTax : isLpPair[to_] ? sellerTax : transferTax;
                uint256 prevTotal = autoLPReserved + hodlReserved + marketingReserved;
                autoLPReserved += amount_.mul(currentAppliedTax.autoLP).div(100);
                hodlReserved += amount_.mul(currentAppliedTax.holder).div(100);
                marketingReserved += amount_.mul(currentAppliedTax.marketing).div(100);
                uint256 totalTax = autoLPReserved + hodlReserved + marketingReserved;
                uint256 currentTax = totalTax.sub(prevTotal);
                netTransfer = amount_.sub(currentTax);

                if(currentTax > 0)
                    _transfer(from_, address(swapHundler), currentTax);

                // if we have tokens and we are not in swap => swap and distribute to wallets
                if (totalTax > 0 && from_ != wbnbPair && to_ != wbnbPair)
                    processReserves();                
            }
            // transfer 
            _transfer(from_, to_, netTransfer);
            // This will trigger after_transfer and will update shares for from_ and to_ is needed
        }
        return true;
    }

    function _massProcess() internal {
        if(autoBatchProcess)
            hodlRewardDistributor.batchProcessClaims(
                gasleft() > processingGasLimit ? processingGasLimit : gasleft().mul(80).div(100)
            );
    }

    function _afterTokenTransfer(
        address from_,
        address to_,
        uint256 amount_
    ) internal override {
        require(balanceOf(to_) <= maxBalance || whitlisted[to_].maxBalance, "Exceeds max allowed balance");

        super._afterTokenTransfer(from_,to_,amount_);
        if (isDistributorSet) {
            _updateShare(from_);
            _updateShare(to_);
            _massProcess();
        }
    }

    function _updateShare(
        address wallet
    ) internal {
        if (!hodlRewardDistributor.excludedFromRewards(wallet))
            hodlRewardDistributor.setShare(wallet, balanceOf(wallet) > minimumShareForRewards ? balanceOf(wallet) : 0);
    }
}