
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)

pragma solidity ^0.8.0;

import "../ERC20.sol";
import "../../../utils/Context.sol";

/**
 * @dev Extension of {ERC20} that allows token holders to destroy both their own
 * tokens and those that they have an allowance for, in a way that can be
 * recognized off-chain (via event analysis).
 */
abstract contract ERC20Burnable is Context, ERC20 {
    /**
     * @dev Destroys `amount` tokens from the caller.
     *
     * See {ERC20-_burn}.
     */
    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, deducting from the caller's
     * allowance.
     *
     * See {ERC20-_burn} and {ERC20-allowance}.
     *
     * Requirements:
     *
     * - the caller must have allowance for ``accounts``'s tokens of at least
     * `amount`.
     */
    function burnFrom(address account, uint256 amount) public virtual {
        _spendAllowance(account, _msgSender(), amount);
        _burn(account, amount);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/Staking.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

import {ULFX} from "./Token.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

struct Period {
    uint256 start;
    uint256 end;
    mapping(address => uint256) stakes;
    uint256 totalStaked;
}

struct Pool {
    uint256 blockDuration;
    uint256 blockReward;
    Period[] periods;
}

struct UserDeposit {
    uint256 poolId;
    uint256 period;
}

/**
 * @title Staking
 * @dev All error are reverted with custom errors, if not stated otherwise.
 * Staking contract for ULFPAD token.
 *
 * @custom:constructor-param MINTING_CAP Maximum amount of tokens that can be minted in total, during the lifetime of the contract.
 * @custom:constructor-param CLAIM_PERIOD Period in which users can claim their rewards.
 */
contract Staking is Ownable {
    bool initialized = false;
    ULFX internal Token;

    uint256 internal immutable MINTING_CAP;
    uint256 internal immutable CLAIM_PERIOD;

    bool internal DECOMISISONED = false;
    uint256 internal MINTED = 0;

    Pool[] internal pools;
    // save user deposits for easy access, without backend services
    mapping(address => UserDeposit[]) internal userDeposits;

    error NotInitialized();
    error ContractDecomissioned();
    error AlreadyInitialized();
    error NonExistantPool();
    error PeriodNotStarted();
    error TokenTransferFailed();
    error StakingFinished();
    error PoolIsLocked();

    error ClaimBeforePeriodEnd();
    error AlreadyClaimed();
    error ClaimPeriodActive();

    modifier isInitialized() {
        if (!initialized) revert NotInitialized();
        _;
    }

    event PoolCreated(uint256 _id);
    event Deposited(
        uint256 indexed poolId,
        address indexed user,
        uint256 amount
    );
    event Claimed(
        uint256 indexed poolId,
        address indexed user,
        uint256 amount,
        bool indexed expired
    );
    event PeriodStarted(uint256 indexed poolId, uint256 periodId);
    event PeriodEnded(uint256 indexed poolId, uint256 periodId);

    constructor(uint256 _mintingCap, uint256 _claimPeriod) Ownable() {
        MINTING_CAP = _mintingCap;
        CLAIM_PERIOD = _claimPeriod;
    }

    /**
     * @dev Initialize staking contract.
     * @param _token Staking token address.
     */
    function initialize(address _token) external onlyOwner {
        if (initialized) revert AlreadyInitialized();
        initialized = true;
        Token = ULFX(_token);
    }

    function createPool(
        uint256 _blockDuration,
        uint256 _blockReward
    ) external onlyOwner isInitialized {
        if (DECOMISISONED) revert ContractDecomissioned();
        if (MINTED >= MINTING_CAP) revert StakingFinished();

        // create and initialize pool
        uint256 poolId = pools.length;
        pools.push();

        Pool storage pool = pools[poolId];

        pool.blockDuration = _blockDuration;
        pool.blockReward = _blockReward;

        // create and initialize first period
        uint256 periodId = pool.periods.length;
        pool.periods.push();

        Period storage period = pool.periods[periodId];

        period.start = block.timestamp;
        period.end = block.timestamp + _blockDuration;

        emit PeriodStarted(poolId, periodId);
        emit PoolCreated(poolId);
    }

    function deposit(uint256 _poolId, uint256 _amount) external isInitialized {
        if (DECOMISISONED) revert ContractDecomissioned();
        if (MINTED >= MINTING_CAP) revert StakingFinished();
        if (_poolId >= pools.length) revert NonExistantPool();

        Pool storage pool = pools[_poolId];
        Period storage period = pool.periods[pool.periods.length - 1];

        // if period has ended
        if (period.end < block.timestamp) {
            // create and initialize new period
            uint256 periodId = pool.periods.length;
            pool.periods.push();

            Period storage newPeriod = pool.periods[periodId];

            newPeriod.start = block.timestamp;
            newPeriod.end = block.timestamp + pool.blockDuration;

            period = newPeriod;

            emit PeriodEnded(_poolId, periodId - 1);
            emit PeriodStarted(_poolId, periodId);

            // now continue with deposit
        }
        // if more than 1.5% of staking period has passed, user cannot deposit anymore
        else if (
            period.start + ((pool.blockDuration * 6) / 100) < block.timestamp
        ) revert PoolIsLocked();

        // transfer tokens to staking contract
        if (!Token.transferFrom(msg.sender, address(this), _amount))
            revert TokenTransferFailed();

        // update user deposits
        userDeposits[msg.sender].push(
            UserDeposit(_poolId, pool.periods.length - 1)
        );

        // update period
        period.stakes[msg.sender] += _amount;
        period.totalStaked += _amount;

        emit Deposited(_poolId, msg.sender, _amount);
    }

    function claim(uint256 _poolId, uint256 _periodId) external isInitialized {
        if (_poolId >= pools.length) revert NonExistantPool();

        Pool storage pool = pools[_poolId];
        Period storage period = pool.periods[_periodId];

        if (period.end >= block.timestamp) revert ClaimBeforePeriodEnd();
        if (period.stakes[msg.sender] == 0) revert AlreadyClaimed();

        if (period.stakes[msg.sender] > 0) {
            uint256 reward = (period.stakes[msg.sender] * pool.blockReward) /
                period.totalStaked;
            uint256 stake = period.stakes[msg.sender];

            if (period.end + CLAIM_PERIOD < block.timestamp) {
                // if claim period is expired burn the funds

                // update period
                period.stakes[msg.sender] = 0;
                period.totalStaked -= period.stakes[msg.sender];

                // update MINTED
                MINTED += reward;

                emit Claimed(_poolId, address(0), reward, false);
            } else {
                // update period
                period.stakes[msg.sender] = 0;
                period.totalStaked -= period.stakes[msg.sender];

                // update MINTED
                MINTED += reward;

                // mint reward
                Token.mint(msg.sender, reward);

                emit Claimed(_poolId, msg.sender, reward, false);
            }

            // return stake
            if (!Token.transfer(msg.sender, stake))
                revert TokenTransferFailed();
        }
    }

    function burnExpired(
        uint256 _poolId,
        uint256 _periodId,
        address user
    ) external isInitialized {
        if (_poolId >= pools.length) revert NonExistantPool();

        Pool storage pool = pools[_poolId];
        Period storage period = pool.periods[_periodId];

        if (period.end >= block.timestamp) revert ClaimBeforePeriodEnd();
        if (period.end + CLAIM_PERIOD >= block.timestamp)
            revert ClaimPeriodActive();
        if (period.stakes[user] == 0) revert AlreadyClaimed();

        uint256 reward = (period.stakes[user] * pool.blockReward) /
            period.totalStaked;
        uint256 stake = period.stakes[user];

        // update period
        period.stakes[user] = 0;
        period.totalStaked -= period.stakes[user];

        // update MINTED
        MINTED += reward;

        // return stake
        if (!Token.transfer(user, stake)) revert TokenTransferFailed();

        emit Claimed(_poolId, address(0), reward, true);
    }

    function decomission() external onlyOwner isInitialized {
        DECOMISISONED = true;
    }

    // Getters do not have isInitialized modifier, to lower the gas cost if used with other contracts.

    /**
     * Token address getter.
     * @return address Staking token address.
     */
    function getToken() external view returns (address) {
        return address(Token);
    }

    /**
     * Returns number of existing pools.
     * @return uint256 Number of pools.
     */
    function getPoolCount() external view returns (uint256) {
        return pools.length;
    }

    /**
     * @notice Returns pool info.
     * Will revert if pool does not exist, with NonExistantPool error.
     *
     * @param _poolId Pool id.
     *
     * @return blockDuration Duration of a pool period in blocks.
     * @return blockReward Token reward per block, with decimals included.
     * @return currentPeriod Current period id.
     */
    function getPool(
        uint256 _poolId
    )
        external
        view
        returns (
            uint256 blockDuration,
            uint256 blockReward,
            uint256 currentPeriod
        )
    {
        if (_poolId >= pools.length) revert NonExistantPool();

        Pool storage pool = pools[_poolId];

        return (pool.blockDuration, pool.blockReward, pool.periods.length - 1);
    }

    /**
     * @notice Returns period info.
     * Will revert if pool or period does not exist, with PeriodNotStarted error.
     *
     * @param _poolId Pool id.
     * @param _periodId Period id.
     *
     * @return start Block number when period started.
     * @return end Block number when period ended.
     * @return totalStaked Total amount of tokens staked in this period.
     */
    function getPeriod(
        uint256 _poolId,
        uint256 _periodId
    ) external view returns (uint256 start, uint256 end, uint256 totalStaked) {
        if (_poolId >= pools.length) revert NonExistantPool();

        Pool storage pool = pools[_poolId];

        if (_periodId >= pool.periods.length) revert PeriodNotStarted();

        Period storage period = pool.periods[_periodId];

        return (period.start, period.end, period.totalStaked);
    }

    /**
     * @notice Returns stake info for a certain pool, period and user.
     * Will revert if pool or period does not exist, with PeriodNotStarted or NonExistantPool error.
     *
     * @param _poolId Pool id.
     * @param _periodId Period id.
     * @param _user User address.
     *
     * @return stake Amount of tokens staked by user in this period, will be zero if period has ended and user has already claimed reward.
     */
    function getStake(
        uint256 _poolId,
        uint256 _periodId,
        address _user
    ) external view returns (uint256 stake) {
        if (_poolId >= pools.length) revert NonExistantPool();

        Pool storage pool = pools[_poolId];

        if (_periodId >= pool.periods.length) revert PeriodNotStarted();

        Period storage period = pool.periods[_periodId];

        return period.stakes[_user];
    }

    /**
     * @notice Returns user deposits.
     * @dev Made to easily allow frontends to display user deposits. Entries should be checked for staked amount, if zero, it is already claimed and should not be shown. Also, data should be filtered by periodId, to only show periods that can be claimed according to the claimPeriod.
     *
     * @param _user User address.
     *
     * @return deposits Array of user deposits, containing poolId and periodId.
     */
    function getUserDeposits(
        address _user
    ) external view returns (UserDeposit[] memory deposits) {
        return userDeposits[_user];
    }

    /**
     * @notice Claim period getter.
     * @return uint256 Claim period.
     */
    function getClaimPeriod() external view returns (uint256) {
        return CLAIM_PERIOD;
    }

    /**
     * @notice Is contract decomissioned?
     * @return bool True if contract is decomissioned.
     */
    function isDecomissioned() external view returns (bool) {
        return DECOMISISONED;
    }

    /**
     * @notice Returns total amount of tokens minted.
     * @return uint256 Total amount of tokens minted.
     */
    function getMinted() external view returns (uint256) {
        return MINTED;
    }

    /**
        * @notice Returns minting cap.
        * @return uint256 Minting cap.
    
     */
    function getMintingCap() external view returns (uint256) {
        return MINTING_CAP;
    }

    /**
     * @notice Is contract initialized?
        * @return bool True if contract is initialized.
    
     */
    function getIsInitialized() external view returns (bool) {
        return initialized;
    }
}


// File: contracts/Token.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {ERC20Burnable} from "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

contract ULFX is ERC20, ERC20Burnable, Ownable {
    constructor(
        uint256 _initialSupply,
        address _stakingContract
    ) ERC20("ULFPAD", "ULFX") Ownable() {
        _mint(msg.sender, _initialSupply);
        transferOwnership(_stakingContract);
    }

    function mint(address _to, uint256 _amount) external onlyOwner {
        _mint(_to, _amount);
    }
}

