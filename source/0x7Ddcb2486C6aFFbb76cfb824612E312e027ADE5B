{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  // constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address Payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface iBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when Contract is Deployed\r\n   *\r\n   */\r\n  event ConstructorDeployed(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"KEGUSH.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./IBEP20.sol\";\nimport \"./Context.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\n\ncontract KEGUSH_TOKEN is Context, iBEP20, Ownable {\n  mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n  uint256 private _totalSupply;\n  uint256 private _initialSupply;\n  uint256 private _premined;\n\n  uint8   public _decimals;\n  string  public _symbol;\n  string  public _name;\n\n  address public _dev_owner;\n  address public _app_users;\n  address public _app_pro_users;\n  address public _itc_global_crowns;\n\n  uint256 public deployementTime = block.timestamp;\n  uint256 public _dev_owner_duration;\n  uint256 public _app_users_duration;\n  uint256 public _app_pro_users_duration;\n  uint256 public _itc_global_crowns_duration;\n\n  uint256 public _dev_owner_amount;\n  uint256 public _app_users_amount;\n  uint256 public _app_pro_users_amount;\n  uint256 public _itc_global_crowns_amount;\n\n  uint256 public period = 3600 days; // Time duration for Development \u0026 Owners Wallet to receive tokens\n\n  using SafeMath for uint256;\n  mapping (address =\u003e uint256) private _balances;\n\n  constructor(address dev_owner, address app_users, address app_pro_users, address itc_global_crowns) public {\n\n    deployementTime = block.timestamp; // Time when Contract is Deployed\n\n    _name = \u0027KEGUSH TOKEN\u0027;\n    _symbol = \u0027KGT\u0027;\n    _decimals = 18;\n\n    _totalSupply = 300000000 * 10**18; //300 Million Token of Total Supply\n    _initialSupply = 30000000 * 10**18; //30 Million Tokens of Initial Supply\n    _premined =  _initialSupply; //Pre-Mined Tokens of 30 Million\n    _balances[dev_owner] = _premined;\n\n    _dev_owner = dev_owner; // Address of Dev and Owner\n    _app_users = app_users; // Address of App Users\n    _app_pro_users = app_pro_users; // Address of App Pro Users\n    _itc_global_crowns = itc_global_crowns; // Address ITC global crowns\n\n    _dev_owner_duration = 60 minutes; //60 Min for Dev and owners\n    _app_users_duration = 60 minutes; //60 Min for App Users\n    _app_pro_users_duration = 60 minutes; //60 Min for App Pro Users\n    _itc_global_crowns_duration = 60 minutes; //60 Min for ITC global Crowns\n\n    _dev_owner_amount = 1025 * 10**18; //1025 KGT to Devs and Owners\n    _app_users_amount = 500 * 10**18; //500 KGT to App Users\n    _app_pro_users_amount = 700 * 10**18; //700 KGT to App Pro Users\n    _itc_global_crowns_amount = 900 * 10**18; // 900 KGT to ITC Global Crowns\n    \n    emit ConstructorDeployed(address(0), dev_owner, _premined);\n  }\n\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view virtual override returns (address) {\n    return owner();\n  }\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view virtual override returns (uint8) {\n    return _decimals;\n  }\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {BEP20-totalSupply}.\n   */\n  function totalSupply() external view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev See {BEP20-balanceOf}.\n   */\n  function balanceOf(address account) external view virtual override returns (uint256) {\n\n   if(account == _dev_owner){\n     uint256 timebal = (block.timestamp - deployementTime) / _dev_owner_duration;\n     uint256 timeperiods = period / _dev_owner_duration;\n\n     if(timebal \u003e timeperiods) {\n        timebal = 0;\n     }\n     return _balances[account] + timebal * _dev_owner_amount;\n   }\n\n   if(account == _app_users){\n     uint256 timebal = (block.timestamp - deployementTime) / _app_users_duration;\n     uint256 timeperiods = period / _app_users_duration;\n\n     if(timebal \u003e timeperiods) {\n        timebal = 0;\n     }\n     return _balances[account] + timebal * _app_users_amount;\n   }\n\n   if(account == _app_pro_users){\n     uint256 timebal = (block.timestamp - deployementTime) / _app_pro_users_duration;\n     uint256 timeperiods = period / _app_pro_users_duration;\n\n     if(timebal \u003e timeperiods) {\n        timebal = 0;\n     }\n     return _balances[account] + timebal * _app_pro_users_amount;\n   }\n\n   if(account == _itc_global_crowns){\n     uint256 timebal = (block.timestamp - deployementTime) / _itc_global_crowns_duration;\n     uint256 timeperiods = period / _itc_global_crowns_duration;\n\n     if(timebal \u003e timeperiods) {\n        timebal = 0;\n     }\n     return _balances[account] + timebal * _itc_global_crowns_amount;\n   }\n\n   return _balances[account];\n  }\n  \n  \n  /**\n   * @dev See {BEP20-getBalanceOf}.\n   */\n  function getBalanceOf(address account) public view virtual returns (uint256) {\n\n   if(account == _dev_owner){\n     uint256 timebal = (block.timestamp - deployementTime) / _dev_owner_duration;\n     uint256 timeperiods = period / _dev_owner_duration;\n\n     if(timebal \u003e timeperiods) {\n        timebal = 0;\n     }\n\n     return _balances[account] + timebal * _dev_owner_amount;\n   }\n\n   if(account == _app_users){\n     uint256 timebal = (block.timestamp - deployementTime) / _app_users_duration;\n     uint256 timeperiods = period / _app_users_duration;\n\n     if(timebal \u003e timeperiods) {\n        timebal = 0;\n     }\n     return _balances[account] + timebal * _app_users_amount;\n   }\n\n   if(account == _app_pro_users){\n     uint256 timebal = (block.timestamp - deployementTime) / _app_pro_users_duration;\n     uint256 timeperiods = period / _app_pro_users_duration;\n\n     if(timebal \u003e timeperiods) {\n        timebal = 0;\n     }\n     return _balances[account] + timebal * _app_pro_users_amount;\n   }\n\n   if(account == _itc_global_crowns){\n     uint256 timebal = (block.timestamp - deployementTime) / _itc_global_crowns_duration;\n     uint256 timeperiods = period / _itc_global_crowns_duration;\n\n     if(timebal \u003e timeperiods) {\n        timebal = 0;\n     }\n     return _balances[account] + timebal * _itc_global_crowns_amount;\n   }\n\n   return _balances[account];\n  }\n\n  /**\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\n   *\n   * This is internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `sender` cannot be the zero address.\n   * - `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   */\n  function _transfer(address sender, address recipient, uint256 amount) internal {\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n    require(amount != 0, \"BEP20: transfer zero amount\");\n\n    if(sender == _dev_owner){\n      _balances[_dev_owner] = getBalanceOf(_dev_owner);\n    }\n\n    if(sender == _app_users){\n      _balances[_app_users] = getBalanceOf(_app_users);\n    }\n\n    if(sender == _app_pro_users){\n      _balances[_app_pro_users] = getBalanceOf(_app_pro_users);\n    }\n\n    if(sender==_itc_global_crowns){\n      _balances[_itc_global_crowns] = getBalanceOf(_itc_global_crowns);\n    }\n\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n    _balances[recipient] = _balances[recipient].add(amount);\n\n    emit Transfer(sender, recipient, amount);\n  }\n  \n  /**\n   * @dev Update Dev and Owner Durtion.\n   *\n   * This is public function only be called by owner to update Dev and Owner duration.\n   *\n   * returns True.\n   *\n   * Requirements:\n   *\n   * - `newDuration` cannot be the zero.\n   */\n\n  function updateDevOwnerDuration(uint256 newDuration) public onlyOwner returns (bool) {\n        require(newDuration != 0, \"KEKUSH: New Duration is Zero\");\n        _dev_owner_duration = newDuration;\n        return true;\n  }\n\n  /**\n   * @dev Update App User Durtion.\n   *\n   * This is public function only be called by owner to update App User duration.\n   * Similar to `updateDevOwnerDuration`\n   * returns True.\n   *\n   * Requirements:\n   *\n   * - `newDuration` cannot be the zero.\n   */\n   function updateAppUserDuration(uint256 newDuration) public onlyOwner returns (bool) {\n        require(newDuration != 0, \"KEKUSH: New Duration is Zero\");\n        _dev_owner_duration = newDuration;\n        return true;\n   }\n\n   /**\n   * @dev Update App User Durtion.\n   *\n   * This is public function only be called by owner to update App Pro User duration.\n   * Similar to `updateDevOwnerDuration`\n   * returns True.\n   *\n   * Requirements:\n   *\n   * - `newDuration` cannot be the zero.\n   */\n   function updateAppProUsersDuration(uint256 newDuration) public onlyOwner returns (bool) {\n        require(newDuration != 0, \"KEKUSH: New Duration is Zero\");\n        _dev_owner_duration = newDuration;\n        return true;\n   }\n\n   /**\n   * @dev Update ITC Global Crowns Durtion.\n   *\n   * This is public function only be called by owner to update App User duration.\n   * Similar to `updateDevOwnerDuration`\n   * returns True.\n   *\n   * Requirements:\n   *\n   * - `newDuration` cannot be the zero.\n   */\n   function updateITCGlobaDuration(uint256 newDuration) public onlyOwner returns (bool) {\n        require(newDuration != 0, \"KEKUSH: New Duration is Zero\");\n        _dev_owner_duration = newDuration;\n        return true;\n   }\n\n\n\n\n    /**\n   * @dev Update Dev and Owner Amount.\n   *\n   * This is public function only be called by owner to update Dev and Owner Amount.\n   * returns True.\n   *\n   * Requirements:\n   *\n   * - `newAmount` pass the value in normal value. e.g: 125 KGT, 17 KGT.\n   */\n   function updateDevOwnerAmount(uint256 newAmount) public onlyOwner returns (bool) {\n        _dev_owner_amount = newAmount * 10**18;\n        return true;\n   }\n\n   /**\n   * @dev Update App User Amount.\n   *\n   * This is public function only be called by owner to update App user Amount.\n   * returns True.\n   * Similar to `updateDevOwnerAmount`\n   * Requirements:\n   *\n   * - `newAmount` pass the value in normal value. e.g: 125 KGT, 17 KGT.\n   */\n   function updateAppUsersAmount(uint256 newAmount) public onlyOwner returns (bool) {\n        _app_users_amount = newAmount * 10**18;\n        return true;\n   }\n\n   /**\n   * @dev Update App Pro User Amount.\n   *\n   * This is public function only be called by owner to update App Pro user Amount.\n   * returns True.\n   * Similar to `updateDevOwnerAmount`\n   * Requirements:\n   *\n   * - `newAmount` pass the value in normal value. e.g: 125 KGT, 17 KGT.\n   */\n\n   function updateAppProUsersAmount(uint256 newAmount) public onlyOwner returns (bool) {\n        _app_pro_users_amount = newAmount * 10**18;\n        return true;\n   }\n\n   /**\n   * @dev Update ITC Global Crowns Amount.\n   *\n   * This is public function only be called by owner to update ITC Global Crowns Amount.\n   * returns True.\n   * Similar to `updateDevOwnerAmount`\n   * Requirements:\n   *\n   * - `newAmount` pass the value in normal value. e.g: 125 KGT, 17 KGT.\n   */\n\n   function updateITCGlobalAmount(uint256 newAmount) public onlyOwner returns (bool) {\n        _itc_global_crowns_amount = newAmount * 10**18;\n        return true;\n   }\n\n  /**\n   * @dev See {BEP20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `recipient` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {BEP20-allowance}.\n   */\n  function allowance(address owner, address spender) external view override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {BEP20-approve}.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(address spender, uint256 amount) external override returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {BEP20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {BEP20};\n   *\n   * Requirements:\n   * - `sender` and `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   * - the caller must have allowance for `sender`\u0027s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {BEP20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {BEP20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n    return true;\n  }\n\n /**\n   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\n   * the total supply.\n   *\n   * Requirements\n   *\n   * - `msg.sender` must be the token owner\n   */\n  function mint(uint256 amount) public onlyOwner returns (bool) {\n    _mint(_msgSender(), amount);\n    return true;\n  }\n\n    /**\n    * @dev Destroys `amount` tokens from the caller.\n    *\n    * See {BEP20-_burn}.\n    */\n  function burn(uint256 amount) public virtual {\n      _burn(_msgSender(), amount);\n  }\n\n  /**\n    * @dev Destroys `amount` tokens from `account`, deducting from the caller\u0027s\n    * allowance.\n    *\n    * See {BEP20-_burn} and {BEP20-allowance}.\n    *\n    * Requirements:\n    *\n    * - the caller must have allowance for ``accounts``\u0027s tokens of at least\n    * `amount`.\n    */\n  function burnFrom(address account, uint256 amount) public virtual {\n      uint256 decreasedAllowance = _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\");\n      _approve(account, _msgSender(), decreasedAllowance);\n      _burn(account, amount);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * Emits a {Transfer} event with `from` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `to` cannot be the zero address.\n   */\n  function _mint(address account, uint256 amount) internal {\n    require(account != address(0), \"BEP20: mint to the zero address\");\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 amount) internal {\n    require(account != address(0), \"BEP20: burn from the zero address\");\n\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n   *\n   * This is internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(address owner, address spender, uint256 amount) internal {\n    require(owner != address(0), \"BEP20: approve from the zero address\");\n    require(spender != address(0), \"BEP20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() public {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b \u003c= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b \u003e 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}"}}