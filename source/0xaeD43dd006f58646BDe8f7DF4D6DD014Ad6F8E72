// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

  
interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(address from, address to, uint value) external returns (bool);
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }

}

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address public _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract FlashExchange is Ownable{
    // using PRBMathUD60x18 for uint256;
    using SafeMath for uint256;
    // 0xd49A32fb88ab098cf10BF739496fC8c43919ab47  0xE6261493e25Ae26a876c3226C5c70d146c4F8DCf   0x3333083ebe0A1A38B5E5a585a2E6DF075d1bD02D
    address public usdtToken = 0x55d398326f99059fF775485246999027B3197955;
    address public fusdToken = 0xbbDAF10596A61752B5804c71b372c6dF60eA4567;
    address public lcToken = 0x0B3142692a71Acf800D5ea4031070Ee4ef574678;

    address payeeAdress = 0x4efe7Bef1D3986A3A62143eF6608C8d781916261;

    uint256 fusdToUsdtSlippage = 500;
    uint256 lcToUsdtSlippage = 500;
    uint256 lcToUsdtRate = 200000;
    uint256 feeBNB = 2000000000000000;

    function setPayeeAddress(address _payeeAdress) public onlyOwner{
        payeeAdress = _payeeAdress;
    }

    function setLcToUsdtRate(uint256 _lcToUsdtRate) public onlyOwner{
        lcToUsdtRate = _lcToUsdtRate;
    }

    function setting(uint256 _fusdToUsdtSlippage, uint256 _lcToUsdtSlippage, uint256 _lcToUsdtRate, uint256 _feeBNB) public onlyOwner{
        fusdToUsdtSlippage = _fusdToUsdtSlippage;
        lcToUsdtSlippage = _lcToUsdtSlippage;
        lcToUsdtRate = _lcToUsdtRate;
        feeBNB = _feeBNB;
    }

    function calculateFusdToUsdtSlippage(uint256 _amount) private view returns (uint256) {
        return _amount.mul(fusdToUsdtSlippage).div(
            10**4
        );
    }

    function calculateLcToUsdtSlippage(uint256 _amount) private view returns (uint256) {
        return _amount.mul(lcToUsdtSlippage).div(
            10**4
        );
    }

    function calculateLcRate(uint256 _amount) private view returns (uint256) {
        return _amount.mul(lcToUsdtRate).div(
            10**4
        );
    }

    function usdtToFusd(uint256 _amount) public {
        require(IERC20(fusdToken).balanceOf(address(this)) >= _amount, "Contract FUSD Balance Insufficient");
        require(IERC20(usdtToken).balanceOf(address(msg.sender)) >= _amount, "USER USDT Balance Insufficient");

        IERC20(usdtToken).transferFrom(msg.sender, payeeAdress, _amount);
        IERC20(fusdToken).transfer(msg.sender, _amount);
    }

    // function fusdToUsdt(uint256 _amount) public {
    //     uint256 extractAmount = _amount.sub(calculateFusdToUsdtSlippage(_amount));
    //     require(IERC20(fusdToken).balanceOf(address(msg.sender)) >= _amount, "USER FUSD Balance Insufficient");
    //     require(IERC20(usdtToken).balanceOf(address(this)) >= extractAmount, "Contract USDT Balance Insufficient");

    //     IERC20(fusdToken).transferFrom(msg.sender, address(this), _amount);
    //     IERC20(usdtToken).transfer(msg.sender, extractAmount);
    // }

    function lcToUsdt(uint256 _amount) public {
        uint256 give_usdt = calculateLcRate(_amount);
        uint256 extractAmount = give_usdt.sub(calculateLcToUsdtSlippage(give_usdt));

        require(IERC20(lcToken).balanceOf(address(msg.sender)) >= _amount, "USER LC Balance Insufficient");
        require(IERC20(usdtToken).balanceOf(address(this)) >= extractAmount, "Contract USDT Balance Insufficient");

        IERC20(lcToken).transferFrom(msg.sender, address(this), _amount);
        IERC20(usdtToken).transfer(msg.sender, extractAmount);
    }

    function lcToFusd(uint256 _amount) public {
        uint256 give_fusd = calculateLcRate(_amount);
        uint256 extractAmount = give_fusd.sub(calculateLcToUsdtSlippage(give_fusd));
        require(IERC20(lcToken).balanceOf(address(msg.sender)) >= _amount, "USER LC Balance Insufficient");
        require(IERC20(fusdToken).balanceOf(address(this)) >= extractAmount, "Contract FUSD Balance Insufficient");

        IERC20(lcToken).transferFrom(msg.sender, address(this), _amount);
        IERC20(fusdToken).transfer(msg.sender, extractAmount);
    }


    function withdraw(address _token, uint256 withdraw_amount) public onlyOwner{
        uint256 amount = IERC20(_token).balanceOf(address(this));
        require(amount >= withdraw_amount, "Not Sufficient Funds ");

        IERC20(_token).transfer(payeeAdress, withdraw_amount);
    }
    

}