// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

interface IERC20 {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

  
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }


    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

 
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

library Address {

    function isContract(address account) internal view returns (bool) {
        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

   
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


contract NvWaToken is Context, IERC20, Ownable{
    using SafeMath for uint256;
    using Address for address;

    uint8 private _decimals = 9;    
    uint256 private _total = 16000 * 10**9; 
    string private _name = "NVWA";  
    string private _symbol = "NVWA";    
    uint256 public rewardLPFee = 4;     
    uint256 public nodeFee = 2;         
    uint256 public communityFee = 2;    
    uint256 public beneficenceFee = 2;  
    address public rewardLPFeeAddress;
    address public nodeFeeAddress;
    address public communityFeeAddress;
    address public beneficenceFeeAddress;
    address public addLiquManege;   

    mapping (address => uint256) private _balance;
    mapping (address => mapping(address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) public swapRouter;
    mapping (address => bool) public ammPairs;
    mapping (address=>bool) public startPair;
    mapping (address=>uint256) public pairStartBlock;

    constructor() public{

        _owner = msg.sender;
        _isExcludedFromFee[rewardLPFeeAddress]=true;
        _isExcludedFromFee[msg.sender]=true;
        swapRouter[0x10ED43C718714eb63d5aA57B78B54704E256024E]=true;
        address pairBNB =IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73).createPair(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c, address(this));
        address pairUSDT =IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73).createPair(0x55d398326f99059fF775485246999027B3197955, address(this));
        address pairUSDC =IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73).createPair(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d, address(this));
        address pairBUSD =IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73).createPair(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56, address(this));
        ammPairs[pairBNB]=true;
        ammPairs[pairUSDT]=true;
        ammPairs[pairUSDC]=true;
        ammPairs[pairBUSD]=true;
        _balance[msg.sender] = _total;
        emit Transfer(address(0), msg.sender, _total);

    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    function excludeFromFees(address[] memory accounts) public onlyOwner {
        uint256 len = accounts.length;
        for (uint256 i = 0; i < len; i++) {
            _isExcludedFromFee[accounts[i]] = true;
        }
    }

    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }


    function setRewardAdds(address [] memory addrList) public onlyOwner{
        uint256 len =addrList.length;
        require(len == 4,"ERROR ADDRLIST");
        rewardLPFeeAddress = addrList[0];
        nodeFeeAddress = addrList[1];
        communityFeeAddress = addrList[2];
        beneficenceFeeAddress = addrList[3];
        for (uint256 i = 0; i < len; i++) {
            _isExcludedFromFee[addrList[i]] = true;
        }
    }

    function setaddLiquManege(address addr) public onlyOwner{
        addLiquManege = addr;
        _isExcludedFromFee[addr]=true;
    }

    function transfer(address to, uint256 amount) public override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, _allowances[owner][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = _allowances[owner][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(owner, spender, currentAllowance.sub(subtractedValue));
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            _approve(owner, spender, currentAllowance.sub(amount));
        }
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(_balance[from]>=amount,"Balance Error!");

        if (ammPairs[to] && !startPair[to]) {   
            if (from == addLiquManege && ammPairs[to]) { 
                startPair[to] = true;
                pairStartBlock[to] = block.number;
            }
            require(from == addLiquManege || !ammPairs[to],'Swap No start!'); 
        }

        if(ammPairs[from] && !ammPairs[to] && startPair[to]){  
            require(block.number>(pairStartBlock[to]+2),'0 Block Swap!');
        }

        bool swapFee = true;
        bool transferFee = true;
   

        if(ammPairs[from] && !ammPairs[to] ){  
            transferFee =false;
            if( swapRouter[to]){ 
                swapFee = false;
                transferFee =false;
            }
        }

        if(swapRouter[from] && !ammPairs[to]){ 
            swapFee = false;
            transferFee =false;
        }

        if(!ammPairs[from] && ammPairs[to]){  
            swapFee = true;
            transferFee =false;

        }

        if( !swapRouter[from] && !ammPairs[from] && !ammPairs[to] && !swapRouter[to]){  
            swapFee =false;
            transferFee =true;
        }

        if( _isExcludedFromFee[from] || _isExcludedFromFee[to]){
            swapFee =false;
            transferFee =false;
        }

        if(_total.sub(_balance[0x000000000000000000000000000000000000dEaD]) <= 1888 *10**9){
            swapFee =false;
            transferFee =false;
        }

        _tokenTransfer(swapFee,transferFee,from,to,amount);

    }



    function _tokenTransfer(bool _swapFee, bool _transFee,address _from, address _to, uint256 _amount) private returns(uint256) {
        uint256 rewardLPAmount =0;
        uint256 nodeAmount =0;
        uint256 communityAmount =0;
        uint256 beneficenceFeeAmount =0;
        if(_swapFee){
            rewardLPAmount = _amount.mul(rewardLPFee).div(100);
            nodeAmount = _amount.mul(nodeFee).div(100);
            communityAmount = _amount.mul(communityFee).div(100);
        }
        if(_transFee){
            beneficenceFeeAmount = _amount.mul(beneficenceFee).div(100);
        }
        uint256 totalFeeAmount = rewardLPAmount.add(nodeAmount).add(communityAmount).add(beneficenceFeeAmount);
        uint256 sendAmount = _amount.sub(totalFeeAmount);

        _balance[_from] = _balance[_from].sub(_amount);
        _balance[_to] = _balance[_to].add(sendAmount);
        emit Transfer(_from, _to, sendAmount);

        if(rewardLPAmount>0){
            _take(_from,rewardLPFeeAddress,rewardLPAmount);
        }
        if(nodeAmount>0){
            _take(_from,nodeFeeAddress,nodeAmount);
        }
        if(communityAmount>0){
            _take(_from,communityFeeAddress,communityAmount);
        }
        if(beneficenceFeeAmount>0){
            _take(_from,beneficenceFeeAddress,beneficenceFeeAmount);
        }
    }

    function _take(address from,address to,uint256 amount) private {
        _balance[to] = _balance[to] + amount;
        emit Transfer(from, to, amount);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _total;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balance[account];
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

}