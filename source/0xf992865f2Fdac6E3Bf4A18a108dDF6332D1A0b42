{"BJ.sol":{"content":"//SPDX-License-Identifier: MIT\n/**\n * Unlock the full potential of your image creation with BitJourney\u0027s advanced AI generation model.\n * 4 options to upscale one of them\n * The best art on BSC \n * Holders get exclusive features\n * In contrast to our competitors, we have already established a functional product with our in-house AI Image Generation.\n *\n * This token grants its holder the benefit of revenue sharing from nine distinct streams and the ability to hold prominent position with the ecosystem.\n * Fixed supply 100M BitJourney\n *\n * Full details available at our platform: https://bitjourney.art\n * Twitter: https://twitter.com/BitjourneyAi\n * Telegram: https://t.me/bitjourneyportal\n * 1 billion tokens, locked liquidity.\n *\n * Tax 2% GPU clusters, 1% Bot Development\n * 100% Fair Launch\n * Locked liquidity\n *\n * Set slippage to 3-4% to buy BitJourney token.\n *\n * Bitjourney.art\n */\npragma solidity 0.8.17;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./DexRouter.sol\";\n\ncontract BitJourney is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    // token details\n    uint8 private constant _decimals = 8;\n    uint256 private constant _tTotal = 100000000 * 10**_decimals;\n    string private constant _name = \"bitjourney.art\";\n    string private constant _symbol = \"BitJourney\";\n\n    mapping(address =\u003e bool) private _isExcludedFromFee;\n\n    address payable private _taxWallet;\n\n    uint256 private _initialBuyTax = 3;\n    uint256 private _initialSellTax = 15;\n    uint256 private _finalTax = 3;\n    uint256 private _reduceBuyTaxAt = 1;\n    uint256 private _reduceSellTaxAt = 10;\n    uint256 private _preventSwapBefore = 30;\n    uint256 private _buyCount = 0;\n\n    uint256 public _maxTxAmount = 10000000 * 10**_decimals;\n    uint256 public _maxWalletSize = 30000000 * 10**_decimals;\n    uint256 public _taxSwapThreshold = 5000000 * 10**_decimals;\n    uint256 public _maxTaxSwap = 5000000 * 10**_decimals;\n\n    DexRouter private dexRouter;\n    address private pair;\n    address private presaleAddress;\n\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n    bool public tradingOpen = false;\n    bool public presaleEnabled = false;\n\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor() {\n        _taxWallet = payable(_msgSender());\n        _balances[_msgSender()] = _tTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_taxWallet] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n\n        // check if the tranding is open\n        if (!tradingOpen) {\n            require(\n                from == owner() ||\n                    to == owner() ||\n                    from == presaleAddress ||\n                    to == presaleAddress,\n                \"Trading is not open yet\"\n            );\n        }\n\n        uint256 taxAmount = 0;\n\n        if (from != owner() \u0026\u0026 to != owner()) {\n            if (from != presaleAddress || to != presaleAddress) {\n                taxAmount = amount\n                    .mul(\n                        (_buyCount \u003e _reduceBuyTaxAt)\n                            ? _finalTax\n                            : _initialBuyTax\n                    )\n                    .div(100);\n\n                // Buy - AntiWhale\n                if (\n                    from == pair \u0026\u0026\n                    to != address(dexRouter) \u0026\u0026\n                    !_isExcludedFromFee[to]\n                ) {\n                    require(\n                        amount \u003c= _maxTxAmount,\n                        \"Exceeds the max transaction amount\"\n                    );\n\n                    require(\n                        balanceOf(to) + amount \u003c= _maxWalletSize,\n                        \"Exceeds the max wallet size\"\n                    );\n\n                    _buyCount++;\n                }\n\n                // Sell - AntiWhale\n                if (to == pair \u0026\u0026 from != address(this)) {\n                    taxAmount = amount\n                        .mul(\n                            (_buyCount \u003e _reduceSellTaxAt)\n                                ? _finalTax\n                                : _initialSellTax\n                        )\n                        .div(100);\n                }\n\n                // Swap and liquify\n                uint256 contractTokenBalance = balanceOf(address(this));\n                if (\n                    !inSwap \u0026\u0026\n                    to == pair \u0026\u0026\n                    swapEnabled \u0026\u0026\n                    contractTokenBalance \u003e _taxSwapThreshold \u0026\u0026\n                    _buyCount \u003e _preventSwapBefore\n                ) {\n                    swapTokensForBnb(\n                        min(amount, min(contractTokenBalance, _maxTaxSwap))\n                    );\n\n                    uint256 contractBNBBalance = address(this).balance;\n                    if (contractBNBBalance \u003e 0) {\n                        sendBNBToFee(address(this).balance);\n                    }\n                }\n            }\n\n            if (taxAmount \u003e 0) {\n                _balances[address(this)] = _balances[address(this)].add(\n                    taxAmount\n                );\n\n                emit Transfer(from, address(this), taxAmount);\n            }\n        }\n\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\n\n        emit Transfer(from, to, amount.sub(taxAmount));\n    }\n\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return (a \u003e b) ? b : a;\n    }\n\n    function swapTokensForBnb(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = dexRouter.WETH();\n\n        _approve(address(this), address(dexRouter), tokenAmount);\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function removeLimits() external onlyOwner {\n        _maxTxAmount = _tTotal;\n        _maxWalletSize = _tTotal;\n\n        emit MaxTxAmountUpdated(_tTotal);\n    }\n\n    function sendBNBToFee(uint256 amount) private {\n        _taxWallet.transfer(amount);\n    }\n\n    function openTrading(bool tradingMode, address pairAddr)\n        external\n        onlyOwner\n    {\n        dexRouter = DexRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n        pair = pairAddr;\n\n        swapEnabled = true;\n        tradingOpen = tradingMode;\n    }\n\n    function changePresaleMode(address presaleAddr, bool presaleMode)\n        external\n        onlyOwner\n    {\n        presaleAddress = presaleAddr;\n        presaleEnabled = presaleMode;\n    }\n\n    receive() external payable {}\n\n    function manualSwap() external {\n        require(_msgSender() == _taxWallet);\n\n        uint256 tokenBalance = balanceOf(address(this));\n        if (tokenBalance \u003e 0) {\n            swapTokensForBnb(tokenBalance);\n        }\n\n        uint256 bnbBalance = address(this).balance;\n        if (bnbBalance \u003e 0) {\n            sendBNBToFee(bnbBalance);\n        }\n    }\n}\n"},"Context.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n"},"DexRouter.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface DexRouter {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n}\n"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"},"Ownable.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./Context.sol\";\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n"}}