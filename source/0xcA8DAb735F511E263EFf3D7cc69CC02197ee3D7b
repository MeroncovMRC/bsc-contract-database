{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e= 0.5.16;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e= 0.5.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}"},"IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \u0027./IUniswapV2Router01.sol\u0027;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"},"SolarFarmToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \u0027./Context.sol\u0027;\r\nimport \u0027./Ownable.sol\u0027;\r\nimport \u0027./IERC20.sol\u0027;\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./Address.sol\u0027;\r\nimport \u0027./IUniswapV2Factory.sol\u0027;\r\nimport \u0027./IUniswapV2Pair.sol\u0027;\r\nimport \u0027./IUniswapV2Router02.sol\u0027;\r\n\r\n/**\r\n * @author ~ 🅧🅘🅟🅩🅔🅡 ~\r\n *\r\n * ░██████╗░█████╗░██╗░░░░░░█████╗░██████╗░███████╗░█████╗░██████╗░███╗░░░███╗████████╗░█████╗░██╗░░██╗███████╗███╗░░██╗\r\n * ██╔════╝██╔══██╗██║░░░░░██╔══██╗██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗░████║╚══██╔══╝██╔══██╗██║░██╔╝██╔════╝████╗░██║\r\n * ╚█████╗░██║░░██║██║░░░░░███████║██████╔╝█████╗░░███████║██████╔╝██╔████╔██║░░░██║░░░██║░░██║█████═╝░█████╗░░██╔██╗██║\r\n * ░╚═══██╗██║░░██║██║░░░░░██╔══██║██╔══██╗██╔══╝░░██╔══██║██╔══██╗██║╚██╔╝██║░░░██║░░░██║░░██║██╔═██╗░██╔══╝░░██║╚████║\r\n * ██████╔╝╚█████╔╝███████╗██║░░██║██║░░██║██║░░░░░██║░░██║██║░░██║██║░╚═╝░██║░░░██║░░░╚█████╔╝██║░╚██╗███████╗██║░╚███║\r\n * ╚═════╝░░╚════╝░╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚══╝\r\n *\r\n * Solar Farm Token - BSC BNB Miner-Supporting Token\r\n *\r\n * Discord: https://discord.gg/5pMPMpybzM\r\n * Telegram: https://t.me/SolarFarmMinerOfficial\r\n * Twitter: https://twitter.com/SolarFarmMiner\r\n * dApp: https://app.solarfarm.finance/\r\n */\r\n\r\ncontract SolarFarmToken is Context, IERC20, Ownable\r\n{\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    string public name = \"Solar Farm Token\";\r\n    string public symbol = \"SOLAR\";\r\n\r\n    uint public decimals = 18;\r\n    uint public totalSupply = 1000000000 * 10 ** decimals;\r\n\r\n    uint private maxTx = (totalSupply * 5) / 1000;\r\n    uint private maxWallet = (totalSupply * 15) / 1000;\r\n    uint private swapThreshold = totalSupply / 10000000;\r\n\r\n    address payable public minerAddress;\r\n    address payable public treasuryAddress;\r\n    address payable public marketingAddress;\r\n\r\n    address public uniswapPair;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    mapping (address =\u003e uint) private balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint)) private allowances;\r\n\r\n    mapping (address =\u003e bool) public isFeeExempt;\r\n    mapping (address =\u003e bool) public isTxLimitExempt;\r\n    mapping (address =\u003e bool) public isWalletLimitExempt;\r\n    mapping (address =\u003e bool) public isMarketPair;\r\n    mapping (address =\u003e bool) public isBot;\r\n\r\n    struct BuyFee\r\n    {\r\n        uint miner;\r\n        uint treasury;\r\n        uint marketing;\r\n    }\r\n\r\n    struct SellFee\r\n    {\r\n        uint miner;\r\n        uint treasury;\r\n        uint marketing;\r\n    }\r\n\r\n    BuyFee public inFee;\r\n    SellFee public outFee;\r\n\r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n    bool public swapAndLiquifyByLimitOnly;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint tokensSwapped, uint ethReceived, uint tokensIntoLiqudity);\r\n    event SwapETHForTokens(uint amountIn, address[] path);\r\n    event SwapTokensForETH(uint amountIn, address[] path);\r\n\r\n    modifier lockTheSwap\r\n    {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor (address _miner, address _treasury, address _marketing)\r\n    {\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        allowances[address(this)][address(uniswapV2Router)] = totalSupply;\r\n\r\n        minerAddress = payable(_miner);\r\n        treasuryAddress = payable(_treasury);\r\n        marketingAddress = payable(_marketing);\r\n\r\n        inFee.miner = 30;\r\n        inFee.treasury = 20;\r\n        inFee.marketing = 30;\r\n\r\n        outFee.miner = 30;\r\n        outFee.treasury = 20;\r\n        outFee.marketing = 30;\r\n\r\n        swapAndLiquifyEnabled = true;\r\n        swapAndLiquifyByLimitOnly = false;\r\n\r\n        isFeeExempt[owner()] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[minerAddress] = true;\r\n        isFeeExempt[treasuryAddress] = true;\r\n        isFeeExempt[marketingAddress] = true;\r\n\r\n        isTxLimitExempt[owner()] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[minerAddress] = true;\r\n        isTxLimitExempt[treasuryAddress] = true;\r\n        isTxLimitExempt[marketingAddress] = true;\r\n\r\n        isWalletLimitExempt[owner()] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[minerAddress] = true;\r\n        isWalletLimitExempt[treasuryAddress] = true;\r\n        isWalletLimitExempt[marketingAddress] = true;\r\n\r\n        isWalletLimitExempt[address(uniswapPair)] = true;\r\n        isMarketPair[address(uniswapPair)] = true;\r\n\r\n        balances[_msgSender()] = totalSupply;\r\n        emit Transfer(address(0), _msgSender(), totalSupply);\r\n    }\r\n\r\n    function balanceOf(address wallet) public view override returns (uint256) \r\n    {\r\n        return balances[wallet];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) \r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) \r\n    {\r\n        return totalSupply.sub(balanceOf(address(0)));\r\n    }\r\n\r\n    function setMaxTx(uint256 value) external onlyOwner() \r\n    {\r\n        require(value \u003e= totalSupply / 10000, \"SolarGuard: Minimum tx must be greater than 0.01% of total supply!\");\r\n\r\n        maxTx = value;\r\n    }\r\n\r\n    function setMaxWallet(uint256 value) external onlyOwner \r\n    {\r\n        require(value \u003e= totalSupply / 10000, \"SolarGuard: Minimum wallet size must be greater than 0.01% of total supply!\");\r\n\r\n        maxWallet = value;\r\n    }\r\n\r\n    function setMinerAddress(address wallet) external onlyOwner() \r\n    {\r\n        require(wallet != address(0), \"SolarGuard: Wallet must not be null address!\");\r\n\r\n        minerAddress = payable(wallet);\r\n    }\r\n\r\n    function setTreasuryAddress(address wallet) external onlyOwner() \r\n    {\r\n        require(wallet != address(0), \"SolarGuard: Wallet must not be null address!\");\r\n\r\n        treasuryAddress = payable(wallet);\r\n    }\r\n\r\n    function setMarketingAddress(address wallet) external onlyOwner() \r\n    {\r\n        require(wallet != address(0), \"SolarGuard: Wallet must not be null address!\");\r\n\r\n        marketingAddress = payable(wallet);\r\n    }\r\n\r\n    function setWalletFeeStatus(address wallet, bool status) public onlyOwner \r\n    {\r\n        isFeeExempt[wallet] = status;\r\n    }\r\n\r\n    function setWalletTxStatus(address wallet, bool status) external onlyOwner \r\n    {\r\n        isTxLimitExempt[wallet] = status;\r\n    }\r\n\r\n    function setWalletLimitStatus(address wallet, bool status) external onlyOwner \r\n    {\r\n        isWalletLimitExempt[wallet] = status;\r\n    }\r\n\r\n    function setMarketPairStatus(address wallet, bool status) public onlyOwner \r\n    {\r\n        isMarketPair[wallet] = status;\r\n    }\r\n\r\n    function setBotStatus(address[] memory wallets, bool status) public onlyOwner \r\n    {\r\n        require(wallets.length \u003c= 200, \"SolarGuard: Maximum wallets at once is 200!\");\r\n\r\n        for (uint i = 0; i \u003c wallets.length; i++)\r\n            isBot[wallets[i]] = status;\r\n    }\r\n\r\n    function setBuyTaxes(uint miner, uint treasury, uint marketing) external onlyOwner() \r\n    {\r\n        require(miner + treasury + marketing \u003c= 300, \"SolarGuard: Maximum total fee is 30%!\");\r\n        \r\n        inFee.miner = miner;\r\n        inFee.treasury = treasury;\r\n        inFee.marketing = marketing;\r\n    }\r\n\r\n    function setSellTaxes(uint miner, uint treasury, uint marketing) external onlyOwner() \r\n    {\r\n        require(miner + treasury + marketing \u003c= 300, \"SolarGuard: Maximum total fee is 30%!\");\r\n\r\n        outFee.miner = miner;\r\n        outFee.treasury = treasury;\r\n        outFee.marketing = marketing;\r\n    }\r\n\r\n    function setSwapThreshold(uint value) external onlyOwner() \r\n    {\r\n        swapThreshold = value;\r\n    }\r\n\r\n    function setSwapAndLiquifyStatus(bool status) public onlyOwner \r\n    {\r\n        swapAndLiquifyEnabled = status;\r\n        emit SwapAndLiquifyEnabledUpdated(status);\r\n    }\r\n\r\n    function setSwapAndLiquifyByLimitStatus(bool status) public onlyOwner \r\n    {\r\n        swapAndLiquifyByLimitOnly = status;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) \r\n    {\r\n        _approve(_msgSender(), spender, allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public virtual returns (bool) \r\n    {\r\n        _approve(_msgSender(), spender, allowances[_msgSender()][spender].sub(subtractedValue, \"SolarGuard: Decreased allowance below zero!\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint amount) public override returns (bool) \r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint amount) private \r\n    {\r\n        require(owner != address(0), \"SolarGuard: Approve from the zero address!\");\r\n        require(spender != address(0), \"SolarGuard: Approve to the zero address!\");\r\n\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferToAddressBNB(address payable recipient, uint amount) private \r\n    {\r\n        require(recipient != address(0), \"SolarGuard: Cannot send to the 0 address!\");\r\n\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) public override returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool)\r\n    {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), allowances[sender][_msgSender()].sub(amount, \"SolarGuard: Transfer amount exceeds allowance!\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint amount) private returns (bool)\r\n    {\r\n        require(sender != address(0), \"SolarGuard: Transfer from the zero address!\");\r\n        require(recipient != address(0), \"SolarGuard: Transfer to the zero address!\");\r\n        require(!isBot[recipient] \u0026\u0026 !isBot[sender], \"SolarGuard: No bots allowed!\");\r\n\r\n        if (inSwapAndLiquify)\r\n        {\r\n            balances[sender] = balances[sender].sub(amount, \"SolarGuard: Insufficient balance!\");\r\n            balances[recipient] = balances[recipient].add(amount);\r\n\r\n            emit Transfer(sender, recipient, amount);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            if (!isTxLimitExempt[sender] \u0026\u0026 !isTxLimitExempt[recipient])\r\n                require(amount \u003c= maxTx, \"SolarGuard: Transfer amount exceeds the maxTx!\");\r\n\r\n            uint contractTokenBalance = balanceOf(address(this));\r\n            if (contractTokenBalance \u003e= swapThreshold \u0026\u0026 !inSwapAndLiquify \u0026\u0026 !isMarketPair[sender] \u0026\u0026 swapAndLiquifyEnabled)\r\n            {\r\n                if (swapAndLiquifyByLimitOnly)\r\n                    contractTokenBalance = swapThreshold;\r\n\r\n                swapAndLiquify(contractTokenBalance);\r\n            }\r\n\r\n            balances[sender] = balances[sender].sub(amount, \"SolarGuard: Insufficient balance!\");\r\n\r\n            uint finalAmount = (isFeeExempt[sender] || isFeeExempt[recipient]) ? amount : takeFee(sender, recipient, amount);\r\n            if (!isWalletLimitExempt[recipient])\r\n                require(balanceOf(recipient).add(finalAmount) \u003c= maxWallet, \"SolarGuard: Transfer amount must not exceed max wallet conditions!\");\r\n\r\n            balances[recipient] = balances[recipient].add(finalAmount);\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint amount) private lockTheSwap \r\n    {\r\n        swapTokensForEth(amount);\r\n        uint amountReceived = address(this).balance;\r\n\r\n        uint totalFee = inFee.miner + inFee.treasury + inFee.marketing + outFee.miner + outFee.treasury + outFee.marketing;\r\n\r\n        uint minerAmount = amountReceived.mul((inFee.miner + outFee.miner)).div(totalFee);\r\n        uint treasuryAmount = amountReceived.mul((inFee.treasury + outFee.treasury)).div(totalFee);\r\n        uint marketingAmount = amountReceived.mul((inFee.marketing + outFee.marketing)).div(totalFee);\r\n\r\n        if (minerAmount \u003e 0)\r\n            transferToAddressBNB(minerAddress, minerAmount);\r\n        if (treasuryAmount \u003e 0)\r\n            transferToAddressBNB(treasuryAddress, treasuryAmount);\r\n        if (marketingAmount \u003e 0)\r\n            transferToAddressBNB(marketingAddress, marketingAmount);\r\n    }\r\n\r\n    function swapTokensForEth(uint tokenAmount) private\r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint amount) internal returns (uint256)\r\n    {\r\n        uint feeAmount = 0;\r\n\r\n        if (isMarketPair[sender])\r\n            feeAmount = amount.mul(inFee.miner + inFee.treasury + inFee.marketing).div(1000);\r\n        else if (isMarketPair[recipient])\r\n            feeAmount = amount.mul(outFee.miner + outFee.treasury + outFee.marketing).div(1000);\r\n\r\n        if (feeAmount \u003e 0)\r\n        {\r\n            balances[address(this)] = balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function withdrawStuckBNB(address recipient, uint amount) public onlyOwner\r\n    {\r\n        require(recipient != address(0), \"SolarGuard: Cannot send to the 0 address!\");\r\n\r\n        payable(recipient).transfer(amount);\r\n    }\r\n\r\n    function withdrawForeignToken(address tokenAddress, address recipient, uint amount) public onlyOwner\r\n    {\r\n        require(recipient != address(0), \"SolarGuard: Cannot send to the 0 address!\");\r\n\r\n        IERC20(tokenAddress).transfer(recipient, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}"}}