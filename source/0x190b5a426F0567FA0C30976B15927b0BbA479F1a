{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"DividendPayingToken.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./ERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SafeMathUint.sol\";\nimport \"./SafeMathInt.sol\";\nimport \"./DividendPayingTokenInterface.sol\";\nimport \"./DividendPayingTokenOptionalInterface.sol\";\n\n\n/// @title Dividend-Paying Token\n/// @author Roger Wu (https://github.com/roger-wu)\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\n///  to token holders as dividends and allows token holders to withdraw their dividends.\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\ncontract DividendPayingToken is ERC20, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\n  using SafeMath for uint256;\n  using SafeMathUint for uint256;\n  using SafeMathInt for int256;\n\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\n  // For more discussion about choosing the value of `magnitude`,\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\n  uint256 constant internal magnitude = 2**128;\n\n  uint256 internal magnifiedDividendPerShare;\n\n  // About dividendCorrection:\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\n  //   `dividendOf(_user)` should not be changed,\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\n  mapping(address =\u003e int256) internal magnifiedDividendCorrections;\n  mapping(address =\u003e uint256) internal withdrawnDividends;\n\n  uint256 public totalDividendsDistributed;\n\n  constructor(string memory _name, string memory _symbol)  ERC20(_name, _symbol) {\n\n  }\n\n  /// @dev Distributes dividends whenever ether is paid to this contract.\n  receive() external payable {\n    distributeDividends();\n  }\n\n  /// @notice Distributes ether to token holders as dividends.\n  /// @dev It reverts if the total supply of tokens is 0.\n  /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\n  /// About undistributed ether:\n  ///   In each distribution, there is a small amount of ether not distributed,\n  ///     the magnified amount of which is\n  ///     `(msg.value * magnitude) % totalSupply()`.\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\n  ///     (de-magnified) in a distribution can be less than 1 wei.\n  ///   We can actually keep track of the undistributed ether in a distribution\n  ///     and try to distribute it in the next distribution,\n  ///     but keeping track of such data on-chain costs much more than\n  ///     the saved ether, so we don\u0027t do that.\n  function distributeDividends() public override payable {\n    require(totalSupply() \u003e 0);\n\n    if (msg.value \u003e 0) {\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\n        (msg.value).mul(magnitude) / totalSupply()\n      );\n      emit DividendsDistributed(msg.sender, msg.value);\n\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\n    }\n  }\n\n  /// @notice Withdraws the ether distributed to the sender.\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\n  function withdrawDividend() public virtual override {\n    _withdrawDividendOfUser(payable(msg.sender));\n  }\n\n  /// @notice Withdraws the ether distributed to the sender.\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\n    if (_withdrawableDividend \u003e 0) {\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\n      emit DividendWithdrawn(user, _withdrawableDividend);\n      (bool success,) = user.call{value: _withdrawableDividend, gas: 3000}(\"\");\n\n      if(!success) {\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\n        return 0;\n      }\n\n      return _withdrawableDividend;\n    }\n\n    return 0;\n  }\n\n\n  /// @notice View the amount of dividend in wei that an address can withdraw.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\n  function dividendOf(address _owner) public view override returns(uint256) {\n    return withdrawableDividendOf(_owner);\n  }\n\n  /// @notice View the amount of dividend in wei that an address can withdraw.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\n  }\n\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\n    return withdrawnDividends[_owner];\n  }\n\n\n  /// @notice View the amount of dividend in wei that an address has earned in total.\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\n  }\n\n  /// @dev Internal function that transfer tokens from one address to another.\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\n  /// @param from The address to transfer from.\n  /// @param to The address to transfer to.\n  /// @param value The amount to be transferred.\n  function _transfer(address from, address to, uint256 value) internal virtual override {\n    require(false);\n\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\n  }\n\n  /// @dev Internal function that mints tokens to an account.\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\n  /// @param account The account that will receive the created tokens.\n  /// @param value The amount that will be created.\n  function _mint(address account, uint256 value) internal override {\n    super._mint(account, value);\n\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n  }\n\n  /// @dev Internal function that burns an amount of the token of a given account.\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\n  /// @param account The account whose tokens will be burnt.\n  /// @param value The amount that will be burnt.\n  function _burn(address account, uint256 value) internal override {\n    super._burn(account, value);\n\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n  }\n\n  function _setBalance(address account, uint256 newBalance) internal {\n    uint256 currentBalance = balanceOf(account);\n\n    if(newBalance \u003e currentBalance) {\n      uint256 mintAmount = newBalance.sub(currentBalance);\n      _mint(account, mintAmount);\n    } else if(newBalance \u003c currentBalance) {\n      uint256 burnAmount = currentBalance.sub(newBalance);\n      _burn(account, burnAmount);\n    }\n  }\n}\n"},"DividendPayingTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n\n/// @title Dividend-Paying Token Interface\n/// @author Roger Wu (https://github.com/roger-wu)\n/// @dev An interface for a dividend-paying token contract.\ninterface DividendPayingTokenInterface {\n  /// @notice View the amount of dividend in wei that an address can withdraw.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\n  function dividendOf(address _owner) external view returns(uint256);\n\n  /// @notice Distributes ether to token holders as dividends.\n  /// @dev SHOULD distribute the paid ether to token holders as dividends.\n  ///  SHOULD NOT directly transfer ether to token holders in this function.\n  ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\n  function distributeDividends() external payable;\n\n  /// @notice Withdraws the ether distributed to the sender.\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\n  function withdrawDividend() external;\n\n  /// @dev This event MUST emit when ether is distributed to token holders.\n  /// @param from The address which sends ether to this contract.\n  /// @param weiAmount The amount of distributed ether in wei.\n  event DividendsDistributed(\n    address indexed from,\n    uint256 weiAmount\n  );\n\n  /// @dev This event MUST emit when an address withdraws their dividend.\n  /// @param to The address which withdraws ether from this contract.\n  /// @param weiAmount The amount of withdrawn ether in wei.\n  event DividendWithdrawn(\n    address indexed to,\n    uint256 weiAmount\n  );\n}\n"},"DividendPayingTokenOptionalInterface.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n\n/// @title Dividend-Paying Token Optional Interface\n/// @author Roger Wu (https://github.com/roger-wu)\n/// @dev OPTIONAL functions for a dividend-paying token contract.\ninterface DividendPayingTokenOptionalInterface {\n  /// @notice View the amount of dividend in wei that an address can withdraw.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\n\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\n\n  /// @notice View the amount of dividend in wei that an address has earned in total.\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n  /// @param _owner The address of a token holder.\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\n}\n\n"},"DividendsPaying.sol":{"content":"// * SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./SafeMath.sol\"; \nimport \"./Ownable.sol\";\nimport \"./SafeMathUint.sol\";\nimport \"./SafeMathInt.sol\";\nimport \"./interfaceIBEP20.sol\";\nimport \"./DividendPayingToken.sol\";\nimport \"./IterableMapping.sol\";\n\n\n\ncontract DividendsPaying is DividendPayingToken, Ownable {\n\n    using SafeMath for uint256;\n    using SafeMathInt for int256;\n    using IterableMapping for IterableMapping.Map;\n\n    IterableMapping.Map private tokenHoldersMap;\n    uint256 public lastProcessedIndex;\n\n    mapping (address =\u003e bool) public excludedFromDividends;\n\n    mapping (address =\u003e uint256) public lastClaimTimes;\n\n    uint256 public claimWait;\n    uint256 public  minimumTokenBalanceForDividends;\n\n    event ExcludeFromDividends(address indexed account);\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\n\n    constructor()  DividendPayingToken(\"Legitmik Dividend Track\", \"LGKD\") {\n    \tclaimWait = 3600;\n        minimumTokenBalanceForDividends = 500 * (10**18); //must hold 10000+ tokens\n    }\n\n    function _transfer(address, address, uint256) internal pure override {\n        require(false, \"No transfers allowed\");\n    }\n\n    function withdrawDividend() public pure override {\n        require(false, \"withdrawDividend disabled. Use the \u0027claim\u0027 function on the main lgk contract.\");\n    }\n\n    function excludeFromDividends(address account, bool isTrue) external onlyOwner {\n    \trequire(!excludedFromDividends[account]);\n    \texcludedFromDividends[account] = isTrue;\n\n    \tif(isTrue) {\n            _setBalance(account, 0);\n    \t    tokenHoldersMap.remove(account);\n        }\n\n    \temit ExcludeFromDividends(account);\n    }\n\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\n        require(newClaimWait \u003e= 3600 \u0026\u0026 newClaimWait \u003c= 86400, \"claimWait must be updated to between 1 and 24 hours\");\n        require(newClaimWait != claimWait, \"Cannot update claimWait to same value\");\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\n        claimWait = newClaimWait;\n    }\n\n    function getLastProcessedIndex() external view returns(uint256) {\n    \treturn lastProcessedIndex;\n    }\n\n    function getNumberOfTokenHolders() external view returns(uint256) {\n        return tokenHoldersMap.keys.length;\n    }\n\n\n\n    function getAccount(address _account)\n        public view returns (\n            address account,\n            int256 index,\n            int256 iterationsUntilProcessed,\n            uint256 withdrawableDividends,\n            uint256 totalDividends,\n            uint256 lastClaimTime,\n            uint256 nextClaimTime,\n            uint256 secondsUntilAutoClaimAvailable) {\n        account = _account;\n\n        index = tokenHoldersMap.getIndexOfKey(account);\n\n        iterationsUntilProcessed = -1;\n\n        if(index \u003e= 0) {\n            if(uint256(index) \u003e lastProcessedIndex) {\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\n            }\n            else {\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length \u003e lastProcessedIndex ?\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\n                                                        0;\n\n\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\n            }\n        }\n\n\n        withdrawableDividends = withdrawableDividendOf(account);\n        totalDividends = accumulativeDividendOf(account);\n\n        lastClaimTime = lastClaimTimes[account];\n\n        nextClaimTime = lastClaimTime \u003e 0 ?\n                                    lastClaimTime.add(claimWait) :\n                                    0;\n\n        secondsUntilAutoClaimAvailable = nextClaimTime \u003e block.timestamp ?\n                                                    nextClaimTime.sub(block.timestamp) :\n                                                    0;\n    }\n\n    function getAccountAtIndex(uint256 index)\n        public view returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256) {\n    \tif(index \u003e= tokenHoldersMap.size()) {\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\n        }\n\n        address account = tokenHoldersMap.getKeyAtIndex(index);\n\n        return getAccount(account);\n    }\n\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\n    \tif(lastClaimTime \u003e block.timestamp)  {\n    \t\treturn false;\n    \t}\n\n    \treturn block.timestamp.sub(lastClaimTime) \u003e= claimWait;\n    }\n\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\n    \tif(excludedFromDividends[account]) {\n    \t\treturn;\n    \t}\n\n    \tif(newBalance \u003e= minimumTokenBalanceForDividends) {\n            _setBalance(account, newBalance);\n    \t\ttokenHoldersMap.set(account, newBalance);\n    \t}\n    \telse {\n            _setBalance(account, 0);\n    \t\ttokenHoldersMap.remove(account);\n    \t}\n\n    \tprocessAccount(account, true);\n    }\n\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\n\n    \tif(numberOfTokenHolders == 0) {\n    \t\treturn (0, 0, lastProcessedIndex);\n    \t}\n\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\n\n    \tuint256 gasUsed = 0;\n\n    \tuint256 gasLeft = gasleft();\n\n    \tuint256 iterations = 0;\n    \tuint256 claims = 0;\n\n    \twhile(gasUsed \u003c gas \u0026\u0026 iterations \u003c numberOfTokenHolders) {\n    \t\t_lastProcessedIndex++;\n\n    \t\tif(_lastProcessedIndex \u003e= tokenHoldersMap.keys.length) {\n    \t\t\t_lastProcessedIndex = 0;\n    \t\t}\n\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\n\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\n    \t\t\tif(processAccount(payable(account), true)) {\n    \t\t\t\tclaims++;\n    \t\t\t}\n    \t\t}\n\n    \t\titerations++;\n\n    \t\tuint256 newGasLeft = gasleft();\n\n    \t\tif(gasLeft \u003e newGasLeft) {\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\n    \t\t}\n\n    \t\tgasLeft = newGasLeft;\n    \t}\n\n    \tlastProcessedIndex = _lastProcessedIndex;\n\n    \treturn (iterations, claims, lastProcessedIndex);\n    }\n\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\n        uint256 amount = _withdrawDividendOfUser(account);\n\n    \tif(amount \u003e 0) {\n    \t\tlastClaimTimes[account] = block.timestamp;\n            emit Claim(account, amount, automatic);\n    \t\treturn true;\n    \t}\n\n    \treturn false;\n    }\n    function setminimumTokenBalanceForDividends(uint256 _minimumTokenBalanceForDividends) external onlyOwner {\n        minimumTokenBalanceForDividends = _minimumTokenBalanceForDividends;\n    }\n    function getLostBNB(address admin)external onlyOwner {\n        uint256 balance = address(this).balance;\n        if(balance \u003e 0) {\n            (bool success, ) = admin.call{ value: balance }(\"\");\n            require(success, \"Address: unable to send value, recipient may have reverted\");\n        }\n    }\n}\n\n    \n    \n\n    \n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_)  {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"interfaceIBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"interfaceIUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"},"interfaceIUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint);\n\n    function price1CumulativeLast() external view returns (uint);\n\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"interfaceIUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"interfaceIUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\nimport \"./interfaceIUniswapV2Router01.sol\";\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"IterableMapping.sol":{"content":"// * SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nlibrary IterableMapping {\n    // Iterable mapping from address to uint;\n    struct Map {\n        address[] keys;\n        mapping(address =\u003e uint) values;\n        mapping(address =\u003e uint) indexOf;\n        mapping(address =\u003e bool) inserted;\n    }\n\n    function get(Map storage map, address key) public view returns (uint) {\n        return map.values[key];\n    }\n\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\n        if(!map.inserted[key]) {\n            return -1;\n        }\n        return int(map.indexOf[key]);\n    }\n\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\n        return map.keys[index];\n    }\n\n\n\n    function size(Map storage map) public view returns (uint) {\n        return map.keys.length;\n    }\n\n    function set(Map storage map, address key, uint val) public {\n        if (map.inserted[key]) {\n            map.values[key] = val;\n        } else {\n            map.inserted[key] = true;\n            map.values[key] = val;\n            map.indexOf[key] = map.keys.length;\n            map.keys.push(key);\n        }\n    }\n\n    function remove(Map storage map, address key) public {\n        if (!map.inserted[key]) {\n            return;\n        }\n\n        delete map.inserted[key];\n        delete map.values[key];\n\n        uint index = map.indexOf[key];\n        uint lastIndex = map.keys.length - 1;\n        address lastKey = map.keys[lastIndex];\n\n        map.indexOf[lastKey] = index;\n        delete map.indexOf[key];\n\n        map.keys[index] = lastKey;\n        map.keys.pop();\n    }\n}\n"},"LegitimikToken.sol":{"content":"/**\n * Develop by CPTRedHawk\n * @ Esse contrato Foi desenvolvido por https://t.me/redhawknfts\n * Caso queira ter uma plataforma similar, gentileza chamar no Telegram!\n * SPDX-License-Identifier: MIT\n * Entrega teu caminho ao senhor, e tudo ele o fará! Salmos 37\n */\n\npragma solidity ^0.8.17;\n\nimport \"./interfaceIBEP20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./Address.sol\";\nimport \"./interfaceIUniswapV2Factory.sol\";\nimport \"./interfaceIUniswapV2Pair.sol\";\nimport \"./interfaceIUniswapV2Router01.sol\";\nimport \"./interfaceIUniswapV2Router02.sol\";\nimport \"./DividendsPaying.sol\";\n\n\ncontract Legitimik is IBEP20, Ownable {\n    /*=== SafeMath ===*/\n    using SafeMath for uint256;\n    using Address for address;\n    /*=== Endereços ===*/\n    address private burnAddress = address(0); // Endereço de Queima\n    address private internalOperationAddress; // Distribui as Recompensas para os Holders\n    DividendsPaying public dividends; // Endeço de Dividendos\n    IUniswapV2Router02 public  uniswapV2Router; // Endereço Router\n    address public  uniswapV2Pair; // Par LGK/BNB\n    /*=== Mapeamento ===*/\n    mapping (address =\u003e uint256) private _balance; // Saldo dos Holders\n    mapping (address =\u003e bool) public _excludeFromFee; // Nao paga Taxas\n    mapping (address =\u003e bool) private automatedMarketMakerPairs; // Automatizado de Trocas\n    mapping (address =\u003e mapping(address =\u003e uint256)) private _allowances; // Subsidio\n    mapping (address =\u003e bool) public isTimelockExempt; // Nao tem Tempo de Espera\n    mapping (address =\u003e uint) public cooldownTimerBuy; // Tempo de Compra\n    mapping (address =\u003e uint) public cooldownTimerSell; // Tempo de Venda\n    mapping (address =\u003e bool) public _isBlackListAddress; // Adiciona na Lista Negra\n    /*=== Unitarios ===*/\n    uint8 private _decimals = 18;\n    uint8 public cooldownTimerInterval = 20; // Tempo de espera entre compra e venda\n    uint256 private _decimalFactor = 10**_decimals; // Fator Decimal\n    uint256 private _tSupply = 20000000 * _decimalFactor; // Supply Legitimik\n    uint256 public buyFee = 10; // Taxa de Compra\n    uint256 private previousBuyFee; // Armazena Taxa de Compra\n    uint256 public sellFee = 10; // Taxa de Venda\n    uint256 private previousSellFee; // Armazena Taxa de Venda\n    uint256 public transferFee = 10; // Taxa de Transferencia\n    uint256 private previousTransferFee; // Armazena Taxa de Transferencia\n    uint256 public feeUsers = 2; \n    uint256 public liquidityPercent = 20; // Taxa de Liquidez 20%\n    uint256 public totalFeeLGK; // Mostra o Total de Taxas Arrecadadas em LGK\n    uint256 public totalFeeBNB; // Mostra o Total de Taxas Arrecadadas em BNB\n    uint256 private gasForProcessing = 300000; // Gás para iterar\n    uint256 public maxWalletBalance = 5000 * _decimalFactor; // 1% do Supply\n    uint256 public maxBuyAmount = 3000 * _decimalFactor; // 1% do Supply\n    uint256 public maxSellAmount = 3000 * _decimalFactor; // 1% do Supply\n    uint256 public maxTxAmount = 5000 * _decimalFactor; // 1% do Supply\n    uint256 public numberOfTokensToSwapToLiquidity = 500 * _decimalFactor; // 0,05% do Supply\n    /*=== Boolean ===*/\n    bool private inSwapAndLiquify; \n    bool private coolDownUser;\n    bool private blackUser;\n    bool private swapping;\n    bool private activeDividends = true;\n    bool public buyCooldownEnabled = true;\n    bool public sellCooldownEnabled = true;\n    bool private isSendToken = true;\n    bool private blackEnabled = true;\n    bool private swapAndLiquifyEnabled = true;\n    /*=== Strings ===*/\n    string private _name = \"Legitimik\";\n    string private _symbol =  \"LGK\";\n    /*=== Modifiers ===*/\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n    modifier lockCoolDown {\n        coolDownUser = true;\n        _;\n        coolDownUser = false;\n    }\n    modifier blackList {\n        blackUser = true;\n        _;\n        blackUser = false;\n    }\n    /*=== Construtor ===*/\n    constructor() {\n        //  IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // PancakeSwap Router Testnet\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // PancakeSwap Router Mainnet\n        address pairCreated = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH()); // Gera o Par ARC/BNB\n        uniswapV2Router = _uniswapV2Router; // Armazena Rota\n        uniswapV2Pair = pairCreated; // Armazena Par\n        _balance[owner()] = _tSupply; // Define Owner como Detentor dos _Tokens\n        dividends = new DividendsPaying(); // Define Endereço de Dividendos\n        dividends.excludeFromDividends(address(this), true); // Define Contrato como True para nao Receber Dividendos\n        dividends.excludeFromDividends(owner(), true); // Define Owner como True para nao Receber Dividendos\n        dividends.excludeFromDividends(uniswapV2Pair, true); // Define Owner como True para nao Receber Dividendoss\n        internalOperationAddress = owner(); // Define Endereço de Operações\n        _excludeFromFee[owner()] = true; // Define Owner como True para não pagar Taxas\n        _excludeFromFee[address(this)] = true; // Define Contrato como True para não pagar Taxas\n        _excludeFromFee[internalOperationAddress] = true; // Define internalOperationAddress como True para não pagar Taxas\n        isTimelockExempt[owner()] = true; // Owner Nao tem tempo de espera para compra e venda\n        isTimelockExempt[address(this)] = true; // Contrato Nao tem tempo de espera para compra e venda\n       _setAutomatedMarketMakerPair(pairCreated, true); // Pair é o Automatizador de Transações\n       _approve(owner(), address(uniswapV2Router), ~uint256(0)); // Aprova Tokens para Add Liquidez\n        emit Transfer(address(0), owner(), _tSupply); // Emite um Evento de Cunhagem\n    }\n    /*=== Receive ===*/\n    receive() external payable {}\n    /*=== Eventos ===*/\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\n    event SwapAndLiquifyEnabledUpdated(bool indexed enabled);\n    event LiquidityAdded(uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity);\n    event UpdatedBlackList(address indexed account, bool isExcluded);\n    event SentBNBInternalOperation(address usr, uint256 amount);\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n    event ProcessedDividendTracker(\n    \tuint256 iterations,\n    \tuint256 claims,\n        uint256 lastProcessedIndex,\n    \tbool indexed automatic,\n    \tuint256 gas,\n    \taddress indexed processor\n    );\n    /*=== Public View ===*/\n    function name() public view override returns(string memory) { return _name; } // Nome do Token\n    function symbol() public view override returns(string memory) { return _symbol; } // Simbolo do Token\n    function decimals() public view override returns(uint8) { return _decimals; } // Decimais\n    function totalSupply() public view override returns(uint256) { return _tSupply; } // Supply Total\n    function balanceOf(address account) public view override returns(uint256) { return _balance[account]; } // Retorna o Saldo em Carteira\n    function allowance(address owner, address spender) public view override returns(uint256) { return _allowances[owner][spender]; } // Subsidio Restante\n    function accumulativeDividendOf(address account) public view returns(uint256) {\n        return dividends.accumulativeDividendOf(account);\n    }\n    function withdrawableDividendOf(address account) public view returns(uint256) {\n        return dividends.withdrawableDividendOf(account);\n    }\n    function balanceDividends(address account) public view returns(uint256) {\n        return dividends.balanceOf(account);\n    }\n    /*=== Private/Internal ===*/\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        require(automatedMarketMakerPairs[pair] != value, \"O par de AutomatedMarketMakerPair ja esta definido para esse valor\");\n        automatedMarketMakerPairs[pair] = value; // Booleano\n        emit SetAutomatedMarketMakerPair(pair, value); // Emite um Evento para um Novo Automatizador de Trocas\n    }\n    function _setRouterAddress(address router) private {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router); // Router\n        address pairCreated = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH()); // Gera o Par LGK/BNB\n        uniswapV2Router = _uniswapV2Router; // Armazena Rota\n        uniswapV2Pair = pairCreated; // Armazena Par\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true); // Armazena o novo Par como o Automatizador de Trocas\n    }\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ARC:Owner nao pode ser Address 0\");\n        require(spender != address(0), \"ARC:Owner nao pode ser Address 0\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\n        uint256 currentAllowance = allowance(owner, spender);\n        if(currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ARC: subsidio insuficiente\");\n            _approve(owner, spender, currentAllowance - amount);\n        }\n    }\n    function _unlimitedAddress(address account) internal view returns(bool) {\n        if(_excludeFromFee[account]) {\n            return true;\n        }\n        else {return false;}\n    }\n    function buyCoolDown(address to) private lockCoolDown {\n        cooldownTimerBuy[to] = block.timestamp; // Ativa o Tempo de Compra\n    }\n    function sellCoolDown(address from) private lockCoolDown  {\n        cooldownTimerSell[from] = block.timestamp; // Ativa o Tempo de Venda\n    }\n    function lockToBuyOrSellForTime(uint256 lastBuyOrSellTime, uint256 lockTime) private lockCoolDown returns (bool) {\n        uint256 crashTime = lastBuyOrSellTime + lockTime;\n        uint256 currentTime = block.timestamp;\n        if(currentTime \u003e= crashTime) {\n            return true;\n        }\n\n        return false;\n    }\n    function getFromLastPurchaseBuy(address walletBuy) private view returns (uint) {\n        return cooldownTimerBuy[walletBuy];\n    }\n    function getFromLastSell(address walletSell) private view returns (uint) {\n        return cooldownTimerSell[walletSell];\n    }\n    function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual{}\n    function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual{}\n    function _transferTokens(address from, address to, uint256 amount) internal {\n        require(to != from, \"Nao pode enviar para o mesmo Endereco\");\n        require(amount \u003e 0, \"Saldo precisa ser maior do que Zero\");\n        _beforeTokenTransfer(from, to, amount);\n\n        if(blackEnabled \u0026\u0026 !blackUser) {\n           require(!_isBlacklist(from) \u0026\u0026 !_isBlacklist(to), \"Voce esta na Lista Negra\");\n        }\n        \n        uint256 fromBalance = _balance[from];\n        require(fromBalance \u003e= amount, \"Voce nao tem Limite de Saldo\");\n        _balance[from] = fromBalance - amount;\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        if (!automatedMarketMakerPairs[from] \u0026\u0026 automatedMarketMakerPairs[to]) {\n            swapping = true;\n            liquify( contractTokenBalance, from );\n            swapping = false;\n        }\n\n        bool takeFee = true;\n\n        if(_excludeFromFee[from] || _excludeFromFee[to]){\n            takeFee = false;\n        }\n\n        if(!takeFee) removeAllFee(); // Remove todas as Taxa\n\n            uint256 fees; // Taxas de Compra, Vendas e Transferencias!\n\n            if(!automatedMarketMakerPairs[from] \u0026\u0026 !automatedMarketMakerPairs[to] ) {\n                fees = amount.mul(transferFee).div(100); // Define taxa de Transferencia\n                if (amount \u003e maxTxAmount \u0026\u0026 !_unlimitedAddress(from) \u0026\u0026 !_unlimitedAddress(to)) {\n                    revert(\"Montante de Venda nao pode ultrapassar limite\"); \n                }\n            }\n\n            if(automatedMarketMakerPairs[from]) {\n                fees = amount.mul(buyFee).div(100); // Define taxa de Compra\n                if (amount \u003e maxBuyAmount \u0026\u0026 !_unlimitedAddress(from) \u0026\u0026 !_unlimitedAddress(to)) {\n                    revert(\"Montante de Venda nao pode ultrapassar limite\"); \n                }\n\n                if(buyCooldownEnabled \u0026\u0026 !isTimelockExempt[to] \u0026\u0026 !coolDownUser) {\n                    require(lockToBuyOrSellForTime(getFromLastPurchaseBuy(to), cooldownTimerInterval), \"Por favor, aguarde o cooldown entre as compras\");\n                    buyCoolDown(to);\n                }\n            }\n            else if(automatedMarketMakerPairs[to]) {\n                fees = amount.mul(sellFee).div(100); // Define taxa de Venda\n                if (amount \u003e maxSellAmount \u0026\u0026 !_unlimitedAddress(from) \u0026\u0026 !_unlimitedAddress(to)) {\n                    revert(\"Montante de Venda nao pode ultrapassar limite\"); \n                }\n\n                if(sellCooldownEnabled \u0026\u0026 !isTimelockExempt[from] \u0026\u0026 !coolDownUser) {\n                    require(lockToBuyOrSellForTime(getFromLastSell(from), cooldownTimerInterval), \"Por favor, aguarde o cooldown entre as vendas\");\n                    sellCoolDown(from);\n                }\n            }\n\n            if(maxWalletBalance \u003e 0 \u0026\u0026 !_unlimitedAddress(from) \u0026\u0026 !_unlimitedAddress(to) \u0026\u0026 !automatedMarketMakerPairs[to]) {\n                uint256 recipientBalance = balanceOf(to); // Define o Maximo por Wallet\n                require(recipientBalance.add(amount) \u003c= maxWalletBalance, \"Nao pode Ultrapassar o limite por Wallet\");\n            }\n\n            if(fees \u003e 0) {\n                amount = amount.sub(fees);\n                _balance[address(this)] += fees;\n                emit Transfer(from, address(this), fees); // Emite um Evento de Envio de Taxas\n            }\n\n            _balance[to] += amount;\n\n\n\n\n            if (activeDividends) {\n\n                try dividends.setBalance(payable(from), balanceOf(from)) {} catch {}\n                try dividends.setBalance(payable(to), balanceOf(to)) {} catch {}\n\n                if(!swapping) {\n                    uint256 gas = gasForProcessing;\n\n                    try dividends.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\n                        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\n                    } \n                    catch {\n\n                    }\n                }\n\n                \n            }\n\n\n            \n            emit Transfer(from, to, amount); // Emite um Evento de Transferencia\n            _afterTokenTransfer(from, to, amount);\n        if(!takeFee) restoreAllFee(); // Retorna todas as Taxa\n    }\n    function removeAllFee() private {\n        if(buyFee == 0 || sellFee == 0 || transferFee == 0) return;\n        previousBuyFee = buyFee; // Armazena Taxa Anterior\n        previousSellFee = sellFee; // Armazena Taxa Anterior\n        previousTransferFee = transferFee; // Armazena Taxa Anterior\n        buyFee = 0; // Taxa 0\n        sellFee = 0; // Taxa 0\n        transferFee = 0; // Taxa 0\n    }\n    function restoreAllFee() private {\n        buyFee = previousBuyFee; // Restaura Taxas\n        sellFee = previousSellFee; // Restaura Taxas\n        transferFee = previousTransferFee; // Restaura Taxas\n    }  \n    function liquify(uint256 contractTokenBalance, address sender) internal {\n        \n        if (contractTokenBalance \u003e= numberOfTokensToSwapToLiquidity) contractTokenBalance = numberOfTokensToSwapToLiquidity; // Define se a Quantidade de Tokens para\n        \n        bool isOverRequiredTokenBalance = ( contractTokenBalance \u003e= numberOfTokensToSwapToLiquidity ); // Booleano\n        \n        if ( isOverRequiredTokenBalance \u0026\u0026 swapAndLiquifyEnabled \u0026\u0026 !inSwapAndLiquify \u0026\u0026 (!automatedMarketMakerPairs[sender]) ) {\n            uint256 tokenLiquidity = contractTokenBalance.mul(liquidityPercent).div(100); // Quantidade de Tokens que vai para Liquidez\n            uint256 toSwapBNB = contractTokenBalance.sub(tokenLiquidity); // Quantidade de Tokens para Venda\n            _swapAndLiquify(tokenLiquidity); // Adiciona Liquidez\n            _sendBNBToContract(toSwapBNB); // Troca Tokens por BNB\n        }\n\n    }\n    function _swapAndLiquify(uint256 amount) private lockTheSwap {\n        uint256 half = amount.div(2); // Divide para Adicionar Liquidez\n        uint256 otherHalf = amount.sub(half); // Divide para Adicionar Liquidez\n        uint256 initialBalance = address(this).balance; // Armazena o Saldo Inicial em BNB\n        _swapTokensForEth(half); // Efetua a troca de Token por BNB\n        uint256 newBalance = address(this).balance.sub(initialBalance); // Saldo atual em BNB - Saldo Antigo\n        _addLiquidity(otherHalf, newBalance); // Adiciona Liquidez\n        emit SwapAndLiquify(half, newBalance, otherHalf); // Emite Evento de Swap\n    }\n    function _sendBNBToContract(uint256 tAmount) private lockTheSwap {\n         _swapTokensForEth(tAmount); // Vende os Tokens por BNB e envia para o Contrato\n        if(isSendToken) {\n            uint256 initialBalance = address(this).balance;\n            if(initialBalance \u003e 0) {\n    \n                (bool sent, ) = internalOperationAddress.call{value: address(this).balance}(\"\");\n                if(sent) {\n                    emit SentBNBInternalOperation(internalOperationAddress, initialBalance);\n                }\n            } \n        }\n    }\n\n    function _swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2); // Path Memory para inicia a venda dos Tokens\n        path[0] = address(this); // Endereço do Contrato\n        path[1] = uniswapV2Router.WETH(); // Par de Troca (BNB)\n        _approve(address(this), address(uniswapV2Router), tokenAmount); // Aprova os Tokens para Troca\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount, // Saldo para Swap\n            0, // Amount BNB\n            path, // Path [address(this), uniswapV2Router.WETH()]\n            address(this), // Endereço de Taxa\n            block.timestamp // Timestamp\n        );\n    }\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        (uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity) = uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount, // Saldo para Liquidez\n            0, // Slippage 0\n            0, // Slippage 0\n            owner(), // Owner Adiciona Liquidez\n            block.timestamp // Timestamp\n        );\n        emit LiquidityAdded(tokenAmountSent, ethAmountSent, liquidity); // Emite Evento de Liquidez\n    }\n    function _isBlacklist(address user) private blackList returns(bool) {\n       return _isBlackListAddress[user]; // Verifica se From esta na Blacklist\n    }\n    /*=== Public/External ===*/\n    function approve(address spender, uint256 amount) public override returns(bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    function transfer(address to, uint256 amount) public override returns(bool){\n        _transferTokens(_msgSender(), to, amount);\n        return true;\n    }\n    function transferFrom(address from, address to, uint256 amount) public override returns(bool) {\n        _spendAllowance(from, _msgSender(), amount);\n         _transferTokens(from, to, amount);\n        return true;\n    }\n\n    /*=== Funções Administrativas ===*/\n\n    function changeAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\n        require(pair != uniswapV2Pair, \"uniswapV2Pair nao pode ser removido de AutomatedMarketMakerPair\");\n        _setAutomatedMarketMakerPair(pair, value); // Define um Novo Automatizador de Trocas\n    }\n    function changeFees(uint256 _buyFee, uint256 _sellFee, uint256 _transferFee, uint256 _liquidityPercent) external onlyOwner {\n        buyFee = _buyFee;\n        sellFee = _sellFee;\n        transferFee = _transferFee;\n        liquidityPercent = _liquidityPercent;\n    }\n    function changeAddress(address _internalOperationAddress) external onlyOwner {\n        internalOperationAddress = _internalOperationAddress; // Define Endereço de Operações\n    }\n    function getLostBNB() external payable onlyOwner {\n        dividends.getLostBNB(_msgSender()); // Pega os BNB Perdidos do Dividendos\n    }\n    function removeBNBLGK() external payable onlyOwner {\n        uint256 balance = address(this).balance;\n        if(balance \u003e 0) {\n            (bool success, ) = _msgSender().call{ value: balance }(\"\");\n            require(success, \"Address: unable to send value, recipient may have reverted\");\n        }\n    }\n    function getTokenContract(address account, uint256 amount) external  onlyOwner {\n        _transferTokens(address(this), account, amount);\n    }\n    function processDividendTracker(uint256 gas) external {\n\t\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividends.process(gas);\n\t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\n    }\n    function setLimitContract(uint256 _maxWalletBalance, uint256 _maxBuyAmount, uint256 _maxSellAmount, uint256 _maxTxAmount) external onlyOwner {\n        maxWalletBalance = _maxWalletBalance * _decimalFactor; \n        maxBuyAmount = _maxBuyAmount * _decimalFactor; \n        maxSellAmount = _maxSellAmount * _decimalFactor; \n        maxTxAmount = _maxTxAmount * _decimalFactor; \n    }\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\n        require(newValue \u003e= 200000 \u0026\u0026 newValue \u003c= 500000, \"gasForProcessing must be between 200,000 and 500,000\");\n        require(newValue != gasForProcessing, \"Cannot update gasForProcessing to same value\");\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\n        gasForProcessing = newValue;\n    }\n    function defineExcluded(address account, bool isTrue) external onlyOwner {\n        _excludeFromFee[account] = isTrue; // Exclui das Taxas e dos Limites\n    }\n    function setRouter(address router) external onlyOwner {\n        _setRouterAddress(router); // Define uma Nova Rota (Caso Pancakeswap migre para a RouterV3 e adiante)\n    }\n    function setIsSwap(bool isTrue) external onlyOwner {\n        swapAndLiquifyEnabled = isTrue; // Ativa e Desativa o Swap\n        emit SwapAndLiquifyEnabledUpdated(swapAndLiquifyEnabled); // Emite Evento de Swap Ativo/Inativo\n    }\n    function setActiveCoolDown(bool _buyCooldownEnabled, bool _sellCooldownEnabled, uint8 _cooldownTimerInterval) external onlyOwner {\n        buyCooldownEnabled = _buyCooldownEnabled; // Ativa e Desativa Cooldown Buy\n        sellCooldownEnabled = _sellCooldownEnabled; // Ativa e Desativa Cooldown Sell\n        cooldownTimerInterval = _cooldownTimerInterval; // Define Segundos entre Compra e Venda\n    }\n    function activeSendDividends(bool _isSendToken) external onlyOwner {\n        isSendToken = _isSendToken;\n    }\n    function burnToken(uint256 _burnAmount) external onlyOwner {\n        _transferTokens(_msgSender(), burnAddress, _burnAmount); // Apenas o Owner pode realizar Queimas\n    }\n    function setSwapAmount(uint256 tAmount) external onlyOwner {\n        numberOfTokensToSwapToLiquidity = tAmount * _decimalFactor; // Define a quantidade de Tokens que o Contrato vai Vender\n    }\n    function updateDividends(address newAddress) external onlyOwner {\n      DividendsPaying newDividends = DividendsPaying(payable(newAddress));\n      dividends = newDividends;\n    }\n    function setBlacklist(bool _blackEnabled) external onlyOwner {\n        blackEnabled = _blackEnabled; // Ativa Blacklist\n    }\n    function changeBlacklistUser(address user, bool isTrue) external onlyOwner {\n        _isBlackListAddress[user] = isTrue;\n        emit UpdatedBlackList(user, isTrue);\n    }\n    function defineActiveDividends(bool isTrue) external onlyOwner {\n        activeDividends = isTrue;\n    }\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\n        dividends.updateClaimWait(claimWait);\n    }\n    function claim() external {\n\t\tdividends.processAccount(payable(msg.sender), false);\n    }\n    function excludeFromDividends(address user, bool isTrue) external onlyOwner {\n        dividends.excludeFromDividends(user, isTrue);\n    }\n    function setminimumTokenBalanceForDividends(uint256 amount) external onlyOwner {\n        dividends.setminimumTokenBalanceForDividends(amount);\n    }\n\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.15;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.17;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n"},"SafeMathInt.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/*\nMIT License\n\nCopyright (c) 2018 requestnetwork\nCopyright (c) 2018 Fragments, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\npragma solidity ^0.8.17;\n\n/**\n * @title SafeMathInt\n * @dev Math operations for int256 with overflow safety checks.\n */\nlibrary SafeMathInt {\n    int256 private constant MIN_INT256 = int256(1) \u003c\u003c 255;\n    int256 private constant MAX_INT256 = ~(int256(1) \u003c\u003c 255);\n\n    /**\n     * @dev Multiplies two int256 variables and fails on overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a * b;\n\n        // Detect overflow when multiplying MIN_INT256 with -1\n        require(c != MIN_INT256 || (a \u0026 MIN_INT256) != (b \u0026 MIN_INT256));\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    /**\n     * @dev Division of two int256 variables and fails on overflow.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing MIN_INT256 by -1\n        require(b != -1 || a != MIN_INT256);\n\n        // Solidity already throws when dividing by 0.\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two int256 variables and fails on overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b \u003e= 0 \u0026\u0026 c \u003c= a) || (b \u003c 0 \u0026\u0026 c \u003e a));\n        return c;\n    }\n\n    /**\n     * @dev Adds two int256 variables and fails on overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b \u003e= 0 \u0026\u0026 c \u003e= a) || (b \u003c 0 \u0026\u0026 c \u003c a));\n        return c;\n    }\n\n    /**\n     * @dev Converts to absolute value, and fails on overflow.\n     */\n    function abs(int256 a) internal pure returns (int256) {\n        require(a != MIN_INT256);\n        return a \u003c 0 ? -a : a;\n    }\n\n\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a \u003e= 0);\n        return uint256(a);\n    }\n}\n"},"SafeMathUint.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n/**\n * @title SafeMathUint\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMathUint {\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    require(b \u003e= 0);\n    return b;\n  }\n}\n"}}