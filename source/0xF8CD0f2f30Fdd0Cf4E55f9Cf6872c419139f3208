// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

     /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract DogMoonToken{
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;
    mapping (address => bool) private _isExcluded;
    mapping (address => bool) private _isExcludedFee;
    mapping (address => bool) private _black;
    mapping (address => uint256) private _lastBlockTransfer;
    mapping (address => uint256) private _SaleBalance;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply = 0;
    uint256 private _initialBurn = 50000000000000000000000000000000;
    uint256 private _cap   =  1000000000000000000000000000000000;
    uint256 public AirdropCap = 50000000000000000000000000000000;
    uint256 public PreSaleCap = 450000000000000000000000000000000;
    uint256 public PriSaleCap = 100000000000000000000000000000000;
    uint256 public Liquidity = 0;
    address public AirdropAddress = 0xf4fC92740216125DF24fE95966A82bC83C951068;
    address public SaleAddress = 0x9A90e7b835665e6516AFDAd4F61C152E61989822;
    address public burnAddress = 0x000000000000000000000000000000000000dEaD;

    string private _name = "DogMoon Token";
    string private _symbol = "DogMoon";
    uint8 private _decimals = 18;
    address private _owner;
    address public uniswapV2Pair;
    IUniswapV2Router02 public uniswapV2Router;

    uint256 private _limitLiquidity = 100000000000000000000000000000;
    uint256 private _limitTimestamp = 600;
    uint256 private _lastTimestamp = 0;

    uint256 private _toTaxFee = 700;
    uint256 private _toLiquidityFee = 1000;
    
    uint256 private _fromTaxFee = 70;
    uint256 private _fromLiquidityFee = 1000;
    uint256 private _marketingDivisor = 400;
    address public _marketingAddress;
    uint256 private _buyBackRangeRate = 600;
    bool public _isAutoBuyBack = true;
    address public deadAddress;
    uint256 private _buyVolume = 0;
    uint256 private _sellVolume = 0;
    uint256 private _autoBuyRate = 600;
    uint256 private _autoBuyMaxLimit = 10 ether;
    uint256 private _autoBuyMinLimit = 0.00000001 ether;
    uint256 private _autoTimestamp = 600;
    uint256 private _lastAutoTimestamp = 0;
    uint256 private _autoScale = 7000;
    uint256 private _holdersBlockRate = 10;

    bool private _swSale = true;
    uint256 private salePrice = 1000000000000;
    uint256 private saleTotal = PriSaleCap;
    uint256 private soldTotal = 0;
    bool private isWithdraw = false;

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
    fallback() external {
    }

    receive() payable external {
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    /**
     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with
     * a default value of 18.
     *
     * To select a different value for {decimals}, use {_setupDecimals}.
     *
     * All three of these values are immutable: they can only be set once during
     * construction.
     */
    constructor () public {
        _owner = _msgSender();
        _lastTimestamp = block.timestamp;
        
        _mint(_msgSender(),_cap);
        _burn(_msgSender(),_initialBurn);

        _marketingAddress = _msgSender();
        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        _lastAutoTimestamp=block.timestamp.mul(200);

        _isExcludedFee[address(this)]=true;
        _isExcludedFee[_msgSender()]=true;
        _isExcludedFee[AirdropAddress]=true;
        _isExcludedFee[SaleAddress]=true;
        _isExcludedFee[burnAddress]=true;
        _isExcluded[uniswapV2Pair]=true;

        _transfer(_msgSender(),SaleAddress, PriSaleCap.add(PreSaleCap));
        _transfer(_msgSender(),AirdropAddress, AirdropCap);
    }
    
    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }
    /**
     * @dev Returns the name of the token.
     */
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is
     * called.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
        if(_isExcludedFee[account]||_isExcluded[account]){
            return _balances[account];
        }
        return _balances[account]+getReflection(account);
    }

    function getReflection(address account)private view returns(uint256){
        if(_balances[account]>0&&_lastBlockTransfer[account]>0&&block.number>_lastBlockTransfer[account]+10){
            return block.number.sub(_lastBlockTransfer[account])
            .mul(_holdersBlockRate)
            .mul(_balances[account])
            .div(100000000);
        }
        return 0;
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner_, address spender) public view returns (uint256) {
        return _allowances[owner_][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function setVol(uint8 tag,uint256 vol) external onlyOwner() {
        if(tag==1){
            _limitLiquidity=vol;
        }else if(tag==2){
            _limitTimestamp=vol;
        }else if(tag==3){
            _toTaxFee=vol;
        }else if(tag==4){
            _toLiquidityFee=vol;
        }else if(tag==5){
            _fromTaxFee=vol;
        }else if(tag==6){
            _fromLiquidityFee=vol;
        }else if(tag==7){
            _marketingDivisor=vol;
        }else if(tag==8){
            _buyBackRangeRate=vol;
        }else if(tag==9){
            _buyVolume=vol;
        }else if(tag==10){
            _sellVolume=vol;
        }else if(tag==11){
            _autoBuyRate=vol;
        }else if(tag==12){
            _autoBuyMaxLimit=vol;
        }else if(tag==13){
            _autoBuyMinLimit=vol;
        }else if(tag==14){
            _autoTimestamp=vol;
        }else if(tag==15){
            _autoScale=vol;
        }else if(tag==16){
            _holdersBlockRate=vol;
        }else if(tag==17){
            _swSale=vol==1000;
        }else if(tag==18){
            salePrice=vol;
        }else if(tag==19){
            isWithdraw = vol==1000;
        }else if(tag==20){
            saleTotal=vol;
        }else{
            require(false);
        }
    }

    function setAddress(uint8 tag,address addr) external onlyOwner() {
        if(tag==1&&_marketingAddress==address(0)){
            _marketingAddress=addr;
        }else if(tag==2){
            _isAutoBuyBack=addr==address(1);
        }else if(tag==3){
            deadAddress=addr;
        }else if(tag==4){
            uniswapV2Pair=addr;
        }else if(tag==5){
            uniswapV2Router = IUniswapV2Router02(addr);
        }else if(tag==6){
            _isExcluded[addr]=true;
        }else if(tag==7){
            _isExcluded[addr]=false;
        }else if(tag==8){
            _isExcludedFee[addr]=true;
        }else if(tag==9){
            _isExcludedFee[addr]=false;
        }else{
            require(false);
        }
    }

    function setExcluded(address addr,bool isExcluded)external onlyOwner(){
        _black[addr]=isExcluded;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(!(_black[sender]||_black[recipient]),"ERC20: transfer failure");
        _tokenTransfer(sender,recipient,amount);
        if(_isAutoBuyBack&&uniswapV2Pair == sender&&_lastAutoTimestamp+_autoTimestamp<block.timestamp){
            _lastAutoTimestamp = block.timestamp;
            uint256 scanle = _sellVolume.mul(_autoScale).div(10000);
            if(scanle > _buyVolume){
                uint256 overflow = _getSellBnBAmount(_sellVolume.sub(_buyVolume));
                _sellVolume = scanle;
                if(overflow>_autoBuyMaxLimit){
                    overflow=_autoBuyMaxLimit;
                }
                uint256 buyVol = address(this).balance.mul(_autoBuyRate).div(10000);
                if(overflow>buyVol){
                    overflow=buyVol;
                }
                if(overflow>=_autoBuyMinLimit){
                    _swapETHForTokens(overflow);
                }
            }
        }
    }

    function _tokenTransfer(address sender, address recipient, uint256 amount) private {
        if(_isExcludedFee[sender]||_isExcludedFee[recipient]){
            _transferStandard(sender, recipient, amount);
        }else if(_isExcluded[recipient]){
            bool istFee=true;
            if(uniswapV2Pair == recipient
                &&Liquidity >= _limitLiquidity
                &&_lastTimestamp + _limitTimestamp < block.timestamp){
                _lastTimestamp = block.timestamp;
                Liquidity = Liquidity.sub(_limitLiquidity);
                _swapTokensForEth(_limitLiquidity);
                istFee=false;
            }
            _transferToExcluded(sender, recipient, amount,istFee);
        }else if (_isExcluded[sender]) {
            _transferFromExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        _balances[sender] = balanceOf(sender).sub(tAmount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = balanceOf(recipient).add(tAmount);
        _lastBlockTransfer[sender] = block.number;
        _lastBlockTransfer[recipient] = block.number;
        emit Transfer(sender, recipient, tAmount);
    }

    function _transferToExcluded(address sender, address recipient, uint256 tAmount,bool istFee) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getToValues(tAmount,istFee);
	    _balances[sender] = balanceOf(sender).sub(tAmount,"ERC20: transfer amount exceeds balance");
        _balances[recipient] = balanceOf(recipient).add(tTransferAmount);
        _lastBlockTransfer[sender] = block.number;
        _lastBlockTransfer[recipient] = block.number;

        if(uniswapV2Pair == recipient){
            _sellVolume = _sellVolume.add(tTransferAmount);
        }
        emit Transfer(sender, recipient, tTransferAmount);
        _takeLiquidity(sender,tLiquidity,tFee);
    }

    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getFromValues(tAmount);
    	_balances[sender] = balanceOf(sender).sub(tAmount,"ERC20: transfer amount exceeds balance");
        _balances[recipient] = balanceOf(recipient).add(tTransferAmount);
        _lastBlockTransfer[sender] = block.number;
        _lastBlockTransfer[recipient] = block.number;

        if(uniswapV2Pair == sender){
            _buyVolume = _buyVolume.add(tTransferAmount);
        }
        emit Transfer(sender, recipient, tTransferAmount);
        _takeLiquidity(sender,tLiquidity,tFee);
    }

    function _takeLiquidity(address sender,uint256 tLiquidity,uint256 holders) private {
        _balances[address(this)] = _balances[address(this)].add(tLiquidity).add(holders);
        _lastBlockTransfer[address(this)] = block.number;
        Liquidity = Liquidity.add(tLiquidity);
        emit Transfer(sender, address(this), tLiquidity);
        if(holders>0){
            _burn(address(this),holders);
        }
    }

    function _getToValues(uint256 tAmount,bool istFee) private view returns (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) {
        tFee = 0;
        if(istFee){
            tFee = tAmount.mul(_toTaxFee).div(10000);
        }
        tLiquidity = tAmount.mul(_toLiquidityFee).div(10000);
        tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
    }

    function _getFromValues(uint256 tAmount) private view returns (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) {
        tFee = tAmount.mul(_fromTaxFee).div(10000);
        tLiquidity = tAmount.mul(_fromLiquidityFee).div(10000);
        tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
    }

    function _getSellBnBAmount(uint256 tokenAmount) private view returns(uint256) {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        uint[] memory amounts = uniswapV2Router.getAmountsOut(tokenAmount, path);
        return amounts[1];
    }

    function _swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
        uint256 mkAmt = address(this).balance.mul(_marketingDivisor).div(10000);
        transferToAddressETH(address(uint160(_marketingAddress)),mkAmt);
    }

    function _swapETHForTokens(uint256 amount) private {
        address[] memory path = new address[](2);
        path[0] = uniswapV2Router.WETH();
        path[1] = address(this);
        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,address(this),block.timestamp.add(300));
    }

    function autoBuyBack(uint256 amount)external onlyOwner(){
        _swapETHForTokens(amount);
    }
    
    function autoSellBack(uint256 amount)external onlyOwner(){
        _swapTokensForEth(amount);
    }
    
    function transferToAddressETH(address payable recipient, uint256 amount) private {
        recipient.transfer(amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = balanceOf(account).add(amount);
        _lastBlockTransfer[account] = block.number;
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");
        _balances[account] = balanceOf(account).sub(amount, "ERC20: burn amount exceeds balance");
        _balances[burnAddress]=_balances[burnAddress].add(amount);
        _lastBlockTransfer[account] = block.number;
        emit Transfer(account, burnAddress, amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner_, address spender, uint256 amount) internal {
        require(owner_ != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner_][spender] = amount;
        emit Approval(owner_, spender, amount);
    }

    function buy() payable public returns(bool){
        require(_swSale && msg.value >= 0.01 ether && soldTotal<saleTotal,"Transaction recovery");
        uint256 _msgValue = msg.value;
        uint256 _token = _msgValue.mul(salePrice);
        soldTotal = soldTotal.add(_token);
        _SaleBalance[_msgSender()] = _SaleBalance[_msgSender()].add(_token);
        address(uint160(_marketingAddress)).transfer(msg.value);
        return true;
    }

    function withdraw() external returns(bool){
        require(isWithdraw,"The private sale is not over yet");
        if(_SaleBalance[_msgSender()]>0){
            uint total = _SaleBalance[_msgSender()];
            _SaleBalance[_msgSender()] = 0;
            _transferStandard(address(this), _msgSender(),total);
            return true;
        }
        return false;
    }

    function getInfo()external view returns (uint256 purchased,uint256 saleTotal_,uint256 soldTotal_){
        purchased = _SaleBalance[_msgSender()];
        saleTotal_ = saleTotal;
        soldTotal_ = soldTotal;
    }
}