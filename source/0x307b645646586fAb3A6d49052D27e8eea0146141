{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IPancakeSwapFactory.sol":{"content":"/**\r\nThis is Interface of PancakeSwap Factory as The Main Contract Of\r\n\"Karei Neko.sol\" required to trigger \"createpair\" for Creating Liquidity Pair\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}"},"IPancakeSwapRouter.sol":{"content":"/**\r\nThis is Interface of PancakeSwap Router V2 as \"Karei Neko.sol required to Trigger \r\n\"swapExactTokensForETHSupportingFeeOnTransferTokens\" function and \"addLiquidityETH\" to collect BNB for liquidity\r\nand marketing also adding more liquidity.\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.2;\r\n\r\ninterface PancakeSwapRouterV2 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"Karei Neko.sol":{"content":"/**\r\n\r\n██╗░░██╗██╗██████╗░███████╗██╗███╗░░██╗███████╗██╗░░██╗░█████╗░\r\n██║░██╔╝██║██╔══██╗██╔════╝██║████╗░██║██╔════╝██║░██╔╝██╔══██╗\r\n█████═╝░██║██████╔╝█████╗░░██║██╔██╗██║█████╗░░█████═╝░██║░░██║\r\n██╔═██╗░██║██╔══██╗██╔══╝░░██║██║╚████║██╔══╝░░██╔═██╗░██║░░██║\r\n██║░╚██╗██║██║░░██║███████╗██║██║░╚███║███████╗██║░╚██╗╚█████╔╝\r\n╚═╝░░╚═╝╚═╝╚═╝░░╚═╝╚══════╝╚═╝╚═╝░░╚══╝╚══════╝╚═╝░░╚═╝░╚════╝░\r\nWebsite : https://kireineko.com\r\nTelegram : https://t.me/KireiNekoBSC\r\n\r\nDid you miss Catscoin and Nekocoin?\r\nLet me introduce to you reliable meme token with 100.000x potential!!!.\r\n\r\nKirei Neko - $KIREI\r\n- Low Fees\r\n- LP Burn\r\n- Active Dev\r\n- Contract 100/100 Safe Score\r\n- Ownership Renounced\r\n- No Fraud or Hidden Fees\r\n\r\nTokenomics :\r\n- Max Wallet : 1% (100.000 $KIREI)\r\n- Max Buy/Sell : 1% (100.000 $KIREI)\r\n- Buy Fees : 3% Marketing, 1% Liquidity (4% Total)\r\n- Sell Fees : 3% Marketing, 1% Liquidity (4% Total)\r\n- Slippage Buy/Sell: 4% - 5% for Best\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IBEP20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./IPancakeSwapFactory.sol\";\r\nimport \"./IPancakeSwapRouter.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract KireiNeko is Context, IBEP20, Ownable {\r\n    mapping(address =\u003e uint256) private _rOwned;\r\n    mapping(address =\u003e uint256) private _tOwned;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e bool) private _isExcludedFromFee;\r\n    mapping(address =\u003e bool) private _isExcluded;\r\n    mapping(address =\u003e bool) private _isExcludedFromMaxWallet;\r\n    address[] private _excluded;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _tTotal = 10_000_000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 public maxTxAmountBuy = _tTotal / 100; // 1% of supply\r\n    uint256 public maxTxAmountSell = _tTotal / 100; // 1% of supply\r\n    uint256 public maxWalletAmount = _tTotal / 100; // 1% of supply\r\n\r\n    address payable public marketingAddress;\r\n    address public liquidityReceiver;\r\n\r\n    mapping(address =\u003e bool) public isAutomatedMarketMakerPair;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    bool private inSwapAndLiquify;\r\n\r\n    PancakeSwapRouterV2 public PancakeSwapV2Router;\r\n    address public uniswapPair;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    uint256 public numTokensSellToAddToLiquidity = _tTotal / 1000;\r\n\r\n    struct feeRatesStruct {\r\n        uint8 rfi;\r\n        uint8 marketing;\r\n        uint8 lp;\r\n        uint8 toSwap;\r\n    }\r\n\r\n    feeRatesStruct public buyRates =\r\n        feeRatesStruct({\r\n            rfi: 0, // 0 RFI rate, in %\r\n            marketing: 3, // marketing team fee in %\r\n            lp: 1, // lp rate in %\r\n            toSwap: 4 // marketing + lp\r\n        });\r\n\r\n    feeRatesStruct public sellRates =\r\n        feeRatesStruct({\r\n            rfi: 0, // 0 RFI rate, in %\r\n            marketing: 3, // marketing team fee in %\r\n            lp: 1, // lp rate in %\r\n            toSwap: 4 // marketing + lp\r\n        });\r\n\r\n    feeRatesStruct private appliedRates = buyRates;\r\n\r\n    struct TotFeesPaidStruct {\r\n        uint256 rfi;\r\n        uint256 toSwap;\r\n    }\r\n    TotFeesPaidStruct public totFeesPaid;\r\n\r\n    struct valuesFromGetValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rRfi;\r\n        uint256 rToSwap;\r\n        uint256 tTransferAmount;\r\n        uint256 tRfi;\r\n        uint256 tToSwap;\r\n    }\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ETHReceived,\r\n        uint256 tokensIntotoSwap\r\n    );\r\n    event LiquidityAdded(uint256 tokenAmount, uint256 ETHAmount);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event BlacklistedUser(address botAddress, bool indexed value);\r\n    event MaxWalletAmountUpdated(uint256 amount);\r\n    event ExcludeFromMaxWallet(address account, bool indexed isExcluded);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(string memory Name, string memory Symbol, address marketingWallet, address LiquidityWallet) {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n\r\n        PancakeSwapRouterV2 _PancakeSwapV2Router = PancakeSwapRouterV2(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        uniswapPair = IUniswapV2Factory(_PancakeSwapV2Router.factory()).createPair(address(this), _PancakeSwapV2Router.WETH());\r\n        isAutomatedMarketMakerPair[uniswapPair] = true;\r\n        emit SetAutomatedMarketMakerPair(uniswapPair, true);\r\n        PancakeSwapV2Router = _PancakeSwapV2Router;\r\n        _rOwned[owner()] = _rTotal;\r\n        \r\n        marketingAddress = payable(marketingWallet);\r\n        liquidityReceiver = LiquidityWallet;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[liquidityReceiver] = true;\r\n        _isExcludedFromFee[marketingAddress] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _isExcludedFromMaxWallet[owner()] = true;\r\n        _isExcludedFromMaxWallet[liquidityReceiver] = true;\r\n        _isExcludedFromMaxWallet[marketingAddress] = true;\r\n        _isExcludedFromMaxWallet[address(this)] = true;\r\n\r\n        _isExcludedFromMaxWallet[uniswapPair] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    //std ERC20:\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    //override ERC20:\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance \u003e= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance \u003e= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount \u003c= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    //No current rfi - Tiered Rewarding Feature Applied at APP Launch\r\n    function excludeFromReward(address account) external onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] \u003e 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function excludeMultipleAccountsFromMaxWallet(\r\n        address[] calldata accounts,\r\n        bool excluded\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i \u003c accounts.length; i++) {\r\n            require(\r\n                _isExcludedFromMaxWallet[accounts[i]] != excluded,\r\n                \"_isExcludedFromMaxWallet already set to that value for one wallet\"\r\n            );\r\n            _isExcludedFromMaxWallet[accounts[i]] = excluded;\r\n            emit ExcludeFromMaxWallet(accounts[i], excluded);\r\n        }\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isExcludedFromMaxWallet(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromMaxWallet[account];\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    //  @marketing receive ETH from PancakeSwapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal -= rRfi;\r\n        totFeesPaid.rfi += tRfi;\r\n    }\r\n\r\n    function _takeToSwap(uint256 rToSwap, uint256 tToSwap) private {\r\n        _rOwned[address(this)] += rToSwap;\r\n        if (_isExcluded[address(this)]) _tOwned[address(this)] += tToSwap;\r\n        totFeesPaid.toSwap += tToSwap;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee)\r\n        private\r\n        view\r\n        returns (valuesFromGetValues memory to_return)\r\n    {\r\n        to_return = _getTValues(tAmount, takeFee);\r\n        (\r\n            to_return.rAmount,\r\n            to_return.rTransferAmount,\r\n            to_return.rRfi,\r\n            to_return.rToSwap\r\n        ) = _getRValues(to_return, tAmount, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee)\r\n        private\r\n        view\r\n        returns (valuesFromGetValues memory s)\r\n    {\r\n        if (!takeFee) {\r\n            s.tTransferAmount = tAmount;\r\n            return s;\r\n        }\r\n        s.tRfi = (tAmount * appliedRates.rfi) / 100;\r\n        s.tToSwap = (tAmount * appliedRates.toSwap) / 100;\r\n        s.tTransferAmount = tAmount - s.tRfi - s.tToSwap;\r\n        return s;\r\n    }\r\n\r\n    function _getRValues(\r\n        valuesFromGetValues memory s,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rRfi,\r\n            uint256 rToSwap\r\n        )\r\n    {\r\n        rAmount = tAmount * currentRate;\r\n\r\n        if (!takeFee) {\r\n            return (rAmount, rAmount, 0, 0);\r\n        }\r\n\r\n        rRfi = s.tRfi * currentRate;\r\n        rToSwap = s.tToSwap * currentRate;\r\n        rTransferAmount = rAmount - rRfi - rToSwap;\r\n        return (rAmount, rTransferAmount, rRfi, rToSwap);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] \u003e rSupply ||\r\n                _tOwned[_excluded[i]] \u003e tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply -= _rOwned[_excluded[i]];\r\n            tSupply -= _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply \u003c _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        require(\r\n            amount \u003c= balanceOf(from),\r\n            \"You are trying to transfer more than your balance\"\r\n        );\r\n        bool takeFee = !(_isExcludedFromFee[from] || _isExcludedFromFee[to]);\r\n\r\n        if (takeFee) {\r\n            if (isAutomatedMarketMakerPair[from]) {\r\n                appliedRates = buyRates;\r\n                require(\r\n                    amount \u003c= maxTxAmountBuy,\r\n                    \"amount must be \u003c= maxTxAmountBuy\"\r\n                );\r\n            } else {\r\n                appliedRates = sellRates;\r\n                require(\r\n                    amount \u003c= maxTxAmountSell,\r\n                    \"amount must be \u003c= maxTxAmountSell\"\r\n                );\r\n            }\r\n        }\r\n\r\n        if (\r\n            balanceOf(address(this)) \u003e= numTokensSellToAddToLiquidity \u0026\u0026\r\n            !inSwapAndLiquify \u0026\u0026\r\n            !isAutomatedMarketMakerPair[from] \u0026\u0026\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            //add liquidity\r\n            swapAndLiquify(numTokensSellToAddToLiquidity);\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\r\n\r\n        if (_isExcluded[sender]) {\r\n            _tOwned[sender] -= tAmount;\r\n        }\r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] += s.tTransferAmount;\r\n        }\r\n\r\n        _rOwned[sender] -= s.rAmount;\r\n        _rOwned[recipient] += s.rTransferAmount;\r\n        if (takeFee) {\r\n            _reflectRfi(s.rRfi, s.tRfi);\r\n            _takeToSwap(s.rToSwap, s.tToSwap);\r\n            emit Transfer(sender, address(this), s.tToSwap);\r\n        }\r\n        require(\r\n            _isExcludedFromMaxWallet[recipient] ||\r\n                balanceOf(recipient) \u003c= maxWalletAmount,\r\n            \"Recipient cannot hold more than maxWalletAmount\"\r\n        );\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 denominator = appliedRates.toSwap * 2;\r\n        uint256 tokensToAddLiquidityWith = (contractTokenBalance *\r\n            appliedRates.lp) / denominator;\r\n        uint256 toSwap = contractTokenBalance - tokensToAddLiquidityWith;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForETH(toSwap);\r\n\r\n        uint256 deltaBalance = address(this).balance - initialBalance;\r\n        uint256 ETHToAddLiquidityWith = (deltaBalance * appliedRates.lp) /\r\n            (denominator - appliedRates.lp);\r\n\r\n        // add liquidity\r\n        addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith);\r\n\r\n        // we give the remaining tax to marketing\r\n        uint256 remainingBalance = address(this).balance;\r\n        uint256 marketingFee = (remainingBalance * appliedRates.marketing) /\r\n            (denominator - appliedRates.marketing);\r\n        marketingAddress.transfer(marketingFee);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the pair path of token\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = PancakeSwapV2Router.WETH();\r\n\r\n        if (allowance(address(this), address(PancakeSwapV2Router)) \u003c tokenAmount) {\r\n            _approve(address(this), address(PancakeSwapV2Router), ~uint256(0));\r\n        }\r\n\r\n        // make the swap\r\n        PancakeSwapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        // add the liquidity\r\n        PancakeSwapV2Router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityReceiver,\r\n            block.timestamp\r\n        );\r\n        emit LiquidityAdded(tokenAmount, ETHAmount);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address _pair, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            isAutomatedMarketMakerPair[_pair] != value,\r\n            \"Automated market maker pair is already set to that value\"\r\n        );\r\n        isAutomatedMarketMakerPair[_pair] = value;\r\n        if (value) {\r\n            _isExcludedFromMaxWallet[_pair] = true;\r\n            emit ExcludeFromMaxWallet(_pair, value);\r\n        }\r\n        emit SetAutomatedMarketMakerPair(_pair, value);\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiq(uint256 amountTokens)\r\n        external\r\n        onlyOwner\r\n    {\r\n        numTokensSellToAddToLiquidity = amountTokens * 10**_decimals;\r\n    }\r\n\r\n    function setmarketingAddress(address payable _marketingAddress) external onlyOwner {\r\n        marketingAddress = _marketingAddress;\r\n    }\r\n\r\n    function manualSwapAndAddToLiq() external onlyOwner {\r\n        swapAndLiquify(balanceOf(address(this)));\r\n    }\r\n\r\n    function excludeFromMaxWallet(address account, bool excluded)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _isExcludedFromMaxWallet[account] != excluded,\r\n            \"_isExcludedFromMaxWallet already set to that value\"\r\n        );\r\n        _isExcludedFromMaxWallet[account] = excluded;\r\n\r\n        emit ExcludeFromMaxWallet(account, excluded);\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(msg.sender, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;        \r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c \u003c a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b \u003e a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"}}