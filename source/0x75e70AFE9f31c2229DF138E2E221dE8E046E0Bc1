//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transferFrom(address owner, address to, uint amount) external returns(bool);
}

contract PEPEReferralContest {
    address public owner;

    constructor(){
        owner = msg.sender;
    }
    
    event Rewarded(address indexed winner, uint amount);

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function rewardReferralWinners(address[] memory winners, uint[] memory rewards, address _tokenContract) public onlyOwner {
        require(winners.length == rewards.length, "unmatched reward and winners");

        address winner;
        uint amount;
        for (uint index=0; index < winners.length; index++) {
            winner = winners[index];
            amount = rewards[index];

            IERC20(_tokenContract).transferFrom(owner, winner, amount);
            emit Rewarded(winner, amount);
        }
    }
}