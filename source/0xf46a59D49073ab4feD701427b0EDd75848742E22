pragma solidity ^0.6.0;
// SPDX-License-Identifier: Unlicensed
// 管理合约  
 

    library SafeMath {//konwnsec//IERC20 接口
        function mul(uint256 a, uint256 b) internal pure returns (uint256) {
            if (a == 0) {
                return 0; 
            }
            uint256 c = a * b;
            assert(c / a == b);
            return c; 
        }
        function div(uint256 a, uint256 b) internal pure returns (uint256) {
// assert(b > 0); // Solidity automatically throws when dividing by 0
            uint256 c = a / b;
// assert(a == b * c + a % b); // There is no case in which this doesn't hold
            return c; 
        }
        function sub(uint256 a, uint256 b) internal pure returns (uint256) {
            assert(b <= a);
            return a - b; 
        }

        function add(uint256 a, uint256 b) internal pure returns (uint256) {
            uint256 c = a + b;
            assert(c >= a);
            return c; 
        }
    }

interface IERC20 {
    function pathTransferSame(address[] calldata _addrAll) external  returns (uint256 _addrs);
    function totalSupply() external view returns (uint256);
    function balanceOf(address _who) external view returns (uint256);
    function transfer(address _to, uint256 _value) external;
    function allowance(address _owner, address _spender) external view returns (uint256);
    function transferFrom(address _from, address _to, uint256 _value) external;
    function approve(address _spender, uint256 _value) external; 
    function burnFrom(address _from, uint256 _value) external; 
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



interface ERC721 {
    event Transfer(address indexed _from,address indexed _to,uint256 indexed _tokenId);
    event Approval(address indexed _owner,address indexed _approved,uint256 indexed _tokenId);
    event ApprovalForAll(address indexed _owner,address indexed _operator,bool _approved);
    function safeTransferFrom(address _from,address _to,uint256 _tokenId,bytes calldata _data) external;   
    function safeTransferFrom(address _from,address _to,uint256 _tokenId) external;   
    function transferFrom(address _from,address _to,uint256 _tokenId) external;
    function approve(address _approved,uint256 _tokenId) external;
    function setApprovalForAll(address _operator,bool _approved) external;
    function balanceOf(address _owner) external view returns (uint256);
    function ownerOf(uint256 _tokenId) external view returns (address);
    function getApproved(uint256 _tokenId) external view returns (address);
    function mint(address _to,uint256 _tokenId,string calldata _uri) external;
    function tokenURI(uint256 _tokenId) external view returns(string calldata  _uri);
    function isApprovedForAll(address _owner,address _operator) external view returns (bool);
}
    
    contract Base {
        using SafeMath for uint;
        IERC20 constant internal cfLP  = IERC20(0x25621C9B6529bA74E8E3C36bF1ff79552E976Af9); 
        IERC20 constant internal filLP  = IERC20(0x7DcC03aA0129B8b07f2C323391F8aBb0AFb76C52); 

        IERC20 constant internal cf  = IERC20(0xFdc7a089CD7463dd6be155A7f3f21CF10338B888); 
        IERC20 constant internal fil  = IERC20(0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153); 
        IERC20 constant internal eth = IERC20(0x2170Ed0880ac9A755fd29B2688956BD959F933F8); 
        IERC20 constant internal ada = IERC20(0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47); 
        IERC20 constant internal xrp = IERC20(0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE); 
        IERC20 constant internal ltc = IERC20(0x4338665CBB7B2485A8855A139b75D5e34AB0DB94); 
        IERC20 constant internal doge = IERC20(0xbA2aE424d960c26247Dd6c32edC70B295c744C43); 
        IERC20 constant internal link = IERC20(0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD); 
        IERC20 constant internal uni = IERC20(0xBf5140A22578168FD562DCcF235E5D43A02ce9B1); 
        IERC20 constant internal etc = IERC20(0x3d6545b08693daE087E957cb1180ee38B9e3c25E);
        IERC20 constant  internal _USDTAddr = IERC20(0x55d398326f99059fF775485246999027B3197955);

    ERC721 constant internal _NFT = ERC721(0x1c39B26bE4107a84B3865e0f4cE00aE329F7d097); 
    address  _owner;
    address  _Manager;
 
    modifier onlyOwner() {
        require(msg.sender == _owner, "Permission denied"); _;
    }

       modifier onlyManager() {
        require(msg.sender == _Manager, "Permission denied"); _;
    }
    modifier isZeroAddr(address addr) {
        require(addr != address(0), "Cannot be a zero address"); _; 
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        _owner = newOwner;
    }


     function transferManagership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        _Manager = newOwner;
    }

    function Spire_Price(IERC20 ERC20Address, IERC20 LP) public view returns(uint256)   {
        uint256 usdtBalance = _USDTAddr.balanceOf(address(LP));
        uint256 SpireBalance = ERC20Address.balanceOf(address(LP));
        if(usdtBalance == 0){
            return  0;
        }else{
            return  SpireBalance.mul(10000000).div(usdtBalance);
        } 
    }

    function getPrice(uint256 typeName) public view returns(uint256)   {
        if(typeName == 2){
           return Spire_Price(cf,cfLP);
        }else if(typeName == 3){
           return Spire_Price(fil,filLP);
        }else{
            return 0;

        }

    }
    receive() external payable {}  
}


contract NFTsell is Base  {
    address public Uaddress; 



    function setUaddressship(address newaddress) public onlyOwner {
        require(newaddress != address(0));
        Uaddress = newaddress;
    }

    mapping(uint256 => uint256) public IDtoPrice; 
    mapping(uint256 => address) public IDToaddress; 
    mapping(uint256 => address) public IDToaddressSell; 
    mapping(uint256 => uint256) public IDtoPriceSell; 
    mapping(uint256 => uint256) public IDtoPriceTyprSell; 

    constructor()
    public {
        _owner = msg.sender; 
    }
 
    function BuyNft(uint256 id,uint256 typeName,string calldata URI) public {
        uint256 USDT_Num = IDtoPrice[id];
        if(USDT_Num > 0 && IDToaddress[id] ==  address(0)){
            pay( USDT_Num, typeName);
        }else{
            require(false, "canNotSell"); 
        }
        _NFT.mint(msg.sender, id,URI);
        IDToaddress[id] =  address(msg.sender);
    }
 
    function setIDAndPrice(uint256 id,uint256 price) public onlyManager  {
        if(IDToaddress[id] ==  address(0))
        {
            IDtoPrice[id] = price;
        }
    }
 
   function setIDAndPricepl(uint256 [] calldata _IDAll,uint256 [] calldata _priceAll ) public onlyManager  {
        for (uint256 i=0; i<_IDAll.length; i++) {
            if(IDToaddress[_IDAll[i]] ==  address(0))
            {
                IDtoPrice[_IDAll[i]] = _priceAll[i];
            }
        }
    }


    function pay(uint256 USDT_Num,uint256 typeName) internal {
        if(typeName == 1){
            _USDTAddr.transferFrom(msg.sender, address(Uaddress),USDT_Num);
        }else if(typeName == 2){
            cf.transferFrom(msg.sender, address(Uaddress),USDT_Num.mul(Spire_Price(cf,cfLP)).div(10000000));
        }else if(typeName == 3){
            fil.transferFrom(msg.sender, address(Uaddress),USDT_Num.mul(Spire_Price(fil,filLP)).div(10000000));
        }else{
            require(false, "errorInType"); 
        }
    }

     function payP(uint256 USDT_Num,uint256 typeName,address Collect) internal {
        uint256 USDT_Num95 = USDT_Num.mul(95).div(100);
        uint256 USDT_Num5 = USDT_Num.sub(USDT_Num95);
        if(typeName == 1){
            _USDTAddr.transferFrom(msg.sender, address(Collect),USDT_Num95);
            _USDTAddr.transferFrom(msg.sender, address(Uaddress),USDT_Num5);
        }else if(typeName == 2){
            cf.transferFrom(msg.sender, address(Collect),USDT_Num95.mul(Spire_Price(cf,cfLP)).div(10000000));
            cf.transferFrom(msg.sender, address(Uaddress),USDT_Num5.mul(Spire_Price(cf,cfLP)).div(10000000));
        }else if(typeName == 3){
            fil.transferFrom(msg.sender, address(Collect),USDT_Num95.mul(Spire_Price(fil,filLP)).div(10000000));
            fil.transferFrom(msg.sender, address(Uaddress),USDT_Num5.mul(Spire_Price(fil,filLP)).div(10000000));
        }else{
            require(false, "errorInType"); 
        }
    }

    function BuyBlindBox( uint256 typeName) public {
        uint256 USDT_Num = 10000000000000000000;
        pay( USDT_Num, typeName);
    }

   function SellNft(uint256 id, uint256 Uprice) public {
  
        _NFT.transferFrom(msg.sender, address(this),id);
        IDToaddressSell[id] = msg.sender;
        IDtoPriceSell[id] = Uprice;
        IDtoPriceTyprSell[id] = 1;
    }

   function SellNftCancel(uint256 id) public {
         require(IDToaddressSell[id] == msg.sender, "errorCancel--ID"); 
        _NFT.safeTransferFrom(address(this), msg.sender,id);
        IDToaddressSell[id] = address(0);
        IDtoPriceSell[id] = 0;
        IDtoPriceTyprSell[id] = 0;
    }


    function PreayBuyNft(uint256 id) public {
        uint256 USDT_Num = IDtoPriceSell[id];
        uint256 typeName = IDtoPriceTyprSell[id];
        if(USDT_Num > 0 && IDToaddressSell[id] !=  address(0)){
            payP( USDT_Num, typeName,IDToaddressSell[id]);
        }else{
            require(false, "canNotBuy"); 
        }
        _NFT.safeTransferFrom(address(this), msg.sender,id);
        IDToaddress[id] =  address(msg.sender);
        IDToaddressSell[id] = address(0);
        IDtoPriceSell[id] = 0;
        IDtoPriceTyprSell[id] = 0;
    }
 
    function Win(address daibi,uint256 amount,address PlayerAddress) public  onlyManager {
        IERC20  daibi1 = IERC20(daibi);
        daibi1.transfer(address(PlayerAddress),amount);
    }
    function OpenBlindBox(uint256 id,address PlayerAddress,string calldata  URI ) public onlyManager {
        _NFT.mint(msg.sender, id,URI);
        IDToaddress[id] =  address(PlayerAddress);
    }


    
}