pragma solidity ^0.8.0;

contract OpenAILASA {
    string public name = "Open AI LASA";
    string public symbol = "LASA";
    uint256 public totalSupply = 1200000;
    uint256 public decimals = 18;
    uint256 public minPurchase = 100000; // 0.0000001 USDT
    uint256 public price = 2; // 0.000000002 USDT
    address public admin = 0xCA0D0bebd68Fd7192378D563fc85a30dE112C475;

    mapping(address => uint256) public balanceOf;
    mapping(address => bool) public isAdmin;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);

    constructor() {
        balanceOf[msg.sender] = totalSupply * 10 ** decimals;
        isAdmin[admin] = true;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_value > 0, "Value must be greater than zero");
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function buy() public payable returns (bool success) {
        require(msg.value >= minPurchase, "Minimum purchase amount not met");
        uint256 amount = msg.value / price;

        require(amount <= balanceOf[admin], "Insufficient token supply");

        balanceOf[admin] -= amount;
        balanceOf[msg.sender] += amount;

        emit Transfer(admin, msg.sender, amount);
        return true;
    }

    function burn(uint256 _value) public onlyAdmin returns (bool success) {
        require(_value > 0, "Value must be greater than zero");
        require(balanceOf[admin] >= _value, "Insufficient balance");

        balanceOf[admin] -= _value;
        totalSupply -= _value;

        emit Burn(admin, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value > 0, "Value must be greater than zero");
        require(balanceOf[_from] >= _value, "Insufficient balance");

        uint256 fee = (_value * 50) / 100;
        uint256 amount = _value - fee;

        balanceOf[_from] -= _value;
        balanceOf[_to] += amount;
        balanceOf[admin] += fee;

        emit Transfer(_from, _to, amount);
        emit Transfer(_from, admin, fee);
        return true;
    }

    function addTokens(uint256 _value) public onlyAdmin returns (bool success) {
        require(_value > 0, "Value must be greater than zero");

        totalSupply += _value;
        balanceOf[admin] += _value;

        return true;
    }
}