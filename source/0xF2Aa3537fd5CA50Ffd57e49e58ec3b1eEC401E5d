// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract Anjing {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 public minLimit;
    uint256 public lockTime;
    address public owner;
    mapping(address => uint256) public balanceOf;
    mapping(address => uint256) public lockUntil;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(
        string memory tokenName,
        string memory tokenSymbol,
        uint8 decimalUnits,
        uint256 initialSupply,
        uint256 minimumLimit,
        uint256 lockDuration
    ) {
        name = tokenName;
        symbol = tokenSymbol;
        decimals = decimalUnits;
        totalSupply = initialSupply * 10**uint256(decimals);
        minLimit = minimumLimit * 10**uint256(decimals);
        lockTime = lockDuration;
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action");
        _;
    }

    function transfer(address to, uint256 value) public {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        require(value >= minLimit, "Transfer value is below the minimum limit");
        require(lockUntil[msg.sender] <= block.timestamp, "Your tokens are currently locked");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;

        emit Transfer(msg.sender, to, value);
    }

    function burn(uint256 value) public {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        balanceOf[msg.sender] -= value;
        totalSupply -= value;

        emit Burn(msg.sender, value);
    }

    function lockTokens(address holder) public onlyOwner {
        lockUntil[holder] = block.timestamp + lockTime;
    }

    function unlockTokens(address holder) public onlyOwner {
        lockUntil[holder] = 0;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(owner, address(0));
        owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Invalid new owner address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}