{"IERC20.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Owend.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\ncontract Owend {\r\n    address public _owner;\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n    }\r\n   \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n}"},"Spark.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\npragma experimental ABIEncoderV2;\r\n/**/\r\nimport \"../IERC20.sol\";\r\nimport \"../Owend.sol\";\r\ncontract Spark is IERC20, Owend{\r\n    \r\n    \r\n    struct User{\r\n        address userAddress;\r\n        address recommendAddress;\r\n        //��Ч�Ƽ��û�\r\n        address[] effectiveAddresss;\r\n       }\r\n       \r\n     \r\n     address [] private lockAddress;\r\n     uint [] private lockTime;\r\n     uint256 [] private lockAmount;\r\n        \r\n    \r\n    address[] private pledgeAddresss;\r\n\r\n\r\n    mapping(address=\u003ebool) public isEffective;\r\n    mapping (address =\u003e uint256) public whiteList;\r\n    mapping(address =\u003e address) public referrals;\r\n    address[] private referralsKey;\r\n    mapping(address =\u003e User) private users;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    /**\r\n     * ��ʵ��� \r\n     **/\r\n    mapping (address =\u003e uint256) public reallyBalanceOf;\r\n    /**\r\n     * ���ֽ��\r\n     **/\r\n    mapping (address =\u003e uint256) public lockBalanceOf;\r\n    /**\r\n     * ��Ѻ���\r\n     **/\r\n    mapping (address =\u003e uint256) public pledgeBalanceOf;\r\n    \r\n \r\n    //��Ѻ��С�������   \r\n    uint8 public pledgeMinLimit=50;\r\n    //��Ѻ����ֱ����Ч����\r\n    uint8 public minRecommends=5;\r\n    uint256 private minEffectiveAmount=10*10**18;\r\n    uint256 private _mintTotal=105000*10**18;\r\n    uint256 private mintSupplyTotal=0;\r\n    uint256 private _totalSupply=210000*10**18;\r\n    string private _name =\"Spark Token\";\r\n    string private _symbol=\"SPK\";\r\n    uint256 private _decimals = 18;\r\n    uint8 public teamNumber = 30; \r\n    address public ownerAddress;\r\n    \r\n    /**\r\n     * �ڶ���ַ \r\n     */\r\n    address public blackholeAddress = 0x0000000000000000000000000000000000000000;\r\n \r\n    /**\r\n     * ��ʶ�ߵ�ַ  \r\n     **/\r\n    address public consensusAddress=0x437ddaf5D7b8Ad48E75dc05eB86F5bb4838C528c;\r\n    /**\r\n     * �������ʽ�ص�ַ \r\n     **/\r\n    address public liquidityPoolAddress=0x9236344B0593149B55066A645cBa9FD7E632eF3c;\r\n    \r\n     /**\r\n     * �����ַ \r\n     **/\r\n    address public distributionAddress=0xbB48D50cBA410A06C8eF3Df67a3f682B4dB15a08; \r\n      /**\r\n     * ��̬������ַ \r\n     **/\r\n    address public dynamicRewardAddress=0x442c09479F3d700A75E1360aE65bDBB27C7be4F5;\r\n    /**\r\n     * ���ֵ�ַ \r\n     **/\r\n    address public pledgeAddress=0xE3d4E3354317931d812109E84f4A96Ac1b2E648b;\r\n    /**\r\n     * ��ص�ַ\r\n     **/\r\n    address public minPoolAddress=0xA3725DD1cA77504018F284F4D548c37e1c1EB774;\r\n    constructor()public{\r\n        ownerAddress=msg.sender;\r\n        whiteList[msg.sender]=1;\r\n        referrals[msg.sender]=ownerAddress;\r\n        users[ownerAddress].userAddress = ownerAddress;\r\n        users[ownerAddress].recommendAddress = address(0);\r\n        reallyBalanceOf[ownerAddress] =_totalSupply/2; \r\n        // reallyBalanceOf[blackholeAddress]=_totalSupply/2;\r\n        emit Transfer(address(0), ownerAddress,_totalSupply/2);\r\n        }\r\n    \r\n    function _transfer(address _from,address _to,uint256 _value) private{\r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_value \u003e 0, \"Transfer amount must be greater than zero\");\r\n        require(reallyBalanceOf[_from]\u003e=_value,\"Balance insufficient\");\r\n        reallyBalanceOf[_from] -= _value;\r\n        //�����߼�\r\n           if(_from==pledgeAddress){\r\n               reallyBalanceOf[_to] += (_value * 10/100);\r\n               lockBalanceOf[_to] +=   (_value * 90/100);\r\n               //������Ѻ��¼��Ϣ\r\n                lockAddress.push(_to);\r\n                lockTime.push(now);\r\n                lockAmount.push(_value);\r\n          \r\n          }else{\r\n             if(whiteList[_from]==1||whiteList[_to]==1){\r\n                    reallyBalanceOf[_to] += _value;\r\n                 }else{           \r\n                     /*��ͨ��ַ */\r\n                    uint256 amount = _value * 90/100;\r\n                    /*�Ƽ����� */\r\n                    uint256 recommendRewardAmount=_value * 5/100;\r\n                    /*��ʶ�� */\r\n                    uint256 consensusAmount=_value * 3/100;\r\n                    /*���� */\r\n                    uint256 destroyAmount=_value * 2/100;\r\n                    reallyBalanceOf[_to] += amount;\r\n                    reallyBalanceOf[consensusAddress] += consensusAmount;\r\n                    reallyBalanceOf[blackholeAddress] += destroyAmount;\r\n                    updateRecommendReward(recommendRewardAmount,_to);\r\n                    if(_mintTotal\u003e0){\r\n                       _mint(destroyAmount * 3);\r\n                    }\r\n                }\r\n        \r\n         }\r\n          updateUserInfo(_from,_to);\r\n          updateEffectiveAccount(_to);\r\n          updateEffectiveAccount(_from);\r\n          emit Transfer(_from,_to,_value);\r\n     } \r\n     \r\n    function changeOwner(address account) public onlyOwner{\r\n       _owner=account;\r\n       ownerAddress=account;\r\n    }\r\n     \r\n    function updateEffectiveAccount(address account) private{\r\n        if(pledgeBalanceOf[account]+reallyBalanceOf[account]\u003eminEffectiveAmount){\r\n            isEffective[account]=true;\r\n        }else{\r\n            isEffective[account]=false;\r\n        }\r\n    }\r\n     \r\n     function getLockRecordByAccount() view public returns(address[] memory add,uint[] memory   time,uint256 [] memory amount){\r\n         return(lockAddress,lockTime,lockAmount);\r\n     }\r\n     \r\n     /**\r\n      * �����Ƽ���ϵ\r\n      **/\r\n     function updateUserInfo(address _from,address _to) private {\r\n        User storage _users = users[_to];\r\n        User storage _user = users[_from];\r\n        if(_users.userAddress == address(0)){\r\n            _users.userAddress = _to;\r\n            users[_to] = _users;\r\n        }\r\n        if(_user.userAddress==address(0)){\r\n            _user.userAddress=_from;\r\n            users[_from]=_user;\r\n        }\r\n     }\r\n     /**\r\n      * �����Ƽ�����\r\n      **/\r\n     function updateRecommendReward(uint256 recommendRewardAmount,address _to) private{\r\n            //һ�� 60%������ 40%\r\n            uint256 oneRewardAmount = recommendRewardAmount * 60/100;\r\n            uint256 twoRewardAmount = recommendRewardAmount * 40/100;\r\n            address oneAddress=referrals[_to];\r\n            if(oneAddress==address(0)){\r\n               reallyBalanceOf[ownerAddress] += recommendRewardAmount;\r\n                return;\r\n            }\r\n            reallyBalanceOf[oneAddress] += oneRewardAmount; \r\n            address toAddress=referrals[oneAddress];\r\n            if(toAddress==address(0)){\r\n                reallyBalanceOf[ownerAddress] += twoRewardAmount;\r\n                return;\r\n            }\r\n            reallyBalanceOf[toAddress] += twoRewardAmount;\r\n         } \r\n     /**\r\n      * �����ϼ��û���Ч��ַ����\r\n      **/\r\n      function updateTopUser(address _from,address _to) private{\r\n          //������\r\n          User storage fromUser=users[_from];\r\n          //�����ߵ��Ƽ��˵�ַ\r\n          address fromUserRecommendAddress=referrals[fromUser.userAddress];\r\n          if(fromUserRecommendAddress!=address(0)){\r\n              //�����ߵ��Ƽ���\r\n            User storage recommendUser =users[fromUserRecommendAddress];\r\n            if(recommendUser.effectiveAddresss.length\u003e0){\r\n                uint index=findIndexByValue(recommendUser.effectiveAddresss,_from);\r\n                //δ�ҵ������������������\r\n                if(index==recommendUser.effectiveAddresss.length){\r\n                     recommendUser.effectiveAddresss.push(_from);\r\n                }\r\n            }else{\r\n                recommendUser.effectiveAddresss.push(_from);\r\n            }\r\n              \r\n          }\r\n          //������\r\n          User storage toUser=users[_to];\r\n          address toUserRecommendAddress=referrals[toUser.userAddress];\r\n          if(toUserRecommendAddress!=address(0)){\r\n            //�����ߵ��Ƽ���\r\n            User storage recommendUser =users[toUserRecommendAddress];    \r\n                if(recommendUser.effectiveAddresss.length\u003e0){\r\n                    uint index=findIndexByValue(recommendUser.effectiveAddresss,_to);\r\n                         //δ�ҵ������������������\r\n                    if(index==recommendUser.effectiveAddresss.length){\r\n                        recommendUser.effectiveAddresss.push(_to);\r\n                        \r\n                    }\r\n                }else{\r\n                    recommendUser.effectiveAddresss.push(_to);\r\n                \r\n                }\r\n            }\r\n      }\r\n      /**\r\n       * �ֶ�����\r\n       **/\r\n       function activiteAccount(address recommendAddress)  public returns(uint code){\r\n           if(msg.sender==recommendAddress){\r\n               return 1;\r\n           }\r\n           //���ǰ��������жϵ�ַ�Ƿ?���\r\n           if (whiteList[recommendAddress]==0){\r\n               if(referrals[recommendAddress]==address(0)){\r\n                return 1;   \r\n               }\r\n               if(referrals[recommendAddress]==msg.sender){\r\n                   return 1;\r\n               }\r\n           }\r\n           //�Լ�δ����\r\n           if(referrals[msg.sender]!=address(0)){\r\n               return 1;\r\n           }\r\n           updateUserInfo(msg.sender,recommendAddress);\r\n           referrals[msg.sender]=recommendAddress;\r\n           referralsKey.push(msg.sender);\r\n           updateTopUser(recommendAddress,msg.sender);\r\n           return 0;\r\n       }\r\n       /**\r\n        * ��ȡ�ϼ���ַ\r\n        **/\r\n       function getUpAddress(address account) view public returns(address,bool){\r\n           bool isNode=false;\r\n           if(pledgeBalanceOf[account]\u003e=pledgeMinLimit \u0026\u0026 getEffectiveAddresssSize(account)\u003e=minRecommends){\r\n            isNode=true;\r\n           }\r\n           return (referrals[account],isNode);\r\n       }\r\n        \r\n        function getEffectiveAddresssSize(address account) view public returns(uint ){\r\n            uint count=0;\r\n            User storage _user=users[account];\r\n            for (uint i=0;i\u003c_user.effectiveAddresss.length;i++){\r\n                if(isEffective[_user.effectiveAddresss[i]]){\r\n                    count++;\r\n                }\r\n            }\r\n            return count;\r\n        }\r\n        /**\r\n        * ��ȡ�¼�ֱ����Ч�û�\r\n        **/\r\n        function getEffectiveAddresss(address account) view public returns(address [] memory effectiveList){\r\n             uint count=getEffectiveAddresssSize(account);\r\n             effectiveList=new address[](count);\r\n             uint index=0;    \r\n             User storage _user=users[account];\r\n              for (uint i=0;i\u003c_user.effectiveAddresss.length;i++){\r\n                  if(isEffective[_user.effectiveAddresss[i]]){\r\n                    effectiveList[index]=_user.effectiveAddresss[i];\r\n                    index++;\r\n                  }\r\n            }\r\n            return effectiveList;\r\n        }\r\n       \r\n       \r\n      /**\r\n       * ��ȡ�Ƽ���ϵ\r\n       **/\r\n       function getReferralsByAddress()view public   returns(address[] memory referralsKeyList,address [] memory referralsList){\r\n        address [] memory values=new address[](referralsKey.length);  \r\n         for(uint i=0;i\u003creferralsKey.length;i++){\r\n             address key=referralsKey[i];\r\n             address addr=referrals[key];\r\n             values[i]=addr;\r\n         }  \r\n         return(referralsKey,values);\r\n       }\r\n       \r\n       /**\r\n        *  ��ȡ���нڵ��ַ\r\n        * \r\n        **/\r\n       function getNodeAddresss()public view returns(address [] memory nodeAddressList){\r\n        uint length=0;\r\n           for(uint i=0;i\u003cpledgeAddresss.length;i++){\r\n                if(pledgeBalanceOf[pledgeAddresss[i]]\u003e=pledgeMinLimit\u0026\u0026getEffectiveAddresssSize(pledgeAddresss[i])\u003e=minRecommends){\r\n                    length++;\r\n                  }\r\n              \r\n            }\r\n         nodeAddressList=new address[](length);\r\n         uint index=0;\r\n         for(uint i=0;i\u003cpledgeAddresss.length;i++){\r\n            if(pledgeBalanceOf[pledgeAddresss[i]]\u003e=pledgeMinLimit \u0026\u0026getEffectiveAddresssSize(pledgeAddresss[i])\u003e=minRecommends){\r\n                nodeAddressList[index]=pledgeAddresss[i];\r\n                index++;\r\n                if(index==length){\r\n                break;\r\n                }\r\n            }\r\n         }\r\n         \r\n        return nodeAddressList ;\r\n       }\r\n     function assignNodeRewardsList(address[] memory nodeList)  onlyOwner public returns(bool){\r\n         if(nodeList.length==0){\r\n             return false;\r\n         }\r\n         uint256 nodeRewards= reallyBalanceOf[consensusAddress];\r\n         if(nodeRewards==0){\r\n             return false;\r\n         }\r\n        uint256 eachReward=nodeRewards/nodeList.length;\r\n         for(uint i=0;i\u003cnodeList.length;i++){\r\n             reallyBalanceOf[nodeList[i]] += eachReward;\r\n         }\r\n        reallyBalanceOf[consensusAddress]-=nodeRewards;\r\n         return true;\r\n     }  \r\n       \r\n      \r\n     /**\r\n      *  ����ڵ㽱��\r\n      **/\r\n     function assignNodeRewards() public  onlyOwner returns(bool){    \r\n   \r\n         address [] memory tempAddress= getNodeAddresss();\r\n         if(tempAddress.length==0){\r\n             return false;\r\n         }\r\n         uint256 nodeRewards= reallyBalanceOf[consensusAddress];\r\n         if(nodeRewards==0){\r\n             return false;\r\n         }\r\n         \r\n         uint256 eachReward=nodeRewards/tempAddress.length;\r\n         for(uint i=0;i\u003ctempAddress.length;i++){\r\n             reallyBalanceOf[tempAddress[i]] += eachReward;\r\n         }\r\n         reallyBalanceOf[consensusAddress]-=nodeRewards;\r\n         return true;\r\n \r\n     }\r\n     \r\n     function setPledgeMinLimit(uint8 min) public onlyOwner returns( bool){\r\n         if(min\u003c=0){\r\n             return false;\r\n         }\r\n         pledgeMinLimit=min;\r\n         return true;\r\n     }\r\n     function setMinRecommends(uint8 min)public onlyOwner returns(bool){\r\n         minRecommends=min;\r\n         return true;\r\n     }\r\n     function setMinEffectiveAmount(uint256 min) public onlyOwner returns(bool){\r\n         minEffectiveAmount=min;\r\n         return true;\r\n     }\r\n    \r\n     /**\r\n      * ��Ѻ  \r\n      **/\r\n    function pledge(uint256 amount)  public returns(bool){\r\n      if(reallyBalanceOf[msg.sender]\u003camount){\r\n          return false;\r\n      }\r\n      reallyBalanceOf[msg.sender] -= amount;\r\n      pledgeBalanceOf[msg.sender] += amount;\r\n      uint index =findIndexByValue(pledgeAddresss,msg.sender);\r\n      if(index==pledgeAddresss.length){\r\n        pledgeAddresss.push(msg.sender);\r\n      }\r\n      updateEffectiveAccount(msg.sender);\r\n      return true;\r\n    }\r\n    /**\r\n     * ��Ѻ�ͷ� \r\n     **/\r\n    function pledgeRelease(uint256 amount)  public returns(bool){\r\n        if(pledgeBalanceOf[msg.sender]\u003camount){\r\n            return false;\r\n        }\r\n        pledgeBalanceOf[msg.sender] -= amount;\r\n        reallyBalanceOf[msg.sender] += amount;\r\n        updateEffectiveAccount(msg.sender);\r\n        return true;\r\n     }\r\n     \r\n         /**\r\n           * �����߼� \r\n           **/ \r\n        function lockAccount(address account,uint256 amount) public onlyOwner returns(bool){\r\n            if(reallyBalanceOf[pledgeAddress]\u003camount){\r\n                return false;\r\n            }\r\n            if(account==address(0)){\r\n                return false;\r\n            }\r\n            reallyBalanceOf[pledgeAddress] -= amount;\r\n            lockBalanceOf[account] += amount;\r\n       \r\n            return true;\r\n          }   \r\n          /**\r\n           * �����ͷ� ��Լӵ���ߵ���\r\n           **/\r\n        function lockRelease(address account,uint256 amount)public onlyOwner returns(bool){\r\n             if(lockBalanceOf[account]\u003camount){\r\n                 return false;\r\n             }\r\n             if(account==address(0)){\r\n                 return false;\r\n             }\r\n             lockBalanceOf[account] -= amount;\r\n             reallyBalanceOf[account] += amount;\r\n \r\n             return true;\r\n             \r\n         }\r\n  \r\n     \r\n     \r\n    function pledgeReleaseUseManager(address account,uint256 amount) public onlyOwner{\r\n        require(pledgeBalanceOf[account]\u003e=amount,\"Balance insufficient\");\r\n        pledgeBalanceOf[account] -= amount;\r\n        reallyBalanceOf[account] += amount;\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * ����ֵѰ���±꣬�ҵ��?��±꣬δ�ҵ��?����鳤��\r\n     **/\r\n    function findIndexByValue(address[] storage list,address account) private view returns(uint index){\r\n       for (uint i = 0; i\u003clist.length; i++){\r\n           if(account==list[i]){\r\n            return i;   \r\n           }\r\n        }\r\n        return list.length;\r\n    }\r\n   \r\n   \r\n    //�ݹ�֪ͨ��һ��\r\n    function updateRecommendNumber(address _recommendAddress,uint number) private{\r\n        User storage recommendUser = users[_recommendAddress];\r\n        if(recommendUser.userAddress != address(0) \u0026\u0026 number \u003c= teamNumber){\r\n       \r\n            number+=1;\r\n            updateRecommendNumber(recommendUser.recommendAddress,number);\r\n        }\r\n    }\r\n    \r\n    function addWhite(address account) public onlyOwner returns(bool){\r\n        whiteList[account]=1;\r\n        referrals[account]=ownerAddress;\r\n        return true;\r\n    }\r\n    \r\n    function removeWhite(address account) public onlyOwner returns(bool){\r\n        whiteList[account]=0;\r\n        return true;\r\n    }\r\n    \r\n      \r\n    /*���ٷ�����*/\r\n    function _burn( uint256 amount)  public onlyOwner returns (bool) {\r\n        require(reallyBalanceOf[msg.sender]\u003e=amount,\"Balance insufficient\");\r\n        reallyBalanceOf[msg.sender] -=  amount;\r\n        _totalSupply -=  amount;\r\n      \r\n        return true;\r\n    }\r\n    /*���ӷ��� */\r\n   function _mint(uint256 amount) internal {\r\n        require(ownerAddress != address(0), \"BEP20: mint to the zero address\");\r\n        mintSupplyTotal += amount;\r\n        /*20%�����������ʽ�� */\r\n        uint256 liquidityPoolAmount=amount * 20/100;\r\n        /*30%��������гֱ��û�*/\r\n        uint256 distributionAmount=amount * 30/100;\r\n        /*50%���붯̬����*/\r\n        uint256 dynamicRewardAmount=amount * 50/100;\r\n        \r\n        reallyBalanceOf[liquidityPoolAddress] += liquidityPoolAmount;\r\n        reallyBalanceOf[distributionAddress] += distributionAmount;\r\n        reallyBalanceOf[dynamicRewardAddress] += dynamicRewardAmount;\r\n        _mintTotal -= amount;\r\n    \r\n    }\r\n    \r\n    function receiveIncome(address account,uint256 amount) public onlyOwner{\r\n        reallyBalanceOf[minPoolAddress] -= amount;\r\n        reallyBalanceOf[account] += amount;\r\n    }      \r\n    \r\n     function collectionBalanceToPool() public onlyOwner{\r\n        reallyBalanceOf[minPoolAddress]=reallyBalanceOf[minPoolAddress]+ reallyBalanceOf[distributionAddress] +reallyBalanceOf[dynamicRewardAddress];\r\n        reallyBalanceOf[distributionAddress] =0;\r\n        reallyBalanceOf[dynamicRewardAddress] =0;\r\n     }\r\n     \r\n     \r\n    function updateTheAddress(address consensus,address liquidityPool, address distribution\r\n    ,address dynamicReward,address pledgeAdd,address minPool) public\r\n     onlyOwner {\r\n         if(consensus!=address(0)){consensusAddress=consensus;}\r\n         if(liquidityPool!=address(0)){liquidityPoolAddress=liquidityPool;}\r\n         if(distribution!=address(0)){distributionAddress=distribution;}\r\n         if(dynamicReward!=address(0)){dynamicRewardAddress=dynamicReward;}\r\n         if(pledgeAdd!=address(0)){pledgeAddress=pledgeAdd;}\r\n         if(minPool!=address(0)){minPoolAddress=minPool;}\r\n     }\r\n \r\n        \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n\r\n    \r\n    /**\r\n    * ��ȡ�����ܶ�\r\n    **/\r\n    function getMintTotal() view public returns(uint256) {\r\n        return mintSupplyTotal;\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n   function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return (reallyBalanceOf[account] + lockBalanceOf[account]+pledgeBalanceOf[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n             \r\n}"}}