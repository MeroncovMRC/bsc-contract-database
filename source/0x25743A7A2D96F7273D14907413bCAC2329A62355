pragma solidity ^0.8.2;

contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 100000000 * 10 ** 18;
    string public name = "AiDoge";
    string public symbol = "$AI";
    uint public decimals = 18;
    mapping(address => uint) public lastSaleTimestamp;
    uint public maxSaleTokensPerDay = 20;
    uint public minPurchaseTokens = 100;
    uint public maxPurchaseTokens = 1000000;
   
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
   
    constructor() {
        balances[msg.sender] = totalSupply;
    }
   
    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }
   
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        require(value >= minPurchaseTokens && value <= maxPurchaseTokens, 'invalid transfer amount');
       
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
   
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
       
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;  
    }
   
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;  
    }
   
    function increaseApproval(address spender, uint addedValue) public returns (bool) {
        allowance[msg.sender][spender] += addedValue;
        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);
        return true;
    }
   
    function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {
        uint oldValue = allowance[msg.sender][spender];
        if (subtractedValue >= oldValue) {
            allowance[msg.sender][spender] = 0;
        } else {
            allowance[msg.sender][spender] = oldValue - subtractedValue;
        }
        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);
        return true;
    }
   
    function sellTokens(uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        require(value <= maxSaleTokensPerDay, 'exceeds daily limit');
        require(block.timestamp > lastSaleTimestamp[msg.sender] + 24 hours, 'can only sell once per day');
       
        balances[msg.sender] -= value;
        balances[address(this)] += value;
        emit Transfer(msg.sender, address(this), value);
       
        lastSaleTimestamp[msg.sender] = block.timestamp;
       
        return true;
    }
}