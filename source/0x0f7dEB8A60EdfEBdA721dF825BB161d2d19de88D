// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

contract DigiGold {
    string public name = "DigiGold";
    string public symbol = "DGOLD";
    uint256 public totalSupply = 1000000;
    uint256 public feePercentage = 5; // 5% transaction fee
    address public tokenCreator;

    mapping(address => uint256) balances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Fee(address indexed from, address indexed to, uint256 value);

    constructor() {
        balances[msg.sender] = totalSupply;
        tokenCreator = msg.sender;
    }

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        uint256 feeAmount = (amount * feePercentage) / 100;
        uint256 transferAmount = amount - feeAmount;

        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;
        balances[recipient] += transferAmount;
        balances[tokenCreator] += feeAmount;

        emit Transfer(msg.sender, recipient, transferAmount);
        emit Fee(msg.sender, tokenCreator, feeAmount);

        return true;
    }
}