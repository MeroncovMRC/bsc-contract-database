// SPDX-License-Identifier: GPL-3.0-only

// File: @openzeppelin/contracts/GSN/Context.sol


pragma solidity >=0.6.0 <0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: @openzeppelin/contracts/math/SafeMath.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: @openzeppelin/contracts/utils/Address.sol


pragma solidity >=0.6.2 <0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol


pragma solidity >=0.6.0 <0.8.0;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: contracts/IExchange.sol

pragma solidity ^0.6.0;

interface IExchange
{
	function calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount);
	function calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount);

	function convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external payable returns (uint256 _outputAmount);
	function convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external payable returns (uint256 _inputAmount);
}

// File: contracts/ConversionVault.sol

pragma solidity ^0.6.0;






contract ConversionVault is Ownable
{
	using SafeERC20 for IERC20;
	using SafeMath for uint256;

	address payable public manager;
	address payable public vault;
	address public exchange;

	mapping (address => uint256) public dailyConversionLimit;
	mapping (address => uint256[2]) private dailyConversionConsumption;

	modifier onlyManager()
	{
		require(msg.sender == manager, "access denied");
		_;
	}

	constructor () public
	{
		manager = msg.sender;
		vault = msg.sender;
	}

	function withdrawFunds(address _token, uint256 _amount) external onlyManager
	{
		address payable _to = vault;
		if (_token == address(0)) {
			_to.transfer(_amount);
		} else {
			IERC20(_token).safeTransfer(_to, _amount);
		}
	}

	function withdrawFundsBatch(address[] memory _tokens, uint256[] memory _amounts) external onlyManager
	{
		require(_tokens.length == _amounts.length, "length mismatch");
		address payable _to = vault;
		uint256 _length = _tokens.length;
		for (uint256 _i = 0; _i < _length; _i++) {
			address _token = _tokens[_i];
			uint256 _amount = _amounts[_i];
			if (_token == address(0)) {
				_to.transfer(_amount);
			} else {
				IERC20(_token).safeTransfer(_to, _amount);
			}
		}
	}

	function calcConversionLimitAvailable(address _token) external view returns (uint256 _avaliableAmount)
	{
		uint256 _today = (block.timestamp / 1 days) * 1 days;
		uint256 _limit = dailyConversionLimit[_token];
		uint256[2] storage _array = dailyConversionConsumption[_token];
		uint256 _date = _array[0];
		uint256 _consumed = _array[1];
		if (_date != _today) {
			_consumed = 0;
		}
		if (_limit <= _consumed) {
			return 0;
		}
		return _limit - _consumed;
	}

	function convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external onlyManager returns (uint256 _outputAmount)
	{
		require(exchange != address(0), "exchange not set");
		uint256 _balanceFromBefore = _getBalance(_from);
		uint256 _balanceToBefore = _getBalance(_to);
		if (_from == address(0)) {
			_outputAmount = IExchange(exchange).convertFundsFromInput{value: _inputAmount}(_from, _to, _inputAmount, _minOutputAmount);
		} else {
			IERC20(_from).safeApprove(exchange, _inputAmount);
			_outputAmount = IExchange(exchange).convertFundsFromInput(_from, _to, _inputAmount, _minOutputAmount);
			IERC20(_from).safeApprove(exchange, 0);
		}
		require(_outputAmount >= _minOutputAmount, "insufficient output");
		uint256 _balanceFromAfter = _getBalance(_from);
		uint256 _balanceToAfter = _getBalance(_to);
		require(_balanceFromBefore == _balanceFromAfter.add(_inputAmount), "input mismatch");
		require(_balanceToAfter == _balanceToBefore.add(_outputAmount), "output mismatch");
		_updateDailyConversionConsumption(_from, _inputAmount);
		_updateDailyConversionConsumption(_to, _outputAmount);
		return _outputAmount;
	}

	function convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external onlyManager returns (uint256 _inputAmount)
	{
		require(exchange != address(0), "exchange not set");
		uint256 _balanceFromBefore = _getBalance(_from);
		uint256 _balanceToBefore = _getBalance(_to);
		if (_from == address(0)) {
			_inputAmount = IExchange(exchange).convertFundsFromOutput{value: _maxInputAmount}(_from, _to, _outputAmount, _maxInputAmount);
		} else {
			IERC20(_from).safeApprove(exchange, _maxInputAmount);
			_inputAmount = IExchange(exchange).convertFundsFromOutput(_from, _to, _outputAmount, _maxInputAmount);
			IERC20(_from).safeApprove(exchange, 0);
		}
		require(_inputAmount <= _maxInputAmount, "excessive input");
		uint256 _balanceFromAfter = _getBalance(_from);
		uint256 _balanceToAfter = _getBalance(_to);
		require(_balanceFromBefore == _balanceFromAfter.add(_inputAmount), "input mismatch");
		require(_balanceToAfter == _balanceToBefore.add(_outputAmount), "output mismatch");
		_updateDailyConversionConsumption(_from, _inputAmount);
		_updateDailyConversionConsumption(_to, _outputAmount);
		return _inputAmount;
	}

	function setManager(address payable _newManager) external onlyOwner
	{
		address payable _oldManager = manager;
		manager = _newManager;
		emit ChangeManager(_oldManager, _newManager);
	}

	function setVault(address payable _newVault) external onlyOwner
	{
		address payable _oldVault = vault;
		vault = _newVault;
		emit ChangeVault(_oldVault, _newVault);
	}

	function setExchange(address _newExchange) external onlyOwner
	{
		address _oldExchange = exchange;
		exchange = _newExchange;
		emit ChangeExchange(_oldExchange, _newExchange);
	}

	function setDailyConversionLimit(address _token, uint256 _newDailyConversionLimit) external onlyOwner
	{
		uint256 _oldDailyConversionLimit = dailyConversionLimit[_token];
		dailyConversionLimit[_token] = _newDailyConversionLimit;
		emit ChangeDailyConversionLimit(_token, _oldDailyConversionLimit, _newDailyConversionLimit);
	}

	function _updateDailyConversionConsumption(address _token, uint256 _amount) internal
	{
		uint256 _today = (block.timestamp / 1 days) * 1 days;
		uint256 _limit = dailyConversionLimit[_token];
		uint256[2] storage _array = dailyConversionConsumption[_token];
		uint256 _date = _array[0];
		uint256 _consumed = _array[1];
		if (_date != _today) {
			_consumed = 0;
		}
		_consumed = _consumed.add(_amount);
		require(_consumed <= _limit, "limit exhausted");
		_array[0] = _today;
		_array[1] = _consumed;
	}

	function _getBalance(address _token) internal view returns (uint256 _balance)
	{
		if (_token == address(0)) {
			return address(this).balance;
		} else {
			return IERC20(_token).balanceOf(address(this));
		}
	}

	receive() external payable
	{
	}

	event ChangeManager(address payable indexed _oldManager, address payable indexed _newManager);
	event ChangeVault(address payable indexed _oldVault, address payable indexed _newVault);
	event ChangeExchange(address indexed _oldExchange, address indexed _newExchange);
	event ChangeDailyConversionLimit(address indexed _token, uint256 _oldDailyConversionLimit, uint256 _newDailyConversionLimit);
}

// File: @openzeppelin/contracts/utils/Create2.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.
 * `CREATE2` can be used to compute in advance the address where a smart
 * contract will be deployed, which allows for interesting new mechanisms known
 * as 'counterfactual interactions'.
 *
 * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more
 * information.
 */
library Create2 {
    /**
     * @dev Deploys a contract using `CREATE2`. The address where the contract
     * will be deployed can be known in advance via {computeAddress}.
     *
     * The bytecode for a contract can be obtained from Solidity with
     * `type(contractName).creationCode`.
     *
     * Requirements:
     *
     * - `bytecode` must not be empty.
     * - `salt` must have not been used for `bytecode` already.
     * - the factory must have a balance of at least `amount`.
     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.
     */
    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {
        address addr;
        require(address(this).balance >= amount, "Create2: insufficient balance");
        require(bytecode.length != 0, "Create2: bytecode length is zero");
        // solhint-disable-next-line no-inline-assembly
        assembly {
            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)
        }
        require(addr != address(0), "Create2: Failed on deploy");
        return addr;
    }

    /**
     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the
     * `bytecodeHash` or `salt` will result in a new destination address.
     */
    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {
        return computeAddress(salt, bytecodeHash, address(this));
    }

    /**
     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at
     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.
     */
    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {
        bytes32 _data = keccak256(
            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)
        );
        return address(uint256(_data));
    }
}

// File: contracts/Wallet.sol

pragma solidity ^0.6.0;



contract Wallet
{
	using SafeERC20 for IERC20;

	address payable private immutable manager;

	modifier onlyManager()
	{
		require(msg.sender == manager, "access denied");
		_;
	}

	constructor () public
	{
		manager = msg.sender;
	}

	function _forwardFunds(address _token, address payable _to) external onlyManager
	{
		if (_token == address(0)) {
			_to.transfer(address(this).balance);
		} else {
			IERC20(_token).safeTransfer(_to, IERC20(_token).balanceOf(address(this)));
		}
	}

	receive() external payable
	{
	}
}

// File: contracts/WalletManager.sol

pragma solidity ^0.6.0;







contract WalletManager is Ownable
{
	using Address for address payable;
	using SafeERC20 for IERC20;

	uint256 constant GAS_OVERHEAD = 30000;

	address payable public processor;
	address payable public vault;

	bytes private bytecode;
	bytes32 private immutable bytecodeHash;

	modifier onlyProcessor()
	{
		uint256 _gas = gasleft();
		require(msg.sender == processor, "access denied");
		_;
		processor.transfer((GAS_OVERHEAD + _gas - gasleft()) * tx.gasprice);
	}

	constructor () public
	{
		processor = msg.sender;
		vault = msg.sender;
		bytecode = abi.encodePacked(type(Wallet).creationCode);
		bytecodeHash = keccak256(bytecode);
	}

	function wallets(string memory _userId) external view returns (address payable _wallet, bool _exists)
	{
		bytes32 _salt = bytes32(keccak256(abi.encodePacked(_userId)));
		_wallet = payable(Create2.computeAddress(_salt, bytecodeHash));
		_exists = _wallet.isContract();
		return (_wallet, _exists);
	}

	function createWallet(string memory _userId) external onlyProcessor
	{
		bytes32 _salt = bytes32(keccak256(abi.encodePacked(_userId)));
		address payable _wallet = payable(Create2.deploy(0, _salt, bytecode));
		emit CreateWallet(_userId, _wallet);
	}

	function forwardFunds(address payable _wallet, address _token) external onlyProcessor
	{
		Wallet(_wallet)._forwardFunds(_token, vault);
	}

	function forwardFundsBatch(address payable[] memory _wallets, address _token) external onlyProcessor
	{
		uint256 _length = _wallets.length;
		for (uint256 _i = 0; _i < _length; _i++) {
			address payable _wallet = _wallets[_i];
			Wallet(_wallet)._forwardFunds(_token, vault);
		}
	}

	function recoverFunds(address _token) external onlyOwner
	{
		address payable _to = vault;
		if (_token == address(0)) {
			_to.transfer(address(this).balance);
		} else {
			IERC20(_token).safeTransfer(_to, IERC20(_token).balanceOf(address(this)));
		}
	}

	function setProcessor(address payable _newProcessor) external onlyOwner
	{
		address payable _oldProcessor = processor;
		processor = _newProcessor;
		emit ChangeProcessor(_oldProcessor, _newProcessor);
	}

	function setVault(address payable _newVault) external onlyOwner
	{
		address payable _oldVault = vault;
		vault = _newVault;
		emit ChangeVault(_oldVault, _newVault);
	}

	receive() external payable
	{
	}

	event CreateWallet(string indexed _userId, address payable indexed _wallet);
	event ChangeProcessor(address payable indexed _oldProcessor, address payable indexed _newProcessor);
	event ChangeVault(address payable indexed _oldVault, address payable indexed _newVault);
}

// File: contracts/ConversionWalletManager.sol

pragma solidity ^0.6.0;




contract ConversionWalletManager is WalletManager
{
	function calcConversionLimitAvailable(address _token) external view returns (uint256 _avaliableAmount)
	{
		return ConversionVault(vault).calcConversionLimitAvailable(_token);
	}

	function calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount)
	{
		return IExchange(ConversionVault(vault).exchange()).calcConversionFromInput(_from, _to, _inputAmount);
	}

	function calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount)
	{
		return IExchange(ConversionVault(vault).exchange()).calcConversionFromOutput(_from, _to, _outputAmount);
	}

	function convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external onlyProcessor returns (uint256 _outputAmount)
	{
		return ConversionVault(vault).convertFundsFromInput(_from, _to, _inputAmount, _minOutputAmount);
	}

	function convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external onlyProcessor returns (uint256 _inputAmount)
	{
		return ConversionVault(vault).convertFundsFromOutput(_from, _to, _outputAmount, _maxInputAmount);
	}

	function withdrawFunds(address _token, uint256 _amount) external onlyProcessor
	{
		ConversionVault(vault).withdrawFunds(_token, _amount);
	}

	function withdrawFundsBatch(address[] memory _tokens, uint256[] memory _amounts) external onlyProcessor
	{
		ConversionVault(vault).withdrawFundsBatch(_tokens, _amounts);
	}
}