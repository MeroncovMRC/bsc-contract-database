// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/Web3SMC.sol


// Name: Web-3
// https://web3smc.net/

pragma solidity 0.8.16;


contract Web3 is Ownable {
   
    /* SETTINGS */
    uint[5] public levelLimits = [3**1, 3**2, 3**3, 3**4, 3**5];

    /* COUNTERS */
    uint256 public totalUsers;

    /* LISTS */
    struct Users {
        uint id;
        uint sID;
        address sAddress;
        uint pID;
        address pAddress;
        uint invitedByCnt;
        uint cnt;
        uint[3] directReferrals; 
    }

    mapping(uint => mapping(address => Users)) public User;
    mapping(address => uint) public addressToId;
    mapping(uint => address) public idToAddress;
    mapping(address => uint) public activeMatrix;

    /* EVENTS */
    event Register(address user, address indexed invitedBy);
    event Spillover(address user, address indexed from, address indexed to);

    modifier onlyEOA() {
        require(tx.origin == msg.sender, "Not EOA");
        _;
    }

    constructor() {

        address _user = msg.sender;
        totalUsers++;
        
        addressToId[_user] = totalUsers;
        idToAddress[totalUsers] = _user;
        activeMatrix[_user] = 1;

        Users storage user = User[1][_user];
        
        user.id = totalUsers;
        user.sID = totalUsers;
        user.sAddress = _user;
        user.pID = totalUsers;
        user.pAddress = _user;

    }

    function joinTheMatrix(address sponsor) public onlyEOA returns (bool) {
        address _user = msg.sender;
        activeMatrix[_user] = 1;
        Users storage user = User[1][_user];
        Users storage sponsorUser = User[1][sponsor];
        uint sponsorId = addressToId[sponsor];
        require(user.id == 0, "Already registered");        
        require(_user != sponsor && sponsorId > 0, "Invalid sponsor");

        totalUsers++;
        sponsorUser.invitedByCnt++;
        sponsorUser.cnt++;
        // set new user data
        user.id = totalUsers;
        // set initial sponsor
        user.sID = sponsorId;
        user.sAddress = sponsor;
        
        addressToId[_user] = totalUsers;
        idToAddress[totalUsers] = _user;

        // set direct/spillover sponsor
        uint pos_SponsorId = fillSponsorData(sponsor);
        user.pID = pos_SponsorId;
        user.pAddress = idToAddress[pos_SponsorId];
                
        emit Register(_user, sponsor);
        if (user.pID != user.sID) {
            emit Spillover(_user, sponsor, user.pAddress);
        }
        if(sponsorUser.cnt == 363) {
            sponsorUser.cnt = 0;
            activeMatrix[sponsor]++;
        }
        return true;
    }

    function fillSponsorData(address _sponsor) internal returns (uint setSponsor) {
        uint _activeMatrix = activeMatrix[_sponsor];
        Users storage sponsor = User[_activeMatrix][_sponsor];
        for (uint i=0;i<3;i++) {
            if (sponsor.directReferrals[i] == 0) {
                sponsor.directReferrals[i] = totalUsers;            
                return sponsor.sID;
            }
        }

        uint[] memory directRefs = new uint[](3);
        directRefs[0] = sponsor.directReferrals[0];
        directRefs[1] = sponsor.directReferrals[1];
        directRefs[2] = sponsor.directReferrals[2];

        uint sID = getNextSponsor(directRefs, 0);
        uint sIDactiveMatrix = activeMatrix[idToAddress[sID]];
        Users storage s = User[sIDactiveMatrix][idToAddress[sID]];
        for (uint i=0;i<3;i++) {
            if (s.directReferrals[i] == 0) {
                s.directReferrals[i] = totalUsers;
                return sID;
            }
        }  
    }

    function getNextSponsor(uint[] memory levelLine, uint virtualLvl) internal view returns(uint) {
        
        virtualLvl++;
        uint[] memory tempArray = new uint[](levelLimits[virtualLvl]);
        uint[] memory uIds = new uint[](levelLimits[virtualLvl-1]);

        for (uint i=0;i<levelLine.length;i++){ 
            uint sIDactiveMatrix = activeMatrix[idToAddress[levelLine[i]]];
            Users storage s = User[sIDactiveMatrix][idToAddress[levelLine[i]]];
            uIds[i] = levelLine[i];
            for (uint spot=0;spot<3;spot++){
                tempArray[i*3 + spot] = s.directReferrals[spot];
            }
        }
       
        for (uint spot=0;spot<3;spot++) {            
            for (uint u=0;u<tempArray.length/3;u++){
                if (tempArray[u*3+spot] == 0) return uIds[u];
            }            
        }

        return getNextSponsor(tempArray, virtualLvl);

    }

    function showUserDirectReferralsSpot(address user, uint spot) external view returns (uint) {
        Users storage u = User[1][user];
        return u.directReferrals[spot];
    }

    function showUserReferralsActiveMatrix(address user, uint spot) external view returns (uint) {
        Users storage u = User[activeMatrix[user]][user];
        return u.directReferrals[spot];
    }
    function showUserReferralsByMatrix(address user, uint spot, uint matrix) external view returns (uint) {
        Users storage u = User[matrix][user];
        return u.directReferrals[spot];
    }

    function showUserDirectReferrals(address user) external view returns (uint[3] memory) {
        Users storage u = User[1][user];
        uint[3] memory arr;
        for (uint i=0;i<3; i++) {
            arr[i] = u.directReferrals[i];
        }
        return arr;
    }

    function showUserReferralsActiveMatrix(address user) external view returns (uint[3] memory) {
        Users storage u = User[activeMatrix[user]][user];
        uint[3] memory arr;
        for (uint i=0;i<3; i++) {
            arr[i] = u.directReferrals[i];
        }
        return arr;
    }

    function showUserReferralsByMatrix(address user, uint matrix) external view returns (uint[3] memory) {
        Users storage u = User[matrix][user];
        uint[3] memory arr;
        for (uint i=0;i<3; i++) {
            arr[i] = u.directReferrals[i];
        }
        return arr;
    }
    
}