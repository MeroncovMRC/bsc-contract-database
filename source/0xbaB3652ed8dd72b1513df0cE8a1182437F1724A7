{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"PayContract.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"Ownable.sol\";\r\nimport \"IERC20.sol\";\r\n\r\ncontract PayContract is Ownable {\r\n\r\n    //  operator contract address\r\n    address public operator;\r\n\r\n    mapping(string =\u003e IERC20) private _currencies;\r\n    mapping(string =\u003e uint256) private _prices;\r\n\r\n    event PaymentReceived(string currency, address indexed from, uint256 amount);\r\n    event PriceChanged(string currency, uint256 newPrice);\r\n    event CurrencyAdded(string currency, address newCurrency);\r\n    event ChangeOperator(address oldOperator, address newOperator);\r\n\r\n    // Access modifier (Operator)\r\n    modifier onlyOperator() {\r\n        require(operator == _msgSender(), \"Subscriber: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Update Operator address\r\n    /// @param newOperator        - Address new operator\r\n    function changeOperator(address newOperator) public onlyOwner {\r\n        address oldOperator = operator;\r\n        operator = newOperator;\r\n        emit ChangeOperator(oldOperator, newOperator);\r\n    }\r\n\r\n    function addCurrency(string memory currencyName, address tokenAddress) external onlyOwner {\r\n        require(tokenAddress != address(0), \"Invalid token address\");\r\n        require(_currencies[currencyName] == IERC20(address(0)), \"Currency already exists\");\r\n\r\n        _currencies[currencyName] = IERC20(tokenAddress);\r\n        emit CurrencyAdded(currencyName, tokenAddress);\r\n    }\r\n\r\n    function getPrice(string memory currencyName) external view returns (uint256) {\r\n        return _prices[currencyName];\r\n    }\r\n\r\n    function getCurrencyAddress(string memory currencyName) external view returns (address) {\r\n        return address(_currencies[currencyName]);\r\n    }\r\n\r\n    function pay(string memory currencyName) external {\r\n        IERC20 token = _currencies[currencyName];\r\n        uint256 price = _prices[currencyName];\r\n\r\n        require(address(token) != address(0), \"Currency not supported\");\r\n        require(price \u003e 0, \"No price set for this currency\");\r\n\r\n        token.transferFrom(msg.sender, address(this), price);\r\n        emit PaymentReceived(currencyName, msg.sender, price);\r\n    }\r\n\r\n    function payOperator(string memory currencyName, address user) external onlyOperator {\r\n        IERC20 token = _currencies[currencyName];\r\n        uint256 price = _prices[currencyName];\r\n\r\n        require(address(token) != address(0), \"Currency not supported\");\r\n        require(price \u003e 0, \"No price set for this currency\");\r\n\r\n        token.transferFrom(user, address(this), price);\r\n        emit PaymentReceived(currencyName, user, price);\r\n    }\r\n\r\n    function changePrice(string memory currencyName, uint256 newPrice) external onlyOwner {\r\n        require(newPrice \u003e 0, \"Price must be greater than 0\");\r\n\r\n        _prices[currencyName] = newPrice;\r\n        emit PriceChanged(currencyName, newPrice);\r\n    }\r\n\r\n    function claim(string memory currencyName, address to) external onlyOwner {\r\n        require(to != address(0), \"Invalid address\");\r\n\r\n        IERC20 token = _currencies[currencyName];\r\n        require(address(token) != address(0), \"Currency not supported\");\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance \u003e 0, \"No tokens to claim\");\r\n\r\n        token.transfer(to, balance);\r\n    }\r\n\r\n    function getContractTokenBalance(string memory currencyName) external view returns (uint256) {\r\n        IERC20 token = _currencies[currencyName];\r\n        require(address(token) != address(0), \"Currency not supported\");\r\n\r\n        return token.balanceOf(address(this));\r\n    }\r\n}\r\n\r\n"}}