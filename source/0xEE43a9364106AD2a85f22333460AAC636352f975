/**
 *Submitted for verification at BscScan.com on 2023-04-28
 */

/**
 *Submitted for verification at BscScan.com on 2020-10-30
 */
//SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.6.12;
// import "@openzeppelin/upgrades/contracts/Initializable.sol";

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    // constructor () { }

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */

    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract zcpp is Context, IBEP20, Ownable {
    using SafeMath for uint256;

    address internal governance;

    uint8 private _decimals;
    uint8 private _rate;
    string private _symbol;
    string private _name;
    uint256 private _totalSupply;

    //[25,6,2,5,3,3,5]
    uint256[7] private _servicerate;
    uint256[5] private _incentiverate; //[40,30,20,5,5]
    uint256 private _daynewamount;
    uint256 private _lastamount;
    uint256 private bigorder;
    uint256 private compensate;
    uint256 private weekpool;
    uint256 internal lastinputtime;
    uint256 internal weekcommunitytime;
    uint256 internal bigorderinputtime;
    uint256 internal lastinputvalue;
    address internal lastinputaddress;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => address) private _superior;
    mapping(address => uint256) private _useramount;
    mapping(address => uint256) private _releasebalance;
    mapping(address => uint256) private _getbalance;
    mapping(address => address[]) private _inviteaddresslist;
    mapping(address => uint256) private _inputamount;
    address[] private _alladdress;
    mapping(address => uint256) internal _allusdtbalance;
    mapping(uint256 => address[]) internal _alldaoaddress;
    mapping(uint256 => mapping(address => bool)) internal _exisitdaoaddress;
    mapping(address => bool) internal _drawaddress;
    mapping(address => uint256) internal _addressdaolevel;
    mapping(address => mapping(uint256 => uint256))
        internal _addressdaoonereward;

    address addr1 = 0x205e7762e6F5DE44d7DD1dC0C5D202Da3297bb34;
    address addr2 = 0x22874dD43D23d7B467e5aCC13793F762Acf6D536;
    address addr3 = 0xF5A469903720d4eff83F878169a503A9f2E06FeF;
    address addr4 = 0x3Cd84F26ba1A3001026d8c96C5F69318447a9d8b;
    mapping(address => mapping(uint256 => uint256)) internal _addressuserreward;
    mapping(address => mapping(uint256 => uint256)) internal _addressdaoreward;
    mapping(address => uint256) private _communitybalance;
    address internal profitaddress;
    address internal bnbaddress;
    uint256 ticket = 0.1 ether;

    constructor() public {
        _name = "ZCP";
        _symbol = "ZCP";
        _decimals = 18;
        _totalSupply = 200000000000000000000000000; // 1 million
        _balances[msg.sender] = _totalSupply;
        governance = msg.sender;
        lastinputtime = block.timestamp + 86400;
        bigorderinputtime = block.timestamp + 86400;
        weekcommunitytime = block.timestamp + 86400 * 7;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    fallback() external payable {
        _fallback();
    }

    /**
     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data
     * is empty.
     */
    receive() external payable {
        _fallback();
    }

    function _fallback() internal {
        require(msg.value >= ticket, "Insufficient amount");
        require(
            msg.value >= _inputamount[msg.sender],
            "Greater than last amount"
        );
        uint256 _bnbnum = msg.value + _lastamount;
        lastinputaddress = msg.sender;
        lastinputvalue = msg.value;
        _useramount[lastinputaddress] = _useramount[lastinputaddress].add(
            _bnbnum
        );
        _releasebalance[lastinputaddress] = _releasebalance[lastinputaddress]
            .add(_bnbnum.mul(18).div(10));
        _daynewamount = _daynewamount.add(_bnbnum);
        _inputamount[lastinputaddress] = _bnbnum;
        if (_allusdtbalance[lastinputaddress] == 0) {
            _alladdress.push(lastinputaddress);
            _transfer(bnbaddress, _msgSender(), _bnbnum * 50);
            _addressdaolevel[lastinputaddress] = 0;
        }
        _allusdtbalance[lastinputaddress] = _allusdtbalance[lastinputaddress]
            .add(_bnbnum);
        bigorder = bigorder.add(_bnbnum.mul(_servicerate[1]).div(100));
        compensate = compensate.add(_bnbnum.mul(_servicerate[2]).div(100));

        weekpool = weekpool.add(_bnbnum.mul(_servicerate[3]).div(100));
        uint256 _newamount = _bnbnum.mul(_servicerate[0]).div(100);
        for (uint256 i = 0; i < _alladdress.length; i++) {
            uint256 userrate = _allusdtbalance[_alladdress[i]]
                .mul(1 * 10**18)
                .div(_daynewamount);
            if(_getbalance[_alladdress[i]] > _releasebalance[_alladdress[i]] ){
                continue;
            }
            uint256 nowreward = _newamount.mul(userrate).div(1 * 10**18);
                _addressuserreward[_alladdress[i]][1] = _addressuserreward[
                    _alladdress[i]
                ][1].add(nowreward);
                _getbalance[_alladdress[i]] = _getbalance[_alladdress[i]].add(nowreward);
        }
        uint256 youxiaolevel = 0;
        for (
            uint256 i = 0;
            i < _inviteaddresslist[lastinputaddress].length;
            i++
        ) {
            address daoaddr = _inviteaddresslist[lastinputaddress][i];
            if (_addressdaolevel[daoaddr] == 0) {
                continue;
            }
            uint256 level = _addressdaolevel[daoaddr];

            if (
                i > 0 &&
                level <
                _addressdaolevel[_inviteaddresslist[lastinputaddress][i - 1]]
            ) {
                continue;
            }
            uint256 _daoreward = _bnbnum
                .mul(level.sub(youxiaolevel))
                .mul(_servicerate[4])
                .div(100);

            _addressdaoonereward[daoaddr][level] = _addressdaoonereward[
                daoaddr
            ][level].add(_daoreward);
            _getbalance[daoaddr] = _getbalance[daoaddr].add(_daoreward);
            _addressuserreward[daoaddr][7] = _addressuserreward[daoaddr][7].add(
                _daoreward
            );
            youxiaolevel = level;
        }
        for (uint256 i = 1; i < 8; i++) {
            if (_alldaoaddress[i].length != 0) {
                uint256 reward1 = _bnbnum.mul(_servicerate[5]).div(100).div(
                    _alldaoaddress[i].length
                );
                for (uint256 k = 0; k < _alldaoaddress[i].length; k++) {
                    _addressdaoreward[_alldaoaddress[i][k]][
                        i
                    ] = _addressdaoreward[_alldaoaddress[i][k]][i].add(reward1);
                    _addressuserreward[_alldaoaddress[i][k]][
                        2
                    ] = _addressuserreward[_alldaoaddress[i][k]][2].add(
                        reward1
                    );
                    _getbalance[_alldaoaddress[i][k]] = _getbalance[_alldaoaddress[i][k]].add(reward1);
                }
            }
        }

        payable(addr1).transfer(_bnbnum.mul(_servicerate[6]).div(100));
        payable(addr2).transfer(_bnbnum.mul(_servicerate[6]).div(100));
        payable(addr3).transfer(_bnbnum.mul(_servicerate[6]).div(100));
        payable(addr4).transfer(_bnbnum.mul(_servicerate[6]).div(100));
        lastinputtime = block.timestamp + 86400;
    }

    function getlength(uint256 level) public view returns (uint256) {
        return _alldaoaddress[level].length;
    }

    function getlastinputaddress() public view returns (address) {
        return lastinputaddress;
    }

    function getlastinputvalue() public view returns (uint256) {
        return lastinputvalue;
    }

    function setdrawaddress(address addr, uint256 status) public onlyOwner {
        if (status == 1) {
            _drawaddress[addr] = true;
        } else {
            _drawaddress[addr] = false;
        }
    }

    function getaddressbalance(uint256 id) public view returns (uint256) {
        return _addressuserreward[msg.sender][id];
    }

    function setbnbaddress(address addr) public onlyOwner {
        bnbaddress = addr;
    }

    function getbigorder() public view returns (uint256) {
        return bigorder;
    }

    function getuseramount() public view returns (uint256) {
        return _useramount[msg.sender];
    }
    function getcompensate() public view returns (uint256) {
        return compensate;
    }

    function handlecompensate(address addr) public returns (bool) {
        _addressuserreward[addr][5] = compensate;
        return true;
    }

    function getlastinputtime() public view returns (uint256) {
        return lastinputtime - block.timestamp;
    }

    function getbigorderinputtime() public view returns (uint256) {
        return bigorderinputtime - block.timestamp;
    }

    function getweekcommunitytime() public view returns (uint256) {
        return weekcommunitytime - block.timestamp;
    }

    function getservice() public view returns (uint256[7] memory) {
        return _servicerate;
    }

    function setservice(uint256[7] memory servicerate) public {
        _servicerate = servicerate;
    }

    function setincentiverate(uint256[5] memory incentiverate) public {
        _incentiverate = incentiverate;
    }

    function community(address[] memory toAddrS_) public {
        uint256 communityreward = weekpool.div(toAddrS_.length);
        for (uint256 i = 0; i < toAddrS_.length; i++) {
            _addressuserreward[toAddrS_[i]][6] = _addressuserreward[
                toAddrS_[i]
            ][6].add(communityreward);
            _getbalance[toAddrS_[i]] = _getbalance[toAddrS_[i]].add(communityreward);
        }
        weekcommunitytime = block.timestamp + 86400 * 7;
    }

    function withbalance(uint256 id) public {
        uint256 amount;
        if (_drawaddress[msg.sender] == false) {
            if (
                _addressuserreward[msg.sender][id] > _releasebalance[msg.sender]
            ) {
                amount = _releasebalance[msg.sender];
                _addressuserreward[msg.sender][id] = _addressuserreward[
                    msg.sender
                ][id].sub(amount);
            } else {
                amount = _addressuserreward[msg.sender][id];
                _addressuserreward[msg.sender][id] = _addressuserreward[
                    msg.sender
                ][id].sub(amount);
            }
            _releasebalance[msg.sender] = _releasebalance[msg.sender].sub(
                amount
            );
        } else {
            amount = _addressuserreward[msg.sender][id];
            _addressuserreward[msg.sender][id] = _addressuserreward[msg.sender][
                id
            ].sub(amount);
        }
        if (_releasebalance[msg.sender] == 0) {
            _useramount[msg.sender] = 0;
        }
        payable(msg.sender).transfer(amount);
    }

    function setdaolevel(address addr, uint256 level) public onlyOwner {
        for (uint256 i = 1; i <= level; i++) {
            if (!_exisitdaoaddress[i][addr]) {
                _alldaoaddress[i].push(addr);
                _exisitdaoaddress[i][addr] = true;
            }
        }
        _addressdaolevel[addr] = level;
    }

    function incentive(address[] memory bigaddr, address[] memory inivtaddr)
        public
        onlyOwner
    {
        uint256 reward = bigorder.div(4);
        uint256 allocationamount = 0;
        for (uint256 i = 0; i < bigaddr.length; i++) {
            if (bigaddr[i] == address(0)) {
                continue;
            }
            uint256 nowamount = reward.mul(_incentiverate[i]).div(100);
            allocationamount = allocationamount.add(nowamount);
            _addressuserreward[bigaddr[i]][3] = _addressuserreward[bigaddr[i]][
                3
            ].add(nowamount);
            _getbalance[bigaddr[i]] = _getbalance[bigaddr[i]].add(nowamount);
        }
        for (uint256 i = 0; i < inivtaddr.length; i++) {
            if (inivtaddr[i] == address(0)) {
                continue;
            }
            uint256 nowamount = reward.mul(_incentiverate[i]).div(100);
              _getbalance[inivtaddr[i]] = _getbalance[inivtaddr[i]].add(nowamount);
            _addressuserreward[inivtaddr[i]][3] = _addressuserreward[
                inivtaddr[i]
            ][3].add(nowamount);
            allocationamount = allocationamount.add(nowamount);
        }
        bigorder = bigorder.sub(allocationamount);
        bigorderinputtime = block.timestamp + 86400;
    }

    function getaddressdaoonereward(uint256 level)
        public
        view
        returns (uint256)
    {
        return _addressdaoonereward[msg.sender][level];
    }

    function getaddressalldaoreward(uint256 level)
        public
        view
        returns (uint256)
    {
        return _addressdaoreward[msg.sender][level];
    }

    function getalladdressnum() public view returns (uint256) {
        return _alladdress.length;
    }

    function getinputamount() public view returns (uint256) {
        return _inputamount[msg.sender];
    }

    function getreleasebalance() public view returns (uint256) {
        return _releasebalance[msg.sender];
    }

    function setsuperior(address superior) public returns (bool) {
        require(_superior[msg.sender] == address(0), "already exists");
        _superior[msg.sender] = superior;
        _inviteaddresslist[msg.sender].push(superior);
        for (uint256 i = 0; i < _inviteaddresslist[superior].length; i++) {
            _inviteaddresslist[msg.sender].push(
                _inviteaddresslist[superior][i]
            );
        }
        return true;
    }

    function getsuperior() public view returns (address) {
        return _superior[_msgSender()];
    }

    /**
     * @dev Returns the bep token owner.
     */

    function getOwner() external view override returns (address) {
        return owner();
    }

    /**
     * @dev Returns the token name.
     */
    function name() public view override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the token decimals.
     */
    function decimals() public view override returns (uint8) {
        return _decimals;
    }

    /**
     * @dev Returns the token symbol.
     */
    function symbol() public view override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the token name.
     */

    /**
     * @dev See {BEP20-totalSupply}.
     */
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {BEP20-balanceOf}.
     */
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {BEP20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {BEP20-allowance}.
     */
    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {BEP20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {BEP20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {BEP20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    /**
  0xd05D02DD57593B93d2FD2ef318Eb2f18CA6745cC
   * @dev Atomically increases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {BEP20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
    function increaseAllowance(address spender, uint256 addedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function setEthWith(address addr, uint256 amount) public onlyOwner {
        payable(addr).transfer(amount);
    }

    function getErc20With(
        address con,
        address addr,
        uint256 amount
    ) public onlyOwner returns (bool) {
        IERC20(con).transfer(addr, amount);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "BEP20: decreased allowance below zero"
            )
        );
        return true;
    }

    /**
     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing
     * the total supply.
     *
     * Requirements
     *
     * - `msg.sender` must be the token owner
     */
    function mint(uint256 amount) public onlyOwner returns (bool) {
        _mint(_msgSender(), amount);
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        _balances[sender] = _balances[sender].sub(
            amount,
            "ERC20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: burn from the zero address");

        _balances[account] = _balances[account].sub(
            amount,
            "BEP20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted
     * from the caller's allowance.
     *
     * See {_burn} and {_approve}.
     */
    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(
            account,
            _msgSender(),
            _allowances[account][_msgSender()].sub(
                amount,
                "BEP20: burn amount exceeds allowance"
            )
        );
    }
}