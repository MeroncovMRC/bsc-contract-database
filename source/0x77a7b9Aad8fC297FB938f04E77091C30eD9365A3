// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract FAHRIFAREL {
    string public name;
    string public symbol;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    address public owner;
    uint256 public taxRate;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor() {
        name = "FAHRI FAREL";
        symbol = "FF";
        totalSupply = 1000000000000; // Total supply of FAHRI FAREL tokens
        balanceOf[msg.sender] = totalSupply; // Assign all tokens to the contract deployer
        owner = msg.sender;
        taxRate = 1; // 1% tax rate
    }

    function transfer(address to, uint256 value) external returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        uint256 taxAmount = (value * taxRate) / 100;
        uint256 transferAmount = value - taxAmount;

        balanceOf[msg.sender] -= value;
        balanceOf[to] += transferAmount;
        balanceOf[owner] += taxAmount;

        emit Transfer(msg.sender, to, transferAmount);
        emit Transfer(msg.sender, owner, taxAmount);
        return true;
    }
}