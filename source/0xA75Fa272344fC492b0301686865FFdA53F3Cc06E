// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MINIDOGE3 {
    string public constant name = "MINIDOGE 3.0";
    string public constant symbol = "MIDO";
    uint8 public constant decimals = 18;
    uint256 public constant totalSupply = 100000000 * 10**uint256(decimals);

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    address private owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        owner = msg.sender;
        balances[owner] = totalSupply;
        emit Transfer(address(0), owner, totalSupply);
    }

    function balanceOf(address account) external view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            allowances[sender][msg.sender] - amount
        );
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return allowances[owner][spender];
    }

    function renounceOwnership() external {
        require(msg.sender == owner, "MINIDOGE3: Only owner can renounce ownership");
        owner = address(0);
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        require(sender != address(0), "MINIDOGE3: transfer from the zero address");
        require(recipient != address(0), "MINIDOGE3: transfer to the zero address");
        require(amount <= balances[sender], "MINIDOGE3: transfer amount exceeds balance");

        balances[sender] -= amount;
        balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "MINIDOGE3: approve from the zero address");
        require(spender != address(0), "MINIDOGE3: approve to the zero address");

        allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}