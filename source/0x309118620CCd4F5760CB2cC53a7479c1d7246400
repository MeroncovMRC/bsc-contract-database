{"NGMI.sol":{"content":"pragma solidity 0.8.4;\r\nimport \"SafeMath.sol\";\r\n\r\n// SPDX-License-Identifier: NGMI Finance\r\n\r\n/**\r\n    NGMI is a revolutionary new contract mechanism where it prevents sellers from buying back in again.\r\n    If you sell, you become priced out, meaning you cannot be on the receiving end of a token transaction anymore.\r\n    Swingies get the rope.\r\n*/\r\ncontract NGMI {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address =\u003e uint) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint)) private _allowances;\r\n\r\n    mapping(address =\u003e bool) private _sellers;\r\n    mapping(address =\u003e bool) private _whiteList;\r\n    \r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint private  _supply;\r\n    uint8 private _decimals;\r\n    \r\n    address private _owner;\r\n    \r\n    constructor() {\r\n        _owner = msg.sender;\r\n        \r\n        _name = \"Not Gonna Make It\";\r\n        _symbol = \"NGMI\";\r\n        _supply = 1_000_000;  // 1 Million\r\n        _decimals = 6;\r\n        \r\n        _balances[_owner] = totalSupply();\r\n        emit Transfer(address(this), _owner, totalSupply());\r\n    }\r\n\r\n    modifier owner {\r\n        require(msg.sender == _owner); _;\r\n    }\r\n    \r\n    function name() public view returns(string memory) {\r\n        return _name;   \r\n    }\r\n    \r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view returns(uint) {\r\n        return _supply.mul(10 ** _decimals);\r\n    }\r\n    \r\n    function balanceOf(address wallet) public view returns(uint) {\r\n        return _balances[wallet];\r\n    }\r\n    \r\n    function getOwner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed fundsOwner, address indexed spender, uint amount);\r\n\r\n    function _transfer(address from, address to, uint amount) private returns(bool) {\r\n        require(balanceOf(from) \u003e= amount, \"Insufficient funds.\");\r\n        \r\n        _balances[from] = balanceOf(from).sub(amount);\r\n        _balances[to] = balanceOf(to).add(amount);\r\n        \r\n        emit Transfer(from, to, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint amount) public returns(bool) {\r\n        require(!_sellers[to] || _whiteList[to], \"The receiver of this transaction has been priced out and is NGMI.\");\r\n        return _transfer(msg.sender, to, amount);\r\n    }\r\n\r\n    // Selling on AMM DEXs will utilize this function to swap funds.\r\n    // Thus, when this func is called we can be certain that a person has initiated a sell swap.\r\n    // Therefore the person is NGMI.\r\n    function transferFrom(address from, address to, uint amount) public returns (bool) {\r\n        uint authorizedAmount = allowance(from, msg.sender);\r\n        require(authorizedAmount \u003e= amount, \"Insufficient authorized funds.\");\r\n        \r\n        _transfer(from, to, amount);\r\n        _allowances[from][msg.sender] = allowance(from, msg.sender).sub(amount);\r\n\r\n        _sellers[from] = true;  // He sold?\r\n        \r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address fundsOwner, address spender) public view returns (uint) {\r\n        return _allowances[fundsOwner][spender];\r\n    }\r\n\r\n    function whitelist(address wallet) public owner returns(bool) {\r\n        _whiteList[wallet] = true;\r\n        return true;\r\n    }\r\n    \r\n    function renounceOwnership() public owner returns(bool) {\r\n        _owner = address(this);\r\n        return true;\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity 0.8.4;\r\n\r\n// SPDX-License-Identifier: PUBLIC\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003c= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c \u003e= a);\r\n        return c;\r\n    }\r\n}"}}