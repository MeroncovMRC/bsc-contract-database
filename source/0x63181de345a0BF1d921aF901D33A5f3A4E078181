// SPDX-License-Identifier: MIT
pragma solidity >=0.8.17;




/// @notice Simple single owner authorization mixin.
/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)
abstract contract Owned {
    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event OwnershipTransferred(address indexed user, address indexed newOwner);

    /*//////////////////////////////////////////////////////////////
                            OWNERSHIP STORAGE
    //////////////////////////////////////////////////////////////*/

    address public owner;

    modifier onlyOwner() virtual {
        require(msg.sender == owner, "UNAUTHORIZED");

        _;
    }

    /*//////////////////////////////////////////////////////////////
                               CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

    constructor(address _owner) {
        owner = _owner;

        emit OwnershipTransferred(address(0), _owner);
    }

    /*//////////////////////////////////////////////////////////////
                             OWNERSHIP LOGIC
    //////////////////////////////////////////////////////////////*/

    function transferOwnership(address newOwner) public virtual onlyOwner {
        owner = newOwner;

        emit OwnershipTransferred(msg.sender, newOwner);
    }
}






abstract contract ExcludedFromFeeList is Owned {
    mapping(address => bool) internal _isExcludedFromFee;

    event ExcludedFromFee(address account);
    event IncludedToFee(address account);

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
        emit ExcludedFromFee(account);
    }

    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
        emit IncludedToFee(account);
    }

    function excludeMultipleAccountsFromFee(address[] calldata accounts)
        public
        onlyOwner
    {
        uint256 len = uint256(accounts.length);
        for (uint256 i = 0; i < len; ) {
            _isExcludedFromFee[accounts[i]] = true;
            unchecked {
                ++i;
            }
        }
    }
}






abstract contract Volunteer is Owned {
    mapping(address => bool) internal _isVolunteer;

    event AddVolunteer(address account);
    event RemoveVolunteer(address account);

    modifier onlyVolunteer() virtual {
        require(_isVolunteer[msg.sender], "UNAUTHORIZED2");
        _;
    }

    function isVolunteer(address account) public view returns (bool) {
        return _isVolunteer[account];
    }

    function addVolunteer(address account) public onlyOwner {
        _isVolunteer[account] = true;
        emit AddVolunteer(account);
    }

    function removeVolunteer(address account) public onlyOwner {
        _isVolunteer[account] = false;
        emit RemoveVolunteer(account);
    }

    function addMultipleVolunteer(
        address[] calldata accounts
    ) public onlyOwner {
        uint256 len = uint256(accounts.length);
        for (uint256 i = 0; i < len; ) {
            _isVolunteer[accounts[i]] = true;
            unchecked {
                ++i;
            }
        }
    }
}




interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    function transferUSDT(address to, uint256 amount) external;
}

abstract contract ERC20 {
    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event Transfer(address indexed from, address indexed to, uint256 amount);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 amount
    );

    /*//////////////////////////////////////////////////////////////
                            METADATA STORAGE
    //////////////////////////////////////////////////////////////*/

    string public name;

    string public symbol;

    uint8 public immutable decimals;

    /*//////////////////////////////////////////////////////////////
                              ERC20 STORAGE
    //////////////////////////////////////////////////////////////*/

    uint256 public immutable totalSupply;

    mapping(address => uint256) public balanceOf;

    mapping(address => mapping(address => uint256)) public allowance;

    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;
        unchecked {
            balanceOf[msg.sender] += _totalSupply;
        }

        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    /*//////////////////////////////////////////////////////////////
                               ERC20 LOGIC
    //////////////////////////////////////////////////////////////*/

    function approve(
        address spender,
        uint256 amount
    ) public virtual returns (bool) {
        allowance[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);

        return true;
    }

    function transfer(
        address to,
        uint256 amount
    ) public virtual returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual returns (bool) {
        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.

        if (allowed != type(uint256).max)
            allowance[from][msg.sender] = allowed - amount;

        _transfer(from, to, amount);
        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        // balanceOf[from] -= amount;
        // Cannot overflow because the sum of all user
        // balances can't exceed the max uint256 value.
        unchecked {
            balanceOf[to] += amount;
        }
        emit Transfer(from, to, amount);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function getAmountsOut(
        uint256 amountIn,
        address[] calldata path
    ) external view returns (uint256[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function swapTokensForExactETH(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactTokensForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapETHForExactTokens(
        uint amountOut,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(
        address owner,
        address spender,
        uint value,
        uint deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(
        address indexed sender,
        uint amount0,
        uint amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(
        uint amount0Out,
        uint amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

address constant USDT = 0x55d398326f99059fF775485246999027B3197955;
address constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

// address constant USDT = 0x0e0bBCc239A8F674fa1cFF5aE95635084B5f8413;
// address constant ROUTER = 0xb1b837E174A42FC5f11E6294bB912c5275C1cAA5;

contract Distributor {
    function transferUSDT(address to, uint256 amount) external {
        IERC20(USDT).transfer(to, amount);
    }
}

contract Distributor2 {}

abstract contract SimpleDexBaseUSDT {
    bool public inSwapAndLiquify;
    IUniswapV2Router constant uniswapV2Router = IUniswapV2Router(ROUTER);
    address public immutable uniswapV2Pair;
    Distributor public immutable distributor;
    Distributor2 public immutable distributor2;
    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor() {
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(
            address(this),
            USDT
        );
        distributor = new Distributor();
        distributor2 = new Distributor2();
    }

    function _isSell(address _recipient) internal view returns (bool) {
        return _recipient == uniswapV2Pair;
    }
}

abstract contract CoinHolder is Owned, SimpleDexBaseUSDT, ERC20, Volunteer {
    mapping(address => bool) public isCoinHolderExempt;
    mapping(address => bool) public isInCoinHolders;
    uint256 public minCoinHolderAmount = 100 ether;
    uint256 public lastLPFeefenhongTimeCoinHolder;
    address[] public allCoinHolder;
    uint256 currentCoinHolderIndex;
    mapping(address => uint256) public coinHolderIndexes;
    mapping(address => uint256) public lastTimeHold;

    constructor() {
        isCoinHolderExempt[address(0)] = true;
        isCoinHolderExempt[address(0xdead)] = true;
        isCoinHolderExempt[uniswapV2Pair] = true;
        isCoinHolderExempt[address(this)] = true;
    }

    function excludeFromCoinHolder(address account) external onlyOwner {
        isCoinHolderExempt[account] = true;
    }

    function setisCoinHolderParams(
        uint256 _minCoinHolderAmount
    ) external onlyOwner {
        minCoinHolderAmount = _minCoinHolderAmount;
    }

    function dividendToCoinHolder(uint256 _gas) public onlyVolunteer {
        if (
            msg.sender != address(this) &&
            lastLPFeefenhongTimeCoinHolder + 6 <= block.timestamp
        ) {
            processCoinHolder(_gas);
            lastLPFeefenhongTimeCoinHolder = block.timestamp;
        }
    }

    function dividendToCoinHolderEff() public onlyVolunteer {
        if (
            msg.sender != address(this) &&
            lastLPFeefenhongTimeCoinHolder + 6 <= block.timestamp
        ) {
            processCoinHolderEff();
            lastLPFeefenhongTimeCoinHolder = block.timestamp;
        }
    }

    function setToCoinHolder(address sender, address recipient) internal {
        if (!isCoinHolderExempt[sender] && sender != uniswapV2Pair)
            setShareCoinHolders(sender);
        if (!isCoinHolderExempt[recipient] && recipient != uniswapV2Pair)
            setShareCoinHolders(recipient);
    }

    function setShareCoinHolders(address shareholder) private {
        if (isInCoinHolders[shareholder]) {
            if (balanceOf[shareholder] < minCoinHolderAmount)
                quitShareCoinHolders(shareholder);
        } else {
            if (balanceOf[shareholder] < minCoinHolderAmount) return;
            addShareholderCoinHolders(shareholder);
            isInCoinHolders[shareholder] = true;
            lastTimeHold[shareholder] = block.timestamp;
        }
    }

    function addShareholderCoinHolders(address shareholder) private {
        coinHolderIndexes[shareholder] = allCoinHolder.length;
        allCoinHolder.push(shareholder);
    }

    function removeShareholderCoinHolders(address shareholder) internal {
        address lastLPHolder = allCoinHolder[allCoinHolder.length - 1];
        uint256 holderIndex = coinHolderIndexes[shareholder];
        allCoinHolder[holderIndex] = lastLPHolder;
        coinHolderIndexes[lastLPHolder] = holderIndex;
        allCoinHolder.pop();
    }

    function quitShareCoinHolders(address shareholder) private {
        removeShareholderCoinHolders(shareholder);
        isInCoinHolders[shareholder] = false;
    }

    function processCoinHolder(uint256 gas) private {
        uint256 shareholderCount = allCoinHolder.length;
        if (shareholderCount == 0) return;
        uint256 nowbanance = balanceOf[address(distributor2)];
        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;
        uint256 theLpTotalSupply = 21_0000_0000 ether;
        uint256 zerolp = balanceOf[address(0)];
        uint256 deadlp = balanceOf[address(0xdead)];
        uint256 thislp = balanceOf[address(this)];
        uint256 pairlp = balanceOf[uniswapV2Pair];
        theLpTotalSupply = theLpTotalSupply - zerolp - deadlp - thislp - pairlp;

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentCoinHolderIndex >= shareholderCount) {
                currentCoinHolderIndex = 0;
            }
            address theHolder = allCoinHolder[currentCoinHolderIndex];
            uint256 trAmount;
            if (
                balanceOf[theHolder] >= minCoinHolderAmount &&
                lastTimeHold[theHolder] + 6 < block.timestamp
            ) {
                unchecked {
                    trAmount =
                        (nowbanance * (balanceOf[theHolder])) /
                        theLpTotalSupply;
                }
                if (trAmount > 0) {
                    balanceOf[address(distributor2)] -= trAmount;
                    unchecked {
                        balanceOf[theHolder] += trAmount;
                    }
                    emit Transfer(address(distributor2), theHolder, trAmount);
                }
            }
            unchecked {
                ++currentCoinHolderIndex;
                ++iterations;
                gasUsed += gasLeft - gasleft();
                gasLeft = gasleft();
            }
        }
    }

    function processCoinHolderEff() private {
        uint256 shareholderCount = allCoinHolder.length;
        if (shareholderCount == 0) return;
        uint256 nowbanance = balanceOf[address(distributor2)];

        uint256 theLpTotalSupply = 21_0000_0000 ether;
        uint256 zerolp = balanceOf[address(0)];
        uint256 deadlp = balanceOf[address(0xdead)];
        uint256 thislp = balanceOf[address(this)];
        uint256 pairlp = balanceOf[uniswapV2Pair];
        theLpTotalSupply = theLpTotalSupply - zerolp - deadlp - thislp - pairlp;

        for (uint256 i = 0; i < shareholderCount; i++) {
            address theHolder = allCoinHolder[i];
            uint256 trAmount;
            uint256 holderBal = balanceOf[theHolder];

            if (
                holderBal >= minCoinHolderAmount &&
                lastTimeHold[theHolder] + 6 < block.timestamp
            ) {
                unchecked {
                    trAmount = (nowbanance * holderBal) / theLpTotalSupply;
                }

                balanceOf[address(distributor2)] -= trAmount;
                unchecked {
                    balanceOf[theHolder] += trAmount;
                }
                emit Transfer(address(distributor2), theHolder, trAmount);
            }
        }
    }
}

abstract contract LpFee is Owned, SimpleDexBaseUSDT, ERC20, Volunteer {
    mapping(address => bool) public isDividendExempt;
    mapping(address => bool) public isInShareholders;
    uint256 public minPeriod = 30 minutes;
    uint256 public lastLPFeefenhongTime;
    address private fromAddress;
    address private toAddress;
    uint256 distributorGasForLp = 600000;
    address[] public shareholders;
    uint256 currentIndex;
    mapping(address => uint256) public shareholderIndexes;
    uint256 public minDistribution = 0.01 ether;
    uint256 public numTokensSellToAddToLiquidity = 10000 ether;

    address constant marketBuy = 0xB79d859720633a412a01978cBDbE36ed0D782a7E;
    address constant marketSell = 0x3B2C0C38a6ea0732bE9153E0f791094f176583B4;

    constructor() {
        isDividendExempt[address(0)] = true;
        isDividendExempt[address(0xdead)] = true;
        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;
    }

    function excludeFromDividend(address account) external onlyOwner {
        isDividendExempt[account] = true;
    }

    function setNumTokensSellToAddToLiquidity(uint256 _num) external onlyOwner {
        numTokensSellToAddToLiquidity = _num;
    }

    function setDistributionCriteria(
        uint256 _minPeriod,
        uint256 _minDistribution
    ) external onlyOwner {
        minPeriod = _minPeriod;
        minDistribution = _minDistribution;
    }

    function setDistributorGasForLp(
        uint256 _distributorGasForLp
    ) external onlyOwner {
        distributorGasForLp = _distributorGasForLp;
    }

    function setToUsersLp(address sender, address recipient) internal {
        if (fromAddress == address(0)) fromAddress = sender;
        if (toAddress == address(0)) toAddress = recipient;
        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair)
            setShare(fromAddress);
        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair)
            setShare(toAddress);
        fromAddress = sender;
        toAddress = recipient;
    }

    function dividendToUsersLp(uint256 _gas) public onlyVolunteer {
        if (
            balanceOf[address(distributor)] >= minDistribution &&
            msg.sender != address(this) &&
            lastLPFeefenhongTime + minPeriod <= block.timestamp
        ) {
            processLp(_gas);
            lastLPFeefenhongTime = block.timestamp;
        }
    }

    function dividendToLpEff() public onlyVolunteer {
        if (
            balanceOf[address(distributor)] >= minDistribution &&
            msg.sender != address(this) &&
            lastLPFeefenhongTime + minPeriod <= block.timestamp
        ) {
            processLpEff();
            lastLPFeefenhongTime = block.timestamp;
        }
    }

    function setShare(address shareholder) private {
        if (isInShareholders[shareholder]) {
            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0)
                quitShare(shareholder);
        } else {
            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;
            addShareholder(shareholder);
            isInShareholders[shareholder] = true;
        }
    }

    function addShareholder(address shareholder) private {
        shareholderIndexes[shareholder] = shareholders.length;
        shareholders.push(shareholder);
    }

    function removeShareholder(address shareholder) internal {
        address lastLPHolder = shareholders[shareholders.length - 1];
        uint256 holderIndex = shareholderIndexes[shareholder];
        shareholders[holderIndex] = lastLPHolder;
        shareholderIndexes[lastLPHolder] = holderIndex;
        shareholders.pop();
    }

    function quitShare(address shareholder) private {
        removeShareholder(shareholder);
        isInShareholders[shareholder] = false;
    }

    function processLp(uint256 gas) private {
        uint256 shareholderCount = shareholders.length;
        if (shareholderCount == 0) return;
        uint256 nowbanance = balanceOf[address(distributor)];
        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;
        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();
        uint256 zerolp = IERC20(uniswapV2Pair).balanceOf(address(0));
        uint256 deadlp = IERC20(uniswapV2Pair).balanceOf(address(0xdead));
        theLpTotalSupply = theLpTotalSupply - zerolp - deadlp;

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }
            address theHolder = shareholders[currentIndex];
            uint256 trAmount;
            unchecked {
                trAmount =
                    (nowbanance *
                        (IERC20(uniswapV2Pair).balanceOf(theHolder))) /
                    theLpTotalSupply;
            }
            if (trAmount > 0) {
                balanceOf[address(distributor)] -= trAmount;
                unchecked {
                    balanceOf[theHolder] += trAmount;
                }
                emit Transfer(address(distributor), theHolder, trAmount);
            }
            unchecked {
                ++currentIndex;
                ++iterations;
                gasUsed += gasLeft - gasleft();
                gasLeft = gasleft();
            }
        }
    }

    function processLpEff() private {
        uint256 shareholderCount = shareholders.length;
        if (shareholderCount == 0) return;
        uint256 nowbanance = balanceOf[address(distributor)];

        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();
        uint256 zerolp = IERC20(uniswapV2Pair).balanceOf(address(0));
        uint256 deadlp = IERC20(uniswapV2Pair).balanceOf(address(0xdead));
        theLpTotalSupply = theLpTotalSupply - zerolp - deadlp;

        for (uint256 i = 0; i < shareholderCount; i++) {
            address theHolder = shareholders[i];
            uint256 trAmount;
            unchecked {
                trAmount =
                    (nowbanance *
                        (IERC20(uniswapV2Pair).balanceOf(theHolder))) /
                    theLpTotalSupply;
            }
            if (trAmount > 0) {
                balanceOf[address(distributor)] -= trAmount;
                unchecked {
                    balanceOf[theHolder] += trAmount;
                }
                emit Transfer(address(distributor), theHolder, trAmount);
            }
        }
    }

    function shouldSwapAndLiquify(address sender) internal view returns (bool) {
        bool overMinTokenBalance = balanceOf[address(this)] >=
            numTokensSellToAddToLiquidity;
        if (
            overMinTokenBalance && !inSwapAndLiquify && sender != uniswapV2Pair
        ) {
            return true;
        } else {
            return false;
        }
    }

    function swapAndLiquify() internal lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(USDT);
        // make the swap
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            numTokensSellToAddToLiquidity,
            0, // accept any amount of ETH
            path,
            address(distributor),
            block.timestamp
        );

        uint256 amount = IERC20(USDT).balanceOf(address(distributor));
        uint256 half = amount / 2;

        distributor.transferUSDT(marketBuy, half);
        distributor.transferUSDT(marketSell, amount - half);
    }
}

contract PinfrToken is ExcludedFromFeeList, LpFee, CoinHolder {
    mapping(address => address) public inviter;
    uint256 public minBindAmount = 1 ether;
    address constant defaultFeeREc = 0x692d62be38fcb6F6908C90A546Be58Cd5062BBb9;
    address constant defaultinviter =
        0x5220302339100E71Fe283139F346B043D2E0A250;

    mapping(address => bool) public memberHolders;
    mapping(address => bool) public isTokenholder;
    uint256 public totalHolders;

    function setMinBindAmount(uint256 _minBindAmount) external onlyOwner {
        minBindAmount = _minBindAmount;
    }

    constructor()
        Owned(msg.sender)
        ERC20("TTPT", "TTPT", 18, 21_0000_0000 ether)
    {
        excludeFromFee(msg.sender);
        excludeFromFee(address(this));
        addVolunteer(msg.sender);
        totalHolders = 1;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual override {
        if (inSwapAndLiquify) {
            balanceOf[sender] -= amount;
            super._transfer(sender, recipient, amount);
            return;
        }

        setToUsersLp(sender, recipient);

        if (shouldSwapAndLiquify(sender)) {
            swapAndLiquify();
        }

        if (!isTokenholder[recipient] && amount > 0) {
            isTokenholder[recipient] = true;
            totalHolders += 1;
            if (totalHolders <= 5000) {
                memberHolders[recipient] = true;
            }
        }

        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {
            bool shouldInvite = (balanceOf[recipient] == 0 &&
                inviter[recipient] == address(0) &&
                amount >= minBindAmount);
            if (shouldInvite) {
                inviter[recipient] = sender;
            }

            balanceOf[sender] -= amount;
            super._transfer(sender, recipient, amount);
            setToCoinHolder(sender, recipient);
            if (balanceOf[sender] == 0) {
                isTokenholder[recipient] = false;
                if (totalHolders >= 1) totalHolders -= 1;
            }
            return;
        }

        if (sender != uniswapV2Pair && memberHolders[sender]) {
            require(balanceOf[sender] > 500 ether, "< 500");
            if (amount > balanceOf[sender] - 500 ether) {
                amount = balanceOf[sender] - 500 ether;
            }
        }

        if (sender == uniswapV2Pair) {
            bool shouldInvite = (balanceOf[recipient] == 0 &&
                inviter[recipient] == address(0));

            balanceOf[sender] -= amount;

            uint256 fee = (amount * 20) / 100;
            uint256 tamount = amount - fee;
            super._transfer(sender, address(this), fee);
            super._transfer(sender, recipient, tamount);
            setToCoinHolder(sender, recipient);

            if (shouldInvite) {
                inviter[recipient] = defaultinviter;
            }
        } else if (recipient == uniswapV2Pair) {
            balanceOf[sender] -= amount;

            uint256 fee = (amount * 20) / 100;
            uint256 feeInvite = (amount * 10) / 100;
            uint256 tamount = amount - fee - feeInvite;
            super._transfer(sender, address(this), fee);
            super._transfer(sender, recipient, tamount);

            address cur = sender;
            uint8[30] memory inviteRate = [
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ];
            uint256 sum;
            for (uint8 i = 0; i < 30; ) {
                uint8 rate = inviteRate[i];
                cur = inviter[cur];
                uint256 curTAmount = (feeInvite * rate) / 100;
                if (cur != address(0)) {
                    if (balanceOf[cur] >= minCoinHolderAmount) {
                        super._transfer(sender, cur, curTAmount);
                        sum += curTAmount;
                    } else {
                        super._transfer(sender, defaultFeeREc, curTAmount);
                        sum += curTAmount;
                    }
                } else {
                    super._transfer(sender, defaultFeeREc, feeInvite - sum);
                    break;
                }

                unchecked {
                    ++i;
                }
            }

            setToCoinHolder(sender, recipient);
        } else {
            bool shouldInvite = (balanceOf[recipient] == 0 &&
                inviter[recipient] == address(0) &&
                amount >= minBindAmount);

            if (shouldInvite) {
                inviter[recipient] = sender;
            }

            balanceOf[sender] -= amount;
            super._transfer(sender, recipient, amount);
            setToCoinHolder(sender, recipient);
        }

        if (balanceOf[sender] == 0) {
            isTokenholder[recipient] = false;
            if (totalHolders >= 1) totalHolders -= 1;
        }
    }
}