// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StarFuture {
    string public constant name = "STAR Future";
    string public constant symbol = "STAR";
    uint8 public constant decimals = 18;
    uint256 public constant totalSupply = 300000000000000 ether;

    address payable public feeReceiver;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);

    constructor(address payable _feeReceiver) {
        balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);

        feeReceiver = _feeReceiver;
    }

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(recipient != address(0), "Transfer to zero address");
        require(amount <= balances[msg.sender], "Insufficient balance");

        uint256 feeAmount = amount / 100;
        uint256 transferAmount = amount - feeAmount;

        balances[msg.sender] -= amount;
        balances[recipient] += transferAmount;
        balances[feeReceiver] += feeAmount;

        emit Transfer(msg.sender, recipient, transferAmount);
        emit Transfer(msg.sender, feeReceiver, feeAmount);

        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(recipient != address(0), "Transfer to zero address");
        require(amount <= balances[sender], "Insufficient balance");
        require(amount <= allowances[sender][msg.sender], "Insufficient allowance");

        uint256 feeAmount = amount / 100;
        uint256 transferAmount = amount - feeAmount;

        balances[sender] -= amount;
        balances[recipient] += transferAmount;
        balances[feeReceiver] += feeAmount;
        allowances[sender][msg.sender] -= amount;

        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, feeReceiver, feeAmount);
        emit Approval(sender, msg.sender, allowances[sender][msg.sender]);

        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        require(spender != address(0), "Approval to zero address");

        allowances[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);

        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return allowances[owner][spender];
    }
}