// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

interface IERC20 {
    function approve(address spender, uint256 amount) external returns (bool);
}

interface IPancakeRouter02 {
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
    function WETH() external pure returns (address);
}

contract SwapContract {
    IPancakeRouter02 public pancakeRouter;

    constructor(address _router) public {
        pancakeRouter = IPancakeRouter02(_router);
    }

    function swapTokensForETH(address _tokenIn, uint amountIn, uint amountOutMin, address to, address[] calldata path) public {
        IERC20(_tokenIn).approve(address(pancakeRouter), amountIn);
        pancakeRouter.swapExactTokensForETH(amountIn, amountOutMin, path, to, block.timestamp);
    }

    function swapETHForTokens(uint amountOutMin, address to, address[] calldata path) public payable {
        pancakeRouter.swapExactETHForTokens{value: msg.value}(amountOutMin, path, to, block.timestamp);
    }
}