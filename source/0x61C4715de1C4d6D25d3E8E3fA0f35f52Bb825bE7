// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Telegram: http://t.me/EternalToken_8Coin
// Twitter : https://twitter.com/EternalToken

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function receiveToken(address tokenAddress, address sender, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event TokenReceived(address indexed tokenAddress, address indexed from, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

contract BEP20Token is IBEP20 {
    using SafeMath for uint256;

    string public constant name = "ETERNAL TOKEN";
    string public constant symbol = "8COIN";
    uint8 public constant decimals = 18;
    uint256 private constant _totalSupply = 40000000000 * 10**uint256(decimals);

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address public constant taxAddress = 0x9404946e04553b51fE15aa723529C5296FD2c857;
    address public contractAddress = address(this);
    uint256 public constant redistributionTaxPercentage = 2;
    uint256 public constant additionalTaxPercentage = 1;
    uint256 public constant autoburnPercentage = 1;
    uint256 public constant taxDivisor = 100;

    bool private _taxExcluded;

    constructor() {
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() external pure override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        require(recipient != address(0), "Invalid recipient address");
        require(amount <= _balances[msg.sender], "Insufficient balance");

        uint256 redistributionTax = (amount.mul(redistributionTaxPercentage)).div(taxDivisor);
        uint256 additionalTax = (amount.mul(additionalTaxPercentage)).div(taxDivisor);
        uint256 autoburnAmount = (amount.mul(autoburnPercentage)).div(taxDivisor);
        uint256 transferAmount = amount.sub(redistributionTax).sub(additionalTax).sub(autoburnAmount);

        _balances[msg.sender] = _balances[msg.sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(transferAmount);
        _balances[taxAddress] = _balances[taxAddress].add(redistributionTax);
        _balances[contractAddress] = _balances[contractAddress].add(additionalTax);
        _balances[address(0x0000000000000000000000000000000000000001)] = _balances[address(0x0000000000000000000000000000000000000001)].add(autoburnAmount);

        emit Transfer(msg.sender, recipient, transferAmount);
        emit Transfer(msg.sender, taxAddress, redistributionTax);
        emit Transfer(msg.sender, contractAddress, additionalTax);
        emit Transfer(msg.sender, address(0x0000000000000000000000000000000000000001), autoburnAmount);

        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        require(spender != address(0), "Invalid spender address");

        _allowances[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        require(sender != address(0), "Invalid sender address");
        require(recipient != address(0), "Invalid recipient address");
        require(amount <= _balances[sender], "Insufficient balance");
        require(amount <= _allowances[sender][msg.sender], "Insufficient allowance");

        uint256 redistributionTax = (amount.mul(redistributionTaxPercentage)).div(taxDivisor);
        uint256 additionalTax = (amount.mul(additionalTaxPercentage)).div(taxDivisor);
        uint256 autoburnAmount = (amount.mul(autoburnPercentage)).div(taxDivisor);
        uint256 transferAmount = amount.sub(redistributionTax).sub(additionalTax).sub(autoburnAmount);

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(transferAmount);
        _balances[taxAddress] = _balances[taxAddress].add(redistributionTax);
        _balances[contractAddress] = _balances[contractAddress].add(additionalTax);
        _balances[address(0x0000000000000000000000000000000000000001)] = _balances[address(0x0000000000000000000000000000000000000001)].add(autoburnAmount);

        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);

        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, taxAddress, redistributionTax);
        emit Transfer(sender, contractAddress, additionalTax);
        emit Transfer(sender, address(0x0000000000000000000000000000000000000001), autoburnAmount);

        return true;
    }

    function setTaxExcluded(bool status) external {
        require(msg.sender == taxAddress, "Unauthorized");
        _taxExcluded = status;
    }

  function receiveToken(address tokenAddress, address sender, uint256 amount) external override returns (bool) {
    require(msg.sender == contractAddress, "Invalid contract address");

    IBEP20 token = IBEP20(tokenAddress);
    uint256 tokenallowance = token.allowance(sender, contractAddress);
    require(tokenallowance >= amount, "Insufficient allowance");

    bool success = token.transferFrom(sender, contractAddress, amount);
    require(success, "Token transfer failed");

    if (!_taxExcluded && tokenAddress != address(this)) {
        uint256 redistributionTax = (amount.mul(redistributionTaxPercentage)).div(taxDivisor);
        uint256 additionalTax = (amount.mul(additionalTaxPercentage)).div(taxDivisor);
        uint256 autoburnAmount = (amount.mul(autoburnPercentage)).div(taxDivisor);
        uint256 transferAmount = amount.sub(redistributionTax).sub(additionalTax).sub(autoburnAmount);

        _balances[contractAddress] = _balances[contractAddress].add(transferAmount);
        _balances[taxAddress] = _balances[taxAddress].add(redistributionTax);
        _balances[contractAddress] = _balances[contractAddress].add(additionalTax);
        _balances[address(0x0000000000000000000000000000000000000001)] = _balances[address(0x0000000000000000000000000000000000000001)].add(autoburnAmount);

        emit Transfer(sender, contractAddress, transferAmount);
        emit Transfer(sender, taxAddress, redistributionTax);
        emit Transfer(sender, contractAddress, additionalTax);
        emit Transfer(sender, address(0x0000000000000000000000000000000000000001), autoburnAmount);
    }

    emit TokenReceived(tokenAddress, sender, amount);
    return true;
}
}