
// File: contracts/Staking/BoostPool.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.6.12;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

import {FixedPointMath} from "./libraries/FixedPointMath.sol";
import {Pool} from "./libraries/boostPools/Pool.sol";
import {Stake} from "./libraries/boostPools/Stake.sol";

/// @title BoostPool
/// @dev A contract which allows users to stake to farm tokens.
///
/// This contract was inspired by Chef Nomi's 'MasterChef' contract which can be found in this
/// repository: https://github.com/sushiswap/sushiswap.
contract BoostPool is ReentrancyGuard {
    using FixedPointMath for FixedPointMath.uq192x64;
    using Pool for Pool.Data;
    using SafeERC20 for IERC20;
    using SafeMath for uint256;
    using Stake for Stake.Data;

    struct LockTimeWeighted {
        uint256 lockTime;
        uint256 weighted;
    }

    struct UserDepositedOrder {
        uint256 amount;
        uint256 expiredTime;
        uint256 weighted;
        bool isWithdraw;
    }

    struct Cooldown {
        uint256 claimStart;
        uint256 claimEnd;
    }

    event PendingGovernanceUpdated(address pendingGovernance);

    event GovernanceUpdated(address governance);

    event RewardRateUpdated(uint256 rewardRate);

    event LockTimeWeightedSet(uint256 lockTime, uint256 weighted);

    event CooldownPeriodUpdated(uint256 period);

    event PenaltyPercentUpdated(uint256 percent);

    event TokensDeposited(address indexed user, uint256 amount, uint256 weightedAmount);

    event TokensWithdrawn(address indexed user, uint256 amount, uint256 weightedAmount);

    event TokensClaimed(address indexed user, uint256 amount);

    event CooldownStart(address indexed user, uint256 claimStart, uint256 claimEnd);

    /// @dev The token which will be minted as a reward for staking.
    IERC20 public reward;

    /// @dev The address of the account which currently has administrative capabilities over this contract.
    address public governance;

    /// @dev The address which is the candidate of governance
    address public pendingGovernance;

    /// @dev The claim period after cooldown period is expired
    uint256 public constant CLAIM_PERIOD = 86400;

    /// @dev The resolution of fixed point. The resolution allows for a granularity of 1% increments.
    uint256 public constant PERCENT_RESOLUTION = 100;

    /// @dev The cooldown period
    uint256 public cooldownPeriod;

    /// @dev The percent of reward will be distributed to the pool if user claims reward immediately.
    uint256 public penaltyPercent;

    /// @dev The weight in the pool of different lock time
    LockTimeWeighted[] lockTimeWeightedList;

    /// @dev The count of user's deposited orders.
    mapping(address => uint256) public userOrderCount;

    /// @dev The record of user's deposited orders.
    mapping(address => mapping(uint256 => UserDepositedOrder)) public userDepositedOrder;

    /// @dev The cooldown period for each user.
    mapping(address => Cooldown) public userCooldown;

    /// @dev The context shared between the pools.
    Pool.Context private _ctx;

    /// @dev The pool information.
    Pool.Data private pool;

    /// @dev A mapping of all of the user stakes mapped by address.
    mapping(address => Stake.Data) private _stakes;

    constructor(
        IERC20 _token,
        IERC20 _reward,
        address _governance
    ) public {
        require(address(_token) != address(0), "BoostPool: token address cannot be 0x0");
        require(address(_reward) != address(0), "BoostPool: reward address cannot be 0x0");
        require(_governance != address(0), "BoostPool: governance address cannot be 0x0");

        pool.set(_token);

        reward = _reward;
        governance = _governance;
        cooldownPeriod = 86400 * 7;
        penaltyPercent = 50;
    }

    /// @dev A modifier which reverts when the caller is not the governance.
    modifier onlyGovernance() {
        require(msg.sender == governance, "BoostPool: only governance");
        _;
    }

    /// @dev Sets the governance.
    ///
    /// This function can only called by the current governance.
    ///
    /// @param _pendingGovernance the new pending governance.
    function setPendingGovernance(address _pendingGovernance) external onlyGovernance {
        require(_pendingGovernance != address(0), "BoostPool: pending governance address cannot be 0x0");
        pendingGovernance = _pendingGovernance;

        emit PendingGovernanceUpdated(_pendingGovernance);
    }

    function acceptGovernance() external {
        require(msg.sender == pendingGovernance, "BoostPool: only pending governance");

        governance = pendingGovernance;

        emit GovernanceUpdated(pendingGovernance);
    }

    /// @dev Sets the distribution reward rate.
    ///
    /// @param _rewardRate The number of tokens to distribute per block.
    function setRewardRate(uint256 _rewardRate) external onlyGovernance {
        Pool.Data storage _pool = pool.get();
        _pool.update(_ctx);

        _ctx.rewardRate = _rewardRate;

        emit RewardRateUpdated(_rewardRate);
    }

    /// @dev set lock time and its weight
    ///
    /// @param _lockTime the lock time of the deposited order
    /// @param _weighted the weighted of the deposited order
    function setLockTimeWeighted(uint256 _lockTime, uint256 _weighted) external onlyGovernance {
        lockTimeWeightedList.push(LockTimeWeighted({lockTime: _lockTime, weighted: _weighted}));

        emit LockTimeWeightedSet(_lockTime, _weighted);
    }

    /// @dev set cool down period
    ///
    /// @param _cooldownPeriod the cooldown period when user claims reward
    function setCooldown(uint256 _cooldownPeriod) external onlyGovernance {
        cooldownPeriod = _cooldownPeriod;

        emit CooldownPeriodUpdated(_cooldownPeriod);
    }

    /// @dev set penalty percent
    ///
    /// @param _penaltyPercent the percent of reward will be distributed to other users
    function setPenaltyPercent(uint256 _penaltyPercent) external onlyGovernance {
        require(_penaltyPercent <= 100, "BoostPool: penalty percent should be less or equal to 100");
        penaltyPercent = _penaltyPercent;

        emit PenaltyPercentUpdated(_penaltyPercent);
    }

    /// @dev Stakes tokens into a pool.
    ///
    /// @param _depositAmount the amount of tokens to deposit.
    /// @param _index the index of the lock time weighted list
    function deposit(uint256 _depositAmount, uint256 _index) external nonReentrant {
        require(_index < lockTimeWeightedList.length, "invalid index");

        Pool.Data storage _pool = pool.get();
        _pool.update(_ctx);

        Stake.Data storage _stake = _stakes[msg.sender];
        _stake.update(_pool, _ctx);

        _deposit(_depositAmount, _index);
    }

    /// @dev Withdraws staked tokens from a pool.
    ///
    /// @param _index           The index of deposited order.
    function withdraw(uint256[] calldata _index) external nonReentrant {
        Pool.Data storage _pool = pool.get();
        _pool.update(_ctx);

        Stake.Data storage _stake = _stakes[msg.sender];
        _stake.update(_pool, _ctx);

        require(_index.length <= userOrderCount[msg.sender], "invalid index");

        uint256 withdrawAmount;
        uint256 weightedWithdrawAmount;
        for (uint256 i = 0; i < _index.length; i++) {
            UserDepositedOrder storage depositedOrder = userDepositedOrder[msg.sender][_index[i]];
            require(_index[i] < userOrderCount[msg.sender], "invalid index");
            require(!depositedOrder.isWithdraw, "The order has been withdrew");
            require(depositedOrder.expiredTime < block.timestamp, "The lock time is not expired!");
            depositedOrder.isWithdraw = true;
            withdrawAmount = withdrawAmount.add(depositedOrder.amount);
            weightedWithdrawAmount = weightedWithdrawAmount.add(depositedOrder.amount.mul(depositedOrder.weighted));
        }

        _withdraw(withdrawAmount, weightedWithdrawAmount);
    }

    /// @dev Claims all rewarded tokens from a pool.
    function claimImmediately() external nonReentrant {
        Cooldown memory cooldown = userCooldown[msg.sender];
        require(cooldown.claimEnd < block.timestamp, "wait for the last cooldown period expired");

        Pool.Data storage _pool = pool.get();
        _pool.update(_ctx);

        Stake.Data storage _stake = _stakes[msg.sender];
        _stake.update(_pool, _ctx);

        uint256 penalty = _stake.totalUnclaimed.mul(penaltyPercent).div(PERCENT_RESOLUTION);
        _pool.distribute(penalty);
        _stake.totalUnclaimed = _stake.totalUnclaimed.sub(penalty);

        if (address(reward) == address(_pool.token)) {
            require(_pool.totalDeposited.add(_stake.totalUnclaimed) <= reward.balanceOf(address(this)), "pool has no enough rewards");
        }

        _claim();
    }

    /// @dev Claims all rewarded tokens from a pool.
    function claim() external nonReentrant {
        Cooldown storage cooldown = userCooldown[msg.sender];
        require(cooldown.claimStart <= block.timestamp && cooldown.claimEnd >= block.timestamp, "not in the claim period!");

        cooldown.claimStart = 0;
        cooldown.claimEnd = 0;

        Pool.Data storage _pool = pool.get();
        _pool.update(_ctx);

        Stake.Data storage _stake = _stakes[msg.sender];
        _stake.update(_pool, _ctx);

        if (address(reward) == address(_pool.token)) {
            require(_pool.totalDeposited.add(_stake.totalUnclaimed) <= reward.balanceOf(address(this)), "pool has no enough rewards");
        }

        _claim();
    }

    /// @dev lead user into cooldown period.
    function startCoolDown() external nonReentrant {
        Cooldown storage cooldown = userCooldown[msg.sender];
        require(cooldown.claimEnd < block.timestamp, "wait for the last cooldown period expired");
        cooldown.claimStart = block.timestamp + cooldownPeriod;
        cooldown.claimEnd = block.timestamp + cooldownPeriod + CLAIM_PERIOD;

        emit CooldownStart(msg.sender, cooldown.claimStart, cooldown.claimEnd);
    }

    /// @dev donate reward to the pool
    ///
    /// @param _donateAmount The donate amount
    function donateReward(uint256 _donateAmount) external nonReentrant {
        Pool.Data storage _pool = pool.get();
        _pool.update(_ctx);

        _pool.distribute(_donateAmount);
        reward.transferFrom(msg.sender, address(this), _donateAmount);
    }

    /// @dev Gets the rate at which tokens are minted to stakers for all pools.
    ///
    /// @return the reward rate.
    function rewardRate() external view returns (uint256) {
        return _ctx.rewardRate;
    }

    /// @dev Gets the token a pool accepts.
    ///
    /// @return the token.
    function getPoolToken() external view returns (IERC20) {
        Pool.Data storage _pool = pool.get();
        return _pool.token;
    }

    /// @dev Gets the total amount of funds staked in a pool.
    ///
    /// @return the total amount of staked or deposited tokens.
    function getPoolTotalDeposited() external view returns (uint256) {
        Pool.Data storage _pool = pool.get();
        return _pool.totalDeposited;
    }

    /// @dev Gets the pool total deposited weight.
    ///
    /// @return the pool total deposited weight.
    function getPoolTotalDepositedWeight() external view returns (uint256) {
        Pool.Data storage _pool = pool.get();
        return _pool.totalDepositedWeight;
    }

    /// @dev Gets the number of tokens a user has staked into a pool.
    ///
    /// @param _account The account to query.
    ///
    /// @return the amount of deposited tokens.
    function getStakeTotalDeposited(address _account) external view returns (uint256) {
        Stake.Data storage _stake = _stakes[_account];
        return _stake.totalDeposited;
    }

    /// @dev Gets the user's deposited weight.
    ///
    /// @param _account The account to query.
    ///
    /// @return the account's total boost weight.
    function getStakeTotalDepositedWeight(address _account) external view returns (uint256) {
        Stake.Data storage _stake = _stakes[_account];
        return _stake.totalDepositedWeight;
    }

    /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool immediately.
    ///
    /// @param _account The account to get the unclaimed balance of.
    ///
    /// @return the amount of unclaimed reward tokens a user has in a pool.
    function getStakeTotalUnclaimedImmediately(address _account) external view returns (uint256) {
        Stake.Data storage _stake = _stakes[_account];

        uint256 updatedTotalUnclaimed = _stake.getUpdatedTotalUnclaimed(pool.get(), _ctx);
        uint256 penalty = updatedTotalUnclaimed.mul(penaltyPercent).div(PERCENT_RESOLUTION);

        return updatedTotalUnclaimed.sub(penalty);
    }

    /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool.
    ///
    /// @param _account The account to get the unclaimed balance of.
    ///
    /// @return the amount of unclaimed reward tokens a user has in a pool.
    function getStakeTotalUnclaimed(address _account) external view returns (uint256) {
        Stake.Data storage _stake = _stakes[_account];
        return _stake.getUpdatedTotalUnclaimed(pool.get(), _ctx);
    }

    /// @dev Gets the number of user's deposited order count.
    ///
    /// @param _account The user account.
    ///
    /// @return count the count of user's deposited order.
    function getUserOrderCount(address _account) external view returns (uint256 count) {
        return userOrderCount[_account];
    }

    /// @dev Gets user's deposited order by index.
    ///
    /// @param _account The user account.
    /// @param _index The deposited order index.
    ///
    /// @return amount the amount of the deposited order.
    /// @return expiredTime the expired time of the deposited order.
    /// @return weighted the weighted of the deposited order
    /// @return isWithdraw the deposited order is withdraw or not.
    function getUserDepositOrderByIndex(address _account, uint256 _index)
        external
        view
        returns (
            uint256 amount,
            uint256 expiredTime,
            uint256 weighted,
            bool isWithdraw
        )
    {
        UserDepositedOrder memory userDepositedOrder = userDepositedOrder[_account][_index];
        return (userDepositedOrder.amount, userDepositedOrder.expiredTime, userDepositedOrder.weighted, userDepositedOrder.isWithdraw);
    }

    /// @dev Gets lock time weighted list length.
    ///
    /// @return the lock time weighted list length.
    function getLockTimeWeightedListLength() external view returns (uint256) {
        return lockTimeWeightedList.length;
    }

    /// @dev Gets the lock time and weighted of lock time weighted list by index.
    ///
    /// @param _index index.
    ///
    /// @return lockTime the lock time.
    /// @return weighted the weighted when user locks the time.
    function getLockTimeWeightedByIndex(uint256 _index) external view returns (uint256 lockTime, uint256 weighted) {
        require(_index < lockTimeWeightedList.length, "invalid index");
        LockTimeWeighted memory lockTimeWeight = lockTimeWeightedList[_index];
        return (lockTimeWeight.lockTime, lockTimeWeight.weighted);
    }

    /// @dev Gets user's claim reward period.
    ///
    /// @param _account The user account.
    ///
    /// @return claimStart the start time that user can claim reward.
    /// @return claimEnd the end time that user can claim reward.
    function getUserClaimPeriod(address _account) external view returns (uint256 claimStart, uint256 claimEnd) {
        Cooldown memory cooldown = userCooldown[_account];
        return (cooldown.claimStart, cooldown.claimEnd);
    }

    /// @dev Stakes tokens into a pool.
    ///
    /// The pool and stake MUST be updated before calling this function.
    ///
    /// @param _depositAmount the amount of tokens to deposit.
    /// @param _index the index of the lock time weighted list
    function _deposit(uint256 _depositAmount, uint256 _index) internal {
        Pool.Data storage _pool = pool.get();
        Stake.Data storage _stake = _stakes[msg.sender];
        LockTimeWeighted memory lockTimeWeight = lockTimeWeightedList[_index];

        _pool.totalDeposited = _pool.totalDeposited.add(_depositAmount);
        _stake.totalDeposited = _stake.totalDeposited.add(_depositAmount);
        _pool.totalDepositedWeight = _pool.totalDepositedWeight.add(_depositAmount.mul(lockTimeWeight.weighted));
        _stake.totalDepositedWeight = _stake.totalDepositedWeight.add(_depositAmount.mul(lockTimeWeight.weighted));

        userDepositedOrder[msg.sender][userOrderCount[msg.sender]] = UserDepositedOrder({amount: _depositAmount, expiredTime: block.timestamp.add(lockTimeWeight.lockTime), weighted: lockTimeWeight.weighted, isWithdraw: false});

        userOrderCount[msg.sender] = userOrderCount[msg.sender] + 1;

        _pool.token.transferFrom(msg.sender, address(this), _depositAmount);

        emit TokensDeposited(msg.sender, _depositAmount, _depositAmount.mul(lockTimeWeight.weighted));
    }

    /// @dev Withdraws staked tokens from a pool.
    ///
    /// The pool and stake MUST be updated before calling this function.
    ///
    /// @param _withdrawAmount  The number of tokens to withdraw.
    /// @param _weightedWithdrawAmount The weighted withdraw amount
    function _withdraw(uint256 _withdrawAmount, uint256 _weightedWithdrawAmount) internal {
        Pool.Data storage _pool = pool.get();
        Stake.Data storage _stake = _stakes[msg.sender];

        _pool.totalDeposited = _pool.totalDeposited.sub(_withdrawAmount);
        _stake.totalDeposited = _stake.totalDeposited.sub(_withdrawAmount);
        _pool.totalDepositedWeight = _pool.totalDepositedWeight.sub(_weightedWithdrawAmount);
        _stake.totalDepositedWeight = _stake.totalDepositedWeight.sub(_weightedWithdrawAmount);

        _pool.token.transfer(msg.sender, _withdrawAmount);

        emit TokensWithdrawn(msg.sender, _withdrawAmount, _weightedWithdrawAmount);
    }

    /// @dev Claims all rewarded tokens from a pool.
    ///
    /// The pool and stake MUST be updated before calling this function.
    ///
    /// @notice use this function to claim the tokens from a corresponding pool by ID.
    function _claim() internal {
        Stake.Data storage _stake = _stakes[msg.sender];

        uint256 _claimAmount = _stake.totalUnclaimed;
        _stake.totalUnclaimed = 0;

        reward.transfer(msg.sender, _claimAmount);

        emit TokensClaimed(msg.sender, _claimAmount);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "../utils/Context.sol";
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}


// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "./IERC20.sol";
import "../../math/SafeMath.sol";
import "../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: contracts/Staking/libraries/FixedPointMath.sol
//SPDX-License-Identifier: GPL-3.0
pragma solidity 0.6.12;

library FixedPointMath {
    uint256 public constant DECIMALS = 18;
    uint256 public constant SCALAR = 10**DECIMALS;

    struct uq192x64 {
        uint256 x;
    }

    function fromU256(uint256 value) internal pure returns (uq192x64 memory) {
        uint256 x;
        require(value == 0 || (x = value * SCALAR) / SCALAR == value);
        return uq192x64(x);
    }

    function maximumValue() internal pure returns (uq192x64 memory) {
        return uq192x64(uint256(-1));
    }

    function add(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {
        uint256 x;
        require((x = self.x + value.x) >= self.x);
        return uq192x64(x);
    }

    function add(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {
        return add(self, fromU256(value));
    }

    function sub(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {
        uint256 x;
        require((x = self.x - value.x) <= self.x);
        return uq192x64(x);
    }

    function sub(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {
        return sub(self, fromU256(value));
    }

    function mul(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {
        uint256 x;
        require(value == 0 || (x = self.x * value) / value == self.x);
        return uq192x64(x);
    }

    function div(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {
        require(value != 0);
        return uq192x64(self.x / value);
    }

    function cmp(uq192x64 memory self, uq192x64 memory value) internal pure returns (int256) {
        if (self.x < value.x) {
            return -1;
        }

        if (self.x > value.x) {
            return 1;
        }

        return 0;
    }

    function decode(uq192x64 memory self) internal pure returns (uint256) {
        return self.x / SCALAR;
    }
}


// File: contracts/Staking/libraries/boostPools/Pool.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.6.12;

import {Math} from "@openzeppelin/contracts/math/Math.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";

import {FixedPointMath} from "../FixedPointMath.sol";

/// @title Pool
///
/// @dev A library which provides the Pool data struct and associated functions.
library Pool {
    using FixedPointMath for FixedPointMath.uq192x64;
    using Pool for Pool.Data;
    using SafeMath for uint256;

    struct Context {
        uint256 rewardRate;
    }

    struct Data {
        IERC20 token;
        uint256 totalDeposited;
        uint256 totalDepositedWeight;
        FixedPointMath.uq192x64 accumulatedRewardWeight;
        uint256 lastUpdatedBlock;
    }

    /// @dev Updates the pool.
    ///
    /// @param _ctx the pool context.
    function update(Data storage _data, Context storage _ctx) internal {
        _data.accumulatedRewardWeight = _data.getUpdatedAccumulatedRewardWeight(_ctx);
        _data.lastUpdatedBlock = block.number;
    }

    /// @dev distribute rewards to other users.
    ///
    /// @param _distributeAmount the amount will be distributed.
    function distribute(Data storage _data, uint256 _distributeAmount) internal {
        FixedPointMath.uq192x64 memory distributeAmount = FixedPointMath.fromU256(_distributeAmount).div(_data.totalDepositedWeight);
        _data.accumulatedRewardWeight = _data.accumulatedRewardWeight.add(distributeAmount);
    }

    /// @dev Gets the accumulated reward weight of a pool.
    ///
    /// @param _ctx the pool context.
    ///
    /// @return the accumulated reward weight.
    function getUpdatedAccumulatedRewardWeight(Data storage _data, Context storage _ctx) internal view returns (FixedPointMath.uq192x64 memory) {
        if (_data.totalDeposited == 0) {
            return _data.accumulatedRewardWeight;
        }

        uint256 _elapsedTime = block.number.sub(_data.lastUpdatedBlock);
        if (_elapsedTime == 0) {
            return _data.accumulatedRewardWeight;
        }

        uint256 _distributeAmount = _ctx.rewardRate.mul(_elapsedTime);

        if (_distributeAmount == 0) {
            return _data.accumulatedRewardWeight;
        }

        FixedPointMath.uq192x64 memory _rewardWeight = FixedPointMath.fromU256(_distributeAmount).div(_data.totalDepositedWeight);
        return _data.accumulatedRewardWeight.add(_rewardWeight);
    }

    /// @dev Adds an element to the list.
    function set(Data storage _self, IERC20 _token) internal {
        _self.token = _token;
        _self.totalDeposited = 0;
        _self.totalDepositedWeight = 0;
        _self.accumulatedRewardWeight = FixedPointMath.uq192x64(0);
        _self.lastUpdatedBlock = block.number;
    }

    /// @dev Gets an element from the list.
    ///
    /// @return the element at the specified index.
    function get(Data storage _self) internal view returns (Data storage) {
        return _self;
    }
}


// File: contracts/Staking/libraries/boostPools/Stake.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.6.12;

import {Math} from "@openzeppelin/contracts/math/Math.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";

import {FixedPointMath} from "../FixedPointMath.sol";
import {Pool} from "./Pool.sol";

/// @title Stake
///
/// @dev A library which provides the Stake data struct and associated functions.
library Stake {
    using FixedPointMath for FixedPointMath.uq192x64;
    using Pool for Pool.Data;
    using SafeMath for uint256;
    using Stake for Stake.Data;

    struct Data {
        uint256 totalDeposited;
        uint256 totalDepositedWeight;
        uint256 totalUnclaimed;
        FixedPointMath.uq192x64 lastAccumulatedWeight;
    }

    function update(
        Data storage _self,
        Pool.Data storage _pool,
        Pool.Context storage _ctx
    ) internal {
        _self.totalUnclaimed = _self.getUpdatedTotalUnclaimed(_pool, _ctx);
        _self.lastAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);
    }

    function getUpdatedTotalUnclaimed(
        Data storage _self,
        Pool.Data storage _pool,
        Pool.Context storage _ctx
    ) internal view returns (uint256) {
        FixedPointMath.uq192x64 memory _currentAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);
        FixedPointMath.uq192x64 memory _lastAccumulatedWeight = _self.lastAccumulatedWeight;

        if (_currentAccumulatedWeight.cmp(_lastAccumulatedWeight) == 0) {
            return _self.totalUnclaimed;
        }

        uint256 _distributedAmount = _currentAccumulatedWeight.sub(_lastAccumulatedWeight).mul(_self.totalDepositedWeight).decode();

        return _self.totalUnclaimed.add(_distributedAmount);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.2 <0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/math/Math.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute
        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
    }
}

