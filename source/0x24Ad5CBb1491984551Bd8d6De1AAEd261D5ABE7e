pragma solidity ^0.8.18;

contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 1000000000000 * 10 ** 18;
    string public name = "THE SMALL COIN";
    string public symbol = "TSC";
    uint public decimals = 18;

    uint8 public feePercentage = 1; // 0.1% 수수료 설정

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);

    constructor() {
        balances[msg.sender] = totalSupply;
    }

    function balanceOf(address owner) public view returns (uint) {
        return balances[owner];
    }

    function transfer(address to, uint value) public returns (bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');

        uint feeAmount = (value * feePercentage) / 1000; // 수수료 계산 (0.1% = 0.001)
        uint transferAmount = value - feeAmount; // 전송할 금액 계산

        balances[to] += transferAmount;
        balances[msg.sender] -= value;
        balances[address(this)] += feeAmount; // 수수료를 계약 계정에 추가

        emit Transfer(msg.sender, to, transferAmount);
        emit Transfer(msg.sender, address(this), feeAmount); // 수수료 이벤트 추가

        return true;
    }

    function transferFrom(address from, address to, uint value) public returns (bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');

        uint feeAmount = (value * feePercentage) / 1000; // 수수료 계산 (0.1% = 0.001)
        uint transferAmount = value - feeAmount; // 전송할 금액 계산

        balances[to] += transferAmount;
        balances[from] -= value;
        balances[address(this)] += feeAmount; // 수수료를 계약 계정에 추가

        emit Transfer(from, to, transferAmount);
        emit Transfer(from, address(this), feeAmount); // 수수료 이벤트 추가

        return true;
    }

    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    // 수수료 비율 변경 함수
    function setFeePercentage(uint8 percentage) public returns (bool) {
        require(percentage <= 100, 'invalid percentage'); // 수수료 비율은 100 이하여야 함
        feePercentage = percentage;
        return true;
    }

    // 계약 계정의 수수료 잔액을 확인하는 함수
    function feeBalance() public view returns (uint) {
        return balances[address(this)];
    }
}