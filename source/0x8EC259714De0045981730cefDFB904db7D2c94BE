// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function WETH() external pure returns (address);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
    external
    returns (address pair);
}

interface IUniswapV2Pair {
    function sync() external;
}

interface IMSNNFT {
    function getSilverNFTNum() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256 balance);

    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    function tokenType(uint256 tokenId) external view returns (uint8);
}

contract XtToken is Ownable, IERC20, IERC20Metadata {
   mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;
    mapping(address => bool) public uniswapPairAddrs; 
    address public routerAddr = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IMSNNFT msnNFT = IMSNNFT(0x3828778f514B5f81c4506d5A79f0E33DD2bcF1cB);
    uint256 rebasePerTime = 1 minutes;

    uint256 public rebaseRate = 1 * 1e18;    
    
    bool private swapping;
    uint256 public swapTokensAtAmount;
    uint256 public divideLPsAtAmount;

    bool private isOpenSwap = false;

    uint8 public runDays = 0;
    bool public startRebase;
    uint256 public _lastRebasedTime;
    uint256 private _totalSupplyReal;

    uint256 private _lastRebasedLpTime;

    uint256 public waitLPHolderTokenNum; 
    uint256 public waitLPHolderLPNum;
    uint256 public currentSplitIndex;
    uint8 public splitTimesPerTran = 20;    

    uint256 public waitNFTHolderTokenNum;
    uint256 public oneGoldenNFTHolderETHTotal; 
    uint256 public oneSilverNFTHolderETHTotal;
    uint256 public goldenNftTotalSupply = 33;  
    mapping (uint256 => uint256) public nftTokenIdWithdrawedTokenNum;
    mapping (address => uint256) public nftHolderTokenWithdrawed;
    mapping (address => uint256[]) public nftHolderWithdrawNums;  // 提取数量历史
    mapping (address => uint256[]) public nftHolderWithdrawTimes; // 提取时间历史
    

    address[] public buyUser;
    mapping(address => bool) public havePushBuyUser;

    uint8 private constant RATE_DECIMALS = 8;

    address constant private destroyAddress = address(0x000000000000000000000000000000000000dEaD); 
    address private oAddress; 
    address private idoAddress;

    constructor() {
        _name = "Xt Network";
        _symbol = "XTT";
        _decimals = 18;

        uniswapV2Router = IUniswapV2Router02(routerAddr);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        uniswapPairAddrs[uniswapV2Pair] = true;

        _approve(address(this), routerAddr, type(uint256).max);
        
        uint256 total = 10000000 * 10 ** 18;
        
        swapTokensAtAmount = 10 * 10 ** 18;
        divideLPsAtAmount = 10 * 10 ** 18;

        _mint(_msgSender(), total);
        _totalSupplyReal = total;
        oAddress = _msgSender();
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        if (account == uniswapV2Pair) {
            return (_balances[account]);
        }
        return (_balances[account] * 1e18 / rebaseRate);
    }

    function _realBalanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transferStand(
        address from,
        address to,
        uint256 amount
    ) internal {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        if (from == uniswapV2Pair) {
            uint256 fromBalance = _balances[from];
            require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
            unchecked {
                _balances[from] = fromBalance - amount;
            }
            _balances[to] += amount * rebaseRate / 1e18;
        } else {
            uint256 fromBalance = balanceOf(from);
            require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");

            uint256 realAmount = amount * rebaseRate / 1e18;

            unchecked {
                _balances[from] = _balances[from] - realAmount;
            }

            if (to == uniswapV2Pair) {
                _balances[to] += amount;
            } else {
                _balances[to] += realAmount;
            }            
        }

        emit Transfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        if (account == uniswapV2Pair) {
            uint256 accountBalance = _balances[account];
            require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
            unchecked {
                _balances[account] = accountBalance - amount;

                _totalSupplyReal -= amount;
                _totalSupply -= amount;
            }
        } else {
            uint256 accountBalance = balanceOf(account);
            require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
            
            uint256 realAmount = amount * rebaseRate / 1e18;

            unchecked {
                _balances[account] = _balances[account] - realAmount;
            }

            _totalSupplyReal -= realAmount;
            _totalSupply = _balances[uniswapV2Pair] + ((_totalSupplyReal - _balances[uniswapV2Pair]) * 1e18 / rebaseRate);
        }


        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    receive() external payable {
        require(msg.sender == routerAddr, "Must From Router.");
    }

    function setSplitTimesPerTran(uint8 splitTimesPerTran_) public onlyOwner {
        splitTimesPerTran = splitTimesPerTran_;
    }

    function setIdoAddress(address _idoAddress) public onlyOwner {
        idoAddress = _idoAddress;
    }

    function setUniswapPairAddr(address pair_, bool isPair_) public onlyOwner {
        uniswapPairAddrs[pair_] = isPair_;
    }

    function setAtAmount(uint256 _swapTokensAtAmount, uint256 _divideLPsAtAmount) public onlyOwner {
        swapTokensAtAmount = _swapTokensAtAmount;
        divideLPsAtAmount = _divideLPsAtAmount;
    }

    
    function setMsnNFT(address _msnNFTaddr) public onlyOwner {
        msnNFT = IMSNNFT(_msnNFTaddr);
    }

    function setIsOpenSwap(bool news_) public onlyOwner {
        isOpenSwap = news_;
    }

    function setStartRebase() external onlyOwner {
        require(!startRebase, "Already Started.");
        startRebase = true;
        _lastRebasedTime = block.timestamp;
    }

    function runRebase() private {
        if ( !startRebase ) return;
        if ( runDays >= 68 ) return;
        if ( _lastRebasedTime > block.timestamp - rebasePerTime ) return;

        // 2.08%
        uint256 deltaTime = block.timestamp - _lastRebasedTime;
        uint256 times = deltaTime / rebasePerTime;

        for (uint256 i = 0; i < times && runDays < 68; i++) {
            _totalSupply = _balances[uniswapV2Pair] + ((_totalSupply - _balances[uniswapV2Pair]) * (10**RATE_DECIMALS + 2080000) / 10**RATE_DECIMALS);

            runDays ++;
        }
        _lastRebasedTime = _lastRebasedTime + times * rebasePerTime;

        rebaseRate = (_totalSupplyReal - _balances[uniswapV2Pair]) * 1e18 / (_totalSupply - _balances[uniswapV2Pair]);

        if (runDays == 68) {
            _lastRebasedLpTime = _lastRebasedTime;
        }
    }

    
    function runLpRebase() private {
        if ( _lastRebasedLpTime > block.timestamp - rebasePerTime ) return;

        // 1%
        uint256 deflAmt = _balances[uniswapV2Pair] * 1 / 100;
        _balances[uniswapV2Pair] = _balances[uniswapV2Pair] - deflAmt;
        _totalSupplyReal -= deflAmt;
        _totalSupply = _balances[uniswapV2Pair] + ((_totalSupplyReal - _balances[uniswapV2Pair]) * 1e18 / rebaseRate);

        _lastRebasedLpTime = _lastRebasedLpTime + rebasePerTime;

        IUniswapV2Pair(uniswapV2Pair).sync();

        emit Transfer(uniswapV2Pair, address(0), deflAmt);
    }


    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "ERC20: amount zero");
		
		if( from == address(this) || to == address(this) || from == idoAddress || to == idoAddress) {
            _transferStand(from, to, amount);
            return;
        }

        uint256 curLpHolderTokenNum = waitLPHolderTokenNum / 2;
        uint256 waitTokenNum = waitNFTHolderTokenNum + curLpHolderTokenNum;
        if(waitTokenNum >= swapTokensAtAmount) {
            if (!swapping && from != uniswapV2Pair) {
                swapping = true;
                uint256 preBalance = address(this).balance;
                swapTokensForETH(waitTokenNum);                
                uint256 exETHVal = address(this).balance - preBalance; 

                oneGoldenNFTHolderETHTotal += ((exETHVal * waitNFTHolderTokenNum / waitTokenNum) / 2) / goldenNftTotalSupply;
                if (msnNFT.getSilverNFTNum() > 0) {
                    oneSilverNFTHolderETHTotal += ((exETHVal * waitNFTHolderTokenNum / waitTokenNum) / 2) / msnNFT.getSilverNFTNum();
                }

                preBalance = IERC20(uniswapV2Pair).balanceOf(address(this));
                uniswapV2Router.addLiquidityETH{value: exETHVal * curLpHolderTokenNum / waitTokenNum}(
                    address(this),
                    curLpHolderTokenNum,
                    0, // slippage is unavoidable
                    0, // slippage is unavoidable
                    address(this),
                    block.timestamp
                );
                waitLPHolderLPNum += IERC20(uniswapV2Pair).balanceOf(address(this)) - preBalance;

                waitNFTHolderTokenNum = 0;
                waitLPHolderTokenNum = 0;

                swapping = false;
            }
        } else if(currentSplitIndex > 0 || waitLPHolderLPNum >= divideLPsAtAmount){
            splitLPHolderLP();
        } else {
            clearBuyUser();
        }



        bool takeFee = !swapping;
        bool isFeeBurn = true;
        if(uniswapPairAddrs[from] || uniswapPairAddrs[to]){
            isFeeBurn = false;
        }

        if (takeFee) {
            if(uniswapPairAddrs[from]){
                require(isOpenSwap, "No current permissions");
            }

            if ( runDays < 68 ) {
                if (isFeeBurn) {
                    _burn(from, amount * 8 / 100);
                } else {
                    _transferStand(from, address(this), amount * 8 / 100);
                    waitLPHolderTokenNum += amount * 6 / 100;
                    waitNFTHolderTokenNum += amount * 2 / 100;
                }                

                amount = amount * 92 / 100;

                runRebase();
            } else {
                if (isFeeBurn) {
                    _burn(from, amount * 3 / 100);
                } else {
                    _transferStand(from, address(this), amount * 3 / 100);
                    waitLPHolderTokenNum += amount * 2 / 100;
                    waitNFTHolderTokenNum += amount * 1 / 100;
                }

                amount = amount * 97 / 100;

                runLpRebase();
            }
        }
        _transferStand(from, to, amount);
        
        if(!havePushBuyUser[from] && to == uniswapV2Pair) {
            havePushBuyUser[from] = true;
            buyUser.push(from);
        }
    }
    
    function swapTokensForETH(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> ETH
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function getNFTInfo(address user) public view returns(
        uint256 nftCanWithdraw, uint256 nftWithdrawed, 
        uint256[] memory _nftHolderWithdrawNums, uint256[] memory _nftHolderWithdrawTimes, 
        uint8[] memory _nftTypes
        ) {
        nftWithdrawed = nftHolderTokenWithdrawed[user];

        uint256 nftAmt = msnNFT.balanceOf(user);
        _nftTypes = new uint8[](nftAmt);
        for (uint256 i = 0; i < nftAmt; i++) {
            uint256 tokenId = msnNFT.tokenOfOwnerByIndex(user, i);
            uint8 nftType = msnNFT.tokenType(tokenId);
            nftCanWithdraw += ((nftType == 1 ? oneSilverNFTHolderETHTotal : oneGoldenNFTHolderETHTotal) - nftTokenIdWithdrawedTokenNum[tokenId]);
            _nftTypes[i] = nftType; 
        }

        _nftHolderWithdrawNums = new uint256[](nftHolderWithdrawNums[user].length);
        _nftHolderWithdrawTimes = new uint256[](nftHolderWithdrawNums[user].length);

        for(uint256 i = 0; i < nftHolderWithdrawNums[user].length; i ++) {
            _nftHolderWithdrawNums[i] = nftHolderWithdrawNums[user][i];
            _nftHolderWithdrawTimes[i] = nftHolderWithdrawTimes[user][i];
        }

    }

    function userWithdrawFund() public returns (bool) {
        uint256 nftCanWithdraw;
        uint256 nftAmt = msnNFT.balanceOf(_msgSender());
        for (uint256 i = 0; i < nftAmt; i++) {
            uint256 tokenId = msnNFT.tokenOfOwnerByIndex(_msgSender(), i);
            uint8 nftType = msnNFT.tokenType(tokenId);
            nftCanWithdraw += ((nftType == 1 ? oneSilverNFTHolderETHTotal : oneGoldenNFTHolderETHTotal) - nftTokenIdWithdrawedTokenNum[tokenId]);

            nftTokenIdWithdrawedTokenNum[tokenId] = nftType == 1 ? oneSilverNFTHolderETHTotal : oneGoldenNFTHolderETHTotal;
        }

        require(nftCanWithdraw > 0, "balance not enough");
        require(nftCanWithdraw <= address(this).balance, "system balance not enough");

        payable(_msgSender()).transfer(nftCanWithdraw);

        nftHolderTokenWithdrawed[_msgSender()] += nftCanWithdraw;

        nftHolderWithdrawNums[_msgSender()].push(nftCanWithdraw);
        nftHolderWithdrawTimes[_msgSender()].push(block.timestamp);

        return true;
    }

    function rescueToken(address tokenAddress, uint256 tokens) external {
        IERC20(tokenAddress).transfer(oAddress, tokens);
    } 

    function rescueETH() external {
        uint256 balance = address(this).balance;
        payable(oAddress).transfer(balance);
    }

    function splitLPHolderLP() private {
        uint256 thisAmount = waitLPHolderLPNum;
        
        address user;
        uint256 totalAmount = IERC20(uniswapV2Pair).totalSupply() - IERC20(uniswapV2Pair).balanceOf(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE);
        uint256 rate;

        uint256 buySize = buyUser.length;
        uint256 thisTimeSize = currentSplitIndex + splitTimesPerTran > buySize ? buySize : currentSplitIndex + splitTimesPerTran;

        for(uint256 i = currentSplitIndex; i < thisTimeSize; i++){
            user = buyUser[i];

            rate = IERC20(uniswapV2Pair).balanceOf(user) * 1000000 / totalAmount;
            uint256 userAmt = thisAmount * rate / 1000000;

            if (userAmt > 1e16) { // 大于0.01才分配
                IERC20(uniswapV2Pair).transfer(user, userAmt);

                waitLPHolderLPNum -= userAmt;
            }

            currentSplitIndex ++;
        }

        if(currentSplitIndex >= buySize){
            currentSplitIndex = 0;
        }
    }

    function burn(uint256 amount) public {
        _burn(_msgSender(), amount);
    }

    function clearBuyUser() public {
        if (buyUser.length <= 0) {
            return;
        }

        uint256 buyUserLen = buyUser.length;
        uint256 toIdx = buyUserLen > 5 ? buyUserLen - 5 : 0;
        for(uint256 i = buyUserLen - 1; i >= toIdx; ) {
            address user = buyUser[i];

            if (IERC20(uniswapV2Pair).balanceOf(user) <= 0) {
                buyUser[i] = buyUser[buyUser.length - 1];

                buyUser.pop();
                havePushBuyUser[user] = false;
            }

            if (i > 0) {
                i --;
            } else {
                break;
            }
        }
    }

    function getBuyUsersize() public view returns(uint256){
        return buyUser.length;
    }

    function getETHBalance() public view returns(uint256){
        return address(this).balance;
    }
}