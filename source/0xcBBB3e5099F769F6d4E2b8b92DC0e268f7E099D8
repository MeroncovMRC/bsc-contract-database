{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"ERRNO.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n/*\r\n\r\nADMIN\r\nBA00\tZero not allowed.\r\nBA01\tONLY_MEMBER: Account does not belong to the group.\r\nTOKEN\r\nBT01\tONLY_MINTING_ADDRESS: Caller not minting address.\r\nBT02\tTRANSFER_TO_N: Must submit same addresses and amounts quantity.\r\nBT03\tTRANSFER: can\u0027t transfer from minting address.\r\nBT04\tTRANSFER: can\u0027t transfer to minting address.\r\nBT05\tUNWRAP: minting address can\u0027t unwrap\r\nBT06\tWRAP: can\u0027t wrap to minting address\r\nBT07\tCHANGE_MINTING_ADDRESS: please empty new minting address balance and re-submit last vote.\r\nBT08    TRANSFER: transfer amount exceeds balance\r\nBT09    \r\nBT10    TRANSFER: can\u0027t transfer to zero address\r\nBT11    TRANSFER: can\u0027t transfer from zero address\r\nPROPOSAL\r\nBP00\tEXECUTE_ACTION: Invalid action.\r\nBP01\tEXECUTE_ACTION: Proposal not found.\r\nBP02\tGET_ACTION:\tAction not found.\r\nBP03\tADD_PROPOSAL: Pending user active proposal.\r\nBP04\tADD_PROPOSAL: Group not active.\r\nBP05\tADD_PROPOSAL: Too many voters.\r\nBP06    ADD_PROPOSAL: Action not found.\r\nBP07    VOTE: You have already voted this proposal.\r\nBP08    VOTE: Invalid vote. 0: Disgree. 1:Agree.\r\nBP09    ADD_MEMBER: Too many members in this group.\r\nBP10    INVALID_PCT: Percentage must be from 1 to 100\r\nBP11    PAUSABLE: token PAUSED\r\nBP12    PAUSABLE: token UNPAUSED\r\nSAFEMATH\r\nSM00    SafeMath: addition overflow\r\nSM01    SafeMath: subtraction overflow\r\nSM02    SafeMath: multiplication overflow\r\nSM03    SafeMath: division by zero\r\nSM04    SafeMath: modulo by zero\r\nBEP20\r\nBE00    BEP20: decreased allowance below zero\r\nBE01    BEP20: transfer amount exceeds allowance\r\nBE02    BEP20: approve from the zero address\r\nBE03    BEP20: approve to the zero address\r\n\r\n*/\r\ncontract ERRNO {\r\n    \r\n    enum ErrNo{\r\n        OK,\r\n        BA00,\r\n        BA01,\r\n        BT01,\r\n        BT02,\r\n        BT03,\r\n        BT04,\r\n        BT05,\r\n        BT06,\r\n        BT07,\r\n        BT08,\r\n        BT09,\r\n        BT10,\r\n        BP00,\r\n        BP01,\r\n        BP02,\r\n        BP03,\r\n        BP04,\r\n        BP05,\r\n        BP06,\r\n        BP07,\r\n        BP08,\r\n        BP09,\r\n        BP10,\r\n        BP11,\r\n        BP12,\r\n        SM00,\r\n        SM01,\r\n        SM02,\r\n        SM03,\r\n        SM04\r\n    }\r\n    string[50] ErrNoString=[\r\n        \"OK\",\r\n        \"BA00\",\r\n        \"BA01\",\r\n        \"BT01\",\r\n        \"BT02\",\r\n        \"BT03\",\r\n        \"BT04\",\r\n        \"BT05\",\r\n        \"BT06\",\r\n        \"BT07\",\r\n        \"BT08\",\r\n        \"BT09\",\r\n        \"BT10\",\r\n        \"BP00\",\r\n        \"BP01\",\r\n        \"BP02\",\r\n        \"BP03\",\r\n        \"BP04\",\r\n        \"BP05\",\r\n        \"BP06\",\r\n        \"BP07\",\r\n        \"BP08\",\r\n        \"BP09\",\r\n        \"BP10\",\r\n        \"BP11\",\r\n        \"BP12\",\r\n        \"SM00\",\r\n        \"SM01\",\r\n        \"SM02\",\r\n        \"SM03\",\r\n        \"SM04\"\r\n    ];\r\n       \r\n    constructor() {}\r\n}"},"Groupable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\nabstract contract Groupable {\r\n\r\n    constructor() {}\r\n\r\n\r\n    /*########## OBSERVERS ##########*/\r\n\r\n    // INTERNAL - returns TRUE if account is member of the given group, FALSE otherwise\r\n    function isGroupMember(uint256 groupIndex, address account) internal view virtual returns (bool);\r\n\r\n    // INTERNAL - returns TRUE if the gruop is active (\u003e=1 members), FALSE otherwise\r\n    function isGroupActive(uint256 groupIndex) internal view virtual returns (bool);\r\n\r\n    // INTERNAL - returns the number of members of the given group\r\n    function getGroupMemberNumber(uint256 groupIndex) internal view virtual returns (uint256);\r\n\r\n    // INTERNAL - returns an array containing the members of the given group\r\n    function getGroupMembers(uint256 groupIndex) internal view virtual returns (address[] memory);\r\n\r\n    /*########## MODIFIERS ##########*/\r\n\r\n    // INTERNAL - creates a group with \"account\" in it\r\n    function addGroup(address account) internal virtual returns (uint256);\r\n\r\n    // INTERNAL - creates a group with a list of accounts in it\r\n    function addGroup(address[] calldata account) internal virtual returns (uint256);\r\n\r\n    // INTERNAL adds a single member to the given group\r\n    function addMemberToGroup(uint256 groupIndex, address account) internal virtual returns (bool);\r\n\r\n    // INTERNAL adds a list of members to the given group\r\n    function addMemberToGroup(uint256 groupIndex, address[] calldata account) internal virtual returns (bool);\r\n\r\n    // INTERNAL - disables the given group\r\n    function removeGroup(uint256 groupIndex) internal virtual returns (bool);\r\n    // INTERNAL - removes the account from the given group\r\n\r\n    function removeMemberFromGroup(uint256 groupIndex, address account) internal virtual returns (bool);\r\n\r\n\r\n    function beforeAddingMemberToGroup(uint256 groupIndex, address account) internal virtual;\r\n\r\n    function beforeRemovingMemberFromGroup(uint256 groupIndex, address account) internal virtual;\r\n    \r\n}"},"GroupSystem.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./Groupable.sol\";\r\n\r\n\r\ncontract GroupSystem is Groupable {\r\n    \r\n    struct Group{\r\n        mapping (address =\u003e bool) isMember;\r\n        mapping (uint256 =\u003e address) memberList;\r\n        uint256 firstEmptyMember;\r\n    }\r\n    mapping (uint256 =\u003e Group) private _groupList;\r\n    uint256 private _firstEmptyGroup;\r\n\r\n    constructor() {}\r\n\r\n\r\n    /*########## OBSERVERS ##########*/\r\n\r\n    // INTERNAL - returns TRUE if account is member of the given group, FALSE otherwise\r\n    function isGroupMember(uint256 groupIndex, address account) internal view override returns (bool) {\r\n        return _groupList[groupIndex].isMember[account];\r\n    }\r\n\r\n    // INTERNAL - returns TRUE if the gruop is active (\u003e=1 members), FALSE otherwise\r\n    function isGroupActive(uint256 groupIndex) internal view override returns (bool) {\r\n        return (_groupList[groupIndex].firstEmptyMember!=0);\r\n    }\r\n\r\n    // INTERNAL - returns the number of members of the given group\r\n    function getGroupMemberNumber(uint256 groupIndex) internal view override returns (uint256){\r\n        return _groupList[groupIndex].firstEmptyMember;\r\n    }\r\n\r\n    // INTERNAL - returns an array containing the members of the given group\r\n    function getGroupMembers(uint256 groupIndex) internal view override returns (address[] memory){\r\n        //Be careful, limitations should applied in caller class\r\n        //possible crash if returned array too big\r\n        return _getGroupMembers(groupIndex);\r\n    }\r\n\r\n    /*########## MODIFIERS ##########*/\r\n\r\n    // INTERNAL - creates a group with \"account\" in it\r\n    function addGroup(address account) internal override returns (uint256) {\r\n        _addMemberToGroup(_firstEmptyGroup, account);\r\n        return _firstEmptyGroup++;\r\n    }\r\n\r\n    // INTERNAL - creates a group with a list of accounts in it\r\n    function addGroup(address[] calldata account) internal override returns (uint256) {\r\n        _addMemberToGroup(_firstEmptyGroup, account);\r\n        return _firstEmptyGroup++;\r\n    }\r\n\r\n    // INTERNAL adds a single member to the given group\r\n    function addMemberToGroup(uint256 groupIndex, address account) internal override returns (bool) {\r\n        if(isGroupActive(groupIndex)==false){\r\n            return false;\r\n        }\r\n        _addMemberToGroup(groupIndex, account);\r\n        return true;\r\n    }\r\n\r\n    // INTERNAL adds a list of members to the given group\r\n    function addMemberToGroup(uint256 groupIndex, address[] calldata account) internal override returns (bool) {\r\n        if(isGroupActive(groupIndex)==false){\r\n            return false;\r\n        }\r\n        _addMemberToGroup(groupIndex, account);\r\n        return true;\r\n    }\r\n\r\n    // INTERNAL - disables the given group\r\n    function removeGroup(uint256 groupIndex) internal override returns (bool) {\r\n        return _removeGroup(groupIndex);\r\n    }\r\n    // INTERNAL - removes the account from the given group\r\n    function removeMemberFromGroup(uint256 groupIndex, address account) internal override returns (bool) {\r\n        return _removeMemberFromGroup(groupIndex, account);\r\n    }\r\n\r\n\r\n    /*########## ADMINISTRATIVE TOOLS ##########*/\r\n\r\n    function _getGroupMembers(uint256 groupIndex) private view returns (address[] memory) {\r\n        uint256 FEM=_groupList[groupIndex].firstEmptyMember;\r\n        address[] memory members = new address[](FEM);\r\n        for(uint256 i = 0; i \u003c FEM; ++i) {\r\n            members[i]=_groupList[groupIndex].memberList[i];\r\n        }\r\n        return members;\r\n    }\r\n    // PRIVATE - implements addMemberToGroup\r\n    function _addMemberToGroup(uint256 groupIndex, address account) private {\r\n        beforeAddingMemberToGroup(groupIndex, account);\r\n        if(_groupList[groupIndex].isMember[account]==true){\r\n            return;\r\n        }\r\n        _groupList[groupIndex].isMember[account]=true;\r\n        _groupList[groupIndex].memberList[_groupList[groupIndex].firstEmptyMember++]=account;\r\n        return;\r\n    }\r\n\r\n    // PRIVATE - implements addMemberToGroup\r\n    function _addMemberToGroup(uint256 groupIndex, address[] calldata account) private {\r\n        for(uint256 i=0; i\u003caccount.length; ++i){\r\n            _addMemberToGroup(groupIndex, account[i]);\r\n        }\r\n    }\r\n\t\r\n    // PRIVATE - implements removeMemberFromGroup\r\n    function _removeMemberFromGroup(uint256 groupIndex, address account) private returns (bool) {\r\n        beforeRemovingMemberFromGroup(groupIndex, account);\r\n        if(_groupList[groupIndex].isMember[account]==false){\r\n            return true;\r\n        }\r\n        uint256 FEM=_groupList[groupIndex].firstEmptyMember;\r\n        if(FEM\u003c2){\r\n            return false;\r\n        }\r\n        _groupList[groupIndex].isMember[account]=false;\r\n        for(uint256 i=0; i\u003cFEM; ++i){\r\n            if(_groupList[groupIndex].memberList[i]==account){\r\n                _groupList[groupIndex].memberList[i]=_groupList[groupIndex].memberList[--FEM];\r\n                _groupList[groupIndex].firstEmptyMember=FEM;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // PRIVATE - implements removeGroup\r\n    function _removeGroup(uint256 groupIndex) private returns (bool) {\r\n        _groupList[groupIndex].firstEmptyMember=0;\r\n        return true;\r\n    }\r\n\r\n    function beforeAddingMemberToGroup(uint256 groupIndex, address account) internal virtual override {}\r\n\r\n    function beforeRemovingMemberFromGroup(uint256 groupIndex, address account) internal virtual override {}\r\n    \r\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/BEP20/IBEP20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the BEP20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IBEP20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/BEP20/extensions/IBEP20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IBEP20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the BEP20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IBEP20Metadata is IBEP20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    \r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function whenNotPaused() internal view {\r\n        require(!paused(), \"BP11\");\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function whenPaused() internal view {\r\n        require(paused(), \"BP12\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual {\r\n        whenNotPaused();\r\n        _paused = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual {\r\n        whenPaused();\r\n        _paused = false;\r\n    }\r\n}\r\n"},"Proposable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./ERRNO.sol\";\r\n\r\n\r\nabstract contract Proposable is ERRNO {\r\n\r\n    constructor() {}\r\n\r\n    /*########## OBSERVERS ##########*/\r\n\r\n    function getVoterNumberLimit() internal view virtual returns (uint256);\r\n\r\n    function isActive(uint256 proposalIndex) internal view virtual returns (bool);\r\n\r\n    function isPct(uint256 pct) internal pure virtual returns (bool);\r\n\r\n    function getActionPct(uint8 action) internal view virtual returns (uint8);\r\n\r\n    /*########## MODIFIERS ##########*/\r\n\r\n    function setVoterNumberLimit(uint256 limit) internal virtual;\r\n\r\n    function addProposal(\r\n        address proposedBy,\r\n        uint8 action,\r\n        uint256 groupIndex,\r\n        uint256 value\r\n    ) internal virtual returns (uint256 proposalIndex, ErrNo errNo);\r\n\r\n    function voteProposal(address voter, address proposedBy, uint8 action,  uint8 decision) internal virtual returns (int8, ErrNo);\r\n\r\n    function voteProposal(address voter, uint256 proposalIndex,  uint8 decision) internal virtual returns (int8, ErrNo);\r\n\r\n    function removeProposal(address proposedBy, uint8 action) internal virtual returns (bool);\r\n    \r\n    function setActionPct(uint8 action, uint8 pct) internal virtual returns (bool);\r\n\r\n\r\n}"},"ProposableGroupSystem.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./Proposable.sol\";\r\nimport \"./GroupSystem.sol\";\r\n\r\n\r\ncontract ProposableGroupSystem is Proposable, GroupSystem {\r\n    \r\n    struct Proposal{\r\n        uint256 value;\r\n        uint256 groupIndex;\r\n        address proposer;\r\n        uint8 action;\r\n        uint8 minPositive;\r\n        uint8 minNegative;\r\n        uint8 nowPositive;\r\n        uint8 nowNegative;\r\n        int8 result;\r\n        mapping(address =\u003e bool) votePool;\r\n    }\r\n    \r\n    mapping(uint256 =\u003e Proposal) internal getProposal;\r\n    uint256 private _proposalIndex = 1;\r\n    mapping(uint8 =\u003e uint8) private _actionPct;\r\n    mapping(address =\u003e mapping( uint8 =\u003e uint256 )) internal getAddressProposalIndex;\r\n    uint256 private _voterNumberLimit=0;\r\n\r\n    constructor() {}\r\n\r\n/*              INTERFACES                */\r\n\r\n    \r\n    function setVoterNumberLimit(uint256 limit) internal override {\r\n        _voterNumberLimit=limit;\r\n    }\r\n    \r\n    function getVoterNumberLimit() internal view override returns (uint256) {\r\n        return _voterNumberLimit;\r\n    }\r\n\r\n    function isBelowMaxAllowedMembers(uint256 voterNumber) internal view returns (bool) {\r\n        return (_voterNumberLimit==0 || voterNumber\u003c_voterNumberLimit);\r\n    }\r\n\r\n    function isActive(uint256 proposalIndex) internal view override returns (bool){\r\n        if(\r\n            getProposal[proposalIndex].minPositive\u003e0\r\n            \u0026\u0026\r\n            getProposal[proposalIndex].result==0\r\n        ){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addProposal(\r\n        address proposedBy,\r\n        uint8 action,\r\n        uint256 groupIndex,\r\n        uint256 value\r\n    ) internal override returns (uint256 proposalIndex, ErrNo errNo){\r\n        (proposalIndex, errNo)=_addProposal(proposedBy, action, groupIndex, value);\r\n    }\r\n\r\n    function voteProposal(address voter, address proposedBy, uint8 action,  uint8 decision) internal override returns (int8, ErrNo) {\r\n        uint256 proposalIndex=getAddressProposalIndex[proposedBy][action];\r\n        return _vote(voter, proposalIndex,  decision);\r\n    }\r\n\r\n    function voteProposal(address voter, uint256 proposalIndex,  uint8 decision) internal override returns (int8, ErrNo) {\r\n        return _vote(voter, proposalIndex,  decision);\r\n    }\r\n\r\n    function removeProposal(address proposedBy, uint8 action) internal override returns (bool) {\r\n        return _deleteProposal(proposedBy, action);\r\n    }\r\n\r\n    function beforeAddingMemberToGroup(uint256 groupIndex, address account) internal override view {\r\n        require(isBelowMaxAllowedMembers(getGroupMemberNumber(groupIndex)), \"BP09\");\r\n    }\r\n\r\n/*          ACTIONS MANAGMENT            */\r\n\r\n    function isPct(uint256 pct) internal pure override returns (bool) {\r\n        if(pct==0 || pct\u003e100){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function setActionPct(uint8 action, uint8 pct) internal override returns (bool) {\r\n        if(isPct(pct)==false){\r\n            return false;\r\n        }\r\n        _actionPct[action]=pct;\r\n        return true;\r\n    }\r\n\r\n    function getActionPct(uint8 action) internal view override returns (uint8) {\r\n        return _actionPct[action];\r\n    }\r\n\r\n\r\n/*              PROPOSAL SYSTEM TOOLS                */\r\n\r\n    function _getConsensus(uint256 voterNumber, uint8 pct) private pure returns (uint8, uint8) {\r\n        uint8 neg=uint8((voterNumber*(100-pct))/100);\r\n        uint8 pos=uint8(voterNumber-neg);\r\n        if(pos==0){\r\n            pos=1;\r\n        }\r\n        if(neg==0){\r\n            neg=1;\r\n        }\r\n        return (pos,neg);\r\n    }\r\n    \r\n    function _addProposal(\r\n        address proposedBy,\r\n        uint8 action,\r\n        uint256 groupIndex,\r\n        uint256 value\r\n    ) private returns (uint256 proposalIndex, ErrNo errNo) {\r\n        uint256 voterNumber=getGroupMemberNumber(groupIndex);\r\n        if(isGroupMember(groupIndex, proposedBy)==false){\r\n            return (0, ErrNo.BA01);\r\n        }\r\n        if(getAddressProposalIndex[proposedBy][action]!=0){\r\n            return (0, ErrNo.BP03);\r\n        }\r\n        if(voterNumber==0){\r\n            return (0, ErrNo.BP04);\r\n        }\r\n        if(_actionPct[action]==0){\r\n            return (0, ErrNo.BP06);\r\n        }\r\n\r\n        proposalIndex=_proposalIndex++;\r\n\r\n        (   getProposal[proposalIndex].minPositive,\r\n            getProposal[proposalIndex].minNegative\r\n        )   = _getConsensus(voterNumber, _actionPct[action]);\r\n\r\n        getProposal[proposalIndex].value=value;\r\n        getProposal[proposalIndex].groupIndex=groupIndex;\r\n        getProposal[proposalIndex].proposer=proposedBy;\r\n        getProposal[proposalIndex].action=action;\r\n        getAddressProposalIndex[proposedBy][action]=proposalIndex;\r\n        return (proposalIndex, ErrNo.OK);\r\n    }\r\n\r\n    function _deleteProposal(uint256 proposalIndex) private returns (bool) {\r\n        address proposedBy=getProposal[proposalIndex].proposer;\r\n        uint8 action=getProposal[proposalIndex].action;\r\n        return _deleteProposal(proposedBy, action, proposalIndex);\r\n    }\r\n\r\n    function _deleteProposal(address proposedBy, uint8 action) private returns (bool) {\r\n        uint256 proposalIndex=getAddressProposalIndex[proposedBy][action];\r\n        return _deleteProposal(proposedBy, action, proposalIndex);\r\n    }\r\n\r\n    function _deleteProposal(address proposedBy, uint8 action, uint256 proposalIndex) private returns (bool) {\r\n        //some functions could delete proposal multiple times\r\n        //so no revert if proposal not active\r\n        if(isActive(proposalIndex)==false){\r\n            return false;\r\n        }\r\n        // result==1 means proposal has passed, 0 still voting, -1 denied\r\n        if(getProposal[proposalIndex].result==0){\r\n            getProposal[proposalIndex].result=-1;\r\n        }\r\n        getAddressProposalIndex[proposedBy][action]=0;\r\n        return true;\r\n    }\r\n\r\n    function _result(uint256 proposalIndex) private returns (int8) {\r\n        if(getProposal[proposalIndex].nowPositive\r\n            \u003e=\r\n            getProposal[proposalIndex].minPositive\r\n        ){\r\n            _deleteProposal(proposalIndex);\r\n            getProposal[proposalIndex].result=1;\r\n            return 1;\r\n        }else if(getProposal[proposalIndex].nowNegative\r\n            \u003e=\r\n            getProposal[proposalIndex].minNegative\r\n        ){\r\n            _deleteProposal(proposalIndex);\r\n            getProposal[proposalIndex].result=-1;\r\n            return -1;\r\n        \r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _vote(address voter, uint256 proposalIndex,  uint8 decision) private returns (int8, ErrNo) {\r\n        if(isGroupMember(getProposal[proposalIndex].groupIndex, voter)==false){\r\n            return (0, ErrNo.BA01);\r\n        }\r\n        if(getProposal[proposalIndex].votePool[voter]==true){\r\n            return (0, ErrNo.BP07);\r\n        }\r\n        if(isActive(proposalIndex)==false){\r\n            return (0, ErrNo.BP01);\r\n        }\r\n        if(decision==1){\r\n            getProposal[proposalIndex].nowPositive++;\r\n        }else if(decision==0){\r\n            getProposal[proposalIndex].nowNegative++;\r\n        }else{\r\n            return (0, ErrNo.BP08);\r\n        }\r\n        \r\n        getProposal[proposalIndex].votePool[voter]=true;\r\n\r\n        return (_result(proposalIndex), ErrNo.OK);\r\n    }\r\n    \r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c \u003e= a, \"SM00\");\r\n\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SM01\");\r\n  }\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b \u003c= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SM02\");\r\n\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SM03\");\r\n  }\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b \u003e 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SM04\");\r\n  }\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n} "},"StandardToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/BEP20/BEP20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IBEP20.sol\";\r\nimport \"./IBEP20Metadata.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./TokenConstants.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of BEP20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract StandardToken is Context, IBEP20, IBEP20Metadata, TokenConstants {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor() {\r\n        _balances[_msgSender()]=INITIAL_SUPPLY;\r\n        _totalSupply=INITIAL_SUPPLY;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return TOKEN_NAME;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return TOKEN_SYMBOL;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {BEP20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return TOKEN_DECIMALS;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferToN(\r\n        address[] calldata recipient,\r\n        uint256[] calldata amount\r\n    ) public virtual returns (bool) {\r\n        _transferToN(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 remainingAllowance = _allowances[sender][_msgSender()].sub(amount, \"BE01\");\r\n        _approve(sender, _msgSender(), remainingAllowance);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IBEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IBEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 remainingAllowance = _allowances[_msgSender()][spender].sub(subtractedValue, \"BE00\");\r\n        _approve(_msgSender(), spender, remainingAllowance);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"BT11\");\r\n        require(recipient != address(0), \"BT10\");\r\n\r\n        _tokenTransfer(sender, recipient, amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"BT08\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n    function _transferToN(\r\n        address sender,\r\n        address[] calldata recipient,\r\n        uint256[] calldata amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"BT11\");\r\n        \r\n        _tokenTransferToN(sender, recipient, amount);\r\n\r\n        uint256 recipientNumber=recipient.length;\r\n        for(uint256 i=0; i\u003crecipientNumber; ++i){\r\n            require(recipient[i] != address(0), \"BT10\");\r\n            emit Transfer(sender, recipient[i], amount[i]);\r\n        }\r\n    }\r\n    function _tokenTransferToN(\r\n        address sender,\r\n        address[] calldata recipient,\r\n        uint256[] calldata amount\r\n    ) internal virtual {\r\n        _beforeTokenTransfer();\r\n\r\n        uint256 recipientNumber=recipient.length;\r\n        require(recipientNumber==amount.length,\"BT02\");\r\n        uint256 previousBalance = _balances[sender];\r\n        uint256 transactionBalance = 0;\r\n        \r\n        for(uint256 i=0; i\u003crecipientNumber; ++i){\r\n            transactionBalance = transactionBalance.add(amount[i]);\r\n            _balances[recipient[i]] = _balances[recipient[i]].add(amount[i]);\r\n        }\r\n        require(previousBalance\u003e=transactionBalance, \"BT08\");\r\n        _balances[sender] = _balances[sender].sub(transactionBalance, \"BT08\");\r\n\r\n        _afterTokenTransfer();\r\n    }\r\n    \r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BT10\");\r\n\t\trequire(amount\u003e0, \"BA00\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BT11\");\r\n\t\trequire(amount\u003e0, \"BA00\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\t_balances[account] = _balances[account].sub(amount, \"BT08\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"BE02\");\r\n        require(spender != address(0), \"BE03\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _beforeTokenTransfer();\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _afterTokenTransfer();\r\n    }\r\n\r\n    function _afterTokenTransfer(\r\n    ) internal virtual {}\r\n}"},"TokenConstants.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ncontract TokenConstants {\r\n    \r\n    string constant internal TOKEN_NAME         =   \"Wrapped BitcoinZ\";\r\n    string constant internal TOKEN_SYMBOL       =   \"wBTCZ\";\r\n    uint8 constant internal TOKEN_DECIMALS      =   8;\r\n    uint256 constant internal INITIAL_SUPPLY    =   0;\r\n\r\n    constructor(){}\r\n}"},"wBTCz.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\nimport \"./ProposableGroupSystem.sol\";\r\nimport \"./WrappableToken.sol\";\r\nimport \"./wBTCzConstants.sol\";\r\n\r\n\r\ncontract wBTCz is WrappableToken, ProposableGroupSystem, wBTCzConstants{    \r\n    using SafeMath for uint256;\r\n    constructor() {\r\n        assert(addGroup(_msgSender())==ADMIN_GROUP);\r\n        setVoterNumberLimit(MAX_ADMIN_NUMBER);\r\n        for(uint8 i=0; i\u003cACTION_NUMBER; ++i) {\r\n            setActionPct(i, INITIAL_PCTS[i]);\r\n        }\r\n\r\n    }\r\n\r\n/*          MODIFIERS            */\r\n    // modifiers use too much bytecode\r\n\r\n    function onlyAdmin() internal view {\r\n        require(isGroupMember(ADMIN_GROUP, _msgSender())==true,\"BA01\");\r\n    }\r\n\r\n\r\n/*          VIEWS            */\r\n\r\n    // EXTERNAL returns admins accounts\r\n    function getAdmins() external view returns (address[] memory){\r\n        return getGroupMembers(ADMIN_GROUP);\r\n    }\r\n\r\n    // EXTERNAL check if account is admin\r\n    function isAdmin(address account) external view returns (bool) {\r\n        return  isGroupMember(ADMIN_GROUP, account);\r\n    }\r\n    \r\n    // EXTERNAL returns minting address\r\n    function getMintingAddress() external view returns (address) {\r\n        return _getMintingAddress();\r\n    }\r\n\r\n/*          Z ADMIN            */\r\n\r\n    // Deletes a proposal taking the string representing it\r\n    function ZDeleteProposal(string calldata actionString) external returns (bool) {\r\n        onlyAdmin();\r\n        (uint8 actionIndex, ErrNo errCode) = _getActionIndex(actionString);\r\n        if(errCode == ErrNo.OK) {\r\n            return removeProposal(_msgSender(), actionIndex);\r\n        }\r\n        revert(\"BP00\");\r\n    }\r\n\r\n    // EXTERNAL get proposal using proposal index\r\n    function ZGetProposal(uint256 proposalIndex) external view returns (\r\n        address proposer,\r\n        string memory description,\r\n        uint8 minPositive,\r\n        uint8 minNegative,\r\n        string memory result,\r\n        uint256 valueU,\r\n        address valueA\r\n    ){\r\n        uint256 value;\r\n        uint8 action;\r\n        int8 resultValue;\r\n        value=getProposal[proposalIndex].value;\r\n        proposer=getProposal[proposalIndex].proposer;\r\n        action=getProposal[proposalIndex].action;\r\n        minPositive=getProposal[proposalIndex].minPositive;\r\n        minNegative=getProposal[proposalIndex].minNegative;\r\n        resultValue=getProposal[proposalIndex].result;\r\n        \r\n        require(minPositive\u003e0,\"BP01\");\r\n        result=ResultString[uint8(resultValue+1)];\r\n        ActionValueType actionValueType=_getActionType(action);\r\n        if(actionValueType==ActionValueType.ADDRESS){\r\n            valueA=address(uint160(value));\r\n        }else{\r\n            valueU=value;\r\n        }\r\n        description=ActionString[action];\r\n    }\r\n\r\n    // Gets the index of the proposal of type \"actionString\" made by \"proposer\"\r\n    function ZGetProposalIndex(address proposer, string calldata actionString) external view returns (uint256 proposalIndex) {\r\n        (uint8 actionIndex, ErrNo errCode) = _getActionIndex(actionString);\r\n        if(errCode == ErrNo.OK){\r\n            proposalIndex=getAddressProposalIndex[proposer][actionIndex];\r\n        }\r\n    }\r\n    // EXTERNAL get action using action index\r\n    function ZGetAction(string calldata actionString) external view returns (\r\n        uint8 actionIndex,\r\n        string memory description,\r\n        uint8 pct,\r\n        string memory valueType\r\n    ){\r\n        ErrNo errCode;\r\n        (actionIndex, errCode) = _getActionIndex(actionString);\r\n        if(errCode == ErrNo.OK) {\r\n            pct=getActionPct(actionIndex);\r\n            description=ActionString[actionIndex];\r\n            valueType=ActionValueTypeString[uint8(_getActionType(actionIndex))];\r\n        }else{\r\n            revert(\"BP00\");\r\n        }\r\n    }\r\n    \r\n    // EXTERNAL returns admins accounts\r\n    function ZGetActionList() external view returns (string[] memory actionList){\r\n        actionList= new string[](ActionString.length);\r\n        for(uint256 i = 0; i \u003c ActionString.length; ++i) {\r\n            actionList[i]=ActionString[i];\r\n        }\r\n    }\r\n\r\n    // EXTERNAL propose a value to a specific action\r\n    function ZPropose(string calldata actionString, uint256 value) external returns (uint256 proposalIndex) {\r\n        onlyAdmin();\r\n        (uint8 actionIndex, ErrNo errCode) = _getActionIndex(actionString);\r\n        if(errCode == ErrNo.OK) {\r\n            return _submitProposal(_msgSender(), actionIndex, value);\r\n        }\r\n        revert(\"BP00\");\r\n    }\r\n    \r\n\r\n    /*          EXTERNALS            */\r\n\r\n    function ZProposePause() external returns (uint256 proposalIndex) {\r\n        onlyAdmin();\r\n        whenNotPaused();\r\n        return _submitProposal(_msgSender(), uint8(Action.PAUSE_TOKEN), 1);\r\n    }\r\n    function ZProposeUnpause() external  returns (uint256 proposalIndex) {\r\n        onlyAdmin();\r\n        whenPaused();\r\n        return _submitProposal(_msgSender(), uint8(Action.UNPAUSE_TOKEN), 1);\r\n    }\r\n    //      vote\r\n    function ZVote(uint256 proposalIndex, uint8 decision) external returns (bool) {\r\n        onlyAdmin();\r\n        _voteProposal(_msgSender(), proposalIndex, decision);\r\n        return true;\r\n    }\r\n\r\n    function _getActionIndex(string calldata actionString) internal view returns (uint8, ErrNo) {\r\n        for(uint8 i=0; i\u003cActionString.length; ++i){\r\n            if(compareStrings(ActionString[i],actionString)){\r\n                return (i, ErrNo.OK);\r\n            }\r\n        }\r\n        return (0, ErrNo.BP00);\r\n    }\r\n\r\n/*          TOKEN TOOLS            */\r\n    \r\n    // INTERNAL transfer from user1 to user2\r\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\r\n        require(sender != _getMintingAddress(), \"BT03\");\r\n        require(recipient != _getMintingAddress(), \"BT04\");\r\n\r\n        super._transfer(sender, recipient, amount);\r\n    }    \r\n\r\n    // INTERNAL transfer from user1 to user2\r\n    function _transferToN(address sender,\r\n        address[] calldata recipient,\r\n        uint256[] calldata amount) internal override {\r\n        require(sender != _getMintingAddress(), \"BT03\");\r\n        uint256 recipientNumber=recipient.length;\r\n        for(uint256 i=0; i\u003crecipientNumber; ++i){\r\n            require(recipient[i] != _getMintingAddress(), \"BT04\");\r\n        }\r\n        super._transferToN(sender, recipient, amount);\r\n    }\r\n\r\n\r\n/*          ADMINISTRATIVE TOOLS            */\r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n/*              EVENTS DEFINITION       */\r\n\r\n    event New_proposal(uint256 indexed proposalIndex, address indexed from, string action, uint256 value);\r\n    event New_proposal(uint256 indexed proposalIndex, address indexed from, string action, address account);\r\n\r\n    event Deleted_proposal(uint256 indexed proposalIndex, address indexed from, string action);\r\n\r\n    event Approved_proposal(uint256 indexed proposalIndex, address indexed from, string action, uint256 value);\r\n    event Approved_proposal(uint256 indexed proposalIndex, address indexed from, string action, address account);\r\n    \r\n    event Denied_proposal(uint256 indexed proposalIndex, address indexed from, string action, uint256 value);\r\n    event Denied_proposal(uint256 indexed proposalIndex, address indexed from, string action, address account);\r\n\r\n\r\n/*              EVENTS EMITTAL          */\r\n    function _emitNewProposal(uint256 proposalIndex, address proposer, uint8 actionIndex, uint256 value) internal {\r\n        if(_getActionType(actionIndex)==ActionValueType.ADDRESS){\r\n            emit New_proposal(proposalIndex, proposer, ActionString[actionIndex], address(uint160(value)));\r\n        }else{\r\n            emit New_proposal(proposalIndex, proposer, ActionString[actionIndex], value);\r\n        }\r\n    }\r\n    \r\n    function _emitDeniedProposal(uint256 proposalIndex, address proposer, uint8 actionIndex, uint256 value) internal {\r\n        if(_getActionType(actionIndex)==ActionValueType.ADDRESS){\r\n            emit Denied_proposal(proposalIndex, proposer, ActionString[actionIndex], address(uint160(value)));\r\n        }else{\r\n            emit Denied_proposal(proposalIndex, proposer, ActionString[actionIndex], value);\r\n        }\r\n    }\r\n    \r\n    function _emitApprovedProposal(uint256 proposalIndex, address proposer, uint8 actionIndex, uint256 value) internal {\r\n        if(_getActionType(actionIndex)==ActionValueType.ADDRESS){\r\n            emit Approved_proposal(proposalIndex, proposer, ActionString[actionIndex], address(uint160(value)));\r\n        }else{\r\n            emit Approved_proposal(proposalIndex, proposer, ActionString[actionIndex], value);\r\n        }\r\n    }\r\n\r\n/*           TOKEN TOOLS             */\r\n\r\n    //execute approved actions\r\n    function _executeApprovedProposal(uint8 action, uint256 value) internal returns (bool) {\r\n\r\n        if(Action(action)==Action.ADD_ADMIN){\r\n            return addMemberToGroup(ADMIN_GROUP,address(uint160(value)));\r\n        }else if(Action(action)==Action.REMOVE_ADMIN){\r\n            address oldAdmin=address(uint160(value));\r\n            return removeMemberFromGroup(ADMIN_GROUP, oldAdmin);\r\n        }else if(Action(action)==Action.MINT_TOKEN){\r\n            _mint(_getMintingAddress(),value);\r\n        }else if(Action(action)==Action.BURN_TOKEN){\r\n            _burn(_getMintingAddress(),value);\r\n        }else if(Action(action)==Action.MINTING_ADDRESS){\r\n            _changeMintingAddress(address(uint160(value)));\r\n        }else if(Action(action)==Action.PAUSE_TOKEN){\r\n            _pause();\r\n        }else if(Action(action)==Action.UNPAUSE_TOKEN){\r\n            _unpause();\r\n        }else if(Action(action)==Action.CHANGE_ADMIN_PCT){\r\n            setActionPct(uint8(Action.ADD_ADMIN),uint8(value));\r\n            setActionPct(uint8(Action.REMOVE_ADMIN),uint8(value));\r\n            setActionPct(uint8(Action.MINTING_ADDRESS),uint8(value));\r\n            setActionPct(uint8(Action.PAUSE_TOKEN),uint8(value));\r\n            setActionPct(uint8(Action.UNPAUSE_TOKEN),uint8(value));\r\n        }else if(Action(action)==Action.CHANGE_TOKEN_PCT){\r\n            setActionPct(uint8(Action.MINT_TOKEN),uint8(value));\r\n            setActionPct(uint8(Action.BURN_TOKEN),uint8(value));\r\n        }else if(Action(action)==Action.MANAGEMENT_PCT){\r\n            setActionPct(uint8(Action.CHANGE_ADMIN_PCT),uint8(value));\r\n            setActionPct(uint8(Action.CHANGE_TOKEN_PCT),uint8(value));\r\n        }else{\r\n            revert(\"BP00\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _getActionTypeFromProposal(uint256 proposalIndex) internal view returns (ActionValueType) {\r\n        uint8 actionIndex=getProposal[proposalIndex].action;\r\n        return _getActionType(actionIndex);\r\n    }\r\n\r\n    function _getActionType(uint8 action) internal view returns (ActionValueType) {\r\n        require(action\u003cActionString.length,\"Invalid action\");\r\n        Action actionIndex=Action(action);\r\n\r\n        if(\r\n            actionIndex==Action.MINT_TOKEN ||\r\n            actionIndex==Action.BURN_TOKEN ||\r\n            actionIndex==Action.PAUSE_TOKEN ||\r\n            actionIndex==Action.UNPAUSE_TOKEN\r\n        ){\r\n            return ActionValueType.AMOUNT;\r\n        }else if(\r\n            actionIndex==Action.ADD_ADMIN ||\r\n            actionIndex==Action.REMOVE_ADMIN ||\r\n            actionIndex==Action.MINTING_ADDRESS\r\n        ){\r\n            return ActionValueType.ADDRESS;\r\n        }else {// if(\r\n            //actionIndex==Action.ADMIN_PCT ||\r\n            //actionIndex==Action.TOKEN_PCT || \t\r\n            //actionIndex==Action.MANAGEMENT_PCT ||\r\n            //){\r\n            return ActionValueType.PCT;\r\n        }\r\n    }\r\n\r\n    function _submitProposal(\r\n        address proposedBy,\r\n        uint8 action,\r\n        uint256 value\r\n    ) internal returns (uint256) {\r\n        if(_getActionType(action)==ActionValueType.PCT){\r\n            require(isPct(value)==true,\"BP10\");\r\n        }else{\r\n            require(value\u003e0,\"BA00\");\r\n        }\r\n        (uint256 proposalIndex, ErrNo errNo)=addProposal(proposedBy, action, ADMIN_GROUP, value);\r\n        require(errNo==ErrNo.OK, ErrNoString[uint256(errNo)]);\r\n        _emitNewProposal(proposalIndex, proposedBy, action, value);\r\n        _voteProposal(proposedBy, proposalIndex, 1);\r\n        return proposalIndex;\r\n    }\r\n\r\n    // INTERNAL vote\r\n    function _voteProposal(address voter, uint256 proposalIndex, uint8 decision) internal {\r\n        (int8 result, ErrNo errNo)=voteProposal(voter, proposalIndex, decision);\r\n        require(errNo==ErrNo.OK, ErrNoString[uint256(errNo)]);\r\n        uint256 value;\r\n        address proposer;\r\n        uint8 action;\r\n        value=getProposal[proposalIndex].value;\r\n        proposer=getProposal[proposalIndex].proposer;\r\n        action=getProposal[proposalIndex].action;\r\n        \r\n        if(result==1){\r\n            bool executed=_executeApprovedProposal(action, value);\r\n            if(executed==true){\r\n                _emitApprovedProposal(proposalIndex, proposer, action, value);\r\n            }else{\r\n                _emitDeniedProposal(proposalIndex, proposer, action, value);\r\n            }\r\n            removeProposal(proposer, action);\r\n        }else if(result==-1){\r\n            _emitDeniedProposal(proposalIndex, proposer, action, value);\r\n            removeProposal(proposer, action);\r\n        }\r\n    }\r\n\r\n    // Flush proposals made by admin before his removal \r\n    function beforeRemovingMemberFromGroup(uint256 groupIndex, address account) internal override {\r\n        for(uint8 h=0; h\u003cActionString.length; ++h){\r\n            removeProposal(account,h);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n"},"wBTCzConstants.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ncontract wBTCzConstants {\r\n    \r\n    uint256 constant MAX_ADMIN_NUMBER   = 50;\r\n    uint8 constant ACTION_NUMBER        = 10;\r\n    uint8 constant ACTION_VALUE_TYPE    = 3;\r\n    uint256 constant ADMIN_GROUP        = 0;\r\n    uint8[ACTION_NUMBER] INITIAL_PCTS = [60,60,60,60,60,40,40,80,80,100];\r\n    \r\n    enum Action {\r\n        ADD_ADMIN,\r\n        REMOVE_ADMIN,\r\n        MINTING_ADDRESS,\r\n        PAUSE_TOKEN,\r\n        UNPAUSE_TOKEN,\r\n        MINT_TOKEN,\r\n        BURN_TOKEN,\r\n        CHANGE_ADMIN_PCT,\r\n        CHANGE_TOKEN_PCT,\r\n        MANAGEMENT_PCT\r\n    }\r\n    string[ACTION_NUMBER] ActionString=[\r\n        \"ADD_ADMIN\",\r\n        \"REMOVE_ADMIN\",\r\n        \"MINTING_ADDRESS\",\r\n        \"PAUSE_TOKEN\",\r\n        \"UNPAUSE_TOKEN\",\r\n        \"MINT_TOKEN\",\r\n        \"BURN_TOKEN\",\r\n        \"CHANGE_ADMIN_PCT\",\r\n        \"CHANGE_TOKEN_PCT\",\r\n        \"MANAGEMENT_PCT\"\r\n    ];\r\n    enum ActionValueType {\r\n        PCT,\r\n        AMOUNT,\r\n        ADDRESS\r\n    }\r\n    string[ACTION_VALUE_TYPE] ActionValueTypeString=[\r\n        \"PCT: 1 to 100\",\r\n        \"AMOUNT\",\r\n        \"ADDRESS\"\r\n    ];\r\n    string[3] ResultString=[\r\n        \"DENIED\",\r\n        \"ACTIVE\",\r\n        \"APPROVED\"\r\n    ];\r\n    constructor(){}\r\n}"},"Wrappable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\n\r\nabstract contract Wrappable {\r\n    event UNWRAP(address indexed sender, string indexed BTCZrecipient, uint256 amount);\r\n    event WRAP(string indexed BTCZsender, address indexed recipient, uint256 amount);\r\n    constructor() {}\r\n/*          INTERFACES            */\r\n    // INTERNAL transfer from user to mintingAddress storing btcz recipient address\r\n    function unwrap(string calldata BTCZrecipient, uint256 amount) external virtual returns (bool);\r\n    \r\n    // INTERNAL transfer from mintingAddress to user storing btcz sender address\r\n    function wrap(string calldata BTCZsender, address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n"},"WrappableToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\nimport \"./Pausable.sol\";\r\nimport \"./StandardToken.sol\";\r\nimport \"./Wrappable.sol\";\r\n\r\ncontract WrappableToken is StandardToken, Wrappable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    address private _mintingAddress;\r\n\r\n    constructor() {}\r\n\r\n    /*          MODIFIERS            */\r\n    // modifiers use too much bytecode\r\n    function onlyMintingAddress() internal view {\r\n        require(_msgSender()==_mintingAddress,\"BT01\");\r\n    }\r\n/*          INTERFACES            */\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return super.totalSupply()-super.balanceOf(_mintingAddress);\r\n        \r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        if(account==_mintingAddress){\r\n            return 0;\r\n        }\r\n        return super.balanceOf(account);\r\n    }\r\n    function balanceWrappable() public view virtual returns (uint256) {\r\n        return super.balanceOf(_mintingAddress);\r\n    }\r\n    \r\n    //MINTING_ADDRESS\r\n\tfunction _changeMintingAddress(address newMintingAddress) internal {\r\n        require(super.balanceOf(newMintingAddress)==0, \"BT07\");\r\n        if(super.balanceOf(_mintingAddress)\u003e0){\r\n            _tokenTransfer(_mintingAddress, newMintingAddress, super.balanceOf(_mintingAddress));\r\n        }\r\n\t\t_mintingAddress=newMintingAddress;\r\n\t}\r\n\tfunction _getMintingAddress() internal view returns (address) {\r\n\t\treturn _mintingAddress;\r\n\t}\r\n\r\n\r\n   function _beforeTokenTransfer(\r\n    ) internal override view {\r\n        whenNotPaused();\r\n    }\r\n    \r\n    // EXTERNAL transfer from user to mintingAddress storing btcz recipient address\r\n    function unwrap(string calldata BTCZrecipient, uint256 amount) external override returns (bool) {\r\n        _unwrap(msg.sender, BTCZrecipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // EXTERNAL transfer from mintingAddress to user storing btcz sender address\r\n    function wrap(string calldata BTCZsender, address recipient, uint256 amount) external override returns (bool) {\r\n        onlyMintingAddress();\r\n        _wrap(BTCZsender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // INTERNAL transfer from user to mintingAddress storing btcz recipient address\r\n\tfunction _unwrap(address sender, string memory BTCZrecipient, uint256 amount) private {\r\n        require(sender != _mintingAddress, \"BT05\");\r\n\t\t\r\n        _tokenTransfer(sender, _mintingAddress, amount);\r\n\t\t\r\n\t\temit UNWRAP(sender, BTCZrecipient, amount);\r\n\t}\r\n\t\r\n    // INTERNAL transfer from mintingAddress to user storing btcz sender address\r\n\tfunction _wrap(string memory BTCZsender, address recipient, uint256 amount) private {\r\n        require(recipient != _mintingAddress, \"BT06\");\r\n\t\t\r\n        _tokenTransfer(_mintingAddress, recipient, amount);\r\n        \r\n\t\temit WRAP(BTCZsender, recipient, amount);\r\n\t}\r\n\r\n}\r\n"}}