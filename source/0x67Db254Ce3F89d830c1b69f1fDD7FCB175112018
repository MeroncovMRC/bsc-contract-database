// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.12;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}



/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}




contract bb is Ownable {

    event Recharge(address token_, address from, uint256 amount_);
    event Send(address token_, address from, uint256 amount_);
    event RECHARGE_TOKEN(address token_, address from, uint256 amount_e);

    address public stablePoolAddress;
    address public stablePoolAddress2;
    address public marketPoolAddress;
    address public invitePoolAddress;
    address public weightPoolAddress;
    address public marketLevelPoolAddress;
    address public inviteRankPoolAddress;
    address public foreverPoolAddress;
    address public daoPoolAddress;
    address public daoOrgPoolAddress;
    address public techPoolAddress;
    address public foundtionPoolAddress;

    bool public openStable2 = false;

    constructor(address[] memory list)   {
        //链的id
        uint256 _chainId;
        assembly {
            _chainId := chainid()
        }
        require(_chainId == 56, "Invalid Network" );
        stablePoolAddress = list[0];
        stablePoolAddress2 = list[1];
        marketPoolAddress = list[2];
        invitePoolAddress = list[3];
        weightPoolAddress = list[4];
        marketLevelPoolAddress = list[5];
        inviteRankPoolAddress = list[6];
        foreverPoolAddress = list[7];
        daoPoolAddress = list[8];
        daoOrgPoolAddress = list[9];
        techPoolAddress = list[10];
        foundtionPoolAddress = list[11];
    }

    function startStable2() public onlyOwner{
        openStable2 = true;
    }


    function setAddress(
        address[] memory list
    )public onlyOwner {
        stablePoolAddress = list[0];
        stablePoolAddress2 = list[1];
        marketPoolAddress = list[2];
        invitePoolAddress = list[3];
        weightPoolAddress = list[4];
        marketLevelPoolAddress = list[5];
        inviteRankPoolAddress = list[6];
        foreverPoolAddress = list[7];
        daoPoolAddress = list[8];
        daoOrgPoolAddress = list[9];
        techPoolAddress = list[10];
        foundtionPoolAddress = list[11];
    }


    function recharge_token(address token_,uint256 amount_) public {
        require(IERC20(token_).balanceOf(msg.sender)>=amount_,"need more token_");
        _recharge(token_, msg.sender, amount_);
        if(openStable2==false){
            _refund(token_,stablePoolAddress,amount_*26/100);
        }
        if(openStable2==true){
            _refund(token_,stablePoolAddress2,amount_*26/100);
        }
        
        _refund(token_,marketPoolAddress,amount_*10/100);
        _refund(token_,invitePoolAddress,amount_*20/100);
        _refund(token_,weightPoolAddress,amount_*14/100);
        _refund(token_,marketLevelPoolAddress,amount_*10/100);
        _refund(token_,inviteRankPoolAddress,amount_*25/100);
        _refund(token_,foreverPoolAddress,amount_*2/100);
        _refund(token_,daoPoolAddress,amount_*5/100);
        _refund(token_,daoOrgPoolAddress,amount_*36/1000);
        _refund(token_,techPoolAddress,amount_*16/1000);
        _refund(token_,foundtionPoolAddress,amount_*28/1000);
        emit RECHARGE_TOKEN(token_, msg.sender, amount_*26/100);
    }

    function _recharge(address token_, address from_, uint256 amount_) internal {
        require(IERC20(token_).balanceOf(from_)>=amount_,"token is not enough");
        IERC20(token_).transferFrom(from_, address(this), amount_);
        emit Recharge(token_, from_, amount_);
    }

    function _refund(address token_, address account_, uint256 amount_) internal {
        require(IERC20(token_).balanceOf(address(this)) >= amount_ , "Invalid Amount");
        IERC20(token_).transfer(account_, amount_);
        emit Send(token_, account_, amount_);
    }

    function withdrawToken(address token_, address account_, uint256 amount_) public onlyOwner {
        require(IERC20(token_).balanceOf(address(this)) >= amount_ , "Invalid Amount");
        IERC20(token_).transfer(account_, amount_);
    }

}