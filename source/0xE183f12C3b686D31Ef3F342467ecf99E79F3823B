// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.7.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.7.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.7.0;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: @openzeppelin/contracts/token/ERC20/ERC20.sol


// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity >=0.7.0;




/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
   
            _approve(owner, spender, currentAllowance - subtractedValue);
    

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
       
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
   

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;

        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
   
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
      

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
     
                _approve(owner, spender, currentAllowance - amount);
          
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

// File: contracts/Staking.sol



pragma abicoder v2;
pragma solidity >=0.7.0;





contract Staking {

    // token address i want to stake
    ERC20 public stakeToken;
    uint256 public totalStakedAmount=0;
    uint256 public totalUnStakedAmount = 0;
    uint256 public totalStakedAmountUptilNow = 0;
  
    uint public package1 ;
    uint public package2 ;
    // constant value to know that entered term option is invalid 
    uint256 constant private INVALID_INDEX = 999;
    uint256 public pLimit = 20;
    // min 2000 tokens, limit: 20 million tokens, locking period: 14 days , return 90% APR
    // min 2000 tokens, limit: 20 million tokens, locking period: 30 days , return 120% APR
    uint256  private  twoWeekPoolLimit= 20 *10**6; // 20,000,000
    uint256  private  oneMonthPoolLimit= 20 *10**6; // 20,000,000

    // minimum value of tokens
    uint256 public minAmount=2000;
    uint256 public maxAmount=20000;
    // variable to store number of total stakers
    uint256 private totalStaker = 0;
    address public owner;
    uint[2] public stakedPool = [0,0];

    // APR respective to the locked period of tokens
    uint[2] public APR = [90,120];

    // structure to store the information of the staker
    struct StakerInfo{
        uint256 amount;
        uint256 releaseDate;
        bool isRelease;
        uint256 rewardDebt;
        uint termOption;
    }


    // events to emit while staking and unstaking
    event Stake(address indexed _from, uint _duration, uint _value);
    event UnStake(address indexed _from, uint _duration, uint _value);
    
    // mapping the Staker's info in corresponding to a particular address
    mapping(address => StakerInfo[]) public stakers;


    constructor (ERC20 _stakeToken) {

        stakeToken = _stakeToken;
        owner = msg.sender;
        package1 = 10 ;
        package2 = 10 ;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "you dont have the permition to call the function");
        _;
    }

    function changePoolLimts(uint _pLimit) public onlyOwner returns (bool) {
        oneMonthPoolLimit =  _pLimit;
        twoWeekPoolLimit = _pLimit;
        return true;
    }
function changeMaxAmout(uint256 _maxAmount) public onlyOwner returns (bool) {
    maxAmount = _maxAmount;
    return true;
}

function getMaxAmount() public view returns (uint256) {
    return maxAmount;
}

function getMinAmount() public view returns (uint256) {
    return minAmount;
}

function changeMinAmount(uint256 _minAmount) public onlyOwner returns(bool) {
minAmount = _minAmount;
return true;
}

function changeLockDuration(uint _package1, uint _package2) public onlyOwner returns (bool){
    package1 = _package1;
    package2 = _package2;
    return true;
}

function getLockDuration() public view returns (uint , uint){
    return (package1, package2) ;
}

function changeAPR(uint[2] memory _apr) public onlyOwner returns(bool) {
APR = _apr;
return true;
}

function getAPR(uint256 _choice) public view returns(uint _apr) {
    return APR[_choice];
}

function getStakedToken() public view returns(ERC20 _stakeToken) {
    return stakeToken;
}

function changeToken(ERC20 _stakeToken) public onlyOwner returns (bool){
    stakeToken = _stakeToken;
    return true;
}

     // function to return the Staked pool index
    function getStakedPoolIndex(uint256 termOption) public pure returns(uint256) {

    if(termOption == 14) return 0;

    if(termOption == 30) return 1;

    return INVALID_INDEX;

    }

    // function to check the rmaining pool limit  

    function twoWeekPoolRemain() public view returns (uint256) {
        return twoWeekPoolLimit * 10 ** stakeToken.decimals() - stakedPool[0];
    }


    function oneMonthPoolRemain() public view returns (uint256) {
        return oneMonthPoolLimit * 10 ** stakeToken.decimals() - stakedPool[1];
    }


    // modifier to check that the staking amount entered by the user is not greater than the remaining pool limit 
    modifier  underTwoWeekPoolRemain(uint256 _amount) {
        require(twoWeekPoolRemain() >= _amount, "Two week pool limit reached");
        _;
    }


    modifier underOnerMonthPoolRemain(uint256 _amount) {
        require(oneMonthPoolRemain() >= _amount, "One month pool limit reached");
        _;
    }


function getDuration(uint256 _termOption) public view returns(uint) {
    require(_termOption==14 || _termOption == 30, "invalid input" );
    if(_termOption == 14){
        return package1;
    }
    else return package2;
}

    // function to stake 
    function stake(uint256 _amount, uint _termOption) internal   {
        require(_amount >= (minAmount*10**stakeToken.decimals()), "stake amount invalid");
        require(_amount <= (maxAmount*10**stakeToken.decimals()), "stake amount cannot be more than maximum amount allowed for staking");
        require((totalStakeByAddress(msg.sender)/(10**stakeToken.decimals())) < maxAmount , "you cannot stake more tokens");
        uint256 stakedPoolIndex = getStakedPoolIndex(_termOption);
        require(stakedPoolIndex != INVALID_INDEX, "Invalid term option");
        require(stakeToken.balanceOf(msg.sender) >= _amount, "Isufficient balance" );
        require(stakeToken.allowance(msg.sender,address(this)) >= _amount, "Insufficient allowance");


        StakerInfo memory staker = StakerInfo(
            _amount,
            block.timestamp + _termOption*getDuration(_termOption),
            false,
            _termOption*_amount*APR[stakedPoolIndex]/100/365,
            _termOption
        );
        stakers[msg.sender].push(staker);
        stakeToken.transferFrom( msg.sender, address(this), _amount);
        totalStakedAmount += _amount;
        totalStakedAmountUptilNow += _amount;
        stakedPool[stakedPoolIndex] += _amount;
        totalStaker += 1;
        emit Stake(msg.sender, _termOption, _amount);
    }

// function to unstake
    function unStake(uint index) internal {
        require(index < stakers[msg.sender].length , "index out of bounds");
        StakerInfo storage staker = stakers[msg.sender][index];

                                                                                           
        
        require(staker.amount > 0, "Stake amount must be greater than zero");
        require(staker.isRelease == false, "stake has already benn released");
        uint256 willPaid = staker.amount + staker.rewardDebt;
        
        require(
            willPaid <= stakeToken.balanceOf(address(this))
            , "Insufficient balance");
        
        staker.isRelease = true;
        stakeToken.transfer((msg.sender), willPaid);
        totalStakedAmount -= staker.amount;
        totalUnStakedAmount += willPaid;
        stakedPool[getStakedPoolIndex(staker.termOption)] -= staker.amount ; // getStakedPoolIndex(staker.termOption) this will return only 0 or 1 and , this statement is to subtract the unstaked amount from the respective pool index 
        totalStaker -= 1;
        emit UnStake(msg.sender, staker.termOption, staker.amount);
    }


    function twoWeekStake(uint256 _amount) underTwoWeekPoolRemain(_amount) public {

    stake(_amount, 14);

    }


    function oneMonthStake(uint256 _amount) underOnerMonthPoolRemain(_amount) public {

        stake(_amount, 30);

    }

function unstakeToken(uint256 index) public {
    unStake(index);
}

    function getStakerInfor(address _staker) public view returns (StakerInfo[] memory) {

    return stakers[_staker];

    } 

function clear() public onlyOwner returns(bool _status) {
    stakeToken.transfer(owner, stakeToken.balanceOf(address(this)));
    return true;
}  

    function getStakerInfo(address _staker, uint256 from, uint256 to) public view returns (StakerInfo[] memory) {

        StakerInfo[] memory stakerInfor = stakers[_staker];
        require(0<= from && from < stakerInfor.length, "invalid to index");
        require(0 <= to && to < stakerInfor.length, "invalid to index");
        uint256 length = to-from+1;
        StakerInfo[] memory result = new StakerInfo[](length);
        for(uint i= from; i < to ; i++) {
        result[i-from] = stakerInfor[i];
        } 
        return result;
    }


    function getStakerInfoByTermOption(address _staker, uint _termOption, uint from, uint to ) public view returns (StakerInfo[] memory){
        StakerInfo[] memory stakerInfo = stakers[_staker];
        require(from < to , " from must be less than to");
        uint length = 0;
        for(uint256 i = 0; i < stakerInfo.length ; i++) {
            if(stakerInfo[i].termOption == _termOption) {
            length++;
            } 
        }

        require(0 < from && from < length, "Invalid From index");
        require(0 <= to && to< length, "Invalid to index");

        uint256 count = 0;
        uint256 index = 0;
        StakerInfo[] memory result = new StakerInfo[](to-from+1);
        for( uint256 i =0; i< stakerInfo.length; i++) {
        
        if(stakerInfo[i].termOption == _termOption) {
            
            if(from <= count && count <= to) {
                result[index++] = stakerInfo[i];
            }
            if(count == to)
            {
                break;
            }
            count++; 
        }
        
        }
        return result;
    }


    function getStakerInfoByRelease(
        address _staker,
        bool _isRelease,
        uint256 from,
        uint256 to
    ) public view returns (StakerInfo [] memory){

    StakerInfo[] memory stakerInfo = stakers[_staker];
        require(from < to , " from must be less than to");
        uint length = 0;
        for(uint256 i = 0; i< stakerInfo.length ; i++) {
            if(stakerInfo[i].isRelease == _isRelease) {
            length++;
            } 
        }

        require(0 < from && from < length, "Invalid From index");
        require(0 <= to && to< length, "Invalid from index");

        uint256 count = 0;
        uint256 index = 0;
        StakerInfo[] memory result = new StakerInfo[](to-from+1);
        for( uint256 i =0; i< stakerInfo.length; i++) {
        
        if(stakerInfo[i].isRelease == _isRelease) {
            
            if(from <= count && count <= to) {
                result[index++] = stakerInfo[i];
            }
            if(count == to)
            {
                break;
            }
            count++; 
        }
        }
    return result;
    }


    function getStakerInfoByTermOptionAndRelease(
        address _staker,
        bool _isRelease,
        uint256 _termOption,
        uint256 from,
        uint256 to
    ) public view returns (StakerInfo [] memory){

    StakerInfo[] memory stakerInfo = stakers[_staker];
        require(from < to , " from must be less than to");
        uint length = 0;
        for(uint256 i = 0; i< stakerInfo.length ; i++) {
            if(stakerInfo[i].termOption == _termOption && stakerInfo[i].isRelease == _isRelease ) {
            length++;
            } 
        }

        require(0< from && from < length, "Invalid From index");
        require(0<= to && to< length, "Invalid from index");

        uint256 count = 0;
        uint256 index = 0;
        StakerInfo[] memory result = new StakerInfo[](to-from+1);
        for( uint256 i =0; i< stakerInfo.length; i++) {
        
        if(stakerInfo[i].isRelease == _isRelease && stakerInfo[i].termOption == _termOption ) {
            
            if(from <= count && count <= to) {
                result[index++] = stakerInfo[i];
            }
            if(count == to)
            {
                break;
            }
            count++; 
        }
        
        }

    return result;
    }


    function getDetailStakedPool() public view returns(uint256[2] memory) {

        return stakedPool;

    }


    function totalStakeByAddress( address _address) public view returns (uint) {

    uint total =0;
    StakerInfo[] storage staker = stakers[_address];
    
    for (uint256 i =0; i< staker.length; i++) {
        if(staker[i].isRelease == false) {
            total += staker[i].amount;
        }
    }
    return total;

    }


    function totalRewardDebtByAddress(address _address) public view returns (uint _staked) {
        uint total = 0;
        StakerInfo[] storage staker = stakers[_address];
        for (uint256 i = 0; i< staker.length; i++) 
        {
            if(staker[i].isRelease == true) {
                total += staker[i].rewardDebt;
            }
        }
        return total;
    }
    

    function getStakeCount(address _address) public view returns (uint) {
        uint total = 0;
        StakerInfo[] storage staker = stakers[_address];
        for(uint256 i = 0; i< staker.length ; i++) {
            if(staker[i].isRelease == false) {
                total += 1;
            }
        }
        return total;
    } 


    function getStakeInfo(address _staker, uint _index ) public view returns(uint256 _amount, uint _releaseDate, bool _isRelease, uint _rewardDebt) {
        
        StakerInfo memory staker = stakers[_staker][_index];
        return (staker.amount, staker.releaseDate, staker.isRelease, staker.rewardDebt);

    }


    function totalStakerInfobyTermOption(address _staker, uint _termOption)public view returns(uint)  {

        uint total = 0;
        StakerInfo[] storage staker = stakers[_staker];
        for (uint256 i =0; i< staker.length; i++) {
            if(staker[i].termOption == _termOption) {
                total++;
            }
        }
        return total;

    }


    function totalStakerInfoByTermOptionAndRelease(address _staker, uint _termOption, bool _isRelease) public view returns(uint) {

        uint total = 0;
        StakerInfo[] storage staker = stakers[_staker];
        for(uint256 i=0; i < staker.length; i++) {
            if(staker[i].termOption == _termOption&& staker[i].isRelease == _isRelease) {
                total++;
            }
        }
        return total;
    }

    function totalStakers() public view returns(uint256) {
        return totalStaker;
    }

    function totalStakerInfoByRelease(address _staker, bool _isRelease) public view returns(uint) {
        uint total = 0;
        StakerInfo[] storage staker = stakers[_staker];
        for(uint256 i=0; i< staker.length; i++){
            if(staker[i].isRelease == _isRelease){
            total++;
            }
            
        }
        return total;
    }

}