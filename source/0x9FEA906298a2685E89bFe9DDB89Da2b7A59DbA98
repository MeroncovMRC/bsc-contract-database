// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;


interface ERC721{
    function toMint(address to_,string memory mintUrl) external returns (bool);
    function transferFrom(address from_,address to_,uint256 tokenId_) external returns (bool);
}

interface ERC20{
    function decimals() external view returns (uint8);
    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);
}

/**
 * 中介合约
 */
contract inter{

    //购买USDT合约地址
    address public UsdtContract = address(0x55d398326f99059fF775485246999027B3197955);
    //收款地址
    address public collectAddress = address(0x29B35748c90765f6443EDfcAC0E409861A9cad88);
    //节点合约地址
    address public nodeAddress = address(0x4526932f8f8a1584b6f966f468C38fA8C8A2eC53);
    //超级节点合约地址
    address public supernodeAddress = address(0xe8DA632E55E25B39BdD9F81C6b364E6Bc02c9dC0);


    //管理员
    address public owners;
    modifier _Owner {   //管理员
        require(owners == msg.sender);
        _;
    }

    uint256 public price_node = 500 * 10**18;//节点的价格
    uint256 public price_super_node = 5000 * 10**18;//超级节点的价格

    /**
    ** 初始化管理员
    */
    constructor() {
        owners = msg.sender;
    }
    /**
    * 修改管理员
    */
    function setOwner(address owner_) public _Owner returns (bool) {
        owners = owner_;
        return true;
    }

    /**
    * 修改地址
    */
    function setAddress(address address_,uint256 type_) public _Owner returns (bool) {
        if(type_ == 1){ //修改代币地址
            UsdtContract = address_;
            return true;
        }
        if(type_ == 2){ //修改收款地址
            collectAddress = address_;
            return true;
        }
        if(type_ == 3){ //修改节点NFT合约地址
            nodeAddress = address_;
            return true;
        }
        if(type_ == 4){ //修改超级节点NFT合约地址
            supernodeAddress = address_;
            return true;
        }
        return false;
    }

    /**
    * 修改节点价格
    */
    function setPrice(uint256 price_,uint256 type_) public _Owner returns (bool) {
        if(type_ == 1){
            price_node = price_;
            return true;
        }
        if(type_ == 2){
            price_super_node = price_;
            return true;
        }
        return false;
    }
    /**
    * 购买节点
    */
    function buyNode(uint256 type_,uint256 number_,string memory mintUrl) public returns (bool) {
        require(number_ > 0, "ERC721: Illegal quantity");
        ERC20 UsdtToken = ERC20(UsdtContract);
        
        if(type_ == 1){
            for(uint i = 0 ; i < number_ ; i++){
                UsdtToken.transferFrom(msg.sender,address(collectAddress),price_node);
                ERC721 nodeToken = ERC721(nodeAddress);
                nodeToken.toMint(msg.sender,mintUrl);
            }
            return true;
        }
        if(type_ == 2){
            for(uint i = 0 ; i < number_ ; i++){
                UsdtToken.transferFrom(msg.sender,address(collectAddress),price_super_node);
                ERC721 supernodeToken = ERC721(supernodeAddress);
                supernodeToken.toMint(msg.sender,mintUrl);
            }
            
            return true;
        }
        return false;
    }
    
}