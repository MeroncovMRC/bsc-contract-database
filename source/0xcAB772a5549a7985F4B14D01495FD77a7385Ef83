// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

interface IERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

interface IERC721 {
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    event Transfer(address indexed from, address indexed to, uint indexed tokenId);
    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
    function balanceOf(address owner) external view returns (uint balance);
    function ownerOf(uint tokenId) external view returns (address owner);
    function safeTransferFrom(address from, address to, uint tokenId) external;
    function transferFrom(address from, address to, uint tokenId) external;
    function approve(address to, uint tokenId) external;
    function getApproved(uint tokenId) external view returns (address operator);
    function setApprovalForAll(address operator, bool _approved) external;
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function safeTransferFrom(address from, address to, uint tokenId, bytes calldata data) external;
}

interface IEpicHeroNFT is IERC721{
    function tokenOfOwnerByIndex(address owner, uint index) external view returns (uint tokenId);
    function getHero(uint tokenId) external view returns (uint8 level, uint8 rarity);
    function adminSetRarity(uint heroId, uint8 rarity) external;
    function adminSetRarities(uint[] memory heroIds, uint8[] memory rarities) external;
}

interface IEpicHeroReflect {
    function registerNewMint(uint tokenId) external;
    function updateBurnedToken(uint tokenId) external;
}

library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
    unchecked {
        uint256 oldAllowance = token.allowance(address(this), spender);
        require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
        uint256 newAllowance = oldAllowance - value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

abstract contract ReentrancyGuard {
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () {
        _status = _NOT_ENTERED;
    }

    modifier nonReentrant() {
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
        _status = _ENTERED;

        _;

        _status = _NOT_ENTERED;
    }
}

abstract contract Auth {
    address owner;
    mapping (address => bool) private authorizations;

    constructor(address _owner) {
        owner = _owner;
        authorizations[_owner] = true;
    }

    modifier onlyOwner() {
        require(isOwner(msg.sender)); _;
    }

    modifier authorized() {
        require(isAuthorized(msg.sender)); _;
    }

    function authorize(address adr) public onlyOwner {
        authorizations[adr] = true;
        emit Authorized(adr);
    }

    function unauthorize(address adr) public onlyOwner {
        authorizations[adr] = false;
        emit Unauthorized(adr);
    }

    function isOwner(address account) public view returns (bool) {
        return account == owner;
    }

    function isAuthorized(address adr) public view returns (bool) {
        return authorizations[adr];
    }

    function transferOwnership(address payable adr) public onlyOwner {
        owner = adr;
        authorizations[adr] = true;
        emit OwnershipTransferred(adr);
    }

    event OwnershipTransferred(address owner);
    event Authorized(address adr);
    event Unauthorized(address adr);
}

contract FusionV1 is Auth, ReentrancyGuard {
    using SafeERC20 for IERC20;

    address public feeAddress = 0x618cBeb39560B08E820cbc47B3DE1028d3b75810;
    address deadAddress = 0x000000000000000000000000000000000000dEaD;

    IEpicHeroNFT genesisNft;
    IEpicHeroNFT demiNft;

    address public genesisReflectAddress;
    address public demiReflectAddress;

    struct FeeInfo {
        address tokenA;
        address tokenB;
        uint256 tokenAFee;
        uint256 tokenBFee;
    }

    FeeInfo[] public genesisFees;
    FeeInfo[] public demiFees;

    bool public isPaused = false;

    uint8 public minGenesisRarity = 1;
    uint8 public maxGenesisRarity = 4;
    uint8 public minDemiRarity = 1;
    uint8 public maxDemiRarity = 4;

    constructor() Auth(msg.sender) ReentrancyGuard(){
        genesisNft = IEpicHeroNFT(0xafDcB0eCaD1c8Cb22893dCA7D6c510dBFDa3BBeC);
        demiNft = IEpicHeroNFT(0xDD581CAb6F7643AB11498a4B83a8bcDA9EACa29A);

        genesisReflectAddress = 0x09eAf2a4bcE29796EE380Aae6a3D23B817Ad67EB;
        demiReflectAddress = 0xa1cF6FeAb770cD15D61f713C7810ff0649DA51F1;
    }

    receive() external payable {
    }

    function genesisFeeLength() external view returns (uint256) {
        return genesisFees.length;
    }

    function demiFeeLength() external view returns (uint256) {
        return demiFees.length;
    }

    function addGenesisFee(
        address _tokenA,
        address _tokenB,
        uint256 _tokenAFee,
        uint256 _tokenBFee
    ) public authorized {
        genesisFees.push(FeeInfo({
        tokenA : _tokenA,
        tokenB : _tokenB,
        tokenAFee: _tokenAFee,
        tokenBFee: _tokenBFee
        }));
    }

    function setGenesisFee(
        uint256 _rarity,
        address _tokenA,
        address _tokenB,
        uint256 _tokenAFee,
        uint256 _tokenBFee
    ) public authorized {
        genesisFees[_rarity].tokenA = _tokenA;
        genesisFees[_rarity].tokenB = _tokenB;
        genesisFees[_rarity].tokenAFee = _tokenAFee;
        genesisFees[_rarity].tokenBFee = _tokenBFee;
    }

    function addDemiFee(
        address _tokenA,
        address _tokenB,
        uint256 _tokenAFee,
        uint256 _tokenBFee
    ) public authorized {
        demiFees.push(FeeInfo({
        tokenA : _tokenA,
        tokenB : _tokenB,
        tokenAFee: _tokenAFee,
        tokenBFee: _tokenBFee
        }));
    }

    function setDemiFee(
        uint256 _rarity,
        address _tokenA,
        address _tokenB,
        uint256 _tokenAFee,
        uint256 _tokenBFee
    ) public authorized {
        demiFees[_rarity].tokenA = _tokenA;
        demiFees[_rarity].tokenB = _tokenB;
        demiFees[_rarity].tokenAFee = _tokenAFee;
        demiFees[_rarity].tokenBFee = _tokenBFee;
    }

    function startFusion(uint256 _heroA, uint256 _heroB, bool isKeepHero, bool isGenesis, string memory _sig) public nonReentrant {
        require(!isPaused, "Fusion stopped");

        uint8 levelA;
        uint8 levelB;
        uint8 rarityA;
        uint8 rarityB;

        if(isGenesis){
            require(genesisNft.ownerOf(_heroA) == msg.sender && genesisNft.ownerOf(_heroB) == msg.sender, "Not owner");
            (levelA, rarityA) = genesisNft.getHero(_heroA);
            (levelB, rarityB) = genesisNft.getHero(_heroB);

            require(levelA > 0 && rarityA >= minGenesisRarity && rarityA <= maxGenesisRarity, "GenesisHero A not meet required");
            require(levelB > 0 && rarityB >= minGenesisRarity && rarityB <= maxGenesisRarity, "GenesisHero B not meet required");

            if(!isKeepHero){
                genesisNft.safeTransferFrom(address(msg.sender), deadAddress, _heroB);

                try IEpicHeroReflect(genesisReflectAddress).updateBurnedToken( _heroB ) {} catch {}
            }else{
                FeeInfo storage poolB = genesisFees[rarityB];
                if(poolB.tokenBFee > 0){
                    IERC20(poolB.tokenB).safeTransferFrom(address(msg.sender), feeAddress, poolB.tokenBFee);
                }
            }

            FeeInfo storage poolA = genesisFees[rarityA];
            if(poolA.tokenAFee > 0){
                IERC20(poolA.tokenA).safeTransferFrom(address(msg.sender), feeAddress, poolA.tokenAFee);
            }
        }else{
            require(demiNft.ownerOf(_heroA) == msg.sender && demiNft.ownerOf(_heroB) == msg.sender, "Not owner");
            (levelA, rarityA) = demiNft.getHero(_heroA);
            (levelB, rarityB) = demiNft.getHero(_heroB);

            require(levelA > 0 && rarityA >= minDemiRarity && rarityA <= maxDemiRarity, "DemiHero A not meet required");
            require(levelB > 0 && rarityB >= minDemiRarity && rarityB <= maxDemiRarity, "DemiHero B not meet required");

            if(!isKeepHero){
                demiNft.safeTransferFrom(address(msg.sender), deadAddress, _heroB);

                try IEpicHeroReflect(demiReflectAddress).updateBurnedToken( _heroB ) {} catch {}
            }else{
                FeeInfo storage poolB = demiFees[rarityB];
                if(poolB.tokenBFee > 0){
                    IERC20(poolB.tokenB).safeTransferFrom(address(msg.sender), feeAddress, poolB.tokenBFee);
                }
            }

            FeeInfo storage poolA = demiFees[rarityA];
            if(poolA.tokenAFee > 0){
                IERC20(poolA.tokenA).safeTransferFrom(address(msg.sender), feeAddress, poolA.tokenAFee);
            }
        }

        emit StartFusion(msg.sender, _heroA, _heroB, rarityA, rarityB, isKeepHero, isGenesis, _sig);
    }

    function setGenesisRarities(uint[] memory _heroIds, uint8[] memory _rarities, string memory _sig) external authorized {
        require(_heroIds.length == _rarities.length, "Invalid array");

        for(uint i = 0; i < _heroIds.length; i++){
            genesisNft.adminSetRarity(_heroIds[i], _rarities[i]);
        }

        emit SetGenesisRarities(_sig);
    }

    function setDemiRarities(uint[] memory _heroIds, uint8[] memory _rarities, string memory _sig) external authorized {
        require(_heroIds.length == _rarities.length, "Invalid array");

        demiNft.adminSetRarities(_heroIds, _rarities);

        emit SetDemiRarities(_sig);
    }

    function setPaused(bool value) external authorized {
        require(value != isPaused, "Same");
        isPaused = value;
    }

    function setFeeAddress(address _feeAddress) public onlyOwner{
        require(_feeAddress != address(0), "setFeeAddress: ZERO");
        feeAddress = _feeAddress;
    }

    function setMinMaxRarity(uint8 _minGenesis, uint8 _maxGenesis, uint8 _minDemi, uint8 _maxDemi) public onlyOwner{
        require(_minGenesis <= _maxGenesis && _maxGenesis <= 7, "Invalid genesis rarity");
        require(_minDemi <= _maxDemi && _maxDemi <= 7, "Invalid demi rarity");

        minGenesisRarity = _minGenesis;
        maxGenesisRarity = _maxGenesis;
        minDemiRarity = _minDemi;
        maxDemiRarity = _maxDemi;
    }

    function retrieveBNB(uint _amount) external onlyOwner{
        uint balance = address(this).balance;

        if(_amount > balance){
            _amount = balance;
        }

        (bool success,) = payable(msg.sender).call{ value: _amount }("");
        require(success, "Failed");
    }

    function emergencyRetrieveTokens(address _token, uint _amount) external onlyOwner {
        uint balance = IERC20(_token).balanceOf(address(this));

        if(_amount > balance){
            _amount = balance;
        }

        require(IERC20(_token).transfer(msg.sender, _amount), "Transfer failed");
    }

    function emergencyRetrieveNfts(address _ntfAddress, uint256[] memory _heroIds) external onlyOwner {
        for (uint i = 0; i < _heroIds.length; i++) {
            IEpicHeroNFT(_ntfAddress).safeTransferFrom(address(this), msg.sender, _heroIds[i]);
        }
    }

    function emergencyRetrieveAllNfts(address _ntfAddress) external onlyOwner {
        IEpicHeroNFT nftContract = IEpicHeroNFT(_ntfAddress);

        uint256 balance = nftContract.balanceOf(address(this));
        uint256[] memory heroIds = new uint256[](balance);

        for (uint i = 0; i < balance; i++) {
            heroIds[i] = nftContract.tokenOfOwnerByIndex(address(this), i);
        }

        for (uint i = 0; i < heroIds.length; i++) {
            nftContract.safeTransferFrom(address(this), msg.sender, heroIds[i]);
        }
    }

    function onERC721Received(address, address, uint, bytes calldata) public pure returns (bytes4) {
        return 0x150b7a02;
    }

    event StartFusion(address indexed user, uint256 indexed heroA, uint256 indexed heroB, uint256 rarityA, uint256 rarityB, bool isKeepHero, bool isGenesis, string sig);
    event SetGenesisRarities(string sig);
    event SetDemiRarities(string sig);
}