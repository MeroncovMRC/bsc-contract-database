pragma solidity ^0.8.0;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
    * @dev Returns the token name.
    */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: openzeppelin-solidity/contracts/GSN/Context.sol


pragma solidity ^0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: openzeppelin-solidity/contracts/math/SafeMath.sol


pragma solidity ^0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



pragma solidity ^0.8.0;


interface ERC721{
    function ownerOf(uint256 tokenId) external view returns (address owner);
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function transferFrom(address from, address to, uint256 tokenId) external;
    function getApproved(uint256 tokenId) external view returns (address operator);
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


interface ERC721TokenReceiver {
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);
}



interface NftMetadata{
    function getRank(uint256 _tokenId) external  view returns (uint256);
    function getMetadata(uint256 _tokenId) external   view returns (string memory);
}


/**
  _____          ____  ____ _____ _______ 
 |  __ \   /\   / __ \|  _ \_   _|__   __|
 | |  | | /  \ | |  | | |_) || |    | |   
 | |  | |/ /\ \| |  | |  _ < | |    | |   
 | |__| / ____ \ |__| | |_) || |_   | |   
 |_____/_/    \_\____/|____/_____|  |_|   
                                                                                  
DAOBIT - BMeebits DAO Token & staking


Site: 
    https://bmeebits.com

Telegram: 
    https://t.me/bmeebits_com

Marketplaces: 
    https://tofunft.com/collection/bmeebits/items
    https://opensea.io/collection/bmeebits
    https://scv.finance/nft/collection/bmeebits

Info:
    https://www.dapp.com/app/bmeebits?follow
    https://cointelegraph.com/press-releases/the-bmeebits-collection-of-20k-3d-nft-models-sold-out-in-12-hours


Stay tuned!

*/


contract NftStakingBEP20 is ERC721TokenReceiver, Context, IBEP20  {

    using SafeMath for uint256;

    //BEP20 functionality
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    bool private _mintable;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event EnterStaking(address indexed owner, uint256 indexed tokenId);
    event ExitStaking(address indexed owner, uint256 indexed tokenId);
    event ERC721Received(address operator, address _from, uint256 tokenId);


    //Internal info
    address private _owner = 0x386f2BD2808E96c8A23f698765dCdbe10D08F201;
    address public REFERENCE_NFT;

    //External references
    NftMetadata public nftMetadata;
    ERC721 public erc721;

    //Holded nft data
    mapping(uint256 => address) public nft2user;

    //Staking
    mapping(address => uint256) public userShares;
    mapping(address => uint256) public alreadyStaked;
    mapping(address => uint256) public lastUpdateBlock;
    uint256 public totalShares = 0;

    uint256 public STAKING_BONUS_PER_BLOCK = 0.02 ether;
    uint256 public MAX_RATING = 20000;

    bool public isWithdrawActivated = true;

    //Vesting
    mapping(address => uint256) public readyForWithdraw;
    mapping(address => uint256) public vestingStartBlock;
    mapping(address => uint256) public userUnlockPerBlock;
    uint256 public VESTING_PERIOD_BLOCKS = 2583000; //About 3 monthes
    bool public useStaticVestingPerBlock = false;

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }


    constructor(address _nftAddress, address _metadataAddress, string memory name, string memory symbol, uint8 decimals) public {
        REFERENCE_NFT = _nftAddress;
        nftMetadata = NftMetadata(_metadataAddress);
        erc721 = ERC721(_nftAddress);

        _owner = msg.sender;
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        _mintable = true;
    }

    /**
     * Get all bonus
     */
    function getStake(address _stakerAddress) public view returns (uint256){
        return alreadyStaked[_stakerAddress] + getPendingBonus(_stakerAddress);
    }

    /**
     * Calculate vesting unlock per block
     */
    function getUserVestingPerBlock(address _stakerAddress) public view returns (uint256){

        if(useStaticVestingPerBlock){
            return userUnlockPerBlock[_stakerAddress];
        }


        uint256 additionalBlocks = (block.number - lastUpdateBlock[_stakerAddress]);

        if(userShares[_stakerAddress] == 0){
            additionalBlocks = 0;
        }

        return getStake(_stakerAddress).div(VESTING_PERIOD_BLOCKS + additionalBlocks);
    }

    /**
     * Vesting pending
     */
    function getVestingPending(address _stakerAddress) public view returns (uint256){
        uint256 blockCount =  block.number - vestingStartBlock[_stakerAddress];
        uint256 unlock = (blockCount * getUserVestingPerBlock(_stakerAddress));

        uint256 userStake = getStake(_stakerAddress);
        if(unlock + readyForWithdraw[_stakerAddress] > userStake){
            return userStake - readyForWithdraw[_stakerAddress];
        }

        return unlock;
    }

    /**
     * Calculate current vesting amount and start new
     */
    function flattenVestingBonus(address _stakerAddress) private {

        uint256 blockNumber = block.number;

        uint256 userStake = getStake(_stakerAddress);

        readyForWithdraw[_stakerAddress] = readyForWithdraw[_stakerAddress] + getVestingPending(_stakerAddress);

        if(readyForWithdraw[_stakerAddress] > userStake){
            readyForWithdraw[_stakerAddress] = userStake;
        }

        vestingStartBlock[_stakerAddress] =  1 + blockNumber;

        userUnlockPerBlock[_stakerAddress] =  getStake(_stakerAddress).div(VESTING_PERIOD_BLOCKS);
    }

    /**
     * Get nft rank from ranking contract
     */
    function getNftRank(uint256 _tokenId) public view returns (uint256){
        return MAX_RATING - nftMetadata.getRank(_tokenId);
    }

    function nop() public{

    }

    /**
     * Enter staking
     */
    function enter(uint256 _tokenId) public {

        //Check token data and get it
        require(erc721.ownerOf(_tokenId) == msg.sender, "Only owner");
        require((erc721.getApproved(_tokenId) == address(this) || erc721.isApprovedForAll(msg.sender, address(this))), "Not Approved");

        erc721.safeTransferFrom(msg.sender, address(this), _tokenId);


        //Recalculate tokens
        flattenPendingBonus(msg.sender);
        flattenVestingBonus(msg.sender);

        //Calculate rank
        uint256 rank = getNftRank(_tokenId);
        userShares[msg.sender] = userShares[msg.sender] + rank;
        totalShares += rank;

        //Save token info
        nft2user[_tokenId] = msg.sender;
        emit EnterStaking(msg.sender, _tokenId);

    }

    function pseudoEnter(uint256 _tokenId) public onlyOwner{

        //Recalculate tokens
        flattenPendingBonus(msg.sender);
        flattenVestingBonus(msg.sender);

        //Calculate rank
        uint256 rank = getNftRank(_tokenId);
        userShares[msg.sender] = userShares[msg.sender] + rank;
        totalShares += rank;

        //Save token info
        nft2user[_tokenId] = msg.sender;
        emit EnterStaking(msg.sender, _tokenId);
    }

    /**
     * Exit staking
     */
    function exit(uint256 _tokenId) public{
        require(msg.sender == nft2user[_tokenId], "Invalid token owner");

        //Recalulate
        flattenPendingBonus(msg.sender);
        flattenVestingBonus(msg.sender);

        //Remove from shares
        uint256 rank = getNftRank(_tokenId);
        userShares[msg.sender] = userShares[msg.sender] - rank;
        totalShares -= rank;

        //Remove info
        nft2user[_tokenId] = address(0);
        emit ExitStaking(msg.sender, _tokenId);

        //Send backwards
        erc721.safeTransferFrom(address(this), msg.sender, _tokenId);
    }

    function pseudoExit(uint256 _tokenId) public onlyOwner{

        //Recalulate
        flattenPendingBonus(msg.sender);
        flattenVestingBonus(msg.sender);

        //Remove from shares
        uint256 rank = getNftRank(_tokenId);
        userShares[msg.sender] = userShares[msg.sender] - rank;
        totalShares -= rank;

        //Remove info
        nft2user[_tokenId] = address(0);
        emit ExitStaking(msg.sender, _tokenId);
    }


    /**
     * Withdraw staked tokens
     */
    function withdrawTokens() public {

        require(isWithdrawActivated, "Withdraw disabled");

        flattenPendingBonus(msg.sender);
        flattenVestingBonus(msg.sender);

        _mint(msg.sender, readyForWithdraw[msg.sender]);

        
        alreadyStaked[msg.sender] = alreadyStaked[msg.sender] - readyForWithdraw[msg.sender] ;
        readyForWithdraw[msg.sender] = 0;
    }

    /**
     * Update user staking data
     */
    function updateUserData() public {
        flattenPendingBonus(msg.sender);
        flattenVestingBonus(msg.sender);
    }

        /**
     * Update user staking data
     */
    function updateUserDataAdmin(address user) public onlyOwner {
        flattenPendingBonus(user);
        flattenVestingBonus(user);
    }

    /**
     * Finalize current user pending bonus
     */
    function flattenPendingBonus(address _stakerAddress) private {

        uint256 pendingBonus = getPendingBonus(_stakerAddress);

        alreadyStaked[_stakerAddress] += pendingBonus;

        lastUpdateBlock[_stakerAddress] = block.number;
    }


    /**
     * Get current pending bonus
     */
    function getPendingBonus(address _stakerAddress) public view returns(uint256){
        uint256 pendingBlocks = block.number - lastUpdateBlock[_stakerAddress];


        if(totalShares == 0){
            return 0;
        }

        //Bonus = (bonus per block / totalSharesActive) * userShares * pendingBlocks
        return (STAKING_BONUS_PER_BLOCK.div(totalShares) * userShares[_stakerAddress]) * pendingBlocks;
    }


    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external override returns(bytes4){

        _data;
        emit ERC721Received(_operator, _from, _tokenId);

        return 0x150b7a02;
    }


    /**
     * Claim owner tokens
     */
    function claimOwner(uint256 _amount) public onlyOwner {
        payable(msg.sender).transfer(_amount);
    }

    function claimOwnerToken(address tokenAddress, uint256 _amount) public onlyOwner {
        IBEP20(tokenAddress).transfer(msg.sender, _amount);
    }


    function claimOwnerToken721(address tokenAddress, uint256 _tokenId) public onlyOwner {
        ERC721(tokenAddress).safeTransferFrom(msg.sender, address(this), _tokenId);
    }



    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    /**
     * Change staking amount per block
     */

    function changeAmountPerBlock(uint256 _amountPerBlock) public onlyOwner{
        STAKING_BONUS_PER_BLOCK = _amountPerBlock;
    }

    /**
     * Change vesting period blocks
     */

    function changeVestingPeriod(uint256 _vestingPeriod) public onlyOwner{
        VESTING_PERIOD_BLOCKS = _vestingPeriod;
    }

    /**
     * Change metadata holder
     */

    function changeMetadataAddress(address _metadataAddress) public onlyOwner{
        nftMetadata = NftMetadata(_metadataAddress);
    }

    /**
     * Change withdraw activation status
     */
    function setWithdrawStatus(bool _status) public onlyOwner{
        isWithdrawActivated = _status;
    }

    /**
     * Change using static or dynamic data for vesting
     */

    function setuseStaticVestingPerBlock(bool _status) public onlyOwner{
        useStaticVestingPerBlock = _status;
    }

    /**
     * Change name and ticker
     */
    function changeNameAndTicker(string memory name, string memory symbol) public onlyOwner{
         _name = name;
        _symbol = symbol;
    }


    


    /**
     * @dev Returns if the token is mintable or not
     */
    function mintable() external view returns (bool) {
        return _mintable;
    }

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external override view returns (address) {
        return _owner;
    }

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external override view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external override view returns (string memory) {
        return _symbol;
    }

    /**
    * @dev Returns the token name.
    */
    function name() external override view returns (string memory) {
        return _name;
    }

    /**
     * @dev See {BEP20-totalSupply}.
     */
    function totalSupply() external override view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {BEP20-balanceOf}.
     */
    function balanceOf(address account) external override view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {BEP20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {BEP20-allowance}.
     */
    function allowance(address owner, address spender) external override view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {BEP20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {BEP20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {BEP20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }

    /**
     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing
     * the total supply.
     *
     * Requirements
     *
     * - `msg.sender` must be the token owner
     * - `_mintable` must be true
     */
    function mint(uint256 amount) public onlyOwner returns (bool) {
        require(_mintable, "this token is not mintable");
        _mint(_msgSender(), amount);
        return true;
    }

    /**
   * @dev Burn `amount` tokens and decreasing the total supply.
   */
    function burn(uint256 amount) public returns (bool) {
        _burn(_msgSender(), amount);
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "BEP20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted
     * from the caller's allowance.
     *
     * See {_burn} and {_approve}.
     */
    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "BEP20: burn amount exceeds allowance"));
    }

}