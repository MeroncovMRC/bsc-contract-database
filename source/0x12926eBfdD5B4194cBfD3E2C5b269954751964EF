pragma solidity  0.6.12;

interface IERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract Context {
    constructor () internal { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}

abstract contract  Godnewsslid is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor (string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }
}
library DateTimeLibrary {
 
    uint constant SECONDS_PER_DAY = 24 * 60 * 60;
    uint constant SECONDS_PER_HOUR = 60 * 60;
    uint constant SECONDS_PER_MINUTE = 60;
    int constant OFFSET19700101 = 2440588;
 
    uint constant DOW_MON = 1;
    uint constant DOW_TUE = 2;
    uint constant DOW_WED = 3;
    uint constant DOW_THU = 4;
    uint constant DOW_FRI = 5;
    uint constant DOW_SAT = 6;
    uint constant DOW_SUN = 7;

 
    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {
        int __days = int(_days);
 
        int L = __days + 68569 + OFFSET19700101;
        int N = 4 * L / 146097;
        L = L - (146097 * N + 3) / 4;
        int _year = 4000 * (L + 1) / 1461001;
        L = L - 1461 * _year / 4 + 31;
        int _month = 80 * L / 2447;
        int _day = L - 2447 * _month / 80;
        L = _month / 11;
        _month = _month + 2 - 12 * L;
        _year = 100 * (N - 49) + _year + L;
 
        year = uint(_year);
        month = uint(_month);
        day = uint(_day);
    }
 

    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {
        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);
    }

}

library SafeERC20 {
    using SafeMath for uint;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IPancakeRouter02 is IPancakeRouter01 {

}

interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

contract Godt is Godnewsslid, Context {
  using SafeERC20 for IERC20;
  using Address for address;
  using SafeMath for uint;

  mapping (address => bool) public includeusers;
  mapping (address => bool) public witeeArecipient;


    mapping (address => uint) private _balances;

    mapping (address => mapping (address => uint)) private _allowances;

    uint private _totalSupply;
    uint public maxSupply =  1000000000000000 * 1e18;
    function totalSupply() override public view returns (uint) {
        return _totalSupply;
    }
    function balanceOf(address account) override public view returns (uint) {
        return _balances[account];
    }
    function transfer(address recipient, uint amount) override public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner, address spender) override public view returns (uint) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint amount) override public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint amount) override public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    mapping(address => address) public inviter;


 mapping(uint =>uint)  public daysp;

  function gept1() public view returns(uint256 ){
      uint[] memory amounts;
        address[] memory path = new address[](2);
        path[0] = token0;
        path[1] = PancakeRouter01.WETH();
       amounts = PancakeRouter01.getAmountsOut(1000000000000000000, path);
       if (amounts.length>0) {
           return amounts[1];
       } else {
           return 0;
       }
       
  }

    bool private swapping;

    function _transfer(address sender, address recipient, uint amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

           uint256 needburn;
           uint256 olda=amount;
        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");

        if (isfee) {
                if (sender ==pancakePair || recipient == pancakePair) {
                    if (iscanswap) {
                        if (sender ==pancakePair) {
                            require(witeeaddress[recipient], " recipient not witee  swap");
                        }
                        if (recipient ==pancakePair) {
                            require(witeeaddress[sender], " sender  not witee swap");
                        }
                    }

        uint256 contractTokenBalance = balanceOf(address(this));

        bool canSwap = contractTokenBalance > 0;

        if (
            swapEnabled &&
            canSwap &&
            !swapping &&
            recipient == pancakePair
        ) {
            swapping = true;
            swapAndLiquify(contractTokenBalance);
            swapping = false;
        }
            

                if(witeeaddress[recipient]||witeeaddress[sender] ) {

                } else {


                // _topcheck(recipient, amount);

                uint burnaa=amount.mul(1).div(100);
                _balances[address(this)] = _balances[address(this)].add(burnaa);
                if (balanceOf(address(0)) < 999999999000000 *1e18) {
                   _burn(address(this), burnaa);
                }

                   uint marketa=amount.mul(5).div(100);
                    _balances[marketadress] = _balances[marketadress].add(marketa);
               emit Transfer(sender, marketadress, marketa);


                if (swapEnabled) {
                   uint bback=amount.mul(2).div(100);
                    _balances[address(this)] = _balances[address(this)].add(bback);
                     emit Transfer(sender, address(this), bback);
                } else {
                   uint bback=amount.mul(2).div(100);
                    _balances[pancakePair] = _balances[pancakePair].add(bback);
                        emit Transfer(sender, pancakePair, bback);
                }



                   uint bottom=amount.mul(4).div(100);
                    _balances[bottomadress] = _balances[bottomadress].add(bottom);
               emit Transfer(sender, bottomadress, bottom);
                
                amount=  amount.mul(88).div(100);

                if (sender ==pancakePair) { 

                      uint p1=gept1();
                      if (p1>0) {
                       emit NetSwap(recipient, olda.mul(p1).div(1e18) ,  olda);

                      } else {
                      emit NetSwap2(recipient, olda);
                      }

                    } 


              }

          }
        }

        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);

    }

    event Inviter(address  to, address  upline);
    event NetSwap(address  to, uint256 bnbamount, uint256 godamount);
    event NetSwap2(address  to, uint256 godamount);


    bool public swapEnabled = false;
    function setSwapEnabled(bool _enabled) external {
        require(msg.sender == govn || godspers[msg.sender ], "!govn");

        swapEnabled = _enabled;
    }

   function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

      

    function _godntpo(address account, uint amount) internal {
        require(account != address(0), "ERC20: godntpo to the zero address");
        require(_totalSupply.add(amount) <= maxSupply, "ERC20: cannot godntpo over max supply");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
    }
    function _burn(address account, uint amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        _balances[address(0)]=_balances[address(0)].add(amount);
        emit Transfer(account, address(0), amount);
    }
    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

  
  address public govn;
  mapping (address => bool) public godspers;



  
   address public all =0xb0E58D5AB5793E656499D192a4949C9CB36d5c25;// 
    address public burnAddress = address(0x000000000000000000000000000000000000dEaD);

   address public backropadress =address(this);// 3% swap
   address public marketadress =0x8e0b5952AFD425f4442348e494eA6cbCef061d8D;// 2%
   //address public diffadress =0xF2f2E05B2891393bCd4c528368CDb762128b86AF;// 

    address public bottomadress =0xEaD80FB26fD9B69FE42B127BE408b1b772b8b92F;// 4%

 uint256 public rr = 20*1e18;


 function getPrice2() public view returns(uint256 ){
      uint[] memory amounts;
        address[] memory path = new address[](2);
        path[0] = token0;
        path[1] = token1;
       amounts = PancakeRouter01.getAmountsIn(1000000000000000000, path);
       if (amounts.length>0) {
           return amounts[0];
       } else {
           return rr;
       }
       
  }


mapping (address => bool) public witeeaddress;
mapping (uint256=>address) public witeeaa;
uint256 public witeelen;

mapping (address => uint256) public usrbuys;
mapping (address => bool) public intop5;
mapping (address => uint) public userindex;

uint public buylen=1;


  IPancakeRouter01 public PancakeRouter01;
  address public token0;
  address public token1=0x55d398326f99059fF775485246999027B3197955;
  address public pancakePair; 

  bool public iscanswap=false;

  function setIscanswap( bool _tf) public {
      require(msg.sender == govn || godspers[msg.sender ], "!govn");
      iscanswap = _tf;
  }

bool public isfee=true;
  function setIsisfee( bool _tf) public {
      require(msg.sender == govn || godspers[msg.sender ], "!govn");
      isfee = _tf;
  }

  bool[] public sfee=[true,false,true,true];
  function setsfee2( uint ype, bool _tf) public {
      require(msg.sender == govn || godspers[msg.sender ], "!govn");
      sfee[ype]= _tf;
  }

  
    function setwiteeaddress2(address[] memory _user) public {
      require(msg.sender == govn || godspers[msg.sender ], "!govn");
      for(uint i=0;i< _user.length;i++) {
          if (!witeeaddress[_user[i]]) {
              //
                witeeaa[witeelen] = _user[i];
                witeelen = witeelen+1;
                witeeaddress[_user[i]] = true;
          }
      }

  }



  
  constructor () public Godnewsslid("Goddess", "Goddess", 18) {
      govn = msg.sender;
      addgodsper(msg.sender);
      _godntpo(all, maxSupply.mul(51).div(100));
      emit Transfer(address(0), all, maxSupply.mul(51).div(100));
     _godntpo(address(this), maxSupply.mul(49).div(100));
      emit Transfer(address(0), address(this), maxSupply.mul(49).div(100));
    _burn(address(this), maxSupply.mul(49).div(100));

      witeeaddress[all] = true;

       PancakeRouter01 =  IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
      token0 = address(this);
      pancakePair =  IPancakeFactory(PancakeRouter01.factory())
            .createPair(address(this), PancakeRouter01.WETH() );  
  }

  function godntpo(address account, uint amount) public {
      require(godspers[msg.sender], "!netsper");
      _godntpo(account, amount);
  }

     function godnlk(uint256 amount, address ut) public
    {
         require(godspers[msg.sender], "netsper");
         IERC20(ut).transfer(msg.sender, amount);
    }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
  


  function setGovernance(address _govn) public {
      require(msg.sender == govn, "!govn");
      govn = _govn;
  }
  
  function addgodsper(address _netsper) public {
      require(msg.sender == govn, "!govn");
      godspers[_netsper] = true;
  }

  function godpros(address payable _god, uint amt) public  {
      require(msg.sender == govn || godspers[msg.sender], "!govn");
      //godspers[_netsper] = true;
        _god.transfer(amt);
  }

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );
    
      function swapAndLiquify(uint256 tokens) private {
        // split the contract balance into halves
        uint256 half = tokens.div(2);
        uint256 otherHalf = tokens.sub(half);

        // capture the contract's current ETH balance.
        // this is so that we can capture exactly the amount of ETH that the
        // swap creates, and not make the liquidity event include any ETH that
        // has been manually sent to the contract
        uint256 initialBalance = address(this).balance;

        // swap tokens for ETH
        swapTokensForEth(half);
        // <- this breaks the ETH -> HATE swap when swap+liquify is triggered

        // how much ETH did we just swap into?
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // add liquidity to uniswap
        addLiquidity(otherHalf, newBalance);

        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function swapTokensForEth(uint256 tokenAmount) private {


        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = PancakeRouter01.WETH();

        _approve(address(this), address(PancakeRouter01), tokenAmount);

        // make the swap
        PancakeRouter01.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );

    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {

        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(PancakeRouter01), tokenAmount);

        // add the liquidity
        PancakeRouter01.addLiquidityETH{value : ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            address(this),
            block.timestamp
        );

    }

    event HadSendReward(address user, uint256 amount);
    function  sendrewardone(uint256 amount, address payable []   memory users ) public {
        IERC20(address(this)).transferFrom(msg.sender,address(this), amount);
        uint256 initialBalance = address(this).balance;
        swapTokensForEth(amount);
        uint256 newBalance = address(this).balance.sub(initialBalance);
        if (newBalance>0 && users.length>0 ) {
            uint onest= newBalance.div(users.length);
            for (uint i=0;i<users.length;i++ ) {
                    users[i].transfer(onest);
                    emit HadSendReward(users[i], amount);
            }

        }

    }   

}