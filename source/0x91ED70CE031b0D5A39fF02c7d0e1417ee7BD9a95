{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IVRF.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he\u0027s not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase\u0027s attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(\u003cother arguments\u003e, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         \u003cinitialization with other arguments goes here\u003e\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let\u0027s call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle\u0027s response\n * @dev to your request, it will call your contract\u0027s fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it\u0027s critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract\u0027s random behavior is free\n * @dev from malicious interference, it\u0027s best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract\u0027s user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you\u0027d like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash\u0027s have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you\u0027d like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you\u0027d like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you\u0027d like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}"},"lotto.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./IVRF.sol\";\n\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n}\n\ncontract JackpotDogeLotto is Ownable, VRFConsumerBaseV2 {\n\n    using Address for address;\n\n    // Lotto History\n    struct History {\n        address winner;\n        uint256 amountWon;\n        uint256 winningTicket;\n        uint256 timestamp;\n    }\n\n    // Lotto ID =\u003e Lotto History\n    mapping ( uint256 =\u003e History ) public lottoHistory;\n\n    // User Info\n    struct UserInfo {\n        uint256 amountWon;\n        uint256 amountSpent;\n        uint256 numberOfWinningTickets;\n    }\n\n    // User =\u003e UserInfo\n    mapping ( address =\u003e UserInfo ) public userInfo;\n\n    // User =\u003e Lotto ID =\u003e Number of tickets purchased\n    mapping ( address =\u003e mapping ( uint256 =\u003e uint256 )) public userTickets;\n\n    // Current Lotto ID\n    uint256 public currentLottoID;\n\n    // Tracked Values\n    uint256 public totalRewarded;\n    uint256 public totalBNB;\n\n    // Lotto Details\n    uint256 public costPerTicket = 4 * 10**16;\n    uint256 public lottoDuration = 5 days;\n\n    // When Last Lotto Began\n    uint256 public lastLottoStartTime;\n\n    // current ticket ID\n    uint256 public currentTicketID;\n    mapping ( uint256 =\u003e address ) public ticketToUser;\n\n    // Roll Over Percentage\n    uint256 public rollOverPercentage = 10;\n\n    // VRF Coordinator\n    VRFCoordinatorV2Interface COORDINATOR;\n\n    // Your subscription ID.\n    uint64 private s_subscriptionId;\n\n    // The gas lane to use, which specifies the maximum gas price to bump to.\n    bytes32 private keyHash;\n\n    // gas limit to call function\n    uint32 public gasToCallRandom = 500_000;\n\n    // dev fee\n    address private dev;\n\n    // Important Wallets\n    address public marketingWallet;\n    address public communityWallet;\n\n    // Fees\n    uint256 public marketingFee = 20;\n    uint256 public communityFee = 20;\n\n    // Events\n    event WinnerChosen(address winner, uint256 pot, uint256 winningTicket);\n\n    constructor(address dev_) VRFConsumerBaseV2(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE) {\n        // setup chainlink\n        keyHash = 0x114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04;\n        COORDINATOR = VRFCoordinatorV2Interface(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE);\n        s_subscriptionId = 589;\n        dev = dev_;\n    }\n\n    /**\n        Sets Gas Limits for VRF Callback\n     */\n    function setGasLimits(uint32 gasToCallRandom_) external onlyOwner {\n        gasToCallRandom = gasToCallRandom_;\n    }\n\n    /**\n        Sets The Key Hash\n     */\n    function setKeyHash(bytes32 newHash) external onlyOwner {\n        keyHash = newHash;\n    }\n\n    /**\n        Sets Subscription ID for VRF Callback\n     */\n    function setSubscriptionId(uint64 subscriptionId_) external onlyOwner {\n       s_subscriptionId = subscriptionId_;\n    }\n\n    function init() external onlyOwner {\n        require(\n            lastLottoStartTime == 0,\n            \u0027Already initialized\u0027\n        );\n        lastLottoStartTime = block.timestamp;\n    }\n\n    function resetLottoTime(uint256 decrement) external onlyOwner {\n        lastLottoStartTime = block.timestamp - decrement;\n    }\n\n    function setCostPerTicket(uint256 newCost) external onlyOwner {\n        costPerTicket = newCost;\n    }\n\n    function setLottoDuration(uint256 newDuration) external onlyOwner {\n        lottoDuration = newDuration;\n    }\n\n    function setRollOverPercent(uint256 rollOverPercentage_) external onlyOwner {\n        require(\n            rollOverPercentage_ \u003c= 80,\n            \u0027Roll Over Percentage Too Large\u0027\n        );\n        rollOverPercentage = rollOverPercentage_;\n    }\n\n    function setMarketingWallet(address newMarketingWallet) external onlyOwner {\n        marketingWallet = newMarketingWallet;\n    }\n\n    function setCommunityWallet(address newCommunityWallet) external onlyOwner {\n        communityWallet = newCommunityWallet;\n    }\n\n    function setFees(uint256 marketingFee_, uint256 communityFee_) external onlyOwner {\n        marketingFee = marketingFee_;\n        communityFee = communityFee_;\n        require(marketingFee + communityFee \u003c= 75, \u0027Fees Too High\u0027);\n    }\n\n    function setDev(address newDev) external {\n        require(msg.sender == dev, \u0027Only Dev\u0027);\n        dev = newDev;\n    }\n\n    function getTickets() external payable {\n\n        // gas savings\n        address user = msg.sender;\n\n        // ensure sender is not a contract\n        require(\n            user.isContract() == false,\n            \u0027Buyer Is Contract\u0027\n        );\n\n        // get cost\n        uint numTickets = msg.value / costPerTicket;\n        require(\n            numTickets \u003e 0,\n            \u0027Zero Tickets\u0027\n        );\n\n        // increment amount spent and total BNB raised\n        unchecked {\n            userInfo[user].amountSpent += msg.value;\n            totalBNB += msg.value;\n        }\n\n        // increment the number of tickets purchased for the user at the current lotto ID\n        unchecked {\n            userTickets[user][currentLottoID] += numTickets;\n        }\n        \n        // Assign Ticket IDs To User\n        for (uint i = 0; i \u003c numTickets;) {\n            ticketToUser[currentTicketID] = user;\n            unchecked { currentTicketID++; ++i; }\n        }\n    }\n\n    function newLotto() external {\n        require(\n            lastLottoStartTime \u003e 0,\n            \u0027Lotto Has Not Been Initialized\u0027\n        );\n        require(\n            timeUntilNewLotto() == 0,\n            \u0027Not Time For New Lotto\u0027\n        );\n\n        // start a new lotto, request random words\n        _newGame();        \n    }\n\n\n    /**\n        Registers A New Game\n        Changes The Day Timer\n        Distributes Pot\n     */\n    function _newGame() internal {\n\n        // reset day timer\n        lastLottoStartTime = block.timestamp;\n\n        // get random number and send rewards when callback is executed\n        // the callback is called \"fulfillRandomWords\"\n        // this will revert if VRF subscription is not set and funded.\n        COORDINATOR.requestRandomWords(\n            keyHash,\n            s_subscriptionId,\n            3, // number of block confirmations before returning random value\n            gasToCallRandom, // callback gas limit is dependent num of random values \u0026 gas used in callback\n            1 // the number of random results to return\n        );\n    }\n\n\n    /**\n        Chainlink\u0027s callback to provide us with randomness\n     */\n    function fulfillRandomWords(\n        uint256, /* requestId */\n        uint256[] memory randomWords\n    ) internal override {\n\n        // reset current lotto timer if no tickets have been purchased\n        if (currentTicketID == 0) {\n            lastLottoStartTime = block.timestamp;\n            return;\n        }\n\n        // select the winner based on the random number generated\n        uint256 winningTicket = randomWords[0] % currentTicketID;\n        address winner = ticketToUser[winningTicket];\n\n        // size of the pot\n        uint256 pot = currentPot();\n\n        // split the pot\n        (\n            uint forDev,\n            uint forCommunity,\n            uint forMarketing,\n            uint forWinner\n        ) = splitPot(pot);\n\n        // save history\n        lottoHistory[currentLottoID].winner = winner;\n        lottoHistory[currentLottoID].amountWon = forWinner;\n        lottoHistory[currentLottoID].winningTicket = winningTicket;\n        lottoHistory[currentLottoID].timestamp = block.timestamp;\n\n        // reset lotto time again\n        lastLottoStartTime = block.timestamp;\n        \n        // increment the current lotto ID\n        unchecked {\n            currentLottoID++;\n        }\n\n        // reset ticket IDs back to 0\n        delete currentTicketID;\n\n        if (dev != address(0) \u0026\u0026 forDev \u003e 0) {\n            (bool s,) = payable(dev).call{value: forDev}(\"\");\n            require(s);\n        }\n\n        if (communityWallet != address(0) \u0026\u0026 forCommunity \u003e 0) {\n            (bool s,) = payable(communityWallet).call{value: forCommunity}(\"\");\n            require(s);\n        }\n\n        if (marketingWallet != address(0) \u0026\u0026 forMarketing \u003e 0) {\n            (bool s,) = payable(marketingWallet).call{value: forMarketing}(\"\");\n            require(s);\n        }\n        \n        // give winner\n        if (winner != address(0) \u0026\u0026 forWinner \u003e 0) {\n\n            // increment total rewarded\n            unchecked {\n                totalRewarded += forWinner;\n                userInfo[winner].amountWon += forWinner;\n                userInfo[winner].numberOfWinningTickets++;\n            }\n\n            // Emit Winning Event\n            emit WinnerChosen(winner, pot, winningTicket);\n\n            (bool s,) = payable(winner).call{value: forWinner}(\"\");\n            require(s);\n        }\n    }\n\n    function amountToWin() external view returns (uint256 amount) {\n        (,,,amount) = splitPot(currentPot());\n    }\n\n    function currentPot() public view returns (uint256) {\n        return ( balanceOf() * ( 100 - rollOverPercentage ) ) / 100;\n    }\n\n    function splitPot(uint256 pot) public view returns (uint256 forDev, uint256 community, uint256 marketing, uint256 winner) {\n        forDev = pot / 10;\n        marketing = ( pot * marketingFee ) / 100;\n        if (communityWallet == address(0)) {\n            marketing += ( pot * communityFee ) / 100;\n        } else {\n            community = ( pot * communityFee ) / 100;\n        }\n        winner = pot - ( forDev + community + marketing );\n    }\n\n    function currentTicketCost() public view returns (uint256) {\n        return costPerTicket;\n    }\n\n    function timeUntilNewLotto() public view returns (uint256) {\n        uint endTime = lastLottoStartTime + lottoDuration;\n        return block.timestamp \u003e= endTime ? 0 : endTime - block.timestamp;\n    }\n\n    function getOdds(address user) public view returns (uint256, uint256) {\n        return (userTickets[user][currentLottoID], currentTicketID);\n    }\n\n    function balanceOf() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    receive() external payable{}\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.14;\n\n/**\n * @title Owner\n * @dev Set \u0026 change owner\n */\ncontract Ownable {\n\n    address private owner;\n    \n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    // modifier to check if caller is owner\n    modifier onlyOwner() {\n        // If the first argument of \u0027require\u0027 evaluates to \u0027false\u0027, execution terminates and all\n        // changes to the state and to Ether balances are reverted.\n        // This used to consume all gas in old EVM versions, but not anymore.\n        // It is often a good idea to use \u0027require\u0027 to check if functions are called correctly.\n        // As a second argument, you can also provide an explanation about what went wrong.\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    /**\n     * @dev Set contract deployer as owner\n     */\n    constructor() {\n        owner = msg.sender; // \u0027msg.sender\u0027 is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    /**\n     * @dev Change owner\n     * @param newOwner address of new owner\n     */\n    function changeOwner(address newOwner) public onlyOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n     * @dev Return owner address \n     * @return address of owner\n     */\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}"}}