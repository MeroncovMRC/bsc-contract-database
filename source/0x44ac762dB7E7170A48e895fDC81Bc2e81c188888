// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);

    function feeTo() external view returns (address);
}

abstract contract Ownable {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!o");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "n0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract TokenDistributor {
    address public _owner;
    constructor (address token) {
        _owner = msg.sender;
        IERC20(token).approve(msg.sender, ~uint256(0));
    }

    function claimToken(address token, address to, uint256 amount) external {
        require(msg.sender == _owner, "!o");
        IERC20(token).transfer(to, amount);
    }
}

interface ISwapPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
}

interface INFT {
    function totalSupply() external view returns (uint256);

    function ownerAndStatus(uint256 tokenId) external view returns (address own, uint256 balance, bool black);

    function balanceOf(address owner) external view returns (uint256 balance);
}

interface IDividendPool {
    function addTokenReward(uint256 rewardAmount) external;

    function addLPTokenReward(uint256 rewardAmount) external;

    function getUserTeamInfo(address account) external view returns (
        uint256 amount, uint256 teamAmount
    );
}

abstract contract AbsToken is IERC20, Ownable {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address public fundAddress;

    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _tTotal;

    mapping(address => bool) public _feeWhiteList;
    mapping(address => bool) public _nftWhiteList;

    ISwapRouter public immutable _swapRouter;
    mapping(address => bool) public _swapPairList;

    bool private inSwap;

    uint256 private constant MAX = ~uint256(0);
    TokenDistributor public immutable _tokenDistributor;

    uint256 private constant _buyDestroyFee = 30;
    uint256 private constant _buyLPDividendFee = 100;

    uint256 private constant _sellLargeNFTFee = 100;
    uint256 private constant _sellLittleNFTFee = 100;
    uint256 private constant _sellLPDividendFee = 80;

    uint256 private constant _removeLPFee = 30;

    uint256 public startAddLPBlock;
    uint256 public startTradeBlock;
    address public immutable _usdt;
    address public immutable _mainPair;

    address public _largeNFTAddress;
    address public _littleNFTAddress;
    uint256 public _largeNFTLPCondition;
    uint256 public _largeNFTTeamLPCondition;
    uint256 public _littleNFTLPCondition;
    uint256 public _littleNFTTeamLPCondition;

    address public _lpDividendPool;

    mapping(address => uint256) private _largeNftReward;
    mapping(address => uint256) private _littleNftReward;
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor (
        address RouterAddress, address UsdtAddress,
        address LargeNFTAddress, address LittleNFTAddress,
        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,
        address ReceiveAddress, address FundAddress
    ){
        _name = Name;
        _symbol = Symbol;
        _decimals = Decimals;
        _largeNFTAddress = LargeNFTAddress;
        _littleNFTAddress = LittleNFTAddress;

        ISwapRouter swapRouter = ISwapRouter(RouterAddress);
        _swapRouter = swapRouter;
        _allowances[address(this)][address(swapRouter)] = MAX;

        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        _usdt = UsdtAddress;
        IERC20(UsdtAddress).approve(address(swapRouter), MAX);
        address pair = swapFactory.createPair(address(this), UsdtAddress);
        _swapPairList[pair] = true;
        _mainPair = pair;

        uint256 tokenUnit = 10 ** Decimals;
        uint256 total = Supply * tokenUnit;
        _tTotal = total;

        _balances[ReceiveAddress] = total;
        emit Transfer(address(0), ReceiveAddress, total);
        fundAddress = FundAddress;

        _tokenDistributor = new  TokenDistributor(UsdtAddress);

        _feeWhiteList[ReceiveAddress] = true;
        _feeWhiteList[FundAddress] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[address(swapRouter)] = true;
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[address(0)] = true;
        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;

        uint256 usdtUnit = 10 ** IERC20(UsdtAddress).decimals();
        nftRewardCondition = 100 * usdtUnit;
        _largeNFTLPCondition = 12000 * usdtUnit;
        _largeNFTTeamLPCondition = 100000 * usdtUnit;
        _littleNFTLPCondition = 8000 * usdtUnit;
        _littleNFTTeamLPCondition = 50000 * usdtUnit;

        addHolder(ReceiveAddress);
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        uint256 balance = _balances[from];
        require(balance >= amount, "BNE");
        uint256 day = today();
        if (0 == _dayPrice[day]) {
            _dayPrice[day] = tokenPrice();
        }

        bool takeFee;
        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
            uint256 maxSellAmount;
            uint256 remainAmount = 10 ** (_decimals - 6);
            if (balance > remainAmount) {
                maxSellAmount = balance - remainAmount;
            }
            if (amount > maxSellAmount) {
                amount = maxSellAmount;
            }
        }

        bool isAddLP;
        bool isRemoveLP;
        if (to == _mainPair) {
            isAddLP = _isAddLiquidity(amount);
            if (0 == startAddLPBlock && _feeWhiteList[from]) {
                startAddLPBlock = block.number;
            }
        } else if (from == _mainPair) {
            isRemoveLP = _isRemoveLiquidity();
        }

        if (_swapPairList[from] || _swapPairList[to]) {
            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
                require(0 < startTradeBlock || (startAddLPBlock > 0 && isAddLP), "!T");
                takeFee = true;
                if (isAddLP) {
                    takeFee = false;
                }
            }
        }

        if (takeFee && block.number < startTradeBlock + 3) {
            _killTransfer(from, to, amount);
            return;
        }

        _tokenTransfer(from, to, amount, takeFee, isRemoveLP);

        if (takeFee) {
            uint256 rewardGas = _rewardGas;
            uint256 blockNum = block.number;
            processLargeNFTReward(rewardGas);
            if (processLargeNFTBlock != blockNum) {
                processLittleNFTReward(rewardGas);
            }
        }
    }

    address[] public holders;
    mapping(address => uint256) public holderIndex;

    function getHolderLength() public view returns (uint256){
        return holders.length;
    }

    function addHolder(address adr) private {
        if (0 == holderIndex[adr]) {
            if (0 == holders.length || holders[0] != adr) {
                holderIndex[adr] = holders.length;
                holders.push(adr);
            }
        }
    }

    function _isAddLiquidity(uint256 amount) internal view returns (bool isAddLP){
        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();
        uint256 amountOther;
        if (rOther > 0 && rThis > 0) {
            amountOther = amount * rOther / rThis;
        }
        //isAddLP
        isAddLP = balanceOther >= rOther + amountOther;
    }

    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){
        (rOther, rThis) = __getReserves();
        balanceOther = IERC20(_usdt).balanceOf(_mainPair);
    }

    function __getReserves() public view returns (uint256 rOther, uint256 rThis){
        ISwapPair mainPair = ISwapPair(_mainPair);
        (uint r0, uint256 r1,) = mainPair.getReserves();

        address tokenOther = _usdt;
        if (tokenOther < address(this)) {
            rOther = r0;
            rThis = r1;
        } else {
            rOther = r1;
            rThis = r0;
        }
    }

    function _isRemoveLiquidity() internal view returns (bool isRemoveLP){
        (uint256 rOther, , uint256 balanceOther) = _getReserves();
        //isRemoveLP
        isRemoveLP = balanceOther <= rOther;
    }

    function _killTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount = tAmount * 99 / 100;
        _takeTransfer(
            sender,
            address(0x000000000000000000000000000000000000dEaD),
            feeAmount
        );
        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        bool takeFee,
        bool isRemoveLP
    ) private {
        _balances[sender] -= tAmount;

        uint256 feeAmount;
        if (takeFee) {
            if (isRemoveLP) {
                uint256 destroyFeeAmount = tAmount * _removeLPFee / 10000;
                if (destroyFeeAmount > 0) {
                    feeAmount += destroyFeeAmount;
                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyFeeAmount);
                }
            } else if (_swapPairList[sender]) {//Buy
                uint256 destroyFeeAmount = tAmount * _buyDestroyFee / 10000;
                if (destroyFeeAmount > 0) {
                    feeAmount += destroyFeeAmount;
                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyFeeAmount);
                }
                uint256 lpDividendFeeAmount = tAmount * _buyLPDividendFee / 10000;
                if (lpDividendFeeAmount > 0) {
                    feeAmount += lpDividendFeeAmount;
                    address lpDividendPool = _lpDividendPool;
                    _takeTransfer(sender, lpDividendPool, lpDividendFeeAmount);
                    IDividendPool(lpDividendPool).addTokenReward(lpDividendFeeAmount);
                }
            } else if (_swapPairList[recipient]) {//Sell
                uint256 lpFeeAmount = tAmount * (_sellLPDividendFee + _sellLargeNFTFee + _sellLittleNFTFee) / 10000;
                if (lpFeeAmount > 0) {
                    feeAmount += lpFeeAmount;
                    _takeTransfer(sender, address(this), lpFeeAmount);
                    if (!inSwap) {
                        swapTokenForFund(lpFeeAmount);
                    }
                }
            }
        }

        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {
        if (tokenAmount == 0) {
            return;
        }
        uint256 largeNFTFee = _sellLargeNFTFee;
        uint256 littleNFTFee = _sellLittleNFTFee;
        uint256 lpFee = _sellLPDividendFee;

        uint256 totalFee = largeNFTFee + littleNFTFee + lpFee;
        totalFee += totalFee;
        uint256 lpAmount = tokenAmount * lpFee / totalFee;
        totalFee -= lpFee;

        address distributor = address(_tokenDistributor);
        address usdt = _usdt;
        IERC20 USDT = IERC20(usdt);
        uint256 usdtBalance = USDT.balanceOf(distributor);

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdt;
        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount - lpAmount,
            0,
            path,
            distributor,
            block.timestamp
        );

        usdtBalance = USDT.balanceOf(distributor) - usdtBalance;
        uint256 largeNFTFeeUsdt = usdtBalance * largeNFTFee * 2 / totalFee;
        USDT.transferFrom(distributor, address(this), usdtBalance - largeNFTFeeUsdt);

        uint256 lpUsdt = usdtBalance * lpFee / totalFee;
        if (lpUsdt > 0 && lpAmount > 0) {
            address lpDividendPool = _lpDividendPool;
            (, , uint liquidity) = _swapRouter.addLiquidity(
                usdt,
                address(this),
                lpUsdt,
                lpAmount,
                0,
                0,
                lpDividendPool,
                block.timestamp
            );
            IDividendPool(lpDividendPool).addLPTokenReward(liquidity);
        }
    }

    function _takeTransfer(
        address sender,
        address to,
        uint256 tAmount
    ) private {
        _balances[to] = _balances[to] + tAmount;
        emit Transfer(sender, to, tAmount);
        addHolder(to);
    }

    modifier onlyWhiteList() {
        address msgSender = msg.sender;
        require(_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == _owner), "nw");
        _;
    }

    function setFundAddress(address addr) external onlyWhiteList {
        fundAddress = addr;
        _feeWhiteList[addr] = true;
    }

    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {
        _feeWhiteList[addr] = enable;
    }

    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {
        for (uint i = 0; i < addr.length; i++) {
            _feeWhiteList[addr[i]] = enable;
        }
    }

    function setNFTWhiteList(address addr, bool enable) external onlyWhiteList {
        _nftWhiteList[addr] = enable;
    }

    function batchSetNFTWhiteList(address [] memory addr, bool enable) external onlyWhiteList {
        for (uint i = 0; i < addr.length; i++) {
            _nftWhiteList[addr[i]] = enable;
        }
    }

    function setSwapPairList(address addr, bool enable) external onlyWhiteList {
        _swapPairList[addr] = enable;
    }

    receive() external payable {}

    function claimBalance() external {
        payable(fundAddress).transfer(address(this).balance);
    }

    function claimToken(address token, uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            IERC20(token).transfer(fundAddress, amount);
        }
    }

    function claimContractToken(address contractAddr, address token, uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            TokenDistributor(contractAddr).claimToken(token, fundAddress, amount);
        }
    }

    uint256 public _rewardGas = 500000;

    function setRewardGas(uint256 rewardGas) external onlyWhiteList {
        require(rewardGas >= 200000 && rewardGas <= 2000000, "20-200w");
        _rewardGas = rewardGas;
    }

    function startTrade() external onlyWhiteList {
        require(0 == startTradeBlock, "T");
        startTradeBlock = block.number;
    }

    function setLargeNFTAddress(address adr) external onlyWhiteList {
        _largeNFTAddress = adr;
    }

    function setLittleNFTAddress(address adr) external onlyWhiteList {
        _littleNFTAddress = adr;
    }

    uint256 public nftRewardCondition;

    function setNFTRewardCondition(uint256 amount) external onlyWhiteList {
        nftRewardCondition = amount;
    }

    function setLargeNFTLPCondition(uint256 amount) external onlyWhiteList {
        _largeNFTLPCondition = amount;
    }

    function setLargeNFTTeamLPCondition(uint256 amount) external onlyWhiteList {
        _largeNFTTeamLPCondition = amount;
    }

    function setLittleNFTLPCondition(uint256 amount) external onlyWhiteList {
        _littleNFTLPCondition = amount;
    }

    function setLittleNFTTeamLPCondition(uint256 amount) external onlyWhiteList {
        _littleNFTTeamLPCondition = amount;
    }

    function getNFTRewardCondition(uint256 lpUCondition, uint256 teamLpUCondition) public view returns (
        uint256 lpCondition, uint256 teamLpCondition
    ){
        (uint256 totalLP, uint256 lpUAmount) = getLPInfo();
        lpCondition = lpUCondition * totalLP / lpUAmount;
        teamLpCondition = teamLpUCondition * totalLP / lpUAmount;
    }

    //LargeNFT
    uint256 public currentLargeNFTIndex;
    uint256 public processLargeNFTBlock;
    uint256 public processLargeNFTBlockDebt = 100;

    function processLargeNFTReward(uint256 gas) private {
        if (processLargeNFTBlock + processLargeNFTBlockDebt > block.number) {
            return;
        }
        INFT nft = INFT(_largeNFTAddress);
        uint totalNFT = nft.totalSupply();
        if (0 == totalNFT) {
            return;
        }
        address sender = address(_tokenDistributor);
        IERC20 USDT = IERC20(_usdt);
        if (USDT.balanceOf(address(sender)) < nftRewardCondition) {
            return;
        }

        uint256 amount = nftRewardCondition / totalNFT;

        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();

        address shareHolder;
        bool black;
        (uint256 lpCondition,uint256 teamLpCondition) = getNFTRewardCondition(_largeNFTLPCondition, _largeNFTTeamLPCondition);
        uint256 lpAmount;
        uint256 teamLpAmount;
        IDividendPool pool = IDividendPool(_lpDividendPool);
        while (gasUsed < gas && iterations < totalNFT) {
            if (currentLargeNFTIndex >= totalNFT) {
                currentLargeNFTIndex = 0;
            }
            (shareHolder, ,  black) = nft.ownerAndStatus(1 + currentLargeNFTIndex);
            if (!black) {
                (lpAmount, teamLpAmount) = pool.getUserTeamInfo(shareHolder);
                if (_nftWhiteList[shareHolder] || (lpAmount >= lpCondition && teamLpAmount >= teamLpCondition)) {
                    USDT.transferFrom(sender, shareHolder, amount);
                    _largeNftReward[shareHolder] += amount;
                }
            }

            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentLargeNFTIndex++;
            iterations++;
        }

        processLargeNFTBlock = block.number;
    }

    function setProcessLargeNFTBlockDebt(uint256 blockDebt) external onlyWhiteList {
        processLargeNFTBlockDebt = blockDebt;
    }

    //LittleNFT
    uint256 public currentLittleNFTIndex;
    uint256 public processLittleNFTBlock;
    uint256 public processLittleNFTBlockDebt = 0;

    function processLittleNFTReward(uint256 gas) private {
        if (processLittleNFTBlock + processLittleNFTBlockDebt > block.number) {
            return;
        }
        INFT nft = INFT(_littleNFTAddress);
        uint totalNFT = nft.totalSupply();
        if (0 == totalNFT) {
            return;
        }
        uint256 rewardCondition = nftRewardCondition;
        IERC20 USDT = IERC20(_usdt);
        if (USDT.balanceOf(address(this)) < rewardCondition) {
            return;
        }

        uint256 amount = rewardCondition / totalNFT;

        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();

        address shareHolder;
        bool black;
        (uint256 lpCondition,uint256 teamLpCondition) = getNFTRewardCondition(_littleNFTLPCondition, _littleNFTTeamLPCondition);
        uint256 lpAmount;
        uint256 teamLpAmount;
        IDividendPool pool = IDividendPool(_lpDividendPool);
        while (gasUsed < gas && iterations < totalNFT) {
            if (currentLittleNFTIndex >= totalNFT) {
                currentLittleNFTIndex = 0;
            }
            (shareHolder,,black) = nft.ownerAndStatus(1 + currentLittleNFTIndex);
            if (!black) {
                (lpAmount, teamLpAmount) = pool.getUserTeamInfo(shareHolder);
                if (_nftWhiteList[shareHolder] || (lpAmount >= lpCondition && teamLpAmount >= teamLpCondition)) {
                    USDT.transfer(shareHolder, amount);
                    _littleNftReward[shareHolder] += amount;
                }
            }

            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentLittleNFTIndex++;
            iterations++;
        }

        processLittleNFTBlock = block.number;
    }

    function setProcessLittleNFTBlockDebt(uint256 blockDebt) external onlyWhiteList {
        processLittleNFTBlockDebt = blockDebt;
    }

    function setLPDividendPool(address pool) external onlyWhiteList {
        _lpDividendPool = pool;
        _feeWhiteList[pool] = true;
    }

    function getUserNFTInfo(address account) public view returns (
        uint256 tokenBalance, uint256 largeNFTReward, uint256 littleNFTReward,
        uint256 LargeNFTBalance, uint256 littleNFTBalance
    ){
        tokenBalance = balanceOf(account);
        largeNFTReward = _largeNftReward[account];
        littleNFTReward = _littleNftReward[account];
        LargeNFTBalance = INFT(_largeNFTAddress).balanceOf(account);
        littleNFTBalance = INFT(_littleNFTAddress).balanceOf(account);
    }

    function getLPInfo() public view returns (
        uint256 totalLP, uint256 lpUAmount
    ){
        totalLP = IERC20(_mainPair).totalSupply();
        (lpUAmount,) = __getReserves();
        lpUAmount += lpUAmount;
    }

    function getTotalInfo() public view returns (
        uint256 totalLP, uint256 lpUAmount,
        uint256 total, uint256 validTotal,
        uint256 price, uint256 todayPrice, uint256 holderNum,
        uint256 largeNFTLPCondition, uint256 largeNFTTeamLPCondition,
        uint256 littleNFTLPCondition, uint256 littleNFTTeamLPCondition
    ){
        (totalLP, lpUAmount) = getLPInfo();
        total = totalSupply();
        validTotal = total - balanceOf(address(0)) - balanceOf(address(0x000000000000000000000000000000000000dEaD));
        price = tokenPrice();
        todayPrice = _dayPrice[today()];
        if (0 == todayPrice) {
            todayPrice = price;
        }
        holderNum = getHolderLength();
        largeNFTLPCondition = _largeNFTLPCondition;
        largeNFTTeamLPCondition = _largeNFTTeamLPCondition;
        littleNFTLPCondition = _littleNFTLPCondition;
        littleNFTTeamLPCondition = _littleNFTTeamLPCondition;
    }

    function today() public view returns (uint256){
        return block.timestamp / 86400;
    }

    function tokenPrice() public view returns (uint256){
        (uint256 usdtReverse,uint256 tokenReverse) = __getReserves();
        if (0 == tokenReverse) {
            return 0;
        }
        return 10 ** _decimals * usdtReverse / tokenReverse;
    }

    mapping(uint256 => uint256) public _dayPrice;
}

contract ZM is AbsToken {
    constructor() AbsToken(
    //SwapRouter
        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),
    //USDT
        address(0x55d398326f99059fF775485246999027B3197955),
    //ShareHolder NFT
        address(0xd6C9E6b0EEA83512597D542f70eDff170133bCdE),
    //Studio NFT
        address(0x9b7607bf7c9A2286E2b4c909790C94BB140a720c),
        "ZM",
        "ZM",
        18,
        7999,
    //Receive
        address(0x032cfc7BbbF222ECA6A97B6EF32b767497302B65),
    //Fund
        address(0x032cfc7BbbF222ECA6A97B6EF32b767497302B65)
    ){

    }
}