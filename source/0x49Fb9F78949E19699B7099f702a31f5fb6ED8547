pragma solidity ^0.8.1;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}
pragma solidity ^0.8.0;

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}
pragma solidity ^0.8.1;

library Address {
    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );
        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        require(isContract(target), "Address: call to non-contract");
        (bool success, bytes memory returndata) = target.call{value: value}(
            data
        );
        return verifyCallResult(success, returndata, errorMessage);
    }

    function functionStaticCall(address target, bytes memory data)
        internal
        view
        returns (bytes memory)
    {
        return
            functionStaticCall(
                target,
                data,
                "Address: low-level static call failed"
            );
    }

    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    function functionDelegateCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return
            functionDelegateCall(
                target,
                data,
                "Address: low-level delegate call failed"
            );
    }

    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
pragma solidity ^0.8.0;

library SafeMath {
    function tryAdd(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}
pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
pragma solidity ^0.8.0;

abstract contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
pragma solidity ^0.8.0;

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function transfer(address to, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, _allowances[owner][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        uint256 currentAllowance = _allowances[owner][spender];
        require(
            currentAllowance >= subtractedValue,
            "ERC20: decreased allowance below zero"
        );
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }
        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        _beforeTokenTransfer(from, to, amount);
        uint256 fromBalance = _balances[from];
        require(
            fromBalance >= amount,
            "ERC20: transfer amount exceeds balance"
        );
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;
        emit Transfer(from, to, amount);
        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");
        _beforeTokenTransfer(address(0), account, amount);
        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        _beforeTokenTransfer(account, address(0), amount);
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;
        emit Transfer(account, address(0), amount);
        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(
                currentAllowance >= amount,
                "ERC20: insufficient allowance"
            );
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}
pragma solidity >=0.5.0;

interface IPancakePair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}
pragma solidity >=0.5.0;

interface IPancakeFactory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;

    function INIT_CODE_PAIR_HASH() external view returns (bytes32);
}
pragma solidity >=0.6.2;

interface IPancakeRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}
pragma solidity >=0.6.2;

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}
pragma solidity ^0.8.0;

interface IRefer {
    function hasReferer(address account) external view returns (bool);

    function referer(address account) external view returns (address);

    function refereesCount(address account) external view returns (uint256);

    function referees(address account, uint256 index)
        external
        view
        returns (address);
}
pragma solidity ^0.8.0;

contract Refer is IRefer {
    mapping(address => address) private _referers;
    mapping(address => address[]) private _referees;
    event ReferSet(address _referer, address _referee);

    function hasReferer(address account) public view override returns (bool) {
        return _referers[account] != address(0);
    }

    function referer(address account) public view override returns (address) {
        return _referers[account];
    }

    function refereesCount(address account)
        public
        view
        override
        returns (uint256)
    {
        return _referees[account].length;
    }

    function referees(address account, uint256 index)
        public
        view
        override
        returns (address)
    {
        return _referees[account][index];
    }

    function _setReferer(address _referer, address _referee) internal {
        _beforeSetReferer(_referer, _referee);
        _referers[_referee] = _referer;
        _referees[_referer].push(_referee);
        emit ReferSet(_referer, _referee);
    }

    function _beforeSetReferer(address _referer, address _referee)
        internal
        view
        virtual
    {
        require(_referer != address(0), "Refer: Can not set to 0");
        require(_referer != _referee, "Refer: Can not set to self");
        require(
            referer(_referee) == address(0),
            "Refer: Already has a referer"
        );
        require(refereesCount(_referee) == 0, "Refer: Already has referees");
    }
}

contract FIX is ERC20, Ownable, Refer {
    using SafeMath for uint256;
    using Address for address;
    address payable public marketAddress =
        payable(0x98F8622b96122D80c0A7d0EF623E29bad659B32D);
    address payable public teamAddress =
        payable(0x7709710B2DB570207743F180314Cb5Fa59FF19f6);
    address payable public lpAddress =
        payable(0xF8595b424fDb3EE837308Bc69b73D75b7Ba7F28c);
    address public immutable deadAddress =
        0x000000000000000000000000000000000000dEaD;
    mapping(address => bool) public isFeeExempt;
    mapping(address => bool) public isWalletLimitExempt;
    mapping(address => bool) public isSwapLimitExempt;
    mapping(address => bool) public isMarketPair;
    struct FeeSet {
        uint256 liquidityFee;
        uint256 lpRewardFee;
        uint256 marketFee;
        uint256 teamFee;
        uint256 burnFee;
        uint256 inviterFee;
        uint256 inviterSuperFee;
    }
    FeeSet public buyFees =
        FeeSet({
            liquidityFee: 30,
            lpRewardFee: 30,
            marketFee: 0,
            teamFee: 10,
            burnFee: 0,
            inviterFee: 10,
            inviterSuperFee: 20
        });
    FeeSet public sellFees =
        FeeSet({
            liquidityFee: 30,
            lpRewardFee: 30,
            marketFee: 0,
            teamFee: 10,
            burnFee: 0,
            inviterFee: 10,
            inviterSuperFee: 20
        });
    FeeSet public transFees =
        FeeSet({
            liquidityFee: 0,
            lpRewardFee: 0,
            marketFee: 0,
            teamFee: 0,
            burnFee: 100,
            inviterFee: 0,
            inviterSuperFee: 0
        });
    uint256 public swapMaxAmount = 0;
    uint256 public walletMaxAmount = 0;
    uint256 public inviteMinAmount = 1 * 10**(decimals() - 2);
    uint256 private minimumTokensBeforeSwap = 1 * 10**15;
    IPancakeRouter02 public uniswapV2Router;
    address public uniswapPair;
    bool inSwapAndLiquify;
    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    receive() external payable {}

    constructor() ERC20("Fire Phoenix", "FIX") {
        IPancakeRouter02 _swapRouter = IPancakeRouter02(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );
        uniswapPair = IPancakeFactory(_swapRouter.factory()).createPair(
            address(this),
            _swapRouter.WETH()
        );
        uniswapV2Router = _swapRouter;
        isMarketPair[uniswapPair] = true;
        isFeeExempt[owner()] = true;
        isFeeExempt[address(this)] = true;
        _mint(
            0x000000000000000000000000000000000000dEaD,
            599_0000 * 10**decimals()
        );
        _mint(
            0x6296C03704C01E0714FCdFe49A2b06EC1771E6a2,
            300_0000 * 10**decimals()
        );
        _mint(
            0x785248797F3b3eEA3F362Ec5D1F86b7Aa854Ba19,
            80_0000 * 10**decimals()
        );
        _mint(marketAddress, 10_0000 * 10**decimals());
        _mint(
            0xff6006E7ee167d801cDFF7BC4deE70608D3e418E,
            10_0000 * 10**decimals()
        );
    }

    function setIsFeeExempt(address account, bool newValue) public onlyOwner {
        isFeeExempt[account] = newValue;
    }

    function setIsWalletLimitExempt(address account, bool newValue)
        public
        onlyOwner
    {
        isWalletLimitExempt[account] = newValue;
    }

    function setIsSwapLimitExempt(address account, bool newValue)
        public
        onlyOwner
    {
        isSwapLimitExempt[account] = newValue;
    }

    function setIsMarketPair(address pair, bool newValue) public onlyOwner {
        isMarketPair[pair] = newValue;
    }

    function setSwapMaxAmount(uint256 amount) public onlyOwner {
        swapMaxAmount = amount;
    }

    function setWalletMaxAmount(uint256 amount) public onlyOwner {
        walletMaxAmount = amount;
    }

    function setInviteMinAmount(uint256 amount) public onlyOwner {
        inviteMinAmount = amount;
    }

    function setSwapPair(address pair) public onlyOwner {
        isMarketPair[uniswapPair] = false;
        uniswapPair = pair;
        isMarketPair[pair] = true;
    }

    function setMinimumTokensBeforeSwap(uint256 amount) public onlyOwner {
        minimumTokensBeforeSwap = amount;
    }

    function updateFees(
        uint256 liquidityFee,
        uint256 lpRewardFee,
        uint256 marketFee,
        uint256 teamFee,
        uint256 burnFee,
        uint256 inviterFee,
        uint256 inviterSuperFee,
        uint256 feeType
    ) external onlyOwner {
        if (feeType == 0) {
            buyFees.liquidityFee = liquidityFee;
            buyFees.lpRewardFee = lpRewardFee;
            buyFees.marketFee = marketFee;
            buyFees.teamFee = teamFee;
            buyFees.burnFee = burnFee;
            buyFees.inviterFee = inviterFee;
            buyFees.inviterSuperFee = inviterSuperFee;
        } else if (feeType == 1) {
            sellFees.liquidityFee = liquidityFee;
            sellFees.lpRewardFee = lpRewardFee;
            sellFees.marketFee = marketFee;
            sellFees.teamFee = teamFee;
            sellFees.burnFee = burnFee;
            sellFees.inviterFee = inviterFee;
            sellFees.inviterSuperFee = inviterSuperFee;
        } else if (feeType == 2) {
            transFees.liquidityFee = liquidityFee;
            transFees.lpRewardFee = lpRewardFee;
            transFees.marketFee = marketFee;
            transFees.teamFee = teamFee;
            transFees.burnFee = burnFee;
            transFees.inviterFee = inviterFee;
            transFees.inviterSuperFee = inviterSuperFee;
        }
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        uint256 contractTokenBalance = balanceOf(address(this));
        bool overMinimumTokenBalance = contractTokenBalance >=
            minimumTokensBeforeSwap;
        if (overMinimumTokenBalance && !inSwapAndLiquify) {
            swapAndLiquify(contractTokenBalance);
        }
        if (inSwapAndLiquify) {
            super._transfer(sender, recipient, amount);
        } else if (
            isFeeExempt[sender] ||
            isFeeExempt[recipient] ||
            recipient == deadAddress
        ) {
            super._transfer(sender, recipient, amount);
        } else {
            if (isMarketPair[sender]) {
                if (swapMaxAmount > 0) {
                    require(
                        amount <= swapMaxAmount,
                        "Fail: Over Swap Max Amount"
                    );
                }
                uint256 amountFainel = takeFee(sender, recipient, amount, 0);
                if (amountFainel > 0)
                    super._transfer(sender, recipient, amountFainel);
            } else if (isMarketPair[recipient]) {
                if (swapMaxAmount > 0) {
                    require(
                        amount <= swapMaxAmount,
                        "Fail: Over Swap Max Amount"
                    );
                }
                uint256 amountFainel = takeFee(sender, recipient, amount, 1);
                if (amountFainel > 0)
                    super._transfer(sender, recipient, amountFainel);
            } else {
                uint256 amountFainel = takeFee(sender, recipient, amount, 2);
                if (amountFainel > 0)
                    super._transfer(sender, recipient, amountFainel);
                if (
                    (!hasReferer(recipient)) &&
                    (sender != recipient) &&
                    (sender != address(0)) &&
                    (recipient != address(0)) &&
                    (amount >= inviteMinAmount) &&
                    refereesCount(recipient) == 0
                ) {
                    _setReferer(sender, recipient);
                }
            }
        }
    }

    function swapAndLiquify(uint256 amount) private lockTheSwap {
        uint256 feeLiquidty = amount.div(2);
        if (feeLiquidty > 0) {
            swapTokensForEth(feeLiquidty);
            uint256 amountEth = address(this).balance;
            addLiquidity(feeLiquidty, amountEth);
        }
    }

    function takeFee(
        address sender,
        address recipient,
        uint256 amount,
        uint256 feeType
    ) private returns (uint256 amountFainel) {
        FeeSet memory feeSet = feeType == 0
            ? buyFees
            : (feeType == 1 ? sellFees : transFees);
        amountFainel = amount;
        {
            uint256 feeLiquidty = amount.mul(feeSet.liquidityFee).div(1000);
            if (feeLiquidty > 0) {
                super._transfer(sender, address(this), feeLiquidty);
                amountFainel = amountFainel.sub(feeLiquidty);
            }
        }
        {
            uint256 feeLP = amount.mul(feeSet.lpRewardFee).div(1000);
            if (feeLP > 0 && uniswapPair != address(0)) {
                super._transfer(sender, uniswapPair, feeLP);
                amountFainel = amountFainel.sub(feeLP);
            }
        }
        {
            uint256 feeMarket = amount.mul(feeSet.marketFee).div(1000);
            amountFainel = amountFainel.sub(feeMarket);
            if (feeMarket > 0) {
                super._transfer(sender, marketAddress, feeMarket);
                amountFainel = amountFainel.sub(feeMarket);
            }
        }
        {
            uint256 feeTeam = amount.mul(feeSet.teamFee).div(1000);
            if (feeTeam > 0) {
                super._transfer(sender, teamAddress, feeTeam);
                amountFainel = amountFainel.sub(feeTeam);
            }
        }
        {
            uint256 feeBurn = amount.mul(feeSet.burnFee).div(1000);
            if (feeBurn > 0) {
                super._transfer(sender, deadAddress, feeBurn);
                amountFainel = amountFainel.sub(feeBurn);
            }
        }
        {
            uint256[] memory feeInvites = new uint256[](2);
            feeInvites[0] = amount.mul(feeSet.inviterFee).div(1000);
            feeInvites[1] = amount.mul(feeSet.inviterSuperFee).div(1000);
            address _referer = !isMarketPair[sender] ? sender : recipient;
            for (uint256 i; i < feeInvites.length; i++) {
                if (feeInvites[i] > 0 && hasReferer(_referer)) {
                    _referer = referer(_referer);
                    super._transfer(sender, _referer, feeInvites[i]);
                    amountFainel = amountFainel.sub(feeInvites[i]);
                }
            }
        }
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
        emit SwapTokensForETH(tokenAmount, path);
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0,
            0,
            lpAddress,
            block.timestamp
        );
    }

    event SwapETHForTokens(uint256 amountIn, address[] path);
    event SwapTokensForETH(uint256 amountIn, address[] path);
}