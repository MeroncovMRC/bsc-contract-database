// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract MyToken {
    string public name = "MToken";
    string public symbol = "MTK";
    uint256 public totalSupply = 10000000000 * 10 ** 18;
    uint8 public decimals = 18;
    address public owner;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    address payable public taxAddress = payable(0x8784bcff8e9F04e329CCcFcD506Ce0612be50063);
    uint256 public taxPercentage = 8;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) external returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        uint256 taxedAmount = _applyTax(_value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += taxedAmount;
        emit Transfer(msg.sender, _to, taxedAmount);
        return true;
    }

    function approve(address _spender, uint256 _value) external returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        uint256 taxedAmount = _applyTax(_value);
        balanceOf[_from] -= _value;
        balanceOf[_to] += taxedAmount;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, taxedAmount);
        return true;
    }

    function _applyTax(uint256 _value) internal returns (uint256 taxedAmount) {
        taxedAmount = _value - (_value * taxPercentage / 100);
        uint256 taxAmount = _value - taxedAmount;
        balanceOf[taxAddress] += taxAmount;
        emit Transfer(msg.sender, taxAddress, taxAmount);
        return taxedAmount;
    }
}