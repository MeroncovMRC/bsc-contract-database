// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.19;

contract OpenCallCapital {
    address public admin;
    uint256 public totalInvestment;
    string[] public userIds;

    struct Investment {
        uint256 amount;
        uint256 duration;
        uint256 startedDate;
        uint256 expireDate;
        InvestmentStatus status;
    }
    struct FormattedInvestment {
        uint256 amount;
        uint256 duration;
        uint256 startedDate;
        uint256 expireDate;
        string status;
    }
    enum InvestmentStatus {
        Active,
        Pending,
        Expired
    }

    mapping(string => Investment) public investments;

    event InvestmentAdded(
        string userId,
        uint256 amount,
        uint256 duration,
        uint256 startedDate,
        uint256 expireDate
    );
    event InvestmentStatusUpdated(string userId, InvestmentStatus newStatus);

    error Unauthorized();
    error InvalidStatus(
        InvestmentStatus currentStatus,
        InvestmentStatus newStatus
    );

    constructor() {
        admin = msg.sender;
    }

    function addInvestment(
        string memory userId,
        uint256 amount,
        uint256 durationInDays
    ) public {
        require(msg.sender == admin, "Only the admin can call this function");
        require(bytes(userId).length > 0, "User ID must not be empty");
        require(amount > 0, "Amount must be greater than 0");
        require(durationInDays > 0, "Duration in days must be greater than 0");

        uint256 startedDate = block.timestamp;
        uint256 expireDate = startedDate + (durationInDays * 1 days);

        investments[userId] = Investment({
            amount: amount,
            duration: durationInDays,
            startedDate: startedDate,
            expireDate: expireDate,
            status: InvestmentStatus.Active
        });

        totalInvestment += amount;

        emit InvestmentAdded(
            userId,
            amount,
            durationInDays,
            startedDate,
            expireDate
        );
        userIds.push(userId);
    }

    function getInvestment(string memory userId)
        public
        view
        returns (FormattedInvestment memory)
    {
        require(bytes(userId).length > 0, "User ID must not be empty");
        Investment memory investment = investments[userId];

        string memory status;
        if (investment.status == InvestmentStatus.Active) {
            status = "Active";
        } else if (investment.status == InvestmentStatus.Pending) {
            status = "Pending";
        } else if (investment.status == InvestmentStatus.Expired) {
            status = "Expired";
        }

        FormattedInvestment memory formattedInvestment = FormattedInvestment({
            amount: investment.amount,
            duration: investment.duration,
            startedDate: investment.startedDate,
            expireDate: investment.expireDate,
            status: status
        });

        return formattedInvestment;
    }

    function checkAndUpdateAllInvestmentsStatus() public {
        for (uint256 i = 0; i < userIds.length; i++) {
            Investment storage userInvestment = investments[userIds[i]];

            if (userInvestment.expireDate < block.timestamp) {
                userInvestment.status = InvestmentStatus.Expired;
                emit InvestmentStatusUpdated(
                    userIds[i],
                    InvestmentStatus.Expired
                );
            }
        }
    }

    function checkAndUpdateInvestmentStatusByUserId(string memory userId)
        public
    {
        require(bytes(userId).length > 0, "User ID must not be empty");

        Investment storage userInvestment = investments[userId];

        if (userInvestment.expireDate < block.timestamp) {
            userInvestment.status = InvestmentStatus.Expired;
            emit InvestmentStatusUpdated(userId, InvestmentStatus.Expired);
        }
    }
}