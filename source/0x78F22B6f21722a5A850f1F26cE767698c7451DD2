pragma solidity ^0.8.0;


library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}



pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

pragma solidity ^0.8.0;



// File: @openzeppelin/contracts/ownership/Ownable.sol
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {

    using Address for address;

    address private _owner;

    mapping(address => bool) private isWhite;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    modifier isWhiteAddress() {
        if (tx.origin != msg.sender){

            require(isWhite[msg.sender], "not white");
        }
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function setWhite(address whiteAddress, bool isWhiteBool) public  onlyOwner {
        isWhite[whiteAddress] = isWhiteBool;
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



pragma solidity ^0.8.0;



library String { 
    function equals(string memory a, string memory b)
        internal pure returns(bool) {
        
        bytes memory ba = bytes(a);
        bytes memory bb = bytes(b);
        
        uint256 la = ba.length;
        uint256 lb = bb.length;
        for (uint256 i = 0; i != la && i != lb; ++i) {
            if (ba[i] != bb[i]) {
                return false;
            }
        }
        
        return la == lb;
    }
        
    function concat(string memory a, string memory b)
        internal pure returns(string memory) {
            
        bytes memory ba = bytes(a);
        bytes memory bb = bytes(b);
        bytes memory bc = new bytes(ba.length + bb.length);
        
        uint256 bal = ba.length;
        uint256 bbl = bb.length;
        uint256 k = 0;
        
        for (uint256 i = 0; i != bal; ++i) {
            bc[k++] = ba[i];
        }
        for (uint256 i = 0; i != bbl; ++i) {
            bc[k++] = bb[i];
        }
        
        return string(bc);
    }
}

abstract contract IERC721{
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual;

    function getLevel(
        uint256 tokenId
    ) public virtual view returns(uint256);
}
abstract contract UniswapV2Pair{
    function getReserves() external virtual view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
}

abstract contract IERC20{
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual;

    function totalSupply() public view virtual returns (uint256);

    function balanceOf(address account) public virtual view  returns (uint256);

    function allowance(address owner, address spender) public virtual view  returns (uint256);

    //function mint(address account, uint256 amount) public virtual;

    function transfer(address recipient, uint256 amount) public virtual returns (bool);
}


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract NewLease is Ownable {

    using SafeMath for uint256;
    using Address for address;
    using String for string;

    address public contractOwner = msg.sender; 
   
    address public lessorErc20Address; 
    
    address public tenantErc20Address;

    address public harvestErc20Address;

    address public lpAddress;

    address public qjAddress;

    address public GSDAddress;

    address public landAddress;

    uint256 public minQJAmount;

    uint256 public minLPAmount;

    mapping(uint256 => uint256) public leaseFeeAmountMapping;

    mapping(uint256 => uint256) public tenantFeeAmountMapping;

    mapping(uint256 => uint256) public leaseHarvestAmountMapping;

    mapping(uint256 => uint256) public tenantHarvestAmountMapping;

    mapping(uint256 => uint256) public endTimeMapping;

    mapping(address => bool) public isLeaseMapping;

    mapping(address => bool) public istenantMapping;

    
    event CreateLease(uint256 leaseId, uint256 nftTokenId, address lessor, uint256 leaseFeeAmount, uint256 tokenLevel);


    event CancelLease(uint256 leaseid,uint256 nftTokenId,uint256 tokenLevel);


    event TradeLease(uint256 tradeOrderId, uint256 leaseId, uint256 nftTokenId, uint256 fees,address lessor,address tenant, uint256 tokenLevel);


    event Recovery(uint256 tradeOrderId, uint256 nftTokenId, address lessor, address tenant, uint256 leaseHarvestAmount, uint256 tenantHarvestAmount, uint256 tokenLevel);


    struct leaseMsg {
        bool isUsed; 
        uint256 leaseId;
        uint256 nftTokenId;
        uint256 leaseFeeAmount;
        uint256 tenantFeeAmount;
        uint256 createTime; 
        address lessor; 
        uint256 tokenLevel; 
        uint256 leaseHarvestAmount;
        uint256 tenantHarvestAmount;
    }


    struct tradeLeasesMsg {
        bool isUsed;
        bool isRecycled;
        uint256 tradeOrderId;
        uint256 nftTokenId;
        uint256 leaseFeeAmount;
        uint256 tenantFeeAmount;
        address lessor;
        address tenant;
        uint256 tokenLevel;
        uint256 leaseTime;
        uint256 tradeTime; 
        uint256 endTime;
        uint256 leaseHarvestAmount; 
        uint256 tenantHarvestAmount;
    }



    struct allOrderMsg{
        leaseMsg[] orderMsgList;
        tradeLeasesMsg[] tradeOrdersMsgList;
        uint256[5] tokenLevels;

    }

    uint256[5] fixedArray = [0, 0, 0, 0, 0];

    leaseMsg[] public allLeaseMsgList;

    tradeLeasesMsg[] public allTradeLeasesMsgList;


    struct indexToIndex{
        mapping(uint256 => uint256) indexMapping;
    }

    mapping(address => allOrderMsg)  userAddressOrderMapping;

    mapping(address => indexToIndex) addressToIndexMapping;

    mapping(address => mapping(uint256 => uint256)) public addressToTradeOrderIndexMapping;

    mapping(uint256 => uint256) public orderIdToTradeOrderIdMapping;

    function getGSDAmountByUserAddress(address userAddress) public view returns(uint) {
    
        uint256 LPAddressGSDAmount = IERC20(GSDAddress).balanceOf(lpAddress);
    
        uint256 totalLPAmount = IERC20(lpAddress).totalSupply();
     
        uint256 thisUserLPAmount = IERC20(lpAddress).balanceOf(userAddress);

        return LPAddressGSDAmount.mul(thisUserLPAmount).div(totalLPAmount);
    }

    
    function getAllOrderCountByUserAddress(address userAddress) public view returns (uint256[5] memory){
        
        if(userAddressOrderMapping[userAddress].orderMsgList.length > 0 || userAddressOrderMapping[userAddress].tradeOrdersMsgList.length > 0) {
            return userAddressOrderMapping[userAddress].tokenLevels;
        }
        return fixedArray;
    }


    function recovery(uint256 tradeOrderId) external isWhiteAddress{
        tradeLeasesMsg storage tradeLeases = allTradeLeasesMsgList[orderIdToTradeOrderIdMapping[tradeOrderId]];
        require(tradeLeases.tradeOrderId == tradeOrderId,"Not available!");
        require(tradeLeases.lessor == msg.sender || tradeLeases.tenant == msg.sender, "Not available!");
 
        require(tradeLeases.isUsed && !tradeLeases.isRecycled, "Not available!");

        require(block.timestamp >= tradeLeases.endTime,"Unexpired");
        tradeLeases.isUsed = false;
        tradeLeases.isRecycled = true;
        
        tradeLeasesMsg storage lessorTradeLeases = userAddressOrderMapping[tradeLeases.lessor]
                                                    .tradeOrdersMsgList[addressToTradeOrderIndexMapping[tradeLeases.lessor][tradeOrderId]];
        lessorTradeLeases.isUsed = false;
        lessorTradeLeases.isRecycled = true;

        if(tradeLeases.lessor != tradeLeases.tenant){
            tradeLeasesMsg storage tenantTradeLeases = userAddressOrderMapping[tradeLeases.tenant]
                                                    .tradeOrdersMsgList[addressToTradeOrderIndexMapping[tradeLeases.tenant][tradeOrderId]];
            tenantTradeLeases.isUsed = false;
            tenantTradeLeases.isRecycled = true;
        }
        
        IERC721(landAddress).transferFrom(address(this), tradeLeases.lessor, tradeLeases.nftTokenId);
        IERC20(harvestErc20Address).transfer(tradeLeases.lessor, tradeLeases.leaseHarvestAmount);
        IERC20(harvestErc20Address).transfer(tradeLeases.tenant, tradeLeases.tenantHarvestAmount);

        uint256[5] storage thisTokenLevels = userAddressOrderMapping[tradeLeases.lessor].tokenLevels;
        if (thisTokenLevels[tradeLeases.tokenLevel.sub(1)] > 0){
            thisTokenLevels[tradeLeases.tokenLevel.sub(1)] = thisTokenLevels[tradeLeases.tokenLevel.sub(1)].sub(1);
        }
        istenantMapping[tradeLeases.tenant] = false;
        isLeaseMapping[tradeLeases.lessor] = false;
        emit Recovery(
            tradeOrderId, 
            tradeLeases.nftTokenId, 
            tradeLeases.lessor, 
            tradeLeases.tenant, 
            tradeLeases.leaseHarvestAmount, 
            tradeLeases.tenantHarvestAmount, 
            tradeLeases.tokenLevel
        );
    }


    function takeOrder(
        uint256 leaseId 
    ) external isWhiteAddress returns (uint256 tradeOrderId) {
        require(!istenantMapping[msg.sender],"Repeated take");

        require(IERC20(qjAddress).balanceOf(msg.sender) >= minQJAmount && 
            getGSDAmountByUserAddress(msg.sender) >= minLPAmount,
            "QJ and LP Insufficient balance");

        leaseMsg memory order = allLeaseMsgList[leaseId];

        require(order.leaseId == leaseId, "Not Exists Order!");
        require(order.isUsed, "Not Exists Order!");
        require(order.lessor != msg.sender, "User error");
        uint256 tenantFeeAmount = order.tenantFeeAmount;
        require(
            tenantFeeAmount <= IERC20(tenantErc20Address).balanceOf(msg.sender) && 
            tenantFeeAmount <= IERC20(tenantErc20Address).allowance(msg.sender,address(this)), 
            "Insufficient amount");

        IERC20(tenantErc20Address).transferFrom(msg.sender, address(0xdead), tenantFeeAmount);
        IERC20(lessorErc20Address).transfer(address(0xdead), order.leaseFeeAmount);
        
        tradeLeasesMsg memory thisTradeLeasesMsg;
        thisTradeLeasesMsg.isUsed = true;
        thisTradeLeasesMsg.isRecycled = false;
        thisTradeLeasesMsg.tradeOrderId = order.leaseId;
        thisTradeLeasesMsg.nftTokenId = order.nftTokenId;
        thisTradeLeasesMsg.leaseFeeAmount = order.leaseFeeAmount;
        thisTradeLeasesMsg.tenantFeeAmount = tenantFeeAmount;
        thisTradeLeasesMsg.lessor = order.lessor;
        thisTradeLeasesMsg.tenant = msg.sender;
        thisTradeLeasesMsg.tokenLevel = order.tokenLevel;
        thisTradeLeasesMsg.leaseTime = order.createTime;
        thisTradeLeasesMsg.tradeTime = block.timestamp;
        thisTradeLeasesMsg.endTime = block.timestamp.add(endTimeMapping[order.tokenLevel].mul(24 * 60 * 60));

        thisTradeLeasesMsg.leaseHarvestAmount = order.leaseHarvestAmount;
        thisTradeLeasesMsg.tenantHarvestAmount = order.tenantHarvestAmount;
        tradeOrderId = thisTradeLeasesMsg.tradeOrderId;
        emit TradeLease(
            tradeOrderId,
            order.leaseId,
            order.nftTokenId,
            tenantFeeAmount,
            order.lessor,
            msg.sender,
            order.tokenLevel
        );

   
        allTradeLeasesMsgList.push(thisTradeLeasesMsg);
        orderIdToTradeOrderIdMapping[order.leaseId] = allTradeLeasesMsgList.length.sub(1);

        userAddressOrderMapping[order.lessor].tradeOrdersMsgList.push(thisTradeLeasesMsg);
        addressToTradeOrderIndexMapping[order.lessor][order.leaseId] = userAddressOrderMapping[order.lessor].tradeOrdersMsgList.length.sub(1);
        if(msg.sender != order.lessor){
            userAddressOrderMapping[msg.sender].tradeOrdersMsgList.push(thisTradeLeasesMsg);
            addressToTradeOrderIndexMapping[msg.sender][order.leaseId] = userAddressOrderMapping[msg.sender].tradeOrdersMsgList.length.sub(1);
        }
        istenantMapping[msg.sender] = true;
        deleteThisLeaseOrder(order.leaseId);
    }



    function cancelOrder(uint256 orderId) isWhiteAddress external {
        leaseMsg memory order = allLeaseMsgList[orderId];
        require(order.leaseId == orderId, "invalid order");
        require(order.lessor == msg.sender, "invalid order");
        require(order.isUsed, "invalid order");
        IERC721(landAddress).transferFrom(
            address(this),
            msg.sender,
            order.nftTokenId
        );
        IERC20(lessorErc20Address).transfer(msg.sender, order.leaseFeeAmount);
        uint256[5] storage thisTokenLevels = userAddressOrderMapping[order.lessor].tokenLevels;
        thisTokenLevels[order.tokenLevel.sub(1)] = thisTokenLevels[order.tokenLevel.sub(1)].sub(1);
        deleteThisLeaseOrder(orderId);
        isLeaseMapping[msg.sender] = false;
        emit CancelLease(orderId, order.nftTokenId, order.tokenLevel);
    }
    uint256 private constant MININGTIME = 1681704000;

    function getIsCreate() public view returns(bool) {
        uint256 nowTime = block.timestamp; 
        uint256 dayTimeS = 24 * 60 * 60;

        uint256 totalMiningDay = (nowTime.sub(MININGTIME)).div(dayTimeS); 
        uint256 startTime = MININGTIME.add(dayTimeS.mul(totalMiningDay));
        uint256 end = 2 * 60 * 60;

        uint256 endTime = startTime.add(end);
        return nowTime >= startTime && nowTime <= endTime;
    }



    function createOrder(
        uint256 nftTokenId
    ) external isWhiteAddress {
        require(getIsCreate(),"Time not yet arrived");
        require(!isLeaseMapping[msg.sender],"Repeated create");

        require(IERC20(qjAddress).balanceOf(msg.sender) >= minQJAmount && 
            getGSDAmountByUserAddress(msg.sender) >= minLPAmount,
            "QJ and LP Insufficient balance");

        uint256 nftLevel = IERC721(landAddress).getLevel(nftTokenId);

        uint256 leaseFeeAmount = leaseFeeAmountMapping[nftLevel];

        require(leaseFeeAmount <= IERC20(lessorErc20Address).balanceOf(msg.sender) && leaseFeeAmount <= IERC20(lessorErc20Address).allowance(msg.sender,address(this)), "Insufficient amount");


        IERC721(landAddress).transferFrom(msg.sender, address(this), nftTokenId);

        IERC20(lessorErc20Address).transferFrom(msg.sender, address(this), leaseFeeAmount);

        if (userAddressOrderMapping[msg.sender].orderMsgList.length == 0 && userAddressOrderMapping[msg.sender].tradeOrdersMsgList.length == 0){
            userAddressOrderMapping[msg.sender].tokenLevels = [0,0,0,0,0];
        }

        uint256 orderId = allLeaseMsgList.length;
        leaseMsg memory thisLeaseMsg;
        thisLeaseMsg.isUsed = true;
        thisLeaseMsg.leaseId = orderId;
        thisLeaseMsg.nftTokenId = nftTokenId;
        thisLeaseMsg.leaseFeeAmount = leaseFeeAmount;
        thisLeaseMsg.tenantFeeAmount = tenantFeeAmountMapping[nftLevel];
        thisLeaseMsg.createTime = block.timestamp;
        thisLeaseMsg.lessor = msg.sender;
        thisLeaseMsg.tokenLevel = nftLevel;
        thisLeaseMsg.leaseHarvestAmount = leaseHarvestAmountMapping[nftLevel];
        thisLeaseMsg.tenantHarvestAmount = tenantHarvestAmountMapping[nftLevel];


        allLeaseMsgList.push(thisLeaseMsg);


        userAddressOrderMapping[msg.sender].orderMsgList.push(thisLeaseMsg);

        userAddressOrderMapping[msg.sender].tokenLevels[nftLevel.sub(1)] = userAddressOrderMapping[msg.sender].tokenLevels[nftLevel.sub(1)].add(1);

        addressToIndexMapping[msg.sender].indexMapping[orderId] = userAddressOrderMapping[msg.sender].orderMsgList.length.sub(1);

        userAddressOrderMapping[address(this)].orderMsgList.push(thisLeaseMsg);
  
        addressToIndexMapping[address(this)].indexMapping[orderId] = userAddressOrderMapping[address(this)].orderMsgList.length.sub(1);

        isLeaseMapping[msg.sender] = true;
        emit CreateLease(orderId, nftTokenId, msg.sender, leaseFeeAmount, nftLevel);
    }


    function getAllTradeOrderByUserAddress(address userAddress) public view returns (tradeLeasesMsg[] memory){
        return userAddressOrderMapping[userAddress].tradeOrdersMsgList;
    }


    function deleteThisLeaseOrder(uint256 deleteOrderId) internal {
        require(deleteOrderId < allLeaseMsgList.length,"orderId error");
        leaseMsg storage thisorderMsg = allLeaseMsgList[deleteOrderId];
        thisorderMsg.isUsed = false;

        address userAddress = thisorderMsg.lessor;

        leaseMsg[] storage thisUserOrderMsgList = userAddressOrderMapping[userAddress].orderMsgList;
        

        mapping(uint256 => uint256) storage thisUserIndexMapping = addressToIndexMapping[userAddress].indexMapping;
 
        thisUserIndexMapping[thisUserOrderMsgList[thisUserOrderMsgList.length.sub(1)].leaseId] = thisUserIndexMapping[deleteOrderId];
        thisUserOrderMsgList[thisUserIndexMapping[deleteOrderId]] = thisUserOrderMsgList[thisUserOrderMsgList.length.sub(1)];
        
        thisUserOrderMsgList.pop();
        

        leaseMsg[] storage this721OrderMsgList = userAddressOrderMapping[address(this)].orderMsgList;

        mapping(uint256 => uint256) storage this721IndexMapping = addressToIndexMapping[address(this)].indexMapping;


        this721IndexMapping[this721OrderMsgList[this721OrderMsgList.length.sub(1)].leaseId] = this721IndexMapping[deleteOrderId];
        this721OrderMsgList[this721IndexMapping[deleteOrderId]] = this721OrderMsgList[this721OrderMsgList.length.sub(1)];
        this721OrderMsgList.pop();
    }


    function getAllLeaseByUserAddress(address userAddress) public view returns (leaseMsg[] memory){
        return userAddressOrderMapping[userAddress].orderMsgList;
    }
    



    function getAllLeaseMsg() public view returns (leaseMsg[] memory){
        return userAddressOrderMapping[address(this)].orderMsgList;
    }


    function setEndTimeMapping(uint256[] memory _endTimes) public onlyOwner isWhiteAddress{
        for (uint256 i = 0; i < _endTimes.length; i++) {
            endTimeMapping[i + 1] = _endTimes[i];
        }
    }


    function setTenantHarvestAmount(uint256[] memory _tenantHarvestAmount) public onlyOwner isWhiteAddress{
        for (uint256 i = 0; i < _tenantHarvestAmount.length; i++) {
            tenantHarvestAmountMapping[i + 1] = _tenantHarvestAmount[i].mul(10 ** 14);
        }
    }


    function setleaseHarvestAmount(uint256[] memory _leaseHarvestAmount) public onlyOwner isWhiteAddress{
        for (uint256 i = 0; i < _leaseHarvestAmount.length; i++) {
            leaseHarvestAmountMapping[i + 1] = _leaseHarvestAmount[i].mul(10 ** 14);
        }
    }


    function setLeaseFeeAmount(uint256[] memory _leaseFeeAmount) public onlyOwner isWhiteAddress{
        for (uint256 i = 0; i < _leaseFeeAmount.length; i++) {
            leaseFeeAmountMapping[i + 1] = _leaseFeeAmount[i].mul(10 ** 14);
        }
    }


    function setTenantFeeAmount(uint256[] memory _tenantFeeAmount) public onlyOwner isWhiteAddress{
        for (uint256 i = 0; i < _tenantFeeAmount.length; i++) {
            tenantFeeAmountMapping[i + 1] = _tenantFeeAmount[i].mul(10 ** 14);
        }
    }


    function setLessorErc20Address(address _lessorErc20Address) public onlyOwner isWhiteAddress{
        lessorErc20Address = _lessorErc20Address;
    }


    function setTenantErc20Address(address _tenantErc20Address) public onlyOwner isWhiteAddress{
        tenantErc20Address = _tenantErc20Address;
    }


    function setHarvestErc20Address(address _harvestErc20Address) public onlyOwner isWhiteAddress{
        harvestErc20Address = _harvestErc20Address;
    }


    function setLandAddress(address _landAddress) public onlyOwner isWhiteAddress{
        landAddress = _landAddress;
    }

    function setLPAddress(address _lpAddress) public onlyOwner isWhiteAddress{
        lpAddress = _lpAddress;
    }

    function setQJAddress(address _qjAddress) public onlyOwner isWhiteAddress{
        qjAddress = _qjAddress;
    }

    function setGSDAddress(address _GSDAddress) public onlyOwner isWhiteAddress{
        GSDAddress = _GSDAddress;
    }

    function setQJAndLPAmount(uint256 _qjAmount, uint256 _lpAmount) public onlyOwner isWhiteAddress{
        minQJAmount = _qjAmount;
        minLPAmount = _lpAmount;
    }

    constructor(
        address _lessorErc20Address, 
        address _tenantErc20Address,
        address _harvestErc20Address, 
        address _landAddress, 
        address _lpAddress,
        address _qjAddress,
        uint256[] memory _leaseFeeAmount, 
        uint256[] memory _tenantFeeAmount, 
        uint256[] memory _leaseHarvestAmount, 
        uint256[] memory _tenantHarvestAmount, 
        uint256[] memory _endTimeMapping 
    ){
        lessorErc20Address = _lessorErc20Address;
        tenantErc20Address = _tenantErc20Address;
        harvestErc20Address = _harvestErc20Address;
        lpAddress = _lpAddress;
        qjAddress = _qjAddress;
        landAddress = _landAddress;
        require(
            _leaseFeeAmount.length == _tenantFeeAmount.length && 
            _leaseFeeAmount.length == _leaseHarvestAmount.length && 
            _leaseFeeAmount.length == _tenantHarvestAmount.length &&
            _leaseFeeAmount.length == _endTimeMapping.length
        );


        for (uint256 i = 0; i < _leaseFeeAmount.length; i++) {
            leaseFeeAmountMapping[i + 1] = _leaseFeeAmount[i].mul(10 ** 14);
            tenantFeeAmountMapping[i + 1] = _tenantFeeAmount[i].mul(10 ** 14);
            leaseHarvestAmountMapping[i + 1] = _leaseHarvestAmount[i].mul(10 ** 14);
            tenantHarvestAmountMapping[i + 1] = _tenantHarvestAmount[i].mul(10 ** 14);
            endTimeMapping[i + 1] = _endTimeMapping[i];
        }
    }

}