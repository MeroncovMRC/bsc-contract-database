// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;

contract ChilaquillyInuToken {
    string public name = "Chilaquilly Inu Token";
    string public symbol = "CHILA";
    uint256 public totalSupply = 500000000000000000000000000; // 500,000,000,000,000 tokens with 18 decimals
    uint8 public decimals = 18;
    address public owner;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed from, uint256 value);
    event Reward(address indexed to, uint256 value);

    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address");
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");

        uint256 burnAmount = (_value * 3) / 100;
        uint256 rewardAmount = (_value * 2) / 100;

        balanceOf[msg.sender] -= (_value - burnAmount);
        balanceOf[_to] += (_value - burnAmount - rewardAmount);
        balanceOf[owner] += burnAmount;

        emit Transfer(msg.sender, _to, _value);
        emit Burn(msg.sender, burnAmount);
        emit Reward(_to, rewardAmount);

        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address");
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Insufficient allowance");

        uint256 burnAmount = (_value * 3) / 100;
        uint256 rewardAmount = (_value * 2) / 100;

        balanceOf[_from] -= (_value - burnAmount);
        balanceOf[_to] += (_value - burnAmount - rewardAmount);
        balanceOf[owner] += burnAmount;

        allowance[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, _value);
        emit Burn(_from, burnAmount);
        emit Reward(_to, rewardAmount);

        return true;
    }
}