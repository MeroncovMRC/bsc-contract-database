{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"CTMT.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./ERC20Burnable.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Pausable.sol\";\r\nimport \"./ITreasuryAddresses.sol\";\r\nimport \"./IERC721.sol\";\r\n\r\n// 2022.10.12 10:50 PM\r\ncontract CWJC is ERC20, ERC20Burnable, Ownable, Pausable {\r\n    \r\n    constructor() ERC20(\"Crypto Wave Jade Corals\", \"CWJC\") {\r\n        setpMBARate(600000000000000000000); \r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\r\n        internal\r\n        whenNotPaused\r\n        override\r\n    {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n\r\n        // CTMT Codes starts here:\r\n    address CTMTConAdd = address(this);\r\n    address tmCTMTConAdd = 0xEE84A4eCB83efB9Ac30fD17c7B9A0C2127e1A11b;\r\n    address cpCTMTConAdd = 0x940A275E4D62e24c8F72e6Ecd8B01a8594E34b87;\r\n    address liCTMTConAdd = 0xbFa9Bb6FC2BB3897a7039A71c177c017F620e385;\r\n    address giCTMTConAdd = 0x074571bb14507315Baf62430F3930B9AaD1C5d30;\r\n    address grCTMTConAdd = 0x5F9DC9086DBE8051617bC97863eB6710d8F8Eb24;\r\n    address sCTMTConAdd = 0x1AeC2EC95AAe87D00C51A33d0Cd9dF1CbA20cdEE;\r\n    address stakingConAdd;\r\n    address odMnstConAdd;\r\n    address treasuryConAdd = 0xdeA16c78B98a9BfE9F13a84DAb0D53166f565331;    \r\n\r\n    address pegTokenConAdd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address monstaTokenConAdd = 0x8A5d7FCD4c90421d21d30fCC4435948aC3618B2f;\r\n    address DCNFTConAdd;\r\n\r\n    IERC20 pegToken = IERC20(pegTokenConAdd);\r\n    IERC20 monsta = IERC20(monstaTokenConAdd);\r\n\r\n    IERC721 DCNFT;\r\n        \r\n    ITA iTA = ITA(treasuryConAdd);    \r\n\r\n    uint coolDownTime = 7 days;\r\n    uint public tokenEntryCount;\r\n\r\n    uint public pMBA;\r\n    uint public totalPMBA;\r\n    uint public totalPmbaForSale;\r\n    uint public allocationSold;\r\n\r\n    mapping (address =\u003e uint) public pMBABal;\r\n    mapping (address =\u003e uint) public pMBAForSale;\r\n\r\n    mapping (address =\u003e uint) public proceedsRequestTime;\r\n    mapping (address =\u003e uint256) public addressRegTokenId; \r\n    mapping (uint256 =\u003e uint16) public TokenLevel;\r\n\r\n    mapping (uint256 =\u003e address) public ownerOfDCNFT;    \r\n    mapping (address =\u003e uint) public readyPMBTimeOwner;\r\n    mapping (uint256 =\u003e uint) public readyPMBTimeTokenId;\r\n    \r\n\r\n    mapping (uint =\u003e uint) public tokenEntryIdToTokenId;\r\n    mapping (uint =\u003e uint) public tokenEntryIdToLevel;\r\n\r\n    function setStakingConAdd(address Address) public onlyTreasurer {\r\n        stakingConAdd = Address;\r\n    }    \r\n\r\n    function setOdMnstConAdd(address Address) public onlyTreasurer {\r\n        odMnstConAdd = Address;\r\n    } \r\n\r\n    function setDCNFTConAdd(address Address) public onlyTreasurer {\r\n        DCNFTConAdd = Address;\r\n        DCNFT = IERC721(Address);\r\n    } \r\n\r\n    modifier onlyTreasurer() {\r\n        require(_msgSender() == iTA.gTA(), \"Caller is not the treasurer\");\r\n        _;\r\n    }\r\n        // for correction of records (correct level)\r\n    function setCTokenLevel(uint256 tokenId, uint16 level) public onlyTreasurer {\r\n        TokenLevel[tokenId] = level;\r\n    }\r\n\r\n        // to render additional days for correction of level\r\n    function addDaysPenalty(address tokenOwner, uint timeAdjustment) public onlyTreasurer {\r\n        readyPMBTimeOwner[tokenOwner] = timeAdjustment;        \r\n    }\r\n\r\n    function setpMBARate(uint allowance) public onlyTreasurer {\r\n        require(allowance \u003e= 0);\r\n        require(allowance \u003c= 100000000000000000000000);\r\n        pMBA = allowance;        \r\n    }\r\n\r\n    function regPMinting(uint256 regTokenId, uint16 level) public virtual {\r\n        require(_msgSender() == DCNFT.ownerOf(regTokenId), \"You are not the owner of the DC NFT\");\r\n\r\n        addressRegTokenId[_msgSender()] = regTokenId;\r\n        \r\n        if(TokenLevel[regTokenId] == 0) {\r\n            TokenLevel[regTokenId] = level;\r\n            tokenEntryIdToTokenId[tokenEntryCount] = regTokenId;\r\n            tokenEntryIdToLevel[tokenEntryCount] = level;\r\n            tokenEntryCount += 1;\r\n            }\r\n        }\r\n\r\n    function requestPMintingAllowance() public virtual {\r\n        require(_msgSender() == DCNFT.ownerOf(addressRegTokenId[_msgSender()]));\r\n        require(readyPMBTimeOwner[_msgSender()] \u003c= block.timestamp, \"Address is in cooldown.\");\r\n        uint tokenId = addressRegTokenId[_msgSender()];\r\n        require(readyPMBTimeTokenId[tokenId] \u003c= block.timestamp, \"DC NFT is in cooldown.\");\r\n\r\n        uint minMBal; // divisor is 1,000,000, therefor 1,000 = 0.1% // minimum monsta balance\r\n        uint pMBAll; // privileged minting/burning allowance\r\n            if (TokenLevel[tokenId] == 5) {\r\n                minMBal = monsta.totalSupply() * 1000 / 1000000;\r\n                pMBAll = pMBA * 8;\r\n                } else if (TokenLevel[tokenId] == 4) {\r\n                    minMBal = monsta.totalSupply() * 750 / 1000000;\r\n                    pMBAll = pMBA * 6;\r\n                } else if (TokenLevel[tokenId] == 3) {\r\n                    minMBal = monsta.totalSupply() * 500 / 1000000;\r\n                    pMBAll = pMBA * 4;\r\n                } else if (TokenLevel[tokenId] == 2) {\r\n                    minMBal = monsta.totalSupply() * 250 / 1000000;\r\n                    pMBAll = pMBA * 2;\r\n                } else if(TokenLevel[tokenId] == 1) {\r\n                    minMBal = monsta.totalSupply() * 125 / 1000000;\r\n                    pMBAll = pMBA;\r\n                } else {minMBal = monsta.totalSupply() * 1000000 / 1000000;\r\n                        pMBAll = 0;\r\n                }  \r\n        require(monsta.balanceOf(_msgSender()) \u003e= minMBal); \r\n\r\n            // Owner of DC NFTs can able to gain more allocation as long as they have active DC NFTs.\r\n        pMBABal[_msgSender()] += pMBAll;\r\n        totalPMBA += pMBAll;\r\n        pegToken.transferFrom(_msgSender(), treasuryConAdd, pMBAll * 1 / 1000);\r\n        readyPMBTimeOwner[_msgSender()] = block.timestamp + coolDownTime;\r\n        readyPMBTimeTokenId[tokenId] = block.timestamp + coolDownTime;\r\n    }\r\n\r\n    function placePMBAForSale(uint amount) public {\r\n        require(pMBABal[_msgSender()] \u003e= amount, \"Amount exceeds allocation\");\r\n        pMBAForSale[_msgSender()] += amount;\r\n        pMBABal[_msgSender()] -= amount;\r\n        totalPmbaForSale += amount;\r\n        proceedsRequestTime[_msgSender()] = block.timestamp + coolDownTime;\r\n    }\r\n\r\n    function pullPMBAForSale(uint amount) public {\r\n        require(pMBAForSale[_msgSender()] \u003e= amount, \"Amount exceeds allocation for sale\");\r\n        pMBAForSale[_msgSender()] -= amount;\r\n        totalPmbaForSale -= amount;\r\n        pMBABal[_msgSender()] += amount;\r\n    }\r\n\r\n    function buyPMBA(uint amount) public {\r\n        require(totalPmbaForSale \u003e= amount, \"Insufficient allocation for sale\");\r\n        require((totalPmbaForSale - pMBAForSale[_msgSender()]) \u003e= amount, \"Buying own allocation is not allowed\");\r\n        pMBABal[_msgSender()] += amount;\r\n        allocationSold += amount;\r\n        totalPmbaForSale -= amount;\r\n        uint ctmtAmount = amount * 1 / 100;\r\n        pegToken.transferFrom(_msgSender(), CTMTConAdd, ctmtAmount);\r\n        _mint(CTMTConAdd, ctmtAmount);\r\n        \r\n    }\r\n\r\n    function getProceedsFrPMBASales(uint amount) public {\r\n        require(allocationSold \u003e= amount, \"Amount exceeds allocation sold\");\r\n        require(block.timestamp \u003e= proceedsRequestTime[_msgSender()]);\r\n        pMBAForSale[_msgSender()] -= amount;\r\n        _mint(_msgSender(), amount * 1 / 100);\r\n        _burn(CTMTConAdd, amount * 1 / 100);\r\n        allocationSold -= amount;\r\n    }\r\n\r\n    function BuyFromMint(uint amount) public virtual {\r\n\r\n        require(pegToken.balanceOf(_msgSender()) \u003e= amount, \"Insufficient BUSD\");\r\n\r\n        if (pMBABal[_msgSender()] \u003e= amount) {\r\n            pegToken.transferFrom(_msgSender(), CTMTConAdd, amount * 99 / 100);\r\n            pegToken.transferFrom(_msgSender(), treasuryConAdd, amount * 1 / 100);\r\n            _mint(_msgSender(), amount * 99 / 100);\r\n            pMBABal[_msgSender()] -= amount;\r\n            totalPMBA -= amount;\r\n        } else {\r\n            uint allocDef = amount - pMBABal[_msgSender()];\r\n            uint gFees = allocDef * 1 / 100;\r\n            uint mintable = (amount * 99 / 100) - (gFees * 2);\r\n            pegToken.transferFrom(_msgSender(), CTMTConAdd, amount * 99 / 100);\r\n            pegToken.transferFrom(_msgSender(), treasuryConAdd, amount * 1 / 100);\r\n            _mint(_msgSender(), mintable);\r\n            _mint(grCTMTConAdd, gFees);\r\n            _mint(giCTMTConAdd, gFees);\r\n            totalPMBA -= pMBABal[_msgSender()];\r\n            pMBABal[_msgSender()] = 0;\r\n            }\r\n    }\r\n\r\n    function SelltoBurn(uint amount) public virtual {\r\n\r\n        require(balanceOf(_msgSender()) \u003e= amount, \"Insufficient CTMT\");\r\n        \r\n        if (pMBABal[_msgSender()] \u003e= amount) {\r\n            pegToken.transfer(_msgSender(), amount * 99 / 100);\r\n            pegToken.transfer(treasuryConAdd, amount * 1 / 100);\r\n            _burn(_msgSender(), amount);\r\n            pMBABal[_msgSender()] -= amount;\r\n            totalPMBA -= amount;\r\n        } else {\r\n            uint allocDef = amount - pMBABal[_msgSender()];\r\n            uint gFees = allocDef * 1 / 100;\r\n            uint returnable = (amount * 99 / 100) - (gFees * 2);\r\n            pegToken.transfer(_msgSender(), returnable);\r\n            pegToken.transfer(treasuryConAdd, amount * 1 / 100);\r\n            _mint(grCTMTConAdd, gFees);\r\n            _mint(giCTMTConAdd, gFees);            \r\n            _burn(_msgSender(), amount);\r\n            totalPMBA -= pMBABal[_msgSender()];\r\n            pMBABal[_msgSender()] = 0;\r\n            }\r\n    }\r\n\r\n    function surplusMint(address managerAdd, uint amount) public virtual returns (bool) {\r\n        require(_msgSender() == tmCTMTConAdd);\r\n        _surplusMint(managerAdd, amount);\r\n        return true;\r\n    }\r\n\r\n    function _surplusMint(address managerAdd, uint amount) internal virtual {\r\n        _mint(cpCTMTConAdd, amount * 50 / 100); // 50% for returns\r\n        _mint(managerAdd, amount * 10 / 100);\r\n        _mint(liCTMTConAdd, amount * 5 / 100);\r\n        _mint(giCTMTConAdd, amount * 5 / 100);\r\n        _mint(stakingConAdd, amount * 3 / 100);\r\n        _mint(grCTMTConAdd, amount * 4 / 100);\r\n        _mint(sCTMTConAdd, amount * 4 / 100);\r\n        _mint(odMnstConAdd, amount * 3 / 100);\r\n    }\r\n\r\n    function tmMint(address mAdd, uint mAmount) public virtual returns (bool) {\r\n        require(_msgSender() == tmCTMTConAdd);\r\n            _mint(mAdd, mAmount);\r\n        return true;\r\n    }\r\n\r\n    function tmBurn(address bAdd, uint bAmount) public virtual returns (bool) {\r\n        require(_msgSender() == tmCTMTConAdd);\r\n            _burn(bAdd, bAmount);\r\n        return true;\r\n    }\r\n\r\n    function tmPegTransfer(address Add, uint tAmount) public virtual returns (bool) {\r\n        require(_msgSender() == tmCTMTConAdd);\r\n            pegToken.transfer(Add, tAmount);\r\n        return true;\r\n    }\r\n\r\n    function providePegToken(uint amount) public virtual returns (bool) {\r\n        require(_msgSender() == cpCTMTConAdd); \r\n        pegToken.transfer(tmCTMTConAdd, amount);\r\n        _burn(cpCTMTConAdd, amount);\r\n        return true;        \r\n    }\r\n\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"},"ERC20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n}"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n}"},"ITreasuryAddresses.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface ITA {\r\n\r\n    function gPTCA() external view returns (address);     \r\n\r\n    function gMTCA() external view returns (address); \r\n\r\n    function gDCCA() external view returns (address);\r\n\r\n    function gCTMTCA() external view returns (address);\r\n\r\n    function gcpCTMTCA() external view returns (address);\r\n\r\n    function gtmCTMTCA() external view returns (address);\r\n\r\n    function gliCTMTCA() external view returns (address);\r\n\r\n    function ggiCTMTCA() external view returns (address);\r\n\r\n    function ggrCTMTCA() external view returns (address);\r\n\r\n    function gsCTMTCA() external view returns (address);\r\n\r\n    function gcMnstaCA() external view returns (address);\r\n\r\n    function getodMnstCA() external view returns (address);\r\n\r\n    function gdxCTMTCA() external view returns (address);\r\n\r\n    function gTCA() external view returns (address);\r\n\r\n    function gTA() external view returns (address);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}"}}