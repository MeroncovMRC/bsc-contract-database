pragma solidity ^0.8.17;

// SPDX-License-Identifier: MIT
interface IBEP20 {
    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract Seek_Presale {
    address payable public admin;
    IBEP20 public token;

    uint256 public privateSalePrice = 13_844;
    uint256 public publicSalePrice = 6_922;

    uint256 public privateSaleStartTime;
    uint256 public preSaleStartTime;
    uint256 public preSaleEndTime;

    uint256 public listingPrice = 5_537;

    uint256 public liquidityPercent = 50;
    uint256 public soldTokens;
    uint256 public privateSaleSoldTokens;
    uint256 public publicSaleSoldTokens;
    uint256 public privateSaleTokens = 50_000_000 ether;
    uint256 public publicSaleTokens = 100_000_000 ether;
    uint256 public maxPerUser = 5_000_000 ether;


    uint256 public basicRefPercent = 5;
    uint256 public eliteRefPercent = 10;
    uint256 public refamountReqired = 1_000_000 ether;

    uint256 public totalUser;

    uint256 public amountRaised;

    mapping(address => uint256) public tokenBalance;
    mapping(address => uint256) public bnbBalance;
    mapping(address => uint256) public refferd;
    mapping(address => uint256) public refferEarning;
    mapping(address => bool) public alreadyrefrer;

    address[] public users;

    modifier onlyAdmin() {
        require(
            msg.sender == admin,
            "Seek_Presale: you are  not admin of this platform"
        );
        _;
    }

    event tokenBought(
        address indexed user,
        uint256 indexed numberOfTokens,
        uint256 indexed amountBusd
    );

    event tokenClaimed(address indexed user, uint256 indexed numberOfTokens);

    event bnbClaimed(address indexed user, uint256 indexed balance);

    constructor() {
        admin = payable(0x754ddA1A30F4e2d8aDDcDf7A254298e365224273);
        token = IBEP20(0xd76Bd08CB413030216ACf3190C20AE3a6888195B);
        privateSaleStartTime = 1678838400;
        preSaleStartTime = privateSaleStartTime + 30 days;
        preSaleEndTime = preSaleStartTime + 30 days;
    }

    receive() external payable {}

    // to buy token during preSale time => for web3 use
    function buy(address ref) public payable {
        require(ref != msg.sender, "Seek_Presale: You can't refer yourself");
        require(
            ref != address(0) && ref != address(0xdead),
            "Seek_Presale: You can't refer this address"
        );
        require(
            block.timestamp < preSaleEndTime,
            "Seek_Presale: PreSale time is over"
        );
        require(
            block.timestamp > privateSaleStartTime,
            "Seek_Presale: PreSale time is not started yet"
        );
        if (block.timestamp < preSaleStartTime) {
            require(
                privateSaleSoldTokens < privateSaleTokens,
                "Seek_Presale: Private Sale is over"
            );
        } else {
            require(
                publicSaleSoldTokens < publicSaleTokens,
                "Seek_Presale: Public Sale is over"
            );
        }

        uint256 numberOfTokens = bnbToToken(msg.value);

        require(
            tokenBalance[msg.sender] + numberOfTokens  <= maxPerUser,
            "Seek_Presale: amount is more than max amount"
        );
        

        if (tokenBalance[msg.sender] == 0) {
            totalUser++;
        }
        if (!alreadyrefrer[ref]) {
            users.push(ref);
            alreadyrefrer[ref] = true;
        }
        tokenBalance[msg.sender] = tokenBalance[msg.sender] + (numberOfTokens);
        bnbBalance[msg.sender] = bnbBalance[msg.sender] + (msg.value);
        refferd[ref] += numberOfTokens;
        uint256 refamount;
        if (refferd[ref] >= refamountReqired) {
            refferEarning[ref] += (numberOfTokens * eliteRefPercent) / 100;
            refamount = (numberOfTokens * eliteRefPercent) / 100;
        } else {
            refferEarning[ref] += (numberOfTokens * basicRefPercent) / 100;
            refamount = (numberOfTokens * basicRefPercent) / 100;

        }
        soldTokens = soldTokens + (numberOfTokens);
        if (block.timestamp < preSaleStartTime) {
            privateSaleSoldTokens = privateSaleSoldTokens + (numberOfTokens);
        } else {
            publicSaleSoldTokens = publicSaleSoldTokens + (numberOfTokens);
        }

        token.transferFrom(admin,msg.sender,numberOfTokens);
        token.transferFrom(admin,ref,refamount);
        amountRaised = amountRaised + (msg.value);

        emit tokenBought(msg.sender, numberOfTokens, msg.value);
    }


    function withdrawAndInitializePool() public onlyAdmin {
        require(
            block.timestamp > preSaleEndTime,
            "Seek_Presale: PreSale time is not over yet you can not finalize the presale"
        );
        uint256 share1 = (getContractBnbBalance() * liquidityPercent) / 100;
        uint256 share2 = (getContractBnbBalance() * (100 - liquidityPercent)) / 100;
        payable(admin).transfer(share1);
        payable(0xD3D7cFF6A95A25f56FFA21760fb02C4cE1048AC8).transfer(share2);
    }

    function withdrawFunds(uint256 _value) external onlyAdmin {
        payable(admin).transfer(_value);
    }

    //withdaw Lost Token
    function withdrawToken(address losttoken) external onlyAdmin {
        IBEP20(losttoken).transfer(
            admin,
            IBEP20(losttoken).balanceOf(address(this))
        );
    }

    function getCurrentTime() external view returns (uint256) {
        return block.timestamp;
    }

    // to check number of token for buying
    function bnbToToken(uint256 _amount) public view returns (uint256) {
        uint256 price;

        if (
            block.timestamp > privateSaleStartTime &&
            block.timestamp < preSaleStartTime
        ) {
            price = privateSalePrice;
        } else if (block.timestamp > preSaleStartTime) {
            price = publicSalePrice;
        } else {
            price = privateSalePrice;
        }

        uint256 numberOfTokens = (_amount * (price) * (1000)) / (1 ether);
        return (numberOfTokens * (10 ** (token.decimals()))) / (1000);
    }

    function SetPrice(
        uint256 _privateSalePrice,
        uint256 _publicSalePrice
    ) public onlyAdmin {
        privateSalePrice = _privateSalePrice;
        publicSalePrice = _publicSalePrice;
    }

    function setMaxperUser(uint256 _maxPerUser) external onlyAdmin {
        maxPerUser = _maxPerUser;
    }

    function setliquiditypercent(uint256 _liquiditypercent) external onlyAdmin {
        require(_liquiditypercent >= 0 && _liquiditypercent < 100 , "Invalid liquidity percent ");
        liquidityPercent = _liquiditypercent;
    }

    function SetTime(
        uint256 _privateSaleStartTime,
        uint256 _preSaleStartTime,
        uint256 _preSaleEndTime
    ) public onlyAdmin {
        require(
            _privateSaleStartTime < _preSaleStartTime,
            "Seek_Presale: Private Sale start time should be less than PreSale start time"
        );
        require(
            _preSaleStartTime < _preSaleEndTime,
            "Seek_Presale: PreSale start time should be less than PreSale end time"
        );

        privateSaleStartTime = _privateSaleStartTime;
        preSaleStartTime = _preSaleStartTime;
        preSaleEndTime = _preSaleEndTime;
    }

    // to calculate number of tokens for listing price
    function listingTokens(uint256 _amount) public view returns (uint256) {
        uint256 numberOfTokens = (_amount * (listingPrice) * (1000)) /
            (1 ether);
        return (numberOfTokens * (10 ** (token.decimals()))) / (1000);
    }

    // to check contribution
    function userContribution(address _user) public view returns (uint256) {
        return bnbBalance[_user];
    }

    // to check token balance of user
    function userTokenBalance(address _user) public view returns (uint256) {
        return tokenBalance[_user];
    }

    function getContractBnbBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function getContractTokenBalance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }

    function tokenRequiredForLiquidity() public view returns (uint256) {
        uint256 bnbAmountForLiquidity = (amountRaised * (liquidityPercent)) /
            (100);
        uint256 tokenAmountForLiquidity = listingTokens(bnbAmountForLiquidity);
        return tokenAmountForLiquidity;
    }
}