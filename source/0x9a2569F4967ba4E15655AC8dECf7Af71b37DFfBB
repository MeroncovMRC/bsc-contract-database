{"Address.sol":{"content":"\r\n\r\n// SPDX-License-Identifier: MIP\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\nlibrary Address {    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length \u003e 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length \u003e 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the BEP standard.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"presale.sol":{"content":"/**\r\n *Submitted for verification at BscScan.com on 2022-03-19\r\n*/\r\n\r\n// SPDX-License-Identifier: MIP\r\n\r\n/**\r\n *                                                                                @\r\n *                                                                               @@@\r\n *                          @@@@@@@                     @@@@@@@@                @ @ @\r\n *                   @@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@           @@@\r\n *                @@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@@@@@@         @\r\n *\r\n *    @@@@@@@@     @@@@@@@@@    @@@@@@@@@@    @@@@@@@       @@@      @@@@@  @@     @@@@@@@@@@\r\n *    @@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@      @@@       @@@   @@@    @@@@@@@@@@\r\n *    @@@     @@@  @@@     @@@  @@@     @@  @@@     @@@    @@@@@      @@@   @@@@   @@@     @@\r\n *    @@@     @@@  @@@     @@@  @@@         @@@            @@@@@      @@@   @@@@   @@@\r\n *    @@@@@@@@@@   @@@@@@@@@@   @@@    @@    @@@@@@@      @@@ @@@     @@@   @@@@   @@@    @@\r\n *    @@@@@@@@     @@@@@@@@     @@@@@@@@@     @@@@@@@     @@@ @@@     @@@   @@@@   @@@@@@@@@\r\n *    @@@          @@@   @@@    @@@    @@          @@@   @@@   @@@    @@@   @@@@   @@@    @@\r\n *    @@@  @@@@    @@@   @@@    @@@                 @@@  @@@   @@@    @@@   @@@@   @@@\r\n *    @@@   @@@    @@@    @@@   @@@     @@  @@@     @@@  @@@@@@@@@    @@@   @@     @@@     @@\r\n *    @@@    @@    @@@    @@@   @@@@@@@@@@   @@@@@@@@    @@@   @@@    @@@      @@  @@@@@@@@@@\r\n *   @@@@@     @  @@@@@   @@@@  @@@@@@@@@@    @@@@@@    @@@@@ @@@@@  @@@@@@@@@@@@  @@@@@@@@@@\r\n *\r\n *                @@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n *                   @@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@\r\n *                        @@@@@@@@@@                 @@@@@@@@@@@@\r\n *\r\n */\r\n\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\n\r\n/*===================================================\r\n    Crinet Presale Contract - Round 1_3\r\n=====================================================*/\r\n\r\ncontract PEPEpresale is ReentrancyGuard, Ownable {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    event TokenPurchase(address indexed beneficiary, uint256 amount);\r\n\r\n    // CNT and BUSD token\r\n    IERC20 private cnt;\r\n    IERC20 private busd;\r\n\r\n    // Round Information\r\n    struct RoundInfo {\r\n        uint256 cntPrice;\r\n        uint256 hardCap;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 busdAmount;\r\n        uint256 investors;\r\n        bool    active;\r\n    }\r\n    \r\n    mapping(uint8 =\u003e RoundInfo) public roundInfos;\r\n\r\n    uint8 public constant maxRoundLV = 1;\r\n    uint8 public currentRound;\r\n\r\n    // time to start claim.\r\n    uint256 public claimStartTime = 1684285481; // Thu Apr 14 2022 00:00:00 UTC\r\n\r\n    // user information\r\n    mapping (address =\u003e uint256) public claimableAmounts;\r\n\r\n    // Referral Information\r\n    mapping(address =\u003e uint16) public referralCount;\r\n\r\n    uint256[] public REFERRAL_PERCENTS = [200, 250, 300, 400];\r\n\r\n    // price and percent divisor\r\n    uint256 constant public divisor = 10000;\r\n\r\n    // wallet to withdraw\r\n    address public wallet;\r\n\r\n    /**\r\n     * @dev Initialize with token address and round information.\r\n     */\r\n    constructor (address _cnt, address _busd, address _wallet) Ownable() {\r\n        require(_cnt != address(0), \"presale-err: invalid address\");\r\n        require(_busd != address(0), \"presale-err: invalid address\");\r\n        require(_wallet != address(0), \"presale-err: invalid address\");\r\n\r\n        cnt = IERC20(_cnt);\r\n        busd = IERC20(_busd);\r\n        wallet = _wallet;\r\n  \r\n        roundInfos[1].cntPrice = 75;\r\n\r\n        roundInfos[1].hardCap = 500_000 * 10**18;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize ICO data. Only for test\r\n     */\r\n    function Initialize() external onlyOwner {\r\n        roundInfos[1].startTime = 0;\r\n        roundInfos[1].endTime = 0;\r\n        roundInfos[1].busdAmount = 0;\r\n        roundInfos[1].investors = 0;\r\n        roundInfos[1].active = false;\r\n\r\n        currentRound = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Set token price for a round.\r\n     */\r\n    function setPrice(uint256 _price) external onlyOwner {\r\n        roundInfos[1].cntPrice = _price;\r\n    }\r\n\r\n    /**\r\n     * @dev Set hardcap for a round.\r\n     */\r\n    function setHardCap(uint256 _hardCap) external onlyOwner {\r\n        require(_hardCap \u003e= roundInfos[1].busdAmount , \"presale-err: _hardCap should be greater than deposit amount\");\r\n\r\n        roundInfos[1].hardCap = _hardCap;\r\n        roundInfos[1].active = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Start ICO with end time and hard cap.\r\n     */\r\n    function startICO() external onlyOwner {\r\n        require(roundInfos[1].active == false, \"presale-err: Round is already running\");\r\n\r\n        currentRound = 1;\r\n        roundInfos[1].active = true;\r\n        roundInfos[1].startTime = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Stop current round.\r\n     */\r\n    function stopICO() external onlyOwner {\r\n        require(roundInfos[1].active == true, \"presale-err: no active ico-round\");\r\n\r\n        roundInfos[1].active = false;\r\n        roundInfos[1].endTime = block.timestamp;\r\n        roundInfos[1].hardCap = roundInfos[1].busdAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate token amount for busd amount.\r\n     */\r\n    function _getTokenAmount(uint256 _busdAmount) internal view returns (uint256) {\r\n        return _busdAmount / roundInfos[1].cntPrice * divisor / (10**9);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate referral bonus amount with refCount.\r\n     */\r\n    function _getReferralAmount(uint16 _refCount, uint256 _busdAmount) internal view returns (uint256) {\r\n        uint256 referralAmount = 0;\r\n        if (_refCount \u003c 4) {\r\n            referralAmount = _busdAmount * REFERRAL_PERCENTS[0] / divisor;\r\n        } else if (_refCount \u003c 10) {\r\n            referralAmount = _busdAmount * REFERRAL_PERCENTS[1] / divisor;\r\n        } else if (_refCount \u003c 26) {\r\n            referralAmount = _busdAmount * REFERRAL_PERCENTS[2] / divisor;\r\n        } else {\r\n            referralAmount = _busdAmount * REFERRAL_PERCENTS[3] / divisor;\r\n        }\r\n\r\n        return referralAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Buy tokens with busd and referral address.\r\n     */\r\n    function buyTokens(uint256 _amount, address _referrer) external nonReentrant {\r\n        _preValidatePurchase(msg.sender, _amount);\r\n\r\n        uint256 referralAmount;\r\n        if (_referrer != address(0)) {\r\n            referralCount[_referrer] += 1;\r\n            uint16 refCount = referralCount[_referrer];\r\n            \r\n            referralAmount = _getReferralAmount(refCount, _amount);\r\n\r\n            _amount -= referralAmount;\r\n        }\r\n\r\n        if (roundInfos[1].busdAmount + _amount \u003e roundInfos[1].hardCap) {\r\n            _amount = roundInfos[1].hardCap - roundInfos[1].busdAmount;\r\n            roundInfos[1].endTime = block.timestamp;\r\n            roundInfos[1].active = false;\r\n\r\n            if (referralAmount \u003e 0) {\r\n                uint16 refCount = referralCount[_referrer];\r\n                referralAmount = _getReferralAmount(refCount, _amount);\r\n                _amount -= referralAmount;\r\n            }\r\n        }\r\n\r\n        busd.safeTransferFrom(msg.sender, address(this), _amount + referralAmount);\r\n        \r\n        if (referralAmount \u003e 0) {\r\n            busd.safeTransfer(_referrer, referralAmount);\r\n        }\r\n\r\n        roundInfos[1].busdAmount += _amount;\r\n        roundInfos[1].investors += 1;\r\n\r\n        uint256 purchaseAmount = _getTokenAmount(_amount);\r\n        claimableAmounts[msg.sender] += purchaseAmount;\r\n\r\n        emit TokenPurchase(msg.sender, purchaseAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Check the possibility to buy token.\r\n     */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _amount) internal view {\r\n        require(_beneficiary != address(0), \"presale-err: beneficiary is the zero address\");\r\n        require(_amount != 0, \"presale-err: _amount is 0\");\r\n        require(roundInfos[1].active == true, \"presale-err: no active round\");\r\n        this; \r\n    }\r\n\r\n    /**\r\n     * @dev Claim tokens after ICO.\r\n     */\r\n    function claimTokens() external {\r\n        require(block.timestamp \u003e 1649894400, \"presale-err: can claim after Apr 14 2022 UTC\");\r\n        require(roundInfos[1].active == false, \"presale-err: ICO is not finished yet\");\r\n        require(claimableAmounts[msg.sender] \u003e 0, \"presale-err: no token to claim\");\r\n\r\n        claimableAmounts[msg.sender] = 0;\r\n        cnt.safeTransfer(msg.sender, claimableAmounts[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw busd or cnt token from this contract.\r\n     */\r\n    function withdrawTokens(address _token) external onlyOwner {\r\n        IERC20(_token).safeTransfer(wallet, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Set referral percent on referral level.\r\n     */\r\n    function setReferralPercent(uint8 _referralLV, uint256 _refPercent) external onlyOwner {\r\n        require(_referralLV \u003c 4, \"presale-err: referralLV should be less than 4\");\r\n        require(_refPercent \u003c 1000, \"presale-err: refPercent should be less than 10%\");\r\n        \r\n        REFERRAL_PERCENTS[_referralLV] = _refPercent;\r\n    }\r\n\r\n    /**\r\n     * @dev Set wallet to withdraw.\r\n     */\r\n    function setWalletReceiver(address _newWallet) external onlyOwner {\r\n        wallet = _newWallet;\r\n    }\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIP\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    bool private _notEntered;\r\n\r\n    constructor () {\r\n\r\n        _notEntered = true;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _notEntered = false;\r\n        _;\r\n        _notEntered = true;\r\n    }\r\n}"},"SafeERC20.sol":{"content":"\r\n// SPDX-License-Identifier: MIP\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./Address.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n       );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length \u003e 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"}}