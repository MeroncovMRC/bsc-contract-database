
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/Stake/R3TSTAKING.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract R3TSTAKING is Ownable, ReentrancyGuard, Pausable {
    struct StakeParams {
        bool active;
        uint8 plan;
        uint256 stakingOrder;
        uint256 start;
        uint256 amount;
        uint256 lastRewardTS;
        uint256 percentIndex;
    }

    struct RewardParams {
        uint256 rewardOrder;
        uint256 stakingOrder;
        uint256 amount;
    }

    address[] private stakers;
    IERC20 public token;

    uint256 public constant MONTH = 30 days;
    uint256 constant PLAN90 = 3 * MONTH;
    uint256 constant PLAN180 = 6 * MONTH;
    uint256 constant PLAN360 = 12 * MONTH;
    uint256 constant DENOMINATOR = 10000;

    uint256 private totalStakingBalance;
    uint256 private totalRewards;

    mapping(address => StakeParams[]) private stakingBalances;
    mapping(address => RewardParams[]) private rewards;
    mapping(uint8 => uint256[]) private percentForPlan;
    mapping(uint8 => uint256[]) private percentIndexTimestamp;

    constructor(
        address _token,
        uint256 _percentFor90,
        uint256 _percentFor180,
        uint256 _percentFor360
    ) {
        token = IERC20(_token);
        setpercentForPlan(1, _percentFor90);
        setpercentForPlan(2, _percentFor180);
        setpercentForPlan(3, _percentFor360);
    }

    function totalSupply() external view returns (uint256) {
        return token.balanceOf(address(this));
    }

    function getTotalStakingBalance() external view returns (uint256) {
        return totalStakingBalance;
    }

    function getTotalStakedTokens(
        address _account
    ) public view returns (uint256) {
        uint256 total;
        for (uint256 i = 0; i < stakingBalances[_account].length; i++) {
            if (stakingBalances[_account][i].active) {
                total += stakingBalances[_account][i].amount;
            }
        }
        return total;
    }

    function getStakes(
        address _account
    ) public view returns (StakeParams[] memory) {
        return stakingBalances[_account];
    }

    function getRewards(
        address _account
    ) public view returns (RewardParams[] memory) {
        return rewards[_account];
    }

    function getTotalRewards() external view returns (uint256) {
        return totalRewards;
    }

    function getTotalEarnedTokens(
        address _account
    ) public view returns (uint256) {
        uint256 total;
        for (uint256 i = 0; i < rewards[_account].length; i++) {
            total += rewards[_account][i].amount;
        }
        return total;
    }

    function getStakingPercent(uint8 _plan) public view returns (uint256) {
        require(
            _plan > 0 && _plan < 4,
            "R3TSTAKING: Please set one of the following plans: 1, 2, 3"
        );
        return percentForPlan[_plan][percentForPlan[_plan].length - 1];
    }

    function stake(
        uint256 _amount,
        uint8 _plan
    ) public nonReentrant whenNotPaused {
        require(
            _plan > 0 && _plan < 4,
            "R3TSTAKING: Please set one of the following plans: 1, 2, 3"
        );
        require(_amount > 0, "Amount must be more than 0");

        totalStakingBalance += _amount;
        createNewStakingSession(_amount, _plan);
        token.transferFrom(msg.sender, address(this), _amount);

        emit Staked(msg.sender, _amount, block.timestamp);
    }

    function getPlanDuration(uint8 _plan) public pure returns (uint256) {
        if (_plan == 1) return PLAN90;
        if (_plan == 2) return PLAN180;
        if (_plan == 3) return PLAN360;
        revert("R3TSTAKING: Please set one of the following plans: 1, 2, 3");
    }

    function remainLatestRewardTimes(
        StakeParams memory oneStake
    ) internal view returns (uint256) {
        uint256 timeForCount = (oneStake.start +
            getPlanDuration(oneStake.plan)) < block.timestamp
            ? oneStake.start + getPlanDuration(oneStake.plan)
            : block.timestamp;
        return (timeForCount - oneStake.lastRewardTS) / MONTH;
    }

    function findPercentIndex(
        uint256 countDateStart,
        uint8 plan,
        uint256 index
    ) internal view returns (uint256) {
        uint256 percentIndex;
        while (
            index < percentForPlan[plan].length &&
            percentIndexTimestamp[plan][index] < countDateStart
        ) {
            percentIndex = index;
            index++;
        }
        return percentIndex;
    }

    function estimateReward(
        address account,
        uint256 stakingOrder
    ) public view returns (uint256) {
        StakeParams storage oneStake = stakingBalances[account][stakingOrder];
        uint8 plan = oneStake.plan;
        uint256 stakeEndTS = oneStake.start + getPlanDuration(plan);
        uint256 countDateStart = oneStake.lastRewardTS;
        uint256 countDateEnd = stakeEndTS < block.timestamp
            ? stakeEndTS
            : block.timestamp;
        uint256 reward;
        uint256 percentIndex = oneStake.percentIndex;
        while (countDateStart + MONTH <= countDateEnd) {
            reward +=
                (oneStake.amount *
                    percentForPlan[plan][
                        findPercentIndex(countDateStart, plan, percentIndex)
                    ]) /
                DENOMINATOR;
            countDateStart += MONTH;
        }
        return reward;
    }

    function getReward(uint256 stakingOrder) public nonReentrant whenNotPaused {
        uint256 reward;
        StakeParams storage _stakeParams = stakingBalances[msg.sender][
            stakingOrder
        ];
        require(
            stakingOrder < stakingBalances[msg.sender].length,
            "Wrong stakingOrder!"
        );
        require(_stakeParams.active, "Stake has already been unstaked.");
        reward = estimateReward(msg.sender, stakingOrder);
        uint256 onlyReward = reward;
        _stakeParams.lastRewardTS +=
            remainLatestRewardTimes(_stakeParams) *
            MONTH;
        _stakeParams.percentIndex = findPercentIndex(
            _stakeParams.lastRewardTS,
            _stakeParams.plan,
            _stakeParams.percentIndex
        );

        if (
            _stakeParams.start + getPlanDuration(_stakeParams.plan) <
            block.timestamp
        ) {
            reward += _stakeParams.amount;
            totalStakingBalance -= _stakeParams.amount;
            _stakeParams.active = false;
        }
        require(reward > 0, "Insufficient reward");
        // Add token fee compensation
        uint256 toTransfer = (reward * 100) / 95;
        if ((reward * 100) % 95 > 0) {
            toTransfer += 1;
        }

        require(
            toTransfer <= token.balanceOf(address(this)),
            "Insufficient contract balance"
        );

        token.transfer(msg.sender, toTransfer);

        RewardParams memory params = RewardParams(
            rewards[msg.sender].length,
            stakingOrder,
            onlyReward
        );
        rewards[msg.sender].push(params);
        totalRewards += reward;

        emit RewardPaid(
            msg.sender,
            reward,
            rewards[msg.sender].length - 1,
            stakingOrder,
            block.timestamp
        );
    }

    function setpercentForPlan(uint8 _plan, uint256 _percent) public onlyOwner {
        require(
            _plan > 0 && _plan < 4,
            "R3TSTAKING: Please set one of the following plans: 1, 2, 3"
        );
        percentForPlan[_plan].push(_percent);
        percentIndexTimestamp[_plan].push(block.timestamp);
    }

    function fundContractBalance(uint256 _amount) external onlyOwner {
        require(_amount > 0, "Invalid fund");
        token.transferFrom(msg.sender, address(this), _amount);
    }

    function createNewStakingSession(uint256 _amount, uint8 _plan) internal {
        StakeParams memory params = StakeParams(
            true,
            _plan,
            stakingBalances[msg.sender].length,
            block.timestamp,
            _amount,
            block.timestamp,
            percentForPlan[_plan].length - 1
        );
        stakingBalances[msg.sender].push(params);

        bool existingStaker = checkExistingStaker(msg.sender);

        if (!existingStaker) stakers.push(msg.sender);
    }

    function checkExistingStaker(
        address _account
    ) internal view returns (bool) {
        for (uint256 index = 0; index < stakers.length; index++) {
            if (stakers[index] == _account) return true;
        }

        return false;
    }

    function withdrawBNB() external onlyOwner {
        uint256 amount = address(this).balance;
        require(amount > 0, "Insufficient balance");
        payable(msg.sender).transfer(amount);
    }

    function withdrawToken(
        address tokenAddress,
        uint256 amount
    ) external onlyOwner {
        IERC20 _token = IERC20(tokenAddress);
        require(
            _token.balanceOf(address(this)) >= amount,
            "Insufficient balance"
        );
        _token.transfer(msg.sender, amount);
    }

    receive() external payable {}

    /* ========== EVENTS ========== */
    event Staked(address indexed user, uint256 amount, uint256 blockTime);
    event RewardPaid(
        address indexed user,
        uint256 rewardAmount,
        uint256 rewardorder,
        uint256 stakingOrder,
        uint256 blockTime
    );
}

