
// File: contracts/VasePrivateSale.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

error VasePrivateSale__NeedsMoreThanMinPurchaseAmount();
error VasePrivateSale__MoreThanMaxPurchaseAmount();
error VasePrivateSale_PurchaseFailed();
error VasePrivateSale__TransferFailed();
error VasePrivateSale__LockDurationNotReached();
error VasePrivateSale__VestingAmountReached();
error VasePrivateSale__VestingDurationNotReached();

contract VasePrivateSale is ReentrancyGuard, Ownable
{

    IERC20 public s_vaseToken;
    IERC20 public s_busdToken;


    address[] private allowedTokens;
    address[] private allowedTokensBusd;
    address[] private allowedTokenSale;
    address private s_busdAddress;

    // user struct
    struct User {
     uint256 monthlyPay;
     uint256 firstRelease;
     uint256 totalBusd;
     uint256 totalVase;
     uint256 runningVaseBalance;
     uint256 widCount;
    }
    
    // mapping of address=> user struct
    mapping(address=>User) private s_userTransactions;
    // total busd amount
    uint256 private s_totalBusd;

    // min purchase amount
    uint256 private s_minPurchaseAmount = 100 ether;

    // max purchase amount
    uint256 private s_maxPurchaseAmount = 10000 ether;

    // address to amount of busd 
    mapping(address=>uint256) private s_userTotalBusd;

    // address to amount of vase 
    mapping(address=>uint256) private s_userTotalVase;

    // address to monthly Vase
    mapping(address=>uint256) private s_userMonthlyVase;

    // address to initial Vase release
    mapping(address=>uint256) private s_userFirstVase;

    // address to count of buyers
    mapping(address=>bool) private s_buyers;

    // count of all buyers
    uint256 public allBuyers;

    // presale states
    enum PresaleState {Paused, Active, Stopped}

    PresaleState public status;

    event BuyVase(address indexed user, uint256 indexed busd);
    event PresaleVestingClaimed(address indexed user, uint256 indexed amount);

    // vesting schedule
    mapping(address => uint256) private s_vestingSchedule;

    //Locking period=>40 days after end of presale
    // mapping(uint256 => bool) private s_lockingPeriod;
    uint256 public s_lockingPeriod;


    constructor(address vaseToken, address busd)
    {
        s_vaseToken = IERC20(vaseToken);
        s_busdToken = IERC20(busd);
        allowedTokens.push(vaseToken);
        allowedTokensBusd.push(busd);
       
      
       
    }

    modifier checkAllowedTokensVase(address token)
    {
      address [] memory tempAllowed = allowedTokens;
        for(uint256 i = 0; i < tempAllowed.length; i++)
        {
            require(tempAllowed[i] == token, "Token Not Allowed");
                
        }
        
        _;
    }

    modifier checkAllowedTokensBusd(address token)
    {
      address [] memory tempAllowed = allowedTokensBusd;
        for(uint256 i = 0; i < tempAllowed.length; i++)
        {
            require(tempAllowed[i] == token, "Token Not Allowed");
                
        }
        
        _;
    }
     modifier moreThanMin(uint256 amount) {
        if (amount < s_minPurchaseAmount) {
            revert VasePrivateSale__NeedsMoreThanMinPurchaseAmount();
        }
        _;
    }

    modifier moreThanMax(uint256 amount) {
        if (amount > s_maxPurchaseAmount) {
            revert VasePrivateSale__MoreThanMaxPurchaseAmount();
        }
        _;
    }

    function buyVase(uint256 busdAmount, address busd) external
    checkAllowedTokensBusd(busd)
    moreThanMin(busdAmount)
    moreThanMax(busdAmount)
    nonReentrant
    {

        require(status == PresaleState.Active, "Presale not active");

        s_totalBusd += busdAmount;
        s_userTotalBusd[msg.sender] += busdAmount;

        // calculate quantity of vase user deserves
        // 100 busd=>1799 ether
        uint256 vaseQuantity = (busdAmount * 1799000000000000000000) / 100000000000000000000;
        s_userTotalVase[msg.sender] += vaseQuantity;

        // calculate first release
        uint256 initialRelease = (s_userTotalVase[msg.sender] * 28) / 100;


        // calculate monthly pay
        uint256 tempMonthlyPay = (s_userTotalVase[msg.sender] - initialRelease);
        uint256 userMonthlyPay = (tempMonthlyPay/18);

        // populate users struct
        User storage user = s_userTransactions[msg.sender];
        user.monthlyPay = userMonthlyPay;
        user.firstRelease = initialRelease;
        user.totalBusd = s_userTotalBusd[msg.sender];
        user.totalVase = s_userTotalVase[msg.sender];
        user.runningVaseBalance = tempMonthlyPay;
        user.widCount = 0;

        s_userMonthlyVase[msg.sender] = userMonthlyPay;
        s_userFirstVase[msg.sender] = initialRelease;

        if(!s_buyers[msg.sender])
        {
            
            allBuyers+=1;
            
        }
        s_buyers[msg.sender] = true;
        emit BuyVase(msg.sender, busdAmount);
        bool success = s_busdToken.transferFrom(msg.sender, address(this), busdAmount);
        if (!success) {
            revert VasePrivateSale_PurchaseFailed();
        }
        

        
    }

    function withdrawMonthlyVesting() external nonReentrant
    {
        require(status == PresaleState.Stopped, "Presale not ended");
        if(block.timestamp <  s_lockingPeriod)
        {
            revert VasePrivateSale__LockDurationNotReached();
        }
        if(block.timestamp <  s_vestingSchedule[msg.sender])
        {
            revert VasePrivateSale__VestingDurationNotReached();
        }

        User storage user = s_userTransactions[msg.sender];
        uint256 payout;

        if(user.widCount < 1){
            payout =  user.firstRelease;
        }else{
            payout =  user.monthlyPay;
            user.runningVaseBalance -= payout;
        }

        if(user.widCount >= 18)
        {
           revert VasePrivateSale__VestingAmountReached();
        }
        s_vestingSchedule[msg.sender] = block.timestamp + 31 days;
        user.widCount +=1;

        emit PresaleVestingClaimed(msg.sender, payout);
        bool success = s_vaseToken.transfer(msg.sender, payout);

        if (!success) {
            revert VasePrivateSale__TransferFailed();
        }
    }

     function getUserVaseBalance() external view returns(uint256){
       return s_userTotalVase[msg.sender];
    }
    
     function getUserBusdSpent() external view returns(uint256){
       return s_userTotalBusd[msg.sender];
    }

    function getUserMonthlyPay() external view returns(uint256){
       return s_userMonthlyVase[msg.sender];
    }

    function getUserFirstPay() external view returns(uint256){
       return s_userFirstVase[msg.sender];
    }

    function getBoughtStatus() external view returns(bool){
       return s_buyers[msg.sender];
    }

    function getTotalBusd() external view returns(uint256){
       return s_totalBusd;
    }

    function getAllBuyers() external view returns(uint256){
       return allBuyers;
    }

    function getSalesStatus() external view returns(PresaleState){
       return status;
    }

    function activateSales() external onlyOwner
    {
       status = PresaleState.Active;
    }

    function pauseSales() external onlyOwner
    {
       status = PresaleState.Paused;
    }
    function stopSales() external onlyOwner
    {
       status = PresaleState.Stopped;
       s_lockingPeriod = block.timestamp + 40 days;
    }

    function getWidCount() external view returns(uint256)
    {
       User storage user = s_userTransactions[msg.sender];
       return user.widCount;
    }

     function withdrawAdminBusd(uint256 amount) external onlyOwner nonReentrant {
        s_totalBusd -= amount;
        bool success = s_busdToken.transfer(msg.sender, amount);
        if (!success) {
            revert VasePrivateSale__TransferFailed();
        }
    }

    function withdrawAdminVase(uint256 amount) external onlyOwner nonReentrant {
        uint256 balAmount = s_vaseToken.balanceOf(address(this));
        balAmount -= amount;
        bool success = s_vaseToken.transfer(msg.sender, amount);
        if (!success) {
            revert VasePrivateSale__TransferFailed();
        }
    }

    //  owner withdraw other tokens
    function retrieveAltCoins(address token) public onlyOwner
    {
        uint256 tokenBal = IERC20(token).balanceOf(address(this));
        bool success = IERC20(token).transfer(msg.sender, tokenBal);
            if (!success) {
                revert VasePrivateSale__TransferFailed();
            }

    }
 

    function getUserStruct() external view 
    returns(uint256, uint256, uint256, uint256, uint256, uint256)
    {
       User storage user = s_userTransactions[msg.sender];
       return (user.monthlyPay, user.firstRelease, user.totalBusd, user.totalVase, user.runningVaseBalance, user.widCount);
    }

    fallback() external payable
    {
        s_totalBusd += msg.value;
    }
    receive() external payable
    {
        s_totalBusd += msg.value;
    }


}

// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

