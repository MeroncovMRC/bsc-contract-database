
// File: CoreIncentives.sol
pragma solidity 0.8.12;

import "Ownable.sol";
import "IDddToken.sol";
import "ITokenLocker.sol";


contract CoreMinter is Ownable {

    IDddToken public DDD;
    ITokenLocker public dddLocker;

    mapping (address => uint) public allocPoints;
    mapping (address => uint) public claimed;

    uint256 public minted;
    uint256 public totalAllocPoints;
    uint256 public immutable MINT_PCT;
    uint256 public immutable MAX_DAILY_MINT;
    uint256 public immutable LOCK_WEEKS;

    // this contract has no concept of weekly periods
    uint256 public startTime;

    constructor(
        uint256 _coreMintPct,
        uint256 _maxDaily,
        uint256 _lockWeeks,
        address[] memory _receivers,
        uint[] memory _allocPoints
    ) public {
        MINT_PCT = _coreMintPct;
        MAX_DAILY_MINT = _maxDaily;
        LOCK_WEEKS = _lockWeeks;
        for (uint i = 0; i < _receivers.length; i++) {
            require(allocPoints[_receivers[i]] == 0);
            allocPoints[_receivers[i]] = _allocPoints[i];
            totalAllocPoints += _allocPoints[i];
        }
    }

    function setAddresses(
        IDddToken _DDD,
        ITokenLocker _dddLocker
    ) external onlyOwner {
        DDD = _DDD;
        dddLocker = _dddLocker;

        _DDD.approve(address(_dddLocker), type(uint256).max);

        startTime = _dddLocker.startTime();

        renounceOwnership();
    }

    function supplyMintLimit() public view returns (uint256) {
        uint256 supply = DDD.totalSupply() - minted;
        return supply * 100 / (100 - MINT_PCT) - supply;
    }

    function timeMintLimit() public view returns (uint256) {
        uint256 day = (block.timestamp - startTime) / 86400;
        return MAX_DAILY_MINT * day;
    }

    function claimable(address _user) public view returns (uint256) {
        uint256 supplyLimit = supplyMintLimit();
        uint256 timeLimit = timeMintLimit();

        uint256 limit = supplyLimit < timeLimit ? supplyLimit : timeLimit;
        uint256 amount = limit * allocPoints[_user] / totalAllocPoints;

        return amount - claimed[_user];
    }

    function claim(address _receiver, uint _amount, uint _lock_weeks) external {
        uint claimable = claimable(msg.sender);
        require(claimable > 0, "Nothing claimable");
        if (_amount == 0) {
            _amount = claimable;
        } else {
            require(_amount <= claimable, "Exceeds claimable amount");
        }
        require(_lock_weeks >= LOCK_WEEKS, "Must lock at least LOCK_WEEKS");

        claimed[msg.sender] += _amount;
        minted += _amount;
        DDD.mint(address(this), _amount);
        dddLocker.lock(_receiver, _amount, _lock_weeks);
    }

    function transferAlloc(address _newOwner, uint256 _ap) external {
        uint256 alloc = allocPoints[msg.sender];
        require(alloc > 0, "No alloc");
        require(_ap <= alloc, "Insufficient allocPoint");
        uint256 amount = claimed[msg.sender] * _ap / alloc;

        allocPoints[msg.sender] -= _ap;
        claimed[msg.sender] -= amount;

        allocPoints[_newOwner] += _ap;
        claimed[_newOwner] += amount;
    }

}


// File: Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable {
    address public owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(msg.sender);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = owner;
        owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: IDddToken.sol
pragma solidity 0.8.12;

import "IERC20.sol";

interface IDddToken is IERC20 {
    function mint(address _to, uint256 _value) external returns (bool);
}

// File: IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.12;

/**
 * Based on the OpenZeppelin IER20 interface:
 * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol
 *
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: ITokenLocker.sol
pragma solidity 0.8.12;


interface ITokenLocker {

    function MAX_LOCK_WEEKS() external view returns (uint256);
    function getWeek() external view returns (uint256);
    function userWeight(address _user) external view returns (uint256);
    function totalWeight() external view returns (uint256);
    function weeklyWeight(address _user, uint256 _week) external view returns (uint256, uint256);
    function startTime() external view returns (uint256);
    function weeklyTotalWeight(uint256 week) external view returns (uint256);
    function weeklyWeightOf(address user, uint256 week) external view returns (uint256);

    /**
        @notice Get data on a user's active token locks
        @param _user Address to query data for
        @return lockData dynamic array of [weeks until expiration, balance of lock]
     */
    function getActiveUserLocks(address _user) external view returns (uint256[2][] memory lockData);

    /**
        @notice Allow or block third-party calls to deposit, withdraw
                or claim rewards on behalf of the caller
     */
    function setBlockThirdPartyActions(bool _block) external;

    /**
        @notice Deposit tokens into the contract to create a new lock.
        @param _user Address to create a new lock for (does not have to be the caller)
        @param _amount Amount of tokens to lock. This balance transfered from the caller.
        @param _weeks The number of weeks for the lock.
     */
    function lock(
        address _user,
        uint256 _amount,
        uint256 _weeks
    ) external returns (bool);

    /**
        @notice Extend the length of an existing lock.
        @param _amount Amount of tokens to extend the lock for.
        @param _weeks The number of weeks for the lock that is being extended.
        @param _newWeeks The number of weeks to extend the lock until.
     */
    function extendLock(
        uint256 _amount,
        uint256 _weeks,
        uint256 _newWeeks
    ) external returns (bool);

}

