{"AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\nabstract contract AccessControl is Ownable{\r\n  \r\n    mapping(address =\u003e bool) private _operators;\r\n\r\n    event SetOperator(address indexed add, bool value);\r\n\r\n    function setOperator(address _operator, bool _v) external onlyOwner {\r\n        _operators[_operator] = _v;\r\n        emit SetOperator(_operator, _v);\r\n    }\r\n\r\n    function isOperator(address _address) external view returns(bool){\r\n        return  _operators[_address];\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(_operators[msg.sender]);\r\n        _;\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IReferral.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\ninterface IReferral{\r\n    \r\n    event BindReferral(address indexed referral,address indexed user);\r\n    \r\n    function getReferral(address _address)external view returns(address);\r\n\r\n    function isBindReferral(address _address) external view returns(bool);\r\n\r\n    function getReferralCount(address _address) external view returns(uint256);\r\n\r\n    function bindReferral(address _referral,address _user) external;\r\n\r\n    function getReferrals(address _address,uint256 _num) external view returns(address[] memory);\r\n\r\n    function getRootAddress()external view returns(address);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"Referral.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./IReferral.sol\";\r\nimport \"./AccessControl.sol\";\r\n\r\n\r\ncontract Referral is IReferral,AccessControl{\r\n\r\n    mapping (address=\u003eaddress) private _referrals; \r\n    \r\n    mapping (address=\u003euint256) private _referralCounts;\r\n    \r\n    address private _rootAddress;\r\n \r\n    constructor(address rootAddress_){\r\n        _rootAddress = rootAddress_;\r\n    }\r\n\r\n    function getReferral(address _address)public view returns(address){\r\n        return _referrals[_address];\r\n    }\r\n\r\n    function isBindReferral(address _address) public view returns(bool)\r\n    {\r\n        return getReferral(_address) != address(0) || _address == _rootAddress;\r\n    }\r\n\r\n    function getReferralCount(address _address) public view returns(uint256){\r\n        return _referralCounts[_address];\r\n    }\r\n\r\n    function bindReferral(address _referral,address _user) external onlyOperator{\r\n        require(isBindReferral(_referral),\"Referral not bind\");\r\n        require(!isBindReferral(_user),\"User is bind\");\r\n        _referrals[_user] = _referral;\r\n        _referralCounts[_referral]++;\r\n        emit BindReferral(_referral, _user);\r\n    }\r\n\r\n    function getReferrals(address _address,uint256 _num) external view returns(address[] memory){\r\n        address[] memory result;\r\n        result = new address[](_num);\r\n        for(uint256 i=0;i\u003c_num;i++){\r\n            _address = getReferral(_address);\r\n            if(_address == address(0))break;\r\n            result[i] = _address;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getRootAddress()external view returns(address){\r\n        return _rootAddress;\r\n    }\r\n}"}}