// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol


// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastValue;
                // Update the index for the moved value
                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        assembly {
            result := store
        }

        return result;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: MarsReferral.sol

pragma solidity ^0.8.2;


interface IMC {
    function SolarRate() view external returns (uint256);
}
interface IMA {
}
interface IMD {
    struct AddressReferral {
        uint256[3] balance;
        uint256[3] history;
        bool ban;
        uint256 first_buy;
    }

    function update_AddressReferral(address _account, AddressReferral memory _AddressReferral) external;
    function get_AddressReferral(address _address) external view returns (AddressReferral memory);
    function emit_ReferralDeductions(address _account, address _referrer, uint256 _first_buy, uint256 _property_type_id, uint256[3] memory _amount) external;
    function emit_ReferrerPayout(address _referrer, uint256[3] memory _amount) external;
}


contract MarsReferral is Ownable, ReentrancyGuard {
    using EnumerableSet for EnumerableSet.AddressSet;

    mapping(uint256 => EnumerableSet.AddressSet) _refRequests;
    uint256 private Number;

    constructor(IMC _MarsControl, IMD _MarsData, IMA _MarsAirDrop) {
        MarsControl = _MarsControl;
        MarsData = _MarsData;
        MarsAirDrop = _MarsAirDrop;
        MarsAdmin = owner();

        add_level(750, 1500000); //[7.5%]
        add_level(900, 3000000); //[9%]
        add_level(1000, 6000000); //[10%]
    }

    struct LevelData {
        uint256 perc;
        uint256 max_amount;
    }
    mapping (uint256 => LevelData) public LevelDatas;
    uint256 public leveldata_count = 0;

    mapping (address => uint256) public ClaimAmount;

    function add_level(uint256 _perc, uint256 _max_amount) public notContract nonReentrant onlyOwner {
        LevelData memory _LevelData;
        _LevelData.perc = _perc;
        _LevelData.max_amount = _max_amount;
        LevelDatas[leveldata_count] = _LevelData;
        leveldata_count += 1;
    }
    function edit_level(uint256 _index, uint256 _perc, uint256 _max_amount) external notContract nonReentrant onlyOwner {
        LevelData memory _LevelData;
        _LevelData.perc = _perc;
        _LevelData.max_amount = _max_amount;
        LevelDatas[_index] = _LevelData;
    }

    function new_deduction(address _account, address _referrer, uint256 _property_type_id, uint256 _value) external onlyMarsControl {
        if (address(_account) == address(_referrer)) {
            _referrer = address(0);
        }
        IMD.AddressReferral memory _AddressReferral = MarsData.get_AddressReferral(_account);
        uint256[3] memory _amount = [0, _value, 0];
        MarsData.emit_ReferralDeductions(_account, _referrer, _AddressReferral.first_buy, _property_type_id, _amount);
        if (_AddressReferral.first_buy == 0) {
            _AddressReferral.first_buy = block.timestamp;
            MarsData.update_AddressReferral(_account, _AddressReferral);

            if (_referrer != address(0)) {
                IMD.AddressReferral memory _AddressReferrer = MarsData.get_AddressReferral(_referrer);
                _AddressReferrer.balance[1] += _value;
                MarsData.update_AddressReferral(_referrer, _AddressReferrer);
            }
        }
    }

    function new_deductionAirDrop(address _account, address _referrer, uint256 _property_type_id, uint256 _value) external onlyMarsAirDrop {
        if (address(_account) == address(_referrer)) {
            _referrer = address(0);
        }
        IMD.AddressReferral memory _AddressReferral = MarsData.get_AddressReferral(_account);
        IMD.AddressReferral memory _AddressReferrer = MarsData.get_AddressReferral(_referrer);

        if (_referrer != address(0)) {
            uint256 _percent = LevelDatas[0].perc;
            for (uint i = 0; i < leveldata_count; i++) {
                if (_AddressReferrer.history[1] > LevelDatas[i].max_amount) {
                    _percent = LevelDatas[i].perc;
                }
            }
            _value = _value*_percent/100/100;
        }

        uint256[3] memory _amount = [0, _value, 0];
        MarsData.emit_ReferralDeductions(_account, _referrer, _AddressReferral.first_buy, _property_type_id, _amount);
        
        if (_AddressReferral.first_buy == 0) {
            _AddressReferral.first_buy = block.timestamp;
            MarsData.update_AddressReferral(_account, _AddressReferral);

            if (_referrer != address(0)) {
                _AddressReferrer.balance[1] += _value;
                _AddressReferrer.history[1] += _value;
                MarsData.update_AddressReferral(_referrer, _AddressReferrer);
            }
        }
    }

    function get_LevelDatas() external view returns (LevelData[] memory) {
        LevelData[] memory _LevelDatas = new LevelData[](leveldata_count);
        for (uint i = 0; i < leveldata_count; i++) {
            _LevelDatas[i] = LevelDatas[i];
        }
        return (_LevelDatas); 
    }

    function up_level_referrer(address _referrer, uint256 level_index) external notContract nonReentrant onlyOwnerAndAdmin {
        IMD.AddressReferral memory _AddressReferrer = MarsData.get_AddressReferral(_referrer);
        require (LevelDatas[level_index].perc > 0);
        _AddressReferrer.history[1] = LevelDatas[level_index].max_amount+1;
        MarsData.update_AddressReferral(_referrer, _AddressReferrer);
    }

    function down_level_referrer(address _referrer) external notContract nonReentrant onlyOwnerAndAdmin {
        IMD.AddressReferral memory _AddressReferrer = MarsData.get_AddressReferral(_referrer);
        _AddressReferrer.history[1] = 0;
        MarsData.update_AddressReferral(_referrer, _AddressReferrer);
    }
    
    function referrer_payout_request() external notContract nonReentrant {
        IMD.AddressReferral memory _AddressReferrer = MarsData.get_AddressReferral(msg.sender);
        require (_AddressReferrer.balance[1] > 0 && _AddressReferrer.ban == false);
        if (!_refRequests[Number].contains(msg.sender)) {
            _refRequests[Number].add(msg.sender);
            ClaimAmount[msg.sender] = _AddressReferrer.balance[1];
        }
    }

    function ban_referrer(address _referrer) external notContract nonReentrant onlyOwnerAndAdmin {
        IMD.AddressReferral memory _AddressReferrer = MarsData.get_AddressReferral(_referrer);
        _AddressReferrer.ban = true;
        MarsData.update_AddressReferral(_referrer, _AddressReferrer);
        if (_refRequests[Number].contains(_referrer)) {
            _refRequests[Number].remove(_referrer);
            ClaimAmount[_referrer] = 0;
        }
    }

    function cancel_referrer_request(address _referrer) external notContract nonReentrant onlyOwnerAndAdmin {
        if (_refRequests[Number].contains(_referrer)) {
            _refRequests[Number].remove(_referrer);
            ClaimAmount[_referrer] = 0;
        }
    }
    function check_referrer_request(address _referrer) external view returns (bool) {
        return _refRequests[Number].contains(_referrer);
    }

    function get_referrer_requests() external view returns (address[] memory, IMD.AddressReferral[] memory) {
       uint256 length = _refRequests[Number].length();
        address[] memory _referrer_addresses = new address[](length);
        IMD.AddressReferral[] memory _AddressReferrer = new IMD.AddressReferral[](length);
        for (uint256 i = 0; i < length; i++) {
            address _address = _refRequests[Number].at(i);
            _referrer_addresses[i] = _address;
            _AddressReferrer[i] = MarsData.get_AddressReferral(_address);
        }
        return (_referrer_addresses, _AddressReferrer);
    }

    function pay_deductions() external notContract nonReentrant onlyOwnerAndAdmin {
        for (uint256 i = 0; i < _refRequests[Number].length(); i++) {
            address _address = _refRequests[Number].at(i);
            IMD.AddressReferral memory _AddressReferrer = MarsData.get_AddressReferral(_address);
            uint256 inBNB = ClaimAmount[_address]*MarsControl.SolarRate();
            payable(_address).transfer(inBNB);
            MarsData.emit_ReferrerPayout(_address, [0, ClaimAmount[_address], 0]);
            _AddressReferrer.balance[1] -= ClaimAmount[_address];
            ClaimAmount[_address] = 0;
            MarsData.update_AddressReferral(_address, _AddressReferrer);
        }
        Number += 1;
    }

    function clear_first_pay(address _address) external onlyOwnerAndAdmin {
        IMD.AddressReferral memory _AddressReferral = MarsData.get_AddressReferral(_address);
        _AddressReferral.first_buy = 0;
        MarsData.update_AddressReferral(_address, _AddressReferral);
    }

    function topup() external payable notContract nonReentrant {
        require (msg.value > 0);
    }

    function WithdrawalFromTheContract() external onlyOwner {
        payable(address(msg.sender)).transfer(address(this).balance);
    }

    IMC public MarsControl;
    function setAddressMarsControl(IMC _MarsControl) external onlyOwner {
        MarsControl = _MarsControl;
    }
    modifier onlyMarsControl() {
        require(msg.sender == address(MarsControl), "Not MarsControl");
        _;
    }

    IMD public MarsData;
    function setAddressMarsData(IMD _MarsData) external onlyOwner {
        MarsData = _MarsData;
    }

    IMA public MarsAirDrop;
    function setAddressMarsAirDrop(IMA _MarsAirDrop) external onlyOwner {
        MarsAirDrop = _MarsAirDrop;
    }
    modifier onlyMarsAirDrop() {
        require(msg.sender == address(MarsAirDrop), "Not MarsAirDrop");
        _;
    }

    modifier notContract() {
        require(!_isContract(msg.sender), "Contract not allowed");
        require(msg.sender == tx.origin, "Proxy contract not allowed");
        _;
    }
    function _isContract(address _addr) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(_addr)
        }
        return size > 0;
    }

    address public MarsAdmin;
    function setAddressMarsAdmin(address _MarsAdmin) external onlyOwner {
        MarsAdmin = _MarsAdmin;
    }
    modifier onlyOwnerAndAdmin() {
        require(msg.sender == owner() || msg.sender == address(MarsAdmin), "Not owner or MarsAdmin");
        _;
    }
}