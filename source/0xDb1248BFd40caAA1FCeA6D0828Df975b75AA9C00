
// File: /contracts/snowball_poolnew.sol

pragma solidity ^0.8.6;

import "./libs/ReentrancyGuard.sol";
import "./libs/Ownable.sol";
import "./libs/SafeMath.sol";
import "./libs/SafeERC20.sol";
import "./libs/IERC20.sol";
import "./libs/TransferHelp.sol";

// SPDX-License-Identifier: Unlicensed

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
   
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;
//dex router contract
interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// pragma solidity >=0.6.2;
//dex router contract02
interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

}

interface ISnowBall {
    function getRepayRate() external view returns (uint256);
    function _getAmountValue(uint256 _amount) external view returns(uint256);
}

contract SNOWBPOOLNEW is Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    IERC20 public _snowToken;
    address public uniswapV2Pair;
    IUniswapV2Router02 public routerAddress;

    struct RepayOrder {
		uint256 payedAmount;
		uint256 payedValue;
        uint256 returnedAmount;
        uint256 restReleaseValue;
        bool orderFinished;
        address nextAddress;
        address preAddress;
        uint256 myLastFinishedBlock;
    }

    mapping(address => RepayOrder) public repayOrder;

    address public repayFront;
    address public repayRear;
    uint256 public repayListLength;
    
    uint256 public payedTotalAmount;
    uint256 public payedTotalValue;
    uint256 public incomeTotalAmount;
    uint256 public incomeTotalValue;
    uint256 public repayTotalValue;
    uint256 public repayTotalAmount;
    
    uint256 public fomoIncomeTotalAmount;
    uint256 public fomoIncomeTotalValue;
    uint256 public fomoPayoutTotalAmount;
    uint256 public fomoPayoutTotalValue;

    uint256 lastRepayOrderTime;
    uint256 public lastFinishedBlock;
    uint256 immutable initBlock;

    event NewRepayOrder(address indexed user,uint256 amount, uint256 value, uint256 payedtime);
    // event NewReturnOrder(address indexed user, uint256 amount, uint256 value);
    event RepayOrderFinished(address indexed user, uint256 payedamount, uint256 payedvalue, uint256 returnedAmount ,uint256 finishedtime);
    event NewFomoBurst(uint256 indexed ordertype, uint256 bloctime,bool istimeburst, uint256 amount, uint256 value, 
            address[] receivelist);

    event NewFailEvent(uint failid);

    bool inburst;

    modifier lockTheBurst {
        inburst = true;
        _;
        inburst = false;
    }

    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
    
    function _getAmountValue(uint256 amount) internal view returns(uint256 value){
        uint256 reserve0;
        uint256 reserve1;

        if (amount==0){
            value =0;
            return value;
        }
        
        if (address(_snowToken) == address(0) || uniswapV2Pair == address(0) || address(routerAddress) == address(0)){
            value =0;
            return value;
        }
        
        (reserve0,reserve1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();
        if (reserve0>0 && reserve1>0){
            if (IUniswapV2Pair(uniswapV2Pair).token0() == address(_snowToken)){
                value  = IUniswapV2Router02(routerAddress).getAmountOut(amount,reserve0,reserve1);
            }else{
                value  = IUniswapV2Router02(routerAddress).getAmountOut(amount,reserve1,reserve0);
            }
        }else{
            value = 0;
        }
        
        return value;
    }

    function isInRepayList(address account) public view returns(bool,uint256,uint256) {
        bool isok = false;
        uint256 payedamount = 0;
        uint256 payedvalue = 0;
        if (repayListLength>0){            
            bool orderfinish =  repayOrder[account].orderFinished;
            uint256 restvalue = repayOrder[account].restReleaseValue;
            if (!orderfinish && restvalue>0){
                payedamount = repayOrder[account].payedAmount;
                payedvalue = repayOrder[account].payedValue;
                isok = true;
            }
        }
        return (isok,payedamount,payedvalue);
    }
    
    function getRepayList(uint256 page) external view returns(address[] memory,address,address,uint256) {
        address[] memory arepaylist;
        address beginaddr;
        uint _begin;
        uint _end;
        uint i=0;
        uint _length = repayListLength;
        uint orderspage = _length.div(20);
        if (_length<(page+1).mul(20)){
            _begin = orderspage.mul(20);
            _end = _length;
        }else{            
            _begin = page.mul(20);
            _end = _begin.add(20);
        }

        if (repayListLength>0 && _end>0){
            arepaylist = new address[](_end-_begin);
            beginaddr = repayFront;
            if (_begin>0){
                while (i <_begin && beginaddr != address(0)) {
                    i = i.add(1);
                    beginaddr = repayOrder[beginaddr].nextAddress;
                }
            }

            for (uint256 j=0;j<(_end-_begin);j++){
                arepaylist[j] = beginaddr;
                beginaddr = repayOrder[beginaddr].nextAddress;
            }
        }
        return (arepaylist,repayFront,repayRear,repayListLength);
    }

    
    function newReturnOrder(uint256 _amount,uint256 _value) nonReentrant public returns(bool){
        address from = _msgSender();
        bool isok;
        isok = _newReturnOrder(from, _amount, _value);
        return isok;
    }
    
    function newSingleReturnOrderTransferValue(address _account,uint256 _amount,uint256 _value) nonReentrant public returns(bool){
        address from = _msgSender();
        require(from == address(_snowToken) || from == address(this), "only invoked by token contract");
        if (_amount == 0 || _value == 0 || _account == address(0)){
            emit NewFailEvent(1);
            return false;
        } 

        bool isok = false;
        if (repayListLength==0){return isok;}
        
        address curReturnAddress = _account;
        address preAddress;
        address nextAddress;
        uint256 currestValue;
        bool isfinished;
        uint256 _restvalue = _value;
        uint256 _restamount = _amount;
        uint256 _curamount;
        uint256 _curprice;
        if (_amount>=_value){
            _curprice = _amount.div(_value);
        }else{
            _curprice = _value.div(_amount);
        }

        while(curReturnAddress != address(0)){
            currestValue = repayOrder[curReturnAddress].restReleaseValue;
            isfinished = repayOrder[curReturnAddress].orderFinished;
            if (currestValue>0 && !isfinished) {
                isok = true;
                
                if (currestValue>_restvalue){
                    repayOrder[curReturnAddress].restReleaseValue = currestValue.sub(_restvalue);
                    // _taketransfer(address(_snowToken), curReturnAddress, _restamount);
                    TransferHelper.safeTransfer(address(_snowToken), curReturnAddress, _restamount);
                    repayOrder[curReturnAddress].returnedAmount = repayOrder[curReturnAddress].returnedAmount.add(_restamount);
                    // emit NewReturnOrder(curReturnAddress, _restamount, _restvalue);
                    
                    repayTotalAmount = repayTotalAmount.add(_restamount);
                    _restvalue = 0;
                    _restamount = 0;
                    
                    break;
                }else{
                    _restvalue = _restvalue.sub(currestValue);
                    
                    if (_amount>=_value){
                        _curamount = currestValue.mul(_curprice);
                    }else{
                        _curamount = currestValue.div(_curprice);
                    }
                    _restamount = _restamount.sub(_curamount);

                    //需要把当前地址订单偿还出局
                    repayOrder[curReturnAddress].restReleaseValue = 0;
                    repayOrder[curReturnAddress].orderFinished = true;

                    preAddress = repayOrder[curReturnAddress].preAddress;
                    nextAddress = repayOrder[curReturnAddress].nextAddress;
                    if (preAddress != address(0)){
                        if (nextAddress != address(0)){
                            repayOrder[nextAddress].preAddress = preAddress;
                            repayOrder[preAddress].nextAddress = nextAddress;
                            repayOrder[curReturnAddress].preAddress = address(0);
                            repayOrder[curReturnAddress].nextAddress = address(0);
                            // _taketransfer(address(_snowToken), curReturnAddress, _curamount);
                            TransferHelper.safeTransfer(address(_snowToken), curReturnAddress, _curamount);
                            repayOrder[curReturnAddress].returnedAmount = repayOrder[curReturnAddress].returnedAmount.add(_curamount);
                            // emit NewReturnOrder(curReturnAddress, _curamount, currestValue);
                            
                            emit RepayOrderFinished(curReturnAddress, repayOrder[curReturnAddress].payedAmount, 
                                repayOrder[curReturnAddress].payedValue, repayOrder[curReturnAddress].returnedAmount,block.timestamp);
                            lastFinishedBlock = block.number;
                            repayOrder[curReturnAddress].myLastFinishedBlock = lastFinishedBlock;
                            curReturnAddress = nextAddress;
                        }else{
                            require(repayRear == curReturnAddress,"internal error");
                            repayRear = preAddress;
                            repayOrder[repayRear].nextAddress = address(0);

                            repayOrder[curReturnAddress].preAddress = address(0);
                            repayOrder[curReturnAddress].nextAddress = address(0);
                            repayListLength = repayListLength.sub(1);
                            // _taketransfer(address(_snowToken), curReturnAddress, _curamount);
                            TransferHelper.safeTransfer(address(_snowToken), curReturnAddress, _curamount);
                            repayOrder[curReturnAddress].returnedAmount = repayOrder[curReturnAddress].returnedAmount.add(_curamount);
                            // emit NewReturnOrder(curReturnAddress, _curamount, currestValue);
                            
                            emit RepayOrderFinished(curReturnAddress, repayOrder[curReturnAddress].payedAmount, 
                                repayOrder[curReturnAddress].payedValue, repayOrder[curReturnAddress].returnedAmount,block.timestamp);
                            lastFinishedBlock = block.number;
                            repayOrder[curReturnAddress].myLastFinishedBlock = lastFinishedBlock;
                            repayTotalAmount = repayTotalAmount.add(_curamount);
                            break;
                        }
                    }else{
                        if (nextAddress != address(0)){
                            require(repayFront == curReturnAddress,"internal error");
                            repayFront = nextAddress;
                            repayOrder[repayFront].preAddress = address(0);
                            repayOrder[curReturnAddress].preAddress = address(0);
                            repayOrder[curReturnAddress].nextAddress = address(0);
                            // _taketransfer(address(_snowToken), curReturnAddress, _curamount);
                            TransferHelper.safeTransfer(address(_snowToken), curReturnAddress, _curamount);
                            repayOrder[curReturnAddress].returnedAmount = repayOrder[curReturnAddress].returnedAmount.add(_curamount);
                            // emit NewReturnOrder(curReturnAddress, _curamount, currestValue);
                            
                            emit RepayOrderFinished(curReturnAddress, repayOrder[curReturnAddress].payedAmount, 
                                repayOrder[curReturnAddress].payedValue, repayOrder[curReturnAddress].returnedAmount,block.timestamp);
                            lastFinishedBlock = block.number;
                            repayOrder[curReturnAddress].myLastFinishedBlock = lastFinishedBlock;
                            curReturnAddress = nextAddress;
                        }else{
                            repayFront = address(0);
                            repayRear = address(0);
                            repayOrder[curReturnAddress].preAddress = address(0);
                            repayOrder[curReturnAddress].nextAddress = address(0);
                            // _taketransfer(address(_snowToken), curReturnAddress, _curamount);
                            TransferHelper.safeTransfer(address(_snowToken), curReturnAddress, _curamount);
                            repayOrder[curReturnAddress].returnedAmount = repayOrder[curReturnAddress].returnedAmount.add(_curamount);
                            // emit NewReturnOrder(curReturnAddress, _curamount, currestValue);
                            
                            emit RepayOrderFinished(curReturnAddress, repayOrder[curReturnAddress].payedAmount, 
                                repayOrder[curReturnAddress].payedValue,repayOrder[curReturnAddress].returnedAmount, block.timestamp);
                            lastFinishedBlock = block.number;
                            repayOrder[curReturnAddress].myLastFinishedBlock = lastFinishedBlock;
                            repayTotalAmount = repayTotalAmount.add(_curamount);
                            repayListLength = repayListLength.sub(1);
                            break;
                        }
                    }

                    repayListLength = repayListLength.sub(1);
                    repayTotalAmount = repayTotalAmount.add(_curamount);

                    if (_restvalue==0){
                        break;
                    }
                }
            }else{
                isok = false;
                break;
            }
        }
        
        if (isok){
            repayTotalValue = repayTotalValue.add(_value.sub(_restvalue));
        }
        
        return isok;
    }

    function _newSingleReturnOrderNoTransferValue(address _account,uint256 _amount,uint256 _value) internal returns(bool){
        // address from = _msgSender();
        // require(from == address(_snowToken) || from == address(this), "only invoked by token contract");
        if (_amount == 0 || _value == 0 || _account == address(0)){
            emit NewFailEvent(1);
            return false;
        } 

        // bool isok = false;
        if (repayListLength==0){return false;}
        
        address preAddress;
        address nextAddress;
        uint256 currestValue;
        bool isfinished;
        uint256 _curamount;
        uint256 _curprice;
        if (_amount>=_value){
            _curprice = _amount.div(_value);
        }else{
            _curprice = _value.div(_amount);
        }

        currestValue = repayOrder[_account].restReleaseValue;
        isfinished = repayOrder[_account].orderFinished;
        if (currestValue>0 && !isfinished) {
            if (currestValue>_value){
                repayOrder[_account].restReleaseValue = currestValue.sub(_value);
                // repayTotalAmount = repayTotalAmount.add(_amount);
                // repayTotalValue = repayTotalValue.add(_value);
                // _taketransfer(address(_snowToken), _account, _amount);
                TransferHelper.safeTransfer(address(_snowToken), _account, _amount);
                repayOrder[_account].returnedAmount = repayOrder[_account].returnedAmount.add(_amount);
                // emit NewReturnOrder(_account, _amount, _value);
                
            }else{
                if (_amount>=_value){
                    _curamount = currestValue.mul(_curprice);
                }else{
                    _curamount = currestValue.div(_curprice);
                }

                repayOrder[_account].restReleaseValue = 0;
                repayOrder[_account].orderFinished = true;
                preAddress = repayOrder[_account].preAddress;
                nextAddress = repayOrder[_account].nextAddress;
                if (preAddress != address(0)){
                    if (nextAddress != address(0)){
                        repayOrder[nextAddress].preAddress = preAddress;
                        repayOrder[preAddress].nextAddress = nextAddress;
                    }else{
                        
                        require(repayRear == _account,"internal error");
                        repayRear = preAddress;
                        repayOrder[repayRear].nextAddress = address(0);
                    }
                }else{
                    if (nextAddress != address(0)){
                        
                        require(repayFront == _account,"internal error");
                        repayFront = nextAddress;
                        repayOrder[repayFront].preAddress = address(0);
                    }else{
                        repayFront = address(0);
                        repayRear = address(0);
                    }
                }
                repayListLength = repayListLength.sub(1);
                repayOrder[_account].preAddress = address(0);
                repayOrder[_account].nextAddress = address(0);
                // repayTotalAmount = repayTotalAmount.add(_amount); 
                // repayTotalValue = repayTotalValue.add(currestValue); 
                // _taketransfer(address(_snowToken), _account, _amount);
                TransferHelper.safeTransfer(address(_snowToken), _account, _amount);
                repayOrder[_account].returnedAmount = repayOrder[_account].returnedAmount.add(_amount);
                // emit NewReturnOrder(_account, _amount, currestValue);
                
                emit RepayOrderFinished(_account, repayOrder[_account].payedAmount, 
                    repayOrder[_account].payedValue, repayOrder[_account].returnedAmount, block.timestamp);
                lastFinishedBlock = block.number;
                repayOrder[_account].myLastFinishedBlock = lastFinishedBlock;
            }
            return true;
        }else{
            return false;
        }
    }

    function _newReturnOrder(address from,uint256 _amount,uint256 _value) internal returns(bool){
        require(from == address(_snowToken) || from == address(this), "only invoked by token contract");
        if (_amount == 0 || _value == 0){
            emit NewFailEvent(1);
            return false;
        } 

        bool isok = false;
        if (repayListLength==0){return isok;}
        
        address curReturnAddress;
        uint256 currestValue;
        bool isfinished;
        uint256 _restvalue = _value;
        uint256 _restamount = _amount;
        uint256 _curamount;
        uint256 _curprice;
        if (_amount>=_value){
            _curprice = _amount.div(_value);
        }else{
            _curprice = _value.div(_amount);
        }

        while(repayListLength>0){
            if (repayFront != address(0)){
                curReturnAddress = repayFront;
                currestValue = repayOrder[curReturnAddress].restReleaseValue;
                isfinished = repayOrder[curReturnAddress].orderFinished;
                if (!isfinished && currestValue>0 && repayOrder[curReturnAddress].preAddress == address(0)){
                    isok = true;
                    
                    if (currestValue>_restvalue){
                        repayOrder[curReturnAddress].restReleaseValue = currestValue.sub(_restvalue);    
                        // _taketransfer(address(_snowToken), curReturnAddress, _restamount);
                        TransferHelper.safeTransfer(address(_snowToken), curReturnAddress, _restamount);
                        repayOrder[curReturnAddress].returnedAmount = repayOrder[curReturnAddress].returnedAmount.add(_restamount);
                        // emit NewReturnOrder(curReturnAddress, _restamount, _restvalue);
                        

                        repayTotalAmount = repayTotalAmount.add(_restamount);
                        _restvalue = 0;
                        _restamount = 0;
                        break;
                    }else{
                        _restvalue = _restvalue.sub(currestValue);
                        if (_amount>=_value){
                            _curamount = currestValue.mul(_curprice);
                        }else{
                            _curamount = currestValue.div(_curprice);
                        }
                        _restamount = _restamount.sub(_curamount);

                        repayOrder[curReturnAddress].restReleaseValue = 0;
                        repayOrder[curReturnAddress].orderFinished = true;
                        repayOrder[curReturnAddress].preAddress = address(0);

                        repayFront = repayOrder[curReturnAddress].nextAddress;
                        if (repayFront != address(0)){
                            repayListLength = repayListLength.sub(1);
                            repayOrder[repayFront].preAddress = address(0);
                            if (repayOrder[repayFront].nextAddress == address(0)){
                                repayRear = repayFront;
                            }
                        }else{
                            repayRear = repayFront;
                            repayListLength = 0;
                        }
                        repayOrder[curReturnAddress].nextAddress = address(0);
                        // _taketransfer(address(_snowToken), curReturnAddress, _curamount);
                        TransferHelper.safeTransfer(address(_snowToken), curReturnAddress, _curamount);
                        repayOrder[curReturnAddress].returnedAmount = repayOrder[curReturnAddress].returnedAmount.add(_curamount);
                        // emit NewReturnOrder(curReturnAddress, _curamount, currestValue);
                        
                        emit RepayOrderFinished(curReturnAddress, repayOrder[curReturnAddress].payedAmount, 
                            repayOrder[curReturnAddress].payedValue, repayOrder[curReturnAddress].returnedAmount,block.timestamp);
                        lastFinishedBlock = block.number;
                        repayOrder[curReturnAddress].myLastFinishedBlock = lastFinishedBlock;
                        repayTotalAmount = repayTotalAmount.add(_curamount);

                        if (_restvalue==0){
                            break;
                        }
                    }
                }else{
                    repayListLength = 0;
                    repayRear = address(0);
                }
            }else{
                repayListLength = 0;
                repayRear = address(0);
            }
        }
        
        repayTotalValue = repayTotalValue.add(_value.sub(_restvalue));
        return isok;
    }
    
    
    function newRepayOrder(address _account,uint256 _amount,uint256 _value) nonReentrant external returns(bool){
        address from = _msgSender();
        require(from == address(_snowToken) && _value>0, "only invoked by token contract");
        bool isok = false;
        require(_value>=90*10**18 && _value<=1100*10**18, "throw in value error");
        (bool inlist,,) = isInRepayList(_account);
        require(!inlist, "should wait for your previous order finished");

        if (repayListLength > 0){
            require(repayOrder[repayRear].nextAddress == address(0) && repayRear != address(0), "interal error");
            repayOrder[repayRear].nextAddress = _account;
            RepayOrder memory newOrder = RepayOrder({
                payedAmount: _amount,
                payedValue: _value,
                returnedAmount: 0,
                restReleaseValue: _value.mul(15).div(10),
                orderFinished: false,
                nextAddress: address(0),
                preAddress: repayRear,
                myLastFinishedBlock:0
            });
            repayOrder[_account] = newOrder;
            repayRear = _account;

        }else{
           repayFront = _account;
           repayRear = _account;

           RepayOrder memory newOrder = RepayOrder({
                payedAmount: _amount,
                payedValue: _value,
                returnedAmount: 0,
                restReleaseValue: _value.mul(15).div(10),
                orderFinished: false,
                nextAddress: address(0),
                preAddress: address(0),
                myLastFinishedBlock:0
           });
           repayOrder[_account] = newOrder;
        }

        payedTotalAmount = payedTotalAmount.add(_amount);
        payedTotalValue = payedTotalValue.add(_value);
        emit NewRepayOrder(_account, _amount, _value, block.timestamp);
        repayListLength = repayListLength.add(1);
        
        lastRepayOrderTime = block.timestamp;
        isok = true;
        return isok;
    }
    
    function reserveNewRepayOrder(address _account,uint256 _amount,uint256 _restvalue) external onlyOwner returns(bool){
        address from = _msgSender();
        require(address(_snowToken) != address(0) && _amount>0, "token not set or amount error");
        bool isok = false;
        uint256 _value = _getAmountValue(_amount);
        require(_value>=100*10**18 && _value<=1000*10**18, "throw in value error");

        (bool inlist,,) = isInRepayList(_account);
        require(!inlist, "should wait for your previous order finished");
        uint256 minAmount = IERC20(_snowToken).allowance(from, address(this));
        require(minAmount >= _amount, "Approved allowance not enough");
        TransferHelper.safeTransferFrom(address(_snowToken), from, address(this), _amount);
        uint256 restvalue;
        if (_restvalue>0){
            restvalue = _restvalue;
        }else{
            restvalue = _value.mul(15).div(10);
        }
        if (repayListLength > 0){
            require(repayOrder[repayRear].nextAddress == address(0) && repayRear != address(0), "interal error");
            repayOrder[repayRear].nextAddress = _account;
            RepayOrder memory newOrder = RepayOrder({
                payedAmount: _amount,
                payedValue: _value,
                returnedAmount: 0,
                restReleaseValue: restvalue,
                orderFinished: false,
                nextAddress: address(0),
                preAddress: repayRear,
                myLastFinishedBlock:0
            });
            repayOrder[_account] = newOrder;
            repayRear = _account;

        }else{
           repayFront = _account;
           repayRear = _account;

           RepayOrder memory newOrder = RepayOrder({
                payedAmount: _amount,
                payedValue: _value,
                returnedAmount: 0,
                restReleaseValue: restvalue,
                orderFinished: false,
                nextAddress: address(0),
                preAddress: address(0),
                myLastFinishedBlock:0
           });
           repayOrder[_account] = newOrder;
        }

        payedTotalAmount = payedTotalAmount.add(_amount);
        payedTotalValue = payedTotalValue.add(_value);
        emit NewRepayOrder(_account, _amount, _value, block.timestamp);
        repayListLength = repayListLength.add(1);
        
        lastRepayOrderTime = block.timestamp;
        isok = true;
        return isok;
    }


    function putinFomoPool(uint256 _amount,uint256 _value) nonReentrant external returns(bool){
        address from = _msgSender();
        require((from == address(_snowToken) || from == owner()) && _value>0, "only invoked by token contract");
        bool isok = false;
        
        if (_amount>0 && _value>0 && from != _owner){
            fomoIncomeTotalAmount = fomoIncomeTotalAmount.add(_amount);
            fomoIncomeTotalValue = fomoIncomeTotalValue.add(_value);
            
            if (fomoIncomeTotalValue.sub(fomoPayoutTotalValue)>=3000*10**18){
                _burstFomoPool(address(this), false);
            }
            isok = true;
        }else{
            uint256 minAmount = IERC20(_snowToken).allowance(from, address(this));
            require(minAmount >= _amount && _amount>0, "Approved allowance not enough");
            TransferHelper.safeTransferFrom(address(_snowToken), from, address(this), _amount);
            uint256 avalue = _getAmountValue(_amount);
            require(avalue>0, "error value");

            fomoIncomeTotalAmount = fomoIncomeTotalAmount.add(_amount);
            fomoIncomeTotalValue = fomoIncomeTotalValue.add(avalue);            
            if (fomoIncomeTotalValue.sub(fomoPayoutTotalValue)>=3000*10**18){
                _burstFomoPool(address(this), false);
            }
            isok = true;
        }
        
        return isok;
    }

    function putinRepayPool(uint256 _amount,uint256 _value) nonReentrant external returns(bool){
        address from = _msgSender();
        require(from == address(_snowToken) && _value>0, "only invoked by token contract");
        bool isok = false;
        if (_amount>0 && _value>0){
            incomeTotalAmount = incomeTotalAmount.add(_amount);
            incomeTotalValue = incomeTotalValue.add(_value);
            isok = true;
        }
        
        return isok;
    }

    function burstFomoPool(bool _istimeburst) nonReentrant external returns(bool) {
        address from = _msgSender();
        bool isok = false;

        isok = _burstFomoPool(from, _istimeburst);

        return isok;
    }

    function _taketransfer(address token,address to,uint256 amount) lockTheBurst internal {
        TransferHelper.safeTransfer(token, to, amount);   
    }

    function _burstFomoPool(address _from,bool _istimeburst) internal returns(bool){
        if (inburst){return false;}
        require(_from == address(_snowToken) || _from == address(this), "only invoked by token contract");
        bool isok = false;
        
        if (_istimeburst){
            //timeout burst
            // if (repayRear != address(0) && repayListLength>0){
            //     address[] memory receivelist = new address[](1);
            //     uint256 burstAmount = fomoIncomeTotalAmount.sub(fomoPayoutTotalAmount);
            //     uint256 burstValue = fomoIncomeTotalValue.sub(fomoPayoutTotalValue);
            //     if (burstAmount > _snowToken.balanceOf(address(this))){
            //         emit NewFailEvent(2);
            //         return false;
            //     }
            //     receivelist[0] = repayRear;

            //     lastRepayOrderTime = 0;
            //     isok = _newSingleReturnOrderNoTransferValue(repayRear,burstAmount,burstValue);

            //     fomoPayoutTotalAmount = fomoPayoutTotalAmount.add(burstAmount);
            //     fomoPayoutTotalValue = fomoPayoutTotalValue.add(burstValue);

            //     emit NewFomoBurst(1, block.timestamp, _istimeburst, burstAmount, burstValue, receivelist);
            //     isok = true;
            // }
        }else{
            //value burst
            if (repayRear != address(0) && repayListLength>0){
                uint256 payoutlistlength;
                if (repayListLength<10){
                    payoutlistlength = repayListLength;
                }else{
                    payoutlistlength = 10;
                }

                address[] memory receivelist = new address[](payoutlistlength);
                uint256 burstAmount = (fomoIncomeTotalAmount.sub(fomoPayoutTotalAmount)).div(2);
                uint256 burstValue = (fomoIncomeTotalValue.sub(fomoPayoutTotalValue)).div(2);                
                if (burstAmount > _snowToken.balanceOf(address(this))){
                    emit NewFailEvent(2);
                    return false;
                }
                                
                address curAddr = repayRear;
                address preAddr = repayOrder[curAddr].preAddress;
                for (uint256 i=0;i<payoutlistlength;i++){
                    // _newSingleReturnOrderNoTransferValue(curAddr,burstAmount.div(payoutlistlength),burstValue.div(payoutlistlength));
                    receivelist[i] = curAddr;
                    if (preAddr != address(0)){
                        curAddr = preAddr;
                        preAddr = repayOrder[curAddr].preAddress;
                    }else{
                        break;
                    }
                }

                for (uint256 i=0;i<payoutlistlength;i++){
                    if (receivelist[i] != address(0)){
                        _newSingleReturnOrderNoTransferValue(receivelist[i],burstAmount.div(payoutlistlength),
                                burstValue.div(payoutlistlength));
                    }
                }

                fomoPayoutTotalAmount = fomoPayoutTotalAmount.add(burstAmount);
                fomoPayoutTotalValue = fomoPayoutTotalValue.add(burstValue);
                
                emit NewFomoBurst(2, block.timestamp, _istimeburst, burstAmount, burstValue, receivelist);
                isok = true;
            }
        }
        return isok;
    }

    function setSnowToken(IERC20 _snowtoken) onlyOwner external {
        require(address(_snowtoken) != address(0) && isContract(address(_snowtoken)), "Error Token address");
        _snowToken = _snowtoken;
    }
    
    function getRepayFrontAddress() external view returns(address) {
        return repayFront;
    }
    
    function getRepayPoolAmountValue() external view returns(uint256 amount,uint256 value) {
        if (address(_snowToken)!=address(0)){
            uint256 repayrate = ISnowBall(address(_snowToken)).getRepayRate();
            amount = payedTotalAmount.mul(repayrate).div(1000);
            value  = payedTotalValue.mul(repayrate).div(1000);
            amount = amount.add(incomeTotalAmount);
            value = value.add(incomeTotalValue);
            return (amount,value);
        }else{
            return (0,0);
        }
    }

    function getFomoPoolAmountValue()  external view returns(uint256 amount,uint256 value) {
        amount = fomoIncomeTotalAmount.sub(fomoPayoutTotalAmount);
        value = fomoIncomeTotalValue.sub(fomoPayoutTotalValue);

        return (amount,value);
    }

    function getLastRepayOrderTime() external view returns(uint256) {
        return lastRepayOrderTime;
    }

    function getMyRepayOrder() external view returns(RepayOrder memory) {
        address from = _msgSender();
        return repayOrder[from];
    }

    function getUsrRepayOrder(address account) external view returns(RepayOrder memory) {
        return repayOrder[account];
    }

    function claimTokens() public onlyOwner {
        TransferHelper.safeTransferETH(_owner, address(this).balance);
    }

    //从合约地址上取走其他代币
    function claimOtherTokens(IERC20 token,address to, uint256 amount) public onlyOwner {
        require(to != address(this) && to != address(0) && address(token) != address(0), "Error target address");
        uint256 abalance;
        abalance = token.balanceOf(address(this));
        require(amount <= abalance && amount>0, "Insufficient funds");

        TransferHelper.safeTransfer(address(token), to, amount);
    }

    function changePairAddress(address _pair) public onlyOwner {
        require(_pair != address(0) && isContract(_pair),"Error zero pair address");
        require(_pair != _owner,"Error pair address can't be owner");
        require(_pair != uniswapV2Pair,"Error new pair address can't be same to old");
        
        uniswapV2Pair = _pair;
    }

    function changeRouteAddress(address _router) public onlyOwner {
        require(_router != address(0) && isContract(_router),"Error zero router address");
        require(_router != _owner,"Error router address can't be owner");
        require(_router != address(routerAddress),"Error new router address can't be same to old");
        
        routerAddress = IUniswapV2Router02(_router);
    }

//================================================================================
    constructor(IERC20 _snowtoken,address _v2pair,address _router)  {
        _snowToken = _snowtoken;

        repayFront = address(0);
        repayRear = address(0);
        repayListLength = 0;
    
        payedTotalAmount = 0;
        payedTotalValue = 0;
        incomeTotalAmount = 0;
        incomeTotalValue = 0;
        repayTotalValue = 0;
        repayTotalAmount = 0;

        fomoIncomeTotalAmount = 0;
        fomoIncomeTotalValue = 0;
        fomoPayoutTotalAmount = 0;
        fomoPayoutTotalValue = 0;

        lastRepayOrderTime = 0;
        lastFinishedBlock = block.number;
        initBlock = block.number;
        uniswapV2Pair = _v2pair;
        routerAddress = IUniswapV2Router02(_router);

    }
    
}


// File: /contracts/libs/TransferHelp.sol

pragma solidity >=0.6.12;
// SPDX-License-Identifier: Unlicensed

library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}

// File: /contracts/libs/SafeMath.sol
pragma solidity >=0.6.12;
// SPDX-License-Identifier: Unlicensed

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

// File: /contracts/libs/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.12;

import "./SafeMath.sol";
import "./Address.sol";
import "./IERC20.sol";
/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: /contracts/libs/ReentrancyGuard.sol
pragma solidity >=0.6.12;
// SPDX-License-Identifier: Unlicensed

abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: /contracts/libs/Ownable.sol
pragma solidity >=0.6.12;
// SPDX-License-Identifier: Unlicensed

import "./Context.sol";
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */

abstract contract Ownable is Context {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: /contracts/libs/IERC20.sol
pragma solidity >=0.6.12;
// SPDX-License-Identifier: Unlicensed

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: /contracts/libs/Context.sol
pragma solidity >=0.6.12;
// SPDX-License-Identifier: Unlicensed

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: /contracts/libs/Address.sol


pragma solidity >=0.6.12;
// SPDX-License-Identifier: Unlicensed


library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
