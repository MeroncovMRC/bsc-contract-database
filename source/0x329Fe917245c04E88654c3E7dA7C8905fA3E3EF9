{"BOTClaimIDO.sol":{"content":"/*************************************************************************************\r\n * \r\n * Autor \u0026 Owner: BotPlenet\r\n *\r\n * 446576656c6f7065723a20416e746f6e20506f6c656e79616b61 *****************************/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.12;\r\n\r\nimport \"./WhitelistClaim.sol\";\r\n\r\ncontract BOTClaimIDO is WhitelistClaim {\r\n\r\n    // Constants\r\n\r\n    address private constant BOT_ADDRESS = 0x1Ab7E7DEdA201E5Ea820F6C02C65Fce7ec6bEd32;\r\n    address private constant OWNER_ADDRESS = 0xb67bbdac128Fd882AA76EaE3Fb21B623B8A15977;\r\n    uint256 private constant DEFAULT_TOTAL_PERIODS = 5;\r\n    uint256 private constant FIRST_DATE_TO_CLAIM = 1648470600; // 12:30 UTC 28-03-2022\r\n\r\n    // Constructor\r\n\r\n    constructor() \r\n        WhitelistClaim(\r\n            BOT_ADDRESS, \r\n            OWNER_ADDRESS, \r\n            (30 days), \r\n            DEFAULT_TOTAL_PERIODS,\r\n            FIRST_DATE_TO_CLAIM) {\r\n    }\r\n}"},"BOTClaimSEED.sol":{"content":"/*************************************************************************************\r\n * \r\n * Autor \u0026 Owner: BotPlenet\r\n *\r\n * 446576656c6f7065723a20416e746f6e20506f6c656e79616b61 *****************************/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.12;\r\n\r\nimport \"./WhitelistClaim.sol\";\r\n\r\ncontract BOTClaimSEED is WhitelistClaim {\r\n\r\n    // Constants\r\n\r\n    address private constant BOT_ADDRESS = 0x1Ab7E7DEdA201E5Ea820F6C02C65Fce7ec6bEd32;\r\n    address private constant OWNER_ADDRESS = 0xb67bbdac128Fd882AA76EaE3Fb21B623B8A15977;\r\n    uint256 private constant DEFAULT_TOTAL_PERIODS = 10;\r\n    uint256 private constant FIRST_DATE_TO_CLAIM = 1651147200; // 12:00 UTC 28-04-2022\r\n\r\n    // Constructor\r\n\r\n    constructor() \r\n        WhitelistClaim(\r\n            BOT_ADDRESS, \r\n            OWNER_ADDRESS, \r\n            (30 days),\r\n            DEFAULT_TOTAL_PERIODS,\r\n            FIRST_DATE_TO_CLAIM) {\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity 0.8.12;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity 0.8.12;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    address[] internal _allBalances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;            \r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity 0.8.12;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"IWhitelistClaim.sol":{"content":"/*************************************************************************************\r\n * \r\n * Autor \u0026 Owner: BotPlenet\r\n *\r\n * 446576656c6f7065723a20416e746f6e20506f6c656e79616b61 *****************************/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.12;\r\n\r\ninterface IWhitelistClaim {\r\n\r\n    struct WhitelistedData {\r\n        address account;\r\n        uint256 totalPeriods;\r\n        uint256 lastClaimedPeriod;\r\n        uint256 periodAmount;\r\n        uint256 lastClaimTimestamp;\r\n        uint256 nextClaimTimestamp;\r\n        uint256 totalAmountToClaim;\r\n        uint256 pendingAmountToClaim;\r\n    }\r\n\r\n    // Events\r\n\r\n    event UsersAdded(uint256 numAccountsAdded, address indexed firstAccount, address indexed lastAccount);\r\n    event Claimed(address indexed account, uint256 amount, uint256 claimedPeriod);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n    event StateChanged(bool isPausedContract);\r\n\r\n    // Methods: Balance\r\n\r\n    function BalanceGetTokens() external view returns(uint256);\r\n\r\n    // Methods: General\r\n\r\n    // Interrumpt any functions in the contract\r\n    function Pause() external;\r\n    // Allow paused functions in the contract\r\n    function Unpause() external;\r\n    // Check state of contract if is paused or not\r\n    function IsPaused() external view returns(bool);\r\n    // Return current blockchain time\r\n    function GetCurrentTime() external view returns(uint256);\r\n\r\n    // Methods: Owner\r\n\r\n    function OwnerSet(address newOwner) external;\r\n    function OwnerGet() external returns(address);\r\n\r\n    // Methods: User\r\n\r\n    function UsersAdd(address[] memory accounts_, uint256[] memory totalAmountsToClaim_) external;\r\n    function UserGetInfo(address account) external view returns(WhitelistedData memory);\r\n    function UserVerify(address account) external view returns(bool);\r\n\r\n    // Methods: Claim\r\n\r\n    function Claim() external;\r\n    function GetTimeForNextClaim() external view returns(uint256 time);\r\n}"},"WhitelistClaim.sol":{"content":"/*************************************************************************************\r\n * \r\n * Autor \u0026 Owner: BotPlenet\r\n *\r\n * 446576656c6f7065723a20416e746f6e20506f6c656e79616b61 *****************************/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.12;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./IWhitelistClaim.sol\";\r\n\r\nabstract contract WhitelistClaim is IWhitelistClaim, Context {\r\n\r\n    // Attributies\r\n\r\n    ERC20 private _token;\r\n    address private _owner;\r\n    address private _contractAddress;\r\n    bool private _isPaused;\r\n    uint256 private _minTimeBetweenClaim;\r\n    uint256 private _defaultTotalPeriods;\r\n    uint256 private _firstDateToClaim;\r\n\r\n    WhitelistedData[] private _whitelistedData;\r\n    mapping(address =\u003e WhitelistedData) private _addressToData;\r\n    mapping(address =\u003e bool) private _whitelistedAddresses;\r\n    mapping(address =\u003e bool) private _exist;\r\n\r\n    // Constructor\r\n\r\n    constructor(address tokenContractAddress_, address owner_, uint256 minTimeBetweenClaim_,\r\n        uint256 defaultTotalPeriods_, uint256 firstDateToClaim_) {\r\n        _token = ERC20(tokenContractAddress_);\r\n        _contractAddress = address(this);\r\n        _minTimeBetweenClaim = minTimeBetweenClaim_;\r\n        _owner = owner_;\r\n        _defaultTotalPeriods = defaultTotalPeriods_;\r\n        _firstDateToClaim = firstDateToClaim_;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    // Modifiers\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"ERROR: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier isWhitelisted() {\r\n        require(_whitelistedAddresses[_msgSender()], \"ERROR: You need to be whitelisted\");\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!_isPaused, \"ERROR: Contract state is paused!\");\r\n        _;\r\n    }\r\n\r\n    // Methods: General\r\n    function Pause() external override onlyOwner {\r\n        _isPaused = true;\r\n        emit StateChanged(_isPaused);\r\n    }\r\n\r\n    function Unpause() external override onlyOwner {\r\n        _isPaused = false;\r\n        emit StateChanged(_isPaused);\r\n    }\r\n\r\n    function IsPaused() external view returns(bool) {\r\n        return _isPaused;\r\n    }\r\n\r\n    // Methods: Balance\r\n\r\n    function _contractBalanceBOT() internal view returns(uint256 balance) {\r\n        return _token.balanceOf(_contractAddress);\r\n    }\r\n\r\n    function BalanceGetTokens() external view notPaused returns(uint256) {\r\n        return _contractBalanceBOT();\r\n    }\r\n\r\n    // Methods: Owner\r\n\r\n    function OwnerSet(address newOwner) external onlyOwner {\r\n        // Check\r\n        require(newOwner != address(0), \"ERROR: Address of owner need to be different 0\");\r\n        // Work\r\n        _owner = newOwner;\r\n        // Event\r\n        emit OwnerChanged(msg.sender, newOwner);\r\n    }\r\n\r\n    function OwnerGet() external view notPaused returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    // Methods: User\r\n\r\n    function _userAddDataBase(address account_, uint256 periodAmount_, uint256 totalAmountToClaim_) internal {\r\n        require(_exist[account_] == false, \"ERROR: This account is already added to claim/white list\");\r\n        WhitelistedData memory data = WhitelistedData({\r\n            account: account_,\r\n            totalPeriods: totalAmountToClaim_ / periodAmount_,\r\n            lastClaimedPeriod: 0,\r\n            periodAmount: periodAmount_,\r\n            lastClaimTimestamp: _firstDateToClaim - _minTimeClaim(),\r\n            nextClaimTimestamp: _firstDateToClaim,\r\n            totalAmountToClaim: totalAmountToClaim_,\r\n            pendingAmountToClaim: totalAmountToClaim_\r\n        });\r\n        _whitelistedData.push(data);\r\n        _addressToData[account_] = data;\r\n        _whitelistedAddresses[account_] = true;\r\n        _exist[account_] = true;\r\n    }\r\n\r\n    function UsersAdd(address[] memory accounts_, uint256[] memory totalAmountsToClaim_) external override onlyOwner {\r\n        // Check data\r\n        require(accounts_.length \u003e 0, \"ERROR: Number of accounts need to be greater of zero!\");\r\n        require(accounts_.length == totalAmountsToClaim_.length, \"ERROR: Number of accounts and amounts need to be equal!\");\r\n        for(uint256 i = 0; i \u003c accounts_.length; i++) {\r\n            require(accounts_[i] != address(0), \"ERROR: Account address need to be different 0\");\r\n            require(totalAmountsToClaim_[i] \u003e 0, \"ERROR: Total amount to claim need to be greater 0 and greater or equal period amount!\");\r\n            // Work\r\n            uint256 periodAmount = totalAmountsToClaim_[i] / _defaultTotalPeriods;\r\n            _userAddDataBase(accounts_[i], periodAmount, totalAmountsToClaim_[i]);\r\n        }\r\n        // Event\r\n        emit UsersAdded(accounts_.length, accounts_[0], accounts_[accounts_.length - 1]);\r\n    }\r\n\r\n    function UserGetInfo(address account_) external override view notPaused returns(WhitelistedData memory) {\r\n        require(account_ != address(0), \"ERROR: user address is zero!\");\r\n        require(_whitelistedAddresses[account_] == true, \"ERROR: user with this address not in whitelist!\");\r\n        return _addressToData[account_];\r\n    }\r\n\r\n    function UserVerify(address account_) external view notPaused returns(bool) {\r\n        bool userIsWhitelisted = _whitelistedAddresses[account_];\r\n        return userIsWhitelisted;\r\n    }\r\n\r\n    // Methods: Claim\r\n\r\n    function _minTimeClaim() internal view returns(uint256 time) {\r\n        return _minTimeBetweenClaim;\r\n    }\r\n\r\n    function _checkTimeClaim(uint256 nextClaim_) internal view returns(bool isAllowedClaim){\r\n        isAllowedClaim = nextClaim_ \u003e 0 \u0026\u0026 block.timestamp \u003e= nextClaim_;\r\n        return isAllowedClaim;\r\n    }\r\n\r\n    function _checkAmount(uint256 amount_) internal view returns(bool isAmountOk) {\r\n        isAmountOk = amount_ \u003e 0 \u0026\u0026 _contractBalanceBOT() \u003e= amount_;\r\n        return isAmountOk;\r\n    }\r\n\r\n    function _calculateCurrentUserPeriod(WhitelistedData memory data_) internal view returns(uint256 currentPeriod) {\r\n        uint256 timestamp = data_.lastClaimTimestamp;\r\n        currentPeriod = data_.lastClaimedPeriod;\r\n        while((timestamp + _minTimeClaim()) \u003c= block.timestamp) {\r\n            currentPeriod++;\r\n            timestamp += _minTimeClaim();\r\n        }\r\n        if(currentPeriod \u003e data_.totalPeriods) {\r\n            currentPeriod = data_.totalPeriods;\r\n        }\r\n        return currentPeriod;\r\n    }\r\n\r\n    function _calculateCurrentPendingUserClaim(WhitelistedData memory data_, uint256 currentPeriod_) internal pure returns(uint256 amount) {\r\n        amount = 0;\r\n\r\n        uint256 unClaimedPeriods;\r\n        if(currentPeriod_ \u003c= data_.lastClaimedPeriod) {\r\n            unClaimedPeriods = 0;\r\n        } else {\r\n            unClaimedPeriods = currentPeriod_ - data_.lastClaimedPeriod;\r\n        }\r\n\r\n        amount = unClaimedPeriods * data_.periodAmount;\r\n        // Control: don\u0027t pay more of reserved total amount\r\n        if(amount \u003e data_.pendingAmountToClaim) {\r\n            amount = data_.pendingAmountToClaim;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function _claimOneUser(address account_) internal returns(uint256 amount, uint256 currentPeriod) {\r\n        amount = 0;\r\n        // Check if address of user added to whitelist\r\n        bool userInWhitelist = _whitelistedAddresses[account_];\r\n        require(userInWhitelist, \"ERROR: User is not added to whitelist!\");\r\n        WhitelistedData storage data = _addressToData[account_];\r\n        // Check if user has any amount to claim\r\n        require(data.pendingAmountToClaim \u003e 0, \"ERROR: User already claimed all amount of tokens reserved for him!\");\r\n        // Check last time execution/release\r\n        bool isAllowedClaim = _checkTimeClaim(data.nextClaimTimestamp);\r\n        require(isAllowedClaim, \"ERROR: Is not time to claim tokens, try it late!\");\r\n        // Check amount\r\n        currentPeriod = _calculateCurrentUserPeriod(data);\r\n        require(currentPeriod \u003e 0, \"ERROR: Current period is 0, not possible to claim!\");\r\n        require(currentPeriod \u003e data.lastClaimedPeriod, \"ERROR: Current period is already claimed by user!\");\r\n        uint256 currentAmountToClaimByUser = _calculateCurrentPendingUserClaim(data, currentPeriod);\r\n        require(currentAmountToClaimByUser \u003e 0, \"ERROR: Currently no tokens for this user to claim!\");\r\n        bool isAmountOk = _checkAmount(currentAmountToClaimByUser);\r\n        require(isAmountOk, \"ERROR: Amount to claim by user is not correct!\");\r\n        // Increase time for next claim\r\n        data.lastClaimTimestamp = _firstDateToClaim + (_minTimeClaim() * (currentPeriod - 1));\r\n        data.pendingAmountToClaim -= currentAmountToClaimByUser;\r\n        do {\r\n            data.nextClaimTimestamp = data.nextClaimTimestamp + _minTimeClaim();\r\n        } while(data.nextClaimTimestamp \u003c= block.timestamp);\r\n        if(currentPeriod \u003c data.totalPeriods) {\r\n            data.lastClaimedPeriod = currentPeriod;\r\n        } else {\r\n            data.lastClaimedPeriod = data.totalPeriods;\r\n        }\r\n        // Transfer tokens to user\r\n        _token.transfer(data.account, currentAmountToClaimByUser);\r\n        \r\n        amount = currentAmountToClaimByUser;\r\n        return (amount, currentPeriod);\r\n    }\r\n\r\n    function Claim() external override notPaused { // isWhitelisted\r\n        // Check\r\n        address userWallet = msg.sender;\r\n        require(userWallet != address(0), \"ERROR: Is not allowed 0 address!\");\r\n        // Work\r\n        (uint256 amount, uint256 currentPeriod) = _claimOneUser(userWallet);\r\n        // Event\r\n        emit Claimed(userWallet, amount, currentPeriod);\r\n    }\r\n\r\n    function GetTimeForNextClaim() external override view isWhitelisted notPaused returns(uint256 time) {\r\n        WhitelistedData memory data = _addressToData[msg.sender];\r\n        if(block.timestamp \u003e= data.nextClaimTimestamp) {\r\n            time = 0;\r\n        } else {\r\n            time = data.nextClaimTimestamp - block.timestamp;\r\n        }\r\n        return time;\r\n    }\r\n\r\n    function GetCurrentTime() external view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n}"}}