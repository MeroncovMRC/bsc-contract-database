// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeERC20 {
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


contract SpinToEarn  {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    address public owner;
    address public poolToken;

    uint256 public tax = 0;
    uint256 public poolBalance;
    uint256[] public wagers = [5000, 10000, 20000, 30000, 50000, 100000];

    uint256 private constant decimal = 18;
    uint256 private constant winTimes = 12;

    mapping (uint256 => uint256) private times;
    mapping(address => uint) public userBalance;

    event Spin(address indexed spender, uint256 value);

    constructor(address _poolToken) {
        owner = msg.sender;
        poolToken = _poolToken;

        for(uint256 i = 0; i < wagers.length; i++) {
            times[wagers[i]] = 0;
        }
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action");
        _;
    }

    function balanceOf(address account) external view returns (uint256) {
        return userBalance[account];
    }

    function totalIFP() external view returns (uint256) {
        return IERC20(poolToken).balanceOf(address(this));
    }

    function getWagers() external view returns (uint256[] memory) {
        return wagers;
    }

    function setWagers(uint256[] memory _wagers) external onlyOwner() {
        wagers = _wagers;
        for(uint256 i = 0; i < _wagers.length; i++) {
            times[_wagers[i]] = 0;
        }
    }

    function resetCount() external onlyOwner() {
        for(uint256 i = 0; i < wagers.length; i++) {
            times[wagers[i]] = 0;
        }
    }

    function setTax(uint256 _tax) external onlyOwner() {
        tax = _tax;
    }

    function deposit(uint256 _amount) external {
        require(_amount > 0, "Deposit amount must be greater than 0");
        require(IERC20(poolToken).balanceOf(msg.sender) >= _amount, "Your balance must be greater than deposit amout");
        IERC20(poolToken).safeTransferFrom(msg.sender, address(this), _amount * 10 ** decimal);

        userBalance[msg.sender] += _amount;

        if (msg.sender == owner) {
            poolBalance += _amount;
        }
    }

    function withdraw() external {
        require(userBalance[msg.sender] > 0, "You do not have token");
        IERC20(poolToken).transfer(msg.sender, userBalance[msg.sender] * 10 ** decimal);

        poolBalance -= userBalance[msg.sender];
        userBalance[msg.sender] = 0;
    }

    function spin(uint256 _userWager, uint256[] calldata _animals) external returns (uint256) {
        uint256 totalWager = _userWager * _animals.length;
        require(userBalance[msg.sender] >= totalWager, "You do not have token");
        require(poolBalance > 0 && poolBalance >= totalWager, "Pool not enough token");
        require(_userWager > 0, "Please select wager");
        require(_animals.length > 0, "Please select animal");

        uint256 reward = 0;
        uint256 taxFee = 0;

        if (isNumberInArray(_userWager, wagers)) {
            times[_userWager] += _animals.length;
            if (times[_userWager] >= winTimes) {
                times[_userWager] = times[_userWager] - winTimes;
                reward = _userWager * 10;
                if (tax > 0) {
                    taxFee = reward * tax / 100;
                    reward -= taxFee;
                }
            }
        }

        userBalance[msg.sender] = userBalance[msg.sender] - totalWager + reward;
        poolBalance = poolBalance + totalWager - reward;
        userBalance[owner] = poolBalance;

        emit Spin(msg.sender, reward);

        return reward;
    }

    function isNumberInArray(uint256 number, uint256[] memory array) private pure returns (bool) {
        for (uint256 i = 0; i < array.length; i++) {
            if (array[i] == number) {
                return true;
            }
        }
        return false;
    }
}