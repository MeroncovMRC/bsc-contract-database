// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;


// owner
abstract contract Ownable {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, 'owner error');
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}


// MyEvent interface
interface IMyEvent {
    function userDepositEvent(uint256 turn, uint256 issue, address user, uint256 cardNFT, uint256 tokenAmount) external;
    function teamEarnTakeEvent(uint256 turn, uint256 issue, address teamEarn, uint256 earnAmount, uint256 priceEte, uint256 totalUsdt, uint256 canTakeTime) external;
}

// my event
contract MyEvent is IMyEvent, Ownable {

    mapping(address => uint256) public miningOf;


    constructor() {}

    event UserDeposit(uint256 mining, uint256 turn, uint256 issue, address user, uint256 cardNFT, uint256 tokenAmount);      // account deposit.
    event TeamEarnTake(uint256 mining, uint256 turn, uint256 issue, address teamEarn, uint256 earnAmount, uint256 priceEte, uint256 totalUsdt, uint256 canTakeTime); // team earn.


    function setMiningOf(address mining, uint256 v) public onlyOwner {
        require(mining != address(0), "0 address error");
        require(v != 0, "v is zero error");

        miningOf[mining] = v;
    }

    function userDepositEvent(uint256 turn, uint256 issue, address user, uint256 cardNFT, uint256 tokenAmount) public override {
        require(miningOf[msg.sender] > 0, 'zero error');

        emit UserDeposit(miningOf[msg.sender], turn, issue, user, cardNFT, tokenAmount);
    }

    function teamEarnTakeEvent(uint256 turn, uint256 issue, address teamEarn, uint256 earnAmount, uint256 priceEte, uint256 totalUsdt, uint256 canTakeTime) public override {
        require(miningOf[msg.sender] > 0, 'zero error');

        emit TeamEarnTake(miningOf[msg.sender], turn, issue, teamEarn, earnAmount, priceEte, totalUsdt, canTakeTime);
    }


}