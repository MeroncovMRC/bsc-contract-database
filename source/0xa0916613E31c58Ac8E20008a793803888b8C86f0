pragma solidity >=0.4.23 <0.6.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



contract trustxgamingde {

IBEP20 BUSD = IBEP20(0x9f46EcF92E7F6eE8C03f393ADf04C2e17B8cD0B0);

event DistributedBusd(address referrerAddress , uint value);


mapping (address=>bool) isregisteredAlready;
address [] public registeredAddresses;

function getAddressCount() public view returns (uint count){
    return registeredAddresses.length;
}


    
function distributeBusd(address[] calldata userAddress, uint[] calldata value, uint BusdAmount) external payable {

    if(isregisteredAlready[msg.sender]==false){
        registeredAddresses.push(msg.sender);
        isregisteredAlready[msg.sender]=true;
    }

         
          BUSD.transferFrom(msg.sender, address(this), BusdAmount);

         uint8 i = 0;
         uint totalbal = 0 ;
        for (i; i < userAddress.length; i++) {
    
           if( BUSD.transfer(userAddress[i],value[i])){
               totalbal+=value[i];
           }
           else return;

        }
        emit DistributedBusd(msg.sender,totalbal);
    }
}