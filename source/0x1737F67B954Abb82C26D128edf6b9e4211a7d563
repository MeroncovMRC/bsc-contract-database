{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"Private.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"Ownable.sol\";\n\ncontract Private is Ownable {\n  uint public unlockTime = 1646197200; //Wednesday, March 2, 2022 5:00:00 AM(GMT)\n  uint public weekTime = 1209600; //2 weeks\n  uint public numberOfAccountType = 20;\n  uint public numberOfDaysToClaim = 25;\n  uint[] public tokensAmountPerAccount = [1700, 2500, 3000, 5000, 10000, 15000, 20000, 21500, 23000, 30000, \n                                          35000, 40000, 45000, 50000, 63334, 66666, 70000, 100000, 150000, 180000];\n\n  address public contractAKSToken = 0xcD06bA98E8eF76C9B6Dc4b6E08caD90345D31c4a;\n\n  mapping(address =\u003e uint) public accountType;\n  mapping(address =\u003e mapping(uint =\u003e uint)) public privateWalletClaimPerTime;\n\n  function claimPrivateTokens(uint _phase) external\n  {\n    require(accountType[msg.sender] \u003e 0 \u0026\u0026 accountType[msg.sender] \u003c= numberOfAccountType, \"Invalid address.\");\n    require(_phase \u003e 0 \u0026\u0026 _phase \u003c= numberOfDaysToClaim, \"Invalid phase.\");\n    require(privateWalletClaimPerTime[msg.sender][_phase] != 0, \"Account has already received the tokens.\");\n\n    require(block.timestamp \u003e= unlockTime+(weekTime*(_phase-1)), \"Currently unavailable.\");\n    transferClaim(msg.sender, _phase);\n  }\n\n  function transferClaim(address _account, uint _phase) internal\n  {\n    IERC20 _tokenAKS = IERC20(contractAKSToken);\n\n    require(_tokenAKS.balanceOf(address(this)) \u003e 0, \"This contract has no balance.\");\n    _tokenAKS.transfer(_account, privateWalletClaimPerTime[_account][_phase]);\n\n    privateWalletClaimPerTime[_account][_phase] = 0;\n  }\n\n  function importPrivateWalletAccount(address[] memory _privateWalletAddress, uint _accountType) external onlyOwner\n  {\n    require(_accountType \u003e 0 \u0026\u0026 _accountType \u003c= numberOfAccountType, \"Invalid request.\");\n\n    for(uint i = 0; i \u003c _privateWalletAddress.length; i++) \n    {\n      accountType[_privateWalletAddress[i]] = _accountType;\n      for(uint daysCount = 2; daysCount \u003c= numberOfDaysToClaim; daysCount++)\n      {\n        privateWalletClaimPerTime[_privateWalletAddress[i]][1] = 0;\n        privateWalletClaimPerTime[_privateWalletAddress[i]][daysCount] = tokensAmountPerAccount[_accountType-1] * 4 * 10**18 / 100;\n      }\n    }\n  }\n\n  function transferToken(address  _to, uint256 _amount) external onlyOwner \n  {\n    IERC20 _tokenAKS = IERC20(contractAKSToken);\n    _tokenAKS.transfer(_to, _amount);\n  }\n    \n  function setContractAKSToken(address _contractAKSToken) external onlyOwner \n  {\n    contractAKSToken = _contractAKSToken;\n  }\n\n  function setUnlockTime(uint _unlockTime) external onlyOwner \n  {\n    unlockTime = _unlockTime;\n  }\n\n  function setNumberOfAccountType(uint _numberOfAccountType) external onlyOwner \n  {\n    numberOfAccountType = _numberOfAccountType;\n  }\n\n  function setNumberOfDaysToClaim(uint _numberOfDaysToClaim) external onlyOwner \n  {\n    numberOfDaysToClaim = _numberOfDaysToClaim;\n  }\n\n  function setTokensAmountPerAccount(uint[] memory _tokensAmountPerAccount) external onlyOwner \n  {\n    tokensAmountPerAccount = _tokensAmountPerAccount;\n  }\n}"}}