{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Address {\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n"},"IRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}"},"Konion.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * #KONION (KON)\r\n *\r\n * Market name: Konion Finance\r\n *\r\n *  \r\n **/\r\n\r\npragma solidity 0.8.7;\r\n\r\nimport \"./Address.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IFactory.sol\";\r\nimport \"./IRouter.sol\";\r\n\r\ncontract Konion is Context, Ownable, IERC20 {\r\n    using Address for address;\r\n    using Address for address payable;    \r\n    mapping (address =\u003e uint256) private _rOwned;\r\n    mapping (address =\u003e uint256) private _tOwned;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;    \r\n    mapping(address =\u003e bool) private _isBadActor;\r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n    mapping (address =\u003e bool) private _isExcluded;\r\n    address[] private _excluded;  \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 100000000000 * (10**5 * 10**9);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    string private _name = \"Konion\";\r\n    string private _symbol = \"KON\";\r\n    uint8 private _decimals = 9;\r\n    uint256 internal MAX_INT = 2**256 - 1;\r\n    struct feeRatesStruct {\r\n      uint256 taxFee;\r\n      uint256 marketingFee;\r\n      uint256 rewardsFee;\r\n      uint256 liquidityFee;\r\n      uint256 swapFee;\r\n      uint256 totFees;\r\n    }\r\n    \r\n    feeRatesStruct public buyFees = feeRatesStruct(\r\n     {taxFee: 2000,\r\n      marketingFee: 2000,\r\n      rewardsFee: 2000,\r\n      liquidityFee: 4000,\r\n      swapFee: 8000,\r\n      totFees: 1\r\n    });\r\n\r\n    feeRatesStruct public sellFees = feeRatesStruct(\r\n     {taxFee: 1432,\r\n      marketingFee: 1428,\r\n      rewardsFee: 2856,\r\n      liquidityFee: 4284,\r\n      swapFee: 8568,\r\n      totFees: 1\r\n    });\r\n\r\n    feeRatesStruct private appliedFees = buyFees;\r\n    feeRatesStruct private previousFees;\r\n\r\n    struct valuesFromGetValues{\r\n      uint256 rAmount;\r\n      uint256 rTransferAmount;\r\n      uint256 rFee;\r\n      uint256 rSwap;\r\n      uint256 tTransferAmount;\r\n      uint256 tFee;\r\n      uint256 tSwap;\r\n    }\r\n\r\n    address payable public marketingWallet = payable(0xf75C82fa1Ed31e46761D5242ED01eCaD2c5696bD);\r\n    address payable public rewardsWallet = payable(0xCbfaC395fd7CCd9aE6Dd642051d4803f9370954A);\r\n    address public deadAddress = address(0x000000000000000000000000000000000000dEaD); \r\n    address private deployerAddress = address(0x2Ee5291d7cd19c7d4938d94FeF29eD1196Af3566); \r\n    IRouter public pancakeRouter;\r\n    address public pancakePair;\r\n    bool internal inSwap;\r\n    bool public swapEnabled = true;\r\n    uint256 private minTokensToSwap = _tTotal/1000;\r\n    uint256 public maxTxAmount = _tTotal/200;\r\n    uint256 public maxWalletTokens = _tTotal/100;\r\n    event swapEnabledUpdated(bool enabled);\r\n    event distributeThresholdPass(uint256 number);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        \r\n\r\n        IRouter _pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pancakePair = IFactory(_pancakeRouter.factory())\r\n            .createPair(address(this), _pancakeRouter.WETH());\r\n        pancakeRouter = _pancakeRouter;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[rewardsWallet] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"BEP20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender]+addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"BEP20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFeesCharged() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        valuesFromGetValues memory s = _getValues(tAmount, false);\r\n        _rOwned[sender] -= s.rAmount;\r\n        _rTotal -= s.rAmount;\r\n        _tFeeTotal += tAmount;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, false);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] \u003e 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function excludeFromReward(address[] memory accounts) public onlyOwner() {\r\n        uint256 length = accounts.length;\r\n        for(uint256 i=0;i\u003clength;i++)\r\n        {\r\n        require(!_isExcluded[accounts[i]], \"Account is already excluded\");\r\n        if(_rOwned[accounts[i]] \u003e 0) {\r\n            _tOwned[accounts[i]] = tokenFromReflection(_rOwned[accounts[i]]);\r\n        }\r\n        _isExcluded[accounts[i]] = true;\r\n        _excluded.push(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n     function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal     = _rTotal-rFee;\r\n        _tFeeTotal  = _tFeeTotal+tFee;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee);\r\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rFee, to_return.rSwap) = _getRValues(to_return,tAmount, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\r\n        if(!takeFee) {\r\n          s.tTransferAmount = tAmount;\r\n          return s;\r\n        }\r\n        s.tFee = tAmount*appliedFees.totFees*appliedFees.taxFee/1000000;\r\n        s.tSwap = tAmount*appliedFees.totFees*appliedFees.swapFee/1000000;\r\n        s.tTransferAmount = tAmount-s.tFee-s.tSwap;\r\n        return s;\r\n    }\r\n\r\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256, uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount*currentRate;\r\n        if(!takeFee)\r\n        {\r\n            return (rAmount,rAmount,0,0);\r\n        }\r\n        uint256 rFee = s.tFee*currentRate;\r\n        uint256 rSwap = s.tSwap*currentRate;\r\n        uint256 rTransferAmount = rAmount-rFee-rSwap;\r\n        return (rAmount, rTransferAmount, rFee, rSwap);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        uint256 length = _excluded.length;    \r\n        for (uint256 i = 0; i \u003c length; i++) {\r\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\r\n            rSupply -=_rOwned[_excluded[i]];\r\n            tSupply -=_tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply \u003c _rTotal/_tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeSwapFees(uint256 rSwap, uint256 tSwap) private {\r\n\r\n        _rOwned[address(this)] +=rSwap;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] +=tSwap;\r\n    }\r\n      \r\n   function setMarketingWallet(address payable _address) external onlyOwner returns (bool){\r\n        marketingWallet = _address;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        return true;\r\n    }\r\n    \r\n    function setRewardsWallet(address payable _address) external onlyOwner returns (bool){\r\n        rewardsWallet = _address;\r\n        _isExcludedFromFee[rewardsWallet] = true;\r\n        return true;\r\n    }\r\n    \r\n    function setDeployerAddress(address payable _address) external onlyOwner returns (bool){\r\n        deployerAddress = _address;\r\n        _isExcludedFromFee[deployerAddress] = true;\r\n        return true;\r\n    }\r\n    \r\n    function setBuyFees(uint256 taxFee, uint256 marketingFee, uint256 rewardsFee, uint256 liquidityFee) external onlyOwner{\r\n        buyFees.taxFee = taxFee;\r\n        buyFees.marketingFee = marketingFee;\r\n        buyFees.rewardsFee = rewardsFee;\r\n        buyFees.liquidityFee = liquidityFee;\r\n        buyFees.swapFee = marketingFee+rewardsFee+liquidityFee;\r\n        require(buyFees.swapFee+buyFees.taxFee == 10000, \"sum of all percentages should be 10000\");\r\n    }\r\n    \r\n    function setSellFees(uint256 sellTaxFee, uint256 sellMarketingFee, uint256 sellRewardsFee, uint256 sellLiquidityFee) external onlyOwner{\r\n        sellFees.taxFee = sellTaxFee;\r\n        sellFees.marketingFee = sellMarketingFee;\r\n        sellFees.rewardsFee = sellRewardsFee;\r\n        sellFees.liquidityFee = sellLiquidityFee;\r\n        sellFees.swapFee = sellMarketingFee+sellRewardsFee+sellLiquidityFee;\r\n        require(sellFees.swapFee+sellFees.taxFee == 10000, \"sum of all percentages should be 10000\");\r\n    }\r\n    \r\n    function setTotalBuyFees(uint256 _totFees) external onlyOwner{\r\n        buyFees.totFees = _totFees;\r\n    }\r\n    \r\n    function setTotalSellFees(uint256 _totSellFees) external onlyOwner{\r\n        sellFees.totFees = _totSellFees;\r\n    }\r\n\r\n    function setSwapEnabled(bool _enabled) public onlyOwner {\r\n        swapEnabled = _enabled;\r\n        emit swapEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setNumTokensToSwap(uint256 amount) external onlyOwner{\r\n        minTokensToSwap = amount * 10**9;\r\n    }\r\n    \r\n    function setMaxTxAmount(uint256 amount) external onlyOwner{\r\n        maxTxAmount = amount * 10**9;\r\n    }\r\n    \r\n    function setMaxWalletAmount(uint256 amount) external onlyOwner{\r\n        maxWalletTokens = amount * 10**9;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBadActor[from] \u0026\u0026 !_isBadActor[to], \"Bots are not allowed\");\r\n        \r\n        if( to != address(pancakeRouter) \u0026\u0026 to != deadAddress \u0026\u0026 !_isExcludedFromFee[from] \u0026\u0026 !_isExcludedFromFee[to] ) {\r\n            require(amount \u003c= maxTxAmount, \u0027You are exceeding maxTxAmount\u0027);\r\n        }\r\n        \r\n        if( to != owner() \u0026\u0026\r\n            to != address(this) \u0026\u0026\r\n            to != pancakePair \u0026\u0026\r\n            to != marketingWallet \u0026\u0026\r\n            to != rewardsWallet \u0026\u0026 \r\n            to != deadAddress \u0026\u0026 \r\n            to != address(pancakeRouter) \u0026\u0026 \r\n            to != deployerAddress ){\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) \u003c= maxWalletTokens, \"Total Holding is currently limited, you can not hold that much.\");\r\n        }\r\n        \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance \u003e= minTokensToSwap;\r\n        if (\r\n            overMinTokenBalance \u0026\u0026\r\n            !inSwap \u0026\u0026\r\n            from != pancakePair \u0026\u0026\r\n            swapEnabled\r\n        ) {\r\n            emit distributeThresholdPass(contractTokenBalance);\r\n            contractTokenBalance = minTokensToSwap;\r\n            swapAndSendToFees(contractTokenBalance);\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        bool isSale = false;\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        } else\r\n        {\r\n            if(to == pancakePair){\r\n            isSale = true;\r\n            }\r\n        }\r\n             \r\n        _tokenTransfer(from,to,amount,takeFee,isSale);\r\n    }\r\n    \r\n    function swapAndSendToFees(uint256 tokens) private lockTheSwap {\r\n        uint256 tokensForLiquidity = tokens*appliedFees.liquidityFee/appliedFees.swapFee;\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForBNB(tokens - tokensForLiquidity/2);  \r\n        uint256 transferBalance = address(this).balance-initialBalance;\r\n        rewardsWallet.sendValue(transferBalance*appliedFees.rewardsFee/appliedFees.swapFee);\r\n        marketingWallet.sendValue(transferBalance*appliedFees.marketingFee/appliedFees.swapFee);\r\n        addLiquidity(tokensForLiquidity/2,address(this).balance);\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n\r\n        // generate the pancakeswap pair path of token -\u003e wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        if(allowance(address(this), address(pancakeRouter)) \u003c tokenAmount) {\r\n          _approve(address(this), address(pancakeRouter), ~uint256(0));\r\n        }\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        _approve(address(this), address(pancakeRouter), tokenAmount);\r\n        pancakeRouter.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // Slippage is unavoidable\r\n            0, // Slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee, bool isSale) private {\r\n        if(takeFee){\r\n            if(isSale)\r\n            {\r\n                appliedFees = sellFees;\r\n            }\r\n            else\r\n            {\r\n                appliedFees = buyFees;\r\n            }\r\n        }\r\n        \r\n        valuesFromGetValues memory s = _getValues(amount, takeFee);\r\n\r\n        if (_isExcluded[sender]) {\r\n            _tOwned[sender] -=amount;\r\n        } \r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] += s.tTransferAmount;\r\n        }\r\n        _rOwned[sender] -= s.rAmount;\r\n        _rOwned[recipient] +=s.rTransferAmount;\r\n        \r\n        if(takeFee)\r\n            {\r\n             _takeSwapFees(s.rSwap,s.tSwap);\r\n             _reflectFee(s.rFee, s.tFee);\r\n             emit Transfer(sender, address(this), s.tSwap);\r\n            }\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n    }\r\n\r\n    function rescueBNBFromContract() external onlyOwner {\r\n        address payable _owner = payable(msg.sender);\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function manualSwap() external onlyOwner lockTheSwap {\r\n        uint256 tokensToSwap = balanceOf(address(this));\r\n        swapTokensForBNB(tokensToSwap);\r\n    }\r\n    \r\n    function manualSend() external onlyOwner{\r\n        swapAndSendToFees(balanceOf(address(this)));\r\n    }\r\n\r\n    function badActorDefenseMechanism(address account, bool isBadActor) external onlyOwner{\r\n        _isBadActor[account] = isBadActor;\r\n    }\r\n    \r\n    function checkBadActor(address account) public view returns(bool){\r\n        return _isBadActor[account];\r\n    }\r\n    \r\n    function setRouterAddress(address newRouter) external onlyOwner {\r\n        require(address(pancakeRouter) != newRouter, \u0027Router already set\u0027);\r\n        //give the option to change the router down the line \r\n        IRouter _newRouter = IRouter(newRouter);\r\n        address get_pair = IFactory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        //checks if pair already exists\r\n        if (get_pair == address(0)) {\r\n            pancakePair = IFactory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            pancakePair = get_pair;\r\n        }\r\n        pancakeRouter = _newRouter;\r\n    }\r\n    \r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\t\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"}}