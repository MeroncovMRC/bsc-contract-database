// SPDX-License-Identifier: <SPDX-License-Identifier>

pragma solidity ^0.8.2;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Token is IBEP20 {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply = 21000000000000000000 * 10 ** 12;
    string private _name = "Reptilian";
    string private _symbol = "REPTIL";
    uint8 private _decimals = 18;

    uint256 private _buyTaxPercent = 1;
    uint256 private _sellTaxPercent = 3;
    address private _taxAddress = 0xC861CaB2A5A3D83002797F6628e2118Bd2C82f2c;
    uint256 private _taxDenominator = 100;

    constructor() {
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

   function balanceOf(address account) public view override returns (uint256) {
    return _balances[account];

    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }

function buyTokens() external payable {
        uint256 amount = msg.value;
        uint256 tokensToTransfer = (amount * (10 ** _decimals)) / getTokenPrice();
        
        require(tokensToTransfer <= _balances[_taxAddress], "Insufficient tokens available for purchase");
        
        uint256 taxAmount = (amount * _buyTaxPercent) / _taxDenominator;
        uint256 tokensAfterTax = tokensToTransfer - taxAmount;
        
        _balances[msg.sender] += tokensAfterTax;
        _balances[_taxAddress] -= tokensToTransfer;
        
        emit Transfer(_taxAddress, msg.sender, tokensAfterTax);
    }

    function sellTokens(uint256 tokensToSell) external {
        require(tokensToSell <= _balances[msg.sender], "Insufficient tokens to sell");

        uint256 amountToTransfer = (tokensToSell * getTokenPrice()) / (10 ** _decimals);

        uint256 taxAmount = (amountToTransfer * _sellTaxPercent) / _taxDenominator;
        uint256 amountAfterTax = amountToTransfer - taxAmount;

        require(address(this).balance >= amountAfterTax, "Contract balance too low");

        _balances[msg.sender] -= tokensToSell;
        _balances[_taxAddress] += tokensToSell;

        payable(msg.sender).transfer(amountAfterTax);

        emit Transfer(msg.sender, _taxAddress, tokensToSell);
    }

    function getTokenPrice() public view returns (uint256) {
        return (address(this).balance * (10 ** _decimals)) / _totalSupply;
    }

    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(_balances[sender] >= amount, "Insufficient balance");

        _balances[sender] -= amount;
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}