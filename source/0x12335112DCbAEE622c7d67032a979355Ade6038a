// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

contract ClashOfClans {
    string public name = "ClashOfClans Token";
    string public symbol = "COC";
    uint8 public decimals = 18;
    uint256 public totalSupply = 100000000000000 * 10**uint256(decimals);

    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowances;
    
    address public owner;
    uint256 public burnPercent = 94; // Percentuale da bruciare
    uint256 public ownerPercent = 5; // Percentuale per l'owner
    uint256 public feePercent = 5; // Percentuale di fee sullo scambio
    address public burnAddress = 0x000000000000000000000000000000000000dEaD;
    
    address[] private feeAddresses; // Indirizzi per la distribuzione delle fee

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        owner = msg.sender;

        
        uint256 ownerAmount = totalSupply * ownerPercent / 100;

        balances[owner] = ownerAmount;
        emit Transfer(address(0), owner, ownerAmount);

        uint256 burnAmount = ownerAmount * burnPercent / 100;
        totalSupply -= burnAmount;

        balances[burnAddress] += burnAmount;
        emit Transfer(owner, burnAddress, burnAmount);
    }


    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _transfer(sender, recipient, amount);

        uint256 currentAllowance = allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");

        allowances[sender][msg.sender] = currentAllowance - amount; // Aggiorna l'allowance

        emit Approval(sender, msg.sender, allowances[sender][msg.sender]); // Emetti l'evento di Approval aggiornato

        return true;
    }

    function burn(uint256 amount) public {
        require(amount > 0, "Amount must be greater than zero");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;
        totalSupply -= amount;

        balances[burnAddress] += amount;

        emit Transfer(msg.sender, burnAddress, amount);
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0), "ERC20: approve to the zero address");

        allowances[msg.sender][spender] += addedValue;
        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);

        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");

        uint256 feeAmount = amount * feePercent / 100;
        uint256 transferAmount = amount - feeAmount;

        balances[sender] = senderBalance - amount;
        balances[recipient] += transferAmount;

        emit Transfer(sender, recipient, transferAmount);

        // Distribuzione delle fee
        if (feeAddresses.length > 0) {
            uint256 feePerAddress = feeAmount / feeAddresses.length;

            for (uint256 i = 0; i < feeAddresses.length; i++) {
                address feeAddress = feeAddresses[i];
                balances[feeAddress] += feePerAddress;
                emit Transfer(sender, feeAddress, feePerAddress);
            }
        }
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        require(spender != address(0), "ERC20: approve to the zero address");

        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);

        increaseAllowance(spender, amount); // Aggiungi automaticamente un aumento dell'allowance

        return true;
    }

    function addFeeAddress(address feeAddress) public {
        require(msg.sender == owner, "Only owner can use this function");
        require(feeAddress != address(0), "Invalid fee address");

        feeAddresses.push(feeAddress);
    }

    function removeFeeAddress(address feeAddress) public {
        require(msg.sender == owner, "Only owner can use this function");

        for (uint256 i = 0; i < feeAddresses.length; i++) {
            if (feeAddresses[i] == feeAddress) {
                feeAddresses[i] = feeAddresses[feeAddresses.length - 1];
                feeAddresses.pop();
                break;
            }
        }
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(owner, address(0));
        owner = address(0);
    }

    modifier onlyOwner() {
    require(false, "Only owner can perform this action");
    _;
    }
}