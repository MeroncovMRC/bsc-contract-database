
// File: contracts/SamuraiLegendsWithdrawing/SamuraiLegendsWithdrawing.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./Generatable.sol";
import "./Recoverable.sol";
import "./Array.sol";


struct Unlock {
    uint32 createdAt;
    uint112 vestedAmount;
    uint112 claimedAmount;
    uint fullAmount;
}

interface IMigration {
    function rsunDepositedTotal() external view returns (uint);
    function infDepositedTotal() external view returns (uint);
    function rsunBalances(address) external view returns (uint);
    function infBalances(address) external view returns (uint);
}

/**
 * @title Contract that adds SMG withdrawing functionalities.
 * @author Leo
 */
contract SamuraiLegendsWithdrawing is Generatable, Recoverable {
    using Array for uint[];

    IERC20 immutable private smg;
    IMigration immutable private migration;

    mapping(address => uint) public userUnlockBalance;
    mapping(address => uint[]) private _userUnlockIds;
    mapping(address => mapping(uint => Unlock)) private _unlocks;

    uint112 public totalUnlockBalance;
    int104 private _toDeposit;
    uint32 immutable public vestingPeriod;
    uint8 immutable public initialUnlock;

    constructor(IERC20 _smg, IMigration _migration, uint32 _vestingPeriod, uint8 _initialUnlock) {
        smg = _smg;
        migration = _migration;
        vestingPeriod = _vestingPeriod;
        initialUnlock = _initialUnlock;
    }

    /**
     * @notice Computes SMG tokens to be deposited by an Admin.
     * @return toDeposit Amount of SMG tokens to be deposited by an Admin.
     */
    function toDeposit() external view returns (int) {
        return int((getSMG(migration.rsunDepositedTotal(), migration.infDepositedTotal()) * initialUnlock) / 100) + _toDeposit - int(smg.balanceOf(address(this)));
    }

    /**
     * @notice Computes SMG balance from the migrated RSUN of a user.
     * Current ratio is: 1 SMG = 100 RSUN.
     * @return smgAmount Amount of SMG computed from RSUN.
     */
    function getSMGFromRSUN(uint amount) internal pure returns (uint) {
        return (amount * 10) / 1000;
    }

    /**
     * @notice Computes SMG balance from the migrated INF of a user.
     * Current ratio is: 1 SMG = 12.5 INF.
     * @return smgAmount Amount of SMG computed from INF.
     */
    function getSMGFromINF(uint amount) internal pure returns (uint) {
        return (amount * 10) / 125;
    }

    /**
     * @notice Computes the sum of SMG from rsun and inf amounts.
     * @param rsunAmount Amount of RSUN to convert to SMG.
     * @param infAmount Amount of INF to convert to SMG.
     * @return smgAmount Amount of SMG computed from RSUN and INF.
     */
    function getSMG(uint rsunAmount, uint infAmount) internal pure returns (uint) {
        return getSMGFromRSUN(rsunAmount) + getSMGFromINF(infAmount);
    }

    /**
     * @notice Returns user unlock ids array.
     * @param sender User address to get the ids from.
     * @return userUnlockIds Array of user unlock ids.
     */
    function userUnlockIds(address sender) public view returns (uint[] memory) {
        return _userUnlockIds[sender];
    }

    /**
     * @notice Returns user unlock by index.
     * @param sender User address to get the unlock object from.
     * @param index User unlock index.
     * @return userUnlock User unlock object.
     */
    function unlocks(address sender, uint index) public view returns (Unlock memory) {
        uint id = _userUnlockIds[sender][index];

        return _unlocks[sender][id];
    }

    /**
     * @notice Creates a new unlock from current rsunBalances and infBalances of a user.
     * The user will get 5% and 95% linearly vested for 60 days for every new unlock.
     */
    function unlock() external {
        uint amount = getSMG(migration.rsunBalances(msg.sender), migration.infBalances(msg.sender)) - userUnlockBalance[msg.sender];
        require(amount != 0, "No amount to unlock.");

        uint claimableAmount = (amount * initialUnlock) / 100;
        uint vestedAmount = amount - claimableAmount;

        Unlock memory userUnlock = Unlock({
            createdAt: uint32(block.timestamp),
            vestedAmount: uint112(vestedAmount),
            claimedAmount: 0,
            fullAmount: amount
        });

        uint id = unique();
        _userUnlockIds[msg.sender].push(id);
        _unlocks[msg.sender][id] = userUnlock;

        /**
         * @notice Updates user and total unlock balances trackers.
         */
        userUnlockBalance[msg.sender] += amount;
        totalUnlockBalance += uint112(amount);

        _toDeposit -= int104(uint104(claimableAmount));
        _toDeposit += int104(uint104(vestedAmount));

        smg.transfer(msg.sender, claimableAmount);
        
        emit UnlockCreated(msg.sender, amount, block.timestamp);
    }

    /**
     * @notice Computes the passed period and claimable amount of a user unlock object.
    * @param sender User address to get claimable amount info from.
     * @param index User unlock index.
     * @return passedPeriod Passed vesting period of an unlock object.
     * @return claimableAmount Claimable amount of an unlock object.
     */
    function getClaimableAmount(address sender, uint index) public view returns (uint, uint) {
        uint id = _userUnlockIds[sender][index];
        Unlock storage userUnlock = _unlocks[sender][id];
        uint passedPeriod = min(block.timestamp - userUnlock.createdAt, vestingPeriod);
        uint claimableAmount = (passedPeriod * userUnlock.vestedAmount) / vestingPeriod - userUnlock.claimedAmount;

        return (passedPeriod, claimableAmount);
    }

    /**
     * @notice Lets a user claim an amount according to the linear vesting.
     * @param index Unlock index to withdraw from.
     */
    function claim(uint index) external {
        uint id = _userUnlockIds[msg.sender][index];
        Unlock storage userUnlock = _unlocks[msg.sender][id];

        (uint passedPeriod, uint claimableAmount) = getClaimableAmount(msg.sender, index);

        /**
         * @notice Does a full withdraw since vesting period already finished.
         */
        if (passedPeriod == vestingPeriod) {
            _userUnlockIds[msg.sender].remove(index);
            delete _unlocks[msg.sender][id];

            emit UnlockFinished(msg.sender, claimableAmount, block.timestamp);
        } 
        /**
         * @notice Does a partial withdraw since vesting period didn't finish yet.
         */
        else {
            userUnlock.claimedAmount += uint112(claimableAmount);

            emit UnlockUpdated(msg.sender, claimableAmount, block.timestamp);
        }

        _toDeposit -= int104(uint104(claimableAmount));

        smg.transfer(msg.sender, claimableAmount);

        emit Claimed(msg.sender, claimableAmount);
    }

    /**
     * @dev Returns the smallest of two unsigned numbers.
     */
    function min(uint a, uint b) internal pure returns (uint) {
        return a < b ? a : b;
    }

    event UnlockCreated(address indexed sender, uint fullAmount, uint createdAt);
    event UnlockUpdated(address indexed sender, uint claimedAmount, uint updatedAt);
    event UnlockFinished(address indexed sender, uint claimedAmount, uint finishedAt);
    event Claimed(address indexed sender, uint amount);
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: contracts/SamuraiLegendsWithdrawing/Generatable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
@title Generatable
@author Leo
@notice Generates a unique id
*/
contract Generatable {
    uint private id;

    /**
    @notice Generates a unique id
    @return id The newly generated id
    */
    function unique() internal returns (uint) {
        id += 1;
        return id;
    }
}

// File: contracts/SamuraiLegendsWithdrawing/Recoverable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
@title Recoverable
@author Leo
@notice Recovers stucked BNB or ERC20 tokens
@dev You can inhertit from this contract to support recovering stucked tokens or BNB
*/
contract Recoverable is Ownable {
    /**
     * @notice Recovers stucked BNB in the contract
     */
    function recoverBNB(uint amount) external onlyOwner {
        require(address(this).balance >= amount, "invalid input amount");
        (bool success, ) = payable(owner()).call{value: amount}("");
        require(success, "recover failed");
    }
    
    /**
    @notice Recovers stucked ERC20 token in the contract
    @param token An ERC20 token address
    */
    function recoverERC20(address token, uint amount) external onlyOwner {
        IERC20 erc20 = IERC20(token);
        require(erc20.balanceOf(address(this)) >= amount, "Invalid input amount.");

        erc20.transfer(owner(), amount);
    }
}

// File: contracts/SamuraiLegendsWithdrawing/Array.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
@title Array
@author Leo
@notice Adds utility functions to an array
*/
library Array {
    /**
    @notice Removes an array item by index
    @dev This is a O(1) time-complexity algorithm without persiting the order
    @param array A reference value to the array
    @param index An item index to be removed 
    */
    function remove(uint[] storage array, uint index) internal {
        require(index < array.length, "Index out of bound.");
        array[index] = array[array.length - 1];
        array.pop();
    }

    /**
    @notice Removes an array item by index
    @dev This is a O(1) time-complexity algorithm without persiting the order
    @param array A reference value to the array
    @param index An item index to be removed 
    */
    function remove(address[] storage array, uint index) internal {
        require(index < array.length, "Index out of bound.");
        array[index] = array[array.length - 1];
        array.pop();
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

