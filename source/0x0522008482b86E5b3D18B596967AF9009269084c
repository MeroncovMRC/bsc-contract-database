pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address to, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract WithdrawableContract {
    address payable public deployer;
    address public usdtAddress;
    IERC20 public usdtToken;

    constructor(address _usdtAddress) {
        deployer = payable(msg.sender);
        usdtAddress = _usdtAddress;
        usdtToken = IERC20(usdtAddress);
    }

    receive() external payable {}

    function withdraw() external {
        require(msg.sender == deployer, "Only the deployer can withdraw funds");
        uint256 contractBalance = address(this).balance;
        require(contractBalance > 0, "Contract balance is zero");
        deployer.transfer(contractBalance);
    }

    function withdrawUSDT(uint256 amount) external {
        require(msg.sender == deployer, "Only the deployer can withdraw USDT");
        uint256 contractUSDTBalance = usdtToken.balanceOf(address(this));
        require(contractUSDTBalance >= amount, "Insufficient USDT balance");
        usdtToken.transfer(deployer, amount);
    }

    function depositUSDT(uint256 amount) external {
        usdtToken.transferFrom(msg.sender, address(this), amount);
    }
}