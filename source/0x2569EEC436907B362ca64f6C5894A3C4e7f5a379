{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"},"PlanetaryFeeReceiver.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./IERC20.sol\";\nimport \"./IUniswapV2Router02.sol\";\n\ninterface IDaylight is IERC20 {\n    function burn(uint256 amount) external;\n}\n\ninterface IApollo is IERC20 {\n    function sell(uint256 tokenAmount) external returns (uint256);\n}\n\ncontract FeeReceiver {\n\n    // LP address\n    address public constant WETHLP = 0xB4F7DE1D7511A48323f34Af2Bb114E2cb34cBFe4;\n    address public constant DAYLLP = 0xA5d078Ac7ddf5aDa811af4F72c7534BBA00351D9;\n\n    // constants\n    address public constant router = 0xb34DA672837aFe372eceF419b25a357A36f59F6f;\n    IDaylight public constant daylight = IDaylight(0x62529D7dE8293217C8F74d60c8C0F6481DE47f0E);\n    IApollo public constant apollo = IApollo(0x32a05625d2A25054479d0c5d661857147c34483D);\n    address public constant treasury = 0x4A3Be597418a12411F31C94cc7bCAD136Af2E242;\n    address public constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n\n\n    function trigger() external {\n\n        // fetch LP Balance\n        uint bal = IERC20(WETHLP).balanceOf(address(this));\n        if (bal \u003e 0) {\n\n            // approve LP for router\n            IERC20(WETHLP).approve(router, bal);\n\n            // remove LP\n            IUniswapV2Router02(router).removeLiquidityETHSupportingFeeOnTransferTokens(\n                address(apollo), bal, 1, 1, address(this), block.timestamp + 100\n            );\n\n            // send BNB to treasury\n            (bool s,) = payable(treasury).call{value: address(this).balance}(\"\");\n            require(s);\n\n            // sell Apollo received\n            apollo.sell(apollo.balanceOf(address(this)));\n\n            // buy back and burn DAYL with BUSD balance\n            uint busdBal = IERC20(BUSD).balanceOf(address(this));\n\n            // approve router to take BUSD Balance\n            IERC20(BUSD).approve(router, busdBal);\n\n            // define swap path\n            address[] memory path = new address[](2);\n            path[0] = BUSD;\n            path[1] = address(daylight);\n\n            // swap BUSD for daylight\n            IUniswapV2Router02(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                busdBal,\n                1,\n                path,\n                address(this),\n                block.timestamp + 10\n            );\n\n            // burn daylight\n            daylight.burn(daylight.balanceOf(address(this)));\n\n            // save memory\n            delete path;\n\n\n        }\n\n        // fetch LP Balance\n        uint bal2 = IERC20(DAYLLP).balanceOf(address(this));\n        if (bal2 \u003e 0) {\n\n            // approve LP for router\n            IERC20(DAYLLP).approve(router, bal2);\n\n            // remove LP\n            IUniswapV2Router02(router).removeLiquidity(\n                address(apollo),\n                address(daylight),\n                bal2,\n                1,\n                1,\n                address(this),\n                block.timestamp + 100\n            );\n\n            // send DAYL to treasury\n            daylight.transfer(treasury, daylight.balanceOf(address(this)));\n\n            // sell Apollo received\n            apollo.sell(apollo.balanceOf(address(this)));\n\n            // buy back and burn DAYL with BUSD balance\n            uint busdBal = IERC20(BUSD).balanceOf(address(this));\n\n            // approve router to take BUSD Balance\n            IERC20(BUSD).approve(router, busdBal);\n\n            // define swap path\n            address[] memory path = new address[](2);\n            path[0] = BUSD;\n            path[1] = address(daylight);\n\n            // swap BUSD for daylight\n            IUniswapV2Router02(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                busdBal,\n                1,\n                path,\n                address(this),\n                block.timestamp + 10\n            );\n\n            // burn daylight\n            daylight.burn(daylight.balanceOf(address(this)));\n\n            // save memory\n            delete path;\n\n        }\n    }\n\n    receive() external payable {}\n\n}"}}