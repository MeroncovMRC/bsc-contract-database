
// File: /contracts/TaurusPlan.sol
//SPDX-License-Identifier: SimPL-2.0
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";

contract TaurusPlan is Ownable {
    struct AssetPackageInfo {
        uint256 birthday;
        uint256 amount;
        uint256 release;
        uint256 waitWithdrawn;
        uint256 withdrawn;
        bool state;
    }

    struct UserInfo {
        address referrer;
        address[] referrals;
        uint256 amount;
        uint256 teamAmount;
        uint256 AssetPackagePositions;
    }

    struct ReferrerSearch {
        uint8 currentReferrerLevel;
        uint8 baseSalesLevel;
        uint8 currentLevelDiff;
        uint256 levelDiffAmountPerLevel;
        uint256 currentReferrerBoost;
    }


    mapping(address => UserInfo) public Users;
    mapping(address => AssetPackageInfo[]) public AssetPackage;
    uint256 public constant MAX_SEARCH_DEPTH = 50;
    uint256 public constant DECIMALS = 10 ** 18 / 100;//减少100倍
    uint256 public constant PRECISION = 100;
    uint256 public constant TIME_UNIT = 5 minutes;
    uint256[] public assetPackageAmount = [100 * DECIMALS, 500 * DECIMALS, 1000 * DECIMALS, 3000 * DECIMALS, 5000 * DECIMALS, 10000 * DECIMALS];
    uint256[] public levelTeamAmount = [10000 * DECIMALS, 30000 * DECIMALS, 100000 * DECIMALS, 200000 * DECIMALS, 500000 * DECIMALS];
    uint256[] refferrerBoost = [30,20];
    address public USDTAddr = address(0x55d398326f99059fF775485246999027B3197955);
    address public routerAddress = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    address public uniswapV2Factory = address(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);
    address public LKYSAddr;
    address public TAUAddr;
    uint256 public TAUTokenLiquidityMaxNum = 100000 * DECIMALS;
    uint256 public TAUTokenLiquidityNum;
    IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);
    address public manager;
    address public secureAddr = address(0x759694132d34Df7C2d43c59f1d6557C598C83F97);

    constructor(
        address _LKYSAddr,
        address _TAUAddr
    ) {
        LKYSAddr = address(_LKYSAddr);
        TAUAddr = address(_TAUAddr);
        manager = owner();
    }

    function setManager(address Addr) public onlyOwner {
        manager = Addr;
    }

    function invest(
        uint256 _AssetPackageNum,
        address referrer
    ) public {
        require(msg.sender != owner(),"[TaurusPlan] woner do not operate");
        uint256 amount = assetPackageAmount[_AssetPackageNum];
        require(amount > 0, "[TaurusPlan] Asset package does not exist");
        require(IERC20(USDTAddr).allowance(msg.sender, address(this)) >= amount, "[TaurusPlan] Insufficient USDT allowance");
        if(Users[msg.sender].referrer == address(0)){
            require(Users[referrer].referrer != address(0) || owner() == referrer, "[TaurusPlan] Invalid referrer!");
            Users[msg.sender].referrer = referrer;
            Users[referrer].referrals.push(msg.sender);
        }else{
            referrer = Users[msg.sender].referrer;
        }

        IERC20(USDTAddr).transferFrom(msg.sender, address(this), amount);


        AssetPackage[msg.sender].push(AssetPackageInfo({
        birthday: block.timestamp,
        amount: amount * 2,
        release: amount / PRECISION,
        waitWithdrawn: 0,
        withdrawn: 0,
        state: true
        }));


        if(TAUTokenLiquidityNum < TAUTokenLiquidityMaxNum){
            uint256 liquidityAmount = amount * 5 / PRECISION;
            if(liquidityAmount > (TAUTokenLiquidityMaxNum - TAUTokenLiquidityNum)){
                liquidityAmount = TAUTokenLiquidityMaxNum - TAUTokenLiquidityNum;
            }
            addLiquidity(liquidityAmount,liquidityAmount);
            TAUTokenLiquidityMaxNum += liquidityAmount;
        }

        updateReferrerInfo(referrer,amount);


        address referrerAddr = referrer;
        for(uint256 i = 0; i < MAX_SEARCH_DEPTH; i++){
            if(referrerAddr == owner()){
                break;
            }

            Users[referrerAddr].teamAmount += amount;
            referrerAddr = Users[referrerAddr].referrer;
        }

        Users[msg.sender].amount += amount;
    }


    function getReferralsArr(
        address Addr
    ) public view returns(address[] memory, uint256) {
        return (Users[Addr].referrals, Users[Addr].referrals.length);
    }


    function getAssetPackageInfoArr(
        address Addr,
        uint256 cursor,
        uint256 size
    ) public view returns(AssetPackageInfo[] memory, uint256) {
        uint256 length = size;
        uint256 arrlength = AssetPackage[Addr].length;
        if(cursor + size > arrlength){
            length = arrlength - cursor;
        }
        AssetPackageInfo[] memory arrAssetPackageInfo = new AssetPackageInfo[](length);
        for (uint256 i = 0; i < length; ++i) {
            arrAssetPackageInfo[i] = AssetPackage[Addr][i + cursor];
        }
        return (arrAssetPackageInfo, cursor + length);
    }

    function addLiquidity(
        uint256 amountUSDT,
        uint256 amountTAU
    ) private {
        require(IERC20(USDTAddr).balanceOf(address(this)) >= amountUSDT, "[TaurusPlan] Insufficient number of USDT Tokens");
        require(IERC20(TAUAddr).balanceOf(address(this)) >= amountTAU, "[TaurusPlan] Insufficient number of TAU Tokens");
        IERC20(USDTAddr).approve(routerAddress, amountUSDT);
        IERC20(TAUAddr).approve(routerAddress, amountTAU);
        IUniswapV2Router02(routerAddress).addLiquidity(
            USDTAddr,
            TAUAddr,
            amountUSDT,
            amountTAU,
            0,
            0,
            manager,
            block.timestamp
        );
    }


    function updateReferrerInfo(
        address referrer,
        uint256 amount
    ) private {
        address referrerAddr = referrer;
        uint256 AssetPackageNum;
        uint256 j;
        ReferrerSearch memory search;
        search.baseSalesLevel = 0;
        search.levelDiffAmountPerLevel = 8;
        uint256 inProduction;
        uint256 dayPassed;
        uint256 reward;
        uint256 release;
        for(uint256 i = 0; i < MAX_SEARCH_DEPTH; i++){
            if(referrerAddr == owner() || search.baseSalesLevel == 6){
                break;
            }
            AssetPackageNum = AssetPackage[referrerAddr].length;
            inProduction = 0;
            if(AssetPackageNum > Users[referrerAddr].AssetPackagePositions){
                for(j = Users[referrerAddr].AssetPackagePositions; j < AssetPackageNum; j++){
                    AssetPackageInfo memory ap = AssetPackage[referrerAddr][j];
                    dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;
                    reward = dayPassed * ap.release;
                    if ((reward + ap.waitWithdrawn + ap.withdrawn) < ap.amount){
                        inProduction += 1;
                    }
                }

                if(i == 0 || i == 1){
                    settlementAssetPackage(referrerAddr);
                    release = amount / PRECISION * refferrerBoost[i] / PRECISION / inProduction;
                    for(j = Users[referrerAddr].AssetPackagePositions; j < AssetPackageNum; j++){
                        AssetPackageInfo storage ap = AssetPackage[referrerAddr][j];
                        dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;
                        reward = dayPassed * ap.release;
                        if ((reward + ap.waitWithdrawn + ap.withdrawn) < ap.amount){
                            ap.release += release;
                        }
                    }
                }

                search.currentReferrerLevel = getLevel(referrerAddr);
                if(search.currentReferrerLevel > search.baseSalesLevel){
                    search.currentLevelDiff = search.currentReferrerLevel - search.baseSalesLevel;
                    search.baseSalesLevel = search.currentReferrerLevel;
                    search.currentReferrerBoost = search.currentLevelDiff * search.levelDiffAmountPerLevel;
                    if(i > 1){
                        settlementAssetPackage(referrerAddr);
                    }
                    release = amount / PRECISION * search.currentReferrerBoost / PRECISION / inProduction;
                    for(j = Users[referrerAddr].AssetPackagePositions; j < AssetPackageNum; j++){
                        AssetPackageInfo storage ap = AssetPackage[referrerAddr][j];
                        dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;
                        reward = dayPassed * ap.release;
                        if ((reward + ap.waitWithdrawn + ap.withdrawn) < ap.amount){
                            ap.release += release;
                        }
                    }
                }
            }
            referrerAddr = Users[referrerAddr].referrer;
        }
    }


    function settlementAssetPackage(
        address Addr
    ) private {
        AssetPackageInfo[] storage assetPackageArr = AssetPackage[Addr];
        if(assetPackageArr.length > 0){
            for(uint256 i = Users[Addr].AssetPackagePositions; i < assetPackageArr.length; i++){
                AssetPackageInfo storage ap = assetPackageArr[i];
                if((ap.waitWithdrawn + ap.withdrawn) < ap.amount){
                    uint256 dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;
                    uint256 reward = dayPassed * ap.release;
                    if ((reward + ap.waitWithdrawn + ap.withdrawn) > ap.amount){
                        reward = ap.amount - (ap.waitWithdrawn + ap.withdrawn);
                    }
                    ap.waitWithdrawn += reward;
                    ap.birthday += dayPassed * TIME_UNIT;
                }
            }
        }
    }


    function withdrawal() public {
        AssetPackageInfo[] storage assetPackageArr = AssetPackage[msg.sender];
        bool record = true;
        uint256 amount;
        if(assetPackageArr.length > 0){
            for(uint256 i = Users[msg.sender].AssetPackagePositions; i < assetPackageArr.length; i++){
                AssetPackageInfo storage ap = assetPackageArr[i];
                if(record){
                    if(ap.withdrawn == ap.amount){
                        record = true;
                    }else{
                        record = false;
                        if(Users[msg.sender].AssetPackagePositions != i){
                            Users[msg.sender].AssetPackagePositions = i;
                        }
                    }
                }

                if((ap.waitWithdrawn + ap.withdrawn) < ap.amount){
                    uint256 dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;
                    uint256 reward = dayPassed * ap.release;
                    if ((reward + ap.waitWithdrawn + ap.withdrawn) > ap.amount){
                        reward = ap.amount - (ap.waitWithdrawn + ap.withdrawn);
                        ap.state = false;
                    }
                    ap.birthday += dayPassed * TIME_UNIT;
                    amount += reward + ap.waitWithdrawn;
                    ap.waitWithdrawn = 0;
                    ap.withdrawn += amount;
                }
            }
        }
        require(amount > 0, "[TaurusPlan] Lack of withdrawal amount");
        uint256 lkysAmount = getLKYSAmount(amount);
        require(IERC20(LKYSAddr).balanceOf(address(this)) >= lkysAmount, "[TaurusPlan] Insufficient number of LKYS Tokens");
        IERC20(LKYSAddr).transfer(msg.sender, lkysAmount);
    }


    function getWithdrawalAmount(
        address Addr
    ) public view returns (uint256, uint256){
        AssetPackageInfo[] memory assetPackageArr = AssetPackage[Addr];
        uint256 amount;
        uint256 dayPassed;
        uint256 reward;
        if(assetPackageArr.length > Users[Addr].AssetPackagePositions){
            for(uint256 i = Users[Addr].AssetPackagePositions; i < assetPackageArr.length; i++){
                AssetPackageInfo memory ap = assetPackageArr[i];
                dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;
                reward = dayPassed * ap.release;
                if ((reward + ap.waitWithdrawn + ap.withdrawn) > ap.amount){
                    reward = ap.amount - (ap.waitWithdrawn + ap.withdrawn);
                }
                amount += reward + ap.waitWithdrawn;
            }
        }
        if(amount > 0){
            uint256 lkysAmount = getLKYSAmount(amount);
            return (amount, lkysAmount);
        }else{
            return (0, 0);
        }

    }


    function getLevel(
        address Addr
    ) public view returns (uint8){
        UserInfo memory user = Users[Addr];
        uint256 num = user.referrals.length;
        uint256 totalAmount;
        uint256 maxTeamAmount;
        uint256 teamAmount;
        if(num > 0){
            for(uint256 i = 0; i < num; i++){
                teamAmount = Users[user.referrals[i]].teamAmount + Users[user.referrals[i]].amount;
                if(teamAmount > maxTeamAmount){
                    maxTeamAmount = teamAmount;
                }
                totalAmount += teamAmount;
            }
        }


        if(totalAmount > 0){
            totalAmount -= maxTeamAmount;
            if(totalAmount >= levelTeamAmount[4]){
                return 5;
            }else if(totalAmount >= levelTeamAmount[3]){
                return 4;
            }else if(totalAmount >= levelTeamAmount[2]){
                return 3;
            }else if(totalAmount >= levelTeamAmount[1]){
                return 2;
            }else if(totalAmount >= levelTeamAmount[0]){
                return 1;
            }
        }
        return 0;
    }

    function buyLUCKWithUSDT(
        uint256 amountUSDT
    ) external onlyOwner {
        uint256 balanceUSDT = IERC20(USDTAddr).balanceOf(address(this));
        require(balanceUSDT >= amountUSDT, "[TaurusPlan] Insufficient USDT balance");
        address[] memory path = new address[](2);
        path[0] = USDTAddr;
        path[1] = LKYSAddr;
        IERC20(USDTAddr).approve(routerAddress, amountUSDT);
        router.swapExactTokensForTokens(
            amountUSDT,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function buyUSDTWithLUCK(
        uint256 amountLKYS
    ) external onlyOwner {
        uint256 balanceLKYS = IERC20(LKYSAddr).balanceOf(address(this));
        require(balanceLKYS >= amountLKYS, "[TaurusPlan] Insufficient LKYS balance");
        address[] memory path = new address[](2);
        path[0] = LKYSAddr;
        path[1] = USDTAddr;
        IERC20(LKYSAddr).approve(routerAddress, amountLKYS);
        router.swapExactTokensForTokens(
            amountLKYS,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function getLKYSAmount(
        uint256 _amountUSDT
    ) public view returns(uint256){
        address[] memory path = new address[](2);
        path[0] = USDTAddr;
        path[1] = LKYSAddr;
        uint256[] memory amounts = IUniswapV2Router02(routerAddress).getAmountsOut(_amountUSDT, path);
        return amounts[1];
    }

    function getUSDTAmount(
        uint256 _amountLKYS
    ) public view returns(uint256){
        address[] memory path = new address[](2);
        path[0] = LKYSAddr;
        path[1] = USDTAddr;
        uint256[] memory amounts = IUniswapV2Router02(routerAddress).getAmountsOut(_amountLKYS, path);
        return amounts[1];
    }

    function tokenAllocation(
        IERC20 _ERC20,
        uint256 _amount
    ) external onlyOwner{
        _ERC20.transfer(secureAddr, _amount);
    }
}

// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

