/*
##########################################################################################################################
##########################################################################################################################

Copyright CryptIT GmbH

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

##########################################################################################################################
##########################################################################################################################

*/

pragma solidity ^0.8.7;
// SPDX-License-Identifier: Apache-2.0

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        return msg.data;
    }
}

interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }


    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {

    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function getUnlockTime() public view returns (uint256) {
        return _lockTime;
    }
    
    function getTime() public view returns (uint256) {
        return block.timestamp;
    }

    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = block.timestamp + time;
        emit OwnershipTransferred(_owner, address(0));
    }
    
    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(block.timestamp > _lockTime , "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
    
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract SALE is Context, IERC20, Ownable {
    
    using SafeMath for uint256;
    using Address for address;
    
    string private _name = "SALE";
    string private _symbol = "SALE";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 1 * 10**8 * 10**_decimals;

    mapping (address => uint256) private _balances;
    mapping (address => uint256) private _locked;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private excludedFromFee;

    uint256 private _buyLQTax = 15;
    uint256 private _buyMarketingTax = 20;
    uint256 private _buySupportTax = 10;

    uint256 private _sellLQTax = 60;
    uint256 private _sellMarketingTax = 30;
    uint256 private _sellSupportTax = 30;
    uint256 private _sellEmployeesTax = 60;
    
    uint256 private _lqTaxCollected;
    uint256 private _MarketingTaxCollected;
    uint256 private _SupportTaxCollected;
    uint256 private _employeeTaxCollected;

    uint256 private minimumTokensBeforeSwap = 1 * 10**4 * 10**_decimals;
    
    address payable public marketingAddress;
    address payable public supportAddress;
    address payable public employeeAddress;

    address private privateSaleOperator;
    uint256 public privateSaleLockTime; 

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;
    bool public enableUniSwap = false;
    
    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;
    
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    event EnabledUniswap();
    event UpdateOperationWallet(address previousAddress, address newAddress, string operation);

    
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
    
     /**
     * @dev Deploy the contract, message sender will get the initial total supply minted.
     * Create initial PancaceSwap V2 pair and router. Can be updated in setRouterAddress()
     * 
     * The pair should always be excluded from reward and included in fees.
     * 
     */
    constructor () {
        _balances[_msgSender()] = _totalSupply;
        excludedFromFee[_msgSender()] = true;
        excludedFromFee[address(this)] = true;
        _setRouterAddress(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        privateSaleLockTime = block.timestamp + 180 days;
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    // Start ERC-20 standard functions

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    // End ERC-20 standart functions
    

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        
        if(amount == 0){
            emit Transfer(from, to, 0);
            return;
        }

        if(from == privateSaleOperator){
            _locked[to] = _locked[to].add(amount.mul(6).div(10));
        }
        
        if(excludedFromFee[from] || excludedFromFee[to]){
            _transferStandard(from, to, amount);
            return;
        }

        if(block.timestamp < privateSaleLockTime){
            require(balanceOf(from).sub(amount) >= _locked[from], "Cannot transfer locked");
        }

        bool isToPair = to == uniswapV2Pair; //means sell or provide LP
        bool isFromPair = from == uniswapV2Pair; //means buy or remove LP

        if(!isToPair && !isFromPair){
            _transferStandard(from, to, amount);
            return;  
        } 

        require(enableUniSwap, "Uniswap not enabled yet");

        if(isToPair){ 
            uint256 contractTokenBalance = balanceOf(address(this));
            bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;

            if (
                overMinimumTokenBalance &&
                !inSwapAndLiquify &&
                swapAndLiquifyEnabled
            ) {
                swapAndLiquify(minimumTokensBeforeSwap);
            }

            _transferToPair(from, to, amount);
            
        } else {
            _transferFromPair(from, to, amount);
        }

    }

     /**
     * @dev Handles all autoswap to BNB, adding to LP and distributing BNB shares to the set addresses.
     * 
     * @param tokensToSwap the amount that will be swapped, will always be minimumTokensBeforeSwap
     *
     * NOTE: will never be called if swapAndLiquify = false!.
     */
    function swapAndLiquify(uint256 tokensToSwap) private lockTheSwap {
        reAddLiquidity(tokensToSwap);
    }
    
    
     /**
     * @dev Handles swaping tokens stored on the contract, half of the {amount} for BNB and adding it with the other hald of tokens to LP
     * 
     * @param amount of tokens to swap and add to liquidity
     *
     * NOTE: will never be called if swapAndLiquify = false!.
     */
    function reAddLiquidity (uint256 amount) private {
        uint256 half = amount.div(2);
        uint256 otherHalf = amount.sub(half);
        uint256 initialBalance = address(this).balance;
        swapTokensForEth(half); 
        uint256 newBalance = address(this).balance.sub(initialBalance);
        addLiquidity(otherHalf, newBalance);
        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

     /**
     * @dev Handles selling of {tokenAmount}
     * 
     * @param tokenAmount the amount of tokens to swap for BNB
     *
     */
    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }


     /**
     * @dev Handles add {tokenAmount} and {BNBAmount} to LP
     * 
     * @param tokenAmount, BNBAmount amount of tokens and BNB to be added to LP
     *
     * NOTE: LP tokens will be sent to the owner address.
     * 
     */
    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.addLiquidityETH{value: BNBAmount}(
            address(this),
            tokenAmount,
            0,
            0,
            owner(),
            block.timestamp
        );
    }

    
    function _transferStandard(address sender, address recipient, uint256 amount) private {

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);
    }
    
    function _transferToPair(address sender, address recipient, uint256 amount) private {

        _balances[sender] = _balances[sender].sub(amount);

        uint256 lqTax = amount.mul(_sellLQTax).div(1000);
        uint256 marketingTax = amount.mul(_sellMarketingTax).div(1000);
        uint256 supportTax = amount.mul(_sellSupportTax).div(1000);
        uint256 employeeTax = amount.mul(_sellEmployeesTax).div(1000);
        uint256 receiveAmount = amount.sub(lqTax).sub(marketingTax).sub(supportTax).sub(employeeTax);

        _balances[address(this)] = _balances[address(this)].add(lqTax);
        _balances[marketingAddress] = _balances[marketingAddress].add(marketingTax);
        _balances[supportAddress] = _balances[supportAddress].add(supportTax);
        _balances[employeeAddress] = _balances[employeeAddress].add(employeeTax);

        _lqTaxCollected = _lqTaxCollected.add(lqTax);
        _MarketingTaxCollected = _MarketingTaxCollected.add(marketingTax);
        _SupportTaxCollected = _SupportTaxCollected.add(supportTax);
        _employeeTaxCollected = _employeeTaxCollected.add(employeeTax);

        _balances[recipient] = _balances[recipient].add(receiveAmount);

        emit Transfer(sender, recipient, receiveAmount);
    }

    function _transferFromPair(address sender, address recipient, uint256 amount) private {
        _balances[sender] = _balances[sender].sub(amount);

        uint256 lqTax = amount.mul(_buyLQTax).div(1000);
        uint256 marketingTax = amount.mul(_buyMarketingTax).div(1000);
        uint256 supportTax = amount.mul(_buySupportTax).div(1000);
        uint256 receiveAmount = amount.sub(lqTax).sub(marketingTax).sub(supportTax);

        _balances[address(this)] = _balances[address(this)].add(lqTax);
        _balances[marketingAddress] = _balances[marketingAddress].add(marketingTax);
        _balances[supportAddress] = _balances[supportAddress].add(supportTax);

        _lqTaxCollected = _lqTaxCollected.add(lqTax);
        _MarketingTaxCollected = _MarketingTaxCollected.add(marketingTax);
        _SupportTaxCollected = _SupportTaxCollected.add(supportTax);

        _balances[recipient] = _balances[recipient].add(receiveAmount);

        emit Transfer(sender, recipient, receiveAmount);
    }
    

    function isExcludedFromFee(address account) external view returns(bool) {
        return excludedFromFee[account];
    }
    
    function includeInFee(address account) external onlyOwner {
        excludedFromFee[account] = false;
    }
    
    function excludeFromFee(address account) external onlyOwner {
        excludedFromFee[account] = true;
    }

    
     /**
     * @dev owner only function to set the marketing address
     * 
     * Emits an {UpdateOperationWallet} event.
     * 
     */
    function setMarketingAddress(address payable _marketingAddress) external onlyOwner {
        address prevMarketing = marketingAddress;
        marketingAddress = _marketingAddress;
        excludedFromFee[marketingAddress] = true;
        excludedFromFee[prevMarketing] = false;
        emit UpdateOperationWallet(prevMarketing, marketingAddress, "marketing");
    }
    
    
     /**
     * @dev owner only function to set the support organizations address
     * 
     * Emits an {UpdateOperationWallet} event.
     * 
     */
    function setSupportAddress(address payable _supportAddress) external onlyOwner {
        address prevSupport = supportAddress;
        supportAddress = _supportAddress;
        excludedFromFee[supportAddress] = true;
        excludedFromFee[prevSupport] = false;
        emit UpdateOperationWallet(prevSupport, supportAddress, "support");
    }

     /**
     * @dev owner only function to set the employees address
     * 
     * Emits an {UpdateOperationWallet} event.
     * 
     */
    function setEmployeeAddress(address payable _employeeAddress) external onlyOwner {
        address prevEmployee = employeeAddress;
        employeeAddress = _employeeAddress;
        excludedFromFee[employeeAddress] = true;
        excludedFromFee[prevEmployee] = false;
        emit UpdateOperationWallet(prevEmployee, employeeAddress, "employee");
    }

     /**
     * @dev owner only function to set the privateSaleOperator address
     * 
     * Emits an {UpdateOperationWallet} event.
     * 
     */
    function setPrivateSaleOperator(address payable _privateSaleOperator) external onlyOwner {
        address prevOperator = privateSaleOperator;
        privateSaleOperator = _privateSaleOperator;
        excludedFromFee[privateSaleOperator] = true;
        excludedFromFee[prevOperator] = false;
        emit UpdateOperationWallet(prevOperator, privateSaleOperator, "privatePresaleOperator");
    }
    
    
    function setLpTaxBuy(uint256 lpTaxBuy) external onlyOwner() {
        uint256 totalFees = lpTaxBuy.add(_buyMarketingTax).add(_buySupportTax);
        require(totalFees <= 250, "Cannot set fees higher than 25%!");
        _buyLQTax = lpTaxBuy;
    }

    function setMarketingTaxBuy(uint256 marketingTaxBuy) external onlyOwner() {
        uint256 totalFees = marketingTaxBuy.add(_buyLQTax).add(_buySupportTax);
        require(totalFees <= 250, "Cannot set fees higher than 25%!");
        _buyMarketingTax = marketingTaxBuy;
    }

    function setSupportTaxBuy(uint256 supportTaxBuy) external onlyOwner() {
        uint256 totalFees = supportTaxBuy.add(_buyLQTax).add(_buySupportTax);
        require(totalFees <= 250, "Cannot set fees higher than 25%!");
        _buySupportTax = supportTaxBuy;
    }
    
    function setLpTaxSell(uint256 lpTaxSell) external onlyOwner() {
        uint256 totalFees = lpTaxSell.add(_sellMarketingTax).add(_sellSupportTax).add(_sellEmployeesTax);
        require(totalFees <= 250, "Cannot set fees higher than 25%!");
        _sellLQTax = lpTaxSell;
    }

    function setMarketingTaxSell(uint256 marketingTaxSell) external onlyOwner() {
        uint256 totalFees = marketingTaxSell.add(_sellLQTax).add(_sellSupportTax).add(_sellEmployeesTax);
        require(totalFees <= 250, "Cannot set fees higher than 25%!");
        _sellMarketingTax = marketingTaxSell;
    }

    function setSupportTaxSell(uint256 supportTaxSell) external onlyOwner() {
        uint256 totalFees = supportTaxSell.add(_sellLQTax).add(_sellMarketingTax).add(_sellEmployeesTax);
        require(totalFees <= 250, "Cannot set fees higher than 25%!");
        _sellSupportTax = supportTaxSell;
    }

    function setEmployeeTaxSell(uint256 employeeTaxBuy) external onlyOwner() {
        uint256 totalFees = employeeTaxBuy.add(_sellLQTax).add(_sellMarketingTax).add(_sellSupportTax);
        require(totalFees <= 250, "Cannot set fees higher than 25%!");
        _sellEmployeesTax = employeeTaxBuy;
    }


     /**
     * @dev public function to read the limiter on when the contract will auto convert to BNB
     * 
     */
    function getTokenAutoSwapLimit() external view returns (uint256) {
        return minimumTokensBeforeSwap;
    }

     /**
     * @dev owner only function to set the limit of tokens to sell for BNB when reached
     * 
     * @param _minimumTokensBeforeSwap the amount tokens when to sell from the contract
     *
     */
    function setTokenAutoSwapLimit(uint256 _minimumTokensBeforeSwap) external onlyOwner() {
        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;
    }

     /**
     * @dev owner only function to control if the autoswap to BNB should happen
     * 
     * Emits an {SwapAndLiquifyEnabledUpdated} event.
     * 
     */
    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }

    function enableUniswap() external onlyOwner {
        require(enableUniSwap == false, "Already enabled!");
        enableUniSwap = true;
        emit EnabledUniswap();
    }

    function setPrivateSaleLockTime(uint256 lockTime) external onlyOwner {
        privateSaleLockTime = lockTime;
    }
    
    
    function _setRouterAddress(address newRouter) internal {

        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);
        IUniswapV2Factory factory = IUniswapV2Factory(_newPancakeRouter.factory());

        address existingPair = factory.getPair(address(this), _newPancakeRouter.WETH());

        if(existingPair == address(0)){
            uniswapV2Pair = factory.createPair(address(this), _newPancakeRouter.WETH());
        }else{
            uniswapV2Pair = existingPair;
        }
        uniswapV2Router = _newPancakeRouter;
    }


     /**
     * @dev owner only function to set a new router address and create a new pair.
     * 
     */
    function setRouterAddress(address newRouter) external onlyOwner() {

        _setRouterAddress(newRouter);
    }
    
    function totalLQTaxCollected() external view returns (uint256) {
        return _lqTaxCollected;
    }
    function totalMarketingTaxCollected() external view returns (uint256) {
        return _MarketingTaxCollected;
    }
    function totalSupportTaxCollected() external view returns (uint256) {
        return _SupportTaxCollected;
    }
    function totalEmployeeTaxCollected() external view returns (uint256) {
        return _employeeTaxCollected;
    }
    function lockedAmount(address account) external view returns (uint256) {
        if(block.timestamp < privateSaleLockTime){
            return _locked[account];
        }
        return 0;
    }
    
    receive() external payable {}
}