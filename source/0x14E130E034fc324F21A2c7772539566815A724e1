
// File: contracts/Staking.sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";

import "./interfaces/IPixelSeal.sol";

contract PixelSealStaking {
    IERC20 coin;
    IPixelSeal public nft;
    uint256[4] stakingRates = [9 * 10**18, 8 * 10**18, 7 * 10**18, 6 * 10**18];
    uint256[4] stakingPeriod = [360 days, 180 days, 90 days, 45 days];
    uint256 rewardDenominator = 1 days;
    uint256 rewardDelay = 15;

    mapping(uint256 => address) stakerOfToken;
    mapping(uint256 => TokenInfo) tokenIdToStakingInfo;
    mapping(address => uint256) amountStaked;
    mapping(address => uint256[]) stakedTokensOfAddress;
    mapping(uint256 => uint256) indexOfStakedToken;

    struct TokenInfo {
        address staker;
        uint256 stakeDate;
        uint256 endDate;
        uint256 rate;
        uint256 claimed;
        uint256 lastClaimDate;
    }

    event TokenStaked(
        address staker,
        uint256 indexed tokenId,
        uint256 dailyRate,
        uint256 endDate
    );

    event RewardsClaimed(address staker, uint256 amount);

    event TokenUnstaked(address staker, uint256 tokenId);

    constructor(IERC20 _coin, IPixelSeal _nft) {
        coin = _coin;
        nft = _nft;
    }

    function stake(uint256 tokenId, uint256 category) public {
        require(nft.ownerOf(tokenId) == msg.sender, "Not the owner of nft");
        require(category < 4, "Wrong staking category");
        TokenInfo storage token = tokenIdToStakingInfo[tokenId];
        token.staker = msg.sender;
        token.stakeDate = block.timestamp;
        token.endDate = block.timestamp + stakingPeriod[category];
        token.rate = stakingRates[category];
        token.lastClaimDate = block.timestamp;
        indexOfStakedToken[tokenId] = amountStaked[msg.sender];
        amountStaked[msg.sender]++;
        stakedTokensOfAddress[msg.sender].push(tokenId);
        nft.transferFrom(msg.sender, address(this), tokenId);
        stakerOfToken[tokenId] = msg.sender;
        emit TokenStaked(msg.sender, tokenId, token.rate, token.endDate);
    }

    function _getRewardsForToken(TokenInfo storage token)
        internal
        view
        returns (uint256 amount, uint256 upTo)
    {
        uint256 deltaTime;
        if (block.timestamp > token.endDate) {
            deltaTime = token.endDate - token.stakeDate;
        } else {
            deltaTime = block.timestamp - token.stakeDate;
        }
        uint256 rawTimes = (deltaTime - (deltaTime % rewardDenominator)) /
            rewardDenominator;
        uint256 times = rawTimes - (rawTimes % rewardDelay);
        uint256 rawAmount = times * token.rate;
        amount = rawAmount - token.claimed;
        upTo = token.lastClaimDate + times * rewardDenominator;
    }

    function getRewardsForToken(uint256 tokenId)
        public
        view
        returns (uint256 reward)
    {
        TokenInfo storage token = tokenIdToStakingInfo[tokenId];
        (reward, ) = _getRewardsForToken(token);
    }

    function getRewards() public view returns (uint256 amount) {
        for (uint256 i = 0; i < amountStaked[msg.sender]; i++) {
            TokenInfo storage token = tokenIdToStakingInfo[
                stakedTokensOfAddress[msg.sender][i]
            ];
            (uint256 tokenAmount, ) = _getRewardsForToken(token);
            amount += tokenAmount;
        }
    }

    function claimRewards() public returns (uint256 amount) {
        for (uint256 i = 0; i < amountStaked[msg.sender]; i++) {
            TokenInfo storage token = tokenIdToStakingInfo[
                stakedTokensOfAddress[msg.sender][i]
            ];
            (uint256 tokenAmount, uint256 claimedUntil) = _getRewardsForToken(
                token
            );
            token.claimed += tokenAmount;
            token.lastClaimDate = claimedUntil;
            amount += tokenAmount;
        }
        require(
            coin.balanceOf(address(nft)) >= amount,
            "Not enough funds in treasury"
        );
        nft.withdrawToken(coin, msg.sender, amount);
        emit RewardsClaimed(msg.sender, amount);
    }

    function unstake(uint256 tokenId) public {
        require(stakerOfToken[tokenId] == msg.sender, "Not your token");
        TokenInfo storage token = tokenIdToStakingInfo[tokenId];
        require(block.timestamp > token.endDate, "Can't claim yet");
        (uint256 tokenAmount, ) = _getRewardsForToken(token);
        if (tokenAmount > 0) {
            require(
                coin.balanceOf(address(nft)) >= tokenAmount,
                "Not enough funds in treasury"
            );
            nft.withdrawToken(coin, msg.sender, tokenAmount);
        }
        amountStaked[msg.sender]--;
        stakedTokensOfAddress[msg.sender][
            indexOfStakedToken[tokenId]
        ] = stakedTokensOfAddress[msg.sender][amountStaked[msg.sender]];
        nft.safeTransferFrom(address(this), msg.sender, tokenId);
        emit TokenUnstaked(msg.sender, tokenId);
        delete tokenIdToStakingInfo[tokenId];
        delete stakerOfToken[tokenId];
    }

    function cancelStake(uint256 tokenId) public {
        require(nft.isAdmin(msg.sender), "Restricted function");
        address staker = stakerOfToken[tokenId];
        nft.safeTransferFrom(address(this), staker, tokenId);
        emit TokenUnstaked(staker, tokenId);
        delete tokenIdToStakingInfo[tokenId];
        delete stakerOfToken[tokenId];
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}


// File: contracts/interfaces/IPixelSeal.sol
// SPDX-License-Identifier: MIT OR Apache-2.0
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

pragma solidity ^0.8.0;

interface IPixelSeal is IERC721 {

   function isAdmin(address account) external view returns(bool);

   function isOperator(address account) external view returns(bool);
   
   function withdrawToken(IERC20 token, address to, uint256 amount) external;

}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

