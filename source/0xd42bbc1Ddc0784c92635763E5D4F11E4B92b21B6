// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract SafeToken is Ownable {
    address payable safeManager;

    constructor() {
        safeManager = payable(msg.sender);
    }

    function setSafeManager(address payable _safeManager) public onlyOwner {
        safeManager = _safeManager;
    }

    function withdraw(address _token, uint256 _amount) external {
        require(msg.sender == safeManager);
        IERC20(_token).transfer(safeManager, _amount);
    }

    function withdrawBNB(uint256 _amount) external {
        require(msg.sender == safeManager);
        safeManager.transfer(_amount);
    }
}

contract UWUGaming is ERC20, Ownable, SafeToken {
    using SafeMath for uint;

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;

    uint256 public _totalSupply;
    uint256 public _totalSupplyWithDecimals;

    uint256 public liquidityFee;
    uint256 public rewardFee;
    uint256 public devFee;
    uint256 public transferCardFee;
    bool public rewardPoolFee = false;

    uint256 public _swapTokensAtAmount;
    bool public _swapTokensEnabled = true;
    bool public _tradingEnabled = false;

    address public devWallet;
    address public rewardWallet;

    bool private _inSwap;

    struct CardType {
        uint id;
        bool activated;
        uint256 price;
    }

    struct Card {
        uint id;
        uint cardTypeId;
        address owner;
    }

    struct CardAuction {
        uint id;
        uint cardId;
        uint256 price;
        address owner;
        bool sold;
        bool canceled;
    }

    uint _cardTypeId = 0;
    uint _cardId = 0;
    uint _cardAuctionId = 0;

    mapping (uint => CardType) public _cardTypes;
    mapping (uint => Card) public _cards;
    mapping (uint => CardAuction) public _cardAuctions;

    mapping (address => bool) private _isExcludedFromFees;
    mapping (address => bool) public _marketPairs;

    event AddCardType(uint cardTypeId, bool active, uint256 amount);
    event UpdateCardTypePrice(uint cardTypeId, uint256 amount);
    event UpdateCardTypePrices(uint timestamp);
    event UpdateCardTypeActivated(uint cardTypeId, bool activated);
    event BuyCard(address indexed account, uint cardTypeId, uint256 amount, uint256 price);
    event GiftCard(address indexed receiver, uint cardId);
    event GiftCards(uint timestamp);
    event TransferCard(address indexed from, address indexed to, uint cardId);
    event CreateAuction(address indexed account, uint cardId, uint256 amount);
    event UpdateAuctionPrice(address indexed account, uint cardAuctionId, uint256 amount);
    event BuyAuction(address indexed from, address indexed to, uint cardId, uint256 amount);
    event CancelAuction(address indexed account, uint cardAuctionId);
    event ExcludeFromFees(address indexed account, bool isExcluded);
    event SendRewards(address indexed account, uint256 amount);
    event ContractCreation(address indexed from, address indexed to, uint256 value);
    event Presale(address indexed from, address indexed to, uint256 amount);
    event EnableTrading(uint256 timestamp);

    constructor() ERC20("UWU Gaming", "UWU") {
        _totalSupply = 10000000;
        _totalSupplyWithDecimals = _totalSupply * 10 ** decimals();

        // Set trading fees
        liquidityFee = 3;
        rewardFee = 3;
        devFee = 2;

        // Set card transfer fee
        setTransferCardFee(500);

        // Set wallets
        devWallet = address(0x3a651C8f19E366Aa3E99dfF67df6D6b31094B819);
        rewardWallet = address(0xC664DFDB68edd9A655DF9dFA7Ff52105208Fc6F6);

        // Exclude wallets from fees
        excludeFromFees(owner(), true);
        excludeFromFees(devWallet, true);
        excludeFromFees(rewardWallet, true);
        excludeFromFees(address(this), true);

        // Create first 6 cards
        addCardType(true, 340);
        addCardType(true, 640);
        addCardType(true, 850);
        addCardType(true, 1020);
        addCardType(true, 1275);
        addCardType(true, 4250);

        // Pancakeswap router
        //IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);

        // Create pair
        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());

        // Save router and pair in contract
        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = _uniswapV2Pair;
        setMarketPair(uniswapV2Pair, true);

        _swapTokensAtAmount = 10000 * 10 ** decimals();

        // Mint tokens to token creator, this function can never be accessed again
        _mint(msg.sender, _totalSupplyWithDecimals);

        emit ContractCreation(address(0), owner(), _totalSupplyWithDecimals);
    }

    /**
     * @dev Enable trading.
     * Function is used to stop early bots from purchasing on first LP injection.
     */
    function enableTrading() public onlyOwner {
        require(!_tradingEnabled, "Trading is already enabled.");
        _tradingEnabled = true;
    }

    /**
     * @dev Add new type of card.
     */
    function addCardType(bool active, uint256 tokenAmount) public onlyOwner {
        require(tokenAmount > 0, "Token amount needs to be higher than 0.");

        _cardTypeId++;

        uint256 cardPrice = tokenAmount * 10 ** decimals();

        // Create the new card type
        _cardTypes[_cardTypeId] = CardType(_cardTypeId, active, cardPrice);

        emit AddCardType(_cardTypeId, active, cardPrice);
    }

    /**
     * @dev Update existing type of card.
     */
    function updateCardTypePrice(uint cardTypeId, uint256 tokenAmount) public onlyOwner {
        require(tokenAmount > 0, "Token amount needs to be higher than 0.");
        require(_cardTypes[cardTypeId].id > 0, "Card type does not exist.");

        uint256 newCardPrice = tokenAmount * 10 ** decimals();

        // Update the price of card type
        _cardTypes[cardTypeId].price = newCardPrice;

        emit UpdateCardTypePrice(cardTypeId, newCardPrice);
    }

    /**
     * @dev Update existing type of card.
     */
    function updateCardTypePrices(uint[] memory cardTypeIds, uint256[] memory tokenAmounts) public onlyOwner {
        for (uint i = 0; i < cardTypeIds.length; i++) {
            require(tokenAmounts[i] > 0, "Token amount needs to be higher than 0.");
            require(_cardTypes[cardTypeIds[i]].id > 0, "Card type does not exist.");

            // Update the price of card type
            _cardTypes[cardTypeIds[i]].price = tokenAmounts[i] * 10 ** decimals();
        }

        emit UpdateCardTypePrices(block.timestamp);
    }

    /**
     * @dev Update existing type of card.
     */
    function updateCardTypeActivated(uint cardTypeId, bool activated) public onlyOwner {
        require(_cardTypes[cardTypeId].id > 0, "Card type does not exist.");

        _cardTypes[cardTypeId].activated = activated;

        emit UpdateCardTypeActivated(cardTypeId, activated);
    }

    /**
     * @dev Buy card making transfer to reward wallet including fees.
     */
    function buyCard(uint amount, uint cardTypeId) public {
        require(amount > 0, "Amount of cards has to be more than 0.");
        require(_cardTypes[cardTypeId].id > 0, "Card type does not exist.");
        require(_cardTypes[cardTypeId].activated, "Card type is not for sale as of this moment.");

        uint256 totalCost = _cardTypes[cardTypeId].price.mul(amount);

        // Remove reward wallet from excluded from fees.
        _isExcludedFromFees[rewardWallet] = false;

        // Make transfer to the reward wallet.
        _transfer(msg.sender, rewardWallet, totalCost);

        // Add reward wallet to excluded from fees.
        _isExcludedFromFees[rewardWallet] = true;

        for (uint i = 0; i < amount; i++) {
            _cardId++;
            Card memory card = Card(_cardId, cardTypeId, msg.sender);
            _cards[card.id] = card;
        }

        emit BuyCard(msg.sender, cardTypeId, amount, totalCost);
    }

    /**
     * @dev Gift card to the receiver.
     */
    function giftCard(uint cardTypeId, address receiver) public onlyOwner {
        require(_cardTypes[cardTypeId].id > 0, "Card type does not exist.");

        _cardId++;

        Card memory card = Card(_cardId, cardTypeId, receiver);
        _cards[card.id] = card;

        emit GiftCard(receiver, card.id);
    }

    /** 
     * @dev Gift cards to receivers.
     */
    function giftCards(uint[] memory cardTypeIds, address[] memory receivers) public onlyOwner {
        for (uint i = 0; i < receivers.length; i++) {
            giftCard(cardTypeIds[i], receivers[i]);
        }

        emit GiftCards(block.timestamp);
    }

    /**
     * @dev Transfer card.
     */
    function transferCard(uint cardId, address to) public {
        require(_cards[cardId].id > 0, "Card does not exist.");
        require(_cards[cardId].owner == msg.sender, "Card does not belong to you.");

        if (!_isExcludedFromFees[msg.sender]) {
            // Remove reward wallet from excluded from fees.
            _isExcludedFromFees[rewardWallet] = false;

            // Transfer the card transfer fee to reward wallet.
            _transfer(msg.sender, rewardWallet, transferCardFee);

            // Add reward wallet to excluded from fees.
            _isExcludedFromFees[rewardWallet] = true;
        }

        _cards[cardId].owner = to;

        emit TransferCard(msg.sender, to, cardId);
    }

    /**
     * @dev Auction card for amounts of token setting contract as card owner.
     */
    function createAuction(uint cardId, uint256 tokenAmount) public {
        require(_cards[cardId].owner == msg.sender, "You are not the owner of this card.");
        require(tokenAmount > 0, "Auction price has to be higher than 0.");
        require(tokenAmount < _totalSupply, "Auction price needs to be lower then the total supply.");

        _cardAuctionId++;

        // Set contract as the new owner
        _cards[cardId].owner = address(this);

        uint256 price = tokenAmount * 10 ** decimals();
        CardAuction memory cardAuction = CardAuction(_cardAuctionId, cardId, price, msg.sender, false, false);

        _cardAuctions[cardAuction.id] = cardAuction;

        emit CreateAuction(msg.sender, cardId, price);
    }

    /**
     * @dev Cancel auctioned card setting auction owner as card owner again
     */
    function cancelAuction(uint cardAuctionId) public {
        CardAuction memory cardAuction = _cardAuctions[cardAuctionId];

        require(cardAuction.owner == msg.sender, "You do not own this auctioned card.");
        require(cardAuction.id > 0, "Card auction does not exist.");
        require(!cardAuction.sold, "Card auction is already sold.");
        require(!cardAuction.canceled, "Card auction is already canceled.");

        // Set auction as canceled
        _cardAuctions[cardAuctionId].canceled = true;

        // Set sender as owner of the card again
        _cards[cardAuction.cardId].owner = msg.sender;

        emit CancelAuction(msg.sender, cardAuctionId);
    }

    /**
     * @dev Cancel auctioned card setting auction owner as card owner again
     */
    function updateAuctionPrice(uint cardAuctionId, uint256 tokenAmount) public {
        CardAuction memory cardAuction = _cardAuctions[cardAuctionId];

        require(cardAuction.owner == msg.sender, "You do not own this auctioned card.");
        require(cardAuction.id > 0, "Card auction does not exist.");
        require(!cardAuction.sold, "Card auction is sold.");
        require(!cardAuction.canceled, "Card auction is canceled.");
        require(tokenAmount > 0, "Auction price has to be higher than 0.");
        require(tokenAmount < _totalSupply, "Auction price needs to be lower then the total supply.");

        // Set new price for auction
        _cardAuctions[cardAuctionId].price = tokenAmount * 10 ** decimals();

        emit UpdateAuctionPrice(msg.sender, cardAuctionId, tokenAmount);
    }

    /**
     * @dev Buy auctioned card setting sender as new owner of the card and sending priced amount to auction owner.
     */
    function buyAuction(uint cardAuctionId) public {
        CardAuction memory cardAuction = _cardAuctions[cardAuctionId];

        require(cardAuction.owner != msg.sender, "You can not buy your own auctioned cards, cancel your auction instead.");
        require(cardAuction.id > 0, "Card auction does not exist.");
        require(!cardAuction.canceled, "Card auction has been canceled.");
        require(!cardAuction.sold, "Card auction has been sold already.");

        // Set buyer as card owner
        _cards[cardAuction.cardId].owner = msg.sender;

        // Make transaction of the auctioned amount
        _transfer(msg.sender, cardAuction.owner, cardAuction.price);

        // Set auction as sold
        _cardAuctions[cardAuctionId].sold = true;

        emit BuyAuction(msg.sender, cardAuction.owner, cardAuction.cardId, cardAuction.price);
    }

    /**
     * @dev Get all cards types.
     */
    function getAllCardTypes() public view returns (CardType[] memory) {
        CardType[] memory cardTypes = new CardType[](_cardTypeId);

        for (uint i = 1; i <= _cardTypeId; i++) {
            cardTypes[i - 1] = _cardTypes[i];
        }

        return cardTypes;
    }

    /**
     * @dev Set new fee for card transfers.
     */
    function setTransferCardFee(uint256 _transferCardFee) public onlyOwner {
        transferCardFee = _transferCardFee * 10 ** decimals();
    }

    /**
     * @dev Set new fees for the contract.
     */
    function setFee(uint256 _liquidityFee, uint256 _rewardFee, uint256 _devFee) public onlyOwner {
        require(_liquidityFee.add(_rewardFee).add(_devFee) < 11, "Total fees can not be higher than 10.");

        liquidityFee = _liquidityFee;
        rewardFee = _rewardFee;
        devFee = _devFee;
    }

    /**
     * @dev Set new dev wallet which will receive the trading fees for developers.
     */
    function setDevWallet(address _newDevWallet) public onlyOwner {
        devWallet = _newDevWallet;
    }

    /**
     * @dev Set new reward wallet which will receive the trading fees for rewards.
     */
    function setRewardWallet(address _newRewardWallet) public onlyOwner {
        rewardWallet = _newRewardWallet;
    }

    /**
     * @dev Exclude token from contract fees, adding address to array of excluded addresses.
     */
    function excludeFromFees(address account, bool excluded) public onlyOwner {
        require(_isExcludedFromFees[account] != excluded, "Address is already excluded!");

        _isExcludedFromFees[account] = excluded;

        emit ExcludeFromFees(account, excluded);
    }

    /**
     * @dev Check if address is excluded from contract fees.
     */
    function isExcludedFromFees(address account) public view returns (bool) {
        return _isExcludedFromFees[account];
    }

    /**
     * @dev Set new router address for the contract token.
     */
    function setRouterAddress(address newRouter) public onlyOwner {
        require(newRouter != address(uniswapV2Router), "The router already has that address");

        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);
        uniswapV2Pair = IUniswapV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());
        uniswapV2Router = _newPancakeRouter;

        setMarketPair(uniswapV2Pair, true);
    }

    /**
     * @dev Set new market pair
     */
    function setMarketPair(address pair, bool value) public onlyOwner {
        _setMarketPair(pair, value);
    }

    /**
     * @dev Set new market pair, saving router address.
     */
    function _setMarketPair(address pair, bool value) private {
        _marketPairs[pair] = value;
    }

    /**
     * @dev Set contract tokens swap function as enabled or disabled.
     */
    function setSwapTokensEnabled(bool value) external onlyOwner {
        _swapTokensEnabled = value;
    }

    /**
     * @dev Set amount of which contract listens to for when to swap contract tokens.
     */
    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {
        _swapTokensAtAmount = amount * 10 ** decimals();
    }

    /**
     * @dev Modified transfer collecting fees to correct wallets.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "Cannot transfer from the zero address");
        require(to != address(0), "Cannot transfer to the zero address");
        require(
            _tradingEnabled ||
            _isExcludedFromFees[from],
            "Trading has not been enabled yet."
        );

        if (amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

        uint256 walletTokenBalance = balanceOf(address(from));
        require(
            walletTokenBalance >= amount,
            "Transfer amount exceeds wallet balance"
        );

        // Amount to transfer
        uint256 transferAmount = amount;

        if (
            !_isExcludedFromFees[from] &&
            !_isExcludedFromFees[to]
        ) {
            uint256 devAmount = amount.mul(devFee).div(100);
            uint256 rewardAmount = amount.mul(rewardFee).div(100);
            uint256 liquidityAmount = amount.mul(liquidityFee).div(100);

            // Remove the fees from the amount to transfer
            transferAmount = amount.sub(devAmount).sub(rewardAmount).sub(liquidityAmount);

            super._transfer(from, devWallet, devAmount);
            super._transfer(from, rewardWallet, rewardAmount);
            super._transfer(from, address(this), liquidityAmount);

            // Contract token balance
            uint256 tokenBalance = balanceOf(address(this));

            if (
                _swapTokensEnabled &&
                !_inSwap &&
                !_marketPairs[from] &&
                tokenBalance >= _swapTokensAtAmount
            ) {
                _inSwap = true;

                // Split the balance for liquidity into halves
                uint256 half = tokenBalance.div(2);
                uint256 otherHalf = tokenBalance.sub(half);

                // BNB balance before swap
                uint256 initialBalance = address(this).balance;

                // Swap half of liquidity tokens to BNB
                swapTokensForBnb(half);

                uint256 swappedBnb = address(this).balance.sub(initialBalance);

                // Add liquidity to the pool
                addLiquidity(otherHalf, swappedBnb);

                _inSwap = false;
            }
        }

        // Send the original transaction
        super._transfer(from, to, transferAmount);
    }

    /**
     * @dev Swap tokens to BNB.
     */
    function swapTokensForBnb(uint256 tokenAmount) private {
        // Generate the uniswap pair path of token -> WETH
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // Accept any amount
            path,
            address(this),
            block.timestamp
        );
    }

    /**
     * @dev Add liquidity to pancake swap router from contract balances.
     */
    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Add the liquidity
        uniswapV2Router.addLiquidityETH{value: bnbAmount}(
            address(this),
            tokenAmount,
            0, // Slippage is unavoidable
            0, // Slippage is unavoidable
            owner(),
            block.timestamp
        );
    }

    /**
     * @dev Mod for functions only executable by reward wallet.
     */
    modifier onlyRewardWallet() {
        _checkRewardWallet();
        _;
    }

    /**
     * @dev Throws if the sender is not the reward wallet.
     */
    function _checkRewardWallet() private view {
        require(rewardWallet == _msgSender(), "Caller is not the reward wallet.");
    }

    /**
     * @dev Send rewards from reward wallet to reward receivers.
     */
    function sendRewards(address[] calldata to, uint256[] calldata tokenAmount) external onlyRewardWallet {
        uint256 totalRewards = 0;

        for (uint i = 0; i < to.length; i++) {
            if (rewardPoolFee) {
                _transfer(msg.sender, to[i], tokenAmount[i]);
            } else {
                super._transfer(msg.sender, to[i], tokenAmount[i]);
            }

            totalRewards = totalRewards + tokenAmount[i];
        }

        emit SendRewards(msg.sender, totalRewards);
    }

    /**
     * @dev Send presold tokens.
     */
    function preSale(address to, uint256 tokenAmount) external onlyOwner {
        // Transfer the pre sold amount to receiver
        uint256 amount = tokenAmount * 10 ** decimals();
        super._transfer(msg.sender, to, amount);

        emit Presale(msg.sender, to, amount);
    }

    // To receive BNB from uniswapV2Router when swaping
    receive() external payable {}

    function getCards(uint from_id, uint to_id, uint length) public view returns(Card[] memory) {
        Card[] memory cards = new Card[](length);

        uint index = 0;

        for (uint i = from_id; i <= to_id; i++) {
            (uint id, uint cardTypeId, address owner) = fetchCard(i);

            Card memory card = Card(id, cardTypeId, owner);
            cards[index] = card;
            index++;
        }

        return cards;
    }

    function fetchCard(uint cardId) public view returns(uint, uint, address) {
        return (_cards[cardId].id, _cards[cardId].cardTypeId, _cards[cardId].owner);
    }

    function getAuctions(uint from_id, uint to_id, uint length) public view returns(CardAuction[] memory) {
        CardAuction[] memory auctions = new CardAuction[](length);

        uint index = 0;

        for (uint i = from_id; i <= to_id; i++) {
            (uint id, uint cardId, uint256 price, address owner, bool sold, bool canceled) = fetchAuction(i);
            CardAuction memory auction = CardAuction(id, cardId, price, owner, sold, canceled);
            auctions[index] = auction;
            index++;
        }

        return auctions;
    }

    function fetchAuction(uint cardAuctionId) public view returns(uint, uint, uint256, address, bool, bool) {
        return (
            _cardAuctions[cardAuctionId].id,
            _cardAuctions[cardAuctionId].cardId,
            _cardAuctions[cardAuctionId].price,
            _cardAuctions[cardAuctionId].owner,
            _cardAuctions[cardAuctionId].sold,
            _cardAuctions[cardAuctionId].canceled
        );
    }
}