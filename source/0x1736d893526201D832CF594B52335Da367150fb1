// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

interface IPancakeFactory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IPancakeRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function waiveOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract usdtReceiver {
    address private usdt = 0x55d398326f99059fF775485246999027B3197955;
    constructor() {
        IERC20(usdt).approve(msg.sender,~uint256(0));
    }
}

contract FWS is Context, IERC20, IERC20Metadata, Ownable {
    using SafeMath for uint256;
    string private _name;
    string private _symbol;
    uint256 private _totalSupply;
    address private created;
    address public _pair;
    uint256 public finalSupply = 10**4 * 10**18;

    uint256 public numTokensSellToAddToLiquidity = 2 * (1e18);
    uint256 public _feeToLP = 0;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) public isExcludedFromFee;

    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;
    address public daoAddress = 0xe0e5eb066a1Cd1472112743DBa9377260eF2748F;
    address public poolAddress = 0x1112c74f2F91Ec8E2a3813D93E0914e039774937;
    address public liquidityAddress = 0xC5bC11c77adB7B7fEEb622c03f1219a68567d692;
    address public _routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    address private usdt = 0x55d398326f99059fF775485246999027B3197955;

    IPancakeRouter private _router;
    usdtReceiver private _usdtReceiver;
    bool private inSwapAndLiquify;
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor() {
        _name = "FWS";
        _symbol = "FWS";
        _mint(owner(), 10 * 10**4 * 10**18);
        _router = IPancakeRouter(_routerAddress);
        _pair = IPancakeFactory(_router.factory()).createPair(
            address(usdt),
            address(this)
        );

        isExcludedFromFee[owner()] = true;
        isExcludedFromFee[daoAddress] = true;
        isExcludedFromFee[poolAddress] = true;
        isExcludedFromFee[liquidityAddress] = true;
        isExcludedFromFee[address(this)] = true;
        _usdtReceiver = new usdtReceiver();	   
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function transferDead(uint256 amount)
        public
        virtual        
        returns (bool)
    {
        uint256 senderBalance = _balances[_msgSender()];
        require(
            senderBalance >= amount,
            "ERC20: transfer amount exceeds balance"
        );
        unchecked {
            _balances[_msgSender()] = senderBalance.sub(amount);
        }
        uint256 noBurn = _burn(amount);
        _balances[_msgSender()] = _balances[_msgSender()].add(noBurn);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(
            currentAllowance >= amount,
            "ERC20: transfer amount exceeds allowance"
        );
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }
        return true;
    }

    function _mint(address account, uint256 amount) internal virtual {
        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    function _burn(uint256 amount) internal virtual returns (uint256) {
        if (_totalSupply < finalSupply) {
            return amount;
        }
        if (_totalSupply.sub(amount) <= finalSupply) {
            uint256 burnAmount = _totalSupply.sub(finalSupply);
            _totalSupply = _totalSupply.sub(burnAmount);
            _balances[deadAddress] = _balances[deadAddress].add(burnAmount);
            emit Transfer(address(0), deadAddress, burnAmount);
            return amount.sub(burnAmount);
        } else {
            _totalSupply = _totalSupply.sub(amount);
            _balances[deadAddress] = _balances[deadAddress].add(amount);
            emit Transfer(address(0), deadAddress, amount);
            return 0;
        }
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {     
        if (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {
            _basicTransfer(sender, recipient, amount);
        } else {
            if (sender == _pair){

            }else{
                if(amount > _balances[sender].sub(1e14)){
                    amount = _balances[sender].sub(1e14);
                }
            }
            if ((sender == _pair)||(recipient == _pair)) {
                uint256 senderBalance = _balances[sender];
                require(
                    senderBalance >= amount,
                    "ERC20: transfer amount exceeds balance1"
                );
                unchecked {
                    _balances[sender] = senderBalance.sub(amount);
                }

                uint256 share = amount.div(100);
                uint256 BonusAmount = share.mul(1);

                _balances[daoAddress] = _balances[daoAddress].add(BonusAmount);
                emit Transfer(sender, daoAddress, BonusAmount);

                _balances[poolAddress] = _balances[poolAddress].add(BonusAmount);
                emit Transfer(sender, poolAddress, BonusAmount);
  
                bool overMinTokenBalance = _feeToLP >= numTokensSellToAddToLiquidity;
                if (overMinTokenBalance && !inSwapAndLiquify && sender != _pair) {
                    //add liquidity
                    swapAndLiquify(_feeToLP,amount);               
                }

                _balances[address(this)] = _balances[address(this)].add(BonusAmount);
                _feeToLP = _feeToLP.add(BonusAmount);                
                emit Transfer(sender, address(this), BonusAmount);

                uint256 noBurn = _burn(BonusAmount);
                if(noBurn > 0){
                    _balances[poolAddress] = _balances[poolAddress].add(noBurn);
                    emit Transfer(sender, poolAddress, noBurn);
                }
                _balances[recipient] = _balances[recipient].add(share.mul(96));
                emit Transfer(sender, recipient, share.mul(96));
            } else {
                uint256 senderBalance = _balances[sender];
                require(
                    senderBalance >= amount,
                    "ERC20: transfer amount exceeds balance2"
                );
                unchecked {
                    _balances[sender] = senderBalance.sub(amount);
                }
                _balances[recipient] = _balances[recipient].add(amount);
                emit Transfer(sender, recipient, amount);
            }
        }
    }

    function _basicTransfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(
            amount,
            "Insufficient Balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function swapAndLiquify(uint256 feeToLP,uint256 amount) private lockTheSwap{
        // split the balance into halves
        uint256 half = feeToLP.div(2);
        uint256 otherHalf = feeToLP.sub(half);
        uint256 otherAmount = _balances[address(this)].sub(feeToLP);
        uint256 add_s = amount.mul(70).div(100);
        if(otherAmount > add_s){
            half = half.add(add_s);
        }
        // capture the contract's current USDT balance.
        // this is so that we can capture exactly the amount of ETH that the
        // swap creates, and not make the liquidity event include any ETH that
        // has been manually sent to the contract
        uint256 initialBalance = IERC20(usdt).balanceOf(address(_usdtReceiver));
        // swap tokens for USDT
        swapTokensForUSDT(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered
        // how much ETH did we just swap into?
        uint256 newBalance = (IERC20(usdt).balanceOf(address(_usdtReceiver))).sub(initialBalance);
        IERC20(usdt).transferFrom(address(_usdtReceiver),address(liquidityAddress), newBalance);
        // add liquidity to uniswap
        // addLiquidity(otherHalf, newBalance);
        _balances[address(this)] = _balances[address(this)].sub(otherHalf);
        _balances[liquidityAddress] = _balances[liquidityAddress].add(otherHalf);
        emit Transfer(address(this), liquidityAddress, otherHalf);
        _feeToLP = 0;       
    }

    function swapTokensForUSDT(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdt;
        _approve(address(this), address(_router), tokenAmount);
        // make the swap
        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of USDT
            path,
            address(_usdtReceiver),
            block.timestamp
        );
    }

    function addIsExcludedFromFee(address[] memory users) public onlyOwner {
        for (uint8 i = 0; i < users.length; i++) {
            isExcludedFromFee[users[i]] = true;
        }
    }

    function delIsExcludedFromFee(address[] memory users) public onlyOwner {
        for (uint8 i = 0; i < users.length; i++) {
            isExcludedFromFee[users[i]] = false;
        }
    }

    function setDaoAddress(address _daoAddress) public onlyOwner {
        daoAddress = _daoAddress;
    }

    function setPoolAddress(address _poolAddress) public onlyOwner {
        poolAddress = _poolAddress;
    }  

    function setLiquidityAddress(address _liquidityAddress) public onlyOwner {
        liquidityAddress = _liquidityAddress;
    }

    function setThresholdLiquidity(uint256 _numTokensSellToAddToLiquidity) public onlyOwner {
        numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity;
    }

    function setPair(address pair) public onlyOwner {
        _pair = pair;
    }

    function withdraw(address token,uint256 amount,address to) public onlyOwner {
        if (token == address(0)) {
            require(amount <= address(this).balance,"insufficient balance");
            payable(to).transfer(amount);
        } else {
            require(amount <= IERC20(token).balanceOf(address(this)),"insufficient balance");
            IERC20(token).transfer(to,amount);
        }
    }
}