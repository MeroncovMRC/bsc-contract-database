{"BEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./IBEP20.sol\";\n\ncontract BEP20 is ERC20, IBEP20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual override(ERC20) {\n        super._mint(account, amount);\n    }\n}"},"BEP20Base.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./BEP20.sol\";\n\nabstract contract BEP20Base is BEP20 {\n    uint8 private immutable _decimals;\n\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) BEP20(name_, symbol_) {\n        _decimals = decimals_;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}"},"BEP20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./BEP20Base.sol\";\n\n/**\n * @dev Extension of {BEP20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract BEP20Burnable is Context, BEP20Base {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {BEP20-_burn}.\n     */\n    function burn(uint256 amount) external virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\u0027s\n     * allowance.\n     *\n     * See {BEP20-_burn} and {BEP20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``\u0027s tokens of at least\n     * `amount`.\n     */\n    function _burnFrom(address account, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance \u003e= amount, \"BEP20Burnable: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\u0027s\n     * allowance.\n     */\n    function burnFrom(address account, uint256 amount) external virtual {\n        _burnFrom(account, amount);\n    }\n}"},"BEP20Capped.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./BEP20Base.sol\";\n\n/**\n * @dev Extension of {BEP20} that adds a maxSupply to the supply of tokens.\n */\nabstract contract BEP20Capped is BEP20Base {\n    uint256 private immutable _maxSupply;\n\n    /**\n     * @dev Sets the value of the `maxSupply`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 maxSupply_) {\n        require(maxSupply_ \u003e 0, \"BEP20Capped: maxSupply is 0\");\n        _maxSupply = maxSupply_;\n    }\n\n    /**\n     * @dev Returns the cap on the token\u0027s total supply.\n     */\n    function maxSupply() public view virtual returns (uint256) {\n        return _maxSupply;\n    }\n\n    /**\n     * @dev See {BEP20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(totalSupply() + amount \u003c= maxSupply(), \"BEP20Capped: maxSupply exceeded\");\n        super._mint(account, amount);\n    }\n}"},"BEP20Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./BEP20Base.sol\";\n\n/**\n * @title BEP20Mintable\n * @dev Implementation of the BEP20Mintable. Extension of {BEP20} that adds a minting behaviour.\n */\nabstract contract BEP20Mintable is BEP20Base {\n    // indicates if minting is finished\n    bool private _mintingFinished = false;\n\n    /**\n     * @dev Emitted during finish minting\n     */\n    event MintFinished();\n\n    /**\n     * @dev Tokens can be minted only before minting finished.\n     */\n    modifier canMint() {\n        require(!_mintingFinished, \"BEP20Mintable: minting is finished\");\n        _;\n    }\n\n    /**\n     * @dev Mint new tokens if minting is not finished\n     */\n    function _mint(address account, uint256 amount) internal virtual override canMint {\n        super._mint(account, amount);\n    }\n\n    /**\n     * @dev Allow anybody to mint new tokens\n     * Access restriction must be overriden in derived class\n     */\n    function mint(address account, uint256 amount) external virtual {\n        _mint(account, amount);\n    }\n\n    /**\n     * @return if minting is finished or not.\n     */\n    function mintingFinished() public view returns (bool) {\n        return _mintingFinished;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function _finishMinting() internal virtual canMint {\n        _mintingFinished = true;\n\n        emit MintFinished();\n    }\n\n    /**\n     * @dev stop minting\n     * Must be overriden in a derived class to restrict access\n     */\n    function finishMinting() external virtual {\n        _finishMinting();\n    }\n}"},"BEP20Token.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\nimport \"./BEP20Base.sol\";\nimport \"./BEP20Burnable.sol\";\nimport \"./BEP20Capped.sol\";\nimport \"./BEP20Mintable.sol\";\nimport \"./FeeProcessor.sol\";\n\n/**\n * @dev BEP20Token implementation with Mint, Burn, Cap capabilities\n */\ncontract BEP20Token is BEP20Base, BEP20Burnable, BEP20Mintable, BEP20Capped, Ownable, FeeProcessor {\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 initialSupply_,\n        uint256 maxSupply_,\n        address payable feeReceiver_\n    )\n        payable\n        BEP20Base(name_, symbol_, decimals_)\n        BEP20Capped(maxSupply_)\n        FeeProcessor(feeReceiver_, 0x17607acad1a06c3a6ec736586b667adc5b3f722f95dcf534c702b8887c2e9621)\n    {\n        if (initialSupply_ \u003e 0) _mint(_msgSender(), initialSupply_);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     * only callable by `owner()`\n     */\n    function burn(uint256 amount) external override onlyOwner {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\u0027s\n     * allowance.\n     * only callable by `owner()`\n     */\n    function burnFrom(address account, uint256 amount) external override onlyOwner {\n        _burnFrom(account, amount);\n    }\n\n    /**\n     * @dev Mint new tokens\n     * only callable by `owner()`\n     */\n    function mint(address account, uint256 amount) external override onlyOwner {\n        _mint(account, amount);\n    }\n\n    /**\n     * @dev Mint new tokens\n     */\n    function _mint(address account, uint256 amount) internal virtual override(BEP20, BEP20Capped, BEP20Mintable) {\n        super._mint(account, amount);\n    }\n\n    /**\n     * @dev stop minting\n     * only callable by `owner()`\n     */\n    function finishMinting() external virtual override onlyOwner {\n        _finishMinting();\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"DateTime.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ncontract DateTime {\n        /*\n         *  Date and Time utilities for ethereum contracts\n         *\n         */\n        struct _DateTime {\n                uint16 year;\n                uint8 month;\n                uint8 day;\n                uint8 hour;\n                uint8 minute;\n                uint8 second;\n                uint8 weekday;\n        }\n\n        uint constant DAY_IN_SECONDS = 86400;\n        uint constant YEAR_IN_SECONDS = 31536000;\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n        uint constant HOUR_IN_SECONDS = 3600;\n        uint constant MINUTE_IN_SECONDS = 60;\n\n        uint16 constant ORIGIN_YEAR = 1970;\n\n        function isLeapYear(uint16 year) public pure returns (bool) {\n                if (year % 4 != 0) {\n                        return false;\n                }\n                if (year % 100 != 0) {\n                        return true;\n                }\n                if (year % 400 != 0) {\n                        return false;\n                }\n                return true;\n        }\n\n        function leapYearsBefore(uint year) public pure returns (uint) {\n                year -= 1;\n                return year / 4 - year / 100 + year / 400;\n        }\n\n        function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                        return 31;\n                }\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                        return 30;\n                }\n                else if (isLeapYear(year)) {\n                        return 29;\n                }\n                else {\n                        return 28;\n                }\n        }\n\n        function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\n                uint secondsAccountedFor = 0;\n                uint buf;\n                uint8 i;\n\n                // Year\n                dt.year = getYear(timestamp);\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n                // Month\n                uint secondsInMonth;\n                for (i = 1; i \u003c= 12; i++) {\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n                        if (secondsInMonth + secondsAccountedFor \u003e timestamp) {\n                                dt.month = i;\n                                break;\n                        }\n                        secondsAccountedFor += secondsInMonth;\n                }\n\n                // Day\n                for (i = 1; i \u003c= getDaysInMonth(dt.month, dt.year); i++) {\n                        if (DAY_IN_SECONDS + secondsAccountedFor \u003e timestamp) {\n                                dt.day = i;\n                                break;\n                        }\n                        secondsAccountedFor += DAY_IN_SECONDS;\n                }\n\n                // Hour\n                dt.hour = getHour(timestamp);\n\n                // Minute\n                dt.minute = getMinute(timestamp);\n\n                // Second\n                dt.second = getSecond(timestamp);\n\n                // Day of week.\n                dt.weekday = getWeekday(timestamp);\n        }\n\n        function getYear(uint timestamp) public pure returns (uint16) {\n                uint secondsAccountedFor = 0;\n                uint16 year;\n                uint numLeapYears;\n\n                // Year\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n                while (secondsAccountedFor \u003e timestamp) {\n                        if (isLeapYear(uint16(year - 1))) {\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\n                        }\n                        year -= 1;\n                }\n                return year;\n        }\n\n        function getMonth(uint timestamp) public pure returns (uint8) {\n                return parseTimestamp(timestamp).month;\n        }\n\n        function getDay(uint timestamp) public pure returns (uint8) {\n                return parseTimestamp(timestamp).day;\n        }\n\n        function getHour(uint timestamp) public pure returns (uint8) {\n                return uint8((timestamp / 60 / 60) % 24);\n        }\n\n        function getMinute(uint timestamp) public pure returns (uint8) {\n                return uint8((timestamp / 60) % 60);\n        }\n\n        function getSecond(uint timestamp) public pure returns (uint8) {\n                return uint8(timestamp % 60);\n        }\n\n        function getWeekday(uint timestamp) public pure returns (uint8) {\n                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, 0, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, minute, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\n                uint16 i;\n\n                // Year\n                for (i = ORIGIN_YEAR; i \u003c year; i++) {\n                        if (isLeapYear(i)) {\n                                timestamp += LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                timestamp += YEAR_IN_SECONDS;\n                        }\n                }\n\n                // Month\n                uint8[12] memory monthDayCounts;\n                monthDayCounts[0] = 31;\n                if (isLeapYear(year)) {\n                        monthDayCounts[1] = 29;\n                }\n                else {\n                        monthDayCounts[1] = 28;\n                }\n                monthDayCounts[2] = 31;\n                monthDayCounts[3] = 30;\n                monthDayCounts[4] = 31;\n                monthDayCounts[5] = 30;\n                monthDayCounts[6] = 31;\n                monthDayCounts[7] = 31;\n                monthDayCounts[8] = 30;\n                monthDayCounts[9] = 31;\n                monthDayCounts[10] = 30;\n                monthDayCounts[11] = 31;\n\n                for (i = 1; i \u003c month; i++) {\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n                }\n\n                // Day\n                timestamp += DAY_IN_SECONDS * (day - 1);\n\n                // Hour\n                timestamp += HOUR_IN_SECONDS * (hour);\n\n                // Minute\n                timestamp += MINUTE_IN_SECONDS * (minute);\n\n                // Second\n                timestamp += second;\n\n                return timestamp;\n        }\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\u0027s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}"},"FeeProcessor.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IFeeReceiver.sol\";\n\nabstract contract FeeProcessor {\n    constructor(address payable receiver, bytes32 serviceId) payable {\n        IFeeReceiver(receiver).processFee{value: msg.value}(serviceId);\n    }\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IBEP20 is IERC20 {}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"},"IFeeReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IFeeReceiver {\n    function processFee(bytes32 serviceId) external payable;\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"XRowVesting.sol":{"content":"// SPDX-License-Identifier: BSD-Protection\npragma solidity ^0.8.6;\n\nimport \u0027./BEP20Token.sol\u0027;\nimport \u0027./DateTime.sol\u0027;\n\ncontract XRowVesting {\n  BEP20Token public token;\n  DateTime public datetime;\n  uint public vestingStartedAt;\n  \n  // Category -\u003e Quater\n  mapping (address =\u003e mapping (uint =\u003e bool)) private isQuaterClaimed;\n  mapping (address =\u003e uint[6]) public quaterDistributions;\n\n  // Vesting Categories\n  address public ACTIVE_SUPPLY;\n  address public ECOSYSTEM_REWARDS; \n  address public MARKETING; \n  address public TEAM; \n  \n  uint public constant TEAM_VESTING_PERIOD_IN_MONTHS = 30;                          // 30 MONTHS\n  uint public constant TEAM_PERIOD_RELEASE_PERCENT = 50;                            // 0.5% PER MONTH\n  uint public teamClaimed;\n\n  uint public constant MARKETING_VESTING_PERIOD_IN_MONTHS = 30;                     // 30 MONTHS\n  uint public constant MARKETING_PERIOD_RELEASE_PERCENT = 50;                       // 0.5% PER MONTH\n  uint public marketingClaimed;\n\n  constructor (\n    address _token, \n    address _datetimeProvider,\n    address _activeSupplyAddress, \n    address _ecosystemRewardsAddress,\n    address _marketingAddress,\n    address _teamAddress\n  ) {\n    token = BEP20Token(_token);\n    datetime = DateTime(_datetimeProvider);\n\n    require(_activeSupplyAddress != address(0));\n    require(_ecosystemRewardsAddress != address(0));\n    require(_marketingAddress != address(0));\n    require(_teamAddress != address(0));\n\n    ACTIVE_SUPPLY = _activeSupplyAddress;\n    ECOSYSTEM_REWARDS = _ecosystemRewardsAddress;\n    MARKETING = _marketingAddress;\n    TEAM = _teamAddress;\n    //                                         Q2\u002723 Q3\u002723 Q4\u002723 Q1\u002724 Q2\u002724 Q3\u002724\n    quaterDistributions[ACTIVE_SUPPLY]      =  [500, 1000, 1000, 1000, 500,  0   ]; // 40%\n    quaterDistributions[ECOSYSTEM_REWARDS]  =  [500, 0,    500,  300,  0,    700 ]; // 20%\n  }\n\n  function start () public {\n    require(vestingStartedAt == 0, \u0027Vesting is already running\u0027);\n    require(token.totalSupply() == 1_000_000_000 * 10 ** token.decimals(), \u0027Token total supply does not match specification requirements\u0027);\n    require(token.balanceOf(address(this)) == 900_000_000 * 10 ** token.decimals(), \u0027Insufficient contract token balance\u0027);\n\n    vestingStartedAt = block.timestamp;\n  }\n\n  function claim () public onlyVestingCategory {\n    if (msg.sender == ACTIVE_SUPPLY || msg.sender == ECOSYSTEM_REWARDS) {\n      _claimQuater(msg.sender);\n      return;\n    }\n\n    if (msg.sender == TEAM || msg.sender == MARKETING) {\n      uint monthsPassed = (block.timestamp - vestingStartedAt) / 30 days;\n\n      if (msg.sender == TEAM) {\n\n        if (monthsPassed \u003e TEAM_VESTING_PERIOD_IN_MONTHS) {\n          monthsPassed = TEAM_VESTING_PERIOD_IN_MONTHS;\n        }\n\n        uint releasableAmount = (token.totalSupply() * (monthsPassed * TEAM_PERIOD_RELEASE_PERCENT) / 10000) - teamClaimed;\n\n        if (releasableAmount \u003e 0) {\n          teamClaimed += releasableAmount;\n          token.transfer(TEAM, releasableAmount);\n        }\n      }\n\n      if (msg.sender == MARKETING) {\n\n        if (monthsPassed \u003e MARKETING_VESTING_PERIOD_IN_MONTHS) {\n          monthsPassed = MARKETING_VESTING_PERIOD_IN_MONTHS;\n        }\n\n        uint releasableAmount = (token.totalSupply() * (monthsPassed * MARKETING_PERIOD_RELEASE_PERCENT) / 10000) - marketingClaimed;\n\n        if (releasableAmount \u003e 0) {\n          marketingClaimed += releasableAmount;\n          token.transfer(MARKETING, releasableAmount);\n        }\n      }\n    }\n  }\n\n  function _claimQuater (address category) private {\n    uint currentYear = datetime.getYear(block.timestamp);\n    uint currentQuater = ((currentYear % 1000) * 10) + ((datetime.getMonth(block.timestamp) + 4) / 4);\n    \n    if (currentQuater \u003e= 232 \u0026\u0026 !isQuaterClaimed[category][232]) {\n      isQuaterClaimed[category][232] = true;\n      token.transfer(category, token.totalSupply() * quaterDistributions[category][0] / 10000);\n    }\n\n    if (currentQuater \u003e= 233 \u0026\u0026 !isQuaterClaimed[category][233]) {\n      isQuaterClaimed[category][233] = true;\n      token.transfer(category, token.totalSupply() * quaterDistributions[category][1] / 10000);\n    }\n\n    if (currentQuater \u003e= 234 \u0026\u0026 !isQuaterClaimed[category][234]) {\n      isQuaterClaimed[category][234] = true;\n      token.transfer(category, token.totalSupply() * quaterDistributions[category][2] / 10000);\n    }\n\n    if (currentQuater \u003e= 241 \u0026\u0026 !isQuaterClaimed[category][241]) {\n      isQuaterClaimed[category][241] = true;\n      token.transfer(category, token.totalSupply() * quaterDistributions[category][3] / 10000);\n    }\n\n    if (currentQuater \u003e= 242 \u0026\u0026 !isQuaterClaimed[category][242]) {\n      isQuaterClaimed[category][242] = true;\n      token.transfer(category, token.totalSupply() * quaterDistributions[category][4] / 10000);\n    }\n\n    if (currentQuater \u003e= 243 \u0026\u0026 !isQuaterClaimed[category][243]) {\n      isQuaterClaimed[category][243] = true;\n      token.transfer(category, token.totalSupply() * quaterDistributions[category][5] / 10000);\n    }\n  }\n\n  modifier onlyVestingCategory {\n    require(\n      msg.sender == ACTIVE_SUPPLY ||\n      msg.sender == ECOSYSTEM_REWARDS ||\n      msg.sender == MARKETING ||\n      msg.sender == TEAM,\n      \u0027Only allowed categories can claim their vestings\u0027\n    ); _;\n  }\n}"}}