/**
 *Submitted for verification at BscScan.com on 2021-07-23
*/

//SPDX-License-Identifier: MIT

/**
                                                PSG STARS TOKEN REWARDS PSG FAN TOKEN                                                                                                   
                                            :;cccJ5Ps*!^_._,^;*rLTTTcLr*;^___^*v2GMggg%Sr_                                           
                                        ^JX888Pv;_-^*J2b#8888888XP4UUUXA8%%%%8bei!:_!FXgQQgX*-                                       
                                     :JG88Gx;'_!JPG##XSDDDD88888, -____  !D%%%%$0gM8yT^_!C8Q&&X*                                     
                                  -TG88bT_-;xH###RR#   _I##OODD8, c88888; ~%%%%%r-*gggg0bi^:TG&&&U;                                  
                                -t88Dj~-^1G#RGGGGGGU -2_ :2###OD, ,rrrr; -PN%%%u  AMgggggggAT:~5g@@D;                                
                              -TO8Dt_-rU#n^--.;eHdb3 'GS;  ^PR#O, ,rr^  f888N%P  E$0Mg4c*ce8Q$e;,t0@@8;                              
                             T88Oi-:uG#x_ *PXv  VXXi   _;Lv_ ^k#, rD88C--3888X- 3%%$0X  vs;-:2Q&Rr_c%@@8^                            
                           :A88e__sm#2: ;PHbXr _PPP* ^XUUXXbzteGbbGDD88XFcX8#_ T%%%8WB*-^Ag8*-!g&&A;,C&@@3                           
                          f88H~-TGD#Rs_ -cPr--TPVyy;:iPPP4Pjzc*!;^^^;!*TtaG888X%%%J-;8g8r-;8gUUg&&&&4^^A@@%_                         
                        -X88E__yDDO#RGGC^   *PPySSSSSS1r^'-_^*c-;zssi *L!^_-^L28%%%z_:3%gb_:8ggQ&&&&@%r,1@@@;                        
                       _H88t-;G8DDO#RGGAA2;--;jySaEv^--;c3P4UXX-iSSSS v8888Gec^-^t8%DT,:**_:DggQQ&&&@@&t^c&@@*                       
                      _D88L-cD88DDO#RGGAHbX4TxPyu~ _r3ESyVP4UX3 3SSSS_^888888888y*'^5%g8XPbMgggQQ&&&@@@@P^!g@@J                      
                      m88v-r88888DD##RGGAbXXUPe^ ^xEEaSykPPUXX*-SSSSS;-G8888888N%%8J_:EggggggggQQ&&&@@@@@h^*@@@r                     
                     e883-*888888DDD##RGGHbX4! ;EPVkkkhPP4UXX4-!SSSSSt c8888888%%%%%%f_^AggggggQQ&&&@@@@@@E^c@@@,                    
                    ;%%#_,R8888888DDO##RGGAV_-FUU4PPPP4UUXXbdr CSSSSSS_-m888888%%%%%B08;_jgggggQQ&&&@@@@@@@c^P@@%                    
                    O%%r-j8888888888DO##RGP'_Eb6XXXXXXXX6bdHV ^SSSSSSSi +88888%%%%%%$Mg%r'xggggQQ&&&@@@@@@@%;;@@@*                   
                   ;%%G_;8888888888888DO#b'_UGGGAHHHHHHAGGGA_-eSSSSSSSy^ C888N%%%%%W0Mgggc_3gggQ&&&&@@@@@@@@t^e@@%                   
                   E%%v'u888888888888888D; 3#RRRGGGGGGGmRRR; vSSSSSyyykE_-U8N%%%%%B0Mgggg%^_8gQQ&&&@@@@@@@@@8;*@@@_                  
                   B%%^_G%N8888888888888P ;DDOOO########OR; LSSSyyykVPPP5--4%%%%%B0MggggggP_cgQ&&&&@@@@@@@@@@!;%@@v                  
                  _0B%_^8%%N888888888888T u888888DDDDDDDG~ +yyyykVhPPPPP43.'k%%%B$0MggggggB,,gQ&&&@@@@@@@@@@@T;G@@k                  
                  ,M08_;8%%%%88888888888!-P888888888888X: ;xx1uuunfCC3333jv--x%W00Mgggggggg;_%&&&&@@@@@@@@@@@F;U@@8                  
                  ,gg8_;N%%%%%%N88888888*-P88888888888T-_JCC33333jj5eee2EEEE;-~#Mgggggggggg;_%&&&@@@@@@@@@@@@J;X@@8                  
                  _ggW,^8%%%%%%%%N888888v-u888888888P^-^EhPPPPP4UUXXXX6bbdHAGi__F%gggggggg0^^Q&&@@@@@@@@@@@@@c;8@@5                  
                   %gg*_H0$%%%%%%%%%%N88G.~8888888P^-_FPPPPPUUUXXX6bbbHAAGGGGmX*__1%gggggQS_F&&@@@@@@@@@@@@@@;!&@@r                  
                   jggj_tMM0$B%%%%%%%%%%%r-e8888y;-_rSPPP4UUei*!*rrrr**ieGGR#OD8S~_^f%ggQ0;^%&@@@@@@@@@@@@@@G!T@@@_                  
                   ^gg%,;NggM00$B%%%%%%%%8^_G8f^-_*ekPP4U2+:*3#%%%%%%WNUv^*2D88888e;_,l8gT,P@@@@@@@@@@@@@@@@T*q@@8                   
                    Gggn:xggggMM00$WB%%%%%8^__'^TEykPPUE~_v8%%%%%8xG00MMggb;^288888%Kc,:^,k@@@@@@@@@@@@@@@@G*c@@@^                   
                    :ggM;^RggggggMM000$$WB%8!_rSSyhP4U3__P%%BB$$BuiJ8gggggg%*_F8%%%%%Bb^^X@@@@@@@@@@@@@@@@@**8@@O                    
                     vgg8^;8ggggggggggMMM00002,;3PPUXh__l0000G4b8Sx38RbGggggN:_E%%W08v^ig@@@@@@@@@@@@@@@@@T*X@@@-                    
                      HQgb^+%ggggggggggggggggM8v:*2X6z__Eggg%f38R#P8G8Pe8gggg^:rgg8t^*R@@@@@@@@@@@@@@@@@@F*j@@@^                     
                       8QQU^r%ggggggggg82Xgggggg8t^;tv__cggggg%gggA%ggWgggggO,,*Uc^cG@@@@@@@8@@@@@@@@@@@t*C@@@*                      
                        P&&8;;Gggggggg38t8uMgggggggOt;___t%gggggggWgggggQQg#;^^~iXQ@@@@@@&HOGuP@@@@@@@gc+X@@@^                       
                         k&&%r;egQgggg8CeFggDUggggggggNPs*^;rvueyPPPPS3tT*~!ia8&@@@@@@@@Gg0bO@@@@@@@@RrL8@@@,                        
             ,.           ;g&&U;*GQ&QQQQQ8yuJuggGggggggggggg%DbPS2eeEhXR8g@@@@@@@@@@@XU8@84@@@@@@@@girE@@@U        __                
            .T;            -U@@Ms;v8&&&&&&&&ug8z%PtQggQQQQ&&&&&&&&&&&&@@@@@@@@@@@@GP@OxXG%@@@@@@@@erv%@@@r         *T-               
     -'''''-*vT^''''''       !0@@8T;t8&&&&&&&&U&kkJ8vgG2P8&&&&&&&@@@@@@@@@&%GbM$c6tUh@4@@@@@@@@@yrT#@@@U-   '''''';iv;-'''''         
       _*Tvvvvvvvvc^_          rM@@Bf!LUg@@@@@@@&@8t&@gz@@@&g@@@gSXU8&sU6gQvb2S@gy&@@@@@@@@@@8Frx%@@@E-      _;cvvvvvvvvT*_          
         -!vvvvvr,               cg@@gPr*xD&@@@@@@@@@@8g@@@&GB@@XXg6j@T488@G%@8@@@@@@@@@@@%Sccyg@@@E-           ^rvvvvv;-            
         -*vc!*Tv^                 _E@@@g4T*iP%@@@@@@@@@@@@@@@@@@gRO&@gg@@@@@@@@@@@@@@gGurTPg@@@%r              ^vT**Tv*             
         ^*:   -^;'                   *b@@@gHxrrt48g@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@WG5Trxdg@@@@j_               _r^-  -_r:            
         -        '                     -*P@@@@0AjT+ctSH80&@@@@@@@@@@@@@@@@g%#P3irTjA0@@@@Qu,                  -        -            
                                            _rSg@@@@@%OU2xicrrLTivJliTcrrcix2XDB@@@@@@8u~                                            
                                                -;T28&@@@@@@@@@Qggggg&@@@@@@@@@@gG3*_                                                
                                   _                    _^rcttPPPXPPPPPexsr;,-                :                                      
                                  _*_                                                        _*_                                     
                                 -*v*                                                       -rv*                                     
                           -^rvvvvvvvivvT*:-                                          -^rivvvvvvvvvi*:-                              
                              -^ivvvvvc^'                       _-                       '^TvvvvvT^_                                 
                               -cvicvv*                        -**                        -rviTiv*-                                  
                               ;r;' _;T^                 ------;vv;------                 ;c^_ _;c^                                  
                              _-       _-                -_;ccTvvvvTcc!_-                _-       __                                 
                                                            -^TvvvvT,                                                                
                                                             ;vi*riv;                                                                
                                                            _!^-  -^*_                                                               
                                                            -        '                                                               
                                                                                                                                     
                                                     ecosystem all football                                                                                
                                                                                                                                     
                             ------             -----                -''                                              ''-            
      XQQQQQQQQQQQQ%Pc- _t8QQQQQQQQQgRi-   *y%QQQQQQQQQ$X+-      'SSr~^^reX^*****P@F****~ 'g1g'     ^@F*****TSP^  rHv!^^;vHF         
      XQQQQQQP33%QQQQQgigQQQQQR**2QQQQQ$_^%QQQQQ%J+i8QQQQQ%^     P@       !3     v@^     -8v 18-    ^@^       1& _@v       e;        
      XQQQQQQ^  JQQQQQQ%QQQQQQQRyuc;_   -gQQQQQQ^ --_^^^^^^_     _GP*_           v@^     PP   PH    ^@^      _8e  F8v~-              
      XQQQQQQQQQQQQQQgt _JRgQQQQQQQQQQ$3JQQQQQQQ  XQQQQQQQQX        _~c1eev_     v@^    eH     XH   ^@evvvFeXX;     -,!vee3!         
      XQQQQQQP3333Jr^  -----^;*iu8QQQQQQQQQQQQQQ^ ^*JQQQQQQX              r@;    v@^   c0FvvvvvF%e  ^@^      -%e          -88        
      XQQQQQQ^         ;gQQQQQPJiyQQQQQQy_8QQQQQQP32gQQQQQQX    -01       ^@!    v@^  rg'       -%3 ^@^       H@ v0_       X8        
      XQQQQQQ^          -+28gQQQQQQQ%At^   ;38QQQQQQ$y*%QQQX     -Te1vvvv1e_     v@^ ^&^         _&c^@^       3@  ~e1FvvvFec  
 */
 
pragma solidity ^0.8.5;

/**
 * Standard SafeMath, stripped down to just add/sub/mul/div
 */
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

/**
 * BEP20 standard interface.
 */
interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * Allows for contract ownership along with multi-address authorization
 */
abstract contract Auth {
    address internal owner;
    mapping (address => bool) internal authorizations;

    constructor(address _owner) {
        owner = _owner;
        authorizations[_owner] = true;
    }

    /**
     * Function modifier to require caller to be contract owner
     */
    modifier onlyOwner() {
        require(isOwner(msg.sender), "!OWNER"); _;
    }

    /**
     * Function modifier to require caller to be authorized
     */
    modifier authorized() {
        require(isAuthorized(msg.sender), "!AUTHORIZED"); _;
    }

    /**
     * Authorize address. Owner only
     */
    function authorize(address adr) public onlyOwner {
        authorizations[adr] = true;
    }

    /**
     * Remove address' authorization. Owner only
     */
    function unauthorize(address adr) public onlyOwner {
        authorizations[adr] = false;
    }

    /**
     * Check if address is owner
     */
    function isOwner(address account) public view returns (bool) {
        return account == owner;
    }

    /**
     * Return address' authorization status
     */
    function isAuthorized(address adr) public view returns (bool) {
        return authorizations[adr];
    }

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    function transferOwnership(address payable adr) public onlyOwner {
        owner = adr;
        authorizations[adr] = true;
        emit OwnershipTransferred(adr);
    }

    event OwnershipTransferred(address owner);
}

interface IDEXFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IDEXRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IDividendDistributor {
    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;
    function setShare(address shareholder, uint256 amount) external;
    function deposit() external payable;
    function process(uint256 gas) external;
}

contract DividendDistributor is IDividendDistributor {
    using SafeMath for uint256;

    address _token;

    struct Share {
        uint256 amount;
        uint256 totalExcluded;
        uint256 totalRealised;
    }

    IBEP20 PSG = IBEP20(0xBc5609612b7C44BEf426De600B5fd1379DB2EcF1);
    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    IDEXRouter router;

    address[] shareholders;
    mapping (address => uint256) shareholderIndexes;
    mapping (address => uint256) shareholderClaims;

    mapping (address => Share) public shares;

    uint256 public totalShares;
    uint256 public totalDividends;
    uint256 public totalDistributed;
    uint256 public dividendsPerShare;
    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;

    uint256 public minPeriod = 1 hours;
    uint256 public minDistribution = 1 * (10 ** 8);

    uint256 currentIndex;

    bool initialized;
    modifier initialization() {
        require(!initialized);
        _;
        initialized = true;
    }

    modifier onlyToken() {
        require(msg.sender == _token); _;
    }

    constructor (address _router) {
        router = _router != address(0)
            ? IDEXRouter(_router)
            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        _token = msg.sender;
    }

    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {
        minPeriod = _minPeriod;
        minDistribution = _minDistribution;
    }

    function setShare(address shareholder, uint256 amount) external override onlyToken {
        if(shares[shareholder].amount > 0){
            distributeDividend(shareholder);
        }

        if(amount > 0 && shares[shareholder].amount == 0){
            addShareholder(shareholder);
        }else if(amount == 0 && shares[shareholder].amount > 0){
            removeShareholder(shareholder);
        }

        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);
        shares[shareholder].amount = amount;
        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
    }

    function deposit() external payable override onlyToken {
        uint256 balanceBefore = PSG.balanceOf(address(this));

        address[] memory path = new address[](2);
        path[0] = WBNB;
        path[1] = address(PSG);

        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amount = PSG.balanceOf(address(this)).sub(balanceBefore);

        totalDividends = totalDividends.add(amount);
        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));
    }

    function process(uint256 gas) external override onlyToken {
        uint256 shareholderCount = shareholders.length;

        if(shareholderCount == 0) { return; }

        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;

        while(gasUsed < gas && iterations < shareholderCount) {
            if(currentIndex >= shareholderCount){
                currentIndex = 0;
            }

            if(shouldDistribute(shareholders[currentIndex])){
                distributeDividend(shareholders[currentIndex]);
            }

            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
    }
    
    function shouldDistribute(address shareholder) internal view returns (bool) {
        return shareholderClaims[shareholder] + minPeriod < block.timestamp
                && getUnpaidEarnings(shareholder) > minDistribution;
    }

    function distributeDividend(address shareholder) internal {
        if(shares[shareholder].amount == 0){ return; }

        uint256 amount = getUnpaidEarnings(shareholder);
        if(amount > 0){
            totalDistributed = totalDistributed.add(amount);
            PSG.transfer(shareholder, amount);
            shareholderClaims[shareholder] = block.timestamp;
            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);
            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
        }
    }
    
    function claimDividend(address shareholder) external onlyToken{
        distributeDividend(shareholder);
    }

    function getUnpaidEarnings(address shareholder) public view returns (uint256) {
        if(shares[shareholder].amount == 0){ return 0; }

        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);
        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;

        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }

        return shareholderTotalDividends.sub(shareholderTotalExcluded);
    }

    function getCumulativeDividends(uint256 share) internal view returns (uint256) {
        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);
    }

    function addShareholder(address shareholder) internal {
        shareholderIndexes[shareholder] = shareholders.length;
        shareholders.push(shareholder);
    }

    function removeShareholder(address shareholder) internal {
        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];
        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];
        shareholders.pop();
    }
}

contract PSGSTARS is IBEP20, Auth {
    using SafeMath for uint256;

    address PSG = 0xBc5609612b7C44BEf426De600B5fd1379DB2EcF1;
    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    address DEAD = 0x000000000000000000000000000000000000dEaD;
    address ZERO = 0x0000000000000000000000000000000000000000;

    string constant _name = "PSG STARS";
    string constant _symbol = "PSG STARS";
    uint8 constant _decimals = 9;

    uint256 _totalSupply = 1000000000000 * (10 ** _decimals);
    uint256 public _maxTxAmount = _totalSupply / 20; // 5%

    mapping (address => uint256) _balances;
    mapping (address => mapping (address => uint256)) _allowances;

    mapping (address => bool) isFeeExempt;
    mapping (address => bool) isTxLimitExempt;
    mapping (address => bool) isDividendExempt;

    uint256 liquidityFee = 200;
    uint256 buybackFee = 0;
    uint256 reflectionFee = 800;
    uint256 marketingFee = 500;
    uint256 totalFee = 1500;
    uint256 feeDenominator = 10000;

    address public autoLiquidityReceiver;
    address public marketingFeeReceiver;

    uint256 targetLiquidity = 25;
    uint256 targetLiquidityDenominator = 100;

    IDEXRouter public router;
    address public pair;

    uint256 public launchedAt;

    uint256 buybackMultiplierNumerator = 200;
    uint256 buybackMultiplierDenominator = 100;
    uint256 buybackMultiplierTriggeredAt;
    uint256 buybackMultiplierLength = 30 minutes;

    bool public autoBuybackEnabled = false;
    bool public autoBuybackMultiplier = true;
    uint256 autoBuybackCap;
    uint256 autoBuybackAccumulator;
    uint256 autoBuybackAmount;
    uint256 autoBuybackBlockPeriod;
    uint256 autoBuybackBlockLast;

    DividendDistributor distributor;
    uint256 distributorGas = 500000;

    bool public swapEnabled = true;
    uint256 public swapThreshold = _totalSupply / 200; // 5%
    bool inSwap;
    modifier swapping() { inSwap = true; _; inSwap = false; }

    constructor () Auth(msg.sender) {
        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));
        _allowances[address(this)][address(router)] = type(uint256).max;

        distributor = new DividendDistributor(address(router));
        
        address _presaler = 0x611ba8138e8A77e48d1e9c9Df1d472671B175301;
        isFeeExempt[_presaler] = true;
        isTxLimitExempt[_presaler] = true;
        isDividendExempt[pair] = true;
        isDividendExempt[address(this)] = true;
        isDividendExempt[DEAD] = true;

        autoLiquidityReceiver = msg.sender;
        marketingFeeReceiver = msg.sender;

        _balances[_presaler] = _totalSupply;
        emit Transfer(address(0), _presaler, _totalSupply);
    }

    receive() external payable { }

    function totalSupply() external view override returns (uint256) { return _totalSupply; }
    function decimals() external pure override returns (uint8) { return _decimals; }
    function symbol() external pure override returns (string memory) { return _symbol; }
    function name() external pure override returns (string memory) { return _name; }
    function getOwner() external view override returns (address) { return owner; }
    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function approveMax(address spender) external returns (bool) {
        return approve(spender, type(uint256).max);
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        return _transferFrom(msg.sender, recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        if(_allowances[sender][msg.sender] != type(uint256).max){
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, "Insufficient Allowance");
        }

        return _transferFrom(sender, recipient, amount);
    }

    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
        if(inSwap){ return _basicTransfer(sender, recipient, amount); }
        
        checkTxLimit(sender, amount);

        if(shouldSwapBack()){ swapBack(); }
        if(shouldAutoBuyback()){ triggerAutoBuyback(); }

        if(!launched() && recipient == pair){ require(_balances[sender] > 0); launch(); }

        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");

        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, recipient, amount) : amount;
        _balances[recipient] = _balances[recipient].add(amountReceived);

        if(!isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }
        if(!isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }

        try distributor.process(distributorGas) {} catch {}

        emit Transfer(sender, recipient, amountReceived);
        return true;
    }
    
    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function checkTxLimit(address sender, uint256 amount) internal view {
        require(amount <= _maxTxAmount || isTxLimitExempt[sender], "TX Limit Exceeded");
    }

    function shouldTakeFee(address sender) internal view returns (bool) {
        return !isFeeExempt[sender];
    }

    function getTotalFee(bool selling) public view returns (uint256) {
        if(launchedAt + 1 >= block.number){ return feeDenominator.sub(1); }
        if(selling && buybackMultiplierTriggeredAt.add(buybackMultiplierLength) > block.timestamp){ return getMultipliedFee(); }
        return totalFee;
    }

    function getMultipliedFee() public view returns (uint256) {
        uint256 remainingTime = buybackMultiplierTriggeredAt.add(buybackMultiplierLength).sub(block.timestamp);
        uint256 feeIncrease = totalFee.mul(buybackMultiplierNumerator).div(buybackMultiplierDenominator).sub(totalFee);
        return totalFee.add(feeIncrease.mul(remainingTime).div(buybackMultiplierLength));
    }

    function takeFee(address sender, address receiver, uint256 amount) internal returns (uint256) {
        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(feeDenominator);

        _balances[address(this)] = _balances[address(this)].add(feeAmount);
        emit Transfer(sender, address(this), feeAmount);

        return amount.sub(feeAmount);
    }

    function shouldSwapBack() internal view returns (bool) {
        return msg.sender != pair
        && !inSwap
        && swapEnabled
        && _balances[address(this)] >= swapThreshold;
    }

    function swapBack() internal swapping {
        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;
        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);
        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = WBNB;

        uint256 balanceBefore = address(this).balance;

        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amountToSwap,
            0,
            path,
            address(this),
            block.timestamp
        );
        uint256 amountBNB = address(this).balance.sub(balanceBefore);
        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));
        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);
        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);
        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);

        try distributor.deposit{value: amountBNBReflection}() {} catch {}
        (bool success, /* bytes memory data */) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}("");
        require(success, "receiver rejected ETH transfer");

        if(amountToLiquify > 0){
            router.addLiquidityETH{value: amountBNBLiquidity}(
                address(this),
                amountToLiquify,
                0,
                0,
                autoLiquidityReceiver,
                block.timestamp
            );
            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);
        }
    }

    function shouldAutoBuyback() internal view returns (bool) {
        return msg.sender != pair
            && !inSwap
            && autoBuybackEnabled
            && autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number
            && address(this).balance >= autoBuybackAmount;
    }

    function triggerManualBuyback(uint256 amount, bool triggerBuybackMultiplier) external authorized {
        buyTokens(amount, DEAD);
        if(triggerBuybackMultiplier){
            buybackMultiplierTriggeredAt = block.timestamp;
            emit BuybackMultiplierActive(buybackMultiplierLength);
        }
    }
    
    function clearBuybackMultiplier() external authorized {
        buybackMultiplierTriggeredAt = 0;
    }

    function triggerAutoBuyback() internal {
        buyTokens(autoBuybackAmount, DEAD);
        if(autoBuybackMultiplier){
            buybackMultiplierTriggeredAt = block.timestamp;
            emit BuybackMultiplierActive(buybackMultiplierLength);
        }
        autoBuybackBlockLast = block.number;
        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);
        if(autoBuybackAccumulator > autoBuybackCap){ autoBuybackEnabled = false; }
    }

    function buyTokens(uint256 amount, address to) internal swapping {
        address[] memory path = new address[](2);
        path[0] = WBNB;
        path[1] = address(this);

        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(
            0,
            path,
            to,
            block.timestamp
        );
    }

    function setAutoBuybackSettings(bool _enabled, uint256 _cap, uint256 _amount, uint256 _period, bool _autoBuybackMultiplier) external authorized {
        autoBuybackEnabled = _enabled;
        autoBuybackCap = _cap;
        autoBuybackAccumulator = 0;
        autoBuybackAmount = _amount;
        autoBuybackBlockPeriod = _period;
        autoBuybackBlockLast = block.number;
        autoBuybackMultiplier = _autoBuybackMultiplier;
    }

    function setBuybackMultiplierSettings(uint256 numerator, uint256 denominator, uint256 length) external authorized {
        require(numerator / denominator <= 2 && numerator > denominator);
        buybackMultiplierNumerator = numerator;
        buybackMultiplierDenominator = denominator;
        buybackMultiplierLength = length;
    }

    function launched() internal view returns (bool) {
        return launchedAt != 0;
    }

    function launch() internal {
        launchedAt = block.number;
    }

    function setTxLimit(uint256 amount) external authorized {
        require(amount >= _totalSupply / 1000);
        _maxTxAmount = amount;
    }

    function setIsDividendExempt(address holder, bool exempt) external authorized {
        require(holder != address(this) && holder != pair);
        isDividendExempt[holder] = exempt;
        if(exempt){
            distributor.setShare(holder, 0);
        }else{
            distributor.setShare(holder, _balances[holder]);
        }
    }

    function setIsFeeExempt(address holder, bool exempt) external authorized {
        isFeeExempt[holder] = exempt;
    }

    function setIsTxLimitExempt(address holder, bool exempt) external authorized {
        isTxLimitExempt[holder] = exempt;
    }

    function setFees(uint256 _liquidityFee, uint256 _buybackFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _feeDenominator) external authorized {
        liquidityFee = _liquidityFee;
        buybackFee = _buybackFee;
        reflectionFee = _reflectionFee;
        marketingFee = _marketingFee;
        totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(_marketingFee);
        feeDenominator = _feeDenominator;
    }

    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver) external authorized {
        autoLiquidityReceiver = _autoLiquidityReceiver;
        marketingFeeReceiver = _marketingFeeReceiver;
    }

    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {
        swapEnabled = _enabled;
        swapThreshold = _amount;
    }

    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {
        targetLiquidity = _target;
        targetLiquidityDenominator = _denominator;
    }

    function manualSend() external authorized {
        uint256 contractETHBalance = address(this).balance;
        payable(marketingFeeReceiver).transfer(contractETHBalance);
    }
    
    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorized {
        distributor.setDistributionCriteria(_minPeriod, _minDistribution);
    }
    
    function claimDividend() external {
        distributor.claimDividend(msg.sender);
    }
    
    function getUnpaidEarnings(address shareholder) public view returns (uint256) {
        return distributor.getUnpaidEarnings(shareholder);
    } 

    function setDistributorSettings(uint256 gas) external authorized {
        require(gas < 750000);
        distributorGas = gas;
    }
    
    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));
    }

    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {
        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());
    }

    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {
        return getLiquidityBacking(accuracy) > target;
    }
    
    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);
    event BuybackMultiplierActive(uint256 duration);
}