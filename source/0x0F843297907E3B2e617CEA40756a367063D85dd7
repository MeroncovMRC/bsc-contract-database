// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract Nibirium is IERC20, Ownable {
    mapping(address => uint256) private _rOwned;
    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _isExcludedFromReward;
    address[] private _excludedFromRewardAddresses;

    uint8 private constant _decimals = 9;
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 1000000000 * 10**_decimals;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
    string private constant _name = "Nibirium";
    string private constant _symbol = "NIUM";

    address public constant burnWallet = 0x000000000000000000000000000000000000dEaD;
    address public houseWallet = 0xa4953960327F7364Ea272C287902fE792d34610a;

    // 7% BUY Tax
    uint8 private buyHouseTax = 5;
    uint8 private buyBurnTax = 0;
    uint8 private buyReflectionTax = 2;

    // 14% SELL Tax BRONZE
    uint8 private sellHouseTaxBRONZE = 10;
    uint8 private sellBurnTaxBRONZE = 2;
    uint8 private sellReflectionTaxBRONZE = 2;

    // 12% SELL Tax SILVER
    uint8 private sellHouseTaxSILVER = 8;
    uint8 private sellBurnTaxSILVER = 2;
    uint8 private sellReflectionTaxSILVER = 2;

    // 9% SELL Tax GOLD
    uint8 private sellHouseTaxGOLD = 5;
    uint8 private sellBurnTaxGOLD = 2;
    uint8 private sellReflectionTaxGOLD = 2;

    // 7% SELL Tax PLATINUM
    uint8 private sellHouseTaxPLATINUM = 5;
    uint8 private sellBurnTaxPLATINUM = 0;
    uint8 private sellReflectionTaxPLATINUM = 2;

    uint256 private _houseFee = 0;
    uint256 private _burnFee = 0;
    uint256 private _reflectionFee = 0;

    mapping(address => uint256) private _userRegistryTime;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    bool private _inSwapAndLiquify;
    uint256 private constant minimumTokensBeforeSwap = 200000 * 10**_decimals;

    event SwapTokensForBNB(uint256 amountIn, address[] path, address recipient);
    event ReflectedToHolders(uint256 amount);
    event SentToHouseWallet(uint256 amount);
    event SentToBurnWallet(uint256 amount);

    modifier lockTheSwap() {
        _inSwapAndLiquify = true;
        _;
        _inSwapAndLiquify = false;
    }

    constructor() {
        _rOwned[_msgSender()] = _rTotal;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;

        _isExcludedFromFee[_msgSender()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[houseWallet] = true;
        excludeFromReward(burnWallet, true);

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function transferOwnership(address newOwner) public override onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _isExcludedFromFee[owner()] = false;
        _isExcludedFromFee[newOwner] = true;
        _transferOwnership(newOwner);
    }

    function _removeAllFee() private {
        _houseFee = _burnFee = _reflectionFee = 0;
    }

    function _setBuyTax() private {
        _houseFee = buyHouseTax;
        _burnFee = buyBurnTax;
        _reflectionFee = buyReflectionTax;
    }

    function _setBronzeTax() private {
        _houseFee = sellHouseTaxBRONZE;
        _burnFee = sellBurnTaxBRONZE;
        _reflectionFee = sellReflectionTaxBRONZE;
    }

    function _setSilverTax() private {
        _houseFee = sellHouseTaxSILVER;
        _burnFee = sellBurnTaxSILVER;
        _reflectionFee = sellReflectionTaxSILVER;
    }

    function _setGoldTax() private {
        _houseFee = sellHouseTaxGOLD;
        _burnFee = sellBurnTaxGOLD;
        _reflectionFee = sellReflectionTaxGOLD;
    }

    function _setPlatinumTax() private {
        _houseFee = sellHouseTaxPLATINUM;
        _burnFee = sellBurnTaxPLATINUM;
        _reflectionFee = sellReflectionTaxPLATINUM;
    }

    function changeBuyTax(uint8 _buyHouseTax, uint8 _buyBurnTax, uint8 _buyReflectionTax) external onlyOwner returns (bool)
    {
        buyHouseTax = _buyHouseTax;
        buyBurnTax = _buyBurnTax;
        buyReflectionTax = _buyReflectionTax;

        return true;
    }

    function changeSellTaxBRONZE(uint8 _sellHouseTaxBRONZE, uint8 _sellBurnTaxBRONZE, uint8 _sellReflectionTaxBRONZE) external onlyOwner returns (bool)
    {
        sellHouseTaxBRONZE = _sellHouseTaxBRONZE;
        sellBurnTaxBRONZE = _sellBurnTaxBRONZE;
        sellReflectionTaxBRONZE = _sellReflectionTaxBRONZE;

        return true;
    }

    function changeSellTaxSILVER(uint8 _sellHouseTaxSILVER, uint8 _sellBurnTaxSILVER, uint8 _sellReflectionTaxSILVER) external onlyOwner returns (bool)
    {
        sellHouseTaxSILVER = _sellHouseTaxSILVER;
        sellBurnTaxSILVER = _sellBurnTaxSILVER;
        sellReflectionTaxSILVER = _sellReflectionTaxSILVER;

        return true;
    }

    function changeSellTaxGOLD(uint8 _sellHouseTaxGOLD, uint8 _sellBurnTaxGOLD, uint8 _sellReflectionTaxGOLD) external onlyOwner returns (bool)
    {
        sellHouseTaxGOLD = _sellHouseTaxGOLD;
        sellBurnTaxGOLD = _sellBurnTaxGOLD;
        sellReflectionTaxGOLD = _sellReflectionTaxGOLD;

        return true;
    }

    function changeSellTaxPLATNIUM(uint8 _sellHouseTaxPLATINUM, uint8 _sellBurnTaxPLATINUM, uint8 _sellReflectionTaxPLATINUM) external onlyOwner returns (bool)
    {
        sellHouseTaxPLATINUM = _sellHouseTaxPLATINUM;
        sellBurnTaxPLATINUM = _sellBurnTaxPLATINUM;
        sellReflectionTaxPLATINUM = _sellReflectionTaxPLATINUM;

        return true;
    }

    function changeHouseWallet(address _houseWallet) external onlyOwner returns (bool)
    {
        houseWallet = _houseWallet;
        return true;
    }

    function getBuyTax() external view returns (uint8, uint8, uint8){
        return (buyHouseTax, buyBurnTax, buyReflectionTax);
    }

    function getSellTaxBRONZE() external view returns (uint8, uint8, uint8){
        return (sellHouseTaxBRONZE, sellBurnTaxBRONZE, sellReflectionTaxBRONZE);
    }

    function getSellTaxSILVER() external view returns (uint8, uint8, uint8)
    {
        return (sellHouseTaxSILVER, sellBurnTaxSILVER, sellReflectionTaxSILVER);
    }

    function getSellTaxGOLD() external view returns (uint8, uint8, uint8)
    {
        return (sellHouseTaxGOLD, sellBurnTaxGOLD, sellReflectionTaxGOLD);
    }

    function getSellTaxPLATNIUM() external view returns (uint8, uint8, uint8)
    {
        return (sellHouseTaxPLATINUM, sellBurnTaxPLATINUM, sellReflectionTaxPLATINUM);
    }

    function name() external pure returns (string memory) {
        return _name;
    }

    function symbol() external pure returns (string memory) {
        return _symbol;
    }

    function decimals() external pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() external pure returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view returns (uint256) {
        if (_isExcludedFromReward[account]) {
            return _tOwned[account];
        }

        return _tokenFromReflection(_rOwned[account]);
    }

    function tokensBurnt() external view returns (uint256) {
        return balanceOf(burnWallet);
    }

    function _tokenFromReflection(uint256 rAmount) private view returns (uint256)
    {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate = _getRate();

        return rAmount / currentRate;
    }

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();

        return rSupply / tSupply;
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;

        for (uint256 i = 0; i < _excludedFromRewardAddresses.length; i++) {
            if (_rOwned[_excludedFromRewardAddresses[i]] > rSupply || _tOwned[_excludedFromRewardAddresses[i]] > tSupply)
            {
                return (_rTotal, _tTotal);
            }
            rSupply = rSupply - _rOwned[_excludedFromRewardAddresses[i]];
            tSupply = tSupply - _tOwned[_excludedFromRewardAddresses[i]];
        }

        if (rSupply < (_rTotal / _tTotal)) return (_rTotal, _tTotal);

        return (rSupply, tSupply);
    }

    function transfer(address recipient, uint256 amount) external override returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);

        return true;
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(balanceOf(from) >= amount, "TokenNIBIRIUM: insufficient balance");
        require(from != address(0),"TokenNIBIRIUM: transfer from the zero address");
        require(to != address(0), "TokenNIBIRIUM: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        bool takeFee;

        // dex tx from not excluded from fee address, now fees should be applied
        if((from == uniswapV2Pair || to == uniswapV2Pair) && !_isExcludedFromFee[from] && !_isExcludedFromFee[to])
        {
            takeFee = true;
            if(from == uniswapV2Pair) // buy tx
            {
                if (_userRegistryTime[to] == 0) {
                    _userRegistryTime[to] = block.timestamp;
                }
                _setBuyTax();
            }
            else // sell tx
            {
                if (!_inSwapAndLiquify)
                {
                    uint256 contractTokenBalance = balanceOf(address(this));
                    if (contractTokenBalance >= minimumTokensBeforeSwap)
                    {
                        _swapTokensForBnb(contractTokenBalance, houseWallet);
                    }
                }
                if (_userRegistryTime[from] == 0) // sell after inter wallet transfer
                {
                    _userRegistryTime[from] = block.timestamp;
                    _setBronzeTax(); 
                }
                else
                {
                    uint256 timeDifference = block.timestamp - _userRegistryTime[from];

                    if (timeDifference < 7 days) { _setBronzeTax(); }
                    else if (timeDifference >= 7 days && timeDifference < 14 days) { _setSilverTax(); }
                    else if (timeDifference >= 14 days && timeDifference < 21 days) { _setGoldTax(); }
                    else { _setPlatinumTax(); } // (timeDifference >= 21 days)
                }
            }
        }
        else
        {
            takeFee = false;
        }

        _tokenTransfer(from, to, amount, takeFee);
    }

    function _swapTokensForBnb(uint256 tokenAmount, address recipient) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            recipient,
            block.timestamp
        );

        emit SwapTokensForBNB(tokenAmount, path, recipient);
    }

    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if (!takeFee) _removeAllFee();

        if (_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient])
        {
            _transferFromExcluded(sender, recipient, amount);
        }
        else if (!_isExcludedFromReward[sender] && _isExcludedFromReward[recipient])
        {
            _transferToExcluded(sender, recipient, amount);
        }
        else if (!_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient])
        {
            _transferStandard(sender, recipient, amount);
        }
        else if (_isExcludedFromReward[sender] && _isExcludedFromReward[recipient])
        {
            _transferBothExcluded(sender, recipient, amount);
        }
        else
        {
            _transferStandard(sender, recipient, amount);
        }
    }

    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tHouse) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tBurn, tHouse);

        _tOwned[sender] -= tAmount;
        _rOwned[sender] -= rAmount;
        _rOwned[recipient] += rTransferAmount;

        uint256 amountBurn = _takeBurn(tBurn);
        if(amountBurn>0){ emit Transfer(sender, burnWallet, amountBurn); }
        uint256 amountHouse = _takeHouse(tHouse);
        if(amountHouse>0){ emit Transfer(sender, address(this), amountHouse); }
        _reflectFee(rFee, tFee);

        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tHouse) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tBurn, tHouse);

        _rOwned[sender] -= rAmount;
        _tOwned[recipient] += tTransferAmount;
        _rOwned[recipient] += rTransferAmount;

        uint256 amountBurn = _takeBurn(tBurn);
        if(amountBurn>0){ emit Transfer(sender, burnWallet, amountBurn); }
        uint256 amountHouse = _takeHouse(tHouse);
        if(amountHouse>0){ emit Transfer(sender, address(this), amountHouse); }
        _reflectFee(rFee, tFee);

        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tHouse) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tBurn, tHouse);

        _rOwned[sender] -= rAmount;
        _rOwned[recipient] += rTransferAmount;

        uint256 amountBurn = _takeBurn(tBurn);
        if(amountBurn>0){ emit Transfer(sender, burnWallet, amountBurn); }
        uint256 amountHouse = _takeHouse(tHouse);
        if(amountHouse>0){ emit Transfer(sender, address(this), amountHouse); }
        _reflectFee(rFee, tFee);

        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tHouse) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tBurn, tHouse);

        _tOwned[sender] -= tAmount;
        _rOwned[sender] -= rAmount;
        _tOwned[recipient] += tTransferAmount;
        _rOwned[recipient] += rTransferAmount;

        uint256 amountBurn = _takeBurn(tBurn);
        if(amountBurn>0){ emit Transfer(sender, burnWallet, amountBurn); }
        uint256 amountHouse = _takeHouse(tHouse);
        if(amountHouse>0){ emit Transfer(sender, address(this), amountHouse); }
        _reflectFee(rFee, tFee);

        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256){
        uint256 tFee = _calculateReflectionFee(tAmount);
        uint256 tBurn = _calculateBurnFee(tAmount);
        uint256 tHouse = _calculateHouseFee(tAmount);
        uint256 tTransferAmount = tAmount - tFee - tBurn - tHouse;

        return (tTransferAmount, tFee, tBurn, tHouse);
    }

    function _calculateReflectionFee(uint256 _amount) private view returns (uint256)
    {
        return (_amount * _reflectionFee) / (100);
    }

    function _calculateBurnFee(uint256 _amount) private view returns (uint256)
    {
        return (_amount * _burnFee) / 100;
    }

    function _calculateHouseFee(uint256 _amount) private view returns (uint256)
    {
        return (_amount * _houseFee) / 100;
    }

    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tBurn, uint256 tHouse) private view returns (uint256, uint256, uint256 )
    {
        uint256 currentRate = _getRate();
        uint256 rAmount = tAmount * currentRate;
        uint256 rFee = tFee * currentRate;
        uint256 rBurn = tBurn * currentRate;
        uint256 rHouse = tHouse * currentRate;
        uint256 rTransferAmount = rAmount - rFee - rBurn - rHouse;

        return (rAmount, rTransferAmount, rFee);
    }

    function _takeBurn(uint256 tBurn) private returns (uint256){
        uint256 currentRate = _getRate();
        uint256 rBurn = tBurn * currentRate;
        _rOwned[burnWallet] += rBurn;
        if (_isExcludedFromReward[burnWallet])
        { 
            _tOwned[burnWallet] += tBurn;
            emit SentToBurnWallet(tBurn);
            return tBurn;
        }
        else
        {
            emit SentToBurnWallet(_tokenFromReflection(rBurn)); 
            return (_tokenFromReflection(rBurn));
        }
    }

    function _takeHouse(uint256 tHouse) private returns (uint256){
        uint256 currentRate = _getRate();
        uint256 rHouse = tHouse * currentRate;
        _rOwned[address(this)] += rHouse;
        if (_isExcludedFromReward[address(this)])
        { 
            _tOwned[address(this)] += tHouse;
            emit SentToHouseWallet(tHouse);
            return tHouse;
        }
        else
        {
            emit SentToHouseWallet(_tokenFromReflection(rHouse)); 
            return (_tokenFromReflection(rHouse));
        }
    }

    function _reflectFee(uint256 rFee, uint256 tFee) private returns (uint256){
        _rTotal -= rFee;
        _tFeeTotal += tFee;

        emit ReflectedToHolders(tFee);
        return tFee;
    }

    function allowance(address ownerAddress, address spenderAddress) public view returns (uint256)
    {
        return _allowances[ownerAddress][spenderAddress];
    }

    function approve(address spender, uint256 amount) external returns (bool)
    {
        _approve(_msgSender(), spender, amount);

        return true;
    }

    function _approve(address ownerAddress, address spenderAddress, uint256 amount) private {
        require(ownerAddress != address(0), "TokenNIBIRIUM: approve from the zero address");
        require(spenderAddress != address(0), "TokenNIBIRIUM: approve to the zero address");

        _allowances[ownerAddress][spenderAddress] = amount;

        emit Approval(ownerAddress, spenderAddress, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        require(allowance(sender, _msgSender()) >= amount, "TokenNIBIRIUM: insufficient allowance");

        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), (_allowances[sender][_msgSender()] - amount));

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool)
    {
        _approve(_msgSender(), spender, (_allowances[_msgSender()][spender] + addedValue));

        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool)
    {
        _approve(_msgSender(), spender, (_allowances[_msgSender()][spender] - subtractedValue));

        return true;
    }

    function excludeFromReward(address account, bool flag) public onlyOwner {
        if(flag)
        {
            require(!_isExcludedFromReward[account], "Account is already excluded");
            if (_rOwned[account] > 0) {
                _tOwned[account] = _tokenFromReflection(_rOwned[account]);
            }
            _isExcludedFromReward[account] = true;
            _excludedFromRewardAddresses.push(account);
        }
        else
        {
            require(_isExcludedFromReward[account], "Account is already included");
            for (uint256 i = 0; i < _excludedFromRewardAddresses.length; i++) 
            {
                if (_excludedFromRewardAddresses[i] == account) {
                    _excludedFromRewardAddresses[i] = _excludedFromRewardAddresses[_excludedFromRewardAddresses.length - 1];
                    _tOwned[account] = 0;
                    _isExcludedFromReward[account] = false;
                    _excludedFromRewardAddresses.pop();
                    break;
                }
            }
        }
    }

    function isExcludedFromReward(address account) external view returns (bool) {
        return _isExcludedFromReward[account];
    }

    function totalReflectionsDistributed() external view returns (uint256) {
        return _tFeeTotal;
    }

    function reflectToHolders(uint256 distributionAmount) external {
        address sender = _msgSender();
        _reflectToHolders(sender, distributionAmount);
    }

    function _reflectToHolders(address sender, uint256 tAmount) private {
        require(balanceOf(sender) >= tAmount, "TokenNIBIRIUM: insufficient balance");
        require(!_isExcludedFromReward[sender], "TokenNIBIRIUM: excluded address cannot call this function");
        uint256 rAmount = tAmount * _getRate();

        _rOwned[sender] -= rAmount;
        _reflectFee(rAmount, tAmount);
    }

    function isExcludedFromFee(address account) external view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function excludeFromFee(address account, bool flag) external onlyOwner returns (bool) 
    {
        _isExcludedFromFee[account] = flag;
        return true;
    }

    function checkHoldingTime(address account) external view returns (uint256) {
        if(_userRegistryTime[account] == 0)
        {
            return 0;
        }
        else
        {
            uint256 holdingTime = block.timestamp - _userRegistryTime[account];
            return holdingTime;
        }
    }
}