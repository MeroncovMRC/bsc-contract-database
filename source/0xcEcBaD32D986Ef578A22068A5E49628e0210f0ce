// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/Airdrop BUSD/AirDropBUSD.sol


pragma solidity ^0.8.0;



contract BUSDAirdrop is Ownable {
    IERC20 public busdToken;
    address[] public wallets;
    uint256[] public amounts;

    constructor(address _busdTokenAddress) {
        busdToken = IERC20(_busdTokenAddress);
        initializeAirdrop();
    }

    function initializeAirdrop() private {
        wallets = [
            0x57150d3658Ea3647B3bC9129d544Bf1C20F6737a,
            0x62773e7795055C320b9901b79c4A25B615912686,
            0x2d7e37909Aff1b6DE11f5C06f86554B5eFD2d1D0,
            0xB03454b9fAaf0939b971f4ab5bEd4CD337587c05,
            0xC12ca4856dA6AF1e778B3ce7B08cec95102414a1,
            0x6b944DE7bE11c5fC758CA1dCb464C6d2b77ec16b,
            0xb3f7648CE79a62A50d86dD79C25BAA46A78e9Da7,
            0x4c4F5C40b7d7694f42c3B7F9391FA089FECF0b22,
            0x202b2C7E44F05214A255cFc3B09Fdf12C90abAe0,
            0xA8151e99aF9b923800efff9EbE9fE628902Cf6f0,
            0x7f6942dA330139D8Efb4f6726Cd30D4B20d20ea9,
            0x9BE64Eb6c4a1a7666e432567ed9Db3543d053982,
            0xb1F16e2750BEdE60FabF144248Fbb7c2dADc4197,
            0x4a6505564aBb27f5c1228757D75A78376DB9104F,
            0x4c58DfB192C5C62B0Ff543D22671B14487635F2b,
            0x4459d20cA17614B704A903dACBf483eD488c1566,
            0x008D6F5fE7CB74014850Ffe0F39BA9945793521b,
            0x304F68e03a800fd4a5ED9c2Fc02A68C6C0196290,
            0x1077B273A6d0033533B4e5DF93958F8c032A5E5e,
            0x99dB742f35abE159D6290cA9F1Ad9a177d358579,
            0x67AFa31D94fb6275fdeeE20f158780570aB7EA2D,
            0x94Bc6E060b54b5C32859d52CD5173B4abE649427,
            0x6b4AC9237CEb1d171f30598CAa7dECC79E8e7d85,
            0xC82af02FaAB13e934445D4ec8b34E0CC1bb85207,
            0x1DdC0cE948d2Ffb66A06E9646bd71b4504898b5A,
            0x239da0613468328DdC268B77aD6913Cb975Aa118,
            0xC88CE03c2DAC2e1091dAC6970Df97fE738816fF0,
            0xD38B0a61993fDAb901348733FD471a1d450ceF89,
            0xdD8a56765f17F0da7da8784F734731471C73B287,
            0xdCcc04F86eC44EAc30cf4BE9653e267b07f00000,
            0x4e86cF94cc7c9379367841FF95cf676E500FB16C,
            0xA7EEbc5D337f9F489522dBd1d14b6742dC7Adc7e,
            0x8DC8Eae182A5a8bA17785720460E1fE873756d3b,
            0x769FaD314c096646d4fd1824bd85484E12c18575,
            0x1261E60Ad19387646e8065808973889aDa348270,
            0xD3157676936a3461d66DD577306BcB0b33019720,
            0xd1131556881f6B04a20d11E33048C89554c422c8,
            0x89CE51F36c048A3CfdeA93a33a2370a3f24C2A33,
            0x8982e05D990aCb9a38b064FEAeDed713Cf4962a5,
            0x99c65A44d16EF27FDF61A1a38AA244874dE70e33,
            0xcbd90D5F340d1d6F84976740758E5101BA3c2009,
            0xc4B1D24dB3eBC8Ee5844ef1901f3e00B7C428ec1,
            0x9530ECAa87DC23d68d6Acf967d3E476cAb22b62a,
            0xE12758C791878EeEBD18E29a71d6a55b0cF49bF7,
            0x2bF6CbCC183136e6C83E7E5064691A1dF8aca537,
            0x1d6defFf42779Ecf17f96d6fDefA8e21A009348B,
            0x1d43c68232A63Aa916963F4E3f4C4E9E618Aed0e,
            0x3245545fab6D9CA700CFa8C80bb8b6D45a4D393D,
            0xF6281A0b3c46578cfA0AE576b114fB58652adFAf,
            0xD0977852502804DEaDa61518E37505994A38921e,
            0x7d78964b1f4fE625b5e994cA657d97B9fB0FdA9e,
            0x79243A2e097B494612F7d68E69E337e3dbEcbbC4,
            0x05c2872Ec87c0aBbC708fe312020006dcC8d7d78,
            0x5316ba3975199ee517A0A22266f4eE2eaa53CDd8,
            0xC42fA50D3E3379187679C488226FF278E3A320D2,
            0x30635Aa45BddfEd7935754f828330022c2365434,
            0xC1326Bd68F2d1fC3587730599c4518dc7c772D19,
            0x1cF74d3a684569cCB83d096A76B3444b5457ea7C,
            0x80e1E694B3FE3a28febB93751360eeb974e0935b,
            0xCB6a0478c15768dEC8cBD49CC6C317A1097C640F,
            0x95Aaf2bA084dADAc9db52FE8d9588837580C6422,
            0xb4d0F37B95d7041b7C5Df02a7a36209616bEbF42,
            0x31F5fA228f8EB3dF58F4f64Cb1d62E594D1779De,
            0xbba544746338ac3F581a884E7E32d28A1fA2997D,
            0xF3e9d9174Cb8a7BD877fbDD02420aaD571D5a120,
            0xeE4db93eE6759c0E1306F77C3809aa06D436E927,
            0xa83fba246707B1335c3729208B9291D372494af7,
            0x2095e41C90c7609dd6c5e1412ffbC6BeF1a79599,
            0xb9c604fE50fe1cD3949EE69Aa5E6b6c72e050cD8,
            0xdB768d136f25b0260A44983F153dFBa9FF1BB759,
            0xB7663c7ebdA5Adf6f59E1a1cb49a66F9677f783d,
            0xe0835B9dAFD68645100a54215761534b78a702C9
        ];
        
        amounts = [
            443887830000000000000,
            398841310000000000000,
            364048709400000000000,
            328744926300000000000,
            325401882300000000000,
            270421853500000000000,
            257247562800000000000,
            252463276100000000000,
            247148317500000000000,
            234242279300000000000,
            203556291900000000000,
            190479998100000000000,
            189321623800000000000,
            147722045000000000000,
            142962327800000000000,
            142598272200000000000,
            142517867500000000000,
            131753954200000000000,
            127887138300000000000,
            122905439900000000000,
            120802982900000000000,
            116575636100000000000,
            115059368100000000000,
            113993489800000000000,
            105467251900000000000,
            104847811200000000000,
            102332440600000000000,
            100169497500000000000,
            95759417260000000000,
            95238781020000000000,
            94411277050000000000,
            94287600000000000000,
            94281178460000000000,
            94216711330000000000,
            91660280340000000000,
            89967119350000000000,
            88951110520000000000,
            81611795130000000000,
            79556378200000000000,
            79219949520000000000,
            74936735780000000000,
            74692392690000000000,
            73515329160000000000,
            57349440360000000000,
            51822560240000000000,
            51009429950000000000,
            50637171730000000000,
            47879150620000000000,
            47063994260000000000,
            42162925110000000000,
            41411120970000000000,
            39885430000000000000,
            31137059200000000000,
            21743764010000000000,
            21240512190000000000,
            19755408300000000000,
            19495496460000000000,
            15348780460000000000,
            13703107780000000000,
            11802654490000000000,
            9796713884000000000,
            6428787798000000000,
            5817879846000000000,
            5641591079000000000,
            4255618385000000000,
            3318018876000000000,
            1773965056000000000,
            1507274874000000000,
            1095320799000000000,
            933070090000000000,
            90817120000000000,
            1125734000000000
        ];
    }

    function airdrop() external onlyOwner {
        require(wallets.length == amounts.length, "Invalid input");

        for (uint256 i = 0; i < wallets.length; i++) {
            busdToken.transferFrom(owner(), wallets[i], amounts[i]);
        }
    }

}