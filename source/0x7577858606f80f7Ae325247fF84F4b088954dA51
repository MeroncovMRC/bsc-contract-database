
// File: ./contracts/PaymentSplitter.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "@openzeppelin/contracts/finance/PaymentSplitter.sol";

contract Payments is PaymentSplitter {
  constructor(address[] memory _payees, uint256[] memory _shares) payable PaymentSplitter(_payees, _shares) {}
}


// File: ./contracts/Card.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./interfaces/IERC20.sol";
import "./interfaces/IJUNK.sol";
import "./interfaces/ICard.sol";
import "./interfaces/IHarvester.sol";

contract Card is ICard, AccessControl, ReentrancyGuard {
  /** CONSTANTS **/

  bytes32 public constant DAO = keccak256("DAO");
  bytes32 public constant HARVESTER = keccak256("Harvester");

  // Maximum number of cards an account can own. Here to prevent gas block limit issues
  uint256 public constant MAXIMUM_JUNK_PER_ACCOUNT = 100;

  // Minimum and maximum lengths of a card name
  uint256 public constant MINIMUM_CARD_NAME_LENGTH = 1;
  uint256 public constant MAXIMUM_CARD_NAME_LENGTH = 50;

  /** SEMI-CONSTANTS **/

  address public junk;
  address public harvester;
  uint256 public cardPrice;
  uint256 public cardInterval;
  uint256 public cardRewardPerPeriod;
  bool public isCardCreationPaused;
  bool public isCashoutPaused;

  // Fuel
  // When fuel is empty, need to spend refuelCost tokens to reset the fuel to fuelCapacity
  uint256 public refuelCost;
  uint256 public fuelCapacity = 10;

  /** VARIABLES **/

  address[] public holders;
  mapping(address => uint256) public holderIndex;
  uint256 public numberOfHolders = 0;
  mapping(address => CardEntity[]) public cardsOfUser;
  uint256 public override totalCardsCreated = 0;
  mapping(address => uint256) public fuel;

  /** EVENTS **/

  event CardEntityCreated(address account, string cardName, uint256 creationTime);
  event CardEntityTransferred(address sender, address recipient, uint256 cardIndex, uint256 transferTime);
  event CardEntityDeleted(address account, uint256 cardIndex, uint256 deletionTime);
  event CardClaimed(address account, uint256 amount, uint256 claimTime);

  /** CONSTRUCTOR **/

  constructor(CardConstructor memory _cardConstructor) {
    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
    grantRole(DAO, msg.sender);
    grantRole(HARVESTER, _cardConstructor._harvester);

    junk = _cardConstructor._junk;
    harvester = _cardConstructor._harvester;
    cardPrice = _cardConstructor._cardPrice;
    cardInterval = _cardConstructor._cardInterval;
    cardRewardPerPeriod = _cardConstructor._cardRewardPerPeriod;
    refuelCost = _cardConstructor._refuelCost;
  }

  /** MAIN METHODS ***/

  receive() external payable {}

  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens
  function createCardWithTokens(
    address _account,
    string calldata _cardName,
    bytes32[] calldata _args
  ) external virtual override onlyRole(HARVESTER) {
    require(cardPrice > 0, "Cannot create a card with a card price of 0");
    require(!isCardCreationPaused, "Card creation is paused until further notice");

    // Transfer tokens and swap if needed
    _processCardsTokensFromCardCreation(_account, cardPrice, false, _args); // isRefuel: false

    // Create the card
    _createCard(_account, _cardName, _args);
  }

  // This function is called when a card is created by fusing other cards. Does nothing unless overriden
  function createCardFromFusion(
    address,
    string calldata,
    bytes32[] calldata
  ) external virtual override onlyRole(HARVESTER) {
    revert("This type of card cannot be obtained through fusion");
  }

  // Claims rewards from all cards
  function cashoutAll(address _account) external virtual override onlyRole(HARVESTER) {
    // Iterate over memory data
    CardEntity[] memory cardsArray = cardsOfUser[_account];
    uint256 rewardAvailable = 0;
    for (uint256 i = 0; i < cardsArray.length; i++) {
      if (block.timestamp - cardsArray[i].lastClaimTime > cardInterval) {
        rewardAvailable += _calcCardRewardAvailable(_account, cardsArray[i]);
        // Update storage data
        cardsOfUser[_account][i].lastClaimTime = _getNewLastClaimTime(_account, cardsArray[i].lastClaimTime);
      }
    }

    if (rewardAvailable > 0) _cashout(_account, rewardAvailable);
  }

  // Claims rewards from one card
  function cashoutCard(address _account, uint256 _cardIndex) external virtual override onlyRole(HARVESTER) {
    CardEntity storage card = cardsOfUser[_account][_cardIndex];

    uint256 rewardAvailable = _getCardRewardAvailable(_account, cardsOfUser[_account][_cardIndex]);
    require(rewardAvailable > 0, "Nothing to cash out");

    // Update storage data
    card.lastClaimTime = _getNewLastClaimTime(_account, card.lastClaimTime);

    _cashout(_account, rewardAvailable);
  }

  // Refill fuel to allow next cashouts
  function refuel(address _account, bytes32[] memory _args) external virtual override onlyRole(HARVESTER) {
    // Transfer tokens and swap if needed
    _processCardsTokensFromCardCreation(_account, refuelCost, true, _args); // isRefuel: true

    // Refill
    fuel[_account] = fuelCapacity;
  }

  // Transfers a card to another address
  function transferCard(
    address _sender,
    address _recipient,
    uint256 _cardIndex
  ) external virtual override onlyRole(HARVESTER) {
    _transferCard(_sender, _recipient, _cardIndex);
  }

  // Deletes a card
  function deleteCard(address _account, uint256 _cardIndex) external virtual override onlyRole(HARVESTER) {
    _deleteCard(_account, _cardIndex);
  }

  // Deletes the last card of an account
  function deleteLastCard(address _account) external virtual override onlyRole(HARVESTER) {
    _deleteLastCard(_account);
  }

  /** INTERNAL METHODS **/

  // Peforms a safety check, then returns the amount of rewards available for a card
  function _getCardRewardAvailable(address _account, CardEntity memory _card) internal view virtual returns (uint256) {
    if (block.timestamp - _card.lastClaimTime > cardInterval) {
      return _calcCardRewardAvailable(_account, _card);
    }
    return 0;
  }

  // Returns the amount of rewards available for a card
  function _calcCardRewardAvailable(address _account, CardEntity memory _card) internal view virtual returns (uint256) {
    require(cardInterval > 0, "The card interval of this card type is 0");

    // Get reward divider
    uint256 divider = IHarvester(harvester).divideRewardsForUser(_account);
    if (divider == 0) divider = 100;

    // If rewards accumulate for this user
    if (IHarvester(harvester).rewardsAccumulateForUser(_account)) {
      // ((now - last claim time) / interval) * reward per period
      return (((block.timestamp - _card.lastClaimTime) / cardInterval) * cardRewardPerPeriod * 100) / divider;
    }

    // If rewards do not accumulate for this user (default)
    return (cardRewardPerPeriod * 100) / divider;
  }

  // Creates a card. Must be called by functions that do important security checks
  function _createCard(
    address _account,
    string memory _cardName,
    bytes32[] memory // This will be used for custom card types
  ) internal virtual {
    require(cardsOfUser[_account].length < MAXIMUM_JUNK_PER_ACCOUNT, "Maximum number of cards reached for this account");

    uint256 cardNameLength = bytes(_cardName).length;

    require(cardNameLength >= MINIMUM_CARD_NAME_LENGTH && cardNameLength <= MAXIMUM_CARD_NAME_LENGTH, "Card name length is invalid");

    // If this is the first card the user creates, add them to the list of holders
    if (cardsOfUser[_account].length == 0) {
      holderIndex[_account] = holders.length;
      holders.push(_account);
      numberOfHolders++;
    }

    // Create the card in storage
    cardsOfUser[_account].push(CardEntity({cardName: _cardName, creationTime: block.timestamp, lastClaimTime: block.timestamp - cardInterval}));
    totalCardsCreated++;

    // Refuel
    fuel[_account] = fuelCapacity;

    emit CardEntityCreated(_account, _cardName, block.timestamp);
  }

  // Handles a transfer of "_amount" JUNK tokens to the contract when creating a card, collects fees and swaps to BNB if appropriate
  function _processCardsTokensFromCardCreation(
    address _account,
    uint256 _amount,
    bool,
    bytes32[] memory // This will be used for custom card types
  ) internal virtual {
    // Safety checks
    require(IERC20(junk).balanceOf(_account) >= _amount, "JUNK balance too low");
    require(_amount > 0, "Cannot transfer 0 JUNK tokens");

    // Transfer JUNK tokens from "_account" to the Harvester contract
    // This is done so the user does not have to approve this contract to spend their JUNK tokens
    IHarvester(harvester).initiateJUNKTransfer(_account, harvester, _amount);
  }

  // Processes a cashout and handles related fees
  function _cashout(address _account, uint256 _amount) internal virtual {
    require(!isCashoutPaused, "Cashouts are paused until further notice");
    require(_amount > 0, "Cannot cashout 0 JUNK");
    require(fuel[_account] > 0, "Out of fuel");

    // Lower fuel
    fuel[_account]--;

    // Mark the tokens as claimed
    IJUNK(junk).setClaimedTokens(_account, IJUNK(junk).claimedTokens(_account) + _amount);

    // Transfer the JUNK tokens to the user
    IERC20(junk).transferFrom(harvester, _account, _amount);

    emit CardClaimed(_account, _amount, block.timestamp);
  }

  // Calculates the new last claim time to set when claiming rewards
  function _getNewLastClaimTime(address _account, uint256 _currentLastClaim) internal virtual returns (uint256) {
    // If rewards accumulate for this user
    if (IHarvester(harvester).rewardsAccumulateForUser(_account)) {
      return block.timestamp - ((block.timestamp - _currentLastClaim) % cardInterval);
    }

    // If rewards do not accumulate for this user (default)
    return block.timestamp;
  }

  // Transfers a card
  function _transferCard(
    address _sender,
    address _recipient,
    uint256 _cardIndex
  ) internal virtual {
    require(_sender != _recipient, "Sender and recipient are the same address");

    // If this is the first card the user acquires, add them to the list of holders
    if (cardsOfUser[_recipient].length == 0) {
      holderIndex[_recipient] = holders.length;
      holders.push(_recipient);
      numberOfHolders++;
    }

    CardEntity memory cardToDelete = cardsOfUser[_sender][_cardIndex];

    // Delete the card for the sender
    _deleteCard(_sender, _cardIndex);

    // Create a new card for the recipient
    cardsOfUser[_recipient].push(cardToDelete);
    totalCardsCreated++;

    emit CardEntityCreated(_recipient, cardToDelete.cardName, block.timestamp);
    emit CardEntityTransferred(_sender, _recipient, _cardIndex, block.timestamp);
    // CardEntityDeleted is emitted in _deleteCard()
  }

  // Deletes a card
  function _deleteCard(address _account, uint256 _cardIndex) internal virtual {
    require(cardsOfUser[_account].length > _cardIndex, "No card to delete");

    cardsOfUser[_account][_cardIndex] = cardsOfUser[_account][cardsOfUser[_account].length - 1];

    totalCardsCreated--;

    cardsOfUser[_account].pop();

    // If this was the last card of the user, remove them from the list of holders
    if (cardsOfUser[_account].length == 0) {
      address lastHolder = holders[holders.length - 1];
      uint256 indexOfHolderToDelete = holderIndex[_account];

      holders[indexOfHolderToDelete] = lastHolder;
      holderIndex[lastHolder] = indexOfHolderToDelete;
      holderIndex[_account] = 0;

      holders.pop();
      numberOfHolders--;
    }

    emit CardEntityDeleted(_account, _cardIndex, block.timestamp);
  }

  // Deletes the last card of an account
  function _deleteLastCard(address _account) internal virtual {
    require(cardsOfUser[_account].length > 0, "No card to delete");

    totalCardsCreated--;

    cardsOfUser[_account].pop();

    // If this was the last card of the user, remove them from the list of holders
    if (cardsOfUser[_account].length == 0) {
      address lastHolder = holders[holders.length - 1];
      uint256 indexOfHolderToDelete = holderIndex[_account];

      holders[indexOfHolderToDelete] = lastHolder;
      holderIndex[lastHolder] = indexOfHolderToDelete;
      holderIndex[_account] = 0;

      holders.pop();
      numberOfHolders--;
    }

    emit CardEntityDeleted(_account, cardsOfUser[_account].length, block.timestamp);
  }

  /** VIEW METHODS **/

  // Returns the amount of cards of an user
  function getAmountOfCardsOfUser(address _account) external view returns (uint256) {
    return cardsOfUser[_account].length;
  }

  // Returns the amount of rewards available for a given account (all cards combined)
  function getAccountRewardAvailable(address _account) external view override returns (uint256) {
    CardEntity[] memory cardsArray = cardsOfUser[_account];
    uint256 rewardAvailable = 0;
    for (uint256 i = 0; i < cardsArray.length; i++) {
      if (block.timestamp - cardsArray[i].lastClaimTime > cardInterval) {
        rewardAvailable += _calcCardRewardAvailable(_account, cardsArray[i]);
      }
    }
    return rewardAvailable;
  }

  // Returns the amount of rewards available for a given account (for each card)
  function getAccountRewardAvailableAsArray(address _account) external view override returns (uint256[] memory) {
    CardEntity[] memory cardsArray = cardsOfUser[_account];
    uint256 numberOfCards = cardsArray.length;
    uint256[] memory rewardsAvailable = new uint256[](numberOfCards);

    for (uint256 i = 0; i < numberOfCards; i++) {
      if (block.timestamp - cardsArray[i].lastClaimTime > cardInterval) {
        rewardsAvailable[i] = _calcCardRewardAvailable(_account, cardsArray[i]);
      } else {
        rewardsAvailable[i] = 0;
      }
    }
    return rewardsAvailable;
  }

  // Returns the amount of rewards available for a given account and a given card index
  function getCardRewardAvailable(address _account, uint256 _cardIndex) external view override returns (uint256) {
    return _getCardRewardAvailable(_account, cardsOfUser[_account][_cardIndex]);
  }

  // Returns the card that corresponds to a particular account and card index
  function getCard(address _account, uint256 _cardIndex) external view override returns (CardEntity memory) {
    return cardsOfUser[_account][_cardIndex];
  }

  // Returns the amount of cards an account has
  function getCardCount(address _account) external view override returns (uint256) {
    return cardsOfUser[_account].length;
  }

  // Returns the names of all the cards of an account
  function getAccountCardNames(address _account) external view override returns (string[] memory) {
    CardEntity[] memory cardsArray = cardsOfUser[_account];
    uint256 numberOfCards = cardsArray.length;
    string[] memory cardNames = new string[](numberOfCards);

    for (uint256 i = 0; i < numberOfCards; i++) {
      cardNames[i] = cardsArray[i].cardName;
    }

    return cardNames;
  }

  // Returns the card name that corresponds to a particular account and card index
  function getCardName(address _account, uint256 _cardIndex) external view override returns (string memory) {
    return cardsOfUser[_account][_cardIndex].cardName;
  }

  // Returns the creation times of all the cards of an account
  function getAccountCreationTimes(address _account) external view override returns (uint256[] memory) {
    CardEntity[] memory cardsArray = cardsOfUser[_account];
    uint256 numberOfCards = cardsArray.length;
    uint256[] memory creationTimes = new uint256[](numberOfCards);

    for (uint256 i = 0; i < numberOfCards; i++) {
      creationTimes[i] = cardsArray[i].creationTime;
    }

    return creationTimes;
  }

  // Returns the creation time that corresponds to a particular account and card index
  function getCardCreationTime(address _account, uint256 _cardIndex) external view override returns (uint256) {
    return cardsOfUser[_account][_cardIndex].creationTime;
  }

  // Returns the last claiming times of all the cards of an account
  function getAccountLastClaimTimes(address _account) external view override returns (uint256[] memory) {
    CardEntity[] memory cardsArray = cardsOfUser[_account];
    uint256 numberOfCards = cardsArray.length;
    uint256[] memory lastClaimTimes = new uint256[](numberOfCards);

    for (uint256 i = 0; i < numberOfCards; i++) {
      lastClaimTimes[i] = cardsArray[i].lastClaimTime;
    }

    return lastClaimTimes;
  }

  // Returns the last claiming time that corresponds to a particular account and card index
  function getCardLastClaimTime(address _account, uint256 _cardIndex) external view override returns (uint256) {
    return cardsOfUser[_account][_cardIndex].lastClaimTime;
  }

  /** DAO METHODS **/

  // Directly create a card for an account. Called via the harvester
  function createCardDao(
    address _account,
    string calldata _cardName,
    bytes32[] calldata _args
  ) external override onlyRole(HARVESTER) {
    _createCard(_account, _cardName, _args);
  }

  // Transfers a card to another address
  function transferCardDao(
    address _sender,
    address _recipient,
    uint256 _cardIndex
  ) external virtual onlyRole(DAO) {
    _transferCard(_sender, _recipient, _cardIndex);
  }

  // Deletes a card
  function deleteCardDao(address _account, uint256 _cardIndex) external virtual onlyRole(DAO) {
    _deleteCard(_account, _cardIndex);
  }

  // Deletes the last card of an account
  function deleteLastCardDao(address _account) external virtual onlyRole(DAO) {
    _deleteLastCard(_account);
  }

  // Withdraw BNB from the contract
  function withdraw(uint256 _amount) external virtual onlyRole(DAO) {
    payable(msg.sender).transfer(_amount);
  }

  // Withdraw ERC20 from the contract
  function withdrawERC20(address _erc20, uint256 _amount) external virtual onlyRole(DAO) {
    IERC20(_erc20).transfer(msg.sender, _amount);
  }

  /** SETTERS **/

  function setJunkToken(address _junk) external virtual onlyRole(DAO) {
    junk = _junk;
  }

  function setHarvester(address _harvester) external virtual onlyRole(DAO) {
    revokeRole(HARVESTER, harvester);
    grantRole(HARVESTER, _harvester);
    harvester = _harvester;
  }

  function setCardPrice(uint256 _cardPrice) external virtual onlyRole(DAO) {
    cardPrice = _cardPrice;
  }

  function setCardInterval(uint256 _cardInterval) external virtual onlyRole(DAO) {
    cardInterval = _cardInterval;
  }

  function setCardRewardPerPeriod(uint256 _cardRewardPerPeriod) external virtual onlyRole(DAO) {
    cardRewardPerPeriod = _cardRewardPerPeriod;
  }

  function setIsCardCreationPaused(bool _isCardCreationPaused) external virtual onlyRole(DAO) {
    isCardCreationPaused = _isCardCreationPaused;
  }

  function setIsCashoutPaused(bool _isCashoutPaused) external virtual onlyRole(DAO) {
    isCashoutPaused = _isCashoutPaused;
  }

  function setRefuelCost(uint256 _refuelCost) external virtual onlyRole(DAO) {
    refuelCost = _refuelCost;
  }

  function setFuelCapacity(uint256 _fuelCapacity) external virtual onlyRole(DAO) {
    fuelCapacity = _fuelCapacity;
  }
}


// File: ./contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)

pragma solidity 0.8.4;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
  /**
   * @dev Returns the amount of tokens owned by `account`.
   */
  function balanceOf(address account) external view returns (uint256);

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) external returns (bool);
}


// File: ./contracts/interfaces/IJUNK.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

interface IJUNK {
  function claimedTokens(address _account) external view returns (uint256);

  function setClaimedTokens(address _account, uint256 _amount) external;

  function grantCardRole(address _card) external;

  function revokeCardRole(address _card) external;
}


// File: ./contracts/interfaces/ICard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

interface ICard {
  struct CardEntity {
    string cardName;
    uint256 creationTime;
    uint256 lastClaimTime;
  }

  // Here to avoid stack too deep errors
  struct CardConstructor {
    address _junk;
    address _harvester;
    uint256 _cardPrice;
    uint256 _cardInterval;
    uint256 _cardRewardPerPeriod;
    uint256 _refuelCost;
  }

  function totalCardsCreated() external view returns (uint256);

  function createCardWithTokens(
    address _account,
    string calldata _cardName,
    bytes32[] calldata _args
  ) external;

  function createCardFromFusion(
    address _account,
    string calldata _cardName,
    bytes32[] calldata _args
  ) external;

  function createCardDao(
    address _account,
    string calldata _cardName,
    bytes32[] calldata _args
  ) external;

  function cashoutAll(address _account) external;

  function cashoutCard(address _account, uint256 _cardIndex) external;

  function refuel(address _account, bytes32[] memory _args) external;

  function transferCard(
    address _oldAccount,
    address _newAccount,
    uint256 _cardIndex
  ) external;

  function deleteCard(address _account, uint256 _cardIndex) external;

  function deleteLastCard(address _account) external;

  function getAccountRewardAvailable(address _account) external view returns (uint256);

  function getAccountRewardAvailableAsArray(address _account) external view returns (uint256[] memory);

  function getCardRewardAvailable(address _account, uint256 _cardIndex) external view returns (uint256);

  function getCard(address _account, uint256 _cardIndex) external view returns (CardEntity memory);

  function getCardCount(address _account) external view returns (uint256);

  function getAccountCardNames(address _account) external view returns (string[] memory);

  function getCardName(address _account, uint256 _cardIndex) external view returns (string memory);

  function getAccountCreationTimes(address _account) external view returns (uint256[] memory);

  function getCardCreationTime(address _account, uint256 _cardIndex) external view returns (uint256);

  function getAccountLastClaimTimes(address _account) external view returns (uint256[] memory);

  function getCardLastClaimTime(address _account, uint256 _cardIndex) external view returns (uint256);
}


// File: ./contracts/interfaces/IHarvester.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./ICard.sol";

interface IHarvester {
  function cardTypes(uint256 _index) external returns (ICard);

  function numberOfCardsByTypeByUser(address _account, uint256 _cardType) external view returns (uint256);

  function rewardsAccumulateForUser(address _account) external view returns (bool);
  function divideRewardsForUser(address _account) external view returns (uint256);

  function initiateJUNKTransfer(
    address _sender,
    address _recipient,
    uint256 _amount
  ) external;

  function setRewardsAccumulateForUser(address _account, bool _rewardsAccumulate) external;

  function setDivideRewardsForUser(address _account, uint256 _divider) external;
}


// File: ./contracts/JUNK.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "./interfaces/IUniswapV2Router02.sol";
import "./interfaces/IUniswapV2Factory.sol";
import "./interfaces/IJUNK.sol";

contract JUNK is IJUNK, ERC20, AccessControl, ReentrancyGuard {
  /** CONSTANTS **/

  bytes32 public constant DAO = keccak256("DAO");
  bytes32 public constant HARVESTER = keccak256("Harvester");
  bytes32 public constant CARD = keccak256("Card");

  /** SEMI-CONSTANTS **/

  IUniswapV2Router02 public pancakeRouter;
  address public harvester;

  address public dao;
  uint256 public initialSupply = 20_000_000e18;
  address public pancakeJunkBnbPair;
  address payable private feeSafe; // The safe that stores the BNB made from the fees
  uint256 public minimumSafeFeeBalanceToSwap = 100e18; // JUNK balance required to perform a swap
  uint256 public minimumLiquidityFeeBalanceToSwap = 100e18; // JUNK balance required to add liquidity
  bool public swapEnabled = true;

  // Buying and selling fees
  uint256 public buyingFee = 0; // (/1000)
  uint256 public sellingFeeClaimed = 100; // (/1000)
  uint256 public sellingFeeNonClaimed = 500; // (/1000)

  // Part (/1000) of the fees that will be sent to the safe fee. The rest will be sent to the liquidity fee
  uint256 public safeFeePercentage = 900;
  // Not needed because safeFeePercentage + liquidityFeePercentage = 1000
  // uint256 public liquidityFeePercentage = 100;

  /** VARIABLES **/

  mapping(address => bool) private _blacklist;
  mapping(address => bool) private _exemptFromFees;
  mapping(address => uint256) public override claimedTokens;
  mapping(address => bool) public automatedMarketMakerPairs;

  uint256 public safeFeeBalance = 0; // JUNK balance accumulated from fee safe fees
  uint256 public liquidityFeeBalance = 0; // JUNK balance accumulated from liquidity fees

  // Swapping booleans. Here to avoid having two swaps in the same block
  bool private swapping = false;
  bool private swapLiquify = false;

  /** EVENTS **/

  event SwappedSafeFeeBalance(uint256 amount);
  event AddedLiquidity(uint256 junkAmount, uint256 bnbAmount);

  /** CONSTRUCTOR **/

  constructor(address _pancakeRouter, address payable _feeSafe) ERC20("HumanJunk", "JUNK") {
    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
    grantRole(DAO, msg.sender);

    feeSafe = _feeSafe;
    _mint(msg.sender, initialSupply);
    pancakeRouter = IUniswapV2Router02(_pancakeRouter);
    pancakeJunkBnbPair = IUniswapV2Factory(pancakeRouter.factory()).createPair(
      address(this),
      pancakeRouter.WETH()
    );

    // Exempt some addresses from fees
    _exemptFromFees[msg.sender] = true;
    _exemptFromFees[address(this)] = true;
    _exemptFromFees[address(0)] = true;

    _setAutomatedMarketMakerPair(address(pancakeJunkBnbPair), true);
  }

  /** MAIN METHODS **/

  receive() external payable {}

  // Transfers claimed tokens from an address to another, allowing the recipient to sell without exposing themselves to high fees
  function transferClaimedTokens(address _recipient, uint256 _amount) external nonReentrant {
    // Safety checks
    _beforeTokenTransfer(msg.sender, _recipient, _amount);
    require(claimedTokens[msg.sender] >= _amount, "Not enough claimed tokens to send");
    require(!automatedMarketMakerPairs[_recipient], "Cannot transfer claimed tokens to an AMM pair");

    // Transfer the claimed tokens
    claimedTokens[msg.sender] -= _amount;
    claimedTokens[_recipient] += _amount;
    _transfer(msg.sender, _recipient, _amount);
  }

  /** INTERNAL METHODS **/

  // Overrides ERC20 to implement the blacklist
  function _beforeTokenTransfer(
    address _from,
    address _to,
    uint256 _amount
  ) internal virtual override(ERC20) {
    require(!isBlacklisted(_from), "Token transfer refused. Sender is blacklisted");
    require(!isBlacklisted(_to), "Token transfer refused. Recipient is blacklisted");
    super._beforeTokenTransfer(_from, _to, _amount);
  }

  // Transfers JUNK from _from to _to, collects relevant fees, and performs a swap if needed
  function _transfer(
    address _from,
    address _to,
    uint256 _amount
  ) internal override {
    require(_from != address(0), "Cannot transfer from the zero address");
    require(_amount > 0, "Cannot transfer 0 tokens");
    uint256 fees = 0;

    // Only take fees on buys / sells, do not take on wallet transfers
    if (!_exemptFromFees[_from] && !_exemptFromFees[_to]) {
      // On sell
      if (automatedMarketMakerPairs[_to]) {
        // Calculate fees, distinguishing between claimed tokens and non-claimed tokens
        uint256 claimedTokensToSell = (_amount <= claimedTokens[_from]) ? _amount : claimedTokens[_from];
        uint256 nonClaimedTokensToSell = _amount - claimedTokensToSell;

        if (sellingFeeClaimed > 0) fees += (claimedTokensToSell * sellingFeeClaimed) / 1000;
        if (sellingFeeNonClaimed > 0) fees += (nonClaimedTokensToSell * sellingFeeNonClaimed) / 1000;

        // Update the value of "claimedTokens" for this account
        claimedTokens[_from] -= claimedTokensToSell;
      }
      // On buy
      else if (automatedMarketMakerPairs[_from] && buyingFee > 0) {
        fees = (_amount * buyingFee) / 1000;
      }

      // Send fees to the JUNK contract
      if (fees > 0) {
        // Send the JUNK tokens to the contract
        super._transfer(_from, address(this), fees);

        // Keep track of the JUNK tokens that were sent
        uint256 safeFees = (fees * safeFeePercentage) / 1000;
        safeFeeBalance += safeFees;
        liquidityFeeBalance += fees - safeFees;
      }

      _amount -= fees;
    }

    // Swapping logic
    if (swapEnabled) {
      // If the one of the fee balances is above a certain amount, swap it for BNB and transfer it to the fee safe
      // Do not do both in one transaction
      if (!swapping && !swapLiquify && safeFeeBalance > minimumSafeFeeBalanceToSwap) {
        // Forbid swapping safe fees
        swapping = true;

        // Perform the swap
        _swapSafeFeeBalance();

        // Allow swapping again
        swapping = false;
      } else if (!swapping && !swapLiquify && liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap) {
        // Forbid swapping liquidity fees
        swapLiquify = true;

        // Perform the swap
        _liquify();

        // Allow swapping again
        swapLiquify = false;
      }
    }

    super._transfer(_from, _to, _amount);
  }

  // Swaps safe fee balance for BNB and sends it to the fee safe
  function _swapSafeFeeBalance() internal {
    require(safeFeeBalance > minimumSafeFeeBalanceToSwap, "Not enough JUNK tokens to swap for safe fee");

    uint256 oldBalance = address(this).balance;

    // Swap
    _swapJunkForBnb(safeFeeBalance);

    // Update safeFeeBalance
    safeFeeBalance = 0;

    // Send BNB to fee safe
    uint256 toSend = address(this).balance - oldBalance;
    feeSafe.transfer(toSend);

    emit SwappedSafeFeeBalance(toSend);
  }

  // Swaps "_junkAmount" JUNK for BNB
  function _swapJunkForBnb(uint256 _junkAmount) internal {
    address[] memory path = new address[](2);
    path[0] = address(this);
    path[1] = pancakeRouter.WETH();

    _approve(address(this), address(pancakeRouter), _junkAmount);

    pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
      _junkAmount,
      0, // accept any amount of BNB
      path,
      address(this),
      block.timestamp
    );
  }

  // Swaps liquidity fee balance for BNB and adds it to the JUNK / BNB pool
  function _liquify() internal {
    require(
      liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap,
      "Not enough JUNK tokens to swap for adding liquidity"
    );

    uint256 oldBalance = address(this).balance;

    // Sell half of the JUNK for BNB
    uint256 lowerHalf = liquidityFeeBalance / 2;
    uint256 upperHalf = liquidityFeeBalance - lowerHalf;

    // Swap
    _swapJunkForBnb(lowerHalf);

    // Update liquidityFeeBalance
    liquidityFeeBalance = 0;

    // Add liquidity
    _addLiquidity(upperHalf, address(this).balance - oldBalance);
  }

  // Adds liquidity to the JUNK / BNB pair on Pancakeswap
  function _addLiquidity(uint256 _junkAmount, uint256 _bnbAmount) internal {
    // Approve token transfer to cover all possible scenarios
    _approve(address(this), address(pancakeRouter), _junkAmount);

    // Add the liquidity
    pancakeRouter.addLiquidityETH{value: _bnbAmount}(
      address(this),
      _junkAmount,
      0, // Slippage is unavoidable
      0, // Slippage is unavoidable
      address(0),
      block.timestamp
    );

    emit AddedLiquidity(_junkAmount, _bnbAmount);
  }

  // Marks an address as an automated market pair / removes that mark
  function _setAutomatedMarketMakerPair(address _pair, bool _value) internal {
    automatedMarketMakerPairs[_pair] = _value;
  }

  /** VIEW METHODS **/

  // Returns true if "_user" is blacklisted, false instead
  function isBlacklisted(address _user) public view returns (bool) {
    return _blacklist[_user];
  }

  /** DAO METHODS **/

  // Mint new JUNK tokens to the given address
  function mintDAO(address _to, uint256 _amount) public onlyRole(DAO) {
    _mint(_to, _amount);
  }

  // Burns JUNK tokens from a given address
  function burnDAO(address _from, uint256 _amount) public onlyRole(DAO) {
    _burn(_from, _amount);
  }

  // Withdraws an amount of BNB stored on the contract
  function withdrawDAO(uint256 _amount) external onlyRole(DAO) {
    payable(msg.sender).transfer(_amount);
  }

  // Withdraws an amount of ERC20 tokens stored on the contract
  function withdrawERC20DAO(address _erc20, uint256 _amount) external onlyRole(DAO) {
    IERC20(_erc20).transfer(msg.sender, _amount);
  }

  // Manually swaps the safe fees
  function manualSafeFeeSwapDAO() external onlyRole(DAO) {
    // Forbid swapping safe fees
    swapping = true;

    // Perform the swap
    _swapSafeFeeBalance();

    // Allow swapping again
    swapping = false;
  }

  // Manually adds liquidity
  function manualLiquifyDAO() external onlyRole(DAO) {
    // Forbid swapping liquidity fees
    swapLiquify = true;

    // Perform the swap
    _liquify();

    // Allow swapping again
    swapLiquify = false;
  }

  // Gives the CARD role to an address so it can call the "setClaimedTokens()" method
  function grantCardRoleDAO(address _card) external onlyRole(DAO) {
    grantRole(CARD, _card);

    // Exempt from fees
    _exemptFromFees[_card] = true;
  }

  // Removes the CARD role from an address so it cannot call the "setClaimedTokens()" method
  function revokeCardRoleDAO(address _card) external onlyRole(DAO) {
    revokeRole(CARD, _card);

    // Revoke exemption from fees
    _exemptFromFees[_card] = false;
  }

  /** HARVESTER METHODS **/

  // Gives the CARD role to an address so it can call the "setClaimedTokens()" method
  function grantCardRole(address _card) external override onlyRole(HARVESTER) {
    grantRole(CARD, _card);

    // Exempt from fees
    _exemptFromFees[_card] = true;
  }

  // Removes the CARD role from an address so it cannot call the "setClaimedTokens()" method
  function revokeCardRole(address _card) external override onlyRole(HARVESTER) {
    revokeRole(CARD, _card);
  }

  /** SETTERS **/

  function changeDAO(address _dao) external onlyRole(DAO) {
    revokeRole(DAO, dao);
    grantRole(DAO, _dao);
    dao = _dao;
  }

  function revokeDAO(address _DaoToRevoke) external onlyRole(DAO) {
    revokeRole(DAO, _DaoToRevoke);
  }

  function blacklistDAO(address _user, bool _state) external onlyRole(DAO) {
    _blacklist[_user] = _state;
  }

  function setFeeSafeDAO(address payable _feeSafe) external onlyRole(DAO) {
    feeSafe = _feeSafe;
  }

  function setAutomatedMarketMakerPairDAO(address _pair, bool _value) external onlyRole(DAO) {
    require(
      _pair != pancakeJunkBnbPair,
      "The JUNK / BNB pair cannot be removed from automatedMarketMakerPairs"
    );
    _setAutomatedMarketMakerPair(_pair, _value);
  }

  function excludeFromFeesDAO(address _account, bool _state) external onlyRole(DAO) {
    _exemptFromFees[_account] = _state;
  }

  function setMinimumSafeFeeBalanceToSwapDAO(uint256 _minimumSafeFeeBalanceToSwap) external onlyRole(DAO) {
    minimumSafeFeeBalanceToSwap = _minimumSafeFeeBalanceToSwap;
  }

  function setMinimumLiquidityFeeBalanceToSwapDAO(uint256 _minimumLiquidityFeeBalanceToSwap)
    external
    onlyRole(DAO)
  {
    minimumLiquidityFeeBalanceToSwap = _minimumLiquidityFeeBalanceToSwap;
  }

  function enableSwappingDAO() external onlyRole(DAO) {
    swapEnabled = true;
  }

  function stopSwappingDAO() external onlyRole(DAO) {
    swapEnabled = false;
  }

  function setBuyingFeeDAO(uint256 _buyingFee) external onlyRole(DAO) {
    buyingFee = _buyingFee;
  }

  function setSellingFeeClaimedDAO(uint256 _sellingFeeClaimed) external onlyRole(DAO) {
    sellingFeeClaimed = _sellingFeeClaimed;
  }

  function setSellingFeeNonClaimedDAO(uint256 _sellingFeeNonClaimed) external onlyRole(DAO) {
    sellingFeeNonClaimed = _sellingFeeNonClaimed;
  }

  function setSafeFeePercentageDAO(uint256 _safeFeePercentage) external onlyRole(DAO) {
    safeFeePercentage = _safeFeePercentage;
  }

  function setHarvesterDAO(address _harvester) external onlyRole(DAO) {
    revokeRole(HARVESTER, harvester);
    revokeRole(DEFAULT_ADMIN_ROLE, harvester);
    grantRole(HARVESTER, _harvester);
    grantRole(DEFAULT_ADMIN_ROLE, _harvester);

    harvester = _harvester;
  }

  function setClaimedTokens(address _account, uint256 _amount) external override onlyRole(CARD) {
    claimedTokens[_account] = _amount;
  }
}


// File: ./contracts/interfaces/IUniswapV2Router02.sol
// SPDX-License-Identifier: MIT
// Uniswap V2
pragma solidity 0.8.4;

interface IUniswapV2Router02 {
  function swapExactTokensForETHSupportingFeeOnTransferTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external;

  function swapExactTokensForETH(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external;

  function factory() external pure returns (address);

  function WETH() external pure returns (address);

  function addLiquidityETH(
    address token,
    uint256 amountTokenDesired,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  )
    external
    payable
    returns (
      uint256 amountToken,
      uint256 amountETH,
      uint256 liquidity
    );
}


// File: ./contracts/interfaces/IUniswapV2Factory.sol
// SPDX-License-Identifier: MIT
// Uniswap V2
pragma solidity >=0.5.0;

interface IUniswapV2Factory {
  function createPair(address tokenA, address tokenB) external returns (address pair);
}


// File: ./contracts/cards/AutomationCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./OnePerAccountNoRewardCard.sol";

// This card cannot be transferred, but can be deleted as it is necessary if you want to stop automatizing your rewards
// This card implements fees
// Only one AutomationCard should be held at a time

contract AutomationCard is OnePerAccountNoRewardCard {
  uint256[] public otherAutomationCardsIndexes;
  uint256 public divider; // /100

  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe,
    uint256 _divider // /100
  )
    OnePerAccountNoRewardCard(
      _cardConstructor,
      _pancakeRouter,
      _feeSafe
    )
  {
    divider = _divider; // /100
  }

  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens
  function _createCard(
    address _account,
    string memory _cardName,
    bytes32[] memory _args
  ) internal override onlyRole(HARVESTER) {
    // The user can only join one team at a time
    for (uint256 i = 0; i < otherAutomationCardsIndexes.length; i++) {
      require(
        IHarvester(harvester).numberOfCardsByTypeByUser(_account, otherAutomationCardsIndexes[i]) == 0,
        "You can only have one automation card"
      );
    }

    // Enable the automation
    IHarvester(harvester).setRewardsAccumulateForUser(_account, true);
    IHarvester(harvester).setDivideRewardsForUser(_account, divider);

    super._createCard(_account, _cardName, _args);
  }

  // Transfers a card
  function _transferCard(
    address,
    address,
    uint256
  ) internal pure override {
    revert("This card cannot be transferred");
  }

  // Deletes a card
  function _deleteCard(address _account, uint256 _cardIndex) internal override {
    // Disable the automation
    _disableAutomation(_account);

    super._deleteCard(_account, _cardIndex);
  }

  // Deletes the last card of an account
  function _deleteLastCard(address _account) internal override {
    // Disable the automation
    _disableAutomation(_account);

    super._deleteLastCard(_account);
  }

  // Disables the automation for an account
  function _disableAutomation(address _account) internal {
    IHarvester(harvester).setRewardsAccumulateForUser(_account, false);
    IHarvester(harvester).setDivideRewardsForUser(_account, 0);
  }

  function setOtherAutomationCardsIndexes(uint256[] calldata _otherAutomationCardsIndexes)
    external
    onlyRole(DAO)
  {
    otherAutomationCardsIndexes = _otherAutomationCardsIndexes;
  }

  function setDivider(uint256 _divider) external onlyRole(DAO) {
    divider = _divider;
  }
}


// File: ./contracts/cards/OnePerAccountNoRewardCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./NoRewardCard.sol";

//import hardhat console.log
import "hardhat/console.sol";


// An account can only have one card of this type
// This card does not yield any rewards
// This card implements fees

contract OnePerAccountNoRewardCard is NoRewardCard {
  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe
  ) NoRewardCard(_cardConstructor, _pancakeRouter, _feeSafe) {}

  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens
  function _createCard(
    address _account,
    string memory _cardName,
    bytes32[] memory _args
  ) internal virtual override onlyRole(HARVESTER) {
    require(cardsOfUser[_account].length == 0, "You already have a card of this type");

    super._createCard(_account, _cardName, _args);
  }

  // Transfers a card
  function _transferCard(
    address _sender,
    address _recipient,
    uint256 _cardIndex
  ) internal virtual override {
    require(cardsOfUser[_recipient].length == 0, "The recipient already has a card of this type");

    super._transferCard(_sender, _recipient, _cardIndex);
  }
}


// File: ./contracts/cards/NoRewardCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./CardWithFees.sol";

// This card does not yield any rewards
// This card implements fees

contract NoRewardCard is CardWithFees {
  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe
  ) CardWithFees(_cardConstructor, _pancakeRouter, _feeSafe) {}

  // Processes a cashout and handles related fees
  function _cashout(address, uint256) internal virtual override {
    revert("This card does not yield any rewards");
  }
}


// File: ./contracts/cards/CardWithFees.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "../Card.sol";
import "../interfaces/IUniswapV2Factory.sol";
import "../interfaces/IUniswapV2Router02.sol";
import "../interfaces/IJUNK.sol";
import "../interfaces/IHarvester.sol";

contract CardWithFees is Card {
  /** SEMI-CONSTANTS **/

  IUniswapV2Router02 public pancakeRouter;
  mapping(address => bool) private _exemptFromFees;
  address payable private feeSafe; // The safe that stores the BNB made from the fees

  // Fees
  uint256 public createCardFee = 625; // Fee collected when creating a card (/1000)
  uint256 public liquidityFee = 200; // Fee used when creating a card to add liquidity in the JUNK / BNB pool (/1000)
  uint256 public cashoutFee = 100; // Fee collected when cashing out JUNK tokens from cards (/1000)
  uint256 public refuelFee = 1000; // Percentage of the refueling cost that goes to the marketing wallet

  uint256 public minimumCardCreationFeeBalanceToSwap = 1e18; // JUNK balance required to perform a swap
  uint256 public minimumLiquidityFeeBalanceToSwap = 1e18; // JUNK balance required to add liquidity

  // Swapping booleans. Here to avoid having two swaps in the same block
  bool private swapping = false;
  bool private swapLiquify = false;

  /** VARIABLES **/

  uint256 public cardCreationFeeBalance = 0; // JUNK balance accumulated from card creation fees + cashout fees
  uint256 public liquidityFeeBalance = 0; // JUNK balance accumulated from liquidity fees

  /** EVENTS **/

  event SwappedCardCreationFeeBalance(uint256 amount);
  event AddedLiquidity(uint256 cardsAmount, uint256 bnbAmount);

  /** CONSTRUCTOR **/

  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe
  ) Card(_cardConstructor) {
    feeSafe = _feeSafe;
    pancakeRouter = IUniswapV2Router02(_pancakeRouter);
    _exemptFromFees[msg.sender] = true;
  }

  /** INTERNAL METHODS **/

  // Handles a transfer of "_amount" JUNK to the contract when creating a card, collects fees and swaps to BNB if appropriate
  function _processCardsTokensFromCardCreation(
    address _account,
    uint256 _amount,
    bool _isRefuel,
    bytes32[] memory // This will be used for custom card types
  ) internal virtual override {
    // Safety checks
    require(IERC20(junk).balanceOf(_account) >= _amount, "JUNK balance too low");
    require(_amount > 0, "Cannot transfer 0 JUNK tokens");

    uint256 createCardAmount = (_amount * (_isRefuel ? refuelFee : createCardFee)) / 1000;
    uint256 liquidityFeeAmount = _isRefuel ? 0 : (_amount * liquidityFee) / 1000;
    uint256 feeAmount = createCardAmount + liquidityFeeAmount;
    uint256 harvesterAmount = _amount - feeAmount;

    // Card creation fee
    cardCreationFeeBalance += createCardAmount;

    // Liquidity fee
    liquidityFeeBalance += liquidityFeeAmount;

    // Transfer feeAmount JUNK tokens from "_account" to this address
    if (feeAmount > 0) IHarvester(harvester).initiateJUNKTransfer(_account, address(this), feeAmount);

    // Transfer the remaining JUNK tokens from "_account" to the Harvester contract
    if (harvesterAmount > 0) IHarvester(harvester).initiateJUNKTransfer(_account, harvester, harvesterAmount);

    // If the one of the fee balances is above a certain amount, swap it for BNB and transfer it to the fee safe
    // Do not do both in one transaction
    if (!swapping && !swapLiquify && cardCreationFeeBalance > minimumCardCreationFeeBalanceToSwap) {
      // Forbid swapping card creation fees
      swapping = true;

      // Perform the swap
      _swapCardCreationFeeBalance();

      // Allow swapping again
      swapping = false;
    } else if (!swapping && !swapLiquify && liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap) {
      // Forbid swapping liquidity fees
      swapLiquify = true;

      // Perform the swap
      _liquify();

      // Allow swapping again
      swapLiquify = false;
    }
  }

  // Swaps "_amount" JUNK tokens for BNB
  function _swapJunkForBnb(uint256 _junkAmount) internal virtual {
    address[] memory path = new address[](2);
    path[0] = address(junk);
    path[1] = pancakeRouter.WETH();

    IERC20(junk).approve(address(pancakeRouter), _junkAmount);

    pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
      _junkAmount,
      0, // accept any amount of BNB
      path,
      address(this),
      block.timestamp
    );
  }

  // Processes a cashout and handles related fees
  function _cashout(address _account, uint256 _amount) internal virtual override {
    require(!isCashoutPaused, "Cashouts are paused until further notice");
    require(_amount > 0, "Cannot cashout 0 JUNK");
    require(fuel[_account] > 0, "Out of fuel");

    // Lower fuel
    fuel[_account]--;

    if (_exemptFromFees[_account]) {
      // Transfer the JUNK tokens to the user
      IERC20(junk).transferFrom(harvester, _account, _amount);
    } else {
      // Cashout fee
      uint256 fee = (_amount * cashoutFee) / 1000;

      // Transfer the cashout fee to this address
      IHarvester(harvester).initiateJUNKTransfer(_account, address(this), fee);
      cardCreationFeeBalance += fee;

      // If the fee balance is above a certain amount, swap it for BNB and transfer it to the fee safe
      if (cardCreationFeeBalance > minimumCardCreationFeeBalanceToSwap) _swapCardCreationFeeBalance();

      uint256 amountAfterFee = _amount - fee;

      // Mark the tokens as claimed
      IJUNK(junk).setClaimedTokens(_account, IJUNK(junk).claimedTokens(_account) + amountAfterFee);

      // Transfer the JUNK tokens to the user
      IERC20(junk).transferFrom(harvester, _account, amountAfterFee);
    }

    emit CardClaimed(_account, _amount, block.timestamp);
  }

  // Adds liquidity to the JUNK / BNB pair on Pancakeswap
  function _addLiquidity(uint256 _junkAmount, uint256 _bnbAmount) internal virtual {
    // Approve token transfer to cover all possible scenarios
    IERC20(junk).approve(address(pancakeRouter), _junkAmount);

    // Add the liquidity
    pancakeRouter.addLiquidityETH{value: _bnbAmount}(
      address(junk),
      _junkAmount,
      0, // Slippage is unavoidable
      0, // Slippage is unavoidable
      address(0),
      block.timestamp
    );

    emit AddedLiquidity(_junkAmount, _bnbAmount);
  }

  // Swaps card creation fee balance for BNB and sends it to the fee safe
  function _swapCardCreationFeeBalance() internal virtual {
    require(cardCreationFeeBalance > minimumCardCreationFeeBalanceToSwap, "Not enough JUNK tokens to swap for card creation fee");

    uint256 oldBalance = address(this).balance;

    // Swap
    _swapJunkForBnb(cardCreationFeeBalance);

    // Update cardCreationFeeBalance
    cardCreationFeeBalance = 0;

    // Send BNB to fee safe
    uint256 toSend = address(this).balance - oldBalance;
    feeSafe.transfer(toSend);

    emit SwappedCardCreationFeeBalance(toSend);
  }

  // Swaps liquidity fee balance for BNB and adds it to the JUNK / BNB pool
  function _liquify() internal virtual {
    require(liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap, "Not enough JUNK tokens to swap for adding liquidity");

    uint256 oldBalance = address(this).balance;

    // Sell half of the JUNK for BNB
    uint256 lowerHalf = liquidityFeeBalance / 2;
    uint256 upperHalf = liquidityFeeBalance - lowerHalf;

    // Swap
    _swapJunkForBnb(lowerHalf);

    // Update liquidityFeeBalance
    liquidityFeeBalance = 0;

    // Add liquidity
    _addLiquidity(upperHalf, address(this).balance - oldBalance);
  }

  /** DAO METHODS **/

  // Exempt an address from fees
  function exemptAddressFromFees(address _address) external virtual onlyRole(DAO) {
    _exemptFromFees[_address] = true;
  }

  // Include an address in fees
  function includeAddressInFees(address _address) external virtual onlyRole(DAO) {
    _exemptFromFees[_address] = false;
  }

  // Manually swaps the card creation fees
  function manualCardCreationSwap() external virtual onlyRole(DAO) {
    // Forbid swapping card creation fees
    swapping = true;

    // Perform the swap
    _swapCardCreationFeeBalance();

    // Allow swapping again
    swapping = false;
  }

  // Manually adds liquidity
  function manualLiquify() external virtual onlyRole(DAO) {
    // Forbid swapping liquidity fees
    swapLiquify = true;

    // Perform the swap
    _liquify();

    // Allow swapping again
    swapLiquify = false;
  }

  /** SETTERS **/

  function setPancakeRouter(address _pancakeRouter) external virtual onlyRole(DAO) {
    pancakeRouter = IUniswapV2Router02(_pancakeRouter);
  }

  function setFeeSafe(address payable _feeSafe) external virtual onlyRole(DAO) {
    feeSafe = _feeSafe;
  }

  function setMinimumCardCreationFeeBalanceToSwap(uint256 _minimumCardCreationFeeBalanceToSwap) external virtual onlyRole(DAO) {
    minimumCardCreationFeeBalanceToSwap = _minimumCardCreationFeeBalanceToSwap;
  }

  function setMinimumLiquidityFeeBalanceToSwap(uint256 _minimumLiquidityFeeBalanceToSwap) external virtual onlyRole(DAO) {
    minimumLiquidityFeeBalanceToSwap = _minimumLiquidityFeeBalanceToSwap;
  }

  function setCreateCardFee(uint256 _createCardFee) external virtual onlyRole(DAO) {
    createCardFee = _createCardFee;
  }

  function setLiquidityFee(uint256 _liquidityFee) external virtual onlyRole(DAO) {
    liquidityFee = _liquidityFee;
  }

  function setCashoutFee(uint256 _cashoutFee) external virtual onlyRole(DAO) {
    cashoutFee = _cashoutFee;
  }

  function setRefuelFee(uint256 _refuelFee) external virtual onlyRole(DAO) {
    refuelFee = _refuelFee;
  }
}


// File: ./contracts/cards/EmptyTerrainCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./CardWithFees.sol";

// This card cannot be transferred, but can be deleted as it is necessary when combining cards
// This card implements fees
// This card can only be created once per account

contract EmptyTerrainCard is CardWithFees {
  mapping(address => bool) public hasMinted;

  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe
  ) CardWithFees(_cardConstructor, _pancakeRouter, _feeSafe) {}

   function _createCard(
    address _account,
    string memory _cardName,
    bytes32[] memory _args // This will be used for custom card types
  ) internal override {
    require(!hasMinted[_account], "This account has already minted an empty terrain card");
    hasMinted[_account] = true;

    super._createCard(_account, _cardName, _args);
  }

  // Transfers a card
  function _transferCard(
    address,
    address,
    uint256
  ) internal pure override {
    revert("This card cannot be transferred");
  }

  // Change the name of your terrain
  function _changeName(string calldata _cardName) external {
    uint256 cardNameLength = bytes(_cardName).length;
    require(
      cardNameLength >= MINIMUM_CARD_NAME_LENGTH && cardNameLength <= MAXIMUM_CARD_NAME_LENGTH,
      "Card name length is invalid"
    );

    require(cardsOfUser[msg.sender].length > 0, "No card to rename");

    cardsOfUser[msg.sender][0].cardName = _cardName;
  }


  function setHasMinted(address _address, bool _hasMinted) external onlyRole(DAO) {
    hasMinted[_address] = _hasMinted;
  }
}


// File: ./contracts/cards/FusedCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./CardWithFees.sol";

contract FusedCard is CardWithFees {
  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe
  ) CardWithFees(_cardConstructor, _pancakeRouter, _feeSafe) {}

  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens
  function createCardWithTokens(
    address,
    string calldata,
    bytes32[] calldata
  ) external view virtual override onlyRole(HARVESTER) {
    revert("This type of card cannot be created with tokens");
  }

  // This function is called when a card is created by fusing other cards
  function createCardFromFusion(
    address _account,
    string calldata _cardName,
    bytes32[] calldata _args
  ) external virtual override onlyRole(HARVESTER) {
    // Create the card
    _createCard(_account, _cardName, _args);
  }
}


// File: ./contracts/cards/BasicCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "../Card.sol";

contract BasicCard is Card {
  constructor(CardConstructor memory _cardConstructor) Card(_cardConstructor) {}
}


// File: ./contracts/cards/TeamCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./OnePerAccountNoRewardCard.sol";

// This card cannot be transferred or deleted. Its name is also fixed in its constructor
// Whether this card can be minted or not depends on the number of team cards that were minted for this team and the others
// This card can only be minted once per account
// Three team cards must be minted before all other cards during deployment
// This card does not yield any rewards
// This card implements fees
// This card can only be created if the user also owns a specific card

contract TeamCard is OnePerAccountNoRewardCard {
  string public cardTitle;
  uint256 public mintThreshold = 400; // 400/1000 = 40%. This means up to 40% of team card holders can have this specific card
  uint256[] public otherTeamsIndexes;
  uint256[] public cardsToOwn; // Owning at least one card in this list is required in order to purchase this TeamCard

  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe,
    string memory _cardTitle,
    uint256[] memory _otherTeamsIndexes,
    uint256[] memory _cardsToOwn
  ) OnePerAccountNoRewardCard(_cardConstructor, _pancakeRouter, _feeSafe) {
    cardTitle = _cardTitle;
    otherTeamsIndexes = _otherTeamsIndexes;
    cardsToOwn = _cardsToOwn;
  }

  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens
  function _createCard(
    address _account,
    string memory, // This parameter is ignored and replaced with card title
    bytes32[] memory _args
  ) internal override onlyRole(HARVESTER) {
    // The user can only join one team at a time
    for (uint256 i = 0; i < otherTeamsIndexes.length; i++) {
      require(IHarvester(harvester).numberOfCardsByTypeByUser(_account, otherTeamsIndexes[i]) == 0, "You can only be part of one team");
    }

    // The user should own at least one of the cards in cardsToOwn, unless it is empty
    bool ownsCard = cardsToOwn.length == 0;

    for (uint256 i = 0; i < cardsToOwn.length; i++) {
      if (IHarvester(harvester).numberOfCardsByTypeByUser(_account, cardsToOwn[i]) > 0) {
        ownsCard = true;
        break;
      }
    }

    require(ownsCard, "Missing card in cardsToOwn");

    // Check if this card can be minted or not
    uint256 numberOfMembersFromAllTeams = totalCardsCreated;
    numberOfMembersFromAllTeams += IHarvester(harvester).cardTypes(otherTeamsIndexes[0]).totalCardsCreated();
    numberOfMembersFromAllTeams += IHarvester(harvester).cardTypes(otherTeamsIndexes[1]).totalCardsCreated();

    require(totalCardsCreated <= ((numberOfMembersFromAllTeams * mintThreshold) / 1000), "This team has too many members");

    super._createCard(_account, cardTitle, _args);
  }

  // Transfers a card
  function _transferCard(
    address,
    address,
    uint256
  ) internal pure override {
    revert("This card cannot be transferred");
  }

  // Deletes a card
  function _deleteCard(address, uint256) internal pure override {
    revert("This card cannot be deleted");
  }

  // Deletes the last card of an account
  function _deleteLastCard(address) internal pure override {
    revert("This card cannot be deleted");
  }

  function setCardTitle(string memory _cardTitle) external onlyRole(DAO) {
    cardTitle = _cardTitle;
  }

  function setMintThreshold(uint256 _mintThreshold) external onlyRole(DAO) {
    mintThreshold = _mintThreshold;
  }

  function setOtherTeamsIndexes(uint256[] memory _otherTeamsIndexes) external onlyRole(DAO) {
    otherTeamsIndexes = _otherTeamsIndexes;
  }

  function setCardsToOwn(uint256[] memory _cardsToOwn) external onlyRole(DAO) {
    cardsToOwn = _cardsToOwn;
  }
}


// File: ./contracts/cards/BuildingCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./NoRewardCard.sol";

// This card does not yield any rewards
// This card implements fees

contract BuildingCard is NoRewardCard {
  uint256 public maxSupply;

  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe,
    uint256 _maxSupply
  ) NoRewardCard(_cardConstructor, _pancakeRouter, _feeSafe) {
    maxSupply = _maxSupply;
  }

  /** INTERNAL METHODS **/

  function _createCard(
    address _account,
    string memory _cardName,
    bytes32[] memory _args // This will be used for custom card types
  ) internal override {
    require(totalCardsCreated < maxSupply, "Max supply reached");

    super._createCard(_account, _cardName, _args);
  }

  /** DAO METHODS **/

  function setMaxSupply(uint256 _maxSupply) external onlyRole(DAO) {
    maxSupply = _maxSupply;
  }

  function increaseMaxSupply(uint256 _increase) external onlyRole(DAO) {
    maxSupply += _increase;
  }
}


// File: ./contracts/cards/LimitedSupplyCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./CardWithFees.sol";

// TODO: This is wrong. The overriden function should be _createCard

contract LimitedSupplyCard is CardWithFees {
  uint256 public constant SUPPLY = 10;

  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe
  ) CardWithFees(_cardConstructor, _pancakeRouter, _feeSafe) {}


  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens
  function createCardWithTokens(
    address _account,
    string calldata _cardName,
    bytes32[] calldata _args
  ) external virtual override onlyRole(HARVESTER) {
    require(cardPrice > 0, "Cannot create a card with a card price of 0");
    require(totalCardsCreated < SUPPLY, "Sold out");

    // Transfer tokens and swap if needed
    _processCardsTokensFromCardCreation(_account, cardPrice, false, _args); // isRefuel: false

    // Create the card
    _createCard(_account, _cardName, _args);
  }
}


// File: ./contracts/cards/TerrainCard.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./FusedCard.sol";

// This card cannot be transferred, but can be deleted as it is necessary when combining cards
// This card implements fees
// This card can only created via fusion
// If the required cards array is not empty, this card can only be created if the user has at least one of them

contract TerrainCard is FusedCard {
  uint256[] public requiredCards;

  // Severity of the catastrophe that happened. Represents the total number of times the user will need to claim before he starts getting rewards again
  mapping(address => uint256) public severity;

  // Number of times the user has to cashout to fix his terrain. Goes down by one every time he cashes out
  mapping(address => uint256) public workLeft;

  // We don't want to use random numbers to avoid any unnecessary complexity
  // Instead, we try triggering a catastrophe type once, then we move on to the next
  mapping(address => uint256) public nextCatastropheToAttempt;

  // Risk of a catastrophe occurring
  uint256 public catastropheRisk; // /1000

  // Range of possible severities
  uint256[] public severities;

  // Reward divider when a catastrophe occurred
  uint256 public catastropheDivider; // /100

  // Used for random number generation
  uint256 private randNonce = 0;

  constructor(
    CardConstructor memory _cardConstructor,
    address _pancakeRouter,
    address payable _feeSafe,
    uint256[] memory _requiredCards,
    uint256 _catastropheRisk, // /1000
    uint256[] memory _severities,
    uint256 _catastropheDivider // /100
  ) FusedCard(_cardConstructor, _pancakeRouter, _feeSafe) {
    requiredCards = _requiredCards;
    catastropheRisk = _catastropheRisk; // //1000
    severities = _severities;
    catastropheDivider = _catastropheDivider; // /100
  }

  /** INTERNAL METHODS **/

  function _createCard(
    address _account,
    string memory _cardName,
    bytes32[] memory _args // This will be used for custom card types
  ) internal override {
    // The user should own at least one of the required cards
    bool hasRequiredCard = requiredCards.length == 0; // If the required card array is empty, we skip this check

    for (uint256 i = 0; i < requiredCards.length; i++) {
      if (IHarvester(harvester).cardTypes(requiredCards[i]).getCardCount(_account) > 0) {
        hasRequiredCard = true;
        break;
      }
    }

    require(hasRequiredCard, "User is missing required card");

    super._createCard(_account, _cardName, _args);
  }

  // Transfers a card
  function _transferCard(
    address,
    address,
    uint256
  ) internal pure override {
    revert("This card cannot be transferred");
  }

  // Deletes a card
  function _deleteCard(address _account, uint256 _cardIndex) internal override {
    require(workLeft[_account] == 0, "Cannot delete: catastrophe ongoing");

    super._deleteCard(_account, _cardIndex);
  }

  // Processes a cashout and handles related fees
  function _cashout(address _account, uint256 _amount) internal override {
    // Take the first card
    CardEntity storage card = cardsOfUser[_account][0];

    // A catastrophe is in progress
    if (workLeft[_account] > 0) {
      // Diminish the amount of work to do
      workLeft[_account]--;

      // Once we reach 0 workLeft, set severity to 0
      if (workLeft[_account] == 0) severity[_account] = 0;

      // Cashout a part of the amount
      super._cashout(_account, (_amount * 100) / catastropheDivider);
    }
    // Attempt a catastrophe
    else if (_generateRandomNumber(1000, _account) < catastropheRisk) {
      // Random number check was successful: trigger a catastrophe
      severity[_account] = severities[nextCatastropheToAttempt[_account]];
      workLeft[_account] = severity[_account];

      // Put rewardAvailable to 0
      card.lastClaimTime = _getNewLastClaimTime(_account, card.lastClaimTime);
    }
    // No catastrophe occurred
    else {
      if (severities.length > 0) {
        // Try the next catastrophe next time (if catastrophes can occur to begin with)
        if (nextCatastropheToAttempt[_account] >= severities.length - 1) nextCatastropheToAttempt[_account] = 0;
        else nextCatastropheToAttempt[_account]++;
      }

      // Leave the rest to CardWithFees
      super._cashout(_account, _amount);
    }
  }

  // Generates a pseudo-random number between 0 and _max
  function _generateRandomNumber(uint256 _max, address _account) internal returns (uint256) {
    uint256 cheems = uint256(keccak256(abi.encodePacked(block.timestamp, _account, ++randNonce))) % _max;
    return cheems;
  }

  // Change the name of your terrain
  function _changeName(string calldata _cardName) external {
    uint256 cardNameLength = bytes(_cardName).length;
    require(cardNameLength >= MINIMUM_CARD_NAME_LENGTH && cardNameLength <= MAXIMUM_CARD_NAME_LENGTH, "Card name length is invalid");

    require(cardsOfUser[msg.sender].length > 0, "No card to rename");

    cardsOfUser[msg.sender][0].cardName = _cardName;
  }

  /** DAO METHODS **/

  function setRequiredCards(uint256[] calldata _requiredCards) external onlyRole(DAO) {
    requiredCards = _requiredCards;
  }

  function setCatastropheRisk(uint256 _catastropheRisk) external onlyRole(DAO) {
    catastropheRisk = _catastropheRisk;
  }

  function setSeverities(uint256[] memory _severities) external onlyRole(DAO) {
    severities = _severities;
  }

  function setCatastropheDivider(uint256 _catastropheDivider) external onlyRole(DAO) {
    catastropheDivider = _catastropheDivider;
  }

  function setRandNonce(uint256 _randNonce) external onlyRole(DAO) {
    randNonce = _randNonce;
  }
}


// File: ./contracts/Harvester.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./interfaces/IERC20.sol";
import "./interfaces/IJUNK.sol";
import "./interfaces/ICard.sol";
import "./interfaces/IHarvester.sol";

contract Harvester is IHarvester, AccessControl, ReentrancyGuard {
  bytes32 public constant DAO = keccak256("DAO");
  bytes32 public constant CARD = keccak256("CARD");
  uint256 public constant MAX_UINT256 = 2**256 - 1;

  address public junk;
  ICard[] public override cardTypes;
  mapping(uint256 => bool) public isCardTypeDisabled;
  mapping(address => uint256[]) public cardTypesByUser;
  mapping(address => mapping(uint256 => uint256)) public override numberOfCardsByTypeByUser;

  // Each possible combination of cards is represented by an ID for quicker access,
  // linked to an array of numbers (cardTypes) representing the cards that need to be combined.
  // The last card in the array is the card that will be obtained as a result of the combination
  uint256 public numberOfCardCombinations = 0;
  mapping(uint256 => uint256[]) public cardCombinations;

  mapping(address => bool) public override rewardsAccumulateForUser;
  // Set this to a value lower than 100 to multiply the rewards
  // 100 --> x1 / 200 --> x0.5 / 50 --> x2
  mapping(address => uint256) public override divideRewardsForUser; // /100

  string constant DISABLED_CARD_TYPE_MESSAGE = "This card type is disabled";

  /** CONSTRUCTOR **/

  constructor(address _junk) {
    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
    grantRole(DAO, msg.sender);

    junk = _junk;
  }

  /** MAIN METHODS **/

  receive() external payable {}

  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens
  function createCardWithTokens(
    uint256 _cardType,
    string calldata _cardName,
    bytes32[] calldata _args
  ) external nonReentrant {
    // Safety checks
    require(_cardType < cardTypes.length, "Trying to create a card of a type that does not exist");
    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);

    cardTypes[_cardType].createCardWithTokens(msg.sender, _cardName, _args);

    _incrementCardsCountForUser(msg.sender, _cardType);
  }

  // Claims rewards from all cards
  function cashoutAll() external nonReentrant {
    // Iterate over memory data
    uint256[] memory cardTypesOfUser = cardTypesByUser[msg.sender];

    for (uint256 i = 0; i < cardTypesOfUser.length; i++) {
      if (!isCardTypeDisabled[cardTypesOfUser[i]]) cardTypes[cardTypesOfUser[i]].cashoutAll(msg.sender);
    }
  }

  // Claims rewards from one card type
  function cashoutCardType(uint256 _cardType) external nonReentrant {
    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);
    cardTypes[_cardType].cashoutAll(msg.sender);
  }

  // Claims rewards from one card
  function cashoutCard(uint256 _cardType, uint256 _cardIndex) external nonReentrant {
    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);
    cardTypes[_cardType].cashoutCard(msg.sender, _cardIndex);
  }

  // Refill fuel to allow next cashouts
  function refuel(uint256 _cardType, bytes32[] memory _args) external nonReentrant {
    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);
    cardTypes[_cardType].refuel(msg.sender, _args);
  }

  // Transfers a card to another address
  function transferCard(
    uint256 _cardType,
    address _newAccount,
    uint256 _cardIndex
  ) external nonReentrant {
    _transferCard(_cardType, msg.sender, _newAccount, _cardIndex);
  }

  // Deletes a card
  function deleteCard(uint256 _cardType, uint256 _cardIndex) external nonReentrant {
    _deleteCard(_cardType, msg.sender, _cardIndex);
  }

  // Combines 2+ cards together to make a new card. The old cards are lost in the process
  function fuseCards(
    uint256 _cardCombination,
    string calldata _newCardName,
    bytes32[] calldata _args
  ) external nonReentrant {
    _fuseCards(msg.sender, _cardCombination, _newCardName, _args);
  }

  /** INTERNAL METHODS **/

  function _incrementCardsCountForUser(address _account, uint256 _cardType) internal {
    // Update cardTypesByUser if needed
    if (numberOfCardsByTypeByUser[_account][_cardType] == 0) cardTypesByUser[_account].push(_cardType);

    // Increment the card count for this user
    numberOfCardsByTypeByUser[_account][_cardType]++;
  }

  function _decrementCardsCountForUser(address _account, uint256 _cardType) internal {
    // Decrement the card count for this user
    numberOfCardsByTypeByUser[_account][_cardType]--;

    // Update cardTypesByUser if needed
    if (numberOfCardsByTypeByUser[_account][_cardType] == 0) {
      // Iterate over memory data
      uint256[] memory cardTypesOfUser = cardTypesByUser[_account];

      for (uint256 i = 0; i < cardTypesOfUser.length; i++) {
        if (cardTypesOfUser[i] == _cardType) {
          // Delete this card type from cardTypesOfUser and exit
          uint256 lastCardTypeIndex = cardTypesOfUser.length - 1;
          cardTypesByUser[_account][i] = cardTypesOfUser[lastCardTypeIndex];
          cardTypesByUser[_account].pop();
          break;
        }
      }
    }
  }

  // Transfers a card to another address
  function _transferCard(
    uint256 _cardType,
    address _sender,
    address _recipient,
    uint256 _cardIndex
  ) internal {
    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);

    // Transfer the card on the Card contract
    cardTypes[_cardType].transferCard(_sender, _recipient, _cardIndex);

    // Update card count
    _incrementCardsCountForUser(_recipient, _cardType);
    _decrementCardsCountForUser(_sender, _cardType);
  }

  // Deletes a card
  function _deleteCard(
    uint256 _cardType,
    address _account,
    uint256 _cardIndex
  ) internal {
    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);

    // Delete the card on the relevant Card contract
    cardTypes[_cardType].deleteCard(_account, _cardIndex);

    // Update card count
    _decrementCardsCountForUser(_account, _cardType);
  }

  // Combines 2+ cards together to make a new card. The old cards are lost in the process
  function _fuseCards(
    address _account,
    uint256 _cardCombination,
    string calldata _newCardName,
    bytes32[] calldata _args
  ) internal {
    // Iterate over memory data
    uint256[] memory cardsOfCombination = cardCombinations[_cardCombination];
    require(_cardCombination < numberOfCardCombinations, "Trying to use a combination that does not exist");

    // Delete the fused cards (all cards in the "cardsOfCombination" array, except the last one)
    uint256 i;
    for (i = 0; i < cardsOfCombination.length - 1; i++) {
      require(!isCardTypeDisabled[cardsOfCombination[i]], DISABLED_CARD_TYPE_MESSAGE);

      // Delete the last card on the relevant Card contract
      cardTypes[cardsOfCombination[i]].deleteLastCard(_account);

      // Update card count
      _decrementCardsCountForUser(_account, cardsOfCombination[i]);
    }

    // Send the new card to "_account"
    cardTypes[cardsOfCombination[i]].createCardFromFusion(_account, _newCardName, _args);
    _incrementCardsCountForUser(_account, cardsOfCombination[i]);
  }

  // Creates a new card type
  function _createNewCardType(address _newCardTypeAddress) internal {
    // Approve this card type to spend JUNK tokens
    IERC20(junk).approve(_newCardTypeAddress, MAX_UINT256);

    // Store the new card type
    cardTypes.push(ICard(_newCardTypeAddress));

    // Give the new card type the CARD role
    IJUNK(junk).grantCardRole(_newCardTypeAddress);
    grantRole(CARD, _newCardTypeAddress);
  }

  /** VIEW METHODS **/

  // Returns the total number of cards, including all accounts and card types
  function getTotalCardsCreated() external view returns (uint256) {
    uint256 total = 0;
    for (uint256 i = 0; i < cardTypes.length; i++) {
      total += cardTypes[i].totalCardsCreated();
    }

    return total;
  }

  // Returns the card types an user owns
  function getAccountCardTypes(address _account) external view returns (uint256[] memory) {
    return cardTypesByUser[_account];
  }

  // Returns the card types an user owns (for each card)
  function getAccountCardTypesAsArray(address _account) external view returns (uint256[] memory) {
    // Iterate over memory data
    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];

    // Determine the result array size
    uint256 retSize = 0;
    uint256 i;
    for (i = 0; i < cardTypesOfUser.length; i++) {
      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];
    }

    uint256 k = 0;
    uint256[] memory accountCardTypesAsArray = new uint256[](retSize);
    for (i = 0; i < cardTypesOfUser.length; i++) {
      for (uint256 j = 0; j < numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]]; j++) {
        accountCardTypesAsArray[k] = cardTypesOfUser[i];
        k++;
      }
    }

    return accountCardTypesAsArray;
  }

  // Returns the card indexes an user owns (for each card). This is useful for calling the "cashoutCard()" function
  function getAccountCardIndexesAsArray(address _account) external view returns (uint256[] memory) {
    // Iterate over memory data
    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];

    // Determine the result array size
    uint256 retSize = 0;
    uint256 i;
    for (i = 0; i < cardTypesOfUser.length; i++) {
      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];
    }

    uint256 k = 0;
    uint256[] memory accountCardIndexesAsArray = new uint256[](retSize);
    for (i = 0; i < cardTypesOfUser.length; i++) {
      for (uint256 j = 0; j < numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]]; j++) {
        accountCardIndexesAsArray[k] = j;
        k++;
      }
    }

    return accountCardIndexesAsArray;
  }

  // Returns the amount of rewards available for a given account (all cards combined)
  function getAccountRewardAvailable(address _account) external view returns (uint256) {
    // Iterate over memory data
    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];

    uint256 accountRewardAvailable = 0;
    for (uint256 i = 0; i < cardTypesOfUser.length; i++) {
      // This will only add rewards to accountRewardAvailable if getAccountRewardAvailable does not revert
      try cardTypes[cardTypesOfUser[i]].getAccountRewardAvailable(_account) returns (uint256 rewardToAdd) {
        accountRewardAvailable += rewardToAdd;
      } catch {}
    }

    return accountRewardAvailable;
  }

  // Returns the amount of rewards available for a given account (for each card)
  function getAccountRewardAvailableAsArray(address _account) external view returns (uint256[] memory) {
    // Iterate over memory data
    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];

    // Determine the result array size
    uint256 retSize = 0;
    uint256 i;
    for (i = 0; i < cardTypesOfUser.length; i++) {
      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];
    }

    uint256 k = 0;
    uint256[] memory accountRewardAvailableAsArray = new uint256[](retSize);
    for (i = 0; i < cardTypesOfUser.length; i++) {
      uint256[] memory accountRewardAvailableAsArrayOfType = new uint256[](0);

      // This will only initiate accountRewardAvailableAsArrayOfType if getAccountRewardAvailableAsArray does not revert
      try cardTypes[cardTypesOfUser[i]].getAccountRewardAvailableAsArray(_account) returns (uint256[] memory _accountRewardAvailableAsArrayOfType) {
        accountRewardAvailableAsArrayOfType = _accountRewardAvailableAsArrayOfType;
      } catch {}

      for (uint256 j = 0; j < accountRewardAvailableAsArrayOfType.length; j++) {
        accountRewardAvailableAsArray[k] = accountRewardAvailableAsArrayOfType[j];
        k++;
      }
    }

    return accountRewardAvailableAsArray;
  }

  // Returns the amount of cards an account has
  function getCardCount(address _account) external view returns (uint256) {
    // Iterate over memory data
    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];

    uint256 cardCount = 0;
    for (uint256 i = 0; i < cardTypesOfUser.length; i++) {
      cardCount += cardTypes[cardTypesOfUser[i]].getCardCount(_account);
    }

    return cardCount;
  }

  // Returns the names of all the cards of an account
  function getAccountCardNames(address _account) external view returns (string[] memory) {
    // Iterate over memory data
    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];

    // Determine the result array size
    uint256 retSize = 0;
    uint256 i;
    for (i = 0; i < cardTypesOfUser.length; i++) {
      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];
    }

    uint256 k = 0;
    string[] memory accountCardNames = new string[](retSize);
    for (i = 0; i < cardTypesOfUser.length; i++) {
      string[] memory accountCardNamesOfType = cardTypes[cardTypesOfUser[i]].getAccountCardNames(_account);

      for (uint256 j = 0; j < accountCardNamesOfType.length; j++) {
        accountCardNames[k] = accountCardNamesOfType[j];
        k++;
      }
    }

    return accountCardNames;
  }

  // Returns the creation times of all the cards of an account
  function getAccountCreationTimes(address _account) external view returns (uint256[] memory) {
    // Iterate over memory data
    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];

    // Determine the result array size
    uint256 retSize = 0;
    uint256 i;
    for (i = 0; i < cardTypesOfUser.length; i++) {
      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];
    }

    uint256 k = 0;
    uint256[] memory accountCreationTimes = new uint256[](retSize);
    for (i = 0; i < cardTypesOfUser.length; i++) {
      uint256[] memory accountCreationTimesOfType = cardTypes[cardTypesOfUser[i]].getAccountCreationTimes(_account);

      for (uint256 j = 0; j < accountCreationTimesOfType.length; j++) {
        accountCreationTimes[k] = accountCreationTimesOfType[j];
        k++;
      }
    }

    return accountCreationTimes;
  }

  // Returns the last claiming times of all the cards of an account
  function getAccountLastClaimTimes(address _account) external view returns (uint256[] memory) {
    // Iterate over memory data
    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];

    // Determine the result array size
    uint256 retSize = 0;
    uint256 i;
    for (i = 0; i < cardTypesOfUser.length; i++) {
      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];
    }

    uint256 k = 0;
    uint256[] memory accountLastClaimTimes = new uint256[](retSize);
    for (i = 0; i < cardTypesOfUser.length; i++) {
      uint256[] memory accountLastClaimTimesOfType = cardTypes[cardTypesOfUser[i]].getAccountLastClaimTimes(_account);

      for (uint256 j = 0; j < accountLastClaimTimesOfType.length; j++) {
        accountLastClaimTimes[k] = accountLastClaimTimesOfType[j];
        k++;
      }
    }

    return accountLastClaimTimes;
  }

  // For a given card type, returns the amount of rewards available for a given account (all cards combined)
  function getAccountRewardAvailableByType(uint256 _cardType, address _account) external view returns (uint256) {
    return cardTypes[_cardType].getAccountRewardAvailable(_account);
  }

  // For a given card type, returns the amount of rewards available for a given account (for each card)
  function getAccountRewardAvailableAsArrayByType(uint256 _cardType, address _account) external view returns (uint256[] memory) {
    return cardTypes[_cardType].getAccountRewardAvailableAsArray(_account);
  }

  // For a given card type, returns the amount of rewards available for a given account and a given card index
  function getCardRewardAvailableByType(
    uint256 _cardType,
    address _account,
    uint256 _cardIndex
  ) external view returns (uint256) {
    return cardTypes[_cardType].getCardRewardAvailable(_account, _cardIndex);
  }

  // For a given card type, returns the card that corresponds to a particular account and card index
  function getCardByType(
    uint256 _cardType,
    address _account,
    uint256 _cardIndex
  ) external view returns (ICard.CardEntity memory) {
    return cardTypes[_cardType].getCard(_account, _cardIndex);
  }

  // For a given card type, returns the amount of cards an account has
  function getCardCountByType(uint256 _cardType, address _account) external view returns (uint256) {
    return cardTypes[_cardType].getCardCount(_account);
  }

  // For a given card type, returns the names of all the cards of an account
  function getAccountCardNamesByType(uint256 _cardType, address _account) external view returns (string[] memory) {
    return cardTypes[_cardType].getAccountCardNames(_account);
  }

  // For a given card type, returns the card name that corresponds to a particular account and card index
  function getCardNameByType(
    uint256 _cardType,
    address _account,
    uint256 _cardIndex
  ) external view returns (string memory) {
    return cardTypes[_cardType].getCardName(_account, _cardIndex);
  }

  // For a given card type, returns the creation times of all the cards of an account
  function getAccountCreationTimesByType(uint256 _cardType, address _account) external view returns (uint256[] memory) {
    return cardTypes[_cardType].getAccountCreationTimes(_account);
  }

  // For a given card type, returns the creation time that corresponds to a particular account and card index
  function getCardCreationTimeByType(
    uint256 _cardType,
    address _account,
    uint256 _cardIndex
  ) external view returns (uint256) {
    return cardTypes[_cardType].getCardCreationTime(_account, _cardIndex);
  }

  // For a given card type, returns the last claiming times of all the cards of an account
  function getAccountLastClaimTimesByType(uint256 _cardType, address _account) external view returns (uint256[] memory) {
    return cardTypes[_cardType].getAccountLastClaimTimes(_account);
  }

  // For a given card type, returns the last claiming time that corresponds to a particular account and card index
  function getCardLastClaimTimeByType(
    uint256 _cardType,
    address _account,
    uint256 _cardIndex
  ) external view returns (uint256) {
    return cardTypes[_cardType].getCardLastClaimTime(_account, _cardIndex);
  }

  /** DAO METHODS **/

  // Create a new card type
  function createNewCardTypeDao(address _newCardTypeAddress) external onlyRole(DAO) {
    _createNewCardType(_newCardTypeAddress);
  }

  // Update an existing card type
  // Warning: this will affect all cards holders in this contract
  function updateCardType(uint256 _cardType, address _newCardTypeAddress) external onlyRole(DAO) {
    require(_cardType < cardTypes.length, "Trying to update a card type that does not exist");

    // Approve the new card type to spend JUNK tokens and prevent the old one from doing so
    IERC20(junk).approve(_newCardTypeAddress, MAX_UINT256);
    IERC20(junk).approve(address(cardTypes[_cardType]), 0);

    // Store the new card type
    cardTypes[_cardType] = ICard(_newCardTypeAddress);
  }

  // !! This function is dangerous. Card types should not be updated as cardTypesByUser won't be
  // !! Only use this to delete a card type added by mistake. Prefer using updateCardType
  // Delete a card type
  function deleteCardType(uint256 _cardType) external onlyRole(DAO) {
    require(_cardType < cardTypes.length, "Trying to remove a card type that does not exist");

    // Prevent this card type from spending JUNK tokens
    IERC20(junk).approve(address(cardTypes[_cardType]), 0);

    // Keep the last card type
    uint256 lastCardTypeIndex = cardTypes.length - 1;
    cardTypes[_cardType] = cardTypes[lastCardTypeIndex];

    // Delete the given card type
    delete cardTypes[lastCardTypeIndex];
  }

  // Enables a card type
  // Card types are enabled by default, so this is only used when a card has been disabled manually
  function enableCardType(uint256 _cardType) external onlyRole(DAO) {
    address cardTypeAddress = address(cardTypes[_cardType]);

    // Approve this card to spend JUNK tokens
    IERC20(junk).approve(cardTypeAddress, MAX_UINT256);

    // Mark this cardType as enabled
    isCardTypeDisabled[_cardType] = false;

    // Add the CARD role to the cardType
    IJUNK(junk).grantCardRole(cardTypeAddress);
    grantRole(CARD, cardTypeAddress);
  }

  // Disables a card type
  function disableCardType(uint256 _cardType) external onlyRole(DAO) {
    address cardTypeAddress = address(cardTypes[_cardType]);

    // Prevent this card type from spending JUNK tokens
    IERC20(junk).approve(cardTypeAddress, 0);

    // Mark this cardType as disabled
    isCardTypeDisabled[_cardType] = true;

    // Remove the CARD role from the cardType
    IJUNK(junk).revokeCardRole(cardTypeAddress);
    revokeRole(CARD, cardTypeAddress);
  }

  // Create a new card combination
  function createNewCardCombination(uint256[] calldata _cardCombination) external onlyRole(DAO) {
    cardCombinations[numberOfCardCombinations] = _cardCombination;
    numberOfCardCombinations++;
  }

  // Update an existing card combination
  function updateCardCombination(uint256 _cardCombination, uint256[] calldata _newCardCombination) external onlyRole(DAO) {
    require(_cardCombination < numberOfCardCombinations, "Trying to update a card combination that does not exist");

    cardCombinations[_cardCombination] = _newCardCombination;
  }

  // Delete a card combination
  function deleteCardCombination(uint256 _cardCombination) external onlyRole(DAO) {
    require(_cardCombination < numberOfCardCombinations, "Trying to remove a card combination that does not exist");

    numberOfCardCombinations--;

    // Keep the last card combination
    cardCombinations[_cardCombination] = cardCombinations[numberOfCardCombinations];

    // Delete the given card combination
    delete cardCombinations[numberOfCardCombinations];
  }

  // Creates a card
  function createCardDao(
    uint256 _cardType,
    string calldata _cardName,
    address _account,
    bytes32[] calldata _args
  ) external onlyRole(DAO) {
    // Safety checks
    require(_cardType < cardTypes.length, "Trying to create a card of a type that does not exist");
    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);

    cardTypes[_cardType].createCardDao(_account, _cardName, _args);

    _incrementCardsCountForUser(_account, _cardType);
  }

  // Transfers a card to another address
  function transferCardDao(
    uint256 _cardType,
    address _sender,
    address _recipient,
    uint256 _cardIndex
  ) external onlyRole(DAO) {
    _transferCard(_cardType, _sender, _recipient, _cardIndex);
  }

  // Deletes a card
  function deleteCardDao(
    uint256 _cardType,
    address _account,
    uint256 _cardIndex
  ) external onlyRole(DAO) {
    _deleteCard(_cardType, _account, _cardIndex);
  }

  // Combines 2+ cards together to make a new card. The old cards are lost in the process
  function fuseCardsDao(
    address _account,
    uint256 _cardCombination,
    string calldata _newCardName,
    bytes32[] calldata _args
  ) external onlyRole(DAO) {
    _fuseCards(_account, _cardCombination, _newCardName, _args);
  }

  // Directly create cards in batch for "_accounts", all with the same names and custom arguments
  function airdropCards(
    address[] calldata _accounts,
    uint256 _cardType,
    string calldata _cardName,
    bytes32[] calldata _args
  ) external onlyRole(DAO) {
    // Safety checks
    require(_cardType < cardTypes.length, "Trying to create a card of a type that does not exist");
    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);

    for (uint256 i = 0; i < _accounts.length; i++) {
      cardTypes[_cardType].createCardDao(_accounts[i], _cardName, _args);
      _incrementCardsCountForUser(_accounts[i], _cardType);
    }
  }

  // Directly create cards in batch for "_accounts", all with their own names and custom arguments
  function airdropCustomCards(
    address[] calldata _accounts,
    uint256[] calldata _cardTypes,
    string[] calldata _cardNames,
    bytes32[][] calldata _argsArray
  ) external onlyRole(DAO) {
    for (uint256 i = 0; i < _accounts.length; i++) {
      // Safety checks
      require(_cardTypes[i] < cardTypes.length, "Trying to create a card of a type that does not exist");
      require(!isCardTypeDisabled[_cardTypes[i]], DISABLED_CARD_TYPE_MESSAGE);

      cardTypes[_cardTypes[i]].createCardDao(_accounts[i], _cardNames[i], _argsArray[i]);
      _incrementCardsCountForUser(_accounts[i], _cardTypes[i]);
    }
  }

  // Gives the CARD role to an address so it can call the "setClaimedTokens()" method among other CARD methods
  function grantCardRoleDAO(address _card) external onlyRole(DAO) {
    grantRole(CARD, _card);
  }

  function incrementCardsCountForUserDao(address _account, uint256 _cardType) external onlyRole(DAO) {
    _incrementCardsCountForUser(_account, _cardType);
  }

  function decrementCardsCountForUserDao(address _account, uint256 _cardType) external onlyRole(DAO) {
    _decrementCardsCountForUser(_account, _cardType);
  }

  function setJunk(address _junk) external onlyRole(DAO) {
    junk = _junk;
  }

  function setRewardsAccumulateForUserDao(address _account, bool _rewardsAccumulate) external onlyRole(DAO) {
    rewardsAccumulateForUser[_account] = _rewardsAccumulate;
  }

  function setDivideRewardsForUserDao(address _account, uint256 _divider) external onlyRole(DAO) {
    divideRewardsForUser[_account] = _divider;
  }

  // Withdraw BNB from the contract
  function withdraw(uint256 _amount) external onlyRole(DAO) {
    payable(msg.sender).transfer(_amount);
  }

  // Withdraw ERC20 from the contract
  function withdrawERC20(address _erc20, uint256 _amount) external onlyRole(DAO) {
    IERC20(_erc20).transfer(msg.sender, _amount);
  }

  /** CARD METHODS **/

  // Call to ERC20's "transferFrom()" from this contract and not the Card contract
  // If that call was done in Card.sol, then the user would have to approve every type of Card
  function initiateJUNKTransfer(
    address _sender,
    address _recipient,
    uint256 _amount
  ) external override onlyRole(CARD) {
    IERC20(junk).transferFrom(_sender, _recipient, _amount);
  }

  function setRewardsAccumulateForUser(address _account, bool _rewardsAccumulate) external override onlyRole(CARD) {
    rewardsAccumulateForUser[_account] = _rewardsAccumulate;
  }

  function setDivideRewardsForUser(address _account, uint256 _divider) external override onlyRole(CARD) {
    divideRewardsForUser[_account] = _divider;
  }
}


// File: ./contracts/vesting.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "@openzeppelin/contracts/finance/VestingWallet.sol";

contract Vesting is VestingWallet {
  constructor(
    address beneficiaryAddress,
    uint64 startTimestamp,
    uint64 durationSeconds
  ) payable VestingWallet(beneficiaryAddress, startTimestamp, durationSeconds) {}
}


// File: @openzeppelin/contracts/finance/PaymentSplitter.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/utils/SafeERC20.sol";
import "../utils/Address.sol";
import "../utils/Context.sol";

/**
 * @title PaymentSplitter
 * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware
 * that the Ether will be split in this way, since it is handled transparently by the contract.
 *
 * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each
 * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim
 * an amount proportional to the percentage of total shares they were assigned.
 *
 * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the
 * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}
 * function.
 *
 * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and
 * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you
 * to run tests before sending real value to this contract.
 */
contract PaymentSplitter is Context {
    event PayeeAdded(address account, uint256 shares);
    event PaymentReleased(address to, uint256 amount);
    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);
    event PaymentReceived(address from, uint256 amount);

    uint256 private _totalShares;
    uint256 private _totalReleased;

    mapping(address => uint256) private _shares;
    mapping(address => uint256) private _released;
    address[] private _payees;

    mapping(IERC20 => uint256) private _erc20TotalReleased;
    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;

    /**
     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at
     * the matching position in the `shares` array.
     *
     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no
     * duplicates in `payees`.
     */
    constructor(address[] memory payees, uint256[] memory shares_) payable {
        require(payees.length == shares_.length, "PaymentSplitter: payees and shares length mismatch");
        require(payees.length > 0, "PaymentSplitter: no payees");

        for (uint256 i = 0; i < payees.length; i++) {
            _addPayee(payees[i], shares_[i]);
        }
    }

    /**
     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully
     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the
     * reliability of the events, and not the actual splitting of Ether.
     *
     * To learn more about this see the Solidity documentation for
     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback
     * functions].
     */
    receive() external payable virtual {
        emit PaymentReceived(_msgSender(), msg.value);
    }

    /**
     * @dev Getter for the total shares held by payees.
     */
    function totalShares() public view returns (uint256) {
        return _totalShares;
    }

    /**
     * @dev Getter for the total amount of Ether already released.
     */
    function totalReleased() public view returns (uint256) {
        return _totalReleased;
    }

    /**
     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20
     * contract.
     */
    function totalReleased(IERC20 token) public view returns (uint256) {
        return _erc20TotalReleased[token];
    }

    /**
     * @dev Getter for the amount of shares held by an account.
     */
    function shares(address account) public view returns (uint256) {
        return _shares[account];
    }

    /**
     * @dev Getter for the amount of Ether already released to a payee.
     */
    function released(address account) public view returns (uint256) {
        return _released[account];
    }

    /**
     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an
     * IERC20 contract.
     */
    function released(IERC20 token, address account) public view returns (uint256) {
        return _erc20Released[token][account];
    }

    /**
     * @dev Getter for the address of the payee number `index`.
     */
    function payee(uint256 index) public view returns (address) {
        return _payees[index];
    }

    /**
     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the
     * total shares and their previous withdrawals.
     */
    function release(address payable account) public virtual {
        require(_shares[account] > 0, "PaymentSplitter: account has no shares");

        uint256 totalReceived = address(this).balance + totalReleased();
        uint256 payment = _pendingPayment(account, totalReceived, released(account));

        require(payment != 0, "PaymentSplitter: account is not due payment");

        _released[account] += payment;
        _totalReleased += payment;

        Address.sendValue(account, payment);
        emit PaymentReleased(account, payment);
    }

    /**
     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their
     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20
     * contract.
     */
    function release(IERC20 token, address account) public virtual {
        require(_shares[account] > 0, "PaymentSplitter: account has no shares");

        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);
        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));

        require(payment != 0, "PaymentSplitter: account is not due payment");

        _erc20Released[token][account] += payment;
        _erc20TotalReleased[token] += payment;

        SafeERC20.safeTransfer(token, account, payment);
        emit ERC20PaymentReleased(token, account, payment);
    }

    /**
     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and
     * already released amounts.
     */
    function _pendingPayment(
        address account,
        uint256 totalReceived,
        uint256 alreadyReleased
    ) private view returns (uint256) {
        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;
    }

    /**
     * @dev Add a new payee to the contract.
     * @param account The address of the payee to add.
     * @param shares_ The number of shares owned by the payee.
     */
    function _addPayee(address account, uint256 shares_) private {
        require(account != address(0), "PaymentSplitter: account is the zero address");
        require(shares_ > 0, "PaymentSplitter: shares are 0");
        require(_shares[account] == 0, "PaymentSplitter: account already has shares");

        _payees.push(account);
        _shares[account] = shares_;
        _totalShares = _totalShares + shares_;
        emit PayeeAdded(account, shares_);
    }
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";
import "../utils/Context.sol";
import "../utils/Strings.sol";
import "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role, _msgSender());
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: hardhat/console.sol
// SPDX-License-Identifier: MIT
pragma solidity >= 0.4.22 <0.9.0;

library console {
	address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);

	function _sendLogPayload(bytes memory payload) private view {
		uint256 payloadLength = payload.length;
		address consoleAddress = CONSOLE_ADDRESS;
		assembly {
			let payloadStart := add(payload, 32)
			let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)
		}
	}

	function log() internal view {
		_sendLogPayload(abi.encodeWithSignature("log()"));
	}

	function logInt(int p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(int)", p0));
	}

	function logUint(uint p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
	}

	function logString(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function logBool(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function logAddress(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function logBytes(bytes memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
	}

	function logBytes1(bytes1 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
	}

	function logBytes2(bytes2 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
	}

	function logBytes3(bytes3 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
	}

	function logBytes4(bytes4 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
	}

	function logBytes5(bytes5 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
	}

	function logBytes6(bytes6 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
	}

	function logBytes7(bytes7 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
	}

	function logBytes8(bytes8 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
	}

	function logBytes9(bytes9 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
	}

	function logBytes10(bytes10 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
	}

	function logBytes11(bytes11 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
	}

	function logBytes12(bytes12 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
	}

	function logBytes13(bytes13 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
	}

	function logBytes14(bytes14 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
	}

	function logBytes15(bytes15 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
	}

	function logBytes16(bytes16 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
	}

	function logBytes17(bytes17 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
	}

	function logBytes18(bytes18 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
	}

	function logBytes19(bytes19 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
	}

	function logBytes20(bytes20 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
	}

	function logBytes21(bytes21 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
	}

	function logBytes22(bytes22 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
	}

	function logBytes23(bytes23 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
	}

	function logBytes24(bytes24 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
	}

	function logBytes25(bytes25 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
	}

	function logBytes26(bytes26 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
	}

	function logBytes27(bytes27 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
	}

	function logBytes28(bytes28 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
	}

	function logBytes29(bytes29 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
	}

	function logBytes30(bytes30 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
	}

	function logBytes31(bytes31 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
	}

	function logBytes32(bytes32 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
	}

	function log(uint p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
	}

	function log(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function log(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function log(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function log(uint p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));
	}

	function log(uint p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));
	}

	function log(uint p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));
	}

	function log(uint p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));
	}

	function log(string memory p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));
	}

	function log(string memory p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
	}

	function log(string memory p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
	}

	function log(string memory p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
	}

	function log(bool p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));
	}

	function log(bool p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
	}

	function log(bool p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
	}

	function log(bool p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
	}

	function log(address p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));
	}

	function log(address p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
	}

	function log(address p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
	}

	function log(address p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
	}

	function log(uint p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));
	}

	function log(uint p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));
	}

	function log(uint p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));
	}

	function log(uint p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));
	}

	function log(uint p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));
	}

	function log(uint p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));
	}

	function log(uint p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));
	}

	function log(uint p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));
	}

	function log(uint p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));
	}

	function log(uint p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));
	}

	function log(uint p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));
	}

	function log(uint p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
	}

	function log(string memory p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));
	}

	function log(string memory p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
	}

	function log(string memory p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
	}

	function log(string memory p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
	}

	function log(bool p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));
	}

	function log(bool p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));
	}

	function log(bool p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));
	}

	function log(bool p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
	}

	function log(bool p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));
	}

	function log(bool p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
	}

	function log(bool p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
	}

	function log(bool p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
	}

	function log(bool p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));
	}

	function log(bool p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
	}

	function log(bool p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
	}

	function log(bool p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
	}

	function log(address p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));
	}

	function log(address p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));
	}

	function log(address p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));
	}

	function log(address p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));
	}

	function log(address p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));
	}

	function log(address p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
	}

	function log(address p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
	}

	function log(address p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
	}

	function log(address p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));
	}

	function log(address p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
	}

	function log(address p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
	}

	function log(address p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
	}

	function log(address p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));
	}

	function log(address p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
	}

	function log(address p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
	}

	function log(address p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
	}

	function log(uint p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));
	}

	function log(uint p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
	}

	function log(string memory p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
	}

	function log(bool p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
	}

	function log(address p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
	}

}


// File: @openzeppelin/contracts/finance/VestingWallet.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (finance/VestingWallet.sol)
pragma solidity ^0.8.0;

import "../token/ERC20/utils/SafeERC20.sol";
import "../utils/Address.sol";
import "../utils/Context.sol";
import "../utils/math/Math.sol";

/**
 * @title VestingWallet
 * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens
 * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.
 * The vesting schedule is customizable through the {vestedAmount} function.
 *
 * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.
 * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)
 * be immediately releasable.
 */
contract VestingWallet is Context {
    event EtherReleased(uint256 amount);
    event ERC20Released(address indexed token, uint256 amount);

    uint256 private _released;
    mapping(address => uint256) private _erc20Released;
    address private immutable _beneficiary;
    uint64 private immutable _start;
    uint64 private immutable _duration;

    /**
     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.
     */
    constructor(
        address beneficiaryAddress,
        uint64 startTimestamp,
        uint64 durationSeconds
    ) {
        require(beneficiaryAddress != address(0), "VestingWallet: beneficiary is zero address");
        _beneficiary = beneficiaryAddress;
        _start = startTimestamp;
        _duration = durationSeconds;
    }

    /**
     * @dev The contract should be able to receive Eth.
     */
    receive() external payable virtual {}

    /**
     * @dev Getter for the beneficiary address.
     */
    function beneficiary() public view virtual returns (address) {
        return _beneficiary;
    }

    /**
     * @dev Getter for the start timestamp.
     */
    function start() public view virtual returns (uint256) {
        return _start;
    }

    /**
     * @dev Getter for the vesting duration.
     */
    function duration() public view virtual returns (uint256) {
        return _duration;
    }

    /**
     * @dev Amount of eth already released
     */
    function released() public view virtual returns (uint256) {
        return _released;
    }

    /**
     * @dev Amount of token already released
     */
    function released(address token) public view virtual returns (uint256) {
        return _erc20Released[token];
    }

    /**
     * @dev Release the native token (ether) that have already vested.
     *
     * Emits a {TokensReleased} event.
     */
    function release() public virtual {
        uint256 releasable = vestedAmount(uint64(block.timestamp)) - released();
        _released += releasable;
        emit EtherReleased(releasable);
        Address.sendValue(payable(beneficiary()), releasable);
    }

    /**
     * @dev Release the tokens that have already vested.
     *
     * Emits a {TokensReleased} event.
     */
    function release(address token) public virtual {
        uint256 releasable = vestedAmount(token, uint64(block.timestamp)) - released(token);
        _erc20Released[token] += releasable;
        emit ERC20Released(token, releasable);
        SafeERC20.safeTransfer(IERC20(token), beneficiary(), releasable);
    }

    /**
     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.
     */
    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {
        return _vestingSchedule(address(this).balance + released(), timestamp);
    }

    /**
     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.
     */
    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {
        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);
    }

    /**
     * @dev Virtual implementation of the vesting formula. This returns the amout vested, as a function of time, for
     * an asset given its total historical allocation.
     */
    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {
        if (timestamp < start()) {
            return 0;
        } else if (timestamp > start() + duration()) {
            return totalAllocation;
        } else {
            return (totalAllocation * (timestamp - start())) / duration();
        }
    }
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a / b + (a % b == 0 ? 0 : 1);
    }
}

