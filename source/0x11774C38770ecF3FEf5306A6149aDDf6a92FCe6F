
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: contracts/EscrowDatabase.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/access/Ownable.sol";

contract EscrowDatabase is Ownable {
    uint256 public escrowCounter = 0;
    address[] private _factoriesContracts;
    address[] private _allEscrowContracts;
    address[] private _goodsEscrowContracts;
    address[] private _servicesEscrowContracts;
    address[] private _nftEscrowContracts;
    address[] private _sourceCodeContracts;
    address[] private _gamblingContracts;
    mapping(address => address[]) private _escrowsOfUser;

    fallback() external payable {}

    receive() external payable {}

    modifier onlyFactoriesContracts() {
        bool _found = false;

        for (uint256 i = 0; i < _factoriesContracts.length; i++) {
            if (_factoriesContracts[i] == msg.sender) {
                _found = true;
            }
        }

        require(_found, "The call is only available from the factory smart contract");
        _;
    }

    modifier factoriesAndAllContracts() {
        bool _foundInFactoriesContracts = false;
        bool _foundInAllContracts = false;

        for (uint256 i = 0; i < _factoriesContracts.length; i++) {
            if (_factoriesContracts[i] == msg.sender) {
                _foundInFactoriesContracts = true;
            }
        }

        for (uint256 i = 0; i < _allEscrowContracts.length; i++) {
            if (_allEscrowContracts[i] == msg.sender) {
                _foundInAllContracts = true;
            }
        }

        require(_foundInFactoriesContracts || _foundInAllContracts, "The call is only available from the factory or escrow smart contract");
        _;
    }

    function increaseEscrowCounter() public onlyFactoriesContracts {
        escrowCounter += 1;
    }

    function addFactoriesContracts(address _factoryAddress) public onlyOwner {
        _factoriesContracts.push(_factoryAddress);
    }

    function addAllEscrowContracts(address _allContractAddress) public onlyFactoriesContracts {
        _allEscrowContracts.push(_allContractAddress);
    }

    function addGoodsEscrowContracts(address _goodsContractAddress) public onlyFactoriesContracts {
        _goodsEscrowContracts.push(_goodsContractAddress);
    }

    function addServicesEscrowContracts(address _servicesContractAddress) public onlyFactoriesContracts {
        _servicesEscrowContracts.push(_servicesContractAddress);
    }

    function addNftEscrowContracts(address _nftContractAddress) public onlyFactoriesContracts {
        _nftEscrowContracts.push(_nftContractAddress);
    }

    function addSourceCodeEscrowContracts(address _sourceCodeContractAddress) public onlyFactoriesContracts {
        _sourceCodeContracts.push(_sourceCodeContractAddress);
    }

    function addGamblingEscrowContracts(address _gamblingContractAddress) public onlyFactoriesContracts {
        _gamblingContracts.push(_gamblingContractAddress);
    }

    function addEscrowsOfUser(address _address, address _escrowContractAddress) public factoriesAndAllContracts {
        _escrowsOfUser[_address].push(_escrowContractAddress);
    }

    function deleteFromEscrowsOfUser(address _address, address _escrowContractAddress) public factoriesAndAllContracts {
        for (uint256 i = 0; i < _escrowsOfUser[_address].length; i++) {
            if (_escrowsOfUser[_address][i] == _escrowContractAddress) {
                _escrowsOfUser[_address][i] = _escrowsOfUser[_address][_escrowsOfUser[_address].length - 1];
                _escrowsOfUser[_address].pop();
            }
        }
    }

    function getEscrowAddressById(uint256 _id) public view returns (address) {
        return _allEscrowContracts[_id - 1];
    }

    function getFactoriesContracts() public onlyOwner view returns (address[] memory) {
        return _factoriesContracts;
    }

    function getAllEscrowContracts() public view returns (address[] memory) {
        return _allEscrowContracts;
    }

    function getGoodsEscrowContracts() public view returns (address[] memory) {
        return _goodsEscrowContracts;
    }

    function getServicesEscrowContracts() public view returns (address[] memory) {
        return _servicesEscrowContracts;
    }

    function getNftEscrowContracts() public view returns (address[] memory) {
        return _nftEscrowContracts;
    }

    function getSourceCodeEscrowContracts() public view returns (address[] memory) {
        return _sourceCodeContracts;
    }

    function getGamblingEscrowContracts() public view returns (address[] memory) {
        return _gamblingContracts;
    }

    function getEscrowsOfUserByAddress(address _address) public view returns (address[] memory) {
        return _escrowsOfUser[_address];
    }
}

// File: contracts/escrows/GamblingEscrow.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "../interfaces/IEscrowDatabase.sol";
import "../interfaces/IEscrowDispute.sol";

contract GamblingEscrow {
    using SafeMath for uint256;

    IEscrowDatabase private _escrowDatabaseContract;
    IEscrowDispute private _escrowDisputeContract;

    struct Escrow {
        uint256 id;
        string title;
        string escrowType;
        address coinAddress;
        uint256 wager;
        string proposition;
        string category;
        bool active;
        uint256 creationTime;
    }

    struct ParticipantsStorage {
        uint256 counter;
        uint256 bidCounter;
        mapping(address => uint256) addressToId;
        mapping(uint256 => Participant) participants;
    }

    struct Participant {
        string betterName;
        string bet;
        address betterAddress;
        bool madeBid;
    }

    address public owner;
    address public arbiter;
    address public winner;
    IERC20 private _coin;
    uint256 public platformFee = 3; // %
    address feeRecipient = 0x6501644989e8029892792ebeE2DdF276b2A112FD;
    Escrow private _escrow;
    ParticipantsStorage private _participantsStorage;

    constructor(
        address _creator,
        address _arbiter, 
        Escrow memory _createdEscrow, 
        Participant[] memory _createdParticipants,
        address _escrowDatabaseAddress,
        address _escrowDisputeAddress
    ) {
        owner = _creator;
        arbiter = _arbiter;

        _escrowDatabaseContract = IEscrowDatabase(_escrowDatabaseAddress);
        _escrowDisputeContract = IEscrowDispute(_escrowDisputeAddress);

        _escrow = _createdEscrow;

        for (uint256 i = 0; i < _createdParticipants.length; i++) {
            _participantsStorage.counter += 1;

            Participant memory _newParticipant = Participant(
                _createdParticipants[i].betterName,
                _createdParticipants[i].bet,
                _createdParticipants[i].betterAddress,
                false
            );

            _participantsStorage.participants[_participantsStorage.counter] = _newParticipant;
            _participantsStorage.addressToId[_newParticipant.betterAddress] = _participantsStorage.counter;
        }

        _coin = IERC20(_createdEscrow.coinAddress);
    }

    fallback() external payable {}

    receive() external payable {}

    function getEscrow() public view returns (Escrow memory) {
        return _escrow;
    }

    function getParticipants() public view returns (Participant[] memory) {
        Participant[] memory _participants = new Participant[](_participantsStorage.counter);

        for (uint256 i = 1; i <= _participantsStorage.counter; i++) {
            _participants[i - 1] = _participantsStorage.participants[i];
        }

        return _participants;
    }

    function getParticipantsCounter() public view returns(uint256) {
        return _participantsStorage.counter;
    }

    function getParticipantIdByAddress(address _address) public view returns(uint256) {
        uint256 _participantId = _participantsStorage.addressToId[_address];

        require(_participantId != 0, "Address is not escrow participant");

        return _participantId;
    }

    function getParticipantByAddress(address _address) public view returns(Participant memory) {
        uint256 _participantId = getParticipantIdByAddress(_address);

        return _participantsStorage.participants[_participantId];
    }

    function getParticipantById(uint256 _id) public view returns(Participant memory) {
        return _participantsStorage.participants[_id];
    }
    
    modifier notDisputed() {
        bool disputeStatus = _escrowDisputeContract.getDisputeStatusByAddressAndMilestoneId(address(this), 1);

        require(!disputeStatus, "Escrow in dispute status");
        _;
    }

    function participantMadeBid() public notDisputed {
        uint256 _participantId = getParticipantIdByAddress(msg.sender);

        require(!_participantsStorage.participants[_participantId].madeBid, "Address is already maded bid");

        uint256 _platformFee = ((_escrow.wager).mul(platformFee)).div(100);

        uint256 _totalFee = (_escrow.wager).add(_platformFee);

        _coin.transferFrom(msg.sender, address(this), _totalFee); // Taking money into Escrow with platform fee
        _coin.transfer(feeRecipient, _platformFee);

        _participantsStorage.participants[_participantId].madeBid = true;
        _participantsStorage.bidCounter += 1;
    }

    function setWinner(address _address) public notDisputed {
        require(_escrow.active, "The winner has already set");
        require(arbiter == msg.sender, "You are not an Escrow arbiter");
        require(_participantsStorage.counter == _participantsStorage.bidCounter, "Not all participants have maded bid");

        uint256 _participantId = getParticipantIdByAddress(_address);
        address _winner = _participantsStorage.participants[_participantId].betterAddress;
        uint256 _totalFee = (_escrow.wager).mul(_participantsStorage.counter);

        _coin.transfer(_winner, _totalFee);

        winner = _winner;
        _escrow.active = false;
    }

    function raiseDispute(
        string memory _title,
        string memory _body,
        string[] memory _choices,
        uint64 _start,
        uint64 _end,
        uint256 _refund
    ) public returns (uint256) {
        require(_participantsStorage.addressToId[msg.sender] != 0, "Address is not escrow participant");

        return _escrowDisputeContract.raiseDispute(
            1,
            true,
            msg.sender,
            _title,
            _body,
            _choices,
            _start,
            _end,
            _refund
        );
    }

    function resolveDispute() public returns (bool) {
        uint8 _disputeWinningChoice = _escrowDisputeContract.resolveDispute(1, msg.sender);

        if (_disputeWinningChoice == _participantsStorage.counter + 1) {
            for (uint256 i = 1; i <= _participantsStorage.counter; i++) {
                Participant memory _participant = getParticipantById(i);

                if (_participant.madeBid) {
                    _coin.transfer(_participant.betterAddress, _escrow.wager);
                }
            }

            _escrow.active = false;
            return true;
        } else if (_disputeWinningChoice != 0) {
            address _participantAddress = getParticipantById(_disputeWinningChoice).betterAddress;
            _coin.transfer(_participantAddress, _escrow.wager.mul(_participantsStorage.bidCounter));

            _escrow.active = false;
            return true;
        } else {
            return false;
        }
    }

    function cancelEscrow() public notDisputed {
        require(msg.sender == owner || msg.sender == arbiter, "You are not an owner or arbiter this escrow");
        require(_participantsStorage.counter == 0, "A bid was made");

        _escrow = Escrow(
            _escrow.id,
            "",
            "",
            address(0),
            0,
            "",
            "",
            false,
            _escrow.creationTime
        );

        for (uint256 i = 1; i <= _participantsStorage.counter; i++) {
            address _participantAddress = _participantsStorage.participants[i].betterAddress;
            _escrowDatabaseContract.deleteFromEscrowsOfUser(_participantAddress, address(this));
        }

        _escrowDatabaseContract.deleteFromEscrowsOfUser(owner, address(this));
        _escrowDatabaseContract.deleteFromEscrowsOfUser(arbiter, address(this));
    }
}

// File: contracts/factories/GamblingFactory.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/access/Ownable.sol";
import "../interfaces/IEscrowDatabase.sol";
import "../interfaces/IEscrowDispute.sol";
import "../escrows/GamblingEscrow.sol";
import "../EscrowDatabase.sol";

contract GamblingFactory is Ownable {
    IEscrowDatabase private _escrowDatabaseContract;
    IEscrowDispute private _escrowDisputeContract;

    fallback() external payable {}

    receive() external payable {}

    function setEscrowDatabaseContract(address _escrowDatabaseAddress) public onlyOwner {
        _escrowDatabaseContract = IEscrowDatabase(_escrowDatabaseAddress);
    }

    function setEscrowDisputeContract(address _escrowDisputeAddress) public onlyOwner {
        _escrowDisputeContract = IEscrowDispute(_escrowDisputeAddress);
    }

    function createGamblingEscrow(
        address _arbiter,
        address _coinAddress,
        uint256 _wager,
        string memory _title,
        string memory _itemDescription,
        string memory _itemCategory,
        GamblingEscrow.Participant[] memory _participants
    ) public returns (address) {
        _escrowDatabaseContract.increaseEscrowCounter();

        GamblingEscrow.Escrow memory _escrow = GamblingEscrow.Escrow(
            _escrowDatabaseContract.escrowCounter(),
            _title,
            "Gambling",
            _coinAddress,
            _wager,
            _itemDescription,
            _itemCategory,
            true,
            block.timestamp
        );

        GamblingEscrow _newGamblingEscrow = new GamblingEscrow(
            msg.sender,
            _arbiter, 
            _escrow, 
            _participants, 
            address(_escrowDatabaseContract),
            address(_escrowDisputeContract)
        );

        _escrowDatabaseContract.addAllEscrowContracts(address(_newGamblingEscrow));
        _escrowDatabaseContract.addGamblingEscrowContracts(address(_newGamblingEscrow));
        _escrowDatabaseContract.addEscrowsOfUser(_arbiter, address(_newGamblingEscrow));

        for (uint256 i = 0; i < _participants.length; i++) {
            if (_participants[i].betterAddress != _arbiter) {
                _escrowDatabaseContract.addEscrowsOfUser(_participants[i].betterAddress, address(_newGamblingEscrow));
            }
        }

        return address(_newGamblingEscrow);
    }
}

// File: contracts/interfaces/IEscrowDatabase.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.18;

interface IEscrowDatabase {
    function escrowCounter() external view returns(uint256);

    function increaseEscrowCounter() external;

    function addAllEscrowContracts(address _allContractAddress) external;

    function addGoodsEscrowContracts(address _goodsContractAddress) external;

    function addEscrowsOfUser(address _address, address _escrowContractAddress) external;

    function deleteFromEscrowsOfUser(address _address, address _escrowContractAddress) external;

    function addServicesEscrowContracts(address _servicesContractAddress) external;

    function addNftEscrowContracts(address _nftContractAddress) external;

    function addSourceCodeEscrowContracts(address _sourceCodeContractAddress) external;

    function addGamblingEscrowContracts(address _gamblingContractAddress) external;
    
    function getAllEscrowContracts() external view returns(address[] memory);

    function getGoodsEscrowContracts() external view returns (address[] memory);

    function getServicesEscrowContracts() external view returns (address[] memory);

    function getNftEscrowContracts() external view returns (address[] memory);

    function getSourceCodeEscrowContracts() external view returns (address[] memory);

    function getGamblingEscrowContracts() external view returns (address[] memory);
}

// File: contracts/interfaces/IEscrowDispute.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.18;

interface IEscrowDispute {
    function getEscrowsInDispute() external view returns (address[] memory);

    function getRefund(uint256 _milestoneId) external view returns(uint256);

    function getRaiseByBuyerOfDispute(uint256 _milestoneId) external view returns(bool);

    function getDisputeStatusByAddressAndMilestoneId(address _escrowAddress, uint256 _milestoneId) external view returns(bool);

    function raiseDispute(
        uint256 _milestoneId,
        bool _raiseByBuyer,
        address _creator,
        string memory _title,
        string memory _body,
        string[] memory _choices,
        uint64 _start,
        uint64 _end,
        uint256 _refund
    ) external returns (uint256);

    function resolveDispute(
        uint256 _milestoneId, 
        address _caller
    ) external returns (uint8);
}
