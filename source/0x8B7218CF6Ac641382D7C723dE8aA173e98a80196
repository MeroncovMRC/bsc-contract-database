{"CFTokenSinglePool_merge.sol":{"content":"pragma solidity 0.6.12;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./IBEP20.sol\u0027;\r\nimport \u0027./Ownable.sol\u0027;\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity \u003e=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WDCC() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity \u003e=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract CFTokenCallbackSinglePool is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public router;\r\n    address public cfTokenAddress;\r\n    address public toAddress;\r\n    address public usdtAddress;\r\n\r\n    bool inSwapAndLiquify;\r\n    int public locki = 0;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        locki = locki + 1;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor (\r\n        address _router,\r\n        address _cfToken,\r\n        address _usdtAddress,\r\n        address _toAddress\r\n    ) public {\r\n        router = IUniswapV2Router02(_router);\r\n        cfTokenAddress = _cfToken;\r\n        usdtAddress = _usdtAddress;\r\n        toAddress = _toAddress;\r\n    }\r\n\r\n\r\n    function swapAndLiquify() public  {\r\n        if(!inSwapAndLiquify){\r\n            uint256 contractTokenBalance = IBEP20(cfTokenAddress).balanceOf(address(this));\r\n            // split the contract balance into halves\r\n            uint256 half = contractTokenBalance.div(2);\r\n            uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n\r\n            uint256 initialBalanceToken0 = IBEP20(usdtAddress).balanceOf(address(this));\r\n            swapTokensForToken(half, toAddress, usdtAddress);\r\n            // swapTokensForEth(cfCallAddress, half);\r\n            uint256 newBalanceToken0 = IBEP20(usdtAddress).balanceOf(address(this));\r\n            half = newBalanceToken0.sub(initialBalanceToken0);\r\n\r\n            // add liquidity to uniswap\r\n            addLiquidity(address(cfTokenAddress), otherHalf, usdtAddress, half, toAddress);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function swapTokensForToken(\r\n        uint256 tokenAmount,\r\n        address to,\r\n        address usdtAddress\r\n    ) private  lockTheSwap{\r\n        // generate the uniswap pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(cfTokenAddress);\r\n        path[1] = usdtAddress;\r\n        IBEP20(address(cfTokenAddress)).approve(address(router), tokenAmount);\r\n        // make the swap\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address token0,\r\n        uint256 token0Amount,\r\n        address token1,\r\n        uint256 token1Amount,\r\n        address to\r\n    ) private lockTheSwap {\r\n        // approve token transfer to cover all possible scenarios\r\n        IBEP20(token0).approve(address(router), token0Amount);\r\n        IBEP20(token1).approve(address(router), token1Amount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidity(\r\n            token0,\r\n            token1,\r\n            token0Amount,\r\n            token1Amount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setToAddress(address _toAddress) external onlyOwner {\r\n        toAddress = _toAddress;\r\n    }\r\n\r\n}\r\n\r\ncontract CFToken is IBEP20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address =\u003e uint256) internal _tOwned;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) internal _allowances;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    uint256 internal _tTotal;\r\n\r\n    address public _owner;\r\n    address public foundationAddress = 0xa9056272Ca777a63ae3A275d7aab078fd90A1691;\r\n    address public feeAddress = 0xF8f21e8CE19099399C7A15Bd205e87C8B571bd6E;\r\n    uint public buyFeeRate = 7;\r\n    uint public lpRewardRate = 20;\r\n    uint public foundationRate = 30;\r\n    uint public buybackRate = 50;\r\n    uint256 public buybackAmount = 0;\r\n    uint256 public buybackMaxLimit = 7000000 * 10 ** 18;\r\n    address public uniswapV2PairUsdt;\r\n\r\n    uint256 public _supply = 13000000 ;\r\n\r\n    mapping(address =\u003e bool) public msgSenderWhiteList;\r\n    mapping(address =\u003e bool) public fromWhiteList;\r\n    mapping(address =\u003e bool) public toWhiteList;\r\n    mapping(address =\u003e bool) public noFeeWhiteList;\r\n    mapping(address =\u003e bool) public uniswapV2PairList;\r\n    bool public useWhiteListSwith = true;\r\n\r\n    address public  callback;\r\n    CFTokenCallbackSinglePool cfTokenCallbackSinglePool;\r\n    IUniswapV2Router02 public router;\r\n    address public usdtAddress;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"admin: wut?\");\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        address _usdtAddress,\r\n        address _router\r\n    ) public {\r\n        router = IUniswapV2Router02(_router);\r\n\r\n        usdtAddress = _usdtAddress;\r\n        _decimals = 18;\r\n        _tTotal = _supply * (10 ** uint256(_decimals));\r\n        _name = \"Creat future\";\r\n        _symbol = \"CF\";\r\n        _tOwned[msg.sender] = _tTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n        uniswapV2PairUsdt = IUniswapV2Factory(router.factory())\r\n        .createPair(address(this), usdtAddress);\r\n\r\n        uniswapV2PairList[uniswapV2PairUsdt] = true;\r\n\r\n        setUseWhiteListPrivate(msg.sender, true);\r\n        setUseWhiteListPrivate(_router, true);\r\n        setUseWhiteListPrivate(uniswapV2PairUsdt, true);\r\n\r\n        setUseWhiteListPrivate(foundationAddress, true);\r\n        setUseWhiteListPrivate(feeAddress, true);\r\n\r\n        _owner = msg.sender;\r\n        cfTokenCallbackSinglePool = new CFTokenCallbackSinglePool(address(router), address(this), usdtAddress,  feeAddress);\r\n        callback = address(cfTokenCallbackSinglePool);\r\n\r\n        setUseWhiteListPrivate(callback, true);\r\n    }\r\n\r\n    function transferOwner(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function setNoFeeWhiteList(address owner, bool isIn) external onlyOwner {\r\n        noFeeWhiteList[owner] = isIn;\r\n    }\r\n\r\n    function setUseWhiteList(address owner, bool isIn) external onlyOwner {\r\n        msgSenderWhiteList[owner] = isIn;\r\n        fromWhiteList[owner] = isIn;\r\n        toWhiteList[owner] = isIn;\r\n    }\r\n\r\n    function setUseWhiteListSwith(bool isIn) external onlyOwner {\r\n        useWhiteListSwith = isIn;\r\n    }\r\n\r\n    function setUseWhiteListPrivate(address owner, bool isIn) private {\r\n        msgSenderWhiteList[owner] = isIn;\r\n        fromWhiteList[owner] = isIn;\r\n        toWhiteList[owner] = isIn;\r\n    }\r\n\r\n    function setCFTokenCallback(address _CFTokenCallback) external onlyOwner {\r\n        callback = _CFTokenCallback;\r\n    }\r\n\r\n\r\n    function setUniswapPairList(address pairAddress, bool isPair) external onlyOwner {\r\n        uniswapV2PairList[pairAddress] = isPair;\r\n    }\r\n\r\n    function setBuyFeeRate(uint _buyFeeRate) external onlyOwner {\r\n        buyFeeRate = _buyFeeRate;\r\n    }\r\n\r\n    function setRouter(address _router) external onlyOwner {\r\n        router = IUniswapV2Router02(_router);\r\n    }\r\n\r\n    function setUsdtPair(address pair) external onlyOwner {\r\n        uniswapV2PairUsdt = pair;\r\n    }\r\n\r\n    function setUsdtAddress(address _usdtAddress) external onlyOwner {\r\n        usdtAddress = _usdtAddress;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) external onlyOwner {\r\n        feeAddress = _feeAddress;\r\n        cfTokenCallbackSinglePool.setToAddress(feeAddress);\r\n    }\r\n\r\n    function setFoundationAddress(address _foundationAddress) external onlyOwner {\r\n        foundationAddress = _foundationAddress;\r\n    }\r\n\r\n    function setLpRewardRate(uint _lpRewardRate) external onlyOwner {\r\n        lpRewardRate = _lpRewardRate;\r\n    }\r\n    function setFoundationRate(uint _foundationRate) external onlyOwner {\r\n        foundationRate = _foundationRate;\r\n    }\r\n    function setBuybackRate(uint _buybackRate) external onlyOwner {\r\n        buybackRate = _buybackRate;\r\n    }\r\n    function setBuybackAmount(uint256 _buybackAmount) external onlyOwner {\r\n        buybackAmount = _buybackAmount;\r\n    }\r\n    function setBuybackMaxLimit(uint256 _buybackMaxLimit) external onlyOwner {\r\n        buybackMaxLimit = _buybackMaxLimit;\r\n    }\r\n\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n\r\n    function getOwner() public view override returns (address){\r\n        return _owner;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        address msgSender = msg.sender;\r\n        _approve(sender, msgSender, _allowances[sender][msgSender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function calculateBuyFee(uint256 _amount) public view returns (uint256) {\r\n        return _amount.mul(uint256(buyFeeRate)).div(\r\n            10 ** 2\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        if(useWhiteListSwith){\r\n            require(msgSenderWhiteList[msg.sender] \u0026\u0026 fromWhiteList[from]  \u0026\u0026 toWhiteList[to], \"Transfer not allowed\");\r\n        }\r\n\r\n        uint256 fee = 0;\r\n\r\n        if (uniswapV2PairList[from] \u0026\u0026  !noFeeWhiteList[to]) {\r\n            fee = calculateBuyFee(amount);\r\n            if (fee \u003e 0 \u0026\u0026 buybackAmount  \u003c buybackMaxLimit) {\r\n                address  uniswapV2Pair = from;\r\n\r\n                uint256 lpRewardAmount = fee.mul(lpRewardRate).div(100);\r\n                uint256 foundationAmount = fee.mul(foundationRate).div(100);\r\n                uint256 buybackAmountTmp = fee.mul(buybackRate).div(100);\r\n\r\n                _tOwned[uniswapV2Pair] = _tOwned[uniswapV2Pair].add(lpRewardAmount);\r\n\r\n                emit Transfer(from, uniswapV2Pair, lpRewardAmount);\r\n                if(foundationAddress!=address(0)){\r\n                    _tOwned[foundationAddress] = _tOwned[foundationAddress].add(foundationAmount);\r\n\r\n                    emit Transfer(from, foundationAddress, foundationAmount);\r\n\r\n                }else{\r\n                    _tOwned[uniswapV2Pair] = _tOwned[uniswapV2Pair].add(foundationAmount);\r\n                    emit Transfer(from, uniswapV2Pair, foundationAmount);\r\n                }\r\n\r\n                if(address(callback)!=address(0)){\r\n                    _tOwned[address(callback)] = _tOwned[address(callback)].add(buybackAmountTmp);\r\n                    emit Transfer(from, address(callback), buybackAmountTmp);\r\n\r\n                }else{\r\n                    _tOwned[foundationAddress] = _tOwned[foundationAddress].add(buybackAmountTmp);\r\n                    emit Transfer(from, foundationAddress, buybackAmountTmp);\r\n                }\r\n\r\n\r\n                buybackAmount = buybackAmount.add(buybackAmountTmp);\r\n            }else {\r\n                fee = 0;\r\n            }\r\n        }\r\n        if (!uniswapV2PairList[from] \u0026\u0026 balanceOf(address(callback))\u003e 0 \u0026\u0026 address(callback)!=address(0)){\r\n                CFTokenCallbackSinglePool(address(callback)).swapAndLiquify();\r\n        }\r\n\r\n        uint acceptAmount = amount - fee;\r\n\r\n        _tOwned[from] = _tOwned[from].sub(amount);\r\n        _tOwned[to] = _tOwned[to].add(acceptAmount);\r\n        emit Transfer(from, to, acceptAmount);\r\n    }\r\n\r\n\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\nimport \u0027./Context.sol\u0027;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \u0027Ownable: caller is not the owner\u0027);\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \u0027Ownable: new owner is the zero address\u0027);\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.4.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \u0027SafeMath: addition overflow\u0027);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \u0027SafeMath: subtraction overflow\u0027);\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \u0027SafeMath: multiplication overflow\u0027);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \u0027SafeMath: modulo by zero\u0027);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x \u003c y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y \u003e 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x \u003c z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"}}