// File: @openzeppelin/contracts/utils/introspection/IERC165.sol


// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin/contracts/token/ERC721/IERC721.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;


/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/security/Pausable.sol


// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: contracts/CyLoans.sol

pragma solidity ^0.8.0;




contract CyLoans is Pausable, Ownable {

  address public cyBlocAddress;
  uint256 public CANCEL_COOLDOWN_TIME = 1 days; //24h in second

  struct Lending {
    address lender;
    uint256 tokenId;
    bool    isCanceled;
    uint256 cancelAt;
  }

  // Map from lender to their corresponding lending.
  mapping (uint256 => Lending) public lendings;

  event LendingAdded(
    uint256 indexed _tokenId,
    address _lender
  );

  event RequestCancelled(
    address _lender,
    uint256 indexed _tokenId,
    bool    _isCanceled,
    uint256 _cancelAt
  );

  event LendingCancelled(
    address _lender,
    uint256 indexed _tokenId
  );


  constructor(address _cyBlocAddress) {
    cyBlocAddress = _cyBlocAddress;
  }

  function setCyBloc(address _cyBlocAddress) external onlyOwner {
      cyBlocAddress = _cyBlocAddress;
  }

  function setCancelCooldown(uint256 _cancelCooldown) external onlyOwner {
    require(_cancelCooldown < 30 days,  "CyLoan: Too long");// 30 days
    CANCEL_COOLDOWN_TIME = _cancelCooldown;
  }

  function pause() public onlyOwner {
    _pause();
  }

  function unPause() public onlyOwner {
    _unpause();
  }

  function ListCyBlocForRent(
    uint256[] memory _tokenIds
  )
    external
    whenNotPaused
  {
    require(_tokenIds.length > 0, "CyLoan: Missing token");
    address _lender = msg.sender;
    for (uint256 i = 0; i < _tokenIds.length; i++) {
      require(_owns(_lender, _tokenIds[i]), "CyLoan: You are not owner");

      _escrow(_lender, _tokenIds[i]);

      Lending memory _lending = Lending(
        _lender,
        _tokenIds[i],
        false,
        0
      );
      _addLending(
        _tokenIds[i],
        _lending
      );
    }
  }

  function requestCancel(uint256[] memory _tokenIds) external {
    require(_tokenIds.length > 0, "CyLoan: Missing tokenId");
    for (uint256 i = 0; i < _tokenIds.length; i++) {
      Lending storage _lending = lendings[_tokenIds[i]];
      require(msg.sender == _lending.lender, "CyLoan: You are not owner");
      require(!_lending.isCanceled, "CyLoan: Canceled");

      _lending.isCanceled = true;
      _lending.cancelAt = block.timestamp + CANCEL_COOLDOWN_TIME;
      emit RequestCancelled(_lending.lender, _lending.tokenId, _lending.isCanceled, _lending.cancelAt);
    }
  }

  function cancelLending(uint256[] memory _tokenIds) external {
    require(_tokenIds.length > 0, "CyLoan: Missing tokenId");

    for (uint256 i = 0; i < _tokenIds.length; i++) {
      Lending storage _lending = lendings[_tokenIds[i]];
      require(msg.sender == _lending.lender, "CyLoan: You are not owner");
      require(_lending.isCanceled, "CyLoan: Have not request cancel");
      require(_lending.cancelAt <= block.timestamp || CANCEL_COOLDOWN_TIME == 0, "CyLoan: Cannot cancel at this time");

      _cancelWithoutBorrower(_lending.lender, _lending.tokenId);
    }
  }

  function cancelWhenPaused(
    uint256[] memory _tokenIds
  )
    external
    whenPaused
    onlyOwner
  {
    require(_tokenIds.length > 0, "CyLoan: Missing tokenId");

    for (uint256 i = 0; i < _tokenIds.length; i++) {
      Lending storage _lending = lendings[_tokenIds[i]];

      _cancelWithoutBorrower(_lending.lender, _lending.tokenId);
    }
  }


  function _cancelWithoutBorrower(address _lender, uint256 _tokenId) internal {
    _removeLending(_tokenId);
    _transfer(_lender, _tokenId);
    emit LendingCancelled(_lender, _tokenId);
  }

  function _getNftContract(address _nftAddress) internal pure returns (IERC721) {
    IERC721 candidateContract = IERC721(_nftAddress);
    // require(candidateContract.implementsERC721());
    return candidateContract;
  }


  function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {
    IERC721 _nftContract = _getNftContract(cyBlocAddress);
    return (_nftContract.ownerOf(_tokenId) == _claimant);
  }

  function _removeLending(uint256 _tokenId) internal {
    delete lendings[_tokenId];
  }

  function _addLending(
    uint256 _tokenId,
    Lending memory _lending
  )
    internal
  {

    lendings[_tokenId] = _lending;

    emit LendingAdded(
      _tokenId,
      _lending.lender
    );
  }

  /// @dev Escrows the NFT, assigning ownership to this contract.
  /// Throws if the escrow fails.
  /// @param _owner - Current owner address of token to escrow.
  /// @param _tokenId - ID of token whose approval to verify.
  function _escrow(address _owner, uint256 _tokenId) internal {
    IERC721 _nftContract = _getNftContract(cyBlocAddress);

    // It will throw if transfer fails
    _nftContract.transferFrom(_owner, address(this), _tokenId);
  }

  /// @dev Transfers an NFT owned by this contract to another address.
  /// Returns true if the transfer succeeds.
  /// @param _receiver - Address to transfer NFT to.
  /// @param _tokenId - ID of token to transfer.
  function _transfer(address _receiver, uint256 _tokenId) internal {
    IERC721 _nftContract = _getNftContract(cyBlocAddress);

    // It will throw if transfer fails
    _nftContract.safeTransferFrom(address(this), _receiver, _tokenId);
  }

}