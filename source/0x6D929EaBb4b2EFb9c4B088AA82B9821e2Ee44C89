// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

contract Neuralnic {
    string public name = "Neuralnic";
    string public symbol = "NNC";
    uint256 public totalSupply = 15000000000 * 10**18; // 15 mil millones de tokens
    uint8 public decimals = 18;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    uint256 public feePercentage = 1; // 1% de comisión en las transacciones

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event BurningStopped();

    address public constant DEVELOPERS_ADDRESS = 0xce4D68C116977FF5D57185862f160F090F415562;

    uint256 public constant DEVELOPERS_FEE_PERCENTAGE = 1; // 1% para los desarrolladores
    uint256 public constant TOTAL_FEE_PERCENTAGE = DEVELOPERS_FEE_PERCENTAGE;

    bool public burningEnabled = true;

    // Agregar la variable para almacenar la dirección del contrato del NFT
    address public nftContractAddress = 0x2953399124F0cBB46d2CbACD8A89cF0599974963;

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    // Resto del contrato...

    // Agregar una función para obtener el logo del NFT
    function getLogo() public view returns (string memory) {
        return Neuralnic(0x2953399124F0cBB46d2CbACD8A89cF0599974963).getLogo();
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Saldo insuficiente");

        uint256 burnFee = 0;
        uint256 devFee = 0;
        uint256 remainingValue = _value;

        if (burningEnabled) {
            burnFee = (_value * feePercentage) / 100;
            devFee = (burnFee * DEVELOPERS_FEE_PERCENTAGE) / TOTAL_FEE_PERCENTAGE;
            remainingValue = _value - burnFee;
        }

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += remainingValue;
        balanceOf[DEVELOPERS_ADDRESS] += devFee;
        emit Transfer(msg.sender, _to, remainingValue);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(_spender != address(0), "Invalid spender address");
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value, "Saldo insuficiente");
        require(allowance[_from][msg.sender] >= _value, "Permisos insuficientes");
        allowance[_from][msg.sender] -= _value;

        uint256 burnFee = 0;
        uint256 devFee = 0;
        uint256 remainingValue = _value;

        if (burningEnabled) {
            burnFee = (_value * feePercentage) / 100;
            devFee = (burnFee * DEVELOPERS_FEE_PERCENTAGE) / TOTAL_FEE_PERCENTAGE;
            remainingValue = _value - burnFee;
    }

        balanceOf[_from] -= _value;
        balanceOf[_to] += remainingValue;
        balanceOf[DEVELOPERS_ADDRESS] += devFee;
        emit Transfer(_from, _to, remainingValue);
        return true;

    }

       function stopBurning() public {
       require(msg.sender == DEVELOPERS_ADDRESS, "Solo los desarrolladores pueden detener la quema de tokens");
       burningEnabled = false;
       emit BurningStopped();
    }
    }