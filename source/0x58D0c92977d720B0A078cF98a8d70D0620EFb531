
// File: /contracts/dex.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

interface IBEP20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
  external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
  external returns (bool);
  
  function transferFrom(address from, address to, uint256 value)
  external returns (bool);
  function burn(uint256 value)
  external returns (bool);
  event Transfer(address indexed from,address indexed to,uint256 value);
  event Approval(address indexed owner,address indexed spender,uint256 value);
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract CCCDEX  {
     using SafeMath for uint256;
     
    uint256 public tokenPrice=1e17;
  	
	bool   public  buyOnUSDC;    
	bool   public  sellOnUSDC;
    
    uint256 public usdcTobusdFee;
    uint256 public busdTousdcFee;
    address public owner;
    address public communityFund;
     
    IBEP20 private usdcToken;
    IBEP20 private busdToken; 

    uint256 public minBusdBuy;
    uint256 public maxBusdBuy;
    uint256 public minUSDCSell;
    uint256 public maxUSDCSell;

    event TokenDistribution(address sender, address receiver, IBEP20 tokenFirst, IBEP20 tokenSecond, uint256 tokenIn, uint256 tokenOut);

    constructor(address ownerAddress, address _communityFund, IBEP20 _busdToken, IBEP20 _usdcToken) 
    {
        owner = ownerAddress;
        communityFund = _communityFund;
        usdcToken  = _usdcToken;
        busdToken = _busdToken;
        buyOnUSDC = true;
        sellOnUSDC = true;     
    }

    modifier notContract() {
        require(!isContract(msg.sender), "Contract not allowed");
        require(msg.sender == tx.origin, "Proxy contract not allowed");
        _;
    }  
    
    function swapBUSDtoUSDC(uint256 busdQty) public payable notContract
	{
	   require(buyOnUSDC, "Buy Stopped.");
       require(busdQty>=minBusdBuy && busdQty<=maxBusdBuy, "Invalid Quantity");
       busdToken.transferFrom(msg.sender ,address(this), (busdQty));
	   uint256 totalUSDC=(busdQty*1e18)/tokenPrice;  
       usdcToken.transfer(msg.sender , totalUSDC);
	   emit TokenDistribution(address(this), msg.sender, busdToken, usdcToken, busdQty, totalUSDC);					
	 }

    function swapUSDCtoBUSD(uint256 tokenQty) public payable notContract
	{
	   require(sellOnUSDC,"Sell Stopped.");
       require(tokenQty>=minUSDCSell && tokenQty<=maxUSDCSell, "Invalid Quantity");
	   usdcToken.transferFrom(msg.sender,address(this),tokenQty);         
       uint256 busd_amt=(tokenQty/1e18)*tokenPrice;	 
       uint256 ded=(busd_amt*usdcTobusdFee)/100;
       if(ded>0)
       busdToken.transfer(communityFund, ded);    
	   busdToken.transfer(msg.sender,(busd_amt-ded));
       emit TokenDistribution(msg.sender, address(this), usdcToken, busdToken, tokenQty, busd_amt);					
	 }


     function getBUSDtoUSDC(uint256 busdQty) public view returns(uint256)
     {
	    return (busdQty*1e18)/tokenPrice;  
     }

    function getUSDCtoBUSD(uint256 tokenQty) public view returns(uint256,uint256)
	{
       uint256 ded=(tokenQty*usdcTobusdFee)/100;
       return ((tokenQty*tokenPrice)/1e18,((tokenQty-ded)*tokenPrice)/1e18);
    }

    function isContract(address _address) public view returns (bool _isContract)
    {
      uint32 size;
      assembly {
      size := extcodesize(_address)
      }
      return (size > 0);
    }   
   
    
    function updatePrice(uint256 _price) public payable
    {
        require(msg.sender==owner,"Only Owner"); 
        tokenPrice=_price;
    }
  
    function updateMinMax(uint256 _minBusdBuy, uint256 _maxBusdBuy, uint256 _minUSDCSell, uint256 _maxUSDCSell) public payable
    {
        require(msg.sender==owner,"Only Owner"); 
        minBusdBuy = _minBusdBuy;
        maxBusdBuy = _maxBusdBuy;
        minUSDCSell = _minUSDCSell;
        maxUSDCSell = _maxUSDCSell;
    }

    function updateFee(uint256 _usdcTobusdFee) public {
        require(msg.sender==owner,"Only Owner"); 
        usdcTobusdFee = _usdcTobusdFee;
    }
    
    function switchBuyUSDC(bool e) public payable
    {
        require(msg.sender==owner,"Only Owner");
        buyOnUSDC=e;
    }

    function switchSellUSDC(bool e) public payable
    {
        require(msg.sender==owner,"Only Owner");
        sellOnUSDC=e;
    }

    function bytesToAddress(bytes memory bys) private pure returns (address addr) {
        assembly {
            addr := mload(add(bys, 20))
        }
    }
}
