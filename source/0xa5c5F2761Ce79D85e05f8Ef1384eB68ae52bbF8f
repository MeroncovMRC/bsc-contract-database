/**
 *Submitted for verification at BscScan.com on 2022-01-04
*/

/***
*     ██████╗ ██████╗  ██████╗ ██████╗ ███████╗      ██████╗  ██████╗██╗  ██╗
*    ██╔════╝██╔═══██╗██╔════╝██╔═══██╗██╔════╝      ██╔══██╗██╔════╝╚██╗██╔╝
*    ██║     ██║   ██║██║     ██║   ██║███████╗█████╗██████╔╝██║      ╚███╔╝ 
*    ██║     ██║   ██║██║     ██║   ██║╚════██║╚════╝██╔══██╗██║      ██╔██╗ 
*    ╚██████╗╚██████╔╝╚██████╗╚██████╔╝███████║      ██████╔╝╚██████╗██╔╝ ██╗
*     ╚═════╝ ╚═════╝  ╚═════╝ ╚═════╝ ╚══════╝      ╚═════╝  ╚═════╝╚═╝  ╚═╝
*        
 * https://cocosbcx.io/
                                  
* MIT License
* ===========
*
* Copyright (c) 2021 dego
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*/// File: @openzeppelin/contracts/math/SafeMath.sol

// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol



pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: @openzeppelin/contracts/utils/Address.sol



pragma solidity >=0.6.2 <0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol



pragma solidity >=0.6.0 <0.8.0;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol



pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: contracts/library/Governance.sol

pragma solidity ^0.6.6;

contract Governance {

    address public _governance;

    constructor() public {
        _governance = tx.origin;
    }

    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyGovernance {
        require(msg.sender == _governance, "not governance");
        _;
    }

    function setGovernance(address governance)  public  onlyGovernance
    {
        require(governance != address(0), "new governance the zero address");
        emit GovernanceTransferred(_governance, governance);
        _governance = governance;
    }


}

// File: contracts/interface/ICocosVipBook.sol

pragma solidity ^0.6.0;

interface ICocosVipBook {
    
    function getVIPInfoxAddress(address from) external view
        returns (
            bytes32 name, uint256 laffID, uint256 laff_laffID,
            uint256 referReward, uint256 claimReward,
            uint256 lv1Count, uint256 lv2Count);
    
    function getVIPInfoxID(uint256 vipID) external view
        returns (
            address addr, bytes32 name, uint256 laffID, uint256 laff_laffID,
            uint256 referReward, uint256 claimReward,
            uint256 lv1Count, uint256 lv2Count);
                
    function hasRegistered(address from) external view returns (bool registered);
}

// File: contracts/library/TransferHelper.sol

pragma solidity ^0.6.0;

// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false
library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    // function safeSetApprovalForAll(address token, address operator, bool _approved) internal {
    //     // bytes4(keccak256(bytes('approve(address,uint256)')));
    //     (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
    //     require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    // }


    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}

// File: contracts/interface/ILaunchpadController.sol

pragma solidity ^0.6.0;

interface ILaunchpadController {
    function getMaxVipLevel() external view returns (uint);  // begin 0
    function getVipLevel(uint power)external view returns (uint);  
    function getShareAlloc(uint256 vipLevel) external view returns (uint);
    function getTotalShareAlloc() external view returns (uint);
    function getTeamWallet() external view returns (address);


    function updateUserPower(address user, uint val, bool isIncreased) external ;
}

// File: contracts/interface/ILaunchpadPool.sol

pragma solidity ^0.6.0;

interface ILaunchpadPool {
    function updateUserPower(address user, uint val, bool isIncreased) external ;
}

// File: contracts/LaunchpadPool.sol

pragma solidity ^0.6.0;









contract LaunchpadPool is ILaunchpadPool, Governance, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 constant public INT_BASE = 100000;

    bool private initialized_; // Flag of initialize data

    // // user->viplevel + 1
    mapping (address => uint256 ) public _userVipLevels;  

    
    uint256[] public _vipCounts;   // vip0 begin

    uint256[] public _vipShares; // vip0 begin
    bool public _hasRebase; 

    uint256 public _totalRaisedUser = 0;
    uint256 public _totalDrawUser = 0;
    mapping(address => uint) public _drawUserStatus;  // 0: init, 1: not, 2: ok

    
    address public _targetToken ;   // token of project
    address public _costToken;  // cost token, if bnb, must wbnb

    uint256 public _oneSharePrice = 0;       // price of one share

    uint256 public _oneShareAmount = 0;

    uint256 public _raisedStartTime = 0;

    uint256 public _raisedEndTime = 0;

    uint256 public _drawTime = 0;

    uint256 public  _totalShares = 0; 

    address public _controller;

    address public _vipBook;

    address public _powerProxy;

    uint256 public _drawFund = 0; 

    uint256 public _totalDrawFund = 0; 

    uint256 public _totalRaisedFund;

    address public _projectTeamAddress; 

    uint256 public _maxVipLevel;

    uint256 public _lv1Fee = 800;
    uint256 public _lv2Fee = 200;
    uint256 public _withdrawFee = 2000;      // int base

    uint256 public _firstReleaseTime;
    uint256 public _firstRate; 
    uint256 public _linearReleaseTime;
    uint256 public _timeStep;
    uint256 public _remainStepRate; 

    mapping (address => uint ) public  _unlockTimeRecords; 
    mapping (address => uint ) public  _unlockBalanceRecords; 

    event Withdraw(address indexed targetToken , address costToken, uint withdrawAmount, uint fee, 
        address projectAddress, address teamAddress);
    event ChangeFee(uint indexed preWithdrawFee,  uint newWithdrawFee, uint feeType);
    event Draw(address indexed user,  bool isIn);
    event Raise(address indexed user,  uint amount);
    event Release(address indexed user,  uint amount, address parent, uint lv1Amount, address grand, uint lv2Amount);
    event eveRebase(address indexed user);

    // --- Init ---
    function initialize(address governance, address controller, address vipBook, address powerProxy, address targetToken, address costToken,  
        uint256 oneSharePrice, uint256 oneShareAmount, uint256 raisedStartTime, uint256 raisedEndTime, uint256 drawTime, uint256 totalShares) public {
        require(!initialized_, "initialize: Already initialized!");
        require( raisedStartTime < raisedEndTime && raisedEndTime < drawTime, "error time args");


        _governance = governance;

        _controller = controller;

        _vipBook = vipBook;

        _powerProxy = powerProxy;

        _targetToken = targetToken;
        _costToken = costToken;

        _oneSharePrice = oneSharePrice;
        _oneShareAmount = oneShareAmount;
        _raisedStartTime = raisedStartTime;
        _raisedEndTime = raisedEndTime;
        _drawTime = drawTime;

        _totalShares = totalShares;

        _projectTeamAddress = address(0x0);

        _hasRebase = false;

        _maxVipLevel = ILaunchpadController(_controller).getMaxVipLevel();

        uint totalShareAlloc = ILaunchpadController(_controller).getTotalShareAlloc();
        uint hasAllocShares = 0;
        for(uint i = 0; i < _maxVipLevel-1; i++ ){
            _vipCounts.push(0); 
            uint shareValRate = ILaunchpadController(_controller).getShareAlloc(i);
            uint share = _totalShares.mul(shareValRate).div(totalShareAlloc);
            hasAllocShares = hasAllocShares.add(share);
            _vipShares.push(share);
        }

        _vipCounts.push(0); 
        _vipShares.push(_totalShares.sub(hasAllocShares));

        initialized_ = true;
    }

    function raise() external nonReentrant{
        require( _raisedStartTime <= block.timestamp && block.timestamp <= _raisedEndTime, "not start or has end");

        bool hasRegistry = ICocosVipBook(_vipBook).hasRegistered(msg.sender);
        require(hasRegistry, "Only VIPs can participate");

        bool raised = hasRaised(msg.sender);
        require(!raised, "has raised");

        TransferHelper.safeTransferFrom(_costToken, msg.sender, address(this), _oneSharePrice);

        emit Raise(msg.sender, _oneSharePrice);

        _totalRaisedFund =  _totalRaisedFund.add(_oneSharePrice);

        uint power = IERC20(_powerProxy).balanceOf(msg.sender);
        doUpdateUserPower(msg.sender, power);

        _totalRaisedUser = _totalRaisedUser.add(1);
    }


    function draw() external nonReentrant{
        require( block.timestamp >= _drawTime, "error time");
        require(_hasRebase, "must after rebase");

        bool hasRegistry = ICocosVipBook(_vipBook).hasRegistered(msg.sender);
        require(hasRegistry, "Only VIPs can participate");

        bool raised = hasRaised(msg.sender);
        require(raised, "must raised");

        require(_drawUserStatus[msg.sender] == 0, "has draw");

        uint vipLevel = _userVipLevels[msg.sender] - 1;

        uint shareCount = _vipShares[vipLevel];
        if(shareCount == 0){
            doRefund(msg.sender);
            return ;
        }
    
        uint userCount = _vipCounts[vipLevel];
        if( userCount == 0){
            return ;
        }

        if(shareCount >= userCount){
            doDraw(msg.sender);
        }else{
            uint val = shareCount.mul(INT_BASE).div(userCount);
            uint seed = computerSeed(msg.sender)%INT_BASE;
            if(seed <= val){
                doDraw(msg.sender);
            }else{
                doRefund(msg.sender);
            }
        }
        _vipCounts[vipLevel] =  _vipCounts[vipLevel].sub(1);

        _totalDrawUser = _totalDrawUser.add(1);
        
    }

    // desgin for web developer
    function canClaim(address user) public view returns (bool) {
        if( block.timestamp < _firstReleaseTime){
            return false;
        }
        
        if(_drawUserStatus[user] != 2){
            return false;
        }

        if(_unlockBalanceRecords[user] == 0){
            return false;
        }

        uint lastTime = _unlockTimeRecords[user];
        if(lastTime > 0 && block.timestamp < _linearReleaseTime){
            return false;
        }

        if(lastTime == _firstReleaseTime){
            lastTime = _linearReleaseTime;
        }

        uint step = (block.timestamp.sub(lastTime)).div(_timeStep);
        if(step == 0){
            return false;
        }

        return true;
    }

    function claim() external nonReentrant{
        require(_unlockBalanceRecords[msg.sender] > 0, "empty");
        require(_firstReleaseTime != 0, "can't release");
        require(block.timestamp >= _firstReleaseTime, "error time");
 
        uint lastTime = _unlockTimeRecords[msg.sender];
        if(lastTime == 0){
            // fist time
            uint balance = _oneShareAmount.mul(_firstRate).div(INT_BASE);

            distributeToken(msg.sender, balance);
            _unlockTimeRecords[msg.sender] = _firstReleaseTime;
        }else{            
            require(block.timestamp >= _linearReleaseTime, "error second time"); 

            if(lastTime == _firstReleaseTime){
                lastTime = _linearReleaseTime;
                _unlockTimeRecords[msg.sender] = lastTime;
            }
            uint step = (block.timestamp.sub(lastTime)).div(_timeStep);
            require(step > 0, "wait");
            uint releaseBalance = 0;
            if( step > 0){
                releaseBalance = _oneShareAmount.mul(_remainStepRate).mul(step).div(INT_BASE);
                if( releaseBalance > _unlockBalanceRecords[msg.sender] ){
                    releaseBalance = _unlockBalanceRecords[msg.sender];
                }

                distributeToken(msg.sender, releaseBalance);
                _unlockTimeRecords[msg.sender] = lastTime.add(step.mul(_timeStep));
            }
        }
    }

    function doDraw(address user) private {
        // give token
        _drawFund = _drawFund.add(_oneSharePrice);
        _totalDrawFund = _totalDrawFund.add(_oneSharePrice);

        _unlockBalanceRecords[user] = _oneShareAmount;  

        uint vipLevel = _userVipLevels[user] - 1;
        _vipShares[vipLevel] =  _vipShares[vipLevel].sub(1);
        _drawUserStatus[msg.sender] = 2;
        emit Draw(user, true);      
    }


    function distributeToken(address user, uint balance) private{

        uint lv1Reward = balance.mul(_lv1Fee).div(INT_BASE);
        uint lv2Reward = balance.mul(_lv2Fee).div(INT_BASE);

        uint256 laffID = 0;
        uint256 laff_laffID = 0;

        (,laffID,laff_laffID,,,,) = ICocosVipBook(_vipBook).getVIPInfoxAddress(user);

        // send to parent
        address laffAddress;
        (laffAddress,,,,,,,) =  ICocosVipBook(_vipBook).getVIPInfoxID(laffID);
        TransferHelper.safeTransfer(_targetToken, laffAddress, lv1Reward);

        // send to grand
        address laff_laffAddress;
        (laff_laffAddress,,,,,,,) =  ICocosVipBook(_vipBook).getVIPInfoxID(laff_laffID);
        TransferHelper.safeTransfer(_targetToken, laff_laffAddress, lv2Reward);


        uint realRaised = balance.sub(lv1Reward).sub(lv2Reward);
        // send to msg.sender
        TransferHelper.safeTransfer(_targetToken,  user, realRaised);

        _unlockBalanceRecords[user] = _unlockBalanceRecords[user].sub(balance);

        emit Release(user,  realRaised, laffAddress, lv1Reward, laff_laffAddress, lv2Reward);
    }


    function doRefund(address user) private{

        TransferHelper.safeTransfer(_costToken, user, _oneSharePrice);
        _drawUserStatus[msg.sender] = 1;
        emit Draw(user, false);  
    }

    function rebaseShare() external{
        require( _raisedEndTime < block.timestamp , "not start");
        require(!_hasRebase, "has rebase");

        for(uint i = _maxVipLevel - 1; i > 0; i-- ){
            uint currentShare = _vipShares[i];
            uint vipUserCount = _vipCounts[i];
            if(currentShare > vipUserCount){
                _vipShares[i] = vipUserCount;
                _vipShares[i-1] += (currentShare - vipUserCount);
            }

        }
        _hasRebase = true;
        emit eveRebase(msg.sender);
    }

    /*
     * widthdraw raise fund 
     */
    function withdraw()  public  onlyGovernance {

        require( block.timestamp > _raisedEndTime && _drawFund > 0, "error time");
        require( _projectTeamAddress != address(0x0), "recived address cant be null");
 
        address teamWallet = ILaunchpadController(_controller).getTeamWallet();
        
        uint withdrawFund = (INT_BASE.sub(_withdrawFee)).mul(_drawFund).div(INT_BASE);
   
        TransferHelper.safeTransfer(_costToken, _projectTeamAddress, withdrawFund);
        TransferHelper.safeTransfer(_costToken, teamWallet, _drawFund.sub(withdrawFund));
        
        emit Withdraw(_targetToken, _costToken, withdrawFund, _drawFund.sub(withdrawFund), _projectTeamAddress, teamWallet);

        _drawFund = 0;
    }


    // just for emergency, onlyGovernance
    function emergencyWithdraw(address token, address targetAddress, uint256 value) external onlyGovernance(){
        uint256 balance = IERC20(token).balanceOf(address(this));
        require(balance >= value, "too much value");
        TransferHelper.safeTransfer(token, targetAddress, value);
    } 

    function setProjectTeamAddress(address addr) external onlyGovernance{
        _projectTeamAddress = addr;
    }
    

    function setCostToken(address costToken) external onlyGovernance(){
        _costToken = costToken;
    }

    function setOneSharePrice(uint256 oneSharePrice) external onlyGovernance(){
        _oneSharePrice = oneSharePrice;
    }

    function setRaisedStartTime(uint256 raisedStartTime) external onlyGovernance(){
        _raisedStartTime = raisedStartTime;
    }

    function setRaisedEndTime(uint256 raisedEndTime) external onlyGovernance(){
        _raisedEndTime = raisedEndTime;
    }

    function setDrawTime(uint256 drawTime) external onlyGovernance(){
        _drawTime = drawTime;
    }

    function setTotalShares(uint256 totalShares) external onlyGovernance(){
        _totalShares = totalShares;
    }

    function doUpdateUserPower(address user, uint power) private {
        uint vip = ILaunchpadController(_controller).getVipLevel(power);

        uint oldVipLevel = _userVipLevels[user];
        if( oldVipLevel > 0){
            _vipCounts[oldVipLevel-1] -= 1;
        }

        _userVipLevels[user] = vip + 1;
        _vipCounts[vip] += 1;
    }

    function hasRaised(address user) public view returns (bool) {
        uint vipLevel = _userVipLevels[user];
        return (vipLevel > 0);
    }

    modifier onlyController {
        require( (msg.sender == _controller), "not controller");
        _;
    }

    function updateUserPower(address user, uint val, bool isIncreased) external override 
        onlyController {

        // no registry
        bool hasRegistry = ICocosVipBook(_vipBook).hasRegistered(user);
        if( !hasRegistry){
            return ;
        }

        // no raise
        bool raised = hasRaised(user);
        if(!raised){
            return ;
        }

        if(block.timestamp > _raisedEndTime){
            return ;
        }

        
        uint oldPower = IERC20(_powerProxy).balanceOf(user);
        if(isIncreased){
            doUpdateUserPower(user, oldPower.add(val));
        }else{
            doUpdateUserPower(user, oldPower.sub(val));
        }
    }

    function getRaisedCount() external view returns (uint){
        return _totalRaisedFund.div(_oneSharePrice);
    }


    function setController(address controller) external 
        onlyGovernance 
    {
        require(controller != address(0), "the zero address");
        _controller = controller;
    }



    function setVipBook(address vipBook) external 
        onlyGovernance 
    {
        require(vipBook != address(0), "the zero address");
        _vipBook = vipBook;
    }


    function setPowerProxy(address powerProxy) external 
        onlyGovernance 
    {
        require(powerProxy != address(0), "the zero address");
        _powerProxy = powerProxy;
    }


   function setLV1Fee(uint256 fee) external 
        onlyGovernance 
    {
        
        require(fee != _lv1Fee && fee < INT_BASE,"invalid args");
        emit ChangeFee(_lv1Fee, fee, 1);
        _lv1Fee = fee;
    }


   function setLV2Fee(uint256 fee) external 
        onlyGovernance 
    {
        
        require(fee != _lv2Fee && fee < INT_BASE,"invalid args");
        emit ChangeFee(_lv2Fee, fee, 2);
        _lv2Fee = fee;
    }


   function setWithdrawFee(uint256 withdrawFee) external 
        onlyGovernance 
    {   
        require(withdrawFee != _withdrawFee && withdrawFee < INT_BASE,"invalid args");
        emit ChangeFee(_withdrawFee, withdrawFee, 0);
        _withdrawFee = withdrawFee;
    }

    function setTargetToken(address targetToken) external 
        onlyGovernance 
    {   
        require( targetToken != address(0x0), "targetToken cant be null");
        require( block.timestamp < _firstReleaseTime, "cant update");
        
        _targetToken = targetToken;
    }


    function setUnlockArgs(uint256 firstReleaseTime, uint256 firstRate, 
        uint256 linearReleaseTime, uint256 timeStep, uint256 remainStepRate) external 
        onlyGovernance
    {
        _firstReleaseTime = firstReleaseTime;
        _firstRate = firstRate; 
        _linearReleaseTime = linearReleaseTime;
        _timeStep = timeStep;
        _remainStepRate = remainStepRate;
    }

    function computerSeed( address user ) internal view returns (uint256) {
        // from fomo3D
        uint256 seed = uint256(keccak256(abi.encodePacked(
            //(user.balance).add
            (block.timestamp).add
            (block.difficulty).add
            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add
            (block.gaslimit).add
            ((uint256(keccak256(abi.encodePacked(user)))) / (now)).add
            (block.number)
            
        )));
        return seed;
    }
}

// File: contracts/LaunchpadController.sol

pragma solidity ^0.6.0;







contract CocosLaunchpadController is ILaunchpadController, Governance, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    bool private initialized_; // Flag of initialize data

    uint256 public _maxVipLevel; 

    uint256[] public _defaultShareAllocRulers;  // base  100000

    uint256[] public _vipOfPowerCounts; 

    address[] public _pools;

    address public _currentPool; 

    
    address public _teamWallet;

    address public _vipBook;

    address public _powerProxy;


    address public _updatePowerCaller;
    
    event eveCreatePool(
        address indexed pool, address indexed targetToken, address indexed costToken,
        uint256 oneSharePrice, uint256 oneShareAmount,
        uint256 raisedStartTime, uint256 raisedEndTime, 
        uint256 drawTime, uint256 totalShares);


    event eveUpdateCurrentPool(address indexed pool);

    function initialize(address vipBook, address powerProxy, address teamWallet) public {
        require(!initialized_, "initialize: Already initialized!");
        _governance = msg.sender;

        _maxVipLevel = 4;
        _teamWallet = teamWallet;
        _vipBook = vipBook;
 
        _powerProxy = powerProxy;

        _defaultShareAllocRulers.push(5000);
        _defaultShareAllocRulers.push(15000);
        _defaultShareAllocRulers.push(30000);
        _defaultShareAllocRulers.push(50000);

        _vipOfPowerCounts.push(0);
        _vipOfPowerCounts.push(500 ether);
        _vipOfPowerCounts.push(3000 ether);
        _vipOfPowerCounts.push(10000 ether);

        initialized_ = true;
    }
    
    function setShareAlloc(uint256 vipLevel, uint val) external onlyGovernance {
        require( vipLevel < _maxVipLevel, "error vipLevel");
        _defaultShareAllocRulers[vipLevel] = val;
    }

    function setVipOfPower(uint256 vipLevel, uint pow) external onlyGovernance {
        require( vipLevel < _maxVipLevel, "error vipLevel");
        _vipOfPowerCounts[vipLevel] = pow;
    }

    function increaseVipLevel(uint256 power) external onlyGovernance {
        // must change: _defaultShareAllocRulers after executing this
        _defaultShareAllocRulers.push(0);
        _vipOfPowerCounts.push(power);
        _maxVipLevel++ ;
    }


    function createPool(
        address targetToken, address costToken, uint256 oneSharePrice, 
        uint256 oneShareAmount, uint256 raisedStartTime, uint256 raisedEndTime, 
        uint256 drawTime, uint256 totalShares) 
        external returns(address) {
        LaunchpadPool pool = new LaunchpadPool();
        address poolAddress = address(pool);
        //emit event
        _pools.push(poolAddress);
        address targetToken_ = targetToken;
        address costToken_ = costToken;
        uint256 oneSharePrice_ = oneSharePrice;
        uint256 oneShareAmount_ = oneShareAmount;
        uint256 raisedStartTime_ = raisedStartTime;
        uint256 raisedEndTime_ = raisedEndTime;
        uint256 drawTime_ = drawTime;
        uint256 totalShares_ = totalShares;

        pool.initialize(
            _governance , address(this), _vipBook, 
            _powerProxy, targetToken_, costToken_, 
            oneSharePrice_, oneShareAmount_, raisedStartTime_, 
            raisedEndTime_, drawTime_, totalShares_);

        _currentPool = poolAddress;

        emit eveCreatePool(
            _currentPool, targetToken_, costToken_,
            oneSharePrice_, oneShareAmount_, raisedStartTime_, 
            raisedEndTime_, drawTime_, totalShares_);

        return _currentPool;

    }   

    function updateCurrentPool(address pool) external onlyGovernance {
        _currentPool = pool;
        emit eveUpdateCurrentPool(_currentPool);
    }

    function getMaxVipLevel() external view override returns (uint256){
        return _maxVipLevel;
    }

    function getShareAlloc(uint256 vipLevel) external view override returns (uint){
        require( vipLevel < _maxVipLevel, "error vipLevel");
        return _defaultShareAllocRulers[vipLevel];
    }


    function getTotalShareAlloc() external view override returns (uint){
        uint totalShares = 0;

        for(uint i = 0; i < _maxVipLevel; i++ ){
            totalShares += _defaultShareAllocRulers[i];
        }
        return totalShares;
    }

    function getVipLevel(uint power)external view override returns (uint){
        for(uint i = _maxVipLevel - 1; i >= 0; i--){
            if( power >= _vipOfPowerCounts[i] ){
                return i;
            }
        }

        return 0;
    }


    function getTeamWallet() external view override  returns (address){
        return _teamWallet;
    }

    
    function changeTeamWallet(address newAddress) external 
        onlyGovernance 
    {
        require(newAddress != address(0), "the zero address");
        _teamWallet = newAddress;
    }


    function setVipBook(address vipBook) external 
        onlyGovernance 
    {
        require(vipBook != address(0), "the zero address");
        _vipBook = vipBook;
    }


    function setPowerProxy(address powerProxy) external 
        onlyGovernance 
    {
        require(powerProxy != address(0), "the zero address");
        _powerProxy = powerProxy;
    }

    function setUpdatePowerCaller(address addr) external 
        onlyGovernance 
    {
        require(addr != address(0x0), "the zero address");
        _updatePowerCaller = addr;
    }


    modifier onlyUpdatePowerCaller {
        require( (_updatePowerCaller!= address(0x0)) && (msg.sender == _updatePowerCaller), "not update power caller");
        _;
    }


    function updateUserPower(address user, uint val, bool isIncreased) external  override onlyUpdatePowerCaller {
        if(_currentPool != address(0x0)){
            ILaunchpadPool(_currentPool).updateUserPower(user, val, isIncreased);
        }
    }

}