// SPDX-License-Identifier: MIT

pragma solidity 0.8.2;

contract Secret_Storage{

    uint256 public cnt=0;
    address private owner;
    // White list of addresses. Internal
    mapping(address=>bool) public UserInWhiteList;

    // Map of User with its Pass Hash. Internal
    mapping(address=>string) private UserToHash;

    // Map of User address and its Decoder keyword. Internal
    mapping(address=>bytes16) private UserToDecoder;

    constructor(){
        owner = msg.sender;
    }
// FUNCTIONS:///////////////////////////////////////////////////////////////////
    // Toggle User in WhiteList or not
    function _ToggleWhiteList(address usr) external{
        require(msg.sender==owner);
        if(UserInWhiteList[usr]) {
                UserInWhiteList[usr] = false;
            }
        else if(!UserInWhiteList[usr]) {
                UserInWhiteList[usr] = true;
            }
    }

    function _AddUser(address usr, string memory passHash) external returns(bool){
        // Check if address already exists in a UserArray
        if((bytes(UserToHash[usr]).length>0)) {
            return false;
            }
        // Check if in WhiteList as true user
        else if(!(UserInWhiteList[usr])) {
            return false;
            }
        else{
            UserToHash[usr] = passHash;
            bytes16 decode = random();
            UserToDecoder[usr] = decode;
            cnt++;
            return true;
        }
    }
    
    // TODD That is not secure to see the decoder from Smart Contract in BScScan
    function _GetDecodeKey(address usr) internal view returns (bytes16){
        require(bytes16(UserToDecoder[usr]).length>0);
        return UserToDecoder[usr];
    }

    function _Validate(address usr, string memory hash) external view returns(bool, bytes16){
        // Check if in Whitelist
        if(!(UserInWhiteList[usr])){
            bytes16 rund = random();
            bool res = false;
            return (res, rund);
            }
        else{
            bool res = keccak256(bytes(UserToHash[usr])) == keccak256(bytes(hash));
            bytes16 decodekey = _GetDecodeKey(usr);
            return (res, decodekey);
            }
    }

    function random() internal view returns(bytes16) {
        return bytes16(keccak256(abi.encodePacked(block.difficulty, block.timestamp)));        
    }


}