
// File: contracts/DUSD/DUSD.sol
// SPDX-License-Identifier: AGPL-3.0-or-later

// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

pragma solidity >=0.5.16;
pragma experimental ABIEncoderV2;

import "../Utils/SafeMath.sol";
import "../Manager/ManagerProxy.sol";

contract DUSD is ManagerProxy {
    using SafeMath for uint;

    // --- BEP20 Data ---
    string  public constant version  = "1";
    string  public name;
    string  public symbol;
    uint8   public decimals;
    uint256 public totalSupply;

    mapping (address => uint)                      public balanceOf;
    mapping (address => mapping (address => uint)) public allowance;
    mapping (address => uint)                      public nonces;

    event Approval(address indexed src, address indexed guy, uint wad);
    event Transfer(address indexed src, address indexed dst, uint wad);

    // --- EIP712 niceties ---
    bytes32 public DOMAIN_SEPARATOR;
    // bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)");
    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;

    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        DOMAIN_SEPARATOR = keccak256(abi.encode(
                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
                keccak256(bytes(name)),
                keccak256(bytes(version)),
                getChainId(),
                address(this)
            ));
    }

    // --- Token ---
    function transfer(address dst, uint wad) external ValidUDSDState OutBlacklist2(msg.sender, dst) returns (bool) {
        return transferFrom(msg.sender, dst, wad);
    }

    function transferFrom(address src, address dst, uint wad) public ValidUDSDState OutBlacklist3(msg.sender, src, dst) returns (bool)
    {
        require(balanceOf[src] >= wad, "DUSD/insufficient-balance");
        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {
            require(allowance[src][msg.sender] >= wad, "DUSD/insufficient-allowance");
            allowance[src][msg.sender] = allowance[src][msg.sender].sub(wad);
        }
        balanceOf[src] = balanceOf[src].sub(wad);
        balanceOf[dst] = balanceOf[dst].add(wad);
        emit Transfer(src, dst, wad);
        return true;
    }

    function mint(address usr, uint wad) external ValidUDSDState CheckPermitsOr(_getMintRoles()) OutBlacklist2(msg.sender, usr) {
        balanceOf[usr] = balanceOf[usr].add(wad);
        totalSupply = totalSupply.add(wad);
        emit Transfer(address(0), usr, wad);
    }

    function burn(address usr, uint wad) external ValidUDSDState OutBlacklist2(msg.sender, usr) {
        require(balanceOf[usr] >= wad, "DUSD/insufficient-balance");
        if (usr != msg.sender && allowance[usr][msg.sender] != uint(-1)) {
            require(allowance[usr][msg.sender] >= wad, "DUSD/insufficient-allowance");
            allowance[usr][msg.sender] = allowance[usr][msg.sender].sub(wad);
        }
        balanceOf[usr] = balanceOf[usr].sub(wad);
        totalSupply = totalSupply.sub(wad);
        emit Transfer(usr, address(0), wad);
    }

    function approve(address usr, uint wad) external ValidUDSDState OutBlacklist2(msg.sender, usr) returns (bool) {
        allowance[msg.sender][usr] = wad;
        emit Approval(msg.sender, usr, wad);
        return true;
    }

    // --- Alias ---
    function push(address usr, uint wad) external {
        transferFrom(msg.sender, usr, wad);
    }

    function pull(address usr, uint wad) external {
        transferFrom(usr, msg.sender, wad);
    }

    function move(address src, address dst, uint wad) external {
        transferFrom(src, dst, wad);
    }

    // --- Approve by signature ---
    struct PermitParam {
        address holder;
        address spender;
        uint256 nonce;
        uint256 expiry;
        bool allowed;
        uint8 v;
        bytes32 r;
        bytes32 s;
    }

    function permit(PermitParam calldata param) external ValidUDSDState OutBlacklist3(msg.sender, param.holder, param.spender)
    {
        bytes32 digest = keccak256(abi.encodePacked(
                "\x19\x01",
                DOMAIN_SEPARATOR,
                keccak256(abi.encode(PERMIT_TYPEHASH,
                    param.holder,
                    param.spender,
                    param.nonce,
                    param.expiry,
                    param.allowed))
            ));

        require(param.holder != address(0), "DUSD/invalid-address-0");
        require(param.holder == ecrecover(digest, param.v, param.r, param.s), "DUSD/invalid-permit");
        require(param.expiry == 0 || now <= param.expiry, "DUSD/permit-expired");
        require(param.nonce == nonces[param.holder]++, "DUSD/invalid-nonce");
        uint wad = param.allowed ? uint(-1) : 0;
        allowance[param.holder][param.spender] = wad;
        emit Approval(param.holder, param.spender, wad);
    }


    // --- internal ---
    function _getMintRoles() internal returns(string[] memory) {
        string[] memory roles = new string[](2);
        roles[0] = "DUSDMinter";
        roles[1] = "DUSDAdmin";
        return roles;
    }

    function getChainId() internal pure returns (uint) {
        uint256 chainId;
        assembly { chainId := chainid() }
        return chainId;
    }
}



// File: contracts/Utils/SafeMath.sol
pragma solidity ^0.5.16;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
  /**
   * @dev Returns the addition of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `+` operator.
   *
   * Requirements:
   * - Addition cannot overflow.
   */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    return add(a, b, "SafeMath: addition overflow");
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, errorMessage);

    return c;
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  /**
   * @dev Returns the multiplication of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `*` operator.
   *
   * Requirements:
   * - Multiplication cannot overflow.
   */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts with custom message when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}


// File: contracts/Manager/ManagerProxy.sol
pragma solidity ^0.5.16;

//import "./Manager.sol";
import "../Utils/Ownable.sol";
import "../interfaces/IManager.sol";

contract ManagerProxy is Ownable {
    IManager public manager;

    event NewManager(address indexed oldManager, address indexed newManager);

    modifier CheckPermit(string memory permit) {
        require(manager.userPermits(msg.sender, permit), "no permit");
        _;
    }

    modifier CheckPermitsOr(string[] memory permits) {
        bool granted = false;
        for (uint i = 0; i < permits.length; i++) {
            if (manager.userPermits(msg.sender, permits[i])) {
                granted = true;
                break;
            }
        }

        require(granted, "no permit");
        _;
    }

    modifier CheckUserPermit(address user, string memory permit) {
        require(manager.userPermits(user, permit), "no permit");
        _;
    }

    modifier CheckPermitOrGuardian(string memory permit) {
        require(manager.guardian() == msg.sender || manager.userPermits(msg.sender, permit), "no permit");
        _;
    }

    modifier OutBlacklist(address account) {
        address[] memory addArr = new address[](1);
        addArr[0] = account;
        require(!manager.inBlacklist(addArr), "account is in blacklist");
        _;
    }

    modifier OutBlacklist2(address account0, address account1) {
        address[] memory addArr = new address[](2);
        addArr[0] = account0;
        addArr[1] = account1;
        require(!manager.inBlacklist(addArr), "account is in blacklist");
        _;
    }

    modifier OutBlacklist3(address account0, address account1, address account2) {
        address[] memory addArr = new address[](3);
        addArr[0] = account0;
        addArr[1] = account1;
        addArr[2] = account2;
        require(!manager.inBlacklist(addArr), "account is in blacklist");
        _;
    }

    modifier ValidUDSDState() {
        require(!manager.dusdPaused(), "DUSD is paused");
        _;
    }

    modifier ValidDMTState() {
        require(!manager.dmtPaused(), "DMT is paused");
        _;
    }

    function setManager(address _manager) external onlyOwner {
        return _setManagerInternal(_manager);
    }

    function _getComptroller() internal view returns(address) {
        return manager.members("comptroller");
    }

    function _getIncome() internal view returns(address) {
        return manager.members("income");
    }

    function _getIncomeCache() internal view returns(address) {
        return manager.members("incomeCache");
    }

    function _getLiquidateFeeSwap() internal view returns(address) {
        return manager.members("liquidateSwap");
    }

    function _getReservedAssetSwap() internal view returns(address) {
        return manager.members("reservedSwap");
    }

    function _getDMT() internal view returns(address) {
        return manager.members("DMT");
    }

    function _getDUSD() internal view returns(address) {
        return manager.members("DUSD");
    }

    function _getDAOPool() internal view returns(address) {
        return manager.members("DAOPool");
    }

    function _getTreasury() internal view returns(address) {
        return manager.members("treasury");
    }

    // with decimal 18
    function _getRedeemTreasuryPercent() internal view returns(uint) {
        return manager.values("redeemTreasuryPercent");
    }

    // with decimal 18
    function _getReserveDAOPercent() internal view returns(uint) {
        return manager.values("reserveDAOPercent");
    }

    // with decimal 18
    function _getDUSDInterestDAOPercent() internal view returns(uint) {
        return manager.values("dusdInterestDAOPercent");
    }

    // with decimal 18
    function _getDUSDInflationDAOPercent() internal view returns(uint) {
        return manager.values("dusdInflationDAOPercent");
    }

    // with decimal 18
    function _getDUSDMintRate() internal view returns(uint) {
        return manager.values("dusdMintRate");
    }

    // with decimal 18
    function _getLiquidateFeePercent() internal view returns(uint) {
        return manager.values("liquidateFeePercent");
    }

    // with decimal 18
    function _getLiquidateFeeDAOPercent() internal view returns(uint) {
        return manager.values("liquidateFeeDAOPercent");
    }

    function _setManagerInternal(address _manager) internal {
        address oldManager = address(manager);
        manager = IManager(_manager);
        emit NewManager(oldManager, _manager);
    }

}


// File: contracts/Utils/Ownable.sol
pragma solidity ^0.5.16;

import "./Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
  address public owner;
  address public pendingOwner;

  event NewOwner(address indexed oldOwner, address indexed owner);
  event NewPendingOwner(address indexed pendingOwner);

  modifier onlyOwner() {
    require(msg.sender == owner, "Ownable: only owner");
    _;
  }

  modifier onlyPendingOwner() {
    require(msg.sender == pendingOwner, "Ownable: only pending owner");
    _;
  }

  /**
   * @dev Initializes the contract setting the deployer as the initial owner.
   */
  constructor () internal {
    owner = _msgSender();
    emit NewOwner(address(0), owner);
  }

  function setPendingOwner(address _pendingOwner) external onlyOwner {
    require(_pendingOwner != address(0), "Ownable: pending owner is 0");
    pendingOwner = _pendingOwner;

    emit NewPendingOwner(pendingOwner);
  }

  function acceptOwner() external onlyPendingOwner {
    address old = owner;
    owner = msg.sender;
    pendingOwner = address(0);

    emit NewOwner(old, owner);
  }
}


// File: contracts/interfaces/IManager.sol
pragma solidity ^0.5.16;

interface IManager {
    function userPermits(address user, string calldata permit) external view returns(bool);
    function guardian() external view returns(address);
    function inBlacklist(address[] calldata accounts) external view returns(bool);
    function protocolPaused() external view returns(bool);
    function redeemPaused() external view returns(bool);
    function repayPaused() external view returns(bool);
    function liquidatePaused() external view returns(bool);
    function transferDmTokenPaused() external view returns(bool);

    function marketMintPaused(address market) external view returns(bool);
    function marketBorrowPaused(address market) external view returns(bool);

    function mintVAIPaused() external view returns(bool);
    function repayVAIPaused() external view returns(bool);

    function dusdPaused() external view returns(bool);
    function dmtPaused() external view returns(bool);

    function members(string calldata mem) external view returns(address);
    function values(string calldata key) external view returns(uint256);
}

// File: contracts/Utils/Context.sol
pragma solidity 0.5.16;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
  // Empty internal constructor, to prevent people from mistakenly deploying
  // an instance of this contract, which should be used via inheritance.
  constructor () internal { }

  function _msgSender() internal view returns (address payable) {
    return msg.sender;
  }

  function _msgData() internal view returns (bytes memory) {
    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
    return msg.data;
  }
}
