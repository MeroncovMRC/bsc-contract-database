{"dust.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\"; // Import the ERC20 interface\r\n\r\ncontract TokenDuster {\r\n    \r\n    address public tokenAddress; // Address of the BSC token to be dusted\r\n    uint public dustAmount; // Amount of token to be dusted\r\n    uint public numAddresses; // Number of addresses to receive dust\r\n    address[] public addresses; // Array of recipient addresses\r\n    mapping(address =\u003e bool) public hasReceivedDust; // Mapping to keep track of who has received dust\r\n    \r\n    constructor(address _tokenAddress, uint _dustAmount, uint _numAddresses) {\r\n        tokenAddress = _tokenAddress;\r\n        dustAmount = _dustAmount;\r\n        numAddresses = _numAddresses;\r\n        addresses = new address[](numAddresses);\r\n    }\r\n    \r\n    function addAddresses(address[] memory _addresses) external {\r\n        require(_addresses.length \u003c= numAddresses, \"Cannot add more than numAddresses\");\r\n        for(uint i = 0; i \u003c _addresses.length; i++) {\r\n            addresses[i] = _addresses[i];\r\n        }\r\n    }\r\n    \r\n    function dustToken() external {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint balance = token.balanceOf(address(this));\r\n        require(balance \u003e= dustAmount * numAddresses, \"Insufficient token balance in contract\");\r\n        for(uint i = 0; i \u003c numAddresses; i++) {\r\n            if(!hasReceivedDust[addresses[i]]) {\r\n                hasReceivedDust[addresses[i]] = true;\r\n                token.transfer(addresses[i], dustAmount);\r\n            }\r\n        }\r\n    }\r\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"}}