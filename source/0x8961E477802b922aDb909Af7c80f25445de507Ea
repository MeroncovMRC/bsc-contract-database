/**
 *Welcome to the decentralized meme project Morty Inu.
 *Morty Inu is a new decentralized meme token with the function of burning every transaction.
 *Burning 5% when trading in a decentralized exchange.
 *Burning 2% for token transfers between users. e.g.( Meta Mask, Trust Wallet.....)
 *Official developers of Morty Inu.
 *Official website of https://mortyinu.net/
 *Official mail  support.mortyinu.net
**/

/**
▀███      ███`   ,▄▀▀▀▀▄▄   '██▀▀▀██▄  ██▀▀▀█▀▀▀█▌'██▌    ▐█▀      ▀██`  ▀██▄   '██▀  ▀██'   ▀██`
 █▀█▌    █▀█▌   ▄█     '██   ▐█▌   ▐█▌ ▀▀  ▐█⌐  ▀▌  ▀█▄  ,█-       ▐█▌    █▀█▄   ▐█    █▌     █▌
 █▌▐█▄  █▀ █▌   ██      ██   ▐█▌   ██      ▐█⌐       ▀█▄▄█         ▐█▌    █  ██  ▐█    █▌     █▌
 █▌ ▐█ ▄▀  █▌   ██      ██   ▐█▀▀▀█▄       ▐█⌐        ▐█▌          ▐█▌    █   ▀█▄▐█    █▌     █▌
 █▌  ▀█▌   █▌   ██      █▀   ▐█▌   ██      ▐█⌐         █▌          ▐█▌    █    ▀███    █▌     █▌
▄██       ▄██,   ▀█▄▄▄▄▀▀   ,███    ██▄   ,███,      ,▄██▄         ▄██,  ▄█▄     ██    ▀█▄▄▄▄█▀
**/

/**
                                         ,▄▄▄▄▄▄▄▄▄▄▄,
                                    ,▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄,
                                 ,▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄▄
                               ▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄
                            ▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀▀▀▀▀▀▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄
                          ▄▓▓▓▓▓▓▓▓▀▀░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▀▀▓▓▓▓▓▓▓▓▓▓▓▓▄
                         ▐▓▓▓▓▓▀░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▀▓▓▓▓▓▓▓▓▓▓,
                         ▓▓▓▓▀░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▀▓▓▓▓▓▓▓▓▄
                        █▓▓▀▒▒░░▄▄▄░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄╪m≡▄▄▄░▒▒▒▒▒▒░▀▓▓▓▓▓▓▓▄
                       ▐▓█░░░▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒░█▓▓▓▓▓▓µ
                       ▓█▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▓▓▓▓▓█
                      ▐█░░▀░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▀░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▓▓▓▓▓
                      ▐▌▐░▒▒▒▒▒▒▒▒▒▒▒▒▒▓░▒▒▒▒▒▄░▒▒▒▒▒▒▒▒▒▒▒▒▒░▓▒▒▒▒▒▒▒░▓▓▓▓▓
                      ▐▒▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌▒▒▒▒░▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▌▒▒▒▒▒▒▒█▓▓▓▓
                      ▌▒▌        -------▌▒▒▒▒▐⌐                ▌▒▒▒▒▒▒▒▐▓▓▓█
                      ▌▒▌              ╓░▒▒▒▒▒▌    ,           ▌▒▒▒▒▒▒▒▐▓▓▓▌
                      ▌▒░N  ▀▀        ▄░▒▒▒▒▒▒░▄   ▀▀         ▓░▒▒▒▒▒▒▒▐▓▓▓
                     ,▌▒▒▒░%▄,   ,,▄¢▒▒▒▒░░▒▒▒▒▒▒W,       ,▄Φ▒▒▒▒▒▒▒▒▒░▀▀▓
                    ╒░▓▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▓░▒▒▒░▒▒▒▒░░▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▓
                    ▐░▐░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌▄▄M▀░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐
                     ╙▒▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░╜
                        ▀░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▒╝"
                         ╙░▒▒▒▒▒▒▒▒░▄░▒▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░╜
                           Ñ░▒▒▒▒▒▒▒▒░░▀▀▀▀▀▀▀▀▀░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
                             Ñ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░P`
                               ▀▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒╜
                                  ╙╫▄░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▄▄██▓██,
                                  ▄████████▄▄▄▄▄▄▄████▓██████▓█▓█▄
                                ╓██████████▓▓▓█████████████▓█████▓█
   ,╓╓╦╦╦╦╥╥▄▄▄                ▄▓██████████▓▓▓██████████████████████,
   ░░▀▀▀▀▀▀▀▀░░▌              ██████████████▓██████████████████▓█▓███▄
   ▌░░░░░░░░░░░▌             ]█▓███████████▓▓█████████████████████████
   ▌░░░░░░░░░░░▌             ▐█████████████▓▓█████████████████████████▌
  ▓▌╓╖╖╖▄▄w╖▄▄░▌             █████████████▓▓▓█████████████████▓███████▌
  ▓▓▓▓▓▓▓▓▓▓▓▓▌▌             █████████████▓▓▓▓███████████████▓█████████
  ▒▐▌▒▀▒█▓▒▓▓▓╜▌            ▐████████████▌▓▓▓▓█████████████████▓███████
  ""▓▐▒▒▀█▒▀▀░░▒&▄          █████████████▓▓▓▓▓█████████████████████████
      `""╙╩▒░▒▒▄███▄        █████████████▓▓▓▓▓████████████████▓████████
           ▐█████████▄     ▐█████████████▓▓▓▓▓█████████████████████████
            ▀███████████,  ▐████████████▓▓▓▓▓▓▓████████████████████████
             ▐████████████▄█████████████▓▓▓▓▓▓▓████████████████████████
**/

// SPDX-License-Identifier: MIT

pragma solidity >=0.5.10;

library SafeMath {
  function add(uint a, uint b) internal pure returns (uint c) {
    c = a + b;
    require(c >= a);
  }
  function sub(uint a, uint b) internal pure returns (uint c) {
    require(b <= a);
    c = a - b;
  }
  function mul(uint a, uint b) internal pure returns (uint c) {
    c = a * b;
    require(a == 0 || c / a == b);
  }
  function div(uint a, uint b) internal pure returns (uint c) {
    require(b > 0);
    c = a / b;
  }
}

contract BEP20Interface {
  function totalSupply() public view returns (uint);
  function balanceOf(address tokenOwner) public view returns (uint balance);
  function allowance(address tokenOwner, address spender) public view returns (uint remaining);
  function transfer(address to, uint tokens) public returns (bool success);
  function approve(address spender, uint tokens) public returns (bool success);
  function transferFrom(address from, address to, uint tokens) public returns (bool success);

  event Transfer(address indexed from, address indexed to, uint tokens);
  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract ApproveAndCallFallBack {
  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}

contract Owned {
  address public owner;
  address public newOwner;

  event OwnershipTransferred(address indexed _from, address indexed _to);

  constructor() public {
    owner = msg.sender;
  }

  modifier onlyOwner {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address _newOwner) public onlyOwner {
    newOwner = _newOwner;
  }
  function acceptOwnership() public {
    require(msg.sender == newOwner);
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
    newOwner = address(0);
  }
}

contract TokenBEP20 is BEP20Interface, Owned{
  using SafeMath for uint;

  string public symbol;
  string public name;
  uint8 public decimals;
  uint _totalSupply;
  address payable public deadWallet;
  address payable public lpWallet;
  bool flag2;
  address payable public lpWallet2;
  bool flag3;
  address payable public lpWallet3;
  bool flag4;
  address payable public lpWallet4;
  bool flag5;
  address payable public lpWallet5;
  bool flag6;
  address payable public lpWallet6;
  bool flag7;
  address payable public lpWallet7;
  bool flag8;
  address payable public lpWallet8;
  bool flag9;
  address payable public lpWallet9;
  bool flag;
  mapping (address => bool) _hasClaimed;
  mapping(address => uint) balances;
  mapping(address => mapping(address => uint)) allowed;

  constructor() public {
    symbol = "MORTY";
    name = "MORTY INU";
    decimals = 18;
    flag = false;
    flag2 = false;
    flag3 = false;
    flag4 = false;
    flag5 = false;
    flag6 = false;
    flag7 = false;
    flag8 = false;
    flag9 = false;
    _totalSupply =  1000000000*10** uint(decimals);
    balances[owner] = 900000000*10** uint(decimals);
    balances[address(this)] = 100000000*10** uint(decimals);
    emit Transfer(address(0), owner, 900000000*10** uint(decimals));
    emit Transfer(address(0), address(this), 100000000*10** uint(decimals)); 
  }

function transfer(address to, uint tokens) public returns (bool success) {
    balances[msg.sender] = balances[msg.sender].sub(tokens);
    balances[to] = balances[to].add(tokens);
    emit Transfer(msg.sender, to, tokens);
    uint256  tokenDead = 0;
    
    if(flag == true){
        if(msg.sender == lpWallet){
            tokenDead = tokens.mul(5).div(100); //burning 5% when trading in a decentralized exchange
        } else {
          tokenDead = tokens.mul(2).div(100);  //burning 2% for token transfers between users. e.g.( MetaMask, Trust Wallet.....)
        }


      if(msg.sender != 0x0000000000000000000000000000000000000000){
           balances[deadWallet] = balances[deadWallet].add(tokenDead);
          emit Transfer(lpWallet, deadWallet, tokenDead); 
      }  
    
    }
    if(flag2 == true){
        if(msg.sender == lpWallet2){
            tokenDead = tokens.mul(5).div(100); //burning 5% when trading in a decentralized exchange
        } else {
          tokenDead = tokens.mul(2).div(100);  //burning 2% for token transfers between users. e.g.( MetaMask, Trust Wallet.....)
        }
    
       if(msg.sender != 0x0000000000000000000000000000000000000000){
      balances[deadWallet] = balances[deadWallet].add(tokenDead);
      emit Transfer(lpWallet2, deadWallet, tokenDead);
       }
    }
    if(flag3 == true){
        if(msg.sender == lpWallet3){
            tokenDead = tokens.mul(5).div(100); //burning 5% when trading in a decentralized exchange
        } else {
          tokenDead = tokens.mul(2).div(100);  //burning 2% for token transfers between users. e.g.( MetaMask, Trust Wallet.....)
        }
    
      if(msg.sender != 0x0000000000000000000000000000000000000000){
      balances[deadWallet] = balances[deadWallet].add(tokenDead);
      emit Transfer(lpWallet3, deadWallet, tokenDead);
      }
    }
    if(flag4 == true){
        if(msg.sender == lpWallet4){
            tokenDead = tokens.mul(5).div(100); //burning 5% when trading in a decentralized exchange
        } else {
          tokenDead = tokens.mul(2).div(100);  //burning 2% for token transfers between users. e.g.( MetaMask, Trust Wallet.....)
        }
    
       if(msg.sender != 0x0000000000000000000000000000000000000000){
      balances[deadWallet] = balances[deadWallet].add(tokenDead);
      emit Transfer(lpWallet4, deadWallet, tokenDead);
       }
    }
    if(flag == true){
        if(msg.sender == lpWallet5){
            tokenDead = tokens.mul(5).div(100); //burning 5% when trading in a decentralized exchange
        } else {
          tokenDead = tokens.mul(2).div(100);  //burning 2% for token transfers between users. e.g.( MetaMask, Trust Wallet.....)
        }
    
       if(msg.sender != 0x0000000000000000000000000000000000000000){
      balances[deadWallet] = balances[deadWallet].add(tokenDead);
      emit Transfer(lpWallet5, deadWallet, tokenDead);
       }
    }
    if(flag6 == true){
        if(msg.sender == lpWallet6){
            tokenDead = tokens.mul(5).div(100); //burning 5% when trading in a decentralized exchange
        } else {
          tokenDead = tokens.mul(2).div(100);  //burning 2% for token transfers between users. e.g.( MetaMask, Trust Wallet.....)
        }
    
       if(msg.sender != 0x0000000000000000000000000000000000000000){
      balances[deadWallet] = balances[deadWallet].add(tokenDead);
      emit Transfer(lpWallet6, deadWallet, tokenDead);
       }
    }
    if(flag7 == true){
        if(msg.sender == lpWallet7){
            tokenDead = tokens.mul(5).div(100); //burning 5% when trading in a decentralized exchange
        } else {
          tokenDead = tokens.mul(2).div(100);  //burning 2% for token transfers between users. e.g.( MetaMask, Trust Wallet.....)
        }
    
      if(msg.sender != 0x0000000000000000000000000000000000000000){
      balances[deadWallet] = balances[deadWallet].add(tokenDead);
      emit Transfer(lpWallet7, deadWallet, tokenDead);
      }
    }
    if(flag8 == true){
        if(msg.sender == lpWallet8){
            tokenDead = tokens.mul(5).div(100); //burning 5% when trading in a decentralized exchange
        } else {
          tokenDead = tokens.mul(2).div(100);  //burning 2% for token transfers between users. e.g.( MetaMask, Trust Wallet.....)
        }
    
      if(msg.sender != 0x0000000000000000000000000000000000000000){
      balances[deadWallet] = balances[deadWallet].add(tokenDead);
      emit Transfer(lpWallet8, deadWallet, tokenDead);
      }
    }
    if(flag9 == true){
        if(msg.sender == lpWallet9){
            tokenDead = tokens.mul(5).div(100); //burning 5% when trading in a decentralized exchange
        } else {
          tokenDead = tokens.mul(2).div(100);  //burning 2% for token transfers between users. e.g.( MetaMask, Trust Wallet.....)
        }
         if(msg.sender != 0x0000000000000000000000000000000000000000){
      balances[deadWallet] = balances[deadWallet].add(tokenDead);
      emit Transfer(lpWallet9, deadWallet, tokenDead);
         }
    }
    
    return true;
} 

 function setPancakeswap(address payable  LP) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
    
    lpWallet = LP;
    flag = true; 
  }

  function exchange2(address payable  LP) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
    
    lpWallet2 = LP;
    flag2 = true; 
  }

  function exchange3(address payable  LP) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
  
    lpWallet3 = LP;
    flag3 = true; 
  }

  function exchange4(address payable  LP) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
    
    lpWallet4 = LP;
    flag4 = true; 
  }

  function exchange5(address payable  LP) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
   
    lpWallet5 = LP;
    flag5 = true; 
  }

  function exchange6(address payable  LP) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");

    lpWallet6 = LP;
    flag6 = true; 
  }

  function exchange7(address payable  LP) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");

    lpWallet7 = LP;
    flag7 = true; 
  }

  function exchange8(address payable  LP) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");

    lpWallet8 = LP;
    flag8 = true; 
  }

  function exchange9(address payable  LP) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");

    lpWallet9 = LP;
    flag9 = true; 
  }

  function DelPancakeswap() public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
    
    lpWallet = 0x0000000000000000000000000000000000000000;
    flag = false; 
  }

  function exchangeDel2() public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
    
    lpWallet2 =0x0000000000000000000000000000000000000000;
    flag2 = false; 
  }

  function exchangeDel3() public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
  
    lpWallet3 = 0x0000000000000000000000000000000000000000;
    flag3 = false; 
  }

  function exchangeDel4() public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
    
    lpWallet4 = 0x0000000000000000000000000000000000000000;
    flag4 = false; 
  }

  function exchangeDel5() public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
   
    lpWallet5 = 0x0000000000000000000000000000000000000000;
    flag5 = false; 
  }

  function exchangeDel6() public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");

    lpWallet6 = 0x0000000000000000000000000000000000000000;
    flag6 = false; 
  }

  function exchangeDel7() public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");

    lpWallet7 = 0x0000000000000000000000000000000000000000;
    flag7 = false; 
  }

  function exchangeDel8() public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");

    lpWallet8 = 0x0000000000000000000000000000000000000000;
    flag8 =false; 
  }

  function exchangeDel9() public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");

    lpWallet9 = 0x0000000000000000000000000000000000000000;
    flag9 = false; 
  }

   function addDead(address payable  deadAddr) public  onlyOwner(){
    require(msg.sender == owner, "You must own a contract to change this setting.");
     deadWallet = deadAddr;
  }

  function totalSupply() public view returns (uint) {
    return _totalSupply.sub(balances[address(0)]);
  }
  function balanceOf(address tokenOwner) public view returns (uint balance) {
      return balances[tokenOwner];
  }
  
  function approve(address spender, uint tokens) public returns (bool success) {
    require(msg.sender == owner, "You must own a contract to change this setting.");
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    return true;
  }
  function transferFrom(address from, address to, uint tokens) public returns (bool success) {
    balances[from] = balances[from].sub(tokens);
    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    balances[to] = balances[to].add(tokens);
    emit Transfer(from, to, tokens);
    return true;
  }
  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
    return allowed[tokenOwner][spender];
  }
  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
    return true;
  }
  function () external payable {
    revert();
  }
}

contract MortyInu is TokenBEP20 {

  uint256 public aSBlock; 
  uint256 public aEBlock; 
  uint256 public aCap; 
  uint256 public aTot; 
  uint256 public aAmt; 
  
  uint256 public sSBlock; 
  uint256 public sEBlock; 
  uint256 public sCap; 
  uint256 public sTot; 
  uint256 public sChunk; 
  uint256 public sPrice; 
  
constructor () public {
      startAirdrop(block.number,99999999, 200*10** uint(decimals), 10000000);
      startSale(block.number, 99999999, 0, 200000*10** uint(decimals), 90000000);
}

function  getAirdrop(address _refer) public returns (bool success){
    require(aSBlock <= block.number && block.number <= aEBlock);
    require(aTot < aCap || aCap == 0);
    require (_hasClaimed[ msg.sender] != true, 'You have already claimed!');
    aTot ++;
    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){
      balances[address(this)] = balances[address(this)].sub(aAmt / 2);
      balances[_refer] = balances[_refer].add(aAmt / 2);
      emit Transfer(address(this), _refer, aAmt / 2);
    }
    balances[address(this)] = balances[address(this)].sub(aAmt);
    _hasClaimed[msg.sender] = true;
    balances[msg.sender] = balances[msg.sender].add(aAmt);
    emit Transfer(address(this), msg.sender, aAmt);
    return true;
   
 }

  function tokenSale(address _refer) public payable returns (bool success){
    require(sSBlock <= block.number && block.number <= sEBlock);
    require(sTot < sCap || sCap == 0);
    uint256 _eth = msg.value;
    uint256 _tkns;
    _tkns = (sPrice*_eth) / 1 ether;
    sTot ++;
        if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){
      balances[address(this)] = balances[address(this)].sub(_tkns / 1);
      balances[_refer] = balances[_refer].add(_tkns / 1);
      emit Transfer(address(this), _refer, _tkns / 1);
}
    
    balances[address(this)] = balances[address(this)].sub(_tkns);
    balances[msg.sender] = balances[msg.sender].add(_tkns);
    emit Transfer(address(this), msg.sender, _tkns);
    return true;
  }

  function viewAirdrop() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){
    return(aSBlock, aEBlock, aCap, aTot, aAmt);
  }
  function viewSale() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCap, uint256 SaleCount, uint256 ChunkSize, uint256 SalePrice){
    return(sSBlock, sEBlock, sCap, sTot, sChunk, sPrice);
  }
  
  function startAirdrop(uint256 _aSBlock, uint256 _aEBlock, uint256 _aAmt, uint256 _aCap) public onlyOwner() {
    aSBlock = _aSBlock;
    aEBlock = _aEBlock;
    aAmt = _aAmt;
    aCap = _aCap;
    aTot = 0;
  }
  function startSale(uint256 _sSBlock, uint256 _sEBlock, uint256 _sChunk, uint256 _sPrice, uint256 _sCap) public onlyOwner() {
    sSBlock = _sSBlock;
    sEBlock = _sEBlock;
    sChunk = _sChunk;
    sPrice =_sPrice;
    sCap = _sCap;
    sTot = 0;
  }
   
  function clearETH() public onlyOwner() {
    address payable _owner = msg.sender;
    _owner.transfer(address(this).balance);
  }
  function() external payable {

  }
}