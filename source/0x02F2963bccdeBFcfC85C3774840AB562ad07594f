// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

contract EscudoOuroCoin {
    string public name;
    string public symbol;
    uint256 public totalSupply;
    mapping(address => uint256) public balance;
    mapping(address => mapping(address => uint256)) public allowance;
    string[] public advancedFeatures;
    string public rarity;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        name = "Escudo Ouro";
        symbol = "ESC";
        totalSupply = 100000000;
        balance[msg.sender] = totalSupply;
        rarity = "SPECIAL";
    }

    function addAdvancedFeature(string memory feature) public {
        advancedFeatures.push(feature);
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(balance[msg.sender] >= value, "Insufficient balance");
        balance[msg.sender] -= value;
        balance[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) public returns (bool) {
        require(balance[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Not allowed to transfer");

        balance[from] -= value;
        balance[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }

    function getBalance(address account) public view returns (uint256) {
        return balance[account];
    }

    function atomicSwap(
        address user1,
        address user2,
        uint256 user1Amount,
        uint256 user2Amount
    ) public returns (bool) {
        require(balance[user1] >= user1Amount, "Insufficient balance for user1");
        require(balance[user2] >= user2Amount, "Insufficient balance for user2");

        // Transfer tokens atomically
        balance[user1] -= user1Amount;
        balance[user2] -= user2Amount;
        balance[user1] += user2Amount;
        balance[user2] += user1Amount;

        emit Transfer(user1, user2, user1Amount);
        emit Transfer(user2, user1, user2Amount);
        return true;
    }
    
    function getRarity() public view returns (string memory) {
        return rarity;
    }
}