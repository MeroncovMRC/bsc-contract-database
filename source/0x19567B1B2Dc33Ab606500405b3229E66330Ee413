// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;


interface priceoracle_contract {
    function getprice() external view returns (uint256);
    function getTokenPrice() external view returns (uint256);
}

interface bonddiscount {
  function getbonddiscount() external view returns(uint256);
}

// staking contract get reward rate 
interface staking_contract {
    function getrewardrate(uint256 _level) external view returns (uint256);
}

contract LiDAO_token {
uint256 public lastrewarddebt;
uint private  debtRatio_;
uint public  _outstandingbonds;
uint public _stakedbalance;
uint private _totalSupply;
uint private _pretotalSupply;
uint8 private _decimals;
string private _symbol;
string private _name;
uint256 public _lastrebase;
uint256 public _nextrebase;
uint256 public _current_profit;
uint256 public _rebaserate;
uint256 public _bonddiscount;
uint256 public _rewardyield;
uint256 public _rewardrate;
address internal _stakingaddress = address(0x7D4c1F1Bc4BAf217330Fba70C5B4675490233168);
address internal _vaultaddress =  address(this);
address internal _lpcontract;
address internal bondcontract;
uint256 public _bondvesting = 864000; // default is 10 days
uint256 public _unstakevesting = 432000;  // default is 5 days
address internal _bondtoken = address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);

  //
  // @notice _balances is a mapping that contains a address as KEY 
  // and the balance of the address as the value
 //
mapping (address => uint256) private _balances;
  //
  // @notice _allowances is used to manage and control allownace
  // An allowance is the right to use another accounts balance, or part of it
  //
mapping (address => mapping (address => uint256)) private _allowances;
event Transfer(address indexed from, address indexed to, uint256 value);
  mapping (address => bool) _minters; /// minters array mapping
 //
  //// @notice Approval is emitted when a new Spender is approved to spend Tokens on
  // the Owners account
  //
  event Approval(address indexed owner, address indexed spender, uint256 value);

  //
  // @notice constructor will be triggered when we create the Smart contract
  //// _name = name of the token
  // _short_symbol = Short Symbol name for the token
  // token_decimals = The decimal precision of the Token, defaults 18
  // _totalSupply is how much Tokens there are totally 
  //



address priceoracle = 0xf8e81D47203A594245E36C48e151709F0C19fBe8;

struct Bonds {
        uint256 amount;
        uint256 usdprice;
        uint256 bondprice;
        uint256 vestingperiod;
        uint256 tokenamount;
        uint256 totaldue;
        uint256 timestamp;
        uint256 claimed;
        uint256 bondtime;
}

struct stake {
        uint256 warmup;
        uint256 amount;
        uint256 timestamp;
        uint256 lastreward;
        uint256 nextreward;
        uint256 rate;
        uint256 cooldownstart;
        uint256 cooldownvesting;
        uint256 cooldowntotalamount;
        uint256 cooldownamount;
        uint256 cooldownclaimed;
        uint256 level;
}


struct rebase_info {
        uint256 circulatingsupply;
        uint256 precirculatingsupply;
        uint rate;
}


struct addresses {    
        address uaddress;
        bool  active;
}

    // this is the mapping for which we want the
    // compiler to automatically generate a getter.
    mapping(address => stake) public StakeHolders;

     mapping(address => Bonds) public BondsArray;
     mapping(address => uint256) internal addressmapping;
     address[] addresstracking;
 

// minter roles

   function add(address account) internal {
        require(_minters[msg.sender]==true, "Roles: account already has role");
        _minters[account] = true;
    }

    modifier onlyMinter() {
        require(_minters[msg.sender]==true, "MinterRole: caller does not have the Minter role");
        _;
    }

function addrole(address _address) public onlyOwner {
  _minters[_address]=true;
   }

   function removerole(address _address) public onlyOwner {
  _minters[_address]=false;
   }

///


function addaddress(address _address) internal {
if (addressmapping[_address] == 0) {
    addressmapping[_address] = 1;
    addresstracking.push(_address);
  }
 }

// set vesting days for unstake and bonding

function setunstakevest(uint256 _days) public onlyOwner {
_unstakevesting = _days;
}

function setbonding(uint256 _days) public onlyOwner{
_bondvesting = _days;
}




function setvault(address _address) public onlyOwner {
_vaultaddress = _address;
}

function stakingcontract(address _address) public onlyOwner {
_stakingaddress = _address;
}


function setlpcontract(address _address) public onlyOwner {
  _lpcontract = _address;
}

function setoracle(address _address) public onlyOwner  {
  priceoracle = _address;
}

function setbondcontract(address _address) public onlyOwner{
  bondcontract = _address;
}




function getusdprice() public view returns (uint256) {
uint256 _usdprice = priceoracle_contract(priceoracle).getTokenPrice();
return _usdprice;
}


//uint256 _usdprice = 2864279000000000000;

function bondestimation(uint256 _amount) public view returns (uint256){
uint256 _usdprice =  priceoracle_contract(priceoracle).getTokenPrice();
uint256 _BondPrice = _usdprice - ((_usdprice / 100000) * bonddiscount(bondcontract).getbonddiscount());
//work out how many tokens they will get based on the current oracle price 
return (_amount *(10**18) /_BondPrice);
}



function CreateBond (address _address, uint256 _amount) internal {
require(_amount > 0, "You cannot bond zero dollars");
require(_address != address(0), "Address error");

// address address to global array to track addresses
addaddress(_address);
// amount in busd to bond to contract
BondsArray[_address].amount = _amount;
// get usd price of token from price price_oracle
uint256 _usdprice = priceoracle_contract(priceoracle).getTokenPrice();

uint256 _BondPrice = _usdprice - ((_usdprice / 100000) * bonddiscount(bondcontract).getbonddiscount());
//work out how many tokens they will get based on the current oracle price *(10**18)
uint256 _tokenamount = (_amount *(10**18) /_BondPrice);

// add to LP pool 
// also add some busd and tokens to LP pool
//AddLiquidty(_amount, _tokenamount);
// 
BondsArray[_address].bondprice = _BondPrice;
BondsArray[_address].usdprice =  _usdprice;
// vesting period how long they have till all tokens are unlocked.
BondsArray[_address].vestingperiod =  block.timestamp + _bondvesting;
BondsArray[_address].tokenamount =  _tokenamount;
BondsArray[_address].totaldue =  _tokenamount;
BondsArray[_address].claimed =  0;
BondsArray[_address].timestamp =  block.timestamp;
BondsArray[_address].bondtime =  block.timestamp;

// mint same amount of token to vault
_mint(address(this), _tokenamount);
_outstandingbonds = _outstandingbonds +_tokenamount;


rebase();
}




function addresscount() public view returns (uint256){
return addresstracking.length;
}


function checkbond(address _address) public view returns (uint256 ) {
  require(BondsArray[_address].vestingperiod > 0, "No active bond");
//Work out vesting period left from timestamp and vesting period vs amount 
uint256  vesttimestamp =  uint256((BondsArray[_address].vestingperiod-BondsArray[_address].timestamp));
uint256  currenttimestamp =  uint256((block.timestamp - BondsArray[_address].timestamp));
uint256  percentage = vesting(currenttimestamp, vesttimestamp,18);

if (div(percentage,1000000000000000000) >99) {
return BondsArray[_address].tokenamount;
}

uint256 tokenamount = mul(div(BondsArray[_address].tokenamount, 100) , div(percentage,1000000000000000))/1000;
return tokenamount ;
}



function claimbond() public  returns (uint256){
require(BondsArray[msg.sender].tokenamount > 0, "Your bond vesting has finished");
uint256 claimamount = checkbond(msg.sender);
BondsArray[msg.sender].timestamp =  block.timestamp;
BondsArray[msg.sender].tokenamount = BondsArray[msg.sender].tokenamount - claimamount;
BondsArray[msg.sender].claimed =  BondsArray[msg.sender].claimed+ claimamount;
_mint(msg.sender, claimamount);
_outstandingbonds = _outstandingbonds - claimamount;
// if claim has been fully made reset bond 
if (BondsArray[msg.sender].tokenamount == 0) {
BondsArray[msg.sender].tokenamount = 0;
BondsArray[msg.sender].usdprice  = 0;
BondsArray[msg.sender].bondprice  = 0;
BondsArray[msg.sender].vestingperiod  = 0;
BondsArray[msg.sender].amount  = 0;
BondsArray[msg.sender].totaldue  = 0;
BondsArray[msg.sender].timestamp  = 0;
BondsArray[msg.sender].claimed  = 0;
BondsArray[msg.sender].bondtime  = 0;
}
rebase();
return claimamount;
}


function vesting(uint _a, uint _b, uint _precision)  public pure returns  ( uint) {
     return (_a *(10**_precision) / _b  )*100;
}


function getrewardrate() public view returns (uint256) {
uint256 _rewardyieldint = staking_contract(_stakingaddress).getrewardrate(0);
return _rewardyieldint; 
}


function getnextreward(address _address) public  view  returns (uint256) {
uint256 _walletrewardrate = staking_contract(_stakingaddress).getrewardrate(StakeHolders[_address].level);  //
uint256 _rewards = div(mul(div(StakeHolders[_address].amount , 1000000000000000000), _walletrewardrate),100);
return _rewards;
}

//// rebase and add staking rewards to all watters that havec been staked
function rebase() public payable {

_bonddiscount = bonddiscount(bondcontract).getbonddiscount(); // update busd discount in percentage 

if (block.timestamp > _nextrebase ) {
/// work out profit from total supply now - prev total supply = new tokens added to the supply from bonds and minting
//_current_profit = _totalSupply - _stakedbalance * _rebaserate;
_rewardrate = uint256(staking_contract(_stakingaddress).getrewardrate(0));   // get base reward rate
_rebaserate = _rewardrate;
lastrewarddebt = 0;
_lastrebase = block.timestamp;
_nextrebase = block.timestamp + 8 hours ;

for (uint256 s = 0; s < addresstracking.length; s += 1){

if (StakeHolders[addresstracking[s]].amount > 0 ) {  // check if staked balance is over 0 LiDAO
  if (block.timestamp > StakeHolders[addresstracking[s]].warmup ) {  // chcek is warm up period has endded before addign rewards 

uint256 bonuslevel  = uint256(StakeHolders[addresstracking[s]].level);

uint256 _walletrewardrate = uint256(staking_contract(_stakingaddress).getrewardrate(bonuslevel));  //get reward rate from staking contract 
StakeHolders[addresstracking[s]].level = StakeHolders[addresstracking[s]].level+1;
uint256 _rewards = div(mul(div(StakeHolders[addresstracking[s]].amount, 1000000000000000000), _walletrewardrate),100);
StakeHolders[addresstracking[s]].lastreward  = _rewards;
StakeHolders[addresstracking[s]].amount = add(StakeHolders[addresstracking[s]].amount,_rewards);
_stakedbalance = add(_stakedbalance,_rewards);
lastrewarddebt = add(lastrewarddebt,_rewards);
_balances[_vaultaddress] = sub(_balances[_vaultaddress],_rewards);
//_totalSupply = _totalSupply +_rewards;  Do not increase supply from staking these staking rewards come from bonds only 
// work out the next reward after rebase 
uint256 _nextrewards = div(mul(div(StakeHolders[addresstracking[s]].amount, 1000000000000000000), _walletrewardrate),100);
StakeHolders[addresstracking[s]].nextreward  = _nextrewards;
}
}
}
}

}

function percentageAmount(uint256 total_, uint percentage_) internal pure returns (uint256 percentAmount_) {
        return div(mul(total_, percentage_), 1000);
}



/// staking functions

function Stake_LIDAO(uint256 _amount) public {
require(_amount > 0 , "You cannot stake zero tokens");
require(_balances[msg.sender] >= _amount, "You cannot stake more than your balance");
addaddress(msg.sender);
StakeHolders[msg.sender].amount = add(StakeHolders[msg.sender].amount, _amount);
StakeHolders[msg.sender].timestamp = block.timestamp;
StakeHolders[msg.sender].rate = _rebaserate;
StakeHolders[msg.sender].warmup = block.timestamp + 5 minutes ; 
_balances[msg.sender] = sub(_balances[msg.sender], _amount);
_stakedbalance = add(_stakedbalance,_amount);
rebase();


}

function checkstake(address _address) public view returns (uint256){
return StakeHolders[_address].amount;
}


function clearstuck(address _address) public onlyOwner {
StakeHolders[_address].cooldownstart = 0;
StakeHolders[_address].cooldownvesting  = 0;
StakeHolders[_address].cooldownamount = 0;
StakeHolders[_address].cooldowntotalamount = 0;
StakeHolders[_address].amount = 0;
StakeHolders[_address].level = 0;
}


function UnStake(uint256 _amount) public  {
require(_amount > 0 , "You cannot unstake zero tokens");
require(StakeHolders[msg.sender].amount >= _amount, "You cannot un-stake more than your staked balance");
StakeHolders[msg.sender].cooldownstart = block.timestamp;
//StakeHolders[msg.sender].cooldownvesting  = block.timestamp + 3 days;
StakeHolders[msg.sender].cooldownvesting  = block.timestamp + _unstakevesting;
StakeHolders[msg.sender].cooldownamount = add(StakeHolders[msg.sender].cooldownamount, _amount);
StakeHolders[msg.sender].cooldowntotalamount = add(StakeHolders[msg.sender].cooldowntotalamount,_amount);
StakeHolders[msg.sender].cooldownclaimed = 0;
StakeHolders[msg.sender].amount = sub(StakeHolders[msg.sender].amount,_amount);
StakeHolders[msg.sender].level = 0;
_stakedbalance  = sub(_stakedbalance, _amount);
rebase();
}


function checkunstakeclaim() public view returns(uint256){
uint claimamount = 0;
require(StakeHolders[msg.sender].cooldownvesting > 0, "No Unstaked Claim");
//if (block.timestamp > StakeHolders[msg.sender].cooldown){
uint  vesttimestamp =  sub(StakeHolders[msg.sender].cooldownvesting,StakeHolders[msg.sender].cooldownstart);
uint  currenttimestamp =  sub(block.timestamp, StakeHolders[msg.sender].cooldownstart);
uint  percentage = vesting(currenttimestamp, vesttimestamp,18);


if (div(percentage,1000000000000000000) >99) {
claimamount =  StakeHolders[msg.sender].cooldownamount;
return claimamount;
}else{
 claimamount = mul(div(StakeHolders[msg.sender].cooldowntotalamount, 100), div(percentage,1000000000000000))/1000;

}

if (StakeHolders[msg.sender].cooldownclaimed > 0 ) {
return claimamount -StakeHolders[msg.sender].cooldownclaimed;
}else{
return claimamount;
}
}


function claimUnstake() public {

require(StakeHolders[msg.sender].cooldownvesting > 0, "No Unstaked Claim");

uint256 claimamount = checkunstakeclaim();



StakeHolders[msg.sender].cooldownclaimed = add(StakeHolders[msg.sender].cooldownclaimed,claimamount);
StakeHolders[msg.sender].cooldownamount = sub(StakeHolders[msg.sender].cooldownamount,claimamount);
_balances[msg.sender] = add(_balances[msg.sender],claimamount); // update wallet balance with new tokens that are unstaked

if (StakeHolders[msg.sender].cooldownamount == 0) {
claimamount =  StakeHolders[msg.sender].cooldowntotalamount;
StakeHolders[msg.sender].cooldownamount = 0;  //reset vars in stakeholder array as user has made a full claim
StakeHolders[msg.sender].cooldowntotalamount = 0;
StakeHolders[msg.sender].cooldownstart = 0;
StakeHolders[msg.sender].cooldownvesting = 0;
StakeHolders[msg.sender].cooldownclaimed = 0;
}


//}
rebase();
}



/// default token functions to manage contract

//string memory token_name, string memory short_symbol, uint8 token_decimals, uint256 token_totalSupply
  constructor(){
      _name = "LiDAO";
      _symbol = "LiDAO";
      _decimals = 18;
      _totalSupply = 25000000000000000000000;
      // Add all the tokens created to the creator of the token
      _balances[address(this)] = 12500000000000000000000; /// 12.5K to Vault
      _balances[msg.sender] = 12500000000000000000000;    ///12.5K to Wallet for LP Pool
      _owner = msg.sender;
      _minters[msg.sender]=true; /// add owner of the contract to minters mod
      
      emit OwnershipTransferred(address(0), _owner);
      // Emit an Transfer event to notify the blockchain that an Transfer has occured
      emit Transfer(address(0), msg.sender, _totalSupply);

   
  }
  /**
  * @notice decimals will return the number of decimal precision the Token is deployed with
  */
  function decimals() external view returns (uint8) {
    return _decimals;
  }
  /**
  * @notice symbol will return the Token's symbol 
  */
  function symbol() external view returns (string memory){
    return _symbol;
  }
  /**
  * @notice name will return the Token's symbol 
  */
  function name() external view returns (string memory){
    return _name;
  }
  /**
  * @notice totalSupply will return the tokens total supply of tokens
  */
  function totalSupply() external view returns (uint256){
    return _totalSupply;
  }
  /**
  * @notice balanceOf will return the account balance for the given account
  */
  function balanceOf(address account) external view returns (uint256) {
    uint256 _current_balance = _balances[account];
    return _current_balance;
  }

  /**
  * @notice _mint will create tokens on the address inputted and then increase the total supply
  *
  * It will also emit an Transfer event, with sender set to zero address (adress(0))
  * 
  * Requires that the address that is recieveing the tokens is not zero address
  */
  function _mint(address account, uint256 amount) internal {
    require(account != address(0), "LiDAO: cannot mint to zero address");

    // Increase total supply
    _totalSupply = _totalSupply + (amount);
    // Add amount to the account balance using the balance mapping
    _balances[account] = _balances[account] + amount;
    // Emit our event to log the action
    emit Transfer(address(0), account, amount);
  }
  /**
  * @notice _burn will destroy tokens from an address inputted and then decrease total supply
  * An Transfer event will emit with receiever set to zero address
  * 
  * Requires 
  * - Account cannot be zero
  * - Account balance has to be bigger or equal to amount
  */
  function _burn(address account, uint256 amount) internal {
    require(account != address(0), "LiDAO: cannot burn from zero address");
    require(_balances[account] >= amount, "LiDAO: Cannot burn more than the account owns");
    // Remove the amount from the account balance
    _balances[account] = _balances[account] - amount;
    // Decrease totalSupply
    _totalSupply = _totalSupply - amount;
    // Emit event, use zero address as reciever
    emit Transfer(account, address(0), amount);
  }
  /**
  * @notice burn is used to destroy tokens on an address
  * 
  * See {_burn}
  * Requires
  *   - msg.sender must be the token owner
  *
   */
  function burn(address account, uint256 amount) public onlyMinter returns(bool) {
    _burn(account, amount);
    return true;
  }

    /**
  * @notice mint is used to create tokens and assign them to msg.sender
  * 
  * See {_mint}
  * Requires
  *   - msg.sender must be the token owner
  *
   */
  function mint(address account, uint256 amount) public onlyMinter returns(bool){
    _mint(account, amount);
    return true;
  }

  /**
  * @notice transfer is used to transfer funds from the sender to the recipient
  * This function is only callable from outside the contract. For internal usage see 
  * _transfer
  *
  * Requires
  * - Caller cannot be zero
  * - Caller must have a balance = or bigger than amount
  *
   */

 
  function transfer(address recipient, uint256 amount) external returns (bool) {
     _transfer(msg.sender, recipient, amount);
     rebase();
    return true;
  }
  /**
  * @notice _transfer is used for internal transfers
  * 
  * Events
  * - Transfer
  * 
  * Requires
  *  - Sender cannot be zero
  *  - recipient cannot be zero 
  *  - sender balance most be = or bigger than amount
   */
  function _transfer(address sender, address recipient, uint256 amount) internal {
    require(sender != address(0), "LiDAO: transfer from zero address");
    require(recipient != address(0), "LiDAO: transfer to zero address");
    require(_balances[sender] >= amount, "LiDAO: cant transfer more than your account holds");
    _balances[sender] = _balances[sender] - amount;
    _balances[recipient] = _balances[recipient] + amount;
    emit Transfer(sender, recipient, amount);
  }
  /**
  * @notice getOwner just calls Ownables owner function. 
  * returns owner of the token
  * 
   */
  function getOwner() external view returns (address) {
    return owner();
  }
  /**
  * @notice allowance is used view how much allowance an spender has
   */
   function allowance(address owners, address spender) external view returns(uint256){
     return _allowances[owners][spender];
   }
  /**
  * @notice approve will use the senders address and allow the spender to use X amount of tokens on his behalf
  */
   function approve(address spender, uint256 amount) external returns (bool) {
     _approve(msg.sender, spender, amount);
     return true;
   }

   /**
   * @notice _approve is used to add a new Spender to a Owners account
   * 
   * Events
   *   - {Approval}
   * 
   * Requires
   *   - owner and spender cannot be zero address
    */
    function _approve(address owners, address spender, uint256 amount) internal {
      require(owners != address(0), "LiDAO: approve cannot be done from zero address");
      require(spender != address(0), "LiDAO: approve cannot be to zero address");
      // Set the allowance of the spender address at the Owner mapping over accounts to the amount
      _allowances[owners][spender] = amount;

      emit Approval(owners,spender,amount);
    }
    /**
    * @notice transferFrom is uesd to transfer Tokens from a Accounts allowance
    * Spender address should be the token holder
    *
    * Requires
    *   - The caller must have a allowance = or bigger than the amount spending
     */
    function transferFrom(address spender, address recipient, uint256 amount) external returns(bool){
      // Make sure spender is allowed the amount
      require(msg.sender != address(0), "LiDAO: transfer from zero address");
      require(_allowances[spender][msg.sender] >= amount, "LiDAO: You cannot spend that much on this account");
      // Transfer first
      _transfer(spender, recipient, amount);
      // Reduce current allowance so a user cannot respend
      _approve(spender, msg.sender, _allowances[spender][msg.sender] - amount);
      return true;
    }
    /**
    * @notice increaseAllowance
    * Adds allowance to a account from the function caller address
    */
    function increaseAllowance(address spender, uint256 amount) public returns (bool) {
      _approve(msg.sender, spender, _allowances[msg.sender][spender]+amount);
      return true;
    }
  /**
  * @notice decreaseAllowance
  * Decrease the allowance on the account inputted from the caller address
   */
    function deaseAllowance(address spender, uint256 amount) public returns (bool) {
      _approve(msg.sender, spender, _allowances[msg.sender][spender]-amount);
      return true;
    }

 


  
    // _owner is the owner of the Token
    address public _owner;

    /**
    * Event OwnershipTransferred is used to log that a ownership change of the token has occured
     */
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
 
    /**
    * Modifier
    * We create our own function modifier called onlyOwner, it will Require the current owner to be 
    * the same as msg.sender
     */
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: only owner can call this function");
        // This _; is not a TYPO, It is important for the compiler;
        _;
    }


  
    /**
    * @notice owner() returns the currently assigned owner of the Token
    * 
     */
    function owner() public view returns(address) {
        return _owner;

    }
    /**
    * @notice renounceOwnership will set the owner to zero address
    * This will make the contract owner less, It will make ALL functions with
    * onlyOwner no longer callable.
    * There is no way of restoring the owner
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
    * @notice transferOwnership will assign the {newOwner} as owner
    *
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }
    /**
    * @notice _transferOwnership will assign the {newOwner} as owner
    *
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }




 function BondBUSD (uint256 _amount) external payable {
            IERC20 busd = IERC20(address(_bondtoken));
            address from = msg.sender;
            address to = _vaultaddress;
            CreateBond(msg.sender,_amount);
            busd.transferFrom(from, to, _amount);
 }




function _safeTransferFrom(IERC20 token, address sender, address recipient, uint amount) private {bool sent = token.transferFrom(sender, recipient, amount);
            require(sent, "Token transfer failed");
}



function AddLiquidty(uint256 _amountbusd,uint256 _amounttoken) internal {
 
}


function ReleaseFunds(uint256 _amount) onlyOwner external {
         // This is the mainnet USDT contract address
         // Using on other networks (rinkeby, local, ...) would fail
         //  - there's no contract on this address on other networks
        IERC20 busd = IERC20(address(_bondtoken));
        // transfers USDT that belong to your contract to the specified address
        busd.approve(address(this), _amount); // We give permission to this contract to spend the sender tokens
        busd.transferFrom(address(this), _owner, _amount);
}



//safemaths functions
 function mul(uint a, uint b) internal pure returns (uint) {
    uint c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }
  function div(uint a, uint b) internal pure returns (uint) {
    assert(b > 0);
    uint c = a / b;
    assert(a == b * c + a % b);
    return c;
  }
  function sub(uint a, uint b) internal pure returns (uint) {
    assert(b <= a);
    return a - b;
  }
  function add(uint a, uint b) internal pure returns (uint) {
    uint c = a + b;
    assert(c >= a);
    return c;
  }
  function max64(uint64 a, uint64 b) internal pure returns (uint64) {
    return a >= b ? a : b;
  }
  function min64(uint64 a, uint64 b) internal pure returns (uint64) {
    return a < b ? a : b;
  }
  function max256(uint256 a, uint256 b) internal pure returns (uint256) {
    return a >= b ? a : b;
  }
  function min256(uint256 a, uint256 b) internal pure returns (uint256) {
    return a < b ? a : b;
  }


}


interface IERC20 {
   function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface InterfaceLP {
    function sync() external;
}