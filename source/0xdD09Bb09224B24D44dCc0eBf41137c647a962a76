// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RateLimitedToken {
    // Balances for each account
    mapping(address => uint256) private _balances;

    // Token owner's account balance
    uint256 private _totalSupply;

    // Allowed balance to be spent by another account through {transferFrom}
    mapping (address => mapping (address => uint256)) private _allowances;

    // The block number of the last operation from each address
    mapping (address => uint256) public lastOperationBlock;

    // Excluded addresses from rate limit
    mapping (address => bool) public excludedAddresses;

    // Name of the token
    string private _name;

    // Symbol of the token
    string private _symbol;

    // Decimals of the token
    uint8 private _decimals = 18;

    // The number of blocks to wait between operations from a single address
    uint256 public blocksPerOperation;

    // Owner of the contract
    address private _owner;

    constructor(
        address[] memory _excludedAddresses, 
        string memory name_, 
        string memory symbol_, 
        uint256 _blocksPerOperation,
        uint256 _totalSupply
    ) {
        _name = name_;
        _symbol = symbol_;
        blocksPerOperation = _blocksPerOperation;
        _totalSupply = _totalSupply;
        _owner = msg.sender;

        for (uint i = 0; i < _excludedAddresses.length; i++) {
            excludedAddresses[_excludedAddresses[i]] = true;
        }

        _mint(msg.sender, _totalSupply);
    }

    modifier onlyOwner {
        require(msg.sender == _owner, "Only the contract owner can call this function");
        _;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(canOperate(msg.sender), "Rate limit exceeded for sender");
        require(canOperate(recipient), "Rate limit exceeded for recipient");

        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);

        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;

        if (!excludedAddresses[sender]) {
            lastOperationBlock[sender] = block.number;
        }

        if (!excludedAddresses[recipient]) {
            lastOperationBlock[recipient] = block.number;
        }
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply += amount;
        _balances[account] += amount;
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
    }

    function canOperate(address operator) public view returns (bool) {
        if (excludedAddresses[operator]) {
            return true;
        }
        return (block.number >= lastOperationBlock[operator] + blocksPerOperation);
    }

    function setBlocksPerOperation(uint256 _blocksPerOperation) public onlyOwner {
        blocksPerOperation = _blocksPerOperation;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        _owner = newOwner;
    }
}