/**
 *Submitted for verification at Etherscan.io on 2022-10-13
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract MyContract{
    address owner;
    address private immutable original;
    mapping(address => mapping(bytes =>uint256)) public map;
    mapping(uint256 => bytes32) public maps;

    constructor() payable {
        original = address(this);
        owner = tx.origin;
    }
    receive() external payable {}
    fallback() external payable{}

      //创建空槽
    function creteaSalt(uint256 total) external payable returns (address[] memory array) {
        require(msg.sender == tx.origin);
        bytes memory _salt = '0x01';
        bytes memory bytecode = hex'60a0604052732ab0e9e4ee70fff1fb9d67031e44f6410170d00e600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080516109a86100e5600039600050506109a86000f3fe6080604052600436106100385760003560e01c80634e71d92d14610041578063a0712d681461004b578063e96b5d4b1461007c5761003f565b3661003f57005b005b6100496100ad565b005b61006560048036038101906100609190610709565b610249565b6040516100739291906107e1565b60405180910390f35b61009660048036038101906100919190610709565b6103ec565b6040516100a49291906107e1565b60405180910390f35b3273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461010557600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016101979291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102019190610909565b6000604051808303816000865af19150503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b50505050565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102a557600080fd5b60006040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610331919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161039b9190610909565b6000604051808303816000865af19150503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b50809350819450505050915091565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461044857600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016104da9291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105449190610909565b6000604051808303816000865af19150503d8060008114610581576040519150601f19603f3d011682016040523d82523d6000602084013e610586565b606091505b5050506040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610613919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161067d9190610909565b6000604051808303816000865af19150503d80600081146106ba576040519150601f19603f3d011682016040523d82523d6000602084013e6106bf565b606091505b50809350819450505050915091565b600080fd5b6000819050919050565b6106e6816106d3565b81146106f157600080fd5b50565b600081359050610703816106dd565b92915050565b60006020828403121561071f5761071e6106ce565b5b600061072d848285016106f4565b91505092915050565b60008115159050919050565b61074b81610736565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561078b578082015181840152602081019050610770565b60008484015250505050565b6000601f19601f8301169050919050565b60006107b382610751565b6107bd818561075c565b93506107cd81856020860161076d565b6107d681610797565b840191505092915050565b60006040820190506107f66000830185610742565b818103602083015261080881846107a8565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083c82610811565b9050919050565b61084c81610831565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061088e61088961088484610852565b610869565b61085c565b9050919050565b61089e81610873565b82525050565b60006040820190506108b96000830185610843565b6108c66020830184610895565b9392505050565b600081905092915050565b60006108e382610751565b6108ed81856108cd565b93506108fd81856020860161076d565b80840191505092915050565b600061091582846108d8565b915081905092915050565b610929816106d3565b82525050565b60006020820190506109446000830184610920565b9291505056fe636c61696d4d696e74526577617264416e64536861726528616464726573732c75696e7432353629a26469706673582212207f3b151577281e87387af781719b9fa60a71bb168ead41a07638e62c71245d0864736f6c63430008110033';
        uint256 i = map[msg.sender][_salt]+1;
        uint256 j = map[msg.sender][_salt]+1;
        uint256 end = total+i;
        address proxy = address(this);
        array = new address[](total);
        for (i; i < end; ++i) {
	        bytes32 salt = keccak256(abi.encodePacked(_salt,i,msg.sender));
			assembly {
	             proxy := create2(0, add(bytecode, 32), mload(bytecode), salt)
            }
            array[i-j] = proxy;
        }
        
    return array;

    }
    

    //直接挖矿
     function mint(uint256 total,uint256 term) external payable returns (address[] memory addList, bytes32){
        require(msg.sender == tx.origin);
        bytes memory bytecode = hex'60a0604052732ab0e9e4ee70fff1fb9d67031e44f6410170d00e600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080516109a86100e5600039600050506109a86000f3fe6080604052600436106100385760003560e01c80634e71d92d14610041578063a0712d681461004b578063e96b5d4b1461007c5761003f565b3661003f57005b005b6100496100ad565b005b61006560048036038101906100609190610709565b610249565b6040516100739291906107e1565b60405180910390f35b61009660048036038101906100919190610709565b6103ec565b6040516100a49291906107e1565b60405180910390f35b3273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461010557600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016101979291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102019190610909565b6000604051808303816000865af19150503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b50505050565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102a557600080fd5b60006040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610331919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161039b9190610909565b6000604051808303816000865af19150503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b50809350819450505050915091565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461044857600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016104da9291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105449190610909565b6000604051808303816000865af19150503d8060008114610581576040519150601f19603f3d011682016040523d82523d6000602084013e610586565b606091505b5050506040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610613919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161067d9190610909565b6000604051808303816000865af19150503d80600081146106ba576040519150601f19603f3d011682016040523d82523d6000602084013e6106bf565b606091505b50809350819450505050915091565b600080fd5b6000819050919050565b6106e6816106d3565b81146106f157600080fd5b50565b600081359050610703816106dd565b92915050565b60006020828403121561071f5761071e6106ce565b5b600061072d848285016106f4565b91505092915050565b60008115159050919050565b61074b81610736565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561078b578082015181840152602081019050610770565b60008484015250505050565b6000601f19601f8301169050919050565b60006107b382610751565b6107bd818561075c565b93506107cd81856020860161076d565b6107d681610797565b840191505092915050565b60006040820190506107f66000830185610742565b818103602083015261080881846107a8565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083c82610811565b9050919050565b61084c81610831565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061088e61088961088484610852565b610869565b61085c565b9050919050565b61089e81610873565b82525050565b60006040820190506108b96000830185610843565b6108c66020830184610895565b9392505050565b600081905092915050565b60006108e382610751565b6108ed81856108cd565b93506108fd81856020860161076d565b80840191505092915050565b600061091582846108d8565b915081905092915050565b610929816106d3565b82525050565b60006020820190506109446000830184610920565b9291505056fe636c61696d4d696e74526577617264416e64536861726528616464726573732c75696e7432353629a26469706673582212207f3b151577281e87387af781719b9fa60a71bb168ead41a07638e62c71245d0864736f6c63430008110033';
        bytes memory _salt = '0x01';
        uint256 i = map[msg.sender][_salt]+1;
        uint256 j = i;
        uint256 end = total+i;
        
        
        //mint 函数选择器
        bytes4 selector = bytes4(keccak256(bytes("mint(uint256)")));
        bytes memory data =  abi.encodeWithSelector(selector, term);
        addList = new address[](total);
        address proxy = address(this);
        bytes32 salt;
        for (i; i < end;++i) {
	        salt = keccak256(abi.encodePacked(_salt,i,msg.sender));
			assembly {
	              proxy := create2(0, add(bytecode, 32), mload(bytecode), salt)
                    let succeeded := call(
                        gas(),
                        proxy,
                        0,
                        add(data, 0x20),
                        mload(data),
                        0,
                        0
                    )
			}
            addList[i-j] = proxy;
        }
        map[msg.sender][_salt] += total;

        return (addList, salt);
    }
    
    //收菜
    function claim(uint256[] calldata a) external payable {
        require(msg.sender == tx.origin);
        bytes memory bytecode = hex'60a0604052732ab0e9e4ee70fff1fb9d67031e44f6410170d00e600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080516109a86100e5600039600050506109a86000f3fe6080604052600436106100385760003560e01c80634e71d92d14610041578063a0712d681461004b578063e96b5d4b1461007c5761003f565b3661003f57005b005b6100496100ad565b005b61006560048036038101906100609190610709565b610249565b6040516100739291906107e1565b60405180910390f35b61009660048036038101906100919190610709565b6103ec565b6040516100a49291906107e1565b60405180910390f35b3273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461010557600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016101979291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102019190610909565b6000604051808303816000865af19150503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b50505050565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102a557600080fd5b60006040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610331919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161039b9190610909565b6000604051808303816000865af19150503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b50809350819450505050915091565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461044857600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016104da9291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105449190610909565b6000604051808303816000865af19150503d8060008114610581576040519150601f19603f3d011682016040523d82523d6000602084013e610586565b606091505b5050506040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610613919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161067d9190610909565b6000604051808303816000865af19150503d80600081146106ba576040519150601f19603f3d011682016040523d82523d6000602084013e6106bf565b606091505b50809350819450505050915091565b600080fd5b6000819050919050565b6106e6816106d3565b81146106f157600080fd5b50565b600081359050610703816106dd565b92915050565b60006020828403121561071f5761071e6106ce565b5b600061072d848285016106f4565b91505092915050565b60008115159050919050565b61074b81610736565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561078b578082015181840152602081019050610770565b60008484015250505050565b6000601f19601f8301169050919050565b60006107b382610751565b6107bd818561075c565b93506107cd81856020860161076d565b6107d681610797565b840191505092915050565b60006040820190506107f66000830185610742565b818103602083015261080881846107a8565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083c82610811565b9050919050565b61084c81610831565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061088e61088961088484610852565b610869565b61085c565b9050919050565b61089e81610873565b82525050565b60006040820190506108b96000830185610843565b6108c66020830184610895565b9392505050565b600081905092915050565b60006108e382610751565b6108ed81856108cd565b93506108fd81856020860161076d565b80840191505092915050565b600061091582846108d8565b915081905092915050565b610929816106d3565b82525050565b60006020820190506109446000830184610920565b9291505056fe636c61696d4d696e74526577617264416e64536861726528616464726573732c75696e7432353629a26469706673582212207f3b151577281e87387af781719b9fa60a71bb168ead41a07638e62c71245d0864736f6c63430008110033';
        uint256 i = 0;
        bytes memory _salt = '0x01';
        //claim 函数选择器
        bytes4 selector = bytes4(keccak256(bytes("claim()")));
        bytes memory data =  abi.encodeWithSelector(selector);
        for (i; i < a.length; ++i) {
	        bytes32 salt = keccak256(abi.encodePacked(_salt,a[i],msg.sender));
            address proxy = address(uint160(uint(keccak256(abi.encodePacked(
                    hex'ff',
                    address(this),
                    salt,
                    keccak256(bytecode)
                )))));
			assembly {
                let succeeded := call(
                    gas(),
                    proxy,
                    0,
                    add(data, 0x20),
                    mload(data),
                    0,
                    0
                )
			}
        }
    }


    //领取并复投
    function claimAndMint(uint256[] calldata a, uint256 trem) external payable {
         require(msg.sender == tx.origin);
        bytes memory bytecode = hex'60a0604052732ab0e9e4ee70fff1fb9d67031e44f6410170d00e600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080516109a86100e5600039600050506109a86000f3fe6080604052600436106100385760003560e01c80634e71d92d14610041578063a0712d681461004b578063e96b5d4b1461007c5761003f565b3661003f57005b005b6100496100ad565b005b61006560048036038101906100609190610709565b610249565b6040516100739291906107e1565b60405180910390f35b61009660048036038101906100919190610709565b6103ec565b6040516100a49291906107e1565b60405180910390f35b3273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461010557600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016101979291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102019190610909565b6000604051808303816000865af19150503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b50505050565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102a557600080fd5b60006040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610331919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161039b9190610909565b6000604051808303816000865af19150503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b50809350819450505050915091565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461044857600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016104da9291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105449190610909565b6000604051808303816000865af19150503d8060008114610581576040519150601f19603f3d011682016040523d82523d6000602084013e610586565b606091505b5050506040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610613919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161067d9190610909565b6000604051808303816000865af19150503d80600081146106ba576040519150601f19603f3d011682016040523d82523d6000602084013e6106bf565b606091505b50809350819450505050915091565b600080fd5b6000819050919050565b6106e6816106d3565b81146106f157600080fd5b50565b600081359050610703816106dd565b92915050565b60006020828403121561071f5761071e6106ce565b5b600061072d848285016106f4565b91505092915050565b60008115159050919050565b61074b81610736565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561078b578082015181840152602081019050610770565b60008484015250505050565b6000601f19601f8301169050919050565b60006107b382610751565b6107bd818561075c565b93506107cd81856020860161076d565b6107d681610797565b840191505092915050565b60006040820190506107f66000830185610742565b818103602083015261080881846107a8565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083c82610811565b9050919050565b61084c81610831565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061088e61088961088484610852565b610869565b61085c565b9050919050565b61089e81610873565b82525050565b60006040820190506108b96000830185610843565b6108c66020830184610895565b9392505050565b600081905092915050565b60006108e382610751565b6108ed81856108cd565b93506108fd81856020860161076d565b80840191505092915050565b600061091582846108d8565b915081905092915050565b610929816106d3565b82525050565b60006020820190506109446000830184610920565b9291505056fe636c61696d4d696e74526577617264416e64536861726528616464726573732c75696e7432353629a26469706673582212207f3b151577281e87387af781719b9fa60a71bb168ead41a07638e62c71245d0864736f6c63430008110033';
        uint256 i = 0;
        bytes memory _salt = '0x01';
        //mint 函数选择器
        bytes4 selector = bytes4(keccak256(bytes("claim()")));
        bytes memory data =  abi.encodeWithSelector(selector);
        bytes4 selector2 = bytes4(keccak256(bytes("mint(uint256)")));
        bytes memory data2 =  abi.encodeWithSelector(selector2, trem);
        for (i; i < a.length; ++i) {
	        bytes32 salt = keccak256(abi.encodePacked(_salt,a[i],msg.sender));
            address proxy = address(uint160(uint(keccak256(abi.encodePacked(
                    hex'ff',
                    address(this),
                    salt,
                    keccak256(bytecode)
                )))));
			assembly {
                let succeeded := call(
                    gas(),
                    proxy,
                    0,
                    add(data, 0x20),
                    mload(data),
                    0,
                    0
                )
			}
            assembly {
                let succeeded := call(
                    gas(),
                    proxy,
                    0,
                    add(data2, 0x20),
                    mload(data2),
                    0,
                    0
                )
			}
        }
    }

    //计算空槽地址
    function mintUseSalt(uint256[] calldata a, uint256 term ) external payable  returns ( bytes32) {
        require(msg.sender == tx.origin);
        bytes memory bytecode = hex'60a0604052732ab0e9e4ee70fff1fb9d67031e44f6410170d00e600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080516109a86100e5600039600050506109a86000f3fe6080604052600436106100385760003560e01c80634e71d92d14610041578063a0712d681461004b578063e96b5d4b1461007c5761003f565b3661003f57005b005b6100496100ad565b005b61006560048036038101906100609190610709565b610249565b6040516100739291906107e1565b60405180910390f35b61009660048036038101906100919190610709565b6103ec565b6040516100a49291906107e1565b60405180910390f35b3273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461010557600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016101979291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102019190610909565b6000604051808303816000865af19150503d806000811461023e576040519150601f19603f3d011682016040523d82523d6000602084013e610243565b606091505b50505050565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102a557600080fd5b60006040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610331919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161039b9190610909565b6000604051808303816000865af19150503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b50809350819450505050915091565b600060603273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461044857600080fd5b600060405180606001604052806028815260200161094b60289139805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646040516024016104da9291906108a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105449190610909565b6000604051808303816000865af19150503d8060008114610581576040519150601f19603f3d011682016040523d82523d6000602084013e610586565b606091505b5050506040518060400160405280601281526020017f636c61696d52616e6b2875696e74323536290000000000000000000000000000815250805190602001209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168185604051602401610613919061092f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161067d9190610909565b6000604051808303816000865af19150503d80600081146106ba576040519150601f19603f3d011682016040523d82523d6000602084013e6106bf565b606091505b50809350819450505050915091565b600080fd5b6000819050919050565b6106e6816106d3565b81146106f157600080fd5b50565b600081359050610703816106dd565b92915050565b60006020828403121561071f5761071e6106ce565b5b600061072d848285016106f4565b91505092915050565b60008115159050919050565b61074b81610736565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561078b578082015181840152602081019050610770565b60008484015250505050565b6000601f19601f8301169050919050565b60006107b382610751565b6107bd818561075c565b93506107cd81856020860161076d565b6107d681610797565b840191505092915050565b60006040820190506107f66000830185610742565b818103602083015261080881846107a8565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083c82610811565b9050919050565b61084c81610831565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061088e61088961088484610852565b610869565b61085c565b9050919050565b61089e81610873565b82525050565b60006040820190506108b96000830185610843565b6108c66020830184610895565b9392505050565b600081905092915050565b60006108e382610751565b6108ed81856108cd565b93506108fd81856020860161076d565b80840191505092915050565b600061091582846108d8565b915081905092915050565b610929816106d3565b82525050565b60006020820190506109446000830184610920565b9291505056fe636c61696d4d696e74526577617264416e64536861726528616464726573732c75696e7432353629a26469706673582212207f3b151577281e87387af781719b9fa60a71bb168ead41a07638e62c71245d0864736f6c63430008110033';
        
        
        //计算地址
        bytes memory _salt =  '0x01';
        uint256 i = 0;
        bytes32 salt;
        //mint 函数选择器
        bytes4 selector = bytes4(keccak256(bytes("mint(uint256)")));
        bytes memory data =  abi.encodeWithSelector(selector, term);

        for (i; i < a.length; ++i) {
            salt = keccak256(abi.encodePacked(_salt,a[i],msg.sender));
            //计算空槽地址
            address proxy = address(uint160(uint256(keccak256(abi.encodePacked(
                    bytes1(0xff),
                    address(this),
                    salt,
                    keccak256(bytecode)
            )))));
            assembly {
                    let succeeded := call(
                        gas(),
                        proxy,
                        0,
                        add(data, 0x20),
                        mload(data),
                        0,
                        0
                    )
			}
        }
        return salt;
    }
    
}