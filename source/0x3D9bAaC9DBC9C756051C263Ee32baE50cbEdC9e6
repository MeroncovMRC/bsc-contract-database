// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CairoCrypto {
    string public name;
    string public symbol;
    uint256 public totalSupply;
    uint8 public decimals;
    address public owner;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }

    constructor() {
        name = "CairoCrypto";
        symbol = "CC";
        decimals = 18;
        totalSupply = 100000000000 * 10**uint256(decimals);
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
        emit Transfer(address(0), owner, totalSupply);
    }

    function transfer(address to, uint256 value) external returns (bool) {
        require(value <= balanceOf[msg.sender], "Insufficient balance");

        uint256 transferFee = calculateTransferFee(value);
        uint256 transferAmount = value - transferFee;

        balanceOf[msg.sender] -= value;
        balanceOf[to] += transferAmount;
        balanceOf[owner] += transferFee;

        emit Transfer(msg.sender, to, transferAmount);
        emit Transfer(msg.sender, owner, transferFee);

        return true;
    }

    function approve(address spender, uint256 value) external returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) external returns (bool) {
        require(value <= balanceOf[from], "Insufficient balance");
        require(value <= allowance[from][msg.sender], "Insufficient allowance");

        uint256 transferFee = calculateTransferFee(value);
        uint256 transferAmount = value - transferFee;

        balanceOf[from] -= value;
        balanceOf[to] += transferAmount;
        balanceOf[owner] += transferFee;
        allowance[from][msg.sender] -= value;

        emit Transfer(from, to, transferAmount);
        emit Transfer(from, owner, transferFee);

        return true;
    }

    function calculateTransferFee(uint256 value) internal pure returns (uint256) {
        return (value * 5) / 100; // 5% transfer fee
    }

    // Additional function for token minting
    function mintTokens(address to, uint256 value) external onlyOwner {
        balanceOf[to] += value;
        totalSupply += value;
        emit Transfer(address(0), to, value);
    }
}