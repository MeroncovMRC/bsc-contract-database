{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"},"Zapper.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./IERC20.sol\";\nimport \"./IUniswapV2Router02.sol\";\n\ninterface IAutoFarm {\n    function deposit(address user, uint256 amount) external;\n}\n\ninterface IMDB {\n    function buyFeeRecipient() external view returns (address);\n    function getOwner() external view returns (address);\n}\n\ncontract Zapper {\n\n    // Tokens\n    address public constant MDB = 0x0557a288A93ed0DF218785F2787dac1cd077F8f3;\n    address public constant MDBP = 0x9f8BB16f49393eeA4331A39B69071759e54e16ea;\n\n    address public constant MDB_BNB_LP = 0xB592BfF35a34EFe9C02Fe917c43F7adD9d48A957;\n    address public constant MDB_MDBP_LP = 0xF73E61FCB92bb2a377fCC13879C0Af3692046EE1;\n\n    // Farms\n    address public mdb_bnb_auto_farm = 0x805Cc5aA1EBeE725250084D2ECcD9473c8bE46A9;\n    address public mdb_mdbp_auto_farm = 0x65545d6eBf5F4245Ca2f9c90468dE38fE88E3672;\n\n    // Router\n    IUniswapV2Router02 public constant router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n    // Swap Path\n    address[] private path = [router.WETH(), MDB];\n\n    uint256 public constant MDB_AFTER_TAX = 8500;\n    uint256 public constant MDBP_AFTER_TAX = 9925;\n    uint256 constant TAX_DENOM = 10000;\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == IMDB(MDB).getOwner(),\n            \u0027Only Owner\u0027\n        );\n        _;\n    }\n\n    function refundDust() external onlyOwner {\n        _refundDust();\n    }\n\n    function withdrawToken(address token) external onlyOwner {\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\n    }\n\n    function setFarms(address bnb, address mdbp) external onlyOwner {\n        mdb_bnb_auto_farm = bnb;\n        mdb_mdbp_auto_farm = mdbp;\n    }\n\n    function zapBNB() external payable {\n\n        // buy MDB\n        _buyTokens(false);\n\n        // pair liquidity\n        _pairLiquidity(false);\n\n        // stake tokens into farm for user\n        _stakeIntoFarm(false);\n\n        // refund dust\n        _refundDust();\n    }\n\n    function zapMDBP() external payable {\n\n        // buy MDB and MDBP\n        _buyTokens(true);\n\n        // pair liquidity\n        _pairLiquidity(true);\n\n        // stake tokens into farm for user\n        _stakeIntoFarm(true);\n\n        // refund dust\n        _refundDust();\n    }\n\n    function _stakeIntoFarm(bool mdbp) internal {\n\n        if (mdbp) {\n\n            // approve farm for balance\n            uint balance = IERC20(MDB_MDBP_LP).balanceOf(address(this));\n            IERC20(MDB_MDBP_LP).approve(mdb_mdbp_auto_farm, balance);\n\n            // deposit into farm\n            IAutoFarm(mdb_mdbp_auto_farm).deposit(msg.sender, balance);\n\n        } else {\n\n            // approve farm for balance\n            uint balance = IERC20(MDB_BNB_LP).balanceOf(address(this));\n            IERC20(MDB_BNB_LP).approve(mdb_bnb_auto_farm, balance);\n\n            // deposit into farm\n            IAutoFarm(mdb_bnb_auto_farm).deposit(msg.sender, balance);\n\n        }\n\n    }\n\n    function _pairLiquidity(bool mdbp) internal {\n\n        // swap half mdb balance into bnb\n        uint256 balance = IERC20(MDB).balanceOf(address(this));\n\n        // approve token for router\n        IERC20(MDB).approve(address(router), balance);\n\n        if (mdbp) {\n            \n            // approve MDBP for router\n            uint256 mdbpBalance = IERC20(MDBP).balanceOf(address(this));\n            IERC20(MDBP).approve(address(router), mdbpBalance);\n\n            // add liquidity\n            router.addLiquidity(MDB, MDBP, balance, mdbpBalance, 1, 1, address(this), block.timestamp + 100);\n\n        } else {\n            // add liquidity\n            router.addLiquidityETH{value: address(this).balance}(\n                MDB, balance, 1, 1, address(this), block.timestamp + 100\n            );\n        }\n    }\n\n    function _buyTokens(bool mdbp) internal {\n\n        uint256 numerator = mdbp ? MDBP_AFTER_TAX : TAX_DENOM;\n        uint256 denom = numerator + MDB_AFTER_TAX;\n\n        // buy MDB with a portion of the bnb\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ( address(this).balance * numerator ) / denom}(0, path, address(this), block.timestamp);\n\n        // send fee to MDB buy receiver\n        uint256 buyFee = ( IERC20(MDB).balanceOf(address(this)) * (TAX_DENOM - MDB_AFTER_TAX) ) / TAX_DENOM;\n        if (buyFee \u003e 0) {\n            IERC20(MDB).transfer(\n                IMDB(MDB).buyFeeRecipient(),\n                buyFee\n            );\n        }\n\n        // buy MDBP if applicable\n        if (mdbp) {\n            (bool s,) = payable(MDBP).call{value: address(this).balance}(\"\");\n            require(s);\n        }\n    }\n\n    function _refundDust() internal {\n\n        // refund MDBP dust if any\n        uint mdbpdust = IERC20(MDBP).balanceOf(address(this));\n        if (mdbpdust \u003e 0) {\n            IERC20(MDBP).transfer(msg.sender, mdbpdust);\n        }\n\n        // refund MDB dust if any\n        uint mdbdust = IERC20(MDB).balanceOf(address(this));\n        if (mdbdust \u003e 0) {\n            IERC20(MDB).transfer(msg.sender, mdbdust);\n        }\n\n        // refund BNB dust if any\n        uint dust = address(this).balance;\n        if (dust \u003e 0) {\n            (bool s,) = payable(msg.sender).call{value: dust}(\"\");\n            require(s);\n        }\n    }\n\n    receive() external payable {}\n\n}"}}