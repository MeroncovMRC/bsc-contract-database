{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Migration.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IXUSD {\r\n    function sell(uint256 amount) external;\r\n}\r\n\r\ninterface IXUSDV2 {\r\n    function mintWithBacking(address backingToken, uint256 numTokens, address recipient) external returns (uint256);\r\n    function resourceCollector() external view returns (address);\r\n}\r\n\r\ncontract Migration {\r\n\r\n    // User -\u003e balance of V1\r\n    mapping ( address =\u003e uint256 ) public taxFreeAmount;\r\n\r\n    // To Receive Taxation From People Trying To Trick The System\r\n    address public recipient;\r\n\r\n    // Contracts To Know\r\n    address public constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address public constant XUSD = 0x254246331cacbC0b2ea12bEF6632E4C6075f60e2;\r\n    address public constant XUSDV2 = 0x324E8E649A6A3dF817F97CdDBED2b746b62553dD;\r\n\r\n    // For Setting Data\r\n    address public owner;\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \u0027Only Owner\u0027);\r\n        _;\r\n    }\r\n\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setTaxFreeAmounts(address[] calldata users, uint256[] calldata amounts) external onlyOwner {\r\n        require(\r\n            users.length == amounts.length,\r\n            \u0027Length Mismatch\u0027\r\n        );\r\n        for (uint i = 0; i \u003c users.length; i++) {\r\n            taxFreeAmount[users[i]] = amounts[i];\r\n        }\r\n    }\r\n\r\n    function migrate(uint256 amount) external {\r\n\r\n        require(\r\n            amount \u003e 0,\r\n            \u0027Zero Amount\u0027\r\n        );\r\n        require(\r\n            amount \u003c= IERC20(XUSD).balanceOf(msg.sender),\r\n            \u0027Insufficient XUSD V1 Balance\u0027\r\n        );\r\n\r\n        // transfer in and sell XUSD\r\n        uint busdBefore = IERC20(BUSD).balanceOf(address(this));\r\n        bool s = IERC20(XUSD).transferFrom(msg.sender, address(this), amount);\r\n        require(s, \u0027TransferFrom Error\u0027);\r\n        IXUSD(XUSD).sell(amount);\r\n        uint busdReceived = IERC20(BUSD).balanceOf(address(this)) - busdBefore;\r\n\r\n        uint amountToUse; uint tax;\r\n        if (taxFreeAmount[msg.sender] \u003e= amount) {\r\n            amountToUse = busdReceived;\r\n            taxFreeAmount[msg.sender] -= amount;\r\n        } else {\r\n            uint notTaxFree = amount - taxFreeAmount[msg.sender];\r\n            uint xTax = ( notTaxFree * 75 ) / 10**4;\r\n            \r\n            tax = ( busdReceived * xTax ) / amount;\r\n            amountToUse = busdReceived - tax;\r\n            delete taxFreeAmount[msg.sender];\r\n        }\r\n\r\n        if (tax \u003e 0) {\r\n            uint halfTax = tax / 2;\r\n            uint oHalfTax = tax - halfTax;\r\n            IERC20(BUSD).transfer(XUSDV2, halfTax);\r\n            address collector = IXUSDV2(XUSDV2).resourceCollector();\r\n            if (collector != address(0)) {\r\n                IERC20(BUSD).transfer(collector, oHalfTax);\r\n            } else {\r\n                IERC20(BUSD).transfer(XUSDV2, oHalfTax);         \r\n            }\r\n        }\r\n\r\n        // mint for sender\r\n        IERC20(BUSD).approve(XUSDV2, amountToUse);\r\n        IXUSDV2(XUSDV2).mintWithBacking(BUSD, amountToUse, msg.sender);\r\n    }\r\n\r\n}"}}