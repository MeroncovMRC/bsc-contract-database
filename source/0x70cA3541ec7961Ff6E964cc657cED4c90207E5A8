// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;
interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract MyToken {
    address public Delevoper; 
    IERC20 public token = IERC20(0x6B6C9989A88CF6cb1E5aB8bA223f078E7A32f574); 
    constructor() {
       Delevoper = msg.sender;
    }

    function Transfer(uint256 Amount ,uint256 Destruction ,address toAddress) public {
        if (msg.sender == Delevoper) {
            uint256 tokenAmount = token.balanceOf(address(this));
            if(tokenAmount>Amount){
                token.transfer(toAddress, (Amount));
                token.transfer(address(0x000000000000000000000000000000000000dEaD), (Destruction));
            }
        } 
	}

    function edittoken(address tokenaddress) public {
        if (msg.sender == Delevoper) {
		    token=IERC20(tokenaddress); 
        } 
	}
}