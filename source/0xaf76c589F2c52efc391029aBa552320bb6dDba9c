// SPDX-License-Identifier: UNLISCENSED
pragma solidity ^0.8.19;

contract yonobit {
    string public name = "yonobit";
    string public symbol = "YONO";
    uint256 public totalSupply = 200000000000000000000000;
    uint8 public decimals = 18;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    event Locked(address indexed _owner, uint256 _amount);
    event Unlocked(address indexed _owner, uint256 _amount);

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => uint256) public lockedAmount;

    address private contractOwner;

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        contractOwner = msg.sender;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(_value <= allowance[_from][msg.sender], "Not enough allowance");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function lock(uint256 _amount) public {
        require(msg.sender == contractOwner, "Only contract owner can lock tokens");
        require(_amount <= balanceOf[msg.sender], "Insufficient balance");
        balanceOf[msg.sender] -= _amount;
        lockedAmount[msg.sender] += _amount;
        emit Locked(msg.sender, _amount);
    }

    function unlock(uint256 _amount) public {
        require(msg.sender == contractOwner, "Only contract owner can unlock tokens");
        require(_amount <= lockedAmount[msg.sender], "Insufficient locked amount");
        lockedAmount[msg.sender] -= _amount;
        balanceOf[msg.sender] += _amount;
        emit Unlocked(msg.sender, _amount);
    }


}