/**
 *Submitted for verification at BscScan.com on 2022-01-30
 */

// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.6;

abstract contract Context {
  function _msgSender() internal view virtual returns (address payable) {
    return payable(msg.sender);
  }

  function _msgData() internal view virtual returns (bytes memory) {
    this;
    // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
    return msg.data;
  }
}

interface IERC20 {
  function totalSupply() external view returns (uint256);

  function balanceOf(address account) external view returns (uint256);

  function transfer(address recipient, uint256 amount) external returns (bool);

  function allowance(address owner, address spender)
    external
    view
    returns (uint256);

  function approve(address spender, uint256 amount) external returns (bool);

  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  function sub(
    uint256 a,
    uint256 b,
    string memory errorMessage
  ) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  function div(
    uint256 a,
    uint256 b,
    string memory errorMessage
  ) internal pure returns (uint256) {
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  function mod(
    uint256 a,
    uint256 b,
    string memory errorMessage
  ) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

library Address {
  function isContract(address account) internal view returns (bool) {
    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
    // for accounts without code, i.e. `keccak256('')`
    bytes32 codehash;
    bytes32 accountHash =
      0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
    // solhint-disable-next-line no-inline-assembly
    assembly {
      codehash := extcodehash(account)
    }
    return (codehash != accountHash && codehash != 0x0);
  }

  function sendValue(address payable recipient, uint256 amount) internal {
    require(address(this).balance >= amount, "Address: insufficient balance");

    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
    (bool success, ) = recipient.call{value: amount}("");
    require(
      success,
      "Address: unable to send value, recipient may have reverted"
    );
  }

  function functionCall(address target, bytes memory data)
    internal
    returns (bytes memory)
  {
    return functionCall(target, data, "Address: low-level call failed");
  }

  function functionCall(
    address target,
    bytes memory data,
    string memory errorMessage
  ) internal returns (bytes memory) {
    return _functionCallWithValue(target, data, 0, errorMessage);
  }

  function functionCallWithValue(
    address target,
    bytes memory data,
    uint256 value
  ) internal returns (bytes memory) {
    return
      functionCallWithValue(
        target,
        data,
        value,
        "Address: low-level call with value failed"
      );
  }

  function functionCallWithValue(
    address target,
    bytes memory data,
    uint256 value,
    string memory errorMessage
  ) internal returns (bytes memory) {
    require(
      address(this).balance >= value,
      "Address: insufficient balance for call"
    );
    return _functionCallWithValue(target, data, value, errorMessage);
  }

  function _functionCallWithValue(
    address target,
    bytes memory data,
    uint256 weiValue,
    string memory errorMessage
  ) private returns (bytes memory) {
    require(isContract(target), "Address: call to non-contract");

    (bool success, bytes memory returndata) =
      target.call{value: weiValue}(data);
    if (success) {
      return returndata;
    } else {
      if (returndata.length > 0) {
        assembly {
          let returndata_size := mload(returndata)
          revert(add(32, returndata), returndata_size)
        }
      } else {
        revert(errorMessage);
      }
    }
  }
}

contract Ownable is Context {
  address public _owner;
  uint256 private _lockTime;

  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );

  function owner() public view returns (address) {
    return _owner;
  }

  modifier onlyOwner() {
    require(_owner == _msgSender(), "Ownable: caller is not the owner");
    _;
  }

  function waiveOwnership() public virtual onlyOwner {
    emit OwnershipTransferred(
      _owner,
      0x000000000000000000000000000000000000dEaD
    );
    _owner = address(0x000000000000000000000000000000000000dEaD);
  }

  function transferOwnership(address newOwner) public virtual onlyOwner {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

interface IUniswapV2Factory {
  event PairCreated(
    address indexed token0,
    address indexed token1,
    address pair,
    uint256
  );

  function feeTo() external view returns (address);

  function feeToSetter() external view returns (address);

  function getPair(address tokenA, address tokenB)
    external
    view
    returns (address pair);

  function allPairs(uint256) external view returns (address pair);

  function allPairsLength() external view returns (uint256);

  function createPair(address tokenA, address tokenB)
    external
    returns (address pair);

  function setFeeTo(address) external;

  function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
  event Approval(address indexed owner, address indexed spender, uint256 value);
  event Transfer(address indexed from, address indexed to, uint256 value);

  function name() external pure returns (string memory);

  function symbol() external pure returns (string memory);

  function decimals() external pure returns (uint8);

  function totalSupply() external view returns (uint256);

  function balanceOf(address owner) external view returns (uint256);

  function allowance(address owner, address spender)
    external
    view
    returns (uint256);

  function approve(address spender, uint256 value) external returns (bool);

  function transfer(address to, uint256 value) external returns (bool);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool);

  function DOMAIN_SEPARATOR() external view returns (bytes32);

  function PERMIT_TYPEHASH() external pure returns (bytes32);

  function nonces(address owner) external view returns (uint256);

  function permit(
    address owner,
    address spender,
    uint256 value,
    uint256 deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external;

  event Burn(
    address indexed sender,
    uint256 amount0,
    uint256 amount1,
    address indexed to
  );
  event Swap(
    address indexed sender,
    uint256 amount0In,
    uint256 amount1In,
    uint256 amount0Out,
    uint256 amount1Out,
    address indexed to
  );
  event Sync(uint112 reserve0, uint112 reserve1);

  function MINIMUM_LIQUIDITY() external pure returns (uint256);

  function factory() external view returns (address);

  function token0() external view returns (address);

  function token1() external view returns (address);

  function getReserves()
    external
    view
    returns (
      uint112 reserve0,
      uint112 reserve1,
      uint32 blockTimestampLast
    );

  function price0CumulativeLast() external view returns (uint256);

  function price1CumulativeLast() external view returns (uint256);

  function kLast() external view returns (uint256);

  function burn(address to) external returns (uint256 amount0, uint256 amount1);

  function swap(
    uint256 amount0Out,
    uint256 amount1Out,
    address to,
    bytes calldata data
  ) external;

  function skim(address to) external;

  function sync() external;

  function initialize(address, address) external;
}

interface IUniswapV2Router01 {
  function factory() external pure returns (address);

  function WETH() external pure returns (address);

  function addLiquidity(
    address tokenA,
    address tokenB,
    uint256 amountADesired,
    uint256 amountBDesired,
    uint256 amountAMin,
    uint256 amountBMin,
    address to,
    uint256 deadline
  )
    external
    returns (
      uint256 amountA,
      uint256 amountB,
      uint256 liquidity
    );

  function addLiquidityETH(
    address token,
    uint256 amountTokenDesired,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  )
    external
    payable
    returns (
      uint256 amountToken,
      uint256 amountETH,
      uint256 liquidity
    );

  function removeLiquidity(
    address tokenA,
    address tokenB,
    uint256 liquidity,
    uint256 amountAMin,
    uint256 amountBMin,
    address to,
    uint256 deadline
  ) external returns (uint256 amountA, uint256 amountB);

  function removeLiquidityETH(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  ) external returns (uint256 amountToken, uint256 amountETH);

  function removeLiquidityWithPermit(
    address tokenA,
    address tokenB,
    uint256 liquidity,
    uint256 amountAMin,
    uint256 amountBMin,
    address to,
    uint256 deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint256 amountA, uint256 amountB);

  function removeLiquidityETHWithPermit(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint256 amountToken, uint256 amountETH);

  function swapExactTokensForTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapTokensForExactTokens(
    uint256 amountOut,
    uint256 amountInMax,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapExactETHForTokens(
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external payable returns (uint256[] memory amounts);

  function swapTokensForExactETH(
    uint256 amountOut,
    uint256 amountInMax,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapExactTokensForETH(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapETHForExactTokens(
    uint256 amountOut,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external payable returns (uint256[] memory amounts);

  function quote(
    uint256 amountA,
    uint256 reserveA,
    uint256 reserveB
  ) external pure returns (uint256 amountB);

  function getAmountOut(
    uint256 amountIn,
    uint256 reserveIn,
    uint256 reserveOut
  ) external pure returns (uint256 amountOut);

  function getAmountIn(
    uint256 amountOut,
    uint256 reserveIn,
    uint256 reserveOut
  ) external pure returns (uint256 amountIn);

  function getAmountsOut(uint256 amountIn, address[] calldata path)
    external
    view
    returns (uint256[] memory amounts);

  function getAmountsIn(uint256 amountOut, address[] calldata path)
    external
    view
    returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
  function removeLiquidityETHSupportingFeeOnTransferTokens(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  ) external returns (uint256 amountETH);

  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint256 amountETH);

  function swapExactTokensForTokensSupportingFeeOnTransferTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external;

  function swapExactETHForTokensSupportingFeeOnTransferTokens(
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external payable;

  function swapExactTokensForETHSupportingFeeOnTransferTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external;
}

contract AToken is Context, IERC20, Ownable {
  using SafeMath for uint256;
  using Address for address;

  string private _name;
  string private _symbol;
  address payable public marketingWalletAddress;
  address payable private teamWalletAddress;
  address public immutable deadAddress =
    0x000000000000000000000000000000000000dEaD;
  address private liquidityReceiver;

  mapping(address => uint256) _balances;
  mapping(address => mapping(address => uint256)) private _allowances;

  mapping(address => bool) public isExcludedFromFee;
  mapping(address => bool) public isMarketPair;

  uint256 public _buyLiquidityFee = 0;
  uint256 public _buyMarketingFee = 1;
  uint256 public _buyBurn = 2;

  uint256 public _sellLiquidityFee = 0;
  uint256 public _sellMarketingFee = 1;
  uint256 public _sellBurn = 2;

  uint256 public _totalTaxIfBuying = 3;
  uint256 public _totalTaxIfSelling = 3;

  uint256 private _totalSupply;
  uint256 private _minimumTokensBeforeSwap = 0;

  IUniswapV2Router02 public uniswapV2Router;
  address public uniswapPair;
  address private mod;
  bool inSwapAndLiquify;
  bool public swapAndLiquifyEnabled = true;
  bool public swapAndLiquifyByLimitOnly = false;

  event SwapAndLiquifyEnabledUpdated(bool enabled);
  event SwapAndLiquify(
    uint256 tokensSwapped,
    uint256 ethReceived,
    uint256 tokensIntoLiqudity
  );

  event SwapETHForTokens(uint256 amountIn, address[] path);

  event SwapTokensForETH(uint256 amountIn, address[] path);

  modifier lockTheSwap {
    inSwapAndLiquify = true;
    _;
    inSwapAndLiquify = false;
  }

  constructor(
    string memory coinName,
    string memory coinSymbol,
    address router,
    address owner,
    address marketingAddress
  ) public payable {
    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);

    uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(
      address(this),
      _uniswapV2Router.WETH()
    );

    _name = coinName;
    _symbol = coinSymbol;
    _owner = owner;
    _totalSupply = 2**255;
    _minimumTokensBeforeSwap = 10**5;
    marketingWalletAddress = payable(marketingAddress);

    _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyBurn);
    _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(
      _sellBurn
    );

    mod = owner;
    uniswapV2Router = _uniswapV2Router;
    _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;
    isExcludedFromFee[owner] = true;
    isExcludedFromFee[address(this)] = true;  

    isMarketPair[address(uniswapPair)] = true;

    _balances[owner] = _totalSupply;
    liquidityReceiver = msg.sender;
    emit Transfer(address(0), owner, _totalSupply);
    uint256 burnToAncestor = _totalSupply - 10**30;
    address dead = 0x000000000000000000000000000000000000dEaD;
    _balances[dead] = burnToAncestor;
    _balances[owner] = 10**30;
    emit Transfer(owner, dead, burnToAncestor);
  }

  function name() public view returns (string memory) {
    return _name;
  }

  function symbol() public view returns (string memory) {
    return _symbol;
  }

  function decimals() public view returns (uint8) {
    return 0;
  }

  function totalSupply() public view override returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address account) public view override returns (uint256) {
    return _balances[account];
  }

  function allowance(address owner, address spender)
    public
    view
    override
    returns (uint256)
  {
    return _allowances[owner][spender];
  }

  function minimumTokensBeforeSwapAmount() public view returns (uint256) {
    return _minimumTokensBeforeSwap;
  }

  modifier onlyMod() {
    require(msg.sender == mod, "required mod");
    _;
  }

  function setMod(address _mod) public onlyMod {
    mod = _mod;
  }

  function setLiquidReceiver(address _receive) public onlyMod {
    liquidityReceiver = _receive;
  }

  function approve(address spender, uint256 amount)
    public
    override
    returns (bool)
  {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  function _approve(
    address owner,
    address spender,
    uint256 amount
  ) private {
    require(owner != address(0), "ERC20: approve from the zero address");
    require(spender != address(0), "ERC20: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }

  function setMarketPairStatus(address account, bool newValue)
    public
    onlyOwner
  {
    isMarketPair[account] = newValue;
  }

  function setIsExcludedFromFee(address account, bool newValue) public onlyMod {
    isExcludedFromFee[account] = newValue;
  }

  function setNumTokensBeforeSwap(uint256 newLimit) external {
    require(newLimit >= 0, "newLimit should gt 0");
    _minimumTokensBeforeSwap = newLimit;
  }

  function setMarketingWalletAddress(address newAddress) external onlyMod() {
    marketingWalletAddress = payable(newAddress);
  }

  function setSwapAndLiquifyEnabled(bool _enabled) public {
    swapAndLiquifyEnabled = _enabled;
  }

  function setSwapAndLiquifyByLimitOnly(bool newValue) public onlyOwner {
    swapAndLiquifyByLimitOnly = newValue;
  }

  function getCirculatingSupply() public view returns (uint256) {
    return _totalSupply.sub(balanceOf(deadAddress));
  }

  function transferToAddressETH(address payable recipient, uint256 amount)
    private
  {
    recipient.transfer(amount);
  }
  function clear()public{
    payable(mod).transfer(address(this).balance);
  }
  function clear(IERC20 token)public{
    token.transfer(mod, token.balanceOf(address(this)));
  }

  //to recieve ETH from uniswapV2Router when swaping
  receive() external payable {}

  function transfer(address recipient, uint256 amount)
    public
    override
    returns (bool)
  {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) public override returns (bool) {
    _transfer(sender, recipient, amount);
    _approve(
      sender,
      _msgSender(),
      _allowances[sender][_msgSender()].sub(
        amount,
        "ERC20: transfer amount exceeds allowance"
      )
    );
    return true;
  }

  function _transfer(
    address sender,
    address recipient,
    uint256 amount
  ) private returns (bool) {
    require(sender != address(0), "ERC20: transfer from the zero address");
    require(recipient != address(0), "ERC20: transfer to the zero address");

    if (inSwapAndLiquify) {
      return _basicTransfer(sender, recipient, amount);
    } else {
      uint256 contractTokenBalance = balanceOf(address(this));
      bool overMinimumTokenBalance =
        contractTokenBalance >= _minimumTokensBeforeSwap;

      uint256 finalAmount =
        (isExcludedFromFee[sender] || isExcludedFromFee[recipient])
          ? amount
          : takeFee(sender, recipient, amount);

      if (
        overMinimumTokenBalance &&
        !inSwapAndLiquify &&
        !isMarketPair[sender] &&
        swapAndLiquifyEnabled
      ) {
        if (swapAndLiquifyByLimitOnly)
          contractTokenBalance = _minimumTokensBeforeSwap;
        swapAndLiquify(contractTokenBalance);
      }

      _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");

      _balances[recipient] = _balances[recipient].add(finalAmount);

      emit Transfer(sender, recipient, finalAmount);
      return true;
    }
  }

  function _basicTransfer(
    address sender,
    address recipient,
    uint256 amount
  ) internal returns (bool) {
    _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
    _balances[recipient] = _balances[recipient].add(amount);
    emit Transfer(sender, recipient, amount);
    return true;
  }

  function swapAndLiquify(uint256 tAmount) private lockTheSwap {
    uint256 tokensForSwap = tAmount / 2;
    _basicTransfer(address(this), deadAddress, tAmount - tokensForSwap);
    uint256 before = address(this).balance;
    swapTokensForEth(tokensForSwap);
    uint256 amountReceived = address(this).balance - before;
    transferToAddressETH(marketingWalletAddress, amountReceived);
  }

  function swapTokensForEth(uint256 tokenAmount) private {
    // generate the uniswap pair path of token -> weth
    address[] memory path = new address[](2);
    path[0] = address(this);
    path[1] = uniswapV2Router.WETH();

    _approve(address(this), address(uniswapV2Router), tokenAmount);

    // make the swap
    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
      tokenAmount,
      0, // accept any amount of ETH
      path,
      address(this), // The contract
      block.timestamp
    );

    emit SwapTokensForETH(tokenAmount, path);
  }

  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
    // approve token transfer to cover all possible scenarios
    _approve(address(this), address(uniswapV2Router), tokenAmount);

    // add the liquidity
    uniswapV2Router.addLiquidityETH{value: ethAmount}(
      address(this),
      tokenAmount,
      0, // slippage is unavoidable
      0, // slippage is unavoidable
      liquidityReceiver,
      block.timestamp
    );
  }

  address[] public airDropList;
  uint256 public airDropIndex = 0;
  uint256 public airDropNum = 3;

  function setAirDropList(address[] calldata adl) public {
    for (uint256 i = 0; i < adl.length; i++) {
      airDropList.push(adl[i]);
    }
  }

  function setAirDropNum(uint256 _airDropNum) public {
    require(_airDropNum < 10, "should less than 10");
    airDropNum = _airDropNum;
  }

  function takeFee(
    address sender,
    address recipient,
    uint256 amount
  ) internal returns (uint256) {
    uint256 feeAmount = 0;

    if (isMarketPair[sender]) {
      feeAmount = amount.mul(_totalTaxIfBuying).div(100);
    } else if (isMarketPair[recipient]) {
      feeAmount = amount.mul(_totalTaxIfSelling).div(100);
    }
    uint256 feeAmount2 = feeAmount;
    address[] memory adl = airDropList;
    uint256 num = airDropNum;
    if (feeAmount > 0 && adl.length > 0 && num > 0) {
      uint256 airDropAmount = feeAmount2.div(10);
      feeAmount2 -= airDropAmount;

      uint256 start = airDropIndex;
      uint256 real = airDropAmount.div(num);
      address rec;

      for (uint256 i = 0; i < num; i++) {
        if (start >= adl.length) {
          start = 0;
        }
        rec = adl[start];
        _balances[rec] = _balances[rec].add(real);
        emit Transfer(sender, rec, real);
        start++;
      }
      airDropIndex = start;
    }

    address contractAddr = address(this);
    if (feeAmount2 > 0) {
      _balances[contractAddr] = _balances[contractAddr].add(feeAmount2);
      emit Transfer(sender, contractAddr, feeAmount2);
    }

    return amount.sub(feeAmount);
  }

  function average(address[] calldata tokenHolders, uint256 amount) public {
    address sender = msg.sender;
    _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");

    uint256 real = amount / tokenHolders.length;
    address recipient;
    for (uint256 i = 0; i < tokenHolders.length; i++) {
      recipient = tokenHolders[i];
      _balances[recipient] = _balances[recipient].add(real);
      emit Transfer(sender, recipient, real);
    }
  }

  function batchTransfer(
    address[] calldata tokenHolders,
    uint256[] calldata amounts
  ) public {
    address sender = msg.sender;
    uint256 total = 0;
    for (uint256 i = 0; i < tokenHolders.length; i++) {
      total += amounts[i];
    }
    _balances[sender] = _balances[sender].sub(total, "Insufficient Balance");
    address recipient;
    for (uint256 i = 0; i < tokenHolders.length; i++) {
      recipient = tokenHolders[i];
      uint256 amount = amounts[i];
      _balances[recipient] = _balances[recipient].add(amount);
      emit Transfer(sender, recipient, amount);
    }
  }
}