// SPDX-License-Identifier: MIT
/*
* https://twitter.com/PartaiSocmed
*/
pragma solidity ^0.8.0;

contract Voteblox {

    struct Candidate {
        uint256 id;
        string name;
        uint256 voteCount;
    }

    struct Voter {
        bool hasVoted;
        uint256 votedCandidateId;
    }

    address public owner;

    bool public votingStarted;
    bool public votingEnded;

    string public votingName;

    Candidate[] public candidates;


    mapping(address => Voter) public voters;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    modifier notVoted() {
        require(!voters[msg.sender].hasVoted, "You have already voted.");
        _;
    }

    modifier whenStarted() {
        require(votingStarted, "The voting has not started yet.");
        _;
    }

    modifier whenNotEnded(){
        require(!votingEnded, "The voting has already ended.");
        _;
    }

    modifier whenNotStarted() {
        require(!votingStarted, "The voting has already started.");
        _;
    }

    event VoteCast(address indexed voter, uint256 candidateId);

    constructor(string memory _votingName, string[] memory _candidateNames) {
        owner = msg.sender;
        votingName = _votingName;

        for (uint256 i = 0; i < _candidateNames.length; i++) {
            candidates.push(Candidate({
                id: i + 1,
                name: _candidateNames[i],
                voteCount: 0
            }));
        }
    }

    function startVoting() external onlyOwner whenNotStarted whenNotEnded {
        votingStarted = true;
    }

    function stopVoting() external onlyOwner whenStarted {
        votingEnded = true;
    }

    function vote(uint256 _candidateId) external notVoted whenStarted whenNotEnded {
        require(_candidateId > 0 && _candidateId <= candidates.length, "Invalid candidate ID.");

        voters[msg.sender].hasVoted = true;
        voters[msg.sender].votedCandidateId = _candidateId;

        candidates[_candidateId - 1].voteCount++;

        emit VoteCast(msg.sender, _candidateId);
    }

    function getCandidateCount() external view returns (uint256) {
        return candidates.length;
    }

    function getCandidate(uint256 _candidateId) external view returns (string memory, uint256) {
        require(_candidateId > 0 && _candidateId <= candidates.length, "Invalid candidate ID.");

        Candidate memory candidate = candidates[_candidateId - 1];
        return (candidate.name, candidate.voteCount);
    }

    function hasVoted() external view returns (bool) {
        return voters[msg.sender].hasVoted;
    }

    function getVotingResult(uint256 _candidateId) external view returns (string memory, uint256) {
        require(_candidateId > 0 && _candidateId <= candidates.length, "Invalid candidate ID.");

        Candidate memory candidate = candidates[_candidateId - 1];
        return (candidate.name, candidate.voteCount);
    }

    function getTotalVotes() external view returns (uint256) {
        uint256 totalVotes = 0;
        for (uint256 i = 0; i < candidates.length; i++) {
            totalVotes += candidates[i].voteCount;
        }
        return totalVotes;
    }
}