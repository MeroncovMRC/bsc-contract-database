pragma solidity >=0.4.22 <0.9.0;

interface IERC20 {
   
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _setOwner(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
library SafeMath {
 
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}
library Math {
    function min(uint x, uint y) internal pure returns (uint z) {
        z = x < y ? x : y;
    }

    function sqrt(uint y) internal pure returns (uint z) {
        if (y > 3) {
            z = y;
            uint x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}

interface ISwapPair {
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function totalSupply() external view returns (uint);
    function kLast() external view returns (uint);
}

interface IFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function feeTo() external view returns (address);
}
interface PancakeRouter{
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract TokenDistributor {
    constructor (address token) {
        IERC20(token).approve(msg.sender, uint(~uint256(0)));
    }
}


contract TY is IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;                      
    mapping(address => mapping(address => uint256)) private _allowances;    
    mapping (address => bool) public isExcludedFromFee;           
    mapping(address=>bool) public pair; 

    string private _name = 'TY';
    string private _symbol = 'TY';
    uint8 private _decimals =18;
    uint256 private _tTotal = 50000 * 10 **18;
    uint256 public constant MAX = type(uint256).max;

    uint256 public swapBurnFee = 1; 
    uint256 public swapLpFee = 1;   
    uint256 public swapInvestFee = 2;   
    uint256 public swapShareFee = 2;    
    uint256 public numTokensSellToAddToLiquidity;  
    uint256 public activeAmount;
    uint256 public indexNonce=50;
    uint256 public openExchange; 
    uint256 public minKillAmount;
    uint256 public lastAutoAddLp; 

    address public idoContract; 
    address public market; 
    address public rewards;
    address public autoLiquidityto;
    address public autoLpsAddress;

    address public firstLper;
    address public dev;
    address public usdt = 0x55d398326f99059fF775485246999027B3197955;
    address public pancakeV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address public pancakeFactory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
    address public burnAddress = address(0xDead);
    TokenDistributor public _tokenDistributor;

    bool private contractDeployed;
    bool private projectStart;
    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled=true;
    bool public interSell;
    bool public interAddLp;
    bool public lpFree = true;
    bool public autoLps;

    address public defaultAddress;
    mapping(address => address) public userTop; 
    mapping(address => bool) public isBind; 
    mapping(address => uint256) public userBindTime;
    mapping(address => address[])public userInviteAmount;
    mapping(address => address[]) public userActiveAmount;
    mapping(address => address ) public toTeamReward;
    mapping(address => uint256) public userActiveIndex;
    mapping(address => uint256) public userBuyOrSell;
    mapping(address => bool) public blackList;

    event UserBind(address indexed owner, address indexed invite, uint256 time);
    constructor (
    ){
        require(!contractDeployed);
        isExcludedFromFee[address(this)] =true;
        _balances[address(this)] = _tTotal;
        emit Transfer(address(0), address(this), _tTotal);
        _tokenDistributor = new TokenDistributor(usdt);
        interSell=true;
        interAddLp=true;
        numTokensSellToAddToLiquidity = 50* 10 ** 18;
        activeAmount = 1 * 10 **18;
        minKillAmount = 500 * 10**18;
        IFactory(pancakeFactory).createPair(usdt,address(this));
        transferOwnership(tx.origin);
        contractDeployed =true;
    }  

    modifier lockTheSwap {
        require(!inSwapAndLiquify, "inSwapAndLiquify locked");
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    function startProject(address _ido,address _market,address _rewards, address _firstLp,address _autoLiquidityto,address _autoLpsAddress, address _dev,address _defaultAddress) public onlyOwner{
        require(contractDeployed);
        require(!projectStart,'Start !');
        idoContract =_ido;
        market =_market;
        rewards =_rewards;
        firstLper =_firstLp;
        dev=_dev;
        autoLiquidityto =_autoLiquidityto;
        defaultAddress = _defaultAddress;
        autoLpsAddress=_autoLpsAddress;
        isExcludedFromFee[idoContract] =true;
        isExcludedFromFee[market] =true;
        isExcludedFromFee[rewards] =true;
        isExcludedFromFee[firstLper] =true;
        isExcludedFromFee[autoLiquidityto]=true;
        isExcludedFromFee[autoLpsAddress]=true;
        IERC20(address(this)).transfer(idoContract,19999*10**18);  
        IERC20(address(this)).transfer(market,20000*10**18);       
        IERC20(address(this)).transfer(rewards,10000*10**18);    
        IERC20(address(this)).transfer(firstLper,1*10**18);  
        require(balanceOf(address(this))==0,'Init Error');
        isBind[defaultAddress] =true;
        userTop[defaultAddress] = defaultAddress;
        projectStart=true;
    }
    
    function refundToken(address _otherToken) public {
        require(msg.sender == dev,'DEV');
        require(_otherToken != address(this),'Other Token');
        uint256 bal = IERC20(_otherToken).balanceOf(address(this));
        require(bal>0,'Null');
        IERC20(_otherToken).transfer(msg.sender, bal);
    }

    function refundBNB() public {
        require(msg.sender == dev,'DEV');
        payable(msg.sender).transfer(address(this).balance);
    }
    receive() external payable {}

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {
        for(uint256 i = 0; i < accounts.length; i++) {
            isExcludedFromFee[accounts[i]] = excluded;
        }
    }

    function setNumTokensSellToAddToLiquidity(uint256 _amount) public onlyOwner{
        numTokensSellToAddToLiquidity = _amount;
    }

    function setSwapAndLiquifyEnabled(bool _state) public onlyOwner{
        require(swapAndLiquifyEnabled != _state,'same');
        swapAndLiquifyEnabled = _state;
    }

    function setInterSell(bool _state) public onlyOwner{
        require(interSell != _state,'same');
        interSell = _state;
    }

    function setInterAddLp(bool _state) public onlyOwner{
        require(interAddLp != _state,'same');
        interAddLp = _state;
    }

    function setActiveAmount(uint256 _activeAmount) public onlyOwner{
        activeAmount = _activeAmount;
    }
    function setIndexNonce(uint256 _indexNonce) public onlyOwner{
        indexNonce=_indexNonce;
    }
    function startExchange()public onlyOwner{
        require(openExchange ==0,'Exchanged');
        openExchange = block.number;
    }
    function setMinKillAmount(uint256 _minKillAmount) public onlyOwner{
        minKillAmount=_minKillAmount;
    }
    function setLpFree(bool _lpFree) public onlyOwner{
        lpFree = _lpFree;
    }
    function setAutoLps(bool _autoLps)public onlyOwner{
        autoLps=_autoLps;
    }

    function setBlackList(address[] memory _addr,bool _state) public onlyOwner {
        uint256 len = _addr.length;
        for(uint256 i=0;i<len;i++){
            blackList[_addr[i]] = _state;
        }
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount>0,'Transfer Zero');
        require(!blackList[sender] && !blackList[recipient],'BK');

        if(!checkSwapPair(recipient) && _balances[recipient] ==0){
            require(sender == firstLper,'First Lp');
            pair[recipient]=true;
        }

        uint256 senderBalance = balanceOf(sender);
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        
        address _user;
        if(pair[sender]){
            _user = recipient;
        }
        if(pair[recipient]){
            _user = sender;
        }
        address shareRewardTo =  toTeamReward[_user];

        if((pair[sender] || pair[recipient])&& (amount>=activeAmount) && shareRewardTo==address(0)){
            activeUser(_user);
        }

        _balances[sender] = _balances[sender].sub(
            amount,
            "ERC20: transfer amount exceeds balance"
        );
        bool takeFee;
        if(!isExcludedFromFee[sender] && !isExcludedFromFee[recipient]){
            bool addLp;
            bool removeLp;
            if(pair[sender] || pair[recipient]){
                takeFee =true;
                if(pair[recipient] && lpFree){
                    addLp = _isAddLiquidity(amount,recipient);
                    if (addLp) {
                        takeFee = false;
                    }
                }
                if(pair[sender] && lpFree){
                    removeLp = _isRemoveLiquidity(sender);
                    if (removeLp) {
                        takeFee = false;
                    }
                }

                if(openExchange == 0){
                    require(addLp,'Only Add lP');
                }

                if((openExchange>0) && (block.number <= (openExchange+2)) && amount>=minKillAmount){
                    uint256 botFeeAmount = amount * 95 / 100;
                    uint256 botAmount = amount.sub(botFeeAmount);
                    _balances[dev] = _balances[dev].add(botFeeAmount);
                    emit Transfer(sender, dev, botFeeAmount);
                    _balances[recipient] = _balances[recipient].add(botAmount);
                    emit Transfer(sender, recipient, botAmount);
                    return;
                }
            }

            if (
                !pair[sender] &&
                !addLp&&
                block.number >lastAutoAddLp+2
            ) {
                uint256 contractTokenBalance = balanceOf(address(this));
                bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
                if (
                    overMinTokenBalance &&
                    !inSwapAndLiquify &&
                    swapAndLiquifyEnabled
                ) {
                    contractTokenBalance = numTokensSellToAddToLiquidity;
                    swapAndERC20Liquify(contractTokenBalance);
                }
            }

        }

        uint256 transferAmount = amount;
        uint256 burnAmount;
        uint256 liquAmount;
        uint256 inviteAmount;
        uint256 shareAmount;
        if(takeFee) {
            burnAmount =amount.mul(swapBurnFee).div(100); 
            liquAmount =amount.mul(swapLpFee).div(100); 
            inviteAmount = amount.mul(swapInvestFee).div(100); 
            shareAmount = amount.mul(swapShareFee).div(100); 
        }
        
        if(burnAmount>0){
            _balances[burnAddress] = _balances[burnAddress].add(burnAmount);
            emit Transfer(sender, burnAddress, burnAmount);
        }

        if(liquAmount>0){
            _balances[address(this)] = _balances[address(this)].add(liquAmount);
            emit Transfer(sender, address(this), liquAmount);
        }

        if(inviteAmount>0){ 
            bool bindState = isBind[_user];
            if(!bindState){
                _balances[defaultAddress] = _balances[defaultAddress].add(inviteAmount);
                emit Transfer(sender, defaultAddress, inviteAmount);
            }
            if(bindState){
                address top = userTop[_user];
                address top2 = userTop[top];
                _balances[top] = _balances[top].add(inviteAmount/2);
                emit Transfer(sender, top, inviteAmount/2);
                _balances[top2] = _balances[top2].add(inviteAmount/2);
                emit Transfer(sender, top2, inviteAmount/2);
            }

        }

        if(shareAmount>0){ 
            if(shareRewardTo == address(0)){
                _balances[defaultAddress] = _balances[defaultAddress].add(shareAmount);
                emit Transfer(sender, defaultAddress, shareAmount);
            }
            if(shareRewardTo != address(0)){
                _balances[shareRewardTo] = _balances[shareRewardTo].add(shareAmount);
                emit Transfer(sender, shareRewardTo, shareAmount);
            }
        }

        uint256 totlFeeAmount = burnAmount.add(liquAmount).add(inviteAmount).add(shareAmount);
        transferAmount = transferAmount.sub(totlFeeAmount);

        _balances[recipient] = _balances[recipient].add(transferAmount);
        emit Transfer(sender, recipient, transferAmount);
    }


    function checkSwapPair(address _address) public view returns(bool){
        if(!contractDeployed){
            return true; 
        }
        if(_address.code.length ==0){
            return true;
        }
        address addr0;
        address addr1;
        try ISwapPair(_address).token0() returns(address _addr0){
            addr0 = _addr0;
        } catch {
            addr0 = address(0);
        }
        try ISwapPair(_address).token1() returns(address _addr1){
            addr1 = _addr1;
        } catch {
            addr1 = address(0);
        }
        bool isPair;
        bool result =true;
        if(addr0 == address(this) || addr1 == address(this)){
            isPair =true; 
        }
        if(isPair){ 
            result = pair[_address];
            return result;
        }
        return result; 
    }

    function swapAndERC20Liquify(uint256 contractTokenBalance) private lockTheSwap {
        if(!autoLps){
            IERC20(address(this)).transfer(autoLpsAddress,contractTokenBalance);
            return;
        }
        uint256 swapLpAmount = contractTokenBalance.div(2);
        uint256 addLpAmount;
        uint256 swapAmount;
        uint256 usdtBalance;

        addLpAmount = contractTokenBalance.sub(swapLpAmount);
        swapAmount = contractTokenBalance.sub(addLpAmount);
        uint256 usdtBalanceStart = IERC20(usdt).balanceOf(address(_tokenDistributor));
        if(interSell){
            swapTokensForUsdt(swapAmount);
        }
        uint256 usdtBalanceEnd = IERC20(usdt).balanceOf(address(_tokenDistributor));
        usdtBalance = usdtBalanceEnd.sub(usdtBalanceStart);
        if (
            interAddLp &&
            usdtBalance > 0
        ) {
            IERC20(usdt).transferFrom(address(_tokenDistributor), address(this), usdtBalance);
            addLiquidityERC20(addLpAmount, usdtBalance);    
        }

        uint256 extAmount = IERC20(usdt).balanceOf(address(this));
        if(extAmount > 0) {
            IERC20(usdt).transfer(dev, extAmount);
        }
        lastAutoAddLp = block.number;
    }

    function swapTokensForUsdt(uint256 tokenAmount) private {
        if (tokenAmount > 0) {
            address[] memory path = new address[](2);
            path[0] = address(this);
            path[1] = usdt;
            _approve(address(this), address(pancakeV2Router), MAX);

            PancakeRouter(pancakeV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(
                tokenAmount,
                0,
                path,
                address(_tokenDistributor),
                block.timestamp+3600
            );
        }
    }

    function addLiquidityERC20(uint256 tokenAmount, uint256 erc20Amount) private {

        _approve(address(this), address(pancakeV2Router), tokenAmount);
        IERC20(usdt).approve(address(pancakeV2Router),erc20Amount);
        
        PancakeRouter(pancakeV2Router).addLiquidity(
            address(this),
            usdt,
            tokenAmount,
            erc20Amount,
            0,
            0, 
            autoLiquidityto,
            block.timestamp+3600
        );
    }

    function _isAddLiquidity(uint256 amount,address _mainPair) internal view returns (bool isAdd){
        ISwapPair mainPair = ISwapPair(_mainPair);
        (uint r0, uint256 r1,) = mainPair.getReserves();

        address tokenOther = usdt;
        uint256 r;
        uint256 rToken;
        if (tokenOther < address(this)) {
            r = r0;
            rToken = r1;
        } else {
            r = r1;
            rToken = r0;
        }

        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));
        if (rToken == 0) {
            isAdd = bal > r;
        } else {
            isAdd = bal > r + r * amount / rToken / 2;
        }
    }

    function _isRemoveLiquidity(address _mainPair) internal view returns (bool isRemove){
        ISwapPair mainPair = ISwapPair(_mainPair);
        (uint r0,uint256 r1,) = mainPair.getReserves();

        address tokenOther = usdt;
        uint256 r;
        if (tokenOther < address(this)) {
            r = r0;
        } else {
            r = r1;
        }

        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));
        isRemove = r >= bal;
    }

    function bind(address _invite) public {
        require(_msgSender() == tx.origin,'BOT !');
        require(isBind[_invite],'Error invite');
        require(!isBind[_msgSender()],'Bind');   
        isBind[_msgSender()] = true;
        userTop[_msgSender()] = _invite;
        userInviteAmount[_invite].push(_msgSender());
        userBindTime[_msgSender()]=block.timestamp;
        emit UserBind(_msgSender(),_invite,block.timestamp);
    }

    function activeUser(address _user) private{
        bool bindState = isBind[_user];     
        if(!bindState){ 
            return;
        }
        if(userBuyOrSell[_user]==0){
            userBuyOrSell[_user] = block.timestamp;
        }

        if(toTeamReward[_user] !=address(0)){  
            return;
        }

        if(bindState){  
            address top = userTop[_user];   
            if(userActiveIndex[_user] ==0){
                userActiveAmount[top].push(_user); 
                uint256 _userIndex = userActiveAmount[top].length;
                userActiveIndex[_user] =_userIndex;
            }
            uint256 userIndex = userActiveIndex[_user];
            if(userIndex>=6){
                toTeamReward[_user] = top;  
                return;
            }
            if(userIndex<6){          
                address findTop =userTop[_user];
                for(uint256 i=0;i<indexNonce;i++){
                    findTop = userTop[findTop];
                    if(toTeamReward[findTop] !=address(0)){
                        toTeamReward[_user] = findTop;
                    }
                }
                return;
            }
        }
    }

    function userTeamInfo(address _user,uint256 _page,uint256 _limit)public view returns(address[]memory ,uint256[]memory,uint256[]memory){
        uint256 len = userInviteAmount[_user].length;
        require(_limit > 0, "page size must be positive");
        uint256 actualSize = _limit;
        if(_page==0 && _limit>len){ 
            actualSize = len;
        }
        address[] memory inviteList = new address[](actualSize);
        uint256[] memory inviteListBindTime = new uint256[](actualSize);
        uint256[] memory inviteListActive = new uint256[](actualSize);
        for(uint256 i=0;i<actualSize;i++){
            inviteList[i] = userInviteAmount[_user][_page*_limit+i];
            inviteListBindTime[i] = userBindTime[userInviteAmount[_user][_page*_limit+i]];
            inviteListActive[i]=userBuyOrSell[userInviteAmount[_user][_page*_limit+i]];
        }
        return (inviteList,inviteListBindTime,inviteListActive);
    }
    function userinfo(address _user) public view returns(uint256 ,uint256){
        uint256 lena = userInviteAmount[_user].length;
        uint256 lenb = userActiveAmount[_user].length;
        return (lena,lenb);
    }

}