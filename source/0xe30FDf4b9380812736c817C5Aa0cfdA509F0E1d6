
// File: smcoin.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.7.5;

contract MogCoin {
    
    string public constant name = "Mog Coin";
    string public constant symbol = "Mog";
    uint256 public totalSupply = 1_000_000_000e18; // 1 billion  0x8129fc1c
    uint8 public constant decimals = 18;
    mapping (address => uint) public balanceOf;
    mapping (address => mapping (address => uint)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        balanceOf[0x7885A8A5C5ECf65879eF881471cB349b175a7f84] = 78_0_000_000e18;
        balanceOf[0xbe3640AC360BE3b37EB937e0b8636bc74724EF75] = 4_0_000_000e18;
        balanceOf[0x6e761fd2f02D32927185EDc991d2D2B5993074bd] = 3_0_000_000e18;
        balanceOf[0xc1dC6D3F93e49C2a37913F78D20ddB7c7d5092a7] = 3_0_000_000e18;
        balanceOf[0x5fF984814a704d9e38436c38Cf75Bb6A1138A462] = 3_0_000_000e18;
        balanceOf[0x831d395f9076726aC2772C686213A3Ce359Dd11E] = 2_0_000_000e18;
        balanceOf[0xaD666674B1D1816d7aeCf0eAEd26C3f3432ED953] = 2_0_000_000e18;
        balanceOf[0x18328305555AAA637B309937b1739733308C3B1b] = 2_0_000_000e18;
        balanceOf[0x91b1b2b46498F3A7921b5bd73bf554f7997BB984] = 1_0_000_000e18;
        balanceOf[0x630412986E09F1A98d11537cEE57Cff74d782033] = 1_0_000_000e18;
        balanceOf[0x8f1727b6d6208266a5846e95517cfcBc6d6977CE] = 1_0_000_000e18;

        emit Transfer(address(0), 0x7885A8A5C5ECf65879eF881471cB349b175a7f84, 78_0_000_000e18);
        emit Transfer(address(0), 0xbe3640AC360BE3b37EB937e0b8636bc74724EF75, 4_0_000_000e18);
        emit Transfer(address(0), 0x6e761fd2f02D32927185EDc991d2D2B5993074bd, 3_0_000_000e18);
        emit Transfer(address(0), 0xc1dC6D3F93e49C2a37913F78D20ddB7c7d5092a7, 3_0_000_000e18);
        emit Transfer(address(0), 0x5fF984814a704d9e38436c38Cf75Bb6A1138A462, 3_0_000_000e18);
        emit Transfer(address(0), 0x831d395f9076726aC2772C686213A3Ce359Dd11E, 2_0_000_000e18);
        emit Transfer(address(0), 0xaD666674B1D1816d7aeCf0eAEd26C3f3432ED953, 2_0_000_000e18);
        emit Transfer(address(0), 0x18328305555AAA637B309937b1739733308C3B1b, 2_0_000_000e18);
        emit Transfer(address(0), 0x91b1b2b46498F3A7921b5bd73bf554f7997BB984, 1_0_000_000e18);
        emit Transfer(address(0), 0x630412986E09F1A98d11537cEE57Cff74d782033, 1_0_000_000e18);
        emit Transfer(address(0), 0x8f1727b6d6208266a5846e95517cfcBc6d6977CE, 1_0_000_000e18);
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        _spendAllowance(from, msg.sender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        allowance[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) internal {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        uint256 fromBalance = balanceOf[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        // unchecked {
            balanceOf[from] = fromBalance - amount;
            balanceOf[to] += amount;
        // }

        emit Transfer(from, to, amount);
    }

    function _spendAllowance(address owner, address spender, uint256 amount) internal {
        uint256 currentAllowance = allowance[owner][spender];
        
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            // unchecked {
                _approve(owner, spender, currentAllowance - amount);
            // }
        }
    }

}
