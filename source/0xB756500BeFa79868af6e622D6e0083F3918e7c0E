{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"MDAO.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IMDAO is IERC20 {\r\n    function ups(address account) external view returns (address);\r\n}\r\n\r\ncontract MDAO is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    IERC20 public c_erc20 = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    address public dividendTracker = 0xDF790e8A1E3c3526Ec8014ac1b3872Ebb465F933;\r\n    address public dividendTrackerNode = 0x5B5aD5640846cF475B423F917c38E76C56DFC3cE;\r\n\r\n    IMDAO public c_mdao = IMDAO(0x2cddB79952D509DD05698FdEc79383cdF91b3b8E);\r\n    mapping (address =\u003e bool) public ief;\r\n    mapping (uint256 =\u003e uint256) public rrr;\r\n\r\n    address public pta = 0x1000000000000000000000000000000000000001;\r\n    address public uta = 0xFC7Fb55E769c122DB951c1D3313279D9A70DE4Db;\r\n    uint256 public swapTokensAtAmount = 1000000 * (10**18);\r\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public pair;\r\n    bool public pairIsCreated = true;\r\n    uint256 public constant sba = 1000000000*10**18;\r\n\r\n    uint256 public minRefNum = 1;\r\n    mapping (address =\u003e address) public ups;\r\n    mapping (address =\u003e bool) public noups;\r\n\r\n    address[] public shareholders;\r\n    mapping(address =\u003e uint256) public shareholderIndexes;\r\n    mapping(address =\u003e bool) private _updated;\r\n    mapping(address =\u003e bool) isDividendExempt;\r\n    address private _destroyAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public dividendAtAmount = 500000 * (10**18);\r\n    uint256 public lastTimeDividend;\r\n    uint256 distributorGas = 400000;\r\n    uint256 currentIndex;\r\n    address public lpAddress = 0xb4aCb82968e106a9B2f5b230705F0073D99B7b81;\r\n\r\n    constructor() public {\r\n        uint256 total = 1000*10**8*10**18;\r\n        _balances[msg.sender] = total;\r\n        _totalSupply = total;\r\n        emit Transfer(address(0), msg.sender, total);\r\n\r\n        address _pair = pairFor(uniswapV2Router.factory(), address(this), address(c_erc20));\r\n        pair = _pair;\r\n        ief[address(this)] = true;\r\n        ief[msg.sender] = true;\r\n\r\n        noups[address(this)] = true;\r\n        noups[msg.sender] = true;\r\n        noups[address(uniswapV2Router)] = true;\r\n        noups[_pair] = true;\r\n\r\n        rrr[1] = 100;\r\n        rrr[2] = 25;\r\n        rrr[3] = 25;\r\n        rrr[4] = 25;\r\n        rrr[5] = 25;\r\n        rrr[6] = 25;\r\n        rrr[7] = 25;\r\n        rrr[8] = 25;\r\n        rrr[9] = 25;\r\n\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0)] = true;\r\n        isDividendExempt[_destroyAddress] = true;\r\n        isDividendExempt[lpAddress] = true;\r\n        isDividendExempt[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true;\r\n    }\r\n\r\n    function setMP(uint256 mp) external onlyOwner {\r\n        minPeriod = mp;\r\n    }\r\n\r\n    function setDA(uint256 da) external onlyOwner {\r\n        dividendAtAmount = da;\r\n    }\r\n\r\n    function setDG(uint256 dg) external onlyOwner {\r\n        distributorGas = dg;\r\n    }\r\n\r\n    function getS() external view returns(uint256) {\r\n        return shareholders.length;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"MDAO\";\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return \"meta dao\";\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _tfn(address sender, address recipient, uint256 amount) private {\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _tfns(address sender, address recipient, uint256 amount) private {\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n       \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        if(contractTokenBalance \u003e= swapTokensAtAmount) {\r\n            ssd(contractTokenBalance);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function _slp(address sender, address recipient) private {\r\n        if(!pairIsCreated) {\r\n            return;\r\n        }\r\n        if (!isDividendExempt[sender] \u0026\u0026 sender != pair)\r\n            setShare(sender);\r\n        if (!isDividendExempt[recipient] \u0026\u0026 recipient != pair)\r\n            setShare(recipient);\r\n\r\n        uint256 poolTempAmount = _balances[pta];\r\n        if (poolTempAmount \u003e= dividendAtAmount \u0026\u0026\r\n            sender != address(this) \u0026\u0026\r\n            lastTimeDividend.add(minPeriod) \u003c= block.timestamp) {\r\n            \r\n            process(distributorGas);\r\n            lastTimeDividend = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function ssd(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(c_erc20);\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uint256[] memory amounts = uniswapV2Router.swapExactTokensForTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            uta,\r\n            block.timestamp\r\n        );\r\n        uint256 holdAmount = amounts[1]/2;\r\n        c_erc20.transferFrom(uta, dividendTracker, holdAmount);\r\n        c_erc20.transferFrom(uta, dividendTrackerNode, amounts[1] - holdAmount);\r\n    }\r\n\r\n    function _tfb(address sender, address recipient, uint256 amount) private {\r\n        \r\n        uint256 one = amount/10000;  \r\n        uint256 rewardBun = _refPayoutToken(sender, recipient, one);\r\n\r\n        uint256 liquidityAmount = 300*one;\r\n        _balances[pta] += liquidityAmount;\r\n        emit Transfer(sender, pta, liquidityAmount);\r\n\r\n        uint256 damount = 200*one;\r\n        _balances[address(this)] += damount;\r\n        emit Transfer(sender, address(this), damount);\r\n\r\n        uint256 receiveAmount = amount - liquidityAmount - rewardBun - damount;\r\n        _balances[recipient] += receiveAmount;\r\n        emit Transfer(sender, recipient, receiveAmount);\r\n    }\r\n\r\n    function _refPayoutToken(address sender, address recipient, uint256 amount) private returns(uint256){\r\n        address addr = sender;\r\n        if(sender == pair) {\r\n            addr = recipient;\r\n        }\r\n        address up = ups[addr];\r\n        uint256 rewardBun = 0;\r\n\r\n        for(uint8 i = 1; i \u003c 10; i++) {\r\n            if(up == address(0)) break;\r\n            uint256 reward = amount*rrr[i];\r\n            _balances[up] += reward;\r\n            rewardBun += reward;\r\n            emit Transfer(sender, up, reward);\r\n            up = ups[up];\r\n        }\r\n\r\n        if(totalSupply() \u003e sba) {\r\n            rewardBun = 400*amount - rewardBun;\r\n            _totalSupply -= rewardBun;\r\n            emit Transfer(sender, address(0), rewardBun);\r\n            return 400*amount;\r\n        }\r\n        return rewardBun;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n\r\n        _register(sender, recipient, amount);\r\n        if(ief[sender] || ief[recipient]) {\r\n            _tfn(sender, recipient, amount);\r\n            _slp(sender, recipient);\r\n            return;\r\n        }\r\n        address _pair = pair;\r\n        if(sender != _pair \u0026\u0026 recipient != _pair) {\r\n            _tfns(sender, recipient, amount);\r\n            _slp(sender, recipient);\r\n            return;\r\n        }\r\n        if(recipient == _pair \u0026\u0026 sender != _pair) {\r\n            _tfb(sender, recipient, amount);\r\n            _slp(sender, recipient);\r\n            return;\r\n        }\r\n        if(sender == _pair \u0026\u0026 recipient != _pair) {\r\n            _tfb(sender, recipient, amount);\r\n            _slp(sender, recipient);\r\n            return;\r\n        }\r\n        _tfn(sender, recipient, amount);\r\n    }\r\n\r\n    function _register(address sender, address recipient, uint256 amount) internal { \r\n        if(ups[recipient]!=address(0) || noups[recipient]) {\r\n            return;\r\n        }\r\n        address up = c_mdao.ups(recipient);\r\n        if(up != address(0)) {\r\n            ups[recipient] = up;\r\n            return;\r\n        }\r\n        if(sender == pair) {\r\n            ups[recipient] = owner();\r\n            return;\r\n        }\r\n        if(sender != recipient \u0026\u0026 amount \u003e= minRefNum) {\r\n            ups[recipient] = sender;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (_updated[shareholder]) {\r\n            if (IERC20(pair).balanceOf(shareholder) == 0)\r\n                quitShare(shareholder);\r\n            return;\r\n        }\r\n        if (IERC20(pair).balanceOf(shareholder) == 0) return;\r\n        addShareholder(shareholder);\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) return;\r\n        uint256 nowbanance = _balances[pta];\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed \u003c gas \u0026\u0026 iterations \u003c shareholderCount) {\r\n            if (currentIndex \u003e= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            uint256 amount = nowbanance\r\n                .mul(\r\n                    IERC20(pair).balanceOf(shareholders[currentIndex])\r\n                )\r\n                .div(IERC20(pair).totalSupply() - IERC20(pair).balanceOf(lpAddress) );\r\n            if (_balances[pta] \u003c amount) return;\r\n            distributeDividend(shareholders[currentIndex], amount);\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function distributeDividend(address shareholder, uint256 amount) internal {\r\n        _balances[pta] -= amount;\r\n        _balances[shareholder] += amount;\r\n        emit Transfer(pta, shareholder, amount);\r\n    }\r\n\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair_) {\r\n        (address token0, address token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair_ = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex\u0027ff\u0027,\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex\u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\u0027\r\n        )))));\r\n    }\r\n\r\n    function migrate(address[] memory addrs) external onlyOwner {\r\n        uint256 len = addrs.length;\r\n        for (uint256 i = 0; i \u003c len; i++) {\r\n            address addr = addrs[i];\r\n            uint256 amount = 2000*10**18;\r\n            require(_balances[address(this)] \u003e= amount, \"sub err\");\r\n            _balances[address(this)] -= amount;\r\n            _balances[addr] += amount;\r\n            emit Transfer(address(this), addr, amount);\r\n\r\n            address up = c_mdao.ups(addr);\r\n            if(up != address(0)) {\r\n                ups[addr] = up;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getToken(address addr, uint256 amount) external onlyOwner {\r\n        require(_balances[address(this)] \u003e= amount, \"sub err\");\r\n        _balances[address(this)] -= amount;\r\n        _balances[addr] += amount;\r\n        emit Transfer(address(this), addr, amount);\r\n    }\r\n\r\n    function setPair(address pair_) public onlyOwner {\r\n        pair = pair_;\r\n    }\r\n\r\n    function setPairIsCreated(bool b) external onlyOwner {\r\n        pairIsCreated = b;\r\n    }\r\n\r\n    function setS(uint256 s) public onlyOwner {\r\n        swapTokensAtAmount = s;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool b) public onlyOwner {\r\n        ief[account] = b;\r\n    }\r\n\r\n    function setisDividendExempt(address account, bool b) public onlyOwner {\r\n        isDividendExempt[account] = b;\r\n    }\r\n\r\n    function setFes(address[] memory addrs) public onlyOwner {\r\n        uint256 len = addrs.length;\r\n        for(uint256 i = 0; i \u003c len; i++){\r\n            ief[addrs[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakePair{\r\n    function sync() external;\r\n}"},"Ownable.sol":{"content":"pragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: MIT License\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"}}