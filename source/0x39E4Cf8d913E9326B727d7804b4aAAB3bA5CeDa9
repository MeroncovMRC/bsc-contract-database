{"bitcoinf-bep20.sol":{"content":"// SPDX-License-Identifier: GPL-2.0\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface BTCF {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n  \r\n  function maxSupply() external view returns (uint256);\r\n\r\n  function feeWallet() external view returns (address);\r\n\r\n  function lastMint() external view returns (uint256);\r\n\r\n  function getCurrentFeeRate() external view returns (uint8);\r\n\r\n  function getMaxFeeRate() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity\u0027s `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b \u003c= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity\u0027s `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b \u003e 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract BITCOINFUTURE is Context, BTCF, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address =\u003e uint256) private _balances;\r\n\r\n  mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n  uint256 private _maxSupply;\r\n  uint256 private _totalSupply;\r\n  uint8 private _decimals;\r\n  string private _symbol;\r\n  string private _name;\r\n  \r\n  address _feeWallet;\r\n  uint256 _lastMint;\r\n  uint8 _maxFeeRate;\r\n  \r\n  constructor() {\r\n    _name = \"BITCOIN FUTURE\";\r\n    _symbol = \"BTCF\";\r\n    _decimals = 6;\r\n    _totalSupply = 1000000000000;//first release\r\n    _maxSupply   = 21000000000000;//21m\r\n    _balances[msg.sender] = _totalSupply;\r\n\r\n    _lastMint = block.timestamp;\r\n    _feeWallet = address(0xFC9Cf1AAA9cCFD15cBCB72bBa9B3c97ce0C8F27a);\r\n    _maxFeeRate = 10;//1.0%\r\n\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external override view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external override view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external override view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external override view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-totalSupply}.\r\n   */\r\n  function totalSupply() external override view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function maxSupply() external override view returns (uint256) {\r\n    return _maxSupply;\r\n  }\r\n\r\n  function feeWallet() external override view returns (address) {\r\n    return _feeWallet;\r\n  }\r\n\r\n  function lastMint() external override view returns (uint256) {\r\n    return _lastMint;\r\n  }\r\n\r\n  function getMaxFeeRate() external override view returns (uint8) {\r\n    return _maxFeeRate;\r\n  }\r\n\r\n  function setMaxFeeRate(uint8 feeRate) public onlyOwner returns (bool) {\r\n    require(feeRate \u003e= 0 \u0026\u0026 feeRate \u003c= 10, \"BTCF: rate must be between 0 (0%) and 10 (1.0%)\");\r\n    _maxFeeRate = feeRate;\r\n    return true;\r\n  } \r\n  \r\n  function setFeeWallet(address wallet) public onlyOwner returns (bool) {\r\n    require(wallet != address(0), \"BTCF: wallet is zero address\");\r\n    _feeWallet =  wallet;\r\n    return true;\r\n  }\r\n\r\n  function _getCurrentFeeRate() internal view returns (uint8) {\r\n    uint256 _currentYear = 1970 + (block.timestamp / 31536000);\r\n    uint8 _feeRate;\r\n\r\n    if(_currentYear \u003c= 2023) {\r\n      _feeRate = 0;//0.0%, 1st yr\r\n    } else if(_currentYear \u003c= 2024) {\r\n      _feeRate = 1;//0.1%, 2nd yr\r\n    } else if(_currentYear \u003c= 2027) {\r\n      _feeRate = 2;//0.2%, next 3yrs\r\n    } else if(_currentYear \u003c= 2032) {\r\n      _feeRate = 5;//0.5%, next 5yrs\r\n    } else {\r\n      _feeRate = 10;//1.0%, rest yrs\r\n    }\r\n\r\n    //mnc: min(_feeRate, _maxFeeRate) will be applied\r\n    return _feeRate \u003c _maxFeeRate ? _feeRate : _maxFeeRate;\r\n  }\r\n\r\n  /*\r\n  * need to devide by 1000 on usage, used in _transfer function\r\n  * this is receiver\u0027s cost\r\n  */\r\n  function getCurrentFeeRate() external override  view returns (uint8) {\r\n    return _getCurrentFeeRate();\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) external override view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) external override view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) external override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {BEP20};\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for `sender`\u0027s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BTCF: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BTCF: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n   * the total supply.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `msg.sender` must be the token owner\r\n   */\r\n  function mint(uint256 amount) public onlyOwner returns (bool) {\r\n    _mint(_msgSender(), amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   * Emits another {Transfer} event if fee is applicable\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - if fee is applicable, `amount` must be more than 1000,  enough for fee deduction\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BTCF: transfer from the zero address\");\r\n    require(recipient != address(0), \"BTCF: transfer to the zero address\");\r\n\r\n    //deduct fee amount, if applicable\r\n    uint8 _currentFeeRate = _getCurrentFeeRate();\r\n\r\n    if(_currentFeeRate != 0) {\r\n      require(amount \u003e 1000, \"BTCF: transfer amount too low\");\r\n    }\r\n    uint256 _feeAmount = (amount * _currentFeeRate) / 1000;\r\n\r\n    //zero fee for owner, fee wallets\r\n    if(sender == owner() || recipient == owner() || sender == _feeWallet) {\r\n      _feeAmount = 0;\r\n    }\r\n    \r\n    _balances[sender] = _balances[sender].sub(amount, \"BTCF: transfer amount exceeds balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount - _feeAmount);\r\n    _balances[_feeWallet] = _balances[_feeWallet].add(_feeAmount);\r\n    \r\n    if(_feeAmount == 0) {\r\n      emit Transfer(sender, recipient, amount);\r\n    } else {\r\n      //only emits additional event if fee is applicable\r\n      emit Transfer(sender, recipient, amount - _feeAmount);\r\n      emit Transfer(sender, _feeWallet, _feeAmount);\r\n    }\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - cannot mint before 30 days since last mint.\r\n   * - mint amount must be less than 100,000 each time.\r\n   * - total mint amount (totalSupply) must be less than maxSupply\r\n   */\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BTCF: mint to the zero address\");\r\n    require((block.timestamp - _lastMint) \u003e 2592000, \"BTCF: cannot mint before 30 days\");\r\n    require(amount \u003c= 100000000000, \"BTCF: mint amount must be less than 100.000 (100000000000)\");\r\n    require((_maxSupply - _totalSupply) \u003e= amount, \"BTCF: over max supply\");\r\n    \r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    //mnc: record last mint. minting is zero fee.\r\n    _lastMint = block.timestamp;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BTCF: approve from the zero address\");\r\n    require(spender != address(0), \"BTCF: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }  \r\n}"},"btcfstaking.sol":{"content":"// SPDX-License-Identifier: GPL-2.0\r\n\r\npragma solidity ^0.8.17;\r\nimport \"./bitcoinf-bep20.sol\";\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract BTCFStaking is Ownable, ReentrancyGuard {\r\n    struct StakeItem {\r\n        address holder;\r\n        uint256 term;\r\n        uint256 amount;\r\n        uint256 start;\r\n        uint256 maxReward;\r\n    }\r\n\r\n    BITCOINFUTURE private token;\r\n    address[] private stakeList;\r\n    mapping(address =\u003e StakeItem) private stakes;\r\n    mapping(uint256 =\u003e uint256) private terms;\r\n    uint256 private totalStakedAmount;\r\n    uint256 private currentStakeHolderCount;\r\n    uint256 private totalRewardAmount;\r\n    uint256 private minimumStakeAmount;\r\n    //constants\r\n    uint256 private constant SECONDSINMONTH = 2592000;// (30 days) for mainnet. 600 (10mins) for testnet)\r\n    uint256 private constant MAXDURATION = 36; //36 months\r\n    uint256 private constant TERM_1M = 1;\r\n    uint256 private constant TERM_3M = 3;\r\n    uint256 private constant TERM_6M = 6;\r\n    uint256 private constant TERM_12M = 12;\r\n    uint256 private constant TERM_24M = 24;\r\n    uint256 private constant TERM_36M = 36;\r\n\r\n    event Staked(address holder, uint256 amount, uint256 term, uint256 stakeTime);\r\n    event Unstaked(address holder, uint256 amount, uint256 term, uint256 unstakeTime, uint256 unstakeAmount);\r\n    \r\n    /**\r\n     * @dev Creates a staking contract.\r\n     * @param btcfTokenAddress address of the ERC20 token contract\r\n     * and a list of terms (APY, annual percentage). Only fix of 6 terms are supported\r\n     */\r\n    constructor(address btcfTokenAddress, uint256 term1monthAPY, uint256 term3monthAPY, uint256 term6monthAPY, uint256 term12monthAPY, uint256 term24monthAPY, uint256 term36monthAPY) {\r\n        //set BTCF token address\r\n        token = BITCOINFUTURE(btcfTokenAddress);\r\n        //set terms (APY)\r\n        //only 6 terms. APY can be changed during the contract operation\r\n        terms[TERM_1M]  = term1monthAPY;\r\n        terms[TERM_3M]  = term3monthAPY;\r\n        terms[TERM_6M]  = term6monthAPY;\r\n        terms[TERM_12M] = term12monthAPY;\r\n        terms[TERM_24M] = term24monthAPY;\r\n        terms[TERM_36M] = term36monthAPY;\r\n        //set other params\r\n        totalStakedAmount = 0;\r\n        totalRewardAmount = 0;\r\n        currentStakeHolderCount = 0;\r\n        minimumStakeAmount = 10000000;//10 BTCF\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /**\r\n    * @dev Returns the address of the ERC20 token managed by the staking contract.\r\n    */\r\n    function getBTCFTokenAddress() external view returns(address){\r\n        return address(token);\r\n    }\r\n\r\n    function setNewTerms(uint256 term1monthAPY, uint256 term3monthAPY, uint256 term6monthAPY, uint256 term12monthAPY, uint256 term24monthAPY, uint256 term36monthAPY) external onlyOwner returns (bool) {\r\n        require(totalStakedAmount \u003c= 0, \"Only applicable when no staking available\");\r\n        \r\n        terms[TERM_1M]  = term1monthAPY;\r\n        terms[TERM_3M]  = term3monthAPY;\r\n        terms[TERM_6M]  = term6monthAPY;\r\n        terms[TERM_12M] = term12monthAPY;\r\n        terms[TERM_24M] = term24monthAPY;\r\n        terms[TERM_36M] = term36monthAPY;\r\n        \r\n        return true;\r\n    }\r\n\r\n    function setMinimumStakeAmount(uint256 minAmount) external onlyOwner returns (bool) {\r\n        require(minAmount \u003e= 1000000, \"Too small! At least 1 token is allowed.\");\r\n        minimumStakeAmount = minAmount;\r\n        return true;\r\n    }\r\n\r\n    function getMinimumStakeAmount() external view returns (uint256) {\r\n        return minimumStakeAmount;\r\n    }\r\n\r\n    function getTotalRewardAmount() external view returns (uint256) {\r\n        return totalRewardAmount;\r\n    }\r\n\r\n    function getTotalStakedAmount() external view returns (uint256) {\r\n        return totalStakedAmount;\r\n    }\r\n\r\n    function getContractBalance() external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getAllTerms() external view returns(uint256 term1month, uint256 term3month, uint256 term6month, uint256 term12month, uint256 term24month, uint256 term36month){\r\n        return (terms[TERM_1M], terms[TERM_3M], terms[TERM_6M], terms[TERM_12M], terms[TERM_24M], terms[TERM_36M]); \r\n    }\r\n\r\n    function estimateRewardAmount(uint256 originalAmount, uint256 term, uint256 duration) external view returns (uint256) {\r\n        return calculateRewardAmount(originalAmount, term, duration);\r\n    }\r\n\r\n    function calculateRewardAmount(uint256 originalAmount, uint256 term, uint256 timeDeposited) private view returns(uint256) {\r\n        timeDeposited = timeDeposited \u003c MAXDURATION ? timeDeposited : MAXDURATION; //max 36 months\r\n        uint256 slots = timeDeposited / term;\r\n        //one month rate ===\u003e terms[term] / 100 / 12;\r\n        uint256 yieldAmount = originalAmount * slots * term * terms[term] / 100 / 12;\r\n        return yieldAmount; \r\n    }\r\n\r\n    function stake(uint256 amount, uint256 term) external {\r\n        require(amount \u003e= minimumStakeAmount, \"Low amount. Check minimum stake amount!\");\r\n        require(term == TERM_1M || term == TERM_3M || term == TERM_6M || term == TERM_12M || term == TERM_24M || term == TERM_36M, \"Invalid term (available: 1, 3, 6, 12, 24, 36\");\r\n        \r\n        address sender = msg.sender;\r\n        StakeItem memory oldItem = stakes[sender];\r\n        require(oldItem.holder == address(0), \"This address is alraedy a holder. Unstake first!\");\r\n\r\n        uint256 maxRewardAmount = calculateRewardAmount(amount, term, MAXDURATION);\r\n        require(token.balanceOf(address(this)) \u003e= totalStakedAmount + totalRewardAmount + maxRewardAmount + amount, \"Not enough token for staking\");\r\n        \r\n        uint256 stakeTime = block.timestamp;\r\n        //Remember: Need approval first!\r\n        require(token.transferFrom(sender, address(this), amount), \"Transfer failed\");\r\n\r\n        stakes[sender] = StakeItem(sender, term, amount, stakeTime, maxRewardAmount);\r\n        stakeList.push(sender);\r\n        totalStakedAmount += amount;\r\n        totalRewardAmount += maxRewardAmount;\r\n        currentStakeHolderCount ++;\r\n\r\n        emit Staked(sender, amount, term, stakeTime);\r\n    }\r\n    \r\n    function getStakeItem(address holderAddress) external view returns(address holder, uint256 term, uint256 amount, uint256 start, uint256 estimateUnstakeAmount) {\r\n        StakeItem memory _stakeItem = stakes[holderAddress];\r\n        address _holder;\r\n        uint256 _amount;\r\n        uint256 _term;\r\n        uint256 _start;\r\n        uint256 _estimateUnstakeAmount;\r\n        if(_stakeItem.holder == address(0)) {\r\n            _holder = address(0);\r\n            _amount = 0;\r\n            _term = 0;\r\n            _start = 0;\r\n            _estimateUnstakeAmount = 0;\r\n        } else {\r\n            _holder = _stakeItem.holder;\r\n            _amount = _stakeItem.amount;\r\n            _term = _stakeItem.term;\r\n            _start = _stakeItem.start;\r\n            _estimateUnstakeAmount = _stakeItem.amount + calculateRewardAmount(_stakeItem.amount, _stakeItem.start, (block.timestamp - _stakeItem.start) / SECONDSINMONTH);\r\n        }\r\n        return (_holder, _term, _amount, _start, _estimateUnstakeAmount);\r\n    }\r\n\r\n    function unstake() external nonReentrant {\r\n        address sender = msg.sender;\r\n        StakeItem storage _stakeItem = stakes[sender];\r\n        require(_stakeItem.holder == sender, \"This address is not a holder yet. Stake first!\");\r\n\r\n        uint256 rewardAmount = calculateRewardAmount(_stakeItem.amount, _stakeItem.start, (block.timestamp - _stakeItem.start) / SECONDSINMONTH);\r\n        uint256 unstakeAmount = rewardAmount + _stakeItem.amount;\r\n\r\n        require(token.balanceOf(address(this)) \u003e= unstakeAmount, \"Not enough token to unstake!\");\r\n        address payable beneficiaryPayable = payable(_stakeItem.holder);\r\n        \r\n        require(token.transfer(beneficiaryPayable, unstakeAmount), \"Transfer failed\");\r\n        totalStakedAmount -= _stakeItem.amount;\r\n        //remove max reward amount (all that already registered) for this slot\r\n        totalRewardAmount -= _stakeItem.maxReward;\r\n        currentStakeHolderCount --;\r\n        //log first\r\n        emit Unstaked(_stakeItem.holder, _stakeItem.amount, _stakeItem.term, _stakeItem.start, unstakeAmount);\r\n        //delete later\r\n        delete stakes[sender];\r\n     }\r\n\r\n    function getHolderAtIndex(uint _index) external view returns(StakeItem memory){\r\n        require(_index \u003c stakeList.length, \"stakeList out of range\");\r\n        return stakes[stakeList[_index]];\r\n    }\r\n\r\n    //only holders that are staking in the pool\r\n    function getCurrentStakeHolderCount() external view returns(uint256) {\r\n        return currentStakeHolderCount;\r\n    }\r\n\r\n    //all holders that ever staked (but unstaked or still staking)\r\n    function getTotalStakeHolderCount() external view returns(uint256) {\r\n        return stakeList.length;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external nonReentrant onlyOwner {\r\n        require(token.balanceOf(address(this)) - totalRewardAmount - totalStakedAmount \u003e= amount, \"not enough withdrawable funds\");\r\n        token.transfer(owner(), amount);\r\n    }   \r\n}"}}