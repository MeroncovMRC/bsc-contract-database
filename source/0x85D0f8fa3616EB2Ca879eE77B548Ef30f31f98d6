{"IBEP20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function burnFrom(address account, uint256 amount) external returns (bool);\n\n    function burn(uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.5.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.4.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \u0027SafeMath: addition overflow\u0027);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \u0027SafeMath: subtraction overflow\u0027);\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \u0027SafeMath: multiplication overflow\u0027);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \u0027SafeMath: modulo by zero\u0027);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x \u003c y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y \u003e 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x \u003c z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"},"SparkToken.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity \u003e=0.6.0;\nimport \"./IBEP20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ninterface IMiner {\n    function AddOneCut(uint256 amount) external;\n}\n\ncontract SparkToken is IBEP20, ReentrancyGuard\n{\n    using SafeMath for uint256;\n    address _owner;\n    address _miner;\n    address _minerpool;\n    uint256 _maxSupply= 8800000000 * 1e8;\n\n    string constant  _name = \u0027Spark\u0027;\n    string constant _symbol = \u0027SPK\u0027;\n    uint8 immutable _decimals = 8;\n \n    address _pancakeAddress;\n    // uint256 _totalsupply;  \n    \n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n    \n    uint256 private constant RATELIMIT_DELAY = 3;\n    mapping(address =\u003e uint256) private _ratelimit;\n    mapping(address =\u003e bool) private _allowTradeUser;\n    mapping(address=\u003ebool) _isExcluded;\n    address[] private _excluded;\n    \n    mapping(address=\u003ebool) _minter;\n    mapping(address=\u003ebool) _banneduser;\n    \n    address _feeowner;\n    address _bonusowner;\n    \n    uint256 _maxlimit = 20000;\n    uint256 _timeslimit = 100 * 1e8;\n    bool _takeout = true;\n    bool _takebonus = true;\n    bool private _hasLaunched = false;\n    \n    uint256 private constant MAX = ~uint256(0); // 8800000000 * 1e8;\n    uint256 private _tTotal = _maxSupply;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    mapping (address =\u003e uint256) private _rOwned;\n    mapping (address =\u003e uint256) private _tOwned;\n  \n    constructor(address feeowner)\n    {\n        _owner = msg.sender;\n        \n        _rOwned[_owner] = _rTotal;\n        emit Transfer(address(0), _owner, _tTotal);\n\n        _feeowner = feeowner;\n        \n        addExcluded(_owner);\n        addExcluded(_feeowner);\n        addExcluded(address(0));\n        \n        setAllowTradeUser(_owner, true);\n        \n    }\n\n    function launch() public {\n        require(msg.sender==_owner);\n        require(!_hasLaunched, \"Already launched.\");\n        _hasLaunched = true;\n    }\n    \n    function setAllowTradeUser(address account, bool isAllowed) public {\n        require(msg.sender==_owner);\n        _allowTradeUser[account] = isAllowed;\n    }\n    \n    function isAllowTradeUser(address account) public view returns (bool) {\n        return _allowTradeUser[account];\n    }\n    \n    function setMiner(address miner,address minerpool) public\n    {\n         require(msg.sender==_owner);\n         _miner=miner;\n         _minerpool=minerpool;\n         addExcluded(_minerpool);\n    }\n    \n    function setLimit(uint256 maxlimit,uint256 timeslimit) public\n    {\n         require(msg.sender==_owner);\n         _maxlimit  = maxlimit;\n         _timeslimit= timeslimit;\n    }\n    \n    function setTakeout(bool takeout) public \n    {\n        require(msg.sender==_owner);\n        _takeout = takeout;\n    }\n\n    function bannUser(address user,bool ban) public\n    {\n         require(msg.sender==_owner);\n         _banneduser[user]=ban;\n    }\n    \n    function isBannedUser(address account) public view returns (bool) {\n        return _banneduser[account];\n    }\n\n    function setPancakeAddress(address pancakeAddress) public\n    {\n        require(msg.sender==_owner);\n        _pancakeAddress=pancakeAddress;\n        addExcluded(_pancakeAddress);\n    }\n    \n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        \n        if(!_takebonus) {\n            return;\n        }\n        \n        if(_rTotal.sub(rFee) \u003c _tTotal) {\n            _rOwned[address(0)] = _rOwned[address(0)].add(rFee);\n            _tOwned[address(0)] = _tOwned[address(0)].add(tFee);\n            return;\n        }\n        \n        uint256 tSupply = _getTCurrentSupply();\n        if(tSupply == tFee) {\n            _rOwned[address(0)] = _rOwned[address(0)].add(rFee);\n            _tOwned[address(0)] = _tOwned[address(0)].add(tFee);\n            return;\n        }\n        \n        _rTotal = _rTotal.sub(rFee, \"reflect fee\");\n        \n    }\n    \n    function getRate() public view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]], \"sub rSupply\");\n            tSupply = tSupply.sub(_tOwned[_excluded[i]], \"sub tSupply\");\n        }\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n    \n    function _getTCurrentSupply() private view returns(uint256) {\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        return tSupply;\n    }\n    \n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\n        return rAmount.div(getRate());\n    }\n\n    function name() public  pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public  pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function addExcluded(address account) public \n    {\n        require(msg.sender== _owner);\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] \u003e 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function takeOutErrorTransfer(address tokenaddress) public\n    {\n        require(msg.sender==_owner);\n        IBEP20(tokenaddress).transfer(_owner, IBEP20(tokenaddress).balanceOf(address(this)));\n    }\n\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function isExcluded(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n\n   function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n   function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function burnFrom(address sender, uint256 amount) public override  returns (bool)\n    {\n         _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        _burn(sender,amount);\n        return true;\n    }\n\n    function burn(uint256 amount) public override returns (bool)\n    {\n        _burn(msg.sender,amount);\n        return true;\n    }\n \n    function _burn(address sender,uint256 tAmount) private\n    {\n         require(sender != address(0), \"ERC20: transfer from the zero address\");\n         require(tAmount \u003e 0, \"Transfer amount must be greater than zero\");\n         \n         uint256 currentRate = getRate();\n         uint256 rAmount = tAmount.mul(currentRate);\n         _rOwned[sender] = _rOwned[sender].sub(rAmount);\n         _rOwned[address(0)] = _rOwned[address(0)].add(rAmount); \n         \n         if(isExcluded(sender)) {\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\n         }\n         if(isExcluded(address(0))) {\n            _tOwned[address(0)] = _tOwned[address(0)].add(tAmount); \n         }\n        \n         emit Transfer(sender, address(0), tAmount);\n    }\n\n\n    function _transfer(address sender, address recipient, uint256 tAmount) private nonReentrant {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(_banneduser[sender]==false,\"banned\");\n        \n        if(sender == _pancakeAddress) {\n            if(!_hasLaunched \u0026\u0026 !isAllowTradeUser(recipient)) {\n                _banneduser[recipient] = true;\n            }\n        }\n  \n        uint256 currentRate = getRate();\n        uint256 tTransferAmount = tAmount;\n        uint256 rBonus = 0;\n        uint256 tBonus = 0;\n        if(recipient == _pancakeAddress)\n        {\n            if(!isAllowTradeUser(sender)) {\n                require(tAmount \u003c= _maxlimit*1e8, \"ERC20: transfer amount unit limit\");\n                require(tAmount.mod(_timeslimit) == 0, \"ERC20: transfer amount times limit\");\n                require(_takeout, \"takeout error\");\n                \n                require(block.number \u003e= _ratelimit[sender], \"Too many transactions, try again in a couple of blocks.\");\n                _ratelimit[sender] = block.number + RATELIMIT_DELAY;\n            }\n            \n            if(!isExcluded(sender))\n            {\n                uint256 onepercent = tAmount.mul(1).div(100);\n                if(onepercent \u003e 0)\n                {\n                    uint256 tBurn = onepercent.mul(1);\n                    uint256 tMinerPool = onepercent.mul(5);\n                    tBonus = onepercent.mul(4);\n                    uint256 tDev = onepercent.mul(2);\n                    \n                    _takeTax(tBurn, tMinerPool, tDev);\n                    \n                    IMiner(_miner).AddOneCut(tMinerPool);\n                    \n                    emit Transfer(sender, address(0), tBurn);\n                    emit Transfer(sender, _minerpool, tMinerPool);\n                    emit Transfer(sender, _feeowner, tDev);\n                    emit Transfer(sender, address(0), tBonus);\n                    \n                    uint256 tFee = tBurn.add(tMinerPool).add(tBonus).add(tDev);  //onepercent.mul(12);\n                    tTransferAmount = tTransferAmount.sub(tFee);\n                }\n            }\n        }\n        \n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rTransferAmount = tTransferAmount.mul(currentRate);\n        \n        _rOwned[sender]= _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        \n        if(_isExcluded[sender]) {\n            _tOwned[sender]= _tOwned[sender].sub(tAmount);\n        }\n        \n        if(_isExcluded[recipient]) {\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        }\n        \n        rBonus = tBonus.mul(currentRate);\n        _reflectFee(rBonus, tBonus);\n        \n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeTax(uint256 tBurn, uint256 tMinerPool, uint256 tDev) private {\n        \n        uint256 currentRate =  getRate();\n        uint256 rBurn = tBurn.mul(currentRate);\n        uint256 rMinerPool = tMinerPool.mul(currentRate);\n        uint256 rDev = tDev.mul(currentRate);\n        \n        _rOwned[address(0)] = _rOwned[address(0)].add(rBurn);\n        if(_isExcluded[address(0)]) {\n            _tOwned[address(0)] = _tOwned[address(0)].add(tBurn);\n        }\n        \n        _rOwned[_minerpool] = _rOwned[_minerpool].add(rMinerPool);\n        if (_isExcluded[_minerpool]) {\n            _tOwned[_minerpool] = _tOwned[_minerpool].add(tMinerPool);\n        }\n        \n        _rOwned[_feeowner] = _rOwned[_feeowner].add(rDev);\n        if (_isExcluded[_feeowner]) {\n            _tOwned[_feeowner] = _tOwned[_feeowner].add(tDev);\n        }\n        \n    }\n    \n}"}}