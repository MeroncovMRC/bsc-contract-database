// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;

contract BEP20Rebase {

    event Rebase(uint256 amount);
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed from, address indexed to, uint256 amount);

    string public name = "Rebase Token";
    string public symbol = "REBASE";
    uint256 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * (10**decimals);
    uint256 public initialSupply = 1_000_000 * (10**decimals);
    address owner = 0x7495785c9b5eC54cb8242b951526749b16fA7a52;

    uint256 public flagment = 1e18;

    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowance;
    
    constructor() {
        balances[msg.sender] = totalSupply;
        emit Transfer(address(0),msg.sender,totalSupply);
    }
    
    function balanceOf(address adr) public view returns(uint256) {
        return toFlagment(balances[adr]);
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        amount = toUnderlying(amount);
        _transfer(msg.sender,to,amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public returns(bool) {
        amount = toUnderlying(amount);
        allowance[from][msg.sender] -= amount;
        _transfer(from,to,amount);
        return true;
    }

    function approve(address to, uint256 amount) public returns (bool) {
        amount = toUnderlying(amount);
        require(to != address(0));
        allowance[msg.sender][to] = amount;
        emit Approval(msg.sender, to, amount);
        return true;
    }

    function _transfer(address from,address to, uint256 amount) internal {
        require(from != address(0));
        require(to != address(0));
        balances[from] -= amount;
        balances[to] += amount;
        emit Transfer(from, to, amount);
    }

    function rebase(uint256 newflagment) public returns (bool) {
        require(msg.sender==owner);
        flagment = newflagment;
        totalSupply = toFlagment(totalSupply);
        emit Rebase(newflagment);
        return true;
    }

    function toFlagment(uint256 input) internal view returns (uint256) {
        return input * flagment / 1e18;
    }

    function toUnderlying(uint256 input) internal view returns (uint256) {
        return input * 1e18 / flagment;
    }

}