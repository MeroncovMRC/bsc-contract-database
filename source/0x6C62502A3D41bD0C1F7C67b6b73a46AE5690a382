pragma solidity ^0.8.6;

// SPDX-License-Identifier: Unlicensed
interface IERC20 {
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

abstract contract Ownable {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor ()  {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }   
    
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }
    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract CSDAOToken is IERC20, Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) public _updated;
    mapping(address => uint256) public  lcycle;
    address private projectAddress = 0xc22FfdF3C595faF4CBB4009283Feeb37525FD950;
    IERC20 WETH = IERC20 (0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    string private _name = "CSDAO";
    string private _symbol =  "CSDAO";
    uint8 private _decimals = 18;
    uint256 private timenow;
    uint256 public _LPFee = 500;
    bool public _Power = false;
    uint256 public _inviterFee = 400;
   
    uint256 public _burnFee = 200;
    uint256 currentIndex;  
    uint256 lowersnumber;
    uint256 private _tTotal = 1000*10**8 * 10**18;
    uint256 distributorGas = 500000;
    uint256 nowbanance;  
    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    address private fromAddress;
    address private toAddress;
    uint256 public StartTime;
    uint256 hourstime = 3 hours;
    mapping(address => address) public TFinviter;
    mapping(address => address) public inviter;
    mapping(address => address[]) public offline;
    address[] public holders;
    address[] public lowers;
    mapping (address => uint256) public holderIndexes;
    constructor() {
        _tOwned[projectAddress] = _tTotal;
               
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );
 
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        
        uniswapV2Router = _uniswapV2Router;
        
        //exclude owner and this contract from fee
        _isExcludedFromFee[msg.sender] = true;
        _isExcludedFromFee[projectAddress] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[address(_uniswapV2Router)] = true;
        emit Transfer(address(0), projectAddress, _tTotal);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tOwned[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function isContract( address _addr ) internal view returns (bool addressCheck) { 
        bytes32 codehash; 
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; 
        assembly { codehash := extcodehash(_addr) } 
        addressCheck = (codehash != 0x0 && codehash != accountHash); 
    }
    function isprice(uint256 cxBalance) public view returns(uint256){
        address[] memory routerAddress = new address[](2);
        routerAddress[0] = uniswapV2Router.WETH();
        routerAddress[1] = address(this);
        uint[] memory amounts = uniswapV2Router.getAmountsIn(cxBalance,routerAddress);
        return amounts[0];
    }
    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }
    function setFromFee(address account,bool vbool) public onlyOwner {
        _isExcludedFromFee[account] = vbool;
    }
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        //require((amount== 0) || (_allowances[owner][spender] == 0));
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
        ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 1*10**18  && amount <= _tOwned[from]);
        amount = amount.sub(1*10**18);
        if(from == projectAddress && to == uniswapV2Pair && !_Power){
            StartTime = block.timestamp;
            _Power = true;
        }
        if(block.timestamp <  StartTime.add(hourstime) && !_isExcludedFromFee[to] && !_isExcludedFromFee[from])require(!isContract(from) && !isContract(to));
        if(from == uniswapV2Pair && !_isExcludedFromFee[to]){
            if(block.timestamp <  StartTime.add(hourstime*2) && block.timestamp >=  StartTime.add(hourstime))require( isprice(amount) <= 1*10**17);
        }
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] ) {
            bacistransfer(from,to,amount,amount);
       } else {      
            maintransfer(from,to,amount);
       } 
       
       if(!isContract(fromAddress) &&  fromAddress != address(0)) setShare(fromAddress);
       if(!isContract(toAddress) &&  toAddress != address(0)) setShare(toAddress);
       fromAddress = from;
       toAddress = to;        
    }
    function bacistransfer(
        address sender,
        address recipient,
        uint256 Amount,uint256 amount
    ) private {
        _tOwned[sender] = _tOwned[sender].sub(Amount);    
        _tOwned[recipient] = _tOwned[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }
    function maintransfer(
        address from,
        address to,
        uint256 amount
        ) private { 
        if(!isContract(from) && !isContract(to)){  
            if(inviter[to] == address(0) && _tOwned[to] <= 1*10**18 && TFinviter[from] != to)
                TFinviter[to] = from;
            if(TFinviter[from] == to  &&  inviter[from] == address(0) ) {
                inviter[from] = to;
                offline[to].push(from);
            }
            uint256 recipientRate = 10000 -_LPFee -_burnFee;
            bacistransfer(from,to,amount,amount.mul(recipientRate).div(10000));

            burntransfer(from,amount.mul(_burnFee).div(10000));

            _takeLPFee(from, amount.mul(_LPFee).div(10000));
            
            if(_tOwned[address(this)] >= _tTotal.div(1*10**7)) process(distributorGas);
            return;
        }
        if(!isContract(to) && inviter[to] == address(0) && _tOwned[to] == 0)lowers.push(to);
        _transferStandard(from, to, amount);
    }  
    function burntransfer(
        address from,
        uint256 amount
        ) private {
         if (_burnFee == 0) return;         
        _tOwned[address(0)] = _tOwned[address(0)].add(amount);    
        emit Transfer(from, address(0),amount);    
    }
    
    function process(uint256 gas) private {
        uint256 holderCount = holders.length;
        if(holderCount == 0)return;
        nowbanance = _tOwned[address(this)];
        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;

        while(gasUsed < gas && iterations < holderCount) {
            if(currentIndex >= holderCount){
                currentIndex = 0;             
            }
               
            uint256 amount = nowbanance.mul(IERC20(uniswapV2Pair).balanceOf(holders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());  
            uint256 Amount = IERC20(uniswapV2Pair).balanceOf(holders[currentIndex]).mul(WETH.balanceOf(uniswapV2Pair)).div(IERC20(uniswapV2Pair).totalSupply());        
            if(lowersnumber < lowers.length && lowers[lowersnumber] != holders[currentIndex] &&  Amount >=5*10**17 ){                 
                if(inviter[lowers[lowersnumber]] == address(0))offline[holders[currentIndex]].push(lowers[lowersnumber]); 
                if(inviter[lowers[lowersnumber]] == address(0))inviter[lowers[lowersnumber]] = holders[currentIndex];
                lowersnumber++;
            }
            distributeDividend(holders[currentIndex],amount);
            
            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
    }
   

    function distributeDividend(address shareholder ,uint256 amount) internal {       
        if( amount < _tTotal.div(10**12) || _tOwned[address(this)]  < amount) return;    
        _tOwned[address(this)] = _tOwned[address(this)].sub(amount);
        _tOwned[shareholder] = _tOwned[shareholder].add(amount);
        emit Transfer(address(this), shareholder, amount);
    }
    function setShare(address shareholder) private {
        if(_updated[shareholder] ){      
            if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);              
            return;  
        }
        if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  
        addShareholder(shareholder);
        _updated[shareholder] = true;          
    }
    function addShareholder(address shareholder) internal {
        holderIndexes[shareholder] = holders.length;
        holders.push(shareholder);
    }
    function quitShare(address shareholder) private {
        removeShareholder(shareholder);   
        _updated[shareholder] = false; 
    }
    function removeShareholder(address shareholder) internal {
        holders[holderIndexes[shareholder]] = holders[holders.length-1];
        holderIndexes[holders[holders.length-1]] = holderIndexes[shareholder];
        holders.pop();
    }

    function _takeLPFee(address sender,uint256 tAmount) private {
        if (_LPFee == 0) return;
        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);
        emit Transfer(sender, address(this), tAmount);
    }

    function _takeInviterFee(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        if (_inviterFee == 0) return;
        address cur;
        address linecur;
        if (isContract(sender)) {  
            cur = recipient;
            linecur = recipient;  
        } else {
            cur = sender;
            linecur = sender;
        }
        uint256 accurRate;
        uint256 rate = 50; 
        for (int256 i = 0; i < 7; i++) {                      
            cur = inviter[cur];  
            if (cur == address(0)) {
                break;
            }
            accurRate = accurRate.add(rate);
            if(_tOwned[cur]  < _tTotal.div(10**7)){  
                addmanp(address(this),tAmount.mul(rate).div(10000));
                emit Transfer(sender, address(this), tAmount.mul(rate).div(10000));
            }else{
                addmanp(cur,tAmount.mul(rate).div(10000));
                emit Transfer(sender, cur, tAmount.mul(rate).div(10000));
            }
        }
        if(offline[linecur].length  == 0){ 
            addmanp(address(this),tAmount.mul(_inviterFee - accurRate).div(10000));  
            emit Transfer(sender, address(this), tAmount.mul(_inviterFee - accurRate).div(10000));
        }else {             
            if(lcycle[linecur] >= offline[linecur].length){  
                lcycle[linecur] = 0;
            }         
            addmanp(offline[linecur][lcycle[linecur]],tAmount.mul(_inviterFee - accurRate).div(10000));            
            emit Transfer(sender, offline[linecur][lcycle[linecur]], tAmount.mul(_inviterFee - accurRate).div(10000));
            lcycle[linecur]++;
        }
    }
    
    function _transferStandard(
        address sender,
        address recipient,
        uint256 tAmount
        ) private {
        uint256 recipientRate = 10000 -
            _burnFee -
            _LPFee -
            _inviterFee;
        bacistransfer(sender,recipient,tAmount,tAmount.mul(recipientRate).div(10000));

        _takeLPFee(sender, tAmount.mul(_LPFee).div(10000));

        _takeInviterFee(sender, recipient, tAmount);

        burntransfer(sender,tAmount.mul(_burnFee).div(10000));
    }

     function addmanp(address recipient,uint256 tAmount) private {
        
        _tOwned[recipient] = _tOwned[recipient].add(tAmount);
           
    }

}