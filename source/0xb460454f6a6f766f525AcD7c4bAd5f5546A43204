// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;
interface IERC20 {

    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
    * @dev Leaves the contract without owner. It will not be possible to call
    * `onlyOwner` functions anymore. Can only be called by the current owner.
    *
    * NOTE: Renouncing ownership will leave the contract without an owner,
    * thereby removing any functionality that is only available to the owner.
    */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function getUnlockTime() public view returns (uint256) {
        return _lockTime;
    }

    //Locks the contract for owner for the amount of time provided
    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = now + time;
        emit OwnershipTransferred(_owner, address(0));
    }

    //Unlocks the contract for owner when _lockTime is exceeds
    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(now > _lockTime , "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}

// pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// pragma solidity >=0.6.2;

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

abstract contract Timing {
    uint32 public constant LOTTERY_DURATION = 1 hours;  // 1 hours
    uint32 public constant SUPER_LOTTERY_DURATION = 8 hours; //8 hours
    uint256 public immutable LAUNCH_TIME;
    uint256 private _lastHeartBeat;
    
    constructor() public{
        LAUNCH_TIME = block.timestamp; 
        _lastHeartBeat = block.timestamp;
    }
    
    function currentLotteryRound() public view returns (uint64) {
        return  uint64((block.timestamp - LAUNCH_TIME) / LOTTERY_DURATION);
    }
    
    function updateLastHeartBeat(uint256 timestamp) internal returns(bool){
        if (timestamp > _lastHeartBeat) {
            _lastHeartBeat = block.timestamp;
            return true;
        }
        return false;
    }
    
    function getLastHeartBeat() public view returns(uint256){
        return _lastHeartBeat;
    } 
    
}

contract Lottery is Timing {
    using SafeMath for uint256;
    
    uint256 private _lotteryRound;
    uint256 private _superLotteryRound;
    
    uint256 private constant LOTTRY_CANDIDATES_NUM = 5;
    uint256 private _numTokensToLottery = 10000000 * 10**18;
    mapping(uint256 => mapping(address =>uint256)) public _buyin;
    mapping(uint256 => address[]) public _buyers;
    mapping(uint256 => address[LOTTRY_CANDIDATES_NUM]) private _topBuyers;
    mapping(uint256 => mapping(address => bool)) private _isTopBuyers;
    mapping(uint256 => bool) private _isLotteryDone;


    struct SuperLotteryRecord {
        address account;
        uint256 time;
    }
    
    uint256 private constant SUPER_LOTTRY_CANDIDATES_NUM = 5;
    uint256[SUPER_LOTTRY_CANDIDATES_NUM] public _superLotteryRewardPercent = [40, 30, 15, 10, 5];
    mapping(uint256 => SuperLotteryRecord[SUPER_LOTTRY_CANDIDATES_NUM]) private _lastBuyers;
    
    event LotteryRewards(uint256 indexed, address[], uint256[]);
    event SuperLotteryRewards(uint256 indexed, address[], uint256[]);
    event LotteryCandidateChange(uint256 indexed,  address indexed, address indexed);
    event SuperLotteryCandidateChange(uint256 indexed, address indexed, address indexed, uint256);
    
    function getLotteryRound() public view returns(uint256){
        return _lotteryRound;
    }
    
    function setLotteryRound(uint256 round) internal {
        if (round > _lotteryRound){
            _lotteryRound = round;
        }
    }
    
    function getLotteryDone(uint256 round) public view returns(bool){
        return _isLotteryDone[round];
    }
    
    function setLotteryDone(uint256 round) internal{
        _isLotteryDone[round] = true;
    }
    
    function getSuperLotteryRound() public view returns(uint256){
        return _superLotteryRound;
    }
    
    function setSuperLotteryRound(uint256 round) internal {
        if(round > _superLotteryRound){
            _superLotteryRound = round;
        }
    }
    
    function getNumTokensToLottery() external view returns (uint256){
        return _numTokensToLottery;
    }
    
    function setNumTokensToLottery(uint256 numTokensToLottery) public {
        _numTokensToLottery = numTokensToLottery;
    }
    
    function minTopBuyer(uint256 round) internal view returns (uint256){
        address[LOTTRY_CANDIDATES_NUM] storage topBuyers = _topBuyers[round];
        uint256 index = 0;
        for (uint256 i= 1; i < LOTTRY_CANDIDATES_NUM; i++){
            if (_buyin[round][topBuyers[index]] > _buyin[round][topBuyers[i]]){
                index = i;
            }
        }
        
        return index;
    }
    
    function getTopBuyers(uint256 round) public view returns(address[] memory){
         address[] memory topBuyers = new address[](_topBuyers[round].length);
         for (uint256 i= 0; i < _topBuyers[round].length; i++){
             if (_topBuyers[round][i] != address(0)){
                 topBuyers[i] = _topBuyers[round][i];
             }
         }
        return topBuyers;
    }
    
    function isTopBuyers(uint256 round, address account) public view returns(bool){
        return _isTopBuyers[round][account];
    } 
    
    function updateLottery(uint256 round, address account, uint256 amount) internal {
        if (_buyin[round][account] == 0){
            _buyers[round].push(account);
        }
          
        _buyin[round][account] = _buyin[round][account].add(amount);   
        
        //if accumulated buyin < _numTokensToLottery, do nothing
        if (_buyin[round][account] < _numTokensToLottery){  
            return;
        }
        
        //if it's not top 5 buyers, update top buyers if necessary
        if (!_isTopBuyers[round][account]){
            uint256 minIndex = minTopBuyer(round);
            address minAccount = _topBuyers[round][minIndex];
            
            if (_buyin[round][account] > _buyin[round][minAccount]){
                _topBuyers[round][minIndex] = account;
                _isTopBuyers[round][account] = true;
                delete _isTopBuyers[round][minAccount];
                
                emit LotteryCandidateChange(round, minAccount, account);
            }
        }
    }
    
    
    function totalBuyInOfTopBuyers(uint256 round) internal view returns (uint256){
        address[LOTTRY_CANDIDATES_NUM] storage topBuyers = _topBuyers[round];
        uint256 total;
        for (uint256 i= 0; i < topBuyers.length; i++){
            if (topBuyers[i] != address(0)){
                total = total.add(_buyin[round][topBuyers[i]]);
            }
        }
        
        return total;
    }
    
    
    function calculateLotteryRewards(uint256 round, uint256 lotteryReward) internal view returns (address[] memory, uint256[] memory, uint256){
        uint256 remain = lotteryReward;
        uint256 total = totalBuyInOfTopBuyers(round);
        address[] memory beneficiaries = new address[](LOTTRY_CANDIDATES_NUM);
        uint256[] memory rewards= new uint256[](LOTTRY_CANDIDATES_NUM);
        
        if (total != 0 && lotteryReward != 0){
            uint256 j = 0;
            for (uint256 i= 0; i < _topBuyers[round].length; i++){
                if (_topBuyers[round][i] != address(0)){
                    beneficiaries[j] = _topBuyers[round][i];
                    rewards[j] = lotteryReward.mul(_buyin[round][beneficiaries[j]]).div(total); 
                    remain = remain.sub(rewards[j]);
                    j++;
                }
            }
        }
        return (beneficiaries, rewards, remain);
    }
    
    function clearLotteryData(uint256 round) internal {
        require(_isLotteryDone[round], "lottery not done");
        for (uint256 i= 0; i < _buyers[round].length; i++){
            address addr = _buyers[round][i];
            delete _buyin[round][addr];
            delete _isTopBuyers[round][addr];
        }
        
        delete _buyers[round];
    }
    
    function earliestBuyer(uint256 round) internal view returns (uint256){
        uint256 index = 0;
        for (uint256 i= 1; i < _lastBuyers[round].length; i++){
            if (_lastBuyers[round][index].time > _lastBuyers[round][i].time){
                index = i;
            }
        }
        
        return index;
    }
    
    function getLastBuyers(uint256 round) public view returns(address[] memory){
        SuperLotteryRecord[] memory candidates = new SuperLotteryRecord[](SUPER_LOTTRY_CANDIDATES_NUM);
        address[] memory lastBuyers = new address[](SUPER_LOTTRY_CANDIDATES_NUM);
        uint256 candidatesLength;
        
        for (uint256 i= 0; i < _lastBuyers[round].length; i++){
             if (_lastBuyers[round][i].account != address(0)){
                 candidates[candidatesLength]  = _lastBuyers[round][i];
                 candidatesLength++;
             }
        }
 
        for (uint256 i= 0; i < candidatesLength - 1; i++){
            for (uint256 j= i + 1; j < candidatesLength; j++){
                if (candidates[i].time < candidates[j].time){
                    (candidates[i], candidates[j]) = (candidates[j], candidates[i]);  //swap
                }
            }
        }
    
        for (uint256 i= 0; i < candidatesLength; i++){
            lastBuyers[i] = candidates[i].account;
        }
        
        
        return lastBuyers;
    } 
    
    
    function updateSuperLottery(uint256 round, address account, uint256 amount, uint256 time) internal {
        if (amount < _numTokensToLottery || account == address(0)){
            return; 
        }
        
        uint256 earliestIndex = earliestBuyer(round);
        if (_lastBuyers[round][earliestIndex].time < time){
            address oldAccount = _lastBuyers[round][earliestIndex].account;
            _lastBuyers[round][earliestIndex].account = account;
            _lastBuyers[round][earliestIndex].time = time;
            
            emit SuperLotteryCandidateChange(round, oldAccount, account, time);
        }  
    }
    

    function calculateSuperLotteryRewards(uint256 round, uint256 lotteryReward) internal view returns(address[] memory, uint256[] memory, uint256){
        address[] memory beneficiaries = new address[](SUPER_LOTTRY_CANDIDATES_NUM);
        uint256[] memory rewards= new uint256[](SUPER_LOTTRY_CANDIDATES_NUM);
        SuperLotteryRecord[] memory candidates = new SuperLotteryRecord[](SUPER_LOTTRY_CANDIDATES_NUM);
        uint256 remain = lotteryReward;
        
        uint256 candidatesLength;
        for (uint256 i = 0; i < _lastBuyers[round].length; i++){
             if (_lastBuyers[round][i].account != address(0)){
                 candidates[candidatesLength]  = _lastBuyers[round][i];
                 candidatesLength++;
             }
        }
        
        if (candidatesLength != 0 && lotteryReward != 0){
            for (uint256 i = 0; i < candidatesLength - 1; i++){
                for (uint256 j= i + 1; j < candidatesLength; j++){
                    if (candidates[i].time < candidates[j].time){
                        (candidates[i], candidates[j]) = (candidates[j], candidates[i]);  //swap
                    }
                }
            }
        
            for (uint256 i = 0; i < candidatesLength; i++){
                beneficiaries[i] = candidates[i].account;
                rewards[i] = lotteryReward.mul(_superLotteryRewardPercent[i]).div(100);
                remain = remain.sub(rewards[i]);
            }
        }
     
        return (beneficiaries, rewards, remain);
    }
    
}
contract FOMO3D is Context, IERC20, Ownable, Lottery{
    using SafeMath for uint256;
    using Address for address;
    
    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    address[] private _excludedFromFee;

    mapping (address => bool) private _isExcluded;
    address[] private _excluded;
    address public _developer;

    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal = 800000000000 * 10**18;   
    uint256 public _maxTxAmount = 80000000 * 10**18;
    uint256 private _numTokensSellToAddToLiquidity = 5000 * 10**18;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
    
    string private _name = "FOMO 3D";
    string private _symbol = "FM3D";
    uint8 private  _decimals = 18;

    uint256 public _taxFee = 2;       // 
    uint256 public _liquidityFee = 4;
    uint256 public _developerFee = 2;  //fixed to 2%
    uint256 public _lotteryFee = 10;

    uint256 constant  ALLFEE_NUMBER = 4;
    uint256 constant  TAXFEE_INDEX = 0;
    uint256 constant  LIQUIDITYFEE_INDEX = 1;
    uint256 constant  DEVELOPERFEE_INDEX = 2;
    uint256 constant  LOTTERYFEE_INDEX= 3;

    //in rValues and tValues array, amount, transferamount, fee, liquidity, dev, lottery are orginzed like below.
    uint256 constant AMOUNT_INDEX = 0;
    uint256 constant TRANSFERAMOUNT_INDEX = 1;
    uint256 constant TAX_INDEX = 2;
    uint256 constant LIQUIDITY_INDEX = 3;
    uint256 constant DEVELOPER_INDEX = 4;
    uint256 constant LOTTERY_INDEX = 5;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;

    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;
    address public constant BLACKHOLE = 0x0000000000000000000000000000000000000000;
    address private constant LOTTERYTREASURE = address(uint160(bytes20(keccak256("LOTTERY")))); //0x3A98dA9F150131DE466fBa46b533A35c45BbfFeE
    uint256 private enterCount = 0;

    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );
    
    modifier lockTheSwap {
        require(!inSwapAndLiquify, "in swap and liquidity");
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
    

    constructor (address developer) public {
        _rOwned[_msgSender()] = _rTotal;
        _developer = developer;
        
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //testnet 0xD99D1c33F9fC3444f8101754aBC46c52416550D1
        // Create a uniswap pair for this new token
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
        .createPair(address(this), _uniswapV2Router.WETH());

        // set the rest of the contract variables
        uniswapV2Router = _uniswapV2Router;

        //exclude owner,  this contract, blackhole and lotterytreasure from fee
        _isExcludedFromFee[_msgSender()] = true;
        _excludedFromFee.push(_msgSender());

        _isExcludedFromFee[address(this)] = true;
        _excludedFromFee.push(address(this));

        _isExcludedFromFee[LOTTERYTREASURE] = true;
        _excludedFromFee.push(LOTTERYTREASURE);
        
        _isExcludedFromFee[_developer] = true;
        _excludedFromFee.push(_developer);

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function setDeveloper(address developer) public {
        require(_msgSender() == owner() || _msgSender() == _developer, "UnAuthorized");
        includeInFee(_developer);
        excludeFromFee(developer);
        _developer = developer;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function isExcludedFromReward(address account) public view returns (bool) {
        return _isExcluded[account];
    }

    function exluded(uint256 index) public view returns (address){
        return _excluded[index];
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }


    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        (uint256[6] memory rValues,)  = _getValues(tAmount, _getFeeRates());

        if (!deductTransferFee) {
            uint256 rAmount = rValues[AMOUNT_INDEX];
            return rAmount;
        } else {
            uint256 rTransferAmount = rValues[TRANSFERAMOUNT_INDEX];
            return rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    function excludeFromReward(address account) public onlyOwner() {
        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
        require(!_isExcluded[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    }

    function includeInReward(address account) external onlyOwner() {
        require(_isExcluded[account], "Account is already included");
        require(account != LOTTERYTREASURE, "LOTTERYTREASURE is not allowed included");
        require(account != BLACKHOLE, "BLACKHOLE is not allowed included");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == account) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _tOwned[account] = 0;
                _isExcluded[account] = false;
                _excluded.pop();
                break;
            }
        }
    }

    function excludeFromFee(address account) public onlyOwner {
        require(!_isExcludedFromFee[account], "Account is already excluded");
        _isExcludedFromFee[account] = true;
        _excludedFromFee.push(account);
    }

    function includeInFee(address account) public onlyOwner {
        require(_isExcludedFromFee[account], "Account is already included");
        for (uint256 i; i < _excludedFromFee.length;i++){
            if (_excludedFromFee[i] == account){
                _isExcludedFromFee[account] = false;
                _excludedFromFee[i] = _excludedFromFee[_excludedFromFee.length - 1];
                _excludedFromFee.pop();
            }
        }
    }

    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
        require(taxFee < 100, "taxFee >= 100");
        _taxFee = taxFee;
    }

    function setLotteryFeePercent(uint256 lotteryFee) external onlyOwner(){
        require(lotteryFee < 100, "lotteryFee >= 100");
        _lotteryFee = lotteryFee;
    }

    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
        require(liquidityFee < 100, "liquidityFee >= 100");
        _liquidityFee = liquidityFee;
    }


    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
        require(maxTxPercent <= 10000, "maxTxPercent > 10000");
        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10000);
    }

    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }

    function trigAddLiquidityManually() external returns(bool){
        uint256 tContractTokenBalance = balanceOf(address(this));
        if(tContractTokenBalance >= _maxTxAmount)
        {
            tContractTokenBalance = _maxTxAmount;
        }

        bool overMinTokenBalance = tContractTokenBalance >= _numTokensSellToAddToLiquidity;
        if (
            overMinTokenBalance &&
            !inSwapAndLiquify &&
            _msgSender() != uniswapV2Pair &&
            swapAndLiquifyEnabled
        ) {
            tContractTokenBalance = _numTokensSellToAddToLiquidity;
            //add liquidity
            swapAndLiquify(tContractTokenBalance);
        }
        return true;
    }


    function getValues(uint256 amount) public view returns (uint256[6] memory, uint256[6] memory){
        return _getValues(amount, _getFeeRates());
    }

    function lotteryPool( ) public view returns (uint256){
        return balanceOf(LOTTERYTREASURE);
    }

    function lotteryTreasure() public pure returns (address){
        return LOTTERYTREASURE;
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    function _getValues(uint256 tAmount, uint256[ALLFEE_NUMBER] memory feeRates) private view returns (uint256[6] memory, uint256[6] memory) {
        uint256[6] memory tValues = _getTValues(tAmount, feeRates);
        uint256[6] memory rValues = _getRValues(tValues, _getRate());
        return (rValues, tValues);
    }

    function _getTValues(uint256 tAmount, uint256[ALLFEE_NUMBER] memory feeRates) private pure returns (uint256[6] memory) {
        uint256[6] memory tValues;
        tValues[0] = tAmount;
        tValues[2] = calculateTaxFee(tAmount, feeRates[TAXFEE_INDEX]);
        tValues[3] = calculateLiquidityFee(tAmount, feeRates[LIQUIDITYFEE_INDEX]);
        tValues[4] = calculateDeveloperFee(tAmount, feeRates[DEVELOPERFEE_INDEX]);
        tValues[5] = calculateLotteryFee(tAmount, feeRates[LOTTERYFEE_INDEX]);
        tValues[1] = tValues[0].sub(tValues[2]).sub(tValues[3]).sub(tValues[4]).sub(tValues[5]);
        return tValues;
    }


    function _getRValues(uint256[6] memory tValues, uint256 currentRate) private pure returns (uint256[6] memory) {
        uint[6] memory rValues;
        rValues[0] = tValues[0].mul(currentRate);
        rValues[2] = tValues[2].mul(currentRate);
        rValues[3] = tValues[3].mul(currentRate);
        rValues[4] = tValues[4].mul(currentRate);
        rValues[5] = tValues[5].mul(currentRate);
        rValues[1]  = rValues[0].sub(rValues[2]).sub(rValues[3]).sub(rValues[4]).sub(rValues[5]);
        return rValues;
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
            rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            tSupply = tSupply.sub(_tOwned[_excluded[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _takeLiquidity(uint256 rLiquidity, uint256 tLiquidity) private {
        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
        if(_isExcluded[address(this)])
            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
    }

    function _takeDeveloper(uint256 rDeveloper, uint256 tDeveloper) private {
        _rOwned[_developer] = _rOwned[_developer].add(rDeveloper);
        if(_isExcluded[_developer])
            _tOwned[_developer] = _tOwned[_developer].add(tDeveloper);
    }

    function _takeLottery(uint256 rLottery,uint256 tLottery) private {
        _rOwned[LOTTERYTREASURE] = _rOwned[LOTTERYTREASURE].add(rLottery);
        if(_isExcluded[LOTTERYTREASURE])
            _tOwned[LOTTERYTREASURE] = _tOwned[LOTTERYTREASURE].add(tLottery);
    }

    function calculateTaxFee(uint256 amount, uint256 taxFee) private pure returns (uint256) {
        return amount.mul(taxFee).div(
            10**2
        );
    }

    function calculateLiquidityFee(uint256 amount, uint256 liquidityFee) private pure returns (uint256) {
        return amount.mul(liquidityFee).div(
            10**2
        );
    }

    function calculateDeveloperFee(uint256 amount, uint256 developerFee) private pure returns (uint256) {
        return amount.mul(developerFee).div(
            10**2
        );
    }

    function calculateLotteryFee(uint256 amount, uint256 lotteryFee) private pure returns (uint256) {
        return amount.mul(lotteryFee).div(
            10**2
        );
    }

    function _getFeeRates( ) private view returns (uint256[ALLFEE_NUMBER] memory){
        uint256[ALLFEE_NUMBER] memory feeRates;
        feeRates = [_taxFee, _liquidityFee, _developerFee, _lotteryFee];
        return feeRates;
    }

    function isExcludedFromFee(address account) public view returns(bool) {
        return _isExcludedFromFee[account];
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    
    function distributeRewards(address[] memory beneficiaries, uint256[] memory tRewards, uint256 tLottery, uint256 tRemain, uint256 rate) private {
        {
            uint256 tUsed = tLottery.sub(tRemain);
            uint256 rUsed = tUsed.mul(rate);
            _rOwned[LOTTERYTREASURE] = _rOwned[LOTTERYTREASURE].sub(rUsed);
            if(_isExcluded[LOTTERYTREASURE]){
                _tOwned[LOTTERYTREASURE] = _tOwned[LOTTERYTREASURE].sub(tUsed);
            }
        }
        
        for (uint256 i = 0; i < beneficiaries.length; i++){
            uint256 rReward = tRewards[i].mul(rate);
            address beneficiary = beneficiaries[i];
            _rOwned[beneficiary] = _rOwned[beneficiary].add(rReward);
             if(_isExcluded[beneficiary]){
                _tOwned[beneficiary] = _tOwned[beneficiary].add(tRewards[i]);
            }
        }
    }
    
    
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        if(from != owner() && to != owner())
            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");

        // is the token balance of this contract address over the min number of
        // tokens that we need to initiate a swap + liquidity lock?
        // also, don't get caught in a circular liquidity event.
        // also, don't swap & liquify if sender is uniswap pair.
        uint256 contractTokenBalance = balanceOf(address(this));

        if(contractTokenBalance >= _maxTxAmount)
        {
            contractTokenBalance = _maxTxAmount;
        }

        bool overMinTokenBalance = contractTokenBalance >= _numTokensSellToAddToLiquidity;
        if (
            overMinTokenBalance &&
            !inSwapAndLiquify &&
            from != uniswapV2Pair &&
            swapAndLiquifyEnabled
        ) {
            contractTokenBalance = _numTokensSellToAddToLiquidity;
            //add liquidity
            swapAndLiquify(contractTokenBalance);
        }
        
        //indicates if fee should be deducted from transfer
        bool takeFee = true;
        //if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
            takeFee = false;
        }
   
       
        if (!inSwapAndLiquify){
             //do lottery and supper lottery
            uint256 newLotteryRound = currentLotteryRound();
            uint256 lotteryRound = getLotteryRound();
            uint256 superLottreyRound = getSuperLotteryRound();
            uint256 lotteryBalance = balanceOf(LOTTERYTREASURE);
            
            if (newLotteryRound > lotteryRound && !getLotteryDone(lotteryRound)){
                uint256 tLottery = lotteryBalance.div(20);  //5 % for lottery
                (address[] memory beneficiaries, uint256[] memory tRewards, uint256 tRemain) = calculateLotteryRewards(lotteryRound, tLottery);
                
                if (beneficiaries.length != 0) {
                    distributeRewards(beneficiaries, tRewards, tLottery, tRemain, _getRate());
                    emit LotteryRewards(lotteryRound, beneficiaries,tRewards);
                    setLotteryDone(lotteryRound);
                    clearLotteryData(lotteryRound);
                }
                
                //mark all lottery done till newLotteryRound
                if (lotteryRound + 1 < newLotteryRound){
                    address[] memory emptyBeneficiaries = new address[](0);
                    uint256[] memory emptyRewards = new uint256[](0);
                    for (uint256 i = lotteryRound + 1; i < newLotteryRound; i++){
                        emit LotteryRewards(i, emptyBeneficiaries, emptyRewards);
                        setLotteryDone(i);
                    }
                }
                setLotteryRound(newLotteryRound);
            } 
            
            if (block.timestamp.sub(getLastHeartBeat()) >= SUPER_LOTTERY_DURATION){
                uint256 tLottery = lotteryBalance.mul(4).div(5);  //80% for super lottery
                (address[] memory beneficiaries, uint256[] memory tRewards, uint256 tRemain) = calculateSuperLotteryRewards(superLottreyRound, tLottery);
                
                if (beneficiaries.length != 0) {
                    distributeRewards(beneficiaries, tRewards, tLottery, tRemain, _getRate());
                }
                emit SuperLotteryRewards(superLottreyRound, beneficiaries,tRewards);
                setSuperLotteryRound(superLottreyRound + 1);
                updateLastHeartBeat(block.timestamp);
            }
            
            //do not include uniswappair and uniswaprouter  in
            if (takeFee && to != uniswapV2Pair && to != address(uniswapV2Router)){
                updateLastHeartBeat(block.timestamp);
                lotteryRound = getLotteryRound();
                superLottreyRound = getSuperLotteryRound();
                updateLottery(lotteryRound, to, amount);
                updateSuperLottery(superLottreyRound, to, amount, block.timestamp);
            }
            
        }

        //transfer amount, it will take tax, burn, liquidity fee
        _tokenTransfer(from,to,amount,takeFee);
    }

    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        // split the contract balance into halves
        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);

        // capture the contract's current ETH balance.
        // this is so that we can capture exactly the amount of ETH that the
        // swap creates, and not make the liquidity event include any ETH that
        // has been manually sent to the contract
        uint256 initialBalance = address(this).balance;

        // swap tokens for ETH
        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered

        // how much ETH did we just swap into?
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // add liquidity to uniswap
        addLiquidity(otherHalf, newBalance);

        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            BLACKHOLE, 
            block.timestamp
        );
    }

    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
        uint256[ALLFEE_NUMBER] memory feeRates;
        if (takeFee) {
            feeRates = _getFeeRates();
        }

        //optimze for gas saving
        if (!_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferStandard(sender, recipient, amount,feeRates);
        }else if(!_isExcluded[sender] && _isExcluded[recipient]){
            _transferToExcluded(sender, recipient, amount, feeRates);
        }else if(_isExcluded[sender] && !_isExcluded[recipient]){
            _transferFromExcluded(sender, recipient, amount, feeRates);
        }else{
            _transferBothExcluded(sender, recipient, amount, feeRates);
        }
    }


    function _transferStandard(address sender, address recipient, uint256 amount, uint256[ALLFEE_NUMBER] memory feeRates) private {
        (uint256[6] memory rValues, uint256[6] memory tValues) = _getValues(amount, feeRates);
        {
            uint256 rAmount = rValues[AMOUNT_INDEX];
            _rOwned[sender] = _rOwned[sender].sub(rAmount);
        }

        {
            uint256 rTransferAmount = rValues[TRANSFERAMOUNT_INDEX];
            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        }

        {
            uint256 rLiquidity = rValues[LIQUIDITY_INDEX];
            uint256 tLiquidity = tValues[LIQUIDITY_INDEX];
            _takeLiquidity(rLiquidity, tLiquidity);
        }
        {
            uint256 rDeveloper = rValues[DEVELOPER_INDEX];
            uint256 tDeveloper = tValues[DEVELOPER_INDEX];
            _takeDeveloper(rDeveloper, tDeveloper);
        }
        {
            uint256 rLottery = rValues[LOTTERY_INDEX];
            uint256 tLottery = tValues[LOTTERY_INDEX];
            _takeLottery(rLottery, tLottery);
        }
        {
            uint256 rFee = rValues[TAX_INDEX];
            uint256 tFee = tValues[TAX_INDEX];
            _reflectFee(rFee, tFee);
        }
        
        uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferToExcluded(address sender, address recipient, uint256 amount, uint256[ALLFEE_NUMBER] memory feeRates) private {
        (uint256[6] memory rValues, uint256[6] memory tValues) = _getValues(amount, feeRates);
        {
            uint256 rAmount = rValues[AMOUNT_INDEX];
            _rOwned[sender] = _rOwned[sender].sub(rAmount);
        }

        {
            uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];
            uint256 rTransferAmount = rValues[TRANSFERAMOUNT_INDEX];
            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        }

        // according current implementation, all fees are are zero if sender or recipient is excluded from fee.
        //   {
        //         uint256 rLiquidity = rValues[LIQUIDITY_INDEX];
        //         uint256 tLiquidity = tValues[LIQUIDITY_INDEX];
        //         _takeLiquidity(rLiquidity, tLiquidity);
        //     }
        //     {
        //         uint256 rBurn = rValues[BURN_INDEX];
        //         uint256 tBurn = tValues[BURN_INDEX];
        //         _takeBurn(rBurn, tBurn);
        //     }
        //     {
        //         uint256 rLottery = rValues[LOTTERY_INDEX];
        //         uint256 tLottery = tValues[LOTTERY_INDEX];
        //         _takeLottery(rLottery, tLottery);
        //     }
        //     {
        //         uint256 rFee = rValues[TAX_INDEX];
        //         uint256 tFee = tValues[TAX_INDEX];
        //         _reflectFee(rFee, tFee);
        //     }

        uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferFromExcluded(address sender, address recipient,  uint256 amount, uint256[ALLFEE_NUMBER] memory feeRates) private {
        (uint256[6] memory rValues, uint256[6] memory tValues) = _getValues(amount, feeRates);
        {
            uint256 rAmount = rValues[AMOUNT_INDEX];
            _tOwned[sender] = _tOwned[sender].sub(amount);
            _rOwned[sender] = _rOwned[sender].sub(rAmount);
        }
        {
            uint256 rTransferAmount = rValues[TRANSFERAMOUNT_INDEX];
            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        }
        // according current implementation, all fees are are zero if sender or recipient is excluded from fee.
        // {
        //     uint256 rLiquidity = rValues[LIQUIDITY_INDEX];
        //     uint256 tLiquidity = tValues[LIQUIDITY_INDEX];
        //     _takeLiquidity(rLiquidity, tLiquidity);
        // }
        // {
        //     uint256 rBurn = rValues[BURN_INDEX];
        //     uint256 tBurn = tValues[BURN_INDEX];
        //     _takeBurn(rBurn, tBurn);
        // }
        // {
        //     uint256 rLottery = rValues[LOTTERY_INDEX];
        //     uint256 tLottery = tValues[LOTTERY_INDEX];
        //     _takeLottery(rLottery, tLottery);
        // }
        // {
        //     uint256 rFee = rValues[TAX_INDEX];
        //     uint256 tFee = tValues[TAX_INDEX];
        //     _reflectFee(rFee, tFee);
        // }

        uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferBothExcluded(address sender, address recipient,  uint256 amount, uint256[ALLFEE_NUMBER] memory feeRates) private {
        (uint256[6] memory rValues, uint256[6] memory tValues) = _getValues(amount, feeRates);
        {
            uint256 rAmount = rValues[AMOUNT_INDEX];
            _tOwned[sender] = _tOwned[sender].sub(amount);
            _rOwned[sender] = _rOwned[sender].sub(rAmount);
        }
        {
            uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];
            uint256 rTransferAmount = rValues[TRANSFERAMOUNT_INDEX];
            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        }
        // according current implementation, all fees are are zero if sender or recipient is excluded from fee.
        // {
        //     uint256 rLiquidity = rValues[LIQUIDITY_INDEX];
        //     uint256 tLiquidity = tValues[LIQUIDITY_INDEX];
        //     _takeLiquidity(rLiquidity, tLiquidity);
        // }
        // {
        //     uint256 rBurn = rValues[BURN_INDEX];
        //     uint256 tBurn = tValues[BURN_INDEX];
        //     _takeBurn(rBurn, tBurn);
        // }
        // {
        //     uint256 rLottery = rValues[LOTTERY_INDEX];
        //     uint256 tLottery = tValues[LOTTERY_INDEX];
        //     _takeLottery(rLottery, tLottery);
        // }
        // {
        //     uint256 rFee = rValues[TAX_INDEX];
        //     uint256 tFee = tValues[TAX_INDEX];
        //     _reflectFee(rFee, tFee);
        // }

        uint256 tTransferAmount = tValues[TRANSFERAMOUNT_INDEX];
        emit Transfer(sender, recipient, tTransferAmount);
    }

}