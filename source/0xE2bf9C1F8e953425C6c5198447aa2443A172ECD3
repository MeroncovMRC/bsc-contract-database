
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/interfaces/IWormholeCore.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

interface IWormholeCore {
    function publishMessage(
        uint32 nonce,
        bytes memory payload,
        uint8 consistencyLevel
    ) external payable returns (uint64 sequence);

    function parseAndVerifyVM(bytes calldata encodedVM)
        external
        view
        returns (
            IWormholeCore.VM memory vm,
            bool valid,
            string memory reason
        );

    struct Signature {
        bytes32 r;
        bytes32 s;
        uint8 v;
        uint8 guardianIndex;
    }

    struct VM {
        uint8 version;
        uint32 timestamp;
        uint32 nonce;
        uint16 emitterChainId;
        bytes32 emitterAddress;
        uint64 sequence;
        uint8 consistencyLevel;
        bytes payload;
        uint32 guardianSetIndex;
        Signature[] signatures;
        bytes32 hash;
    }
}


// File: contracts/lib/LibBytes.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

library LibBytes {
    using LibBytes for bytes;

    function toAddress(bytes memory self, uint256 start)
        internal
        pure
        returns (address)
    {
        return address(uint160(uint256(self.toBytes32(start))));
    }

    function toBool(bytes memory self, uint256 start)
        internal
        pure
        returns (bool)
    {
        return self.toUint8(start) == 1 ? true : false;
    }

    function toUint8(bytes memory self, uint256 start)
        internal
        pure
        returns (uint8)
    {
        require(self.length >= start + 1, "LibBytes: toUint8 outOfBounds");
        uint8 tempUint;

        assembly {
            tempUint := mload(add(add(self, 0x1), start))
        }

        return tempUint;
    }

    function toUint16(bytes memory self, uint256 start)
        internal
        pure
        returns (uint16)
    {
        require(self.length >= start + 2, "LibBytes: toUint16 outOfBounds");
        uint16 tempUint;

        assembly {
            tempUint := mload(add(add(self, 0x2), start))
        }

        return tempUint;
    }

    function toUint24(bytes memory self, uint256 start)
        internal
        pure
        returns (uint24)
    {
        require(self.length >= start + 3, "LibBytes: toUint24 outOfBounds");
        uint24 tempUint;

        assembly {
            tempUint := mload(add(add(self, 0x3), start))
        }

        return tempUint;
    }

    function toUint64(bytes memory self, uint256 start)
        internal
        pure
        returns (uint64)
    {
        require(self.length >= start + 8, "LibBytes: toUint64 outOfBounds");
        uint64 tempUint;

        assembly {
            tempUint := mload(add(add(self, 0x8), start))
        }

        return tempUint;
    }

    function toUint256(bytes memory self, uint256 start)
        internal
        pure
        returns (uint256)
    {
        require(self.length >= start + 32, "LibBytes: toUint256 outOfBounds");
        uint256 tempUint;

        assembly {
            tempUint := mload(add(add(self, 0x20), start))
        }

        return tempUint;
    }

    function toBytes32(bytes memory self, uint256 start)
        internal
        pure
        returns (bytes32)
    {
        require(self.length >= start + 32, "LibBytes: toBytes32 outOfBounds");
        bytes32 tempBytes32;

        assembly {
            tempBytes32 := mload(add(add(self, 0x20), start))
        }

        return tempBytes32;
    }

    function toString(bytes memory self, uint256 start)
        internal
        pure
        returns (string memory)
    {
        return string(abi.encode(self.toBytes32(start)));
    }

    function parseDepositInfo(bytes memory self)
        internal
        pure
        returns (
            address senderAddress,
            uint256 chainId,
            uint256 amount,
            string memory symbol
        )
    {
        uint256 i = 0;

        senderAddress = self.toAddress(i);
        i += 32;
        chainId = self.toUint256(i);
        i += 32;
        amount = self.toUint256(i);
        i += 32;
        symbol = self.toString(i);
        i += 32;
    }

    function parseSwapInfo(bytes memory self)
        internal
        pure
        returns (
            address senderAddress,
            address destinationAssetAddress,
            uint256 swappingChain,
            uint256 amountIn,
            uint256 amountOutMin,
            string memory symbol
        )
    {
        uint256 i = 0;

        senderAddress = self.toAddress(i);
        i += 32;

        destinationAssetAddress = self.toAddress(i);
        i += 32;

        swappingChain = self.toUint256(i);
        i += 32;

        amountIn = self.toUint256(i);
        i += 32;

        amountOutMin = self.toUint256(i);
        i += 32;

        symbol = self.toString(i);
        i += 32;
    }

    function parseSwappedInfo(bytes memory self)
        internal
        pure
        returns (
            address senderAddress,
            uint256 swappingChain,
            uint256 amountIn,
            address destinationAssetAddress,
            uint256 amountOut,
            string memory symbol
        )
    {
        uint256 i = 0;
        senderAddress = self.toAddress(i);
        i += 32;
        swappingChain = self.toUint256(i);
        i += 32;
        amountIn = self.toUint256(i);
        i += 32;
        destinationAssetAddress = self.toAddress(i);
        i += 32;
        amountOut = self.toUint256(i);
        i += 32;
        symbol = self.toString(i);
        i += 32;
    }
}


// File: contracts/Phoenix.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/IWormholeCore.sol";
import "./lib/LibBytes.sol";

contract Phoenix is Ownable {
    using LibBytes for bytes;

    mapping(uint256 => mapping(address => string)) public mappedList;
    mapping(address => bool) public isTokenListed;
    mapping(address => mapping(string => uint256)) public internalBalances;

    address public coreAddress;
    uint8 public consistencyLevel;

    constructor(address _coreAddress, uint8 _consistencyLevel) {
        coreAddress = _coreAddress;
        consistencyLevel = _consistencyLevel;
    }

    function listedToken(address tokenAddress) external view returns (bool) {
        if (isTokenListed[tokenAddress]) {
            return true;
        } else {
            return false;
        }
    }

    // To-Do: create an array input for listing tokens

    function listTokens(
        uint256 chainId,
        address tokenAddress,
        string memory symbol
    ) public onlyOwner {
        require(!isTokenListed[tokenAddress], "Phoenix: token already listed");

        mappedList[chainId][tokenAddress] = symbol;
        // example: there is USDC on matic and eth, mappedList[5][0x..]="USDC", mappedlist[1][0x..]="USDC"
        isTokenListed[tokenAddress] = true;
    }

    function getVM(bytes memory encodedVm)
        private
        view
        returns (IWormholeCore.VM memory)
    {
        (
            IWormholeCore.VM memory vm,
            bool valid,
            string memory reason
        ) = IWormholeCore(coreAddress).parseAndVerifyVM(encodedVm);
        require(valid, reason);

        return vm;
    }

    function getDepositPayload(bytes memory encodedVm)
        public
        view
        returns (
            address senderAddress,
            uint256 chainId,
            uint256 amount,
            string memory symbol,
            uint64 sequence
        )
    {
        IWormholeCore.VM memory vm = getVM(encodedVm);

        sequence = vm.sequence;
        (senderAddress, chainId, amount, symbol) = vm
            .payload
            .parseDepositInfo();
    }

    function updateDepositBalance(bytes memory data) external {
        (
            address senderAddress,
            uint256 chainId,
            uint256 amount,
            string memory symbol,
            uint64 sequence
        ) = getDepositPayload(data);
        internalBalances[senderAddress][symbol] += amount;
    }

    // ADD getPayload and get VM function
    // convert to Multi-call function

    function swapInfo(
        string memory symbol,
        address destinationAssetAddress,
        uint256 swappingChain,
        uint256 amountIn,
        uint256 amountOutMin
    ) internal returns (uint64 coreSequence) {
        require(
            internalBalances[msg.sender][symbol] <= amountIn,
            "Phoenix: insufficient swapping amount"
        );

        require(
            isTokenListed[destinationAssetAddress],
            "Phoenix: destination asset not listed"
        );

        bytes memory payload = abi.encodePacked(
            address(this),
            bytes32(uint256(uint160(address(destinationAssetAddress)))),
            swappingChain,
            amountIn,
            amountOutMin,
            bytes32(bytes(symbol))
        );

        coreSequence = IWormholeCore(coreAddress).publishMessage(
            uint32(block.timestamp % 2**32),
            payload,
            consistencyLevel
        );
    }

    function parseSwappedInfo(bytes memory data) external {
        (
            address senderAddress,
            uint256 swappingChain,
            uint256 amountIn,
            address destinationAssetAddress,
            uint256 amountOut,
            string memory sourceAssetSymbol
        ) = LibBytes.parseSwappedInfo(data);

        string memory destinationAssetSymbol = mappedList[swappingChain][
            destinationAssetAddress
        ];

        internalBalances[senderAddress][sourceAssetSymbol] -= amountIn;
        internalBalances[senderAddress][destinationAssetSymbol] += amountOut;
    }
}

