pragma solidity >=0.8.0;
contract PersianToken{
    string public name = 'Persian';
    string public symbol = 'Persian';
    uint8 public decimals = 18;
    uint256 public totalSupply=21000 ether;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed _owner, address indexed _spender, uint _value);
    function _transfer(address _from, address _to, uint _value) internal {
        
        require(balanceOf[_from] >= _value,'balanceOf[_from] >= _value');
        require(balanceOf[_to] + _value > balanceOf[_to],'balanceOf[_to] + _value > balanceOf[_to]');
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;  
        emit Transfer(_from, _to, _value);
        require(balanceOf[_from] + balanceOf[_to] == previousBalances,'balanceOf[_from] + balanceOf[_to] == previousBalances');
    }
    function transfer(address _to, uint256 _value) public returns (bool) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    //uint256 public allOutPut;
    mapping(uint => address)public logicAddress;
    address public admin;
    constructor() {
        admin = msg.sender;
        balanceOf[0x1Ad8D2De7578F450aC99907E9B57c0d297066864]=totalSupply;
    }
    
    function setLogicAddress(uint adminID,address addr)public{
        require(msg.sender==admin,'msg.sender==admin');
        logicAddress[adminID] = addr;
    }
    function transferLogic(address user,uint256 value)public returns(bool ret){        
        uint i=1;
        while(logicAddress[i]!=address(0x0)){
            if(logicAddress[i] == msg.sender){
                _transfer(address(this),user,value);
                return true; 
            }
            i++;
        }        
        require(false,'msg.sender == logicAddress');
    }

}