{"BaseERC20.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"./Context.sol\";\nimport \"./Ownable.sol\";\n\ncontract BaseERC20 is Context, Ownable {\n    mapping(address =\u003e uint256) internal _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) internal _allowances;\n\n    string internal _name;\n    string internal _symbol;\n\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 totalSupply_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n        _totalSupply = totalSupply_ * 10**_decimals;\n    }\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(_balances[sender] \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"IUniswapV2Factory.sol":{"content":"pragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"IUniswapV2Pair.sol":{"content":"pragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"IUniswapV2Router01.sol":{"content":"pragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"IUniswapV2Router02.sol":{"content":"pragma solidity \u003e=0.6.2;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"StakeMars.sol":{"content":"/**\n    StakeMars Protocol (\"STM\")\n\n    This project was launched as a fairlaunch.\n\n    Features:\n\n    10% fees per transaction\n    - 4% fee per transaction : auto add to the liquidity pool\n    - 4% fee per transaction : allocate to STM stakers\n    - 1% fee per transaction : burn to dead wallet\n    - 1% fee per transaction : marketing and operational expenses\n\n    100,000,000 total supply\n\n    TELEGRAM: https://t.me/StakeMars\n    WEBSITE: https://www.StakeMars.com/\n*/\n\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"./IUniswapV2Pair.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./BaseERC20.sol\";\n\ninterface IStaking {\n    function distribute() external payable;\n}\n\ncontract StakeMars is BaseERC20 {\n    mapping(address =\u003e bool) private _whitelist;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n\n    IStaking public stakingAddress;\n\n    // Marketing wallet\n    address public mktAddress;\n\n    // Burn wallet\n    address public constant burnTo = address(0x000000000000000000000000000000000000dEaD);\n\n    // 10% tax, 4% to stake contract, 4% LP, 1% burn and 1% marketing expenses\n    uint8 private constant swapPercentage = 10;\n    uint256 private minSwapAmount;\n    uint256 private maxSwapAmount;\n\n    // Set Max transaction\n    uint256 public maxTxAmountBuy = 100000 * 10**18;\n    uint256 public maxTxAmountSell = 100000 * 10**18;\n\n    //Transction types\n    uint256 private buying = 0;\n    uint256 private selling = 1;\n    uint256 private transferring = 2;\n\n    // Supply: 100,000,000 (10^8)\n    constructor() BaseERC20(\"StakeMars Protocol\", \"STM\", 18, 10**8) {\n        _balances[_msgSender()] = _totalSupply;\n        minSwapAmount = 1000 * 10**_decimals;\n        maxSwapAmount = 12000 * 10**_decimals;\n\n        // Pancakeswap (Testnet): 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\n        // Pancakeswap (Testnet2): 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\n        // Pancakeswap v2 (Mainnet): 0x10ED43C718714eb63d5aA57B78B54704E256024E\n        IUniswapV2Router02 _uniswapV2Router =\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n        .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n\n        // Dead wallet, Contract and owner should always be whitelisted\n        _whitelist[burnTo] = true;\n        _whitelist[address(this)] = true;\n        _whitelist[owner()] = true;\n\n        emit Transfer(address(0), _msgSender(), _totalSupply);\n    }\n\n    /**\n     * ERC20 functions \u0026 helpers\n     */\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal override {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(\n            _balances[sender] \u003e= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        if (_isWhitelisted(sender, recipient)) {\n            _noFeeTransfer(sender, recipient, amount);\n        } else {\n            uint256 tType = selling;\n            if(sender != uniswapV2Pair \u0026\u0026 recipient != uniswapV2Pair) tType = transferring;\n            else if(sender == uniswapV2Pair) tType = buying;\n            if(tType == 0){ //Buy\n                require(amount \u003c= maxTxAmountBuy, \"Transfer amount exceeds the maxTxAmountBuy.\");\n            }else if(tType == 1){ //Sell\n                require(amount \u003c= maxTxAmountSell, \"Transfer amount exceeds the maxTxAmountSell.\");\n            }\n            _feeTransfer(sender, recipient, amount);\n        }\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _feeTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        _swap(sender);\n        uint256 tax = (amount * swapPercentage) / 100;\n        uint256 mktAmount = tax / 10;\n        uint256 addLpBurnAndStakeAmount = tax - (mktAmount * 2);\n        _balances[address(this)] += addLpBurnAndStakeAmount;\n        _balances[mktAddress] += mktAmount;\n        _balances[burnTo] += mktAmount;\n        _balances[sender] -= amount;\n        _balances[recipient] += amount - tax;\n    }\n\n    function _noFeeTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n    }\n\n    function _isWhitelisted(address address1, address address2)\n    private\n    view\n    returns (bool)\n    {\n        return _whitelist[address1] || _whitelist[address2];\n    }\n\n    /**\n     * Uniswap code \u0026 distribute method\n     */\n\n    receive() external payable {}\n\n    function _swap(address sender) private {\n        uint256 contractTokenBalance = _balances[address(this)];\n        bool shouldSell = contractTokenBalance \u003e= minSwapAmount;\n\n        if (\n            shouldSell \u0026\u0026\n            sender != uniswapV2Pair\n        ) {\n            if(contractTokenBalance \u003e= maxSwapAmount) contractTokenBalance = maxSwapAmount;\n            uint256 stakingShare = contractTokenBalance / 2;\n            uint256 liquidityShare = contractTokenBalance - stakingShare;\n            uint256 swapShare =\n            stakingShare + (liquidityShare / 2);\n            swapTokensForEth(swapShare);\n            uint256 balance = address(this).balance;\n\n            uint256 stakingBnbShare = (4 * balance) / 6;\n            uint256 liquidityBnbShare = balance - stakingBnbShare;\n\n            stakingAddress.distribute{value: stakingBnbShare}();\n\n            addLiquidity(liquidityShare / 2, liquidityBnbShare);\n            emit Swap(contractTokenBalance, balance);\n        }\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            owner(),\n            block.timestamp\n        );\n    }\n\n    event Swap(uint256 tokensSwapped, uint256 ethReceived);\n    event Whitelist(address whitelisted, bool isWhitelisted);\n    event UpdateStakingAddress(address stakingAddress);\n    event UpdateMktAddress(address mktAddress);\n\n    /**\n     * Misc. functions\n     */\n\n    function setStakingAddress(address newAddress) external onlyOwner {\n        require(\n            address(stakingAddress) == address(0),\n            \"Staking address already set\"\n        );\n        stakingAddress = IStaking(newAddress);\n        _whitelist[address(newAddress)] = true;\n        emit UpdateStakingAddress(newAddress);\n    }\n\n    function updateWhitelist(address addr, bool isWhitelisted)\n    external\n    onlyOwner\n    {\n        _whitelist[addr] = isWhitelisted;\n        emit Whitelist(addr, isWhitelisted);\n    }\n\n    function setMktAddress(address newAddress) external onlyOwner {\n        require(newAddress != address(0), \"Mkt address is the zero address\");\n        mktAddress = address(newAddress);\n        emit UpdateMktAddress(newAddress);\n    }\n}"}}