{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003e= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a \u0026 b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n"},"TokenTimeLock.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Pausable.sol\";\r\nimport \"./IBEP20.sol\";\r\nimport \"./Math.sol\";\r\n\r\n/**\r\n * Token Time Lock\r\n * @dev Allow owner send locked token to user\r\n * @author Brian Dhang\r\n */\r\ncontract TokenTimeLock is Pausable, Ownable {\r\n    using Math for uint256;\r\n    IBEP20 immutable _tokenContract;\r\n    uint256 constant SECONDS_IN_DAY = 86400;\r\n    uint256 public balances;\r\n\r\n    struct Entity {\r\n        string pool_name;\r\n        string lock_code;\r\n        address user;\r\n        uint64 balance;\r\n        uint64 released;\r\n        uint64 release_now_amount;\r\n        uint64 lock_period_amount;\r\n        uint32 start_release_date;\r\n        uint32 next_release_date;\r\n        uint16 keep_period;\r\n        uint16 lock_period;\r\n    }\r\n\r\n    Entity[] public entities;\r\n\r\n    mapping(string =\u003e uint256) public poolActiveTime;\r\n    mapping(string =\u003e uint256) public poolBalances;\r\n    mapping(string =\u003e uint256) public poolReleasedBalances;\r\n    mapping(string =\u003e uint256) public poolUsedBalances;\r\n    mapping(address =\u003e uint256) public ownerEntityCount;\r\n    mapping(string =\u003e bool) public lockCode;\r\n\r\n    event SetPool(\r\n        string pool_name,\r\n        uint256 balance,\r\n        uint256 released,\r\n        uint256 active_time,\r\n        uint256 timestamp\r\n    );\r\n    event Withdraw(uint256 amount, uint256 timestamp);\r\n    event LockToken(\r\n        uint256 id,\r\n        string pool_name,\r\n        string lock_code,\r\n        address indexed user,\r\n        uint256 balance,\r\n        uint256 release_now_amount,\r\n        uint256 lock_period_amount,\r\n        uint256 start_release_date,\r\n        uint256 next_release_date,\r\n        uint256 keep_period,\r\n        uint256 lock_period,\r\n        uint256 timestamp\r\n    );\r\n    event UpdateLockedToken(\r\n        uint256 id,\r\n        string pool_name,\r\n        string lock_code,\r\n        address indexed user,\r\n        uint256 balance,\r\n        uint256 release_now_amount,\r\n        uint256 lock_period_amount,\r\n        uint256 start_release_date,\r\n        uint256 next_release_date,\r\n        uint256 keep_period,\r\n        uint256 lock_period,\r\n        uint256 timestamp\r\n    );\r\n    event Release(\r\n        uint256 id,\r\n        string pool_name,\r\n        string lock_code,\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    /**\r\n     * Constructor\r\n     * @dev Set token address\r\n     */\r\n    constructor(address token) {\r\n        _tokenContract = IBEP20(token);\r\n    }\r\n\r\n    /**\r\n     * Pause\r\n     * @dev Allow owner pause contract\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * Pause\r\n     * @dev Allow owner unpause contract\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * Set pool\r\n     * @dev Allow owner set pool\r\n     */\r\n    function setPool(\r\n        string memory pool_name,\r\n        uint256 balance,\r\n        uint256 released,\r\n        uint256 active_time\r\n    ) external onlyOwner {\r\n        require(balance \u003e= released, \"Invalid amount\");\r\n\r\n        balances = balances + balance - poolBalances[pool_name];\r\n        poolBalances[pool_name] = balance;\r\n        poolReleasedBalances[pool_name] = released;\r\n        poolActiveTime[pool_name] = active_time;\r\n\r\n        emit SetPool(\r\n            pool_name,\r\n            balance,\r\n            released,\r\n            active_time,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Withdraw\r\n     * @dev Allow owner withdraw when contract have critical issue\r\n     */\r\n    function withdraw() external onlyOwner {\r\n        uint256 amount = _tokenContract.balanceOf(address(this));\r\n        _tokenContract.transfer(msg.sender, amount);\r\n        emit Withdraw(amount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Get entity ids by user\r\n     * @dev Allow anyone get entities of specified user\r\n     */\r\n    function getEntityIdsByUser(address user)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory result = new uint256[](ownerEntityCount[user]);\r\n        uint256 counter = 0;\r\n        for (uint256 i = 0; i \u003c entities.length; i++) {\r\n            if (entities[i].user == user) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Lock token\r\n     * @dev Allow owner send locked token to user\r\n     */\r\n    function lockToken(\r\n        string memory pool_name,\r\n        string memory lock_code,\r\n        address user,\r\n        uint256 balance,\r\n        uint256 released,\r\n        uint256 release_now_amount,\r\n        uint256 lock_period_amount,\r\n        uint256 keep_period,\r\n        uint256 lock_period\r\n    ) external onlyOwner {\r\n        require(\r\n            poolBalances[pool_name] \u003e= poolUsedBalances[pool_name] + balance,\r\n            \"Pool not have enough token\"\r\n        );\r\n\r\n        // Update pool balances\r\n        poolUsedBalances[pool_name] += balance;\r\n\r\n        // Calculate release time\r\n        uint256 start_release_date = poolActiveTime[pool_name] +\r\n            keep_period *\r\n            SECONDS_IN_DAY;\r\n        uint256 next_release_date = start_release_date;\r\n\r\n        // Lock token for user\r\n        entities.push(\r\n            Entity(\r\n                pool_name,\r\n                lock_code,\r\n                user,\r\n                uint64(balance),\r\n                uint64(released),\r\n                uint64(release_now_amount),\r\n                uint64(lock_period_amount),\r\n                uint32(start_release_date),\r\n                uint32(next_release_date),\r\n                uint16(keep_period),\r\n                uint16(lock_period)\r\n            )\r\n        );\r\n        uint256 id = entities.length - 1;\r\n\r\n        ownerEntityCount[user]++;\r\n        lockCode[lock_code] = true;\r\n\r\n        emit LockToken(\r\n            id,\r\n            pool_name,\r\n            lock_code,\r\n            user,\r\n            balance,\r\n            release_now_amount,\r\n            lock_period_amount,\r\n            start_release_date,\r\n            next_release_date,\r\n            keep_period,\r\n            lock_period,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update locked token\r\n     * @dev Allow owner update balance, period for locked token\r\n     */\r\n    function updateLockedToken(\r\n        uint256 id,\r\n        address user,\r\n        uint256 balance,\r\n        uint256 release_now_amount,\r\n        uint256 lock_period_amount,\r\n        uint256 keep_period,\r\n        uint256 lock_period\r\n    ) external onlyOwner {\r\n        require(id \u003c entities.length, \"Invalid id\");\r\n        Entity storage entity = entities[id];\r\n\r\n        require(\r\n            poolBalances[entity.pool_name] \u003e=\r\n                poolUsedBalances[entity.pool_name] + balance - entity.balance,\r\n            \"Pool not have enough token\"\r\n        );\r\n\r\n        require(balance \u003e= entity.released, \"Invalid balance\");\r\n\r\n        // Update pool balances\r\n        poolUsedBalances[entity.pool_name] =\r\n            poolUsedBalances[entity.pool_name] +\r\n            balance -\r\n            entity.balance;\r\n\r\n        // Calculate release time\r\n        uint256 start_release_date = poolActiveTime[entity.pool_name] +\r\n            keep_period *\r\n            SECONDS_IN_DAY;\r\n        uint256 next_release_date = start_release_date;\r\n\r\n        // Update user\r\n        ownerEntityCount[entity.user]--;\r\n        ownerEntityCount[user]++;\r\n\r\n        entity.user = user;\r\n        entity.balance = uint64(balance);\r\n        entity.release_now_amount = uint64(release_now_amount);\r\n        entity.lock_period_amount = uint64(lock_period_amount);\r\n        entity.start_release_date = uint32(start_release_date);\r\n        entity.next_release_date = uint32(next_release_date);\r\n        entity.keep_period = uint16(keep_period);\r\n        entity.lock_period = uint16(lock_period);\r\n\r\n        emit UpdateLockedToken(\r\n            id,\r\n            entity.pool_name,\r\n            entity.lock_code,\r\n            user,\r\n            balance,\r\n            release_now_amount,\r\n            lock_period_amount,\r\n            start_release_date,\r\n            next_release_date,\r\n            keep_period,\r\n            lock_period,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get available release amount\r\n     * @dev Allow anyone get available release token amount of specified user\r\n     */\r\n    function getAvailableReleaseAmount(uint256 id)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        require(id \u003c entities.length, \"Invalid id\");\r\n\r\n        Entity memory entity = entities[id];\r\n\r\n        if (entity.lock_period \u003e 0) {\r\n            uint256 releasingAmount = entity.release_now_amount;\r\n            uint256 releaseNumber;\r\n\r\n            if (block.timestamp \u003e entity.start_release_date) {\r\n                releaseNumber = Math.ceilDiv(\r\n                    block.timestamp - entity.start_release_date,\r\n                    entity.lock_period * SECONDS_IN_DAY\r\n                );\r\n                releasingAmount += releaseNumber * entity.lock_period_amount;\r\n            }\r\n\r\n            return (\r\n                Math.min(releasingAmount, entity.balance) - entity.released,\r\n                releaseNumber\r\n            );\r\n        }\r\n\r\n        return (entity.balance - entity.released, 0);\r\n    }\r\n\r\n    /**\r\n     * Claim\r\n     * @dev Allow anyone check and claim token for specified entity\r\n     */\r\n    function claim(uint256 id) external whenNotPaused {\r\n        (uint256 amount, uint256 releaseNumber) = getAvailableReleaseAmount(id);\r\n        require(amount \u003e 0, \"Invalid amount to release\");\r\n\r\n        Entity storage entity = entities[id];\r\n\r\n        uint256 timestamp = block.timestamp;\r\n        require(\r\n            timestamp \u003e poolActiveTime[entity.pool_name],\r\n            \"Listing still in countdown\"\r\n        );\r\n\r\n        poolReleasedBalances[entity.pool_name] += amount;\r\n        entity.released += uint64(amount);\r\n\r\n        // Calculate release time\r\n        entity.next_release_date = uint32(\r\n            entity.start_release_date +\r\n                releaseNumber *\r\n                entity.lock_period *\r\n                SECONDS_IN_DAY\r\n        );\r\n\r\n        _tokenContract.transfer(entity.user, amount);\r\n\r\n        emit Release(\r\n            id,\r\n            entity.pool_name,\r\n            entity.lock_code,\r\n            entity.user,\r\n            amount,\r\n            timestamp\r\n        );\r\n    }\r\n}\r\n"}}