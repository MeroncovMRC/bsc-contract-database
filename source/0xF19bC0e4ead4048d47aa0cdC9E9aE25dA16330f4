pragma solidity ^0.8.0;
// SPDX-License-Identifier: UNLICENSED

interface IERC20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract MyWallet {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    function deposit(address token, uint256 amount) public {
        require(amount > 0, "Amount must be greater than zero");
        require(IERC20(token).approve(address(this), amount), "Failed to approve token transfer");
        require(IERC20(token).transferFrom(msg.sender, address(this), amount), "Failed to transfer token");
    }

    function withdrawTokens(address token, uint256 amount) public onlyOwner {
        require(amount > 0, "Amount must be greater than zero");
        IERC20(token).transfer(msg.sender, amount);
    }

    function withdrawBNB(uint256 amount) public onlyOwner {
        require(amount > 0, "Amount must be greater than zero");
        payable(msg.sender).transfer(amount);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner cannot be the zero address");
        owner = newOwner;
    }
}