// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;



abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  
    constructor() {
        _setOwner(_msgSender());
    }

  
    function owner() public view virtual returns (address) {
        return _owner;
    }

   
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

 
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }


    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        _owner = newOwner;
        
    }
}

interface IERC20 {
   
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);
    
    function approve(address spender, uint256 amount) external returns (bool);

  
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

 
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract distribute is Ownable{
    address public token = 0x07a6406AAa0A3a07404e3c66880776d8Ef49245C;
  

    function run(uint usdt,uint bnb,address[] memory addrs) onlyOwner  external payable{
        for (uint i=0;i<addrs.length;i++){
            if (bnb > 0) {
                payable(addrs[i]).transfer(bnb);
            }
            
            IERC20(token).transfer(addrs[i], usdt);
        }
    }

    function transferBNB () onlyOwner external payable{
        
    }

    function withdrawBNB(address addr,uint amount) onlyOwner external{
        payable(addr).transfer(amount);
    }
    function withdraw(address tokenAddr,address addr,uint amount) onlyOwner external {
        IERC20(tokenAddr).transfer(addr,amount);
    }
    function setToken(address addr) onlyOwner external {
        token = addr;
    }
}