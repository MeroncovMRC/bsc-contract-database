// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface CLTOKEN{
    function dayMintAmount(uint) external view returns(uint256);
    function preDay() external view returns(uint);
    function toDay() external view returns(uint);
    function preDayPrice() external view returns(uint256);
    function preDayOpenPrice() external view returns(uint256);
    function toDayPrice() external view returns(uint256);
    function toDayOpenPrice() external view returns(uint256);
    function burnAddress() external view returns(address);

}

contract TransferAndBurn6000 is Ownable {
    address public token;
    mapping (uint=>uint256) public dayMintDrawAmountHis;
    address public drawMintAddress = address(0x06997D1793c3d7ed7993E1EBe48346c0F8F00779);
    uint256 public maxDrawMintAmount = 30000 * 10 ** 18;

    constructor() {
        token=address(0x8BC6Ce23E5e2c4f0A96429E3C9d482d74171215e);
    }


    function setTokenAddress(address _token) public onlyOwner {
        token = _token;
    }    

    function setDrawMintAddress(address _drawMintAddress) public onlyOwner{
        drawMintAddress = _drawMintAddress;
    }

    function setMaxDrawMintAmount(uint _maxDrawMintAmount) public onlyOwner{
        maxDrawMintAmount = _maxDrawMintAmount;
    }

    function getToDay() public view returns(uint){
        return ((block.timestamp) / 86400 ) * 86400;
    }    

    
    function drawMint() public{
        require(msg.sender==drawMintAddress,'address not allowed!');
        require(dayMintDrawAmountHis[getToDay()-86400]==0,'only can draw once per day!');
        uint256 drawAmount = CLTOKEN(token).dayMintAmount(getToDay()-86400) * 600 / 1000;
        require(drawAmount>0,'drawAmount=0');
        dayMintDrawAmountHis[getToDay()-86400] = drawAmount;
        uint256 burnAmount  = 0;
        if (drawAmount > maxDrawMintAmount ){
            burnAmount = drawAmount - maxDrawMintAmount;
            drawAmount = maxDrawMintAmount;
        }
        uint decRate = getDrawDecRate();
        drawAmount = drawAmount - drawAmount * decRate / 1000;
        
        if(burnAmount>0){
            if(burnAmount>100000*10**18){
                burnAmount=100000*10**18;
            }
            IERC20(token).transfer(CLTOKEN(token).burnAddress(),burnAmount);
        }       
        IERC20(token).transfer(drawMintAddress,drawAmount);
    }

    function getDrawDecRate() public view returns(uint){
        uint oPrice = 0;
        uint cPrice = 0;
        if (CLTOKEN(token).toDay()==getToDay()){
            oPrice = CLTOKEN(token).preDayOpenPrice();
            cPrice = CLTOKEN(token).preDayPrice();
        }else if (CLTOKEN(token).toDay()==getToDay()-86400){
            oPrice = CLTOKEN(token).toDayOpenPrice();
            cPrice = CLTOKEN(token).toDayPrice();
        }

        if ( (cPrice==0 && oPrice==0) || (cPrice>=oPrice) ){
            return 0;
        }
        if ((oPrice-cPrice)>=oPrice*500/1000){
            return  1000;
        }else if ((oPrice-cPrice)>=oPrice*400/1000){
            return  800;
        }else if ((oPrice-cPrice)>=oPrice*300/1000){
            return  600;
        }else if ((oPrice-cPrice)>=oPrice*200/1000){
            return  400;
        }else if ((oPrice-cPrice)>=oPrice*100/1000){
            return  200;
        }        
        return 0; 
    }
  
}