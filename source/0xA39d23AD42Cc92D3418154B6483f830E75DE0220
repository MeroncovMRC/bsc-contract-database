// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol


pragma solidity ^0.6.0;

interface AggregatorV3Interface {

  function decimals()
    external
    view
    returns (
      uint8
    );

  function description()
    external
    view
    returns (
      string memory
    );

  function version()
    external
    view
    returns (
      uint256
    );

  // getRoundData and latestRoundData should both raise "No data present"
  // if they do not have data to report, instead of returning unset values
  // which could be misinterpreted as actual reported values.
  function getRoundData(
    uint80 _roundId
  )
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

}

// File: contracts/Avaride.sol

//SPDX-License-Identifier: UNLICENSED 
pragma experimental ABIEncoderV2;
pragma solidity ^0.6.8;


interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor() internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract AVARIDE is Context, IBEP20, Ownable {
    using SafeMath for uint256;
    address payable wthowner;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    struct Affiliate {
        uint256 af_regiTime;
        uint256 af_tot_purchase;
        uint256 af_tot_direct_purchase;
        address af_referrer;
    }
    mapping(address => Affiliate) public affiliates;

    uint256 private _totalSupply;
    uint256 public _initialSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;
    uint256 public _tokens_burned;
    uint256 public tot_circulation;

    mapping (address => bool) public frozenAccount;
    event Burn(address a ,uint256 b);
    event FrozenFunds(address target, bool frozen);

    bool private canbuy;
    uint256 public token_rate;
    uint256 public increase_by;
    uint256 public increase_slab;
    uint256 private bnb_usd_rate;
    uint256 public min_token_buy_qty;
    uint256 private token_usd_bought;
    uint256 private token_bnb_bought;
    uint256 private affiliate_bonus_tokens;
    uint256 private affiliate_bonus_rate;
    uint256 private referral_bonus_tokens = 2000000000 * 10**18;
    uint256 public totalAffiliates;
    uint256 private initial = 0;
    address[] public equities = [0x735E27b1069059C858721517892110F3706e867c, 0xfc65F9C41d12aBb42AFB561CCc12a9C5712ad5CD, 0x7acA49fcCF0A4671425aFf4930ab8ee8f35a1497, 0xbf4A715307b34a09198fD335f71474F7c424169d, 0x3b57ee4C40b2C273eCd6fAF43048142C6859F4e3];
    mapping(address => uint256) internal isEquity;
    address[] public managers = [0x6F0A90a0dF5aBb2902bA1b5EB6B2Bd2e8099768B, 0x2cde8ffEa60e482E6411F0c0D0021f39643Fa83C, 0x7451f06300dae2Df2f5A8D0252AB68E137DeBADF, 0x6309CFA54428CC58CF8f0681b1f037be8c9C8b92, 0x2E7a04261F52663BAbd0Da08E5CE989392E28b76, 0xA988D7ed5A56b54d48aF94afb78DA1ec61B4B590];
    mapping(address => uint256) internal isManager;
    
    /**
     * @notice
     * A stake struct is used to represent the way we store stakes, 
     * A Stake will contain the users address, the amount staked and a timestamp, 
     * Since which is when the stake was made
     */
    struct Stakeholder{
        address user;
        uint256 amount;
        uint256 since;
        
    }
    Stakeholder[] internal stakeholders;  //to note the stakeholders
    mapping(address => uint256) internal stakes; //The stakes for each stakeholder
    // mapping(address => uint256) internal rewards;  //The accumulated rewards for each stakeholder

    constructor() public {
        _name = "AVARIDE";
        _symbol = "AVAR";
        _decimals = 18;
        _totalSupply = 5000000000 * 10**18;
        _balances[msg.sender] = _totalSupply;
        _initialSupply = _totalSupply;
        wthowner = msg.sender;

        // settings
        canbuy = true;
        token_rate = 13500000000000000;
        increase_by = 1350000000000000;
        increase_slab = 500000 * 10**18;
        bnb_usd_rate = get_bnb_usd_rate();
        // bnb_usd_rate = 400;
        // min_token_buy_qty = 1000 * 10**18;
        affiliate_bonus_rate = 10;
        for(uint i=0; i<equities.length; i++) {
            isEquity[equities[i]] = i;
            _transfer(owner(), equities[i], 1000000*10**18);
        }
        for(uint j=0; j<managers.length; j++) {
            isManager[managers[j]] = j;
            _transfer(owner(), managers[j], 10000000*10**18);
        }
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external override view returns (address) {
        return owner();
    }

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external override view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external override view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the token name.
     */
    function name() external override view returns (string memory) {
        return _name;
    }

    /**
     * @dev See {BEP20-totalSupply}.
     */
    function totalSupply() external override view returns (uint256) {
        return _totalSupply;
    }

    function tokens_burned() external view returns (uint256) {
        return _tokens_burned;
    }

    /**
     * @dev See {BEP20-balanceOf}.
     */
    function balanceOf(address account) external override view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {BEP20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount)
        external override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {BEP20-allowance}.
     */
    function allowance(address owner, address spender)
        external override
        view
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {BEP20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {BEP20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {BEP20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "BEP20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "BEP20: decreased allowance below zero"
            )
        );
        return true;
    }

    /**
   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing
   * the total supply.
   *
   * Requirements
   *
   * - `msg.sender` must be the token owner
   */
  function mint(uint256 amount) public onlyOwner returns (bool) {
    _mint(_msgSender(), amount);
    return true;
  }
  
  function burn(address account, uint256 amount) public onlyOwner returns (bool) {
    require(!frozenAccount[msg.sender]);
    _burn(account, amount);
    return true;
  }

  // freeze the assets of account

  function freezeAccount (address target, bool freeze) public onlyOwner {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
  }

  // transfer and freeze the assets
  
  function transferAndFreeze (address recipient, uint256 amount) public onlyOwner {
    
    _transfer(_msgSender(), recipient, amount);
    frozenAccount[recipient] = true;
    emit FrozenFunds(recipient, true);
  }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(
            amount,
            "BEP20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
   * the total supply.
   *
   * Emits a {Transfer} event with `from` set to the zero address.
   *
   * Requirements
   *
   * - `to` cannot be the zero address.
   */
  function _mint(address account, uint256 amount) internal {
    require(account != address(0), "BEP20: mint to the zero address");
    require(!frozenAccount[msg.sender]);

    _totalSupply = _totalSupply.add(amount);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }

  /**
   * @dev Destroys `amount` tokens from `account`, reducing the
   * total supply.
   *
   * Emits a {Transfer} event with `to` set to the zero address.
   *
   * Requirements
   *
   * - `account` cannot be the zero address.
   * - `account` must have at least `amount` tokens.
   */
  function _burn(address account, uint256 amount) internal {
    require(account != address(0), "BEP20: burn from the zero address");
    require(!frozenAccount[msg.sender]);

    _balances[account] = _balances[account].sub(amount, "BEP20: burn amount exceeds balance");
    _balances[owner()] = _balances[owner()].add(amount);
    _totalSupply = _totalSupply.sub(amount);
    emit Burn(account, amount);
  }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted
     * from the caller's allowance.
     *
     * See {_burn} and {_approve}.
     */
    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(
            account,
            _msgSender(),
            _allowances[account][_msgSender()].sub(
                amount,
                "BEP20: burn amount exceeds allowance"
            )
        );
    }

    function replaceManager(address oldManager, address newManager) public onlyOwner returns (bool) {
        uint256 index = isManager[oldManager];
        managers[index] = newManager;
        isManager[newManager] = index;
        return true;
    }

    function replaceEquity(address oldEquity, address newEquity) public onlyOwner returns (bool) {
        uint256 index = isEquity[oldEquity];
        equities[index] = newEquity;
        isEquity[newEquity] = index;
        return true;
    }

    //-----------------------------------------------------------------------------------

    function buytokensDapp_ref(address _referrerAddr)
        public
        payable
        returns (uint256)
    {
        require(canbuy == true, "Token Buy Process is disabled");
        require(msg.sender != owner(), "Invalid sender");
        require(
            _referrerAddr != msg.sender,
            "Referrer & Purchaser cannot be same"
        );

        Affiliate storage affiliate = affiliates[msg.sender];

        if (affiliate.af_regiTime == 0) {
            affiliate.af_regiTime = now;
            affiliate.af_referrer = _referrerAddr;
            totalAffiliates++;
        } else {
            _referrerAddr = affiliate.af_referrer; //registered
        }

        if ((_referrerAddr != address(0x0)) && _referrerAddr != owner()) {
            require(
                affiliates[_referrerAddr].af_regiTime > 0,
                "Referrer Not Found"
            );
        }

        uint256 token_qty;
        uint256 equityAmount;
        uint256 managerSalary;
        min_token_buy_qty = set_min_token_buy_qty();

        uint256 usd_amount = msg.value.mul(bnb_usd_rate);
        token_qty = (usd_amount * 10**18).div(token_rate);
        require((token_qty >= min_token_buy_qty), "Invalid Amount");
        _transfer(owner(), msg.sender, token_qty);
        affiliate.af_tot_purchase = affiliate.af_tot_purchase.add(token_qty);

        equityAmount = (msg.value).mul(2).div(100);
        managerSalary = (msg.value).mul(5).div(100);
        for(uint a=0; a<managers.length; a++) {
            payable(managers[a]).transfer(managerSalary);
        }
        for(uint b=0; b<equities.length; b++) {
            payable(equities[b]).transfer(equityAmount);
        }

        if (affiliate_bonus_tokens <= referral_bonus_tokens) {
        //-- affliate bonus --
            uint256 referrer_purchase;
            uint256 referrer_token_qty = 0;
            if ((_referrerAddr != address(0x0)) && _referrerAddr != owner()) {
            referrer_purchase = affiliates[_referrerAddr].af_tot_purchase;
                if (referrer_purchase > 0) {
                    referrer_token_qty = (msg.value).mul(10).div(100);
                    payable(_referrerAddr).transfer(referrer_token_qty);
                    affiliate_bonus_tokens = affiliate_bonus_tokens.add(token_qty);
                }
            }
        }

        token_bnb_bought = token_bnb_bought.add(token_qty);
        tot_circulation = token_bnb_bought.add(token_usd_bought);
        if (tot_circulation - initial >= increase_slab) {
            token_rate = (token_rate).add(increase_by);
            initial+=increase_slab;
        }

        return token_qty;
    }

    function buytokensDapp_Noref() public payable returns (uint256) {
        require(canbuy == true, "Token Buy Process is disabled");
        require(msg.sender != owner(), "Invalid sender");

        Affiliate storage affiliate = affiliates[msg.sender];
        if (affiliate.af_regiTime == 0) {
            affiliate.af_regiTime = now;
            totalAffiliates++;
        }
        
        min_token_buy_qty = set_min_token_buy_qty();

        uint256 usd_amount = msg.value.mul(bnb_usd_rate);

        uint256 token_qty = (usd_amount * 10**18).div(token_rate);

        require((token_qty >= min_token_buy_qty), "Invalid Amount");

        _transfer(owner(), msg.sender, token_qty);

        affiliate.af_tot_purchase = affiliate.af_tot_purchase.add(token_qty);

        token_bnb_bought = token_bnb_bought.add(token_qty);

        uint256 equityAmount;
        uint256 managerSalary;
        equityAmount = (msg.value).mul(2).div(100);
        managerSalary = (msg.value).mul(5).div(100);
        for(uint a=0; a<managers.length; a++) {
            payable(managers[a]).transfer(managerSalary);
        }
        for(uint b=0; b<equities.length; b++) {
            payable(equities[b]).transfer(equityAmount);
        }

        tot_circulation = token_bnb_bought.add(token_usd_bought);
        if (tot_circulation - initial >= increase_slab) {
            token_rate = (token_rate).add(increase_by);
            initial+=increase_slab;
        }
        return token_qty;
        
    }

    //--
    function buytokensEx_Noref(address _buyer, uint256 _amount)
        public
        payable
        onlyOwner
        returns (uint256)
    {
        require(canbuy == true, "Token Buy Process is disabled");

        Affiliate storage affiliate = affiliates[_buyer];
        if (affiliate.af_regiTime == 0) {
            affiliate.af_regiTime = now;
            totalAffiliates++;
        } 

        min_token_buy_qty = set_min_token_buy_qty();

        uint256 usd_amount = _amount * 10**18;

        uint256 token_qty = (usd_amount * 10**18).div(token_rate);

        require((token_qty >= min_token_buy_qty), "Invalid Amount");

        _transfer(owner(), _buyer, token_qty);

        affiliate.af_tot_purchase = affiliate.af_tot_purchase.add(token_qty);

        token_usd_bought = token_usd_bought.add(token_qty);

        tot_circulation = token_bnb_bought.add(token_usd_bought);
        if (tot_circulation - initial >= increase_slab) {
            token_rate = (token_rate).add(increase_by);
            initial+=increase_slab;
        }

        return token_qty;
    }

    //------------
    function get_contract_balance()
        public
        view
        onlyOwner
        returns (uint256 cbalance)
    {
        return address(this).balance;
    }

    function withdraw(uint256 amount) public onlyOwner returns (bool) {
        require((amount <= address(this).balance), "Insufficient Balance");
        wthowner.transfer(amount);
        return true;
    }

    function get_tokensbought() public view onlyOwner returns (uint256) {
        return (token_bnb_bought + token_usd_bought)/ 10**18;
    }

    function get_total_bonus_tokens() public view onlyOwner returns (uint256) {
        return affiliate_bonus_tokens;
    }

    function get_bnb_usd_rate() public view onlyOwner returns (uint256) {
        // price feed address
        // address priceFeedAddress=tokenPriceFeedMapping[_token];
        AggregatorV3Interface priceFeed=AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE);
        // AggregatorV3Interface priceFeed=AggregatorV3Interface(0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526);
        (
            , 
            int price,
            ,
            ,
            
        ) = priceFeed.latestRoundData();
        // // decimals returns uint8
        // uint256 decimals=uint256(priceFeed.decimals());
        // return (uint256(price),decimals);
        // int256 rate = getLatestPrice();
        return uint256(price/10**8);
        // return 400;
    }

    function get_canbuy() public view onlyOwner returns (bool) {
        return canbuy;
    }

    function set_canbuy(bool newflag) public onlyOwner returns (bool) {
        canbuy = newflag;
        return true;
    }

    function set_increase_by(uint256 newvalue) public onlyOwner returns (bool) {
        increase_by = newvalue;
        return true;
    }

    function set_increase_slab(uint256 newvolume)
        public
        onlyOwner
        returns (bool)
    {
        increase_slab = newvolume;
        return true;
    }

    function set_bnb_usd_rate(uint256 newrate) public onlyOwner returns (bool) {
        require(newrate > 0, "Rate should not be zero");
        bnb_usd_rate = newrate;
        return true;
    }

    function set_min_token_buy_qty()
        internal
        returns (uint256)
    {
        min_token_buy_qty = 14*10**18/token_rate;   //INR1000~USD14
        return min_token_buy_qty;
    }

    /**
    * @notice A method to check if an address is a stakeholder.
    * @param _address The address to verify.
    * @return bool, uint256 Whether the address is a stakeholder,
    * and if so its position in the stakeholders array.
    */
   function isStakeholder(address _address)
       public
       view
       returns(bool, uint256)
   {
       for (uint256 s = 0; s < stakeholders.length; s += 1){
           if (_address == stakeholders[s].user) return (true, s);
       }
       return (false, 0);
   }

   /**
    * @notice A method to add a stakeholder.
    * @param _stakeholder The stakeholder to add.
    */
   function addStakeholder(address _stakeholder)
       public returns (uint256)
   {
       uint256 userIndex;
       (bool _isStakeholder, ) = isStakeholder(_stakeholder);
       if(!_isStakeholder) {
           // Push a empty item to the Array to make space for our new stakeholder
        stakeholders.push();
        // Calculate the index of the last item in the array by Len-1
        userIndex = stakeholders.length - 1;
        // Assign the address to the new index
        stakeholders[userIndex].user = _stakeholder;
        // // Add index to the stakeHolders
        // stakes[_stakeholder] = userIndex;
       } 
       return userIndex; 
   }

   /**
    * @notice A method to remove a stakeholder.
    * @param _stakeholder The stakeholder to remove.
    */
   function removeStakeholder(address _stakeholder)
       public
   {
       (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);
       if(_isStakeholder){
           stakeholders[s] = stakeholders[stakeholders.length - 1];
           stakeholders.pop();
       }
   }

    /**
    * @notice A method to retrieve the stake for a stakeholder.
    * @param _stakeholder The stakeholder to retrieve the stake for.
    * @return uint256 The amount of AVARIDE staked.
    */
   function stakeOf(address _stakeholder)
       public
       view
       returns(uint256)
   {
       (bool present , uint256 userIndex) = isStakeholder(_stakeholder);
       if(present) {
           return stakeholders[userIndex].amount;
       } else return 0;
       
   }

   /**
    * @notice A method to the aggregated stakes from all stakeholders.
    * @return uint256 The aggregated stakes from all stakeholders.
    */
   function totalStakes()
       public
       view
       returns(uint256)
   {
       uint256 _totalStakes = 0;
       for (uint256 s = 0; s < stakeholders.length; s += 1){
           _totalStakes = _totalStakes.add(stakes[stakeholders[s].user]);
       }
       return _totalStakes;
   }

   /**
    * @notice A method for a stakeholder to create a stake.
    * @param _stake The size of the stake to be created.
    */
   function createStake(uint256 _stake)
       public returns(bool)
   {
       require(_stake*10**18 >= 100*10**18, 'Stake min 100 AVA');
       require(_balances[msg.sender] >= _stake*10**18, 'Insufficient AVA');
       if(stakes[msg.sender] == 0){
           addStakeholder(msg.sender);
       }   
       ( , uint256 s) = isStakeholder(msg.sender);
       if(s >= 0) {
            _burn(msg.sender, _stake*10**18);
            stakeholders[s].amount += _stake*10**18;
            stakeholders[s].since = block.timestamp;
            stakes[msg.sender] = stakes[msg.sender].add(_stake*10**18);
            _tokens_burned += _stake*10**18;
       return true;
       }
   }

   /**
    * @notice A simple method that calculates the rewards for each stakeholder.
    * @param _stakeholder The stakeholder to calculate rewards for.
    */
   function calculateReward(address _stakeholder)
       public
       view
       returns(uint256)
   {
       uint256 APY;
       uint256 assignedReward;
       uint256 rewardInterval = 31536000;  //365 days
       uint256 timeDiff;
       (bool present , uint256 s) = isStakeholder(msg.sender);
       timeDiff = block.timestamp - stakeholders[s].since;
       require(present, 'Not a stakeholder');
           if (stakes[_stakeholder] >= 100*10**18 && stakes[_stakeholder] <= 49999*10**18) {
                APY = 15;
                assignedReward = (stakes[_stakeholder] * APY/100 * timeDiff)/rewardInterval;
            } else if (stakes[_stakeholder] >= 50000*10**18 && stakes[_stakeholder] <= 99999*10**18) {
                APY = 18;
                assignedReward = (stakes[_stakeholder] * APY/100 * timeDiff)/rewardInterval;
            } else if (stakes[_stakeholder] >= 100000*10**18) {
                APY = 20;
                assignedReward = (stakes[_stakeholder] * APY/100 * timeDiff)/rewardInterval;
            }
       
       return assignedReward;
   }

   /**
    * @notice A method to allow a stakeholder to withdraw his stake+rewards.
    */
   function withdrawStakes()
       public returns(bool)
   {
       (bool present , ) = isStakeholder(msg.sender);
       require(present, 'Not a stakeholder');
            uint256 reward = calculateReward(msg.sender);
            uint256 totalAmount = reward + stakes[msg.sender];
            stakes[msg.sender] = 0;
            removeStakeholder(msg.sender);
            _mint(msg.sender, totalAmount);
       return true;
   }

   function circulatedTokens() public view returns(uint) {
       return (tot_circulation + 65000000*10**18);
   }
}