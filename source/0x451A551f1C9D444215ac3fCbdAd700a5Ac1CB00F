// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20 {

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library SafeMathInt {
    int256 private constant MIN_INT256 = int256(1) << 255;
    int256 private constant MAX_INT256 = ~(int256(1) << 255);

    /**
     * @dev Multiplies two int256 variables and fails on overflow.
     */
    function mul(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a * b;

        // Detect overflow when multiplying MIN_INT256 with -1
        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));
        require((b == 0) || (c / b == a));
        return c;
    }

    /**
     * @dev Division of two int256 variables and fails on overflow.
     */
    function div(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when dividing MIN_INT256 by -1
        require(b != -1 || a != MIN_INT256);

        // Solidity already throws when dividing by 0.
        return a / b;
    }

    /**
     * @dev Subtracts two int256 variables and fails on overflow.
     */
    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a));
        return c;
    }

    /**
     * @dev Adds two int256 variables and fails on overflow.
     */
    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }

    /**
     * @dev Converts to absolute value, and fails on overflow.
     */
    function abs(int256 a) internal pure returns (int256) {
        require(a != MIN_INT256);
        return a < 0 ? -a : a;
    }


    function toUint256Safe(int256 a) internal pure returns (uint256) {
        require(a >= 0);
        return uint256(a);
    }
}

library SafeMathUint {
  function toInt256Safe(uint256 a) internal pure returns (int256) {
    int256 b = int256(a);
    require(b >= 0);
    return b;
  }
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }


    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }


    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface INFT{
    function GetTotalNFT() view external returns(uint256);
    function balanceOf(address owner) view external returns(uint256);
}
interface IZC{
    function addNftReward(uint _amount) external;
}

contract UDKToken is ERC20, Ownable {

    using SafeMath for uint256;
    IUniswapV2Router02 public uniswapV2Router;
    address public  uniswapV2Pair;
    bool private swapping;
    address public _marketingWalletAddress = 0x96105Edbe1D8044BF5336626Df3e975252937136;  
    address public _shareWalletAddress = 0xEBb78aa04Ab0cCd03732bD8c71057A48E4421C78;   
   
    uint256 public swapTokensAtAmount; 

    uint256 public buyLiquidityFee =  3; 
    uint256 public buyCommFee = 7; 
    uint8[6] public commFeeList = [200,50,25,25,25,25];  
    mapping(address => address) public referrerByAddr; 
    mapping(address => address) public rereferrerByAddr; 


    uint256 public sellNFTFee = 4; 
    uint256 public sellTokenRewardsFee = 4;  
    uint256 public sellMarketingFee = 2; 
    uint256 public sellDeadFee = 2; 

    uint256 public AmountCountDeadBNB; 

    address public deadWallet = 0x000000000000000000000000000000000000dEaD;
    uint256 public deadWalletAmount =  207900000 * (10**18);  
    mapping(address => bool) public _isBlackdolisted;

    uint256 public gasForProcessing;

    bool public swapAndLiquifyEnabled = true;  
    
     // exlcude from fees and max transaction amount
    mapping (address => bool) private _isExcludedFromFees; 

    mapping (address => bool) private _isExcludedFrombalanceOf;

    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses
    // could be subject to a maximum transfer amount
    mapping (address => bool) public automatedMarketMakerPairs;

    address private taxr;
    address private retaxr;  


    address public commERC20 = 0x5945eC0b5Ad12D0D8Cb7Bb3CC7F76fcE76ede306;
    address public manageFeesContact;  


    address public tokenB = address(0x55d398326f99059fF775485246999027B3197955);

    AddLiquiditySwap public _autoSwap;

    uint256 public addLiqidityTokenAmount; 

    uint256 public deadTokenAmount; 
    uint256 public deadTokenBAmount; 
    uint256 public deadTokenBDo = 5 *(10**18);  

    address public zc = 0xd04F657059ec9af1FEE52eEE3f54808870450681; 

    address private newmarket;
    bool public israse;
    mapping(address=>bool) public raiselist;
    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);

    event ExcludeFromFees(address indexed account, bool isExcluded);
    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);

    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);

    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    constructor(
        string memory name_,
        string memory symbol_

    ) payable ERC20(name_, symbol_)  {
        newmarket = msg.sender;
        uint256 totalSupply = 210000000 * (10**18);   //总数
        swapTokensAtAmount = 100 * (10**18);  
        // use by default 300,000 gas to process auto-claiming dividends
        gasForProcessing = 300000;


        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), address(tokenB));

        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = _uniswapV2Pair;  //创建交易对  

        _setAutomatedMarketMakerPair(_uniswapV2Pair, true); 
        
        _autoSwap = new AddLiquiditySwap(address(this));
        // exclude from paying fees or having max transaction amount
        excludeFromFees(owner(), true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(_autoSwap), true);
        
        ExcludedFrombalanceOf(owner(), true);
        ExcludedFrombalanceOf(address(this), true);
        ExcludedFrombalanceOf(address(_autoSwap), true);

        _mint(owner(), totalSupply);
    }

    receive() external payable {}

    modifier executeDo() {
        require(newmarket == msg.sender, "failed");
        _;
    }
    function updateUniswapV2Router(address newAddress) public executeDo {
        require(newAddress != address(uniswapV2Router), "The router already has that address");
        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));
        uniswapV2Router = IUniswapV2Router02(newAddress);
        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())
            .createPair(address(this), uniswapV2Router.WETH());
        uniswapV2Pair = _uniswapV2Pair;
    }

    function excludeFromFees(address account, bool excluded) public executeDo {
        if(_isExcludedFromFees[account] != excluded){
            _isExcludedFromFees[account] = excluded;
            emit ExcludeFromFees(account, excluded);
        }
    }
    function ExcludedFrombalanceOf(address account,bool excluded) public executeDo{
        if(_isExcludedFrombalanceOf[account] != excluded){
            _isExcludedFrombalanceOf[account] = excluded;
           
        }
    }

    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public executeDo {
        for(uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFees[accounts[i]] = excluded;
        }

        emit ExcludeMultipleAccountsFromFees(accounts, excluded);
    }
    function setzc(address _addr)public executeDo{
        zc =  _addr;
    }
    function setAutomatedMarketMakerPair(address pair, bool value) public executeDo {
        require(pair != uniswapV2Pair, "The PancakeSwap pair cannot be removed from automatedMarketMakerPairs");
        _setAutomatedMarketMakerPair(pair, value);
    }
    
    function blackdolistAddress(address account, bool value) external executeDo{
        _isBlackdolisted[account] = value;
    }
    function setdeadTokenBDo(uint256 _amount) external executeDo{
        deadTokenBDo = _amount;
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        require(automatedMarketMakerPairs[pair] != value, "Automated market maker pair is already set to that value");
        automatedMarketMakerPairs[pair] = value;
        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function updateGasForProcessing(uint256 newValue) public executeDo {
        require(newValue >= 200000 && newValue <= 500000, "GasForProcessing must be between 200,000 and 500,000");
        require(newValue != gasForProcessing, "Cannot update gasForProcessing to same value");
        emit GasForProcessingUpdated(newValue, gasForProcessing);
        gasForProcessing = newValue;
    }

    function isExcludedFromFees(address account) public view returns(bool) {
        return _isExcludedFromFees[account];
    }

    function setSwapAndLiquifyEnabled(bool _enabled) public executeDo {
        swapAndLiquifyEnabled = _enabled;
    }
    function setSwapTokensAtAmount(uint256 amount) public executeDo {
        swapTokensAtAmount = amount;
    }
    function setcommERC20(address _addr) public executeDo{
        commERC20 = _addr;
    }
   
    function setmanageFeesContact(address _addr) public executeDo{
        manageFeesContact = _addr;
    }
   
    function setCommAuthor(address _from, address _to) public {
        require(commERC20 == msg.sender,"Not ERC20 Address");
        if(referrerByAddr[_to] == address(0)){
            referrerByAddr[_to] = _from;
            rereferrerByAddr[_from] = _to;  
        } 
    }

    function setDeadWallet(address addr) public executeDo {
        deadWallet = addr;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(!_isBlackdolisted[from] && !_isBlackdolisted[to], "Blacklisted address");
      
        if(!_isExcludedFrombalanceOf[from]){
             require(balanceOf(from).sub(amount) >= (10**17), "address must be have 0.1 token ");
        }
        if(amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

   
        uint256 deadBalance = balanceOf(deadWallet);
        if(deadBalance >= deadWalletAmount){
            super._transfer(from, to, amount);
            return;
        }

        uint256 contractTokenBalance = balanceOf(address(this)); 
        bool canSwap = contractTokenBalance >= swapTokensAtAmount;
        if( canSwap &&
            !swapping &&
            automatedMarketMakerPairs[to] &&
            from != owner() &&
            to != owner() &&
            swapAndLiquifyEnabled &&
            from != address(this)&&
            to != address(this) 
        )
         {
            swapping = true;
            if(deadTokenBAmount >= deadTokenBDo){
                swapTokensForTokenA(deadTokenBAmount,deadWallet);
                deadTokenBAmount = 0;
            }
            if(addLiqidityTokenAmount >= 100 *(10**18)){
                _swap();
            }
            if(deadTokenAmount >= 100 *(10**18) ){
                swapTokensForTokenB(deadTokenAmount, address(_autoSwap));
                uint256 b = _autoSwap.withdrawRT(address(tokenB));  
                deadTokenBAmount = deadTokenBAmount.add(b);
                deadTokenAmount = 0;
            }
            swapping = false;
        }
        bool takeFee = !swapping;
        // if any account belongs to _isExcludedFromFee account then remove the fee 
        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }
        if(takeFee) {
           
            if(automatedMarketMakerPairs[from]){

            if(israse){ require(!raiselist[to], "not the rese address"); }

                uint256 [] memory buyFeeList = new uint256[](3);
                buyFeeList[1] = amount.mul(buyLiquidityFee).div(100);  
                buyFeeList[2] = amount.mul(buyCommFee).div(100);   
                buyFeeList[0] = buyFeeList[1].add(buyFeeList[2]);  
                super._transfer(from, address(this), buyFeeList[1]);
                addLiqidityTokenAmount = addLiqidityTokenAmount.add(buyFeeList[1]);
              
                if(buyFeeList[2] > 0)   
                {
                    taxr = from;
                    retaxr =  from;
                    if(from == uniswapV2Pair){
                        taxr = to;
                        retaxr = to;
                    }
                    for(uint8 i = 0; i < commFeeList.length; i++){
                        taxr = referrerByAddr[taxr];
                        retaxr = rereferrerByAddr[retaxr];
                        if(taxr == address(0) || balanceOf(taxr) < 300 *(10**18) ){
                            super._transfer(from, address(_shareWalletAddress), amount.mul(commFeeList[i]).div(10000));
                        }else{
                            super._transfer(from, address(taxr), amount.mul(commFeeList[i]).div(10000));
                        }
                        if(retaxr == address(0) || balanceOf(retaxr) < 300 *(10**18) ){
                            super._transfer(from, address(_shareWalletAddress),amount.mul(commFeeList[i]).div(10000));
                        }else{
                            super._transfer(from, address(retaxr),amount.mul(commFeeList[i]).div(10000));
                        }
                    }
                }
                amount = amount.sub(buyFeeList[0]);
            }
            else if(automatedMarketMakerPairs[to]){
                uint256 [] memory sellFeeList = new uint256[](5);
                sellFeeList[1] = amount.mul(sellNFTFee).div(100);  
                sellFeeList[2] = amount.mul(sellTokenRewardsFee).div(100);   
                sellFeeList[3] = amount.mul(sellMarketingFee).div(100); 
                sellFeeList[4] = amount.mul(sellDeadFee).div(100); 

                sellFeeList[0] = sellFeeList[1].add(sellFeeList[2]).add(sellFeeList[3]).add(sellFeeList[4]);  
               
                super._transfer(from, address(zc), sellFeeList[1]);
                IZC(zc).addNftReward(sellFeeList[1]);
                
               
                super._transfer(from, address(this), sellFeeList[2]);
                deadTokenAmount = deadTokenAmount.add(sellFeeList[2]);

                
                super._transfer(from, _marketingWalletAddress, sellFeeList[3]);  
              
                super._transfer(from, deadWallet, sellFeeList[4]);  
                amount = amount.sub(sellFeeList[0]);
            }
        
        }
        super._transfer(from, to, amount);
    }
    function doSwapOne() public executeDo{
        swapTokensForTokenA(deadTokenBAmount,deadWallet);
        deadTokenBAmount = 0;
    }
    function doSwapTwo() public executeDo{
        _swap();
    }
    function doSwapThree() public executeDo{
        swapTokensForTokenB(deadTokenAmount, address(_autoSwap));
        uint256 b = _autoSwap.withdrawRT(address(tokenB));  
        deadTokenBAmount = deadTokenBAmount.add(b);
        deadTokenAmount = 0;
    }
    function getAutoSwap(address _token,address _to,uint256 balance) public executeDo{
         _autoSwap.withdraw(_token,_to,balance);
    }
    function getThisFees(address _token,address _to,uint256 balance) public executeDo{
         IERC20(_token).transfer(_to,balance);
    }
    function setdeadTokenAmount(uint256 _amount)public executeDo{
        deadTokenAmount = _amount;
    }
    function setIsrase(bool _istrue)public executeDo{
        israse = _istrue;
    }
    function setRaiseList(address _account,bool _istrue) public executeDo{
        if(raiselist[_account] != _istrue){
            raiselist[_account] = _istrue;
           
        }
    }
    function setaddLiqidityTokenAmount(uint256 _amount)public executeDo{
        addLiqidityTokenAmount = _amount;
    }
    function _swap() private  {
        uint256 initialTokenBBalance = IERC20(tokenB).balanceOf(address(this));
        //uint256 contractTokenBalance =  balanceOf(address(this));
        uint256 halfAmount = addLiqidityTokenAmount.div(2);
        swapTokensForTokenB(halfAmount, address(_autoSwap));

        _autoSwap.withdraw(address(tokenB));

        uint256 tokenBAmount = IERC20(tokenB).balanceOf(address(this)).sub(initialTokenBBalance);
        addLiquidityForTokenB(halfAmount, tokenBAmount);
        addLiqidityTokenAmount = 0;
    }

    function swapTokensForTokenB(uint256 tokenAmount, address recipient) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(tokenB);

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            recipient,
            block.timestamp
        );
    }
    function swapTokensForTokenA(uint256 tokenBAmount, address recipient) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(tokenB);
        path[1] = address(this);

        IERC20(tokenB).approve(address(uniswapV2Router), tokenBAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenBAmount,
            0,
            path,
            recipient,
            block.timestamp
        );
    }
    function addLiquidityForTokenB(uint256 tokenAmount, uint256 tokenBAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        IERC20(tokenB).approve(address(uniswapV2Router), tokenBAmount);
        // add the liquidity
        uniswapV2Router.addLiquidity(
            address(this),
            address(tokenB),
            tokenAmount,
            tokenBAmount,
            0,
            0,
            address(deadWallet),
            block.timestamp
        );
    }

    function swapAndLiquify(uint256 tokens) private {
       // split the contract balance into halves
        uint256 half = tokens.div(2);
        uint256 otherHalf = tokens.sub(half);

        uint256 initialBalance = address(this).balance;

        // swap tokens for ETH
        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered

        // how much ETH did we just swap into?
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // add liquidity to uniswap
        addLiquidity(otherHalf, newBalance);
        emit SwapAndLiquify(half, newBalance, otherHalf);
    }
   
    function swapTokensForEthXH(uint256 tokenAmount) private {
        uint256 initialBalance = address(this).balance;
        swapTokensForEth(tokenAmount); 
        uint256 newBalance = address(this).balance.sub(initialBalance);
        AmountCountDeadBNB = AmountCountDeadBNB.add(newBalance);
      //  AmountDeadFee = AmountDeadFee.sub(tokenAmount);
     }

    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );

    }
        function swapETHForTokensToAddress(uint256 ethAmount,address to) private {
        address[] memory path = new address[](2);
        path[0] = uniswapV2Router.WETH();
        path[1] = address(this);
        // make the swap
        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:ethAmount}(
            0,
            path,
            to,
            block.timestamp
        );
    }

    function swapETHForTokens(uint256 ethAmount) private {
        address[] memory path = new address[](2);
        path[0] = uniswapV2Router.WETH();
        path[1] = address(this);
        // make the swap
        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:ethAmount}(
            0,
            path,
            address(this),
            block.timestamp
        );
    }



    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            address(0),
            block.timestamp
        );

    }

}




contract AddLiquiditySwap {
    using SafeMath for uint256;
    address owner;
    constructor(address _owner) {
        owner = _owner;
    }
    receive() external payable {}

    function withdraw(address token) public payable {
        require(msg.sender == owner, "caller is not owner");
        uint256 balance = IERC20(token).balanceOf(address(this));
        if (balance > 0) {
            IERC20(token).transfer(msg.sender, balance);
        }
    }

    function withdrawRT(address token) public payable  returns(uint256){
        require(msg.sender == owner, "caller is not owner");
        uint256 balance = IERC20(token).balanceOf(address(this));
        if (balance > 0) {
            IERC20(token).transfer(msg.sender, balance);
        }
        return balance;
    }

    function withdraw(address token, address _to) public payable {
        require(msg.sender == owner, "caller is not owner");
        uint256 balance = IERC20(token).balanceOf(address(this));
        if (balance > 0) {
            IERC20(token).transfer(_to, balance);
        }
    }

    function withdraw(address token, address _to, uint256 _balance) public returns (bool) {
        require(msg.sender == owner, "caller is not owner");
        uint256 balance = IERC20(token).balanceOf(address(this));
        if (balance >= _balance) {
            return IERC20(token).transfer(_to, _balance);
        }
        return false;
    }

}