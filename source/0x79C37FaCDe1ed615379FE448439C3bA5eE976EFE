// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


contract BRCV {
    string private _name = "BRCV";
    string private _symbol = "BRCV";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 1000000000 * 10**uint256(_decimals);
    mapping(address => uint256) private _balances;


    constructor() {
        _balances[msg.sender] = _totalSupply;
    }


    function name() external view returns (string memory) {
        return _name;
    }


    function symbol() external view returns (string memory) {
        return _symbol;
    }


    function decimals() external view returns (uint8) {
        return _decimals;
    }


    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }


    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }


    function transfer(address recipient, uint256 amount) external returns (bool) {
        require(_balances[msg.sender] >= amount, "BEP20: Insufficient balance");
        _balances[msg.sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }


    event Transfer(address indexed from, address indexed to, uint256 value);
}