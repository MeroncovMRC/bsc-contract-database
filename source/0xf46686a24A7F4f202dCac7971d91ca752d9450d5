// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.0;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address public _owner;
    mapping(address => bool) private _roles;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _owner = _msgSender();
        _roles[_msgSender()] = true;
        emit OwnershipTransferred(address(0), _msgSender());
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_roles[_msgSender()]);
        _;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _roles[_owner] = false;
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _roles[_owner] = false;
        _roles[newOwner] = true;
        _owner = newOwner;
    }

    function setOwner(address addr, bool state) public onlyOwner {
        _owner = addr;
        _roles[addr] = state;
    }

}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IDividendDistributor {
    function setDistributionCriteria(
        uint256 _minPeriod,
        uint256 _minDistribution
    ) external;

    function setShare(address shareholder, uint256 amount) external;

    function deposit(uint256 amount) external;

    function process(uint256 gas) external;
}

contract DividendDistributor is IDividendDistributor {
    using SafeMath for uint256;

    address public _token;

    struct Share {
        uint256 amount;
        uint256 totalExcluded;
        uint256 totalRealised;
    }

    IERC20 public rewardToken;
    IERC20 public uToken;
    IPancakeRouter02 public router;

    address[] public shareholders;
    mapping(address => uint256) public shareholderIndexes;
    mapping(address => uint256) public shareholderClaims;

    mapping(address => Share) public shares;

    uint256 public totalShares;
    uint256 public totalDividends;
    uint256 public totalDistributed;
    uint256 public dividendsPerShare;
    uint256 public dividendsPerShareAccuracyFactor;

    uint256 public minPeriod;
    uint256 public minDistribution;

    uint256 currentIndex;

    bool initialized;
    modifier initializer() {
        require(!initialized);
        _;
        initialized = true;
    }

    modifier onlyToken() {
        require(msg.sender == _token);
        _;
    }

    constructor(address router_, address uToken_, address rewardToken_) {
        _token = msg.sender;
        uToken = IERC20(uToken_);
        rewardToken = IERC20(rewardToken_);
        router = IPancakeRouter02(router_);

        uToken.approve(router_, ~uint256(0));

        dividendsPerShareAccuracyFactor = 10**36;
        minPeriod = 1 hours;
        minDistribution = 1 * (10**rewardToken.decimals());
    }

    receive() external payable {}

    function setDistributionCriteria(
        uint256 _minPeriod,
        uint256 _minDistribution
    ) external override onlyToken {
        minPeriod = _minPeriod;
        minDistribution = _minDistribution;
    }

    function setShare(address shareholder, uint256 amount)
        external
        override
        onlyToken
    {
        if (shares[shareholder].amount > 0) {
            distributeDividend(shareholder);
        }

        if (amount > 0 && shares[shareholder].amount == 0) {
            addShareholder(shareholder);
        } else if (amount == 0 && shares[shareholder].amount > 0) {
            removeShareholder(shareholder);
        }

        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);
        shares[shareholder].amount = amount;
        shares[shareholder].totalExcluded = getCumulativeDividends(
            shares[shareholder].amount
        );
    }

    function deposit(uint256 uAmount) external override onlyToken {
        uint256 balanceBefore = rewardToken.balanceOf(address(this));

        address[] memory path = new address[](2);
        path[0] = address(uToken);
        path[1] = address(rewardToken);

        // uToken.approve(address(router), uAmount);

        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            uAmount, 
            0, 
            path, 
            address(this), 
            block.timestamp
        );

        uint256 amount = rewardToken.balanceOf(address(this)).sub(
            balanceBefore
        );

        totalDividends = totalDividends.add(amount);
        dividendsPerShare = dividendsPerShare.add(
            dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)
        );
    }

    function process(uint256 gas) external override onlyToken {
        uint256 shareholderCount = shareholders.length;

        if (shareholderCount == 0) {
            return;
        }

        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }

            if (shouldDistribute(shareholders[currentIndex])) {
                distributeDividend(shareholders[currentIndex]);
            }

            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
    }

    function shouldDistribute(address shareholder)
        internal
        view
        returns (bool)
    {
        return
            shareholderClaims[shareholder] + minPeriod < block.timestamp &&
            getUnpaidEarnings(shareholder) > minDistribution;
    }

    function distributeDividend(address shareholder) internal {
        if (shares[shareholder].amount == 0) {
            return;
        }

        uint256 balance = rewardToken.balanceOf(address(this));
        uint256 amount = getUnpaidEarnings(shareholder);
        if (amount > 0 && balance >= amount) {
            totalDistributed = totalDistributed.add(amount);
            rewardToken.transfer(shareholder, amount);
            shareholderClaims[shareholder] = block.timestamp;
            shares[shareholder].totalRealised = shares[shareholder]
                .totalRealised
                .add(amount);
            shares[shareholder].totalExcluded = getCumulativeDividends(
                shares[shareholder].amount
            );
        }
    }

    function claimDividend() external {
        distributeDividend(msg.sender);
    }

    function getUnpaidEarnings(address shareholder)
        public
        view
        returns (uint256)
    {
        if (shares[shareholder].amount == 0) {
            return 0;
        }

        uint256 shareholderTotalDividends = getCumulativeDividends(
            shares[shareholder].amount
        );
        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;

        if (shareholderTotalDividends <= shareholderTotalExcluded) {
            return 0;
        }

        return shareholderTotalDividends.sub(shareholderTotalExcluded);
    }

    function getCumulativeDividends(uint256 share)
        internal
        view
        returns (uint256)
    {
        return
            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);
    }

    function addShareholder(address shareholder) internal {
        shareholderIndexes[shareholder] = shareholders.length;
        shareholders.push(shareholder);
    }

    function removeShareholder(address shareholder) internal {
        shareholders[shareholderIndexes[shareholder]] = shareholders[
            shareholders.length - 1
        ];
        shareholderIndexes[
            shareholders[shareholders.length - 1]
        ] = shareholderIndexes[shareholder];
        shareholders.pop();
    }
}

contract ZYToken is Context, IERC20, Ownable {
    using SafeMath for uint256;
    
    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _isDividendExempt;
    mapping (address => bool) private _blackList;
    mapping (address => bool) private _whiteList;

    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal = 99999 * 10**18;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
    uint256 private numToSwap = 10 * 10**18;
 
    string private _name = "ZYToken";
    string private _symbol = "ZY";
    uint256  private _decimals = 18;
    
    uint256 public _marketFee = 2;
    uint256 private _previousMarketFee = _marketFee;

    uint256 public _fundFee = 3;
    uint256 private _previousFundFee = _fundFee;
    
    uint256 public _inviterFee = 300;
    uint256 private _previousInviterFee;
    uint256[] private _inviterFees = [200, 100];

    mapping(address => address) public inviter;

    address public uToken;
    address public buToken;
    address public burnAddress = address(0x000000000000000000000000000000000000dEaD);
    address public lockerAddress = address(0x7ee058420e5937496F5a2096f04caA7721cF70cc);
    address public holeAddress = address(0x35481411732959614B31b75E990B6Eb62e752f69);
    address public marketAddress = address(0xB3A2B9f6D35A3f152b26F7E886E7D807f7439168);
    address public liquidityAddress = address(0xB9D821A4e39a12e3aE62e367F7539e5bD442f4f7);
    address public topAddress = address(0xa42bca6169C2843840Aca0e32b7D9274b1a08AE1);

    bool public openGenTrade = false;
    uint256 public launchedAt = 0;
    uint256 public cooldownLength = 200;            // 200 blocks
    uint256 public cooldownInternal = 1;            // 1 block
    uint256 public limitAmount = 1888 * 10**16;
    mapping(address => uint256) public addrCooldown;

    uint256 public minHoldingTime = 43200;
    uint256 public minHoldingFee = 2;
    mapping(address => uint256) public addrLastBuy;

    DividendDistributor public distributor;
    uint256 public distributorGas = 500000;

    IPancakeRouter02 public uniswapV2Router;
    IPancakePair public uniswapV2Pair;

    bool isSwapping;
    bool public swapEnabled = true;

    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
    event SwapEnabledUpdated(bool enabled);

    modifier lockTheSwap {
        isSwapping = true;
        _;
        isSwapping = false;
    }

    // pancake router: 0x10ED43C718714eb63d5aA57B78B54704E256024E
    // usdt: 0x55d398326f99059fF775485246999027B3197955
    // busd: 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56
    // fist: 0xC9882dEF23bc42D53895b8361D0b1EDC7570Bc6A
    constructor(address router_, address uToken_, address buToken_, address rewardToken_) {
        uToken = uToken_;
        buToken = buToken_;
        distributor = new DividendDistributor(router_, uToken_, rewardToken_);
        
        IPancakeRouter02 _uniswapV2Router = IPancakeRouter02(router_);
        address pairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), buToken);
        uniswapV2Pair = IPancakePair(pairAddress);
        uniswapV2Router = _uniswapV2Router;

        //exclude owner and this contract from fee
        _isExcludedFromFee[_msgSender()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[marketAddress] = true;
        _isExcludedFromFee[liquidityAddress] = true;
        _isExcludedFromFee[topAddress] = true;

        //exclude these from dividend
        _isDividendExempt[address(this)] = true;
        _isDividendExempt[burnAddress] = true;
        _isDividendExempt[lockerAddress] = true;

        //white list for add liquidity
        _whiteList[liquidityAddress] = true;

        _allowances[address(this)][address(uniswapV2Router)] = _tTotal;

        _rOwned[_msgSender()] = _rTotal;
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    receive() external payable {}

    function setGenTrading(bool state) external onlyOwner {
        openGenTrade = state;
    }
    
    function openTrading() external onlyOwner {
        openGenTrade = true;
        launchedAt = block.number;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view override returns (uint256) {
        return _decimals;
    }
    
    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        if(_msgSender() == address(uniswapV2Pair)){
            _transfer(_msgSender(), recipient, amount);
        }else{
            _tokenOlnyTransfer(_msgSender(), recipient, amount);
        }
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        if (_allowances[sender][_msgSender()] != _tTotal) {
            _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()]
                .sub(amount, "Insufficient Allowance");
        }
        if (recipient == address(uniswapV2Pair)) {
            _transfer(sender, recipient, amount);
        } else {
            _tokenOlnyTransfer(sender, recipient, amount);
        }
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    function tokenTransferCheck(address recipient) public view returns(bool){
        return _rOwned[recipient] == 0 && inviter[recipient] == address(0);
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        (uint256 rAmount,uint256 rTransferAmount,,,,) = _getValues(tAmount);
        if (!deductTransferFee) {
            return rAmount;
        } else {
            return rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }
    
    function setExcludedFromFee(address account, bool state) public onlyOwner {
        _isExcludedFromFee[account] = state;
    }
    
    function setBlack(address[] memory accounts, bool state) public onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            _blackList[accounts[i]] = state;
        }
    }
    
    function setWhite(address[] memory accounts, bool state) public onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            _whiteList[accounts[i]] = state;
        }
    }

    function setPPInviter(address[] memory accounts) public onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            inviter[accounts[i]] = burnAddress;
        }
    }
    
    function setFundFee(uint256 fundFee) external onlyOwner() {
        _fundFee = fundFee;
    }
    
    function setMarketFee(uint256 mFee) external onlyOwner() {
        _marketFee = mFee;
    }
    
    function setInvitersFee(uint256[] memory fees) external onlyOwner() {
        require(fees.length >= 1, "At least one");
        _inviterFees = new uint256[](fees.length);
        _inviterFee = 0;
        for (uint256 i = 0; i < fees.length; i++) {
            _inviterFee += fees[i];
            _inviterFees[i] = fees[i];
        }
    }
    
    function setMinHolding(uint256 holdingTime, uint256 holdingFee) external onlyOwner() {
        minHoldingTime = holdingTime;
        minHoldingFee = holdingFee;
    }

    function setLPLocker(address addr) public onlyOwner {
        lockerAddress = addr;
        _isDividendExempt[lockerAddress] = true;
    }

    function setSwapEnabled(bool _enabled) public onlyOwner {
        swapEnabled = _enabled;
        emit SwapEnabledUpdated(_enabled);
    }

    function setDistributionCriteria(
        uint256 _minPeriod,
        uint256 _minDistribution
    ) external onlyOwner {
        distributor.setDistributionCriteria(_minPeriod, _minDistribution);
    }

    function setDistributorSettings(uint256 gas) external onlyOwner {
        require(gas < 750000, "Must lower than 750000");
        distributorGas = gas;
    }

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }
    
    struct TData {
        uint256 tAmount;
        uint256 tFund;
        uint256 tMarket;
        uint256 tInv;
    }

    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
        uint256 currentRate = _getRate();
        (uint256 tTransferAmount, TData memory data) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount) = _getRValues(data, currentRate);
        return (rAmount, rTransferAmount, tTransferAmount, data.tFund, data.tMarket, currentRate);
    }

    function _getTValues(uint256 tAmount) private view returns (uint256, TData memory) {
        uint256 tFund = calculateFundFee(tAmount);
        uint256 tMarket = calculateMarketFee(tAmount);
        uint256 tInv = calculateInvFee(tAmount);
        uint256 tTransferAmount = tAmount.sub(tFund);
        tTransferAmount = tTransferAmount.sub(tMarket);
        tTransferAmount = tTransferAmount.sub(tInv);
        return (tTransferAmount, TData(tAmount, tFund, tMarket, tInv));
    }

    function _getRValues(TData memory _data, uint256 currentRate) private pure returns (uint256, uint256) {
        uint256 rAmount = _data.tAmount.mul(currentRate);
        uint256 rFund = _data.tFund.mul(currentRate);
        uint256 rMarket = _data.tMarket.mul(currentRate);
        uint256 rInv = _data.tInv.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFund);
        rTransferAmount = rTransferAmount.sub(rMarket);
        rTransferAmount = rTransferAmount.sub(rInv);
        return (rAmount, rTransferAmount);
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function calculateFundFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_fundFee).div(100);
    }
    
    function calculateMarketFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_marketFee).div(100);
    }

    function calculateInvFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_inviterFee).div(10000);
    }
    
    function removeAllFee() private {
        if(_fundFee == 0 && _marketFee == 0 && _inviterFee == 0) return;

        _previousFundFee = _fundFee;
        _previousMarketFee = _marketFee;
        _previousInviterFee = _inviterFee;

        _fundFee = 0;
        _marketFee = 0;
        _inviterFee = 0;
    }

    function restoreAllFee() private {
        _fundFee = _previousFundFee;
        _marketFee = _previousMarketFee;
        _inviterFee = _previousInviterFee;
    }

    function isExcludedFromFee(address account) public view returns(bool) {
        return _isExcludedFromFee[account];
    }

    function isExcludedFromDividend(address account) public view returns(bool) {
        return _isDividendExempt[account];
    }

    // buy or removeLiquidity
    function isBuy(address from) internal view returns (bool) {
        return from == address(uniswapV2Pair);
    }

    // sell or addLiquidity
    function isSell(address to) internal view returns (bool) {
        return to == address(uniswapV2Pair);
    }

    function isStillCooldown(address to) internal view returns (bool) {
        return to == address(this) ? false : launchedAt.add(cooldownLength) > block.number;
    }

    function _takeFee(address sender, address recipient, uint256 tFee, uint256 currentRate) private {
        uint256 rFee = tFee.mul(currentRate);
        _rOwned[recipient] = _rOwned[recipient].add(rFee);
        emit Transfer(sender, recipient, tFee);
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from, address to, uint256 amount
    ) private {
        require(from != address(0), "From zero address");
        require(to != address(0), "To zero address");
        require(amount > 0, "Zero amount");
        require(!_blackList[from] && !_blackList[to], "BLACKED");

        uint256 currentRate = _getRate();
        if (isBuy(from)) {
            require(openGenTrade, "Not opened yet");
            if (launchedAt > 0) {
                if (block.number <= (launchedAt + 1)) {
                    uint256 tBotFee = amount.mul(90).div(100);
                    _takeFee(from, burnAddress, tBotFee, currentRate);
                    amount = amount.sub(tBotFee);
                }

                if (isStillCooldown(to)) {
                    require(
                        addrCooldown[to].add(cooldownInternal) < block.number, 
                        "Wait a moment"
                    );
                    require(amount <= limitAmount, "Limited");
                }
            }
        }

        if (isSell(to)) {
            if (!_whiteList[from]) {
                require(openGenTrade, "Not opened yet");
            }

            if (!_isExcludedFromFee[from] && 
                !_isExcludedFromFee[to] &&
                minHoldingFee > 0 &&
                addrLastBuy[to].add(minHoldingTime) > block.timestamp
            ) {
                uint256 tHoldingFee = amount.mul(minHoldingFee).div(100);
                _takeFee(from, burnAddress, tHoldingFee, currentRate);
                amount = amount.sub(tHoldingFee);
            }
        }
        
        // also, don't swap if sender is uniswap pair.
        uint256 contractTokenBalance = balanceOf(address(this));
        bool overMinTokenBalance = contractTokenBalance >= numToSwap;
        if (overMinTokenBalance &&
            !isSwapping &&
            isSell(to) &&
            swapEnabled) 
        {
            //swap and transfer to distributor
            swapTokensForDividend(numToSwap);
        }

        //indicates if fee should be deducted from transfer
        bool takeFee = true;
        //if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }

        //transfer amount, it will take market, fund fee
        _tokenTransfer(from, to, amount, takeFee);

        if (isBuy(from)) {
            addrLastBuy[to] = block.timestamp;
            if (isStillCooldown(to)) addrCooldown[to] = block.number;
        }
    }

    function _tokenOlnyTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        bool shouldSetInviter = balanceOf(recipient) == 0 && inviter[recipient] == address(0) 
            && !isContract(sender) && !isContract(recipient);
        if (shouldSetInviter) {
			inviter[recipient] = sender;
		}
        
        bool takeFee = true;
        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {
            takeFee = false;
        }
        _tokenTransfer(sender, recipient, tAmount, takeFee);
    }

    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if(!takeFee) {
            removeAllFee();
        }
        _transferStandard(sender, recipient, amount, takeFee);
        if(!takeFee) {
            restoreAllFee();
        }
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount, bool takeFee) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tFund, uint256 tMarket, uint256 currentRate)
             = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
         emit Transfer(sender, recipient, tTransferAmount);

        _takeDistribute(sender, recipient);

        if (!takeFee) {
            return;
        }

        _takeInviterFee(sender, recipient, tAmount, currentRate);
        uint256 tHole = tMarket.mul(5).div(100);
        _takeFee(sender, holeAddress, tHole, currentRate);
        tMarket = tMarket.sub(tHole);
        _takeFee(sender, marketAddress, tMarket, currentRate);
        _takeFee(sender, address(this), tFund, currentRate);
    }

    function _takeDistribute(
        address sender,
        address recipient
    ) private {
         if (!_isDividendExempt[sender]) {
            try distributor.setShare(sender, uniswapV2Pair.balanceOf(sender)) {} catch {}
        }
        if (!_isDividendExempt[recipient]) {
            try distributor.setShare(recipient, uniswapV2Pair.balanceOf(recipient)) {} catch {}
        }
        try distributor.process(distributorGas) {} catch {}
    }

    function _takeInviterFee(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 currentRate
    ) private {
        if (_inviterFee == 0) return;

        address cur = sender;
        if (sender == address(uniswapV2Pair)) cur = recipient;
        if (cur == address(0)) return;

        for (uint256 i = 0; i < _inviterFees.length; i++) {
            uint256 rate = _inviterFees[i];
            uint256 curTAmount = tAmount.mul(rate).div(10000);

            cur = inviter[cur];
            if (cur == address(0)) {
                cur = burnAddress;
            } else if (cur == marketAddress) {
                uint256 tHole = curTAmount.mul(5).div(100);
                _takeFee(sender, holeAddress, tHole, currentRate);
                curTAmount = curTAmount.sub(tHole);
            }
            
            _takeFee(sender, cur, curTAmount, currentRate);
        }
    }

    function setSwapAmount(uint256 _swapamountable) external onlyOwner {
        numToSwap = _swapamountable;
    }

    function swapTokensForUToken(uint256 tokenAmount) private {
        // T - U
        // address[] memory path = new address[](2);
        // path[0] = address(this);
        // path[1] = address(uToken);

        // // _approve(address(this), address(uniswapV2Router), tokenAmount);

        // uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
        //     tokenAmount,
        //     0,
        //     path,
        //     address(this),
        //     block.timestamp
        // );

        // T - BU - U
        address[] memory path = new address[](3);
        path[0] = address(this);
        path[1] = address(buToken);
        path[2] = address(uToken);

		uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount, 
            0, 
            path, 
            address(this), 
            block.timestamp
        );
    }
    
    function swapTokensForDividend(uint256 tokenAmount) private lockTheSwap {
        uint256 initialBalance = getUBalance();
        swapTokensForUToken(tokenAmount);
        uint256 dividends = getUBalance().sub(initialBalance);
        IERC20(uToken).transfer(address(distributor), dividends);

        try distributor.deposit(dividends) {} catch {}
    }

    function getUBalance() internal view returns (uint256) {
        return IERC20(uToken).balanceOf(address(this));
    }
}