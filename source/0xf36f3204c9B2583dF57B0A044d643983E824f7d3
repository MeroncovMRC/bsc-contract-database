
// File: /contracts/rules/interactionRules/InvestorHasNTT.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "../../interfaces/INTT1155.sol";
import "../../utils/ValidationErrors.sol";

/// @title InvestorHasNTT
/// @notice interaction Rule, which checks if the address has at least one active necessary NTT
/// @dev addresses of NTT to check has to be added during deploying of the contract
contract InvestorHasNTT is ValidationErrors, Ownable {
    /// @dev list of addresses of NTTtokens, which address must have to pass the validation
    ///      (at least one of the tokens from the list)
    address[] private nttTokenContracts;
    uint256 private MAX_LENGTH = 256;

    constructor(address[] memory _nttTokenContracts) {
        nttTokenContracts = _nttTokenContracts;
    }

    /// @dev the Owner of the smart contract can set the list of NTTtokens to check
    function setNTTsToCheck(address[] calldata _nttsToUse) external onlyOwner {
        nttTokenContracts = _nttsToUse;
    }

    /// @notice returns the list of NTTtokens which are checked now
    function getNTTsToCheck()
        external
        view
        returns (address[] memory arrOfNtt)
    {
        arrOfNtt = nttTokenContracts;
    }

    /// @notice checks if the `_accountsToCheck` pass the conditions of the rule
    /// @param _accountsToCheck list of addresses to check
    /// @return true if all addresses passed the validation
    function checkRule(
        address[] memory _accountsToCheck
    ) external view returns (bool) {
        require(
            _accountsToCheck.length <= MAX_LENGTH,
            "Too many addresses to check the rule"
        );
        for (uint256 i = 0; i < _accountsToCheck.length; i++) {
            _checkIfHasSoulbID(_accountsToCheck[i]);
        }
        return true;
    }

    /// @dev function checks if the `_account` has at least one active NTTtoken on its balance
    function _checkIfHasSoulbID(address _account) internal view {
        uint256 fit = 0;
        for (uint256 i = 0; i < nttTokenContracts.length; i++) {
            INTT1155 ntt = INTT1155(nttTokenContracts[i]);
            uint256[] memory nttList = ntt.nttBalanceOf(_account);
            if (uint256(ntt.nttStatus(nttList[nttList.length - 1])) == 0) {
                fit++;
                break;
            }
        }

        if (fit == 0) {
            revert ValidationFailed(_account, address(this), DONT_HAVE_NTT);
        }
    }
}


// File: /contracts/utils/ValidationErrors.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ValidationErrors {
    bytes32 public constant ERROR_MESSAGE = "Validation failed";
    bytes32 public constant DONT_HAVE_NTT = "Investor hasn't SoulbID";
    bytes32 public constant PROHIBITED_INPUT = "Prohibited value of input";

    error ValidationFailed(
        address _investorToCheck,
        address _ruleNotPassed,
        bytes32 _errorMessage
    );

    error ProhibitedAddressInput(
        address _prohibitedAddress,
        bytes32 _errorMessage
    );

    error ProhibitedNumericInput(
        uint256 _prohibitedNumeric,
        bytes32 _errorMessage
    );
}


// File: /contracts/interfaces/INTT1155.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

abstract contract INTT1155 {
    enum TokenStatus {
        ACTIVE,
        EXPIRED,
        REVOKED
    }

    enum ContractType {
        PERSONAL,
        PERSONAL_ENHANCED,
        ACCREDITED,
        CORPORATE,
        CORPORATE_ENHANCED,
        CORPORATE_MANAGER
    }

    /**
     * @dev metadata which receives to mint token
     */
    struct Metadata {
        string investorType; // P, C+, CM
        string countryCode; // P, C+
        bool isActive; //P, C+, CM //upgradable
        uint verificationTime; //P, C+, CM
        uint expirationPeriod; // P, C+ //upgradable
        string ipfsUri; //P, C+, CM
        string identifierSBID; //C+, CM
        string companyName; //C+
        string companyType; //C+
        string registrationNumber; //C+
    }

    /**
     * @dev Computed metadata which shows to user
     *
     * isValidExpirationTime - value which always recalculates to to check is token expired or not
     */
    struct ComputedMetadata {
        string investorType;
        string countryCode;
        bool isActive;
        uint verificationTime;
        uint expirationPeriod;
        string ipfsUri;
        bool isValidExpirationTime;
        //metadata related to "C+" NTTs. Is empty for "P"
        string identifierSBID;
        string companyName;
        string companyType;
        string registrationNumber;
    }

    modifier isExistNTT(uint256 tokenId) virtual {
        _;
    }

    modifier isNotExistNTT(uint256 tokenId) virtual {
        _;
    }

    function activate(uint256 tokenId) public virtual;

    function revokeSafe(uint256 tokenId) public payable virtual;

    function revoke(uint256 tokenId, string memory uri) public virtual;

    function statusActive() public view virtual returns (TokenStatus);

    function statusExpired() public view virtual returns (TokenStatus);

    function statusRevoked() public view virtual returns (TokenStatus);

    function updateNttExpirationPeriod(
        uint256 tokenId,
        uint expirationPeriod
    ) public virtual;

    function nttMintSafe(uint256 tokenId) public payable virtual;

    function nttMintConfirm(
        uint256 tokenId,
        address tokenReceiver,
        Metadata memory metadata
    ) public virtual;

    function nttStatus(
        uint256 tokenId
    ) public view virtual returns (TokenStatus);

    function nttOwnerOf(uint256 tokenId) public view virtual returns (address);

    function nttBalance() public view virtual returns (uint256[] memory);

    function nttBalanceOf(
        address account
    ) public view virtual returns (uint256[] memory);

    function getNttMetadata(
        uint256 tokenId
    ) public view virtual returns (ComputedMetadata memory);

    function getContractType() public view virtual returns (ContractType);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

