
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/access/Controller.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

import "@openzeppelin/contracts/access/Ownable.sol";

contract Controller is Ownable {
    mapping(address => bool) public adminList;

    function setAdmin(address user_, bool status_) public onlyOwner {
        adminList[user_] = status_;
    }

    modifier onlyAdmin(){
        require(adminList[msg.sender], "Controller: Msg sender is not the admin");
        _;
    }
}

// File: contracts/interfaces/IEntryOverrideOracle.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;



interface IEntryOverrideOracle{
    function getOverrides(string  memory project_id, address wallet) external view returns (uint256[2] memory allocations,uint256 entryPrice,bool applyOverride);
}



// File: contracts/interfaces/ILockedStaking.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;



interface ILockedStaking{
    function maxStakedInPool(address, string calldata) external view returns (uint256);
}



// File: contracts/oracles/EntryOverrideOracle.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;


import "../access/Controller.sol";
import "../interfaces/IEntryOverrideOracle.sol";
import "../interfaces/ILockedStaking.sol";
struct EntryOverride{
    uint256[2] allocations;
    uint256 entryPrice;
    bool overide;
}
error PoolLimitExceeded();
error MaxLessThanMinAllocation();
contract EntryOverrideOracle is Controller,IEntryOverrideOracle{
    // staking id goes here
    mapping(string=>mapping(string=>EntryOverride)) public PoolOverrides;
    mapping(string=>string[]) internal poolsListPerProject; // must be in priority order of best to worst
    uint8 public poolsListLimit = 10;
    ILockedStaking public LockedStaking;
    function getOverrides(string  memory project_id, address wallet) public view returns (uint256[2] memory allocations, uint256 entryPrice,bool applyOverride ){
        string[] storage poolsList = poolsListPerProject[project_id];
        for(uint8 i; i < poolsList.length; i++){
            if(LockedStaking.maxStakedInPool(wallet, poolsList[i])>0){
                EntryOverride storage e = PoolOverrides[project_id][poolsList[i]];
                allocations = e.allocations;
                entryPrice = e.entryPrice;
                applyOverride = e.overide;
                if(applyOverride){
                    return (allocations,entryPrice,applyOverride);
                }
               
            }
        }
        applyOverride = false;
    } 
    function setAllocation(string  memory project_id,string  memory stakingPool_id, uint256[2] calldata allocations,uint256 entryPrice,bool _override)external onlyAdmin{
        if(allocations[1]< allocations[0]){
            revert MaxLessThanMinAllocation();
        }
        EntryOverride memory o = EntryOverride(
            allocations,
            entryPrice,
            _override
        );
        PoolOverrides[project_id][stakingPool_id] = o;
    }
    function setLockedStakingAddress(address _lockedStaking) external onlyAdmin{
        LockedStaking = ILockedStaking(_lockedStaking);
    }
    function setOrderedPoolsList(string memory project_id, string[] memory poolsListOrdered) external onlyAdmin{
        if(poolsListOrdered.length > poolsListLimit){
            revert PoolLimitExceeded();
        }
        poolsListPerProject[project_id] = poolsListOrdered;
    }
    // warn - don not have very limit gas cost might bloat
    function updatePoolLimit(uint8 _limit)external onlyAdmin{
        poolsListLimit =_limit;
    }
    function getPoolsList(string memory project_id) external view returns(string[] memory){
        return poolsListPerProject[project_id];
    }
    constructor(address _owner){
        adminList[msg.sender] = true;
        adminList[_owner] = true;
        transferOwnership(_owner);
    }
}


